Implementation smell,Namespace,Class,File,Method,Description
Long Method,Alsing.Windows.Forms.CoreLib,FormatLabelControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\FormatLabel\FormatLabelControl.cs,OnPaint,The method has 100 lines of code.
Long Method,Alsing.Windows.Forms.CoreLib,FormatLabelControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\FormatLabel\FormatLabelControl.cs,ApplyFormat,The method has 160 lines of code.
Long Method,Alsing.Windows.Forms.CoreLib,FormatLabelControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\FormatLabel\FormatLabelControl.cs,CreateRows,The method has 124 lines of code.
Long Method,Alsing.SourceCode,SyntaxDefinitionLoader,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Document\SyntaxDefinition\SyntaxDefinitionLoader.cs,ParseBlock,The method has 322 lines of code.
Long Method,Alsing.SourceCode,TextStyleDesignerDialog,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Document\SyntaxDefinition\TextStyle\TextStyleDesignerDialog.cs,InitializeComponent,The method has 130 lines of code.
Long Method,Alsing.Windows.Forms.SyntaxBox,EditViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\EditView\EditViewControl.cs,InsertEnter,The method has 100 lines of code.
Long Method,Alsing.Windows.Forms.SyntaxBox,EditViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\EditView\EditViewControl.cs,OnKeyDown,The method has 193 lines of code.
Long Method,Alsing.Windows.Forms.SyntaxBox,EditViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\EditView\EditViewControl.cs,OnMouseDown,The method has 126 lines of code.
Long Method,Alsing.Windows.Forms.SyntaxBox,EditViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\EditView\EditViewControl.cs,OnMouseMove,The method has 109 lines of code.
Long Method,Alsing.Windows.Forms.SyntaxBox,FindReplaceForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\Syntaxbox\Dialogs\FindReplace.cs,InitializeComponent,The method has 295 lines of code.
Long Method,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderRow,The method has 114 lines of code.
Long Method,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderText,The method has 128 lines of code.
Long Method,Alsing.Windows.Forms,InfoTipForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\InfoTip\InfoTipForm.cs,InitializeComponent,The method has 152 lines of code.
Long Method,Alsing.Design,CollectionEditorGui,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Design\CollectionEditorGui.cs,InitializeComponent,The method has 183 lines of code.
Long Method,Alsing.SourceCode.SyntaxDocumentParsers,DefaultParser,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Document\Parser\DefaultParser.cs,GetNextWord,The method has 151 lines of code.
Long Method,Alsing.SourceCode.SyntaxDocumentParsers,DefaultParser,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Document\Parser\DefaultParser.cs,InternalParseLine,The method has 144 lines of code.
Complex Method,Alsing.Windows.Forms.CoreLib,FormatLabelControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\FormatLabel\FormatLabelControl.cs,OnPaint,Cyclomatic complexity of the method is 22
Complex Method,Alsing.Windows.Forms.CoreLib,FormatLabelControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\FormatLabel\FormatLabelControl.cs,ApplyFormat,Cyclomatic complexity of the method is 45
Complex Method,Alsing.Windows.Forms.CoreLib,FormatLabelControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\FormatLabel\FormatLabelControl.cs,CreateWords,Cyclomatic complexity of the method is 10
Complex Method,Alsing.Windows.Forms.CoreLib,FormatLabelControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\FormatLabel\FormatLabelControl.cs,CreateRows,Cyclomatic complexity of the method is 33
Complex Method,Alsing.Windows.Forms.CoreLib,FormatLabelControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\FormatLabel\FormatLabelControl.cs,OnMouseUp,Cyclomatic complexity of the method is 9
Complex Method,Alsing.Windows.Forms.CoreLib,FormatLabelControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\FormatLabel\FormatLabelControl.cs,OnMouseMove,Cyclomatic complexity of the method is 9
Complex Method,Alsing.Windows.Forms.CoreLib,SplitViewChildControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\SplitView\SplitViewChildControl.cs,DoResize,Cyclomatic complexity of the method is 8
Complex Method,Alsing.Windows.Forms.CoreLib,SplitViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\SplitView\SplitViewControl.cs,DoResize,Cyclomatic complexity of the method is 8
Complex Method,Alsing.Windows.Forms.CoreLib,SplitViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\SplitView\SplitViewControl.cs,ReSize,Cyclomatic complexity of the method is 12
Complex Method,Alsing.SourceCode,SpanDefinition,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Document\SyntaxDefinition\SpanDefinition\SpanDefinition.cs,BuildLookupTable,Cyclomatic complexity of the method is 16
Complex Method,Alsing.SourceCode,SyntaxDefinitionLoader,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Document\SyntaxDefinition\SyntaxDefinitionLoader.cs,ParseLanguage,Cyclomatic complexity of the method is 9
Complex Method,Alsing.SourceCode,SyntaxDefinitionLoader,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Document\SyntaxDefinition\SyntaxDefinitionLoader.cs,ParseBlock,Cyclomatic complexity of the method is 162
Complex Method,Alsing.SourceCode,SyntaxDefinitionLoader,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Document\SyntaxDefinition\SyntaxDefinitionLoader.cs,ParseStyle,Cyclomatic complexity of the method is 20
Complex Method,Alsing.SourceCode,PatternList,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Document\SyntaxDefinition\Pattern\PatternList.cs,Add,Cyclomatic complexity of the method is 8
Complex Method,Alsing.SourceCode,SourceCodePrintDocument,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Document\Print\SourceCodePrintDocument.cs,OnPrintPage,Cyclomatic complexity of the method is 20
Complex Method,Alsing.SourceCode,SyntaxDocument,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Document\SyntaxDocument.cs,ParseSome,Cyclomatic complexity of the method is 12
Complex Method,Alsing.SourceCode,SyntaxDocument,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Document\SyntaxDocument.cs,ParseRows,Cyclomatic complexity of the method is 16
Complex Method,Alsing.SourceCode,SyntaxDocument,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Document\SyntaxDocument.cs,Undo,Cyclomatic complexity of the method is 10
Complex Method,Alsing.SourceCode,SyntaxDocument,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Document\SyntaxDocument.cs,InternalResetVisibleRows,Cyclomatic complexity of the method is 8
Complex Method,Alsing.SourceCode,SyntaxDocument,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Document\SyntaxDocument.cs,Redo,Cyclomatic complexity of the method is 9
Complex Method,Alsing.SourceCode,SyntaxDocument,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Document\SyntaxDocument.cs,GetStartBracketWord,Cyclomatic complexity of the method is 8
Complex Method,Alsing.SourceCode,SyntaxDocument,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Document\SyntaxDocument.cs,GetEndBracketWord,Cyclomatic complexity of the method is 8
Complex Method,Alsing.SourceCode,TextStyleUIEditor,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Document\SyntaxDefinition\TextStyle\TextStyleUIEditor.cs,PaintValue,Cyclomatic complexity of the method is 8
Complex Method,Alsing.Windows.Forms.SyntaxBox,EditViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\EditView\EditViewControl.cs,CopyAsRTF,Cyclomatic complexity of the method is 20
Complex Method,Alsing.Windows.Forms.SyntaxBox,EditViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\EditView\EditViewControl.cs,DoResize,Cyclomatic complexity of the method is 11
Complex Method,Alsing.Windows.Forms.SyntaxBox,EditViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\EditView\EditViewControl.cs,InsertEnter,Cyclomatic complexity of the method is 13
Complex Method,Alsing.Windows.Forms.SyntaxBox,EditViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\EditView\EditViewControl.cs,SetMouseCursor,Cyclomatic complexity of the method is 8
Complex Method,Alsing.Windows.Forms.SyntaxBox,EditViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\EditView\EditViewControl.cs,IsInputKey,Cyclomatic complexity of the method is 8
Complex Method,Alsing.Windows.Forms.SyntaxBox,EditViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\EditView\EditViewControl.cs,SetMaxHorizontalScroll,Cyclomatic complexity of the method is 8
Complex Method,Alsing.Windows.Forms.SyntaxBox,EditViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\EditView\EditViewControl.cs,MoveCaretToNextWord,Cyclomatic complexity of the method is 12
Complex Method,Alsing.Windows.Forms.SyntaxBox,EditViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\EditView\EditViewControl.cs,MoveCaretToPrevWord,Cyclomatic complexity of the method is 11
Complex Method,Alsing.Windows.Forms.SyntaxBox,EditViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\EditView\EditViewControl.cs,ScrollIntoView,Cyclomatic complexity of the method is 12
Complex Method,Alsing.Windows.Forms.SyntaxBox,EditViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\EditView\EditViewControl.cs,OnKeyDown,Cyclomatic complexity of the method is 77
Complex Method,Alsing.Windows.Forms.SyntaxBox,EditViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\EditView\EditViewControl.cs,OnKeyPress,Cyclomatic complexity of the method is 9
Complex Method,Alsing.Windows.Forms.SyntaxBox,EditViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\EditView\EditViewControl.cs,OnMouseDown,Cyclomatic complexity of the method is 22
Complex Method,Alsing.Windows.Forms.SyntaxBox,EditViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\EditView\EditViewControl.cs,OnMouseMove,Cyclomatic complexity of the method is 28
Complex Method,Alsing.Windows.Forms.SyntaxBox,EditViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\EditView\EditViewControl.cs,OnMouseUp,Cyclomatic complexity of the method is 9
Complex Method,Alsing.Windows.Forms.SyntaxBox,EditViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\EditView\EditViewControl.cs,OnDoubleClick,Cyclomatic complexity of the method is 12
Complex Method,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,InitGraphics,Cyclomatic complexity of the method is 22
Complex Method,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,Dispose,Cyclomatic complexity of the method is 19
Complex Method,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,SetBrackets,Cyclomatic complexity of the method is 8
Complex Method,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderAll2,Cyclomatic complexity of the method is 20
Complex Method,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderRow,Cyclomatic complexity of the method is 29
Complex Method,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,SetFont,Cyclomatic complexity of the method is 9
Complex Method,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderText,Cyclomatic complexity of the method is 29
Complex Method,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderSelectedText,Cyclomatic complexity of the method is 20
Complex Method,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderCaret,Cyclomatic complexity of the method is 13
Complex Method,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderMargin,Cyclomatic complexity of the method is 16
Complex Method,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderExpansion,Cyclomatic complexity of the method is 14
Complex Method,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderCollapsedSelection,Cyclomatic complexity of the method is 9
Complex Method,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,ColumnFromPixel,Cyclomatic complexity of the method is 14
Complex Method,Alsing.Windows.Forms,BaseControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\BaseControls\BaseControl.cs,WndProc,Cyclomatic complexity of the method is 8
Complex Method,Alsing.Windows.Forms,BaseListBoxControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\BaseControls\BaseListBoxControl.cs,WndProc,Cyclomatic complexity of the method is 9
Complex Method,Alsing.Windows.Forms,BasePanelControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\BaseControls\BasePanelControl.cs,WndProc,Cyclomatic complexity of the method is 9
Complex Method,Alsing.Design,CollectionEditorGui,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Design\CollectionEditorGui.cs,lstMembers_DrawItem,Cyclomatic complexity of the method is 9
Complex Method,Alsing.SourceCode.SyntaxDocumentExporters,CollapsingHTMLExporter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Document\Export\CollapsingHTMLExporter.cs,Export,Cyclomatic complexity of the method is 10
Complex Method,Alsing.SourceCode.SyntaxDocumentExporters,CollapsingHTMLExporter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Document\Export\CollapsingHTMLExporter.cs,write,Cyclomatic complexity of the method is 8
Complex Method,Alsing.SourceCode.SyntaxDocumentExporters,SimpleHTMLExporter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Document\Export\SimpleHTMLExporter.cs,write,Cyclomatic complexity of the method is 8
Complex Method,Alsing.SourceCode.SyntaxDocumentParsers,DefaultParser,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Document\Parser\DefaultParser.cs,MakeSame,Cyclomatic complexity of the method is 10
Complex Method,Alsing.SourceCode.SyntaxDocumentParsers,DefaultParser,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Document\Parser\DefaultParser.cs,GetNextWord,Cyclomatic complexity of the method is 31
Complex Method,Alsing.SourceCode.SyntaxDocumentParsers,DefaultParser,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Document\Parser\DefaultParser.cs,InternalParseLine,Cyclomatic complexity of the method is 24
Complex Method,Alsing.SourceCode.SyntaxDocumentParsers,DefaultParser,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Document\Parser\DefaultParser.cs,GetEndSegment,Cyclomatic complexity of the method is 9
Complex Method,Alsing.Drawing,DrawingTools,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Drawing\DrawingTools.cs,DrawBorder,Cyclomatic complexity of the method is 17
Complex Method,Alsing.Drawing,DrawingTools,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Drawing\DrawingTools.cs,DrawBorder,Cyclomatic complexity of the method is 29
Long Parameter List,Alsing.Windows.Forms.SyntaxBox,KeyboardAction,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\KeyboardAction.cs,KeyboardAction,The method has 6 parameters.
Long Parameter List,Alsing.SourceCode.SyntaxDocumentExporters,CollapsingHTMLExporter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Document\Export\CollapsingHTMLExporter.cs,RenderCollapsed,The method has 5 parameters.
Long Parameter List,Alsing.SourceCode.SyntaxDocumentParsers,ParseTools,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Document\Parser\ParseTools.cs,AddPatternString,The method has 6 parameters.
Long Parameter List,Alsing.Drawing,DrawingTools,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Drawing\DrawingTools.cs,DrawRaisedBorder,The method has 6 parameters.
Long Parameter List,Alsing.Drawing,DrawingTools,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Drawing\DrawingTools.cs,DrawSunkenBorder,The method has 6 parameters.
Long Parameter List,Alsing.Drawing,DrawingTools,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Drawing\DrawingTools.cs,DrawDesignTimeLine,The method has 5 parameters.
Long Parameter List,Alsing.Drawing,DrawingTools,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Drawing\DrawingTools.cs,DrawGrayImage,The method has 5 parameters.
Long Parameter List,Alsing.Drawing,DrawingTools,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Drawing\DrawingTools.cs,DrawTransparentImage,The method has 5 parameters.
Long Parameter List,Alsing.Drawing,DrawingTools,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Drawing\DrawingTools.cs,DrawInsertIndicatorH,The method has 5 parameters.
Long Parameter List,Alsing.Drawing,DrawingTools,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Drawing\DrawingTools.cs,DrawInsertIndicatorV,The method has 5 parameters.
Long Parameter List,Alsing.Drawing.GDI,GDIFont,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Drawing\GDI32\GDIFont.cs,GDIFont,The method has 6 parameters.
Long Parameter List,Alsing.Drawing.GDI,GDIFont,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Drawing\GDI32\GDIFont.cs,Init,The method has 6 parameters.
Long Parameter List,Alsing.Drawing.GDI,GDISurface,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Drawing\GDI32\GDISurface.cs,DrawString,The method has 5 parameters.
Long Parameter List,Alsing.Drawing.GDI,GDISurface,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Drawing\GDI32\GDISurface.cs,DrawTabbedString,The method has 5 parameters.
Long Parameter List,Alsing.Drawing.GDI,GDISurface,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Drawing\GDI32\GDISurface.cs,RenderTo,The method has 7 parameters.
Long Parameter List,Alsing.Drawing.GDI,GDISurface,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Drawing\GDI32\GDISurface.cs,FillRect,The method has 5 parameters.
Long Parameter List,Alsing.Drawing.GDI,GDISurface,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Drawing\GDI32\GDISurface.cs,FillRect,The method has 5 parameters.
Long Parameter List,Alsing.Drawing.GDI,GDISurface,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Drawing\GDI32\GDISurface.cs,DrawRect,The method has 5 parameters.
Long Parameter List,Alsing.Drawing.GDI,GDISurface,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Drawing\GDI32\GDISurface.cs,DrawRect,The method has 5 parameters.
Long Parameter List,Alsing.Text,TokenTree,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Text\Tokenizer\TokenTree-API.cs,AddPattern,The method has 5 parameters.
Long Parameter List,Alsing.Text,TokenTreeNode,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Text\Tokenizer\TokenTreeNode.cs,AddPattern,The method has 5 parameters.
Long Parameter List,Alsing.Windows,NativeMethods,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Win32\NativeMethods.cs,DrawThemeBackground,The method has 6 parameters.
Long Parameter List,Alsing.Windows,NativeMethods,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Win32\NativeMethods.cs,DrawThemeText,The method has 9 parameters.
Long Parameter List,Alsing.Windows,NativeMethods,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Win32\NativeMethods.cs,GetThemeColor,The method has 5 parameters.
Long Parameter List,Alsing.Windows,NativeMethods,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Win32\NativeMethods.cs,DrawText,The method has 5 parameters.
Long Parameter List,Alsing.Windows,NativeMethods,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Win32\NativeMethods.cs,EnumFontFamiliesEx,The method has 5 parameters.
Long Parameter List,Alsing.Windows,NativeMethods,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Win32\NativeMethods.cs,Rectangle,The method has 5 parameters.
Long Parameter List,Alsing.Windows,NativeMethods,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Win32\NativeMethods.cs,TabbedTextOut,The method has 8 parameters.
Long Parameter List,Alsing.Windows,NativeMethods,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Win32\NativeMethods.cs,BitBlt,The method has 9 parameters.
Long Parameter List,Alsing.Windows,NativeMethods,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Win32\NativeMethods.cs,GetTabbedTextExtent,The method has 5 parameters.
Long Statement,Alsing.Windows.Forms.CoreLib,IntelliMouseControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\IntelliMouse\IntelliMouse.cs,InitializeComponent,The length of the statement  "	this.regionHandler1.TransparencyKey = System.Drawing.Color.FromArgb (((System.Byte)(255))' ((System.Byte)(0))' ((System.Byte)(255))); " is 133.
Long Statement,Alsing.SourceCode,SyntaxDefinitionLoader,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Document\SyntaxDefinition\SyntaxDefinitionLoader.cs,ParseBlock,The length of the statement  "					Pattern endPattern = EscapeChar != "" ? new Pattern (End' false' bool.Parse (EndIsKeyword)' EscapeChar) : new Pattern (End' blnEndIsComplex' false' bool.Parse (EndIsKeyword)); " is 175.
Long Statement,Alsing.SourceCode,TextStyleDesignerDialog,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Document\SyntaxDefinition\TextStyle\TextStyleDesignerDialog.cs,InitializeComponent,The length of the statement  "	this.pgStyles.PropertyValueChanged += new System.Windows.Forms.PropertyValueChangedEventHandler (this.pgStyles_PropertyValueChanged); " is 133.
Long Statement,Alsing.SourceCode,TextStyleDesignerDialog,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Document\SyntaxDefinition\TextStyle\TextStyleDesignerDialog.cs,InitializeComponent,The length of the statement  "	this.lblCaption.Font = new System.Drawing.Font ("Microsoft Sans Serif"' 11F' System.Drawing.FontStyle.Bold' System.Drawing.GraphicsUnit.Point' ((System.Byte)(0))); " is 163.
Long Statement,Alsing.SourceCode,TextStyleDesignerDialog,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Document\SyntaxDefinition\TextStyle\TextStyleDesignerDialog.cs,InitializeComponent,The length of the statement  "	this.lblPreview.Font = new System.Drawing.Font ("Courier New"' 10F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((System.Byte)(0))); " is 157.
Long Statement,Alsing.SourceCode,UndoBlockCollection,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Document\DocumentStructure\Undo\UndoBlockCollection.cs,ValidateIndex,The length of the statement  "		throw new ArgumentOutOfRangeException ("Index was out of range.  Must be non-negative and less than the size of the collection."' index' "Specified argument was out of the range of valid values."); " is 197.
Long Statement,Alsing.Windows.Forms.SyntaxBox,AutoListForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\Autolist\AutoListForm.cs,LB_DrawItem,The length of the statement  "		e.Graphics.FillRectangle (SystemBrushes.Highlight' new Rectangle (Offset + 1' e.Bounds.Top + 1' e.Bounds.Width - Offset - 2' LB.ItemHeight - 2)); " is 145.
Long Statement,Alsing.Windows.Forms.SyntaxBox,AutoListForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\Autolist\AutoListForm.cs,LB_DrawItem,The length of the statement  "		//e.Graphics.FillRectangle (new SolidBrush(Color.FromArgb (182'189'210))'new Rectangle (1+27'e.Bounds.Top+1'e.Bounds.Width-2- 'LB.ItemHeight-2)); " is 145.
Long Statement,Alsing.Windows.Forms.SyntaxBox,AutoListForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\Autolist\AutoListForm.cs,LB_DrawItem,The length of the statement  "		ControlPaint.DrawFocusRectangle (e.Graphics' new Rectangle (Offset' e.Bounds.Top' e.Bounds.Width - Offset' LB.ItemHeight)); " is 123.
Long Statement,Alsing.Windows.Forms.SyntaxBox,AutoListForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\Autolist\AutoListForm.cs,InitializeComponent,The length of the statement  "	this.LB.Font = new System.Drawing.Font ("Tahoma"' 8.25F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((System.Byte)(0))); " is 146.
Long Statement,Alsing.Windows.Forms.SyntaxBox,EditViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\EditView\EditViewControl.cs,SetMaxHorizontalScroll,The length of the statement  "			string l = Document.VisibleRows [i].IsCollapsed ? Document.VisibleRows [i].VirtualCollapsedRow.Text : Document.VisibleRows [i].Text; " is 132.
Long Statement,Alsing.Windows.Forms.SyntaxBox,EditViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\EditView\EditViewControl.cs,OnMouseDown,The length of the statement  "					if (r2.expansion_StartSpan.StartRow != null && r2.expansion_StartSpan.EndRow != null && r2.expansion_StartSpan.Expanded == false) { " is 131.
Long Statement,Alsing.Windows.Forms.SyntaxBox,EditViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\EditView\EditViewControl.cs,OnMouseMove,The length of the statement  "								if (r.expansion_StartSpan.StartRow != null && r.expansion_StartSpan.EndRow != null && r.expansion_StartSpan.Expanded == false) { " is 128.
Long Statement,Alsing.Windows.Forms.SyntaxBox,EditViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\EditView\EditViewControl.cs,OnDoubleClick,The length of the statement  "					if (r2.expansion_StartSpan.StartRow != null && r2.expansion_StartSpan.EndRow != null && r2.expansion_StartSpan.Expanded == false) { " is 131.
Long Statement,Alsing.Windows.Forms.SyntaxBox,EditViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\EditView\EditViewControl.cs,vScroll_Scroll,The length of the statement  "	if ((diff == -1 || diff == 1) && (e.Type == ScrollEventType.SmallDecrement || e.Type == ScrollEventType.SmallIncrement)) { " is 122.
Long Statement,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,CharFromPixel,The length of the statement  "		if (X >= row.Expansion_EndRow.Expansion_PixelStart - Control.View.FirstVisibleColumn * Control.View.CharWidth + Control.View.TextMargin) { " is 138.
Long Statement,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,CharFromPixel,The length of the statement  "			return ColumnFromPixel (row.Expansion_EndRow.Index' X - row.Expansion_EndRow.Expansion_PixelStart + MeasureRow (row.Expansion_EndRow' row.Expansion_EndRow.Expansion_StartChar).Width); " is 183.
Long Statement,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,MeasureRow,The length of the statement  "				TotWidth += GFX.StringBuffer.DrawTabbedString (w.Text.Substring (0' MaxChars)' xpos + TotWidth' 0' taborig' Control.PixelTabSize).Width; " is 136.
Long Statement,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderAll2,The length of the statement  "					if (Control.Caret.CurrentRow.expansion_EndSpan != null && Control.Caret.CurrentRow.expansion_EndSpan.StartRow != null && Control.Caret.CurrentRow.expansion_EndSpan.StartRow == r) { " is 180.
Long Statement,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderRow,The length of the statement  "				if (SpanFound && RowIndex >= FirstSpanRow && RowIndex <= LastSpanRow && Control._SyntaxBox.ScopeBackColor != Color.Transparent) { " is 129.
Long Statement,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderCollapsedSelectedText,The length of the statement  "			RenderSelectedText (Control.Document.IndexOf (r.expansion_StartSpan.EndRow)' r.expansion_StartSpan.EndRow.Expansion_PixelStart' last); " is 134.
Long Statement,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderCollapsedText,The length of the statement  "			RenderText (Control.Document.IndexOf (r.expansion_StartSpan.EndRow)' r.expansion_StartSpan.EndRow.Expansion_PixelStart' last); " is 126.
Long Statement,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderText,The length of the statement  "		//	bbuff.DrawTabbedString (xtr.startSpan.GetHashCode ().ToString (System.Globalization.CultureInfo.InvariantCulture)'100'0'0'0); " is 128.
Long Statement,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderText,The length of the statement  "		//bbuff.DrawTabbedString (xtr.Text'(int)(Control.View.TextMargin -Control.View.ClientAreaStart)'1'-Control.View.FirstVisibleColumn*Control.View.CharWidth+Control.View.TextMargin'Control.PixelTabSize);					 " is 200.
Long Statement,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderText,The length of the statement  "						bbuff.FillRect (Control.SeparatorColor' Control.View.TextMargin - 4' Control.View.RowHeight - 1' Control.View.ClientAreaWidth' 1); " is 130.
Long Statement,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderSelectedText,The length of the statement  "		//	bbuff.DrawTabbedString (xtr.startSpan.GetHashCode ().ToString (System.Globalization.CultureInfo.InvariantCulture)'100'0'0'0); " is 128.
Long Statement,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderSelectedText,The length of the statement  "		//bbuff.DrawTabbedString (xtr.Text'(int)(Control.View.TextMargin -Control.View.ClientAreaStart)'1'-Control.View.FirstVisibleColumn*Control.View.CharWidth+Control.View.TextMargin'Control.PixelTabSize);					 " is 200.
Long Statement,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderSelectedText,The length of the statement  "						bbuff.FillRect (Control.SeparatorColor' Control.View.TextMargin - 4' Control.View.RowHeight - 1' Control.View.ClientAreaWidth' 1); " is 130.
Long Statement,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderSelectedText,The length of the statement  "			GFX.BackBuffer.FillRect (xtr.endSpan.spanDefinition.Style.BackColor' xpos' 0' Control.Width - xpos' Control.View.RowHeight); " is 124.
Long Statement,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderCaret,The length of the statement  "		GFX.BackBuffer.InvertRect (pos + Control.View.TextMargin - Control.View.ClientAreaStart - 1' 0' 3' Control.View.RowHeight); " is 123.
Long Statement,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderCaret,The length of the statement  "		GFX.BackBuffer.InvertRect (pos + Control.View.TextMargin - Control.View.ClientAreaStart' 1' 1' Control.View.RowHeight - 2); " is 123.
Long Statement,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderMargin,The length of the statement  "		bbuff.FillRect (GFX.LineNumberMarginBrush' Control.View.GutterMarginWidth' 0' Control.View.LineNumberMarginWidth + 1' Control.View.RowHeight); " is 142.
Long Statement,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderMargin,The length of the statement  "		//bbuff.FillRect (GFX.LineNumberMarginBrush  'Control.View.GutterMarginWidth+Control.View.LineNumberMarginWidth'0'1'Control.View.RowHeight); " is 140.
Long Statement,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderMargin,The length of the statement  "			bbuff.FillRect (GFX.LineNumberMarginBorderBrush' Control.View.GutterMarginWidth + Control.View.LineNumberMarginWidth' j' 1' 1); " is 127.
Long Statement,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderMargin,The length of the statement  "		bbuff.FillRect (GFX.BackgroundBrush' Control.View.TotalMarginWidth' 0' Control.View.TextMargin - Control.View.TotalMarginWidth - 3' Control.View.RowHeight); " is 156.
Long Statement,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderMargin,The length of the statement  "		bbuff.FillRect (GFX.BackgroundBrush' Control.View.TotalMarginWidth + 1' 0' Control.View.TextMargin - Control.View.TotalMarginWidth - 4' Control.View.RowHeight); " is 160.
Long Statement,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderMargin,The length of the statement  "			bbuff.DrawTabbedString ((RowIndex + 1).ToString (CultureInfo.InvariantCulture)' Control.View.GutterMarginWidth + Control.View.LineNumberMarginWidth - nw - 1' 1' 0' Control.PixelTabSize); " is 186.
Long Statement,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderExpansion,The length of the statement  "		//						bbuff.FillRect (GFX.OutlineBrush'this.Control.View.TotalMarginWidth +14'Control.View.RowHeight-1'Control.ClientWidth'1);				 " is 128.
Long Statement,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderExpansion,The length of the statement  "		if (SpanFound && Control._SyntaxBox.ScopeIndicatorColor != Color.Transparent && Control._SyntaxBox.ShowScopeIndicator) { " is 120.
Long Statement,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderExpansion,The length of the statement  "				bbuff.FillRect (Control._SyntaxBox.ScopeIndicatorColor' Control.View.TotalMarginWidth + 14' 0' 2' Control.View.RowHeight); " is 122.
Long Statement,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderExpansion,The length of the statement  "				bbuff.FillRect (Control._SyntaxBox.ScopeIndicatorColor' Control.View.TotalMarginWidth + 14' Control.View.RowHeight - 2' 4' 2); " is 126.
Long Statement,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderSelection,The length of the statement  "			else if ((RowIndex == Control.Selection.LogicalBounds.FirstRow) && (RowIndex == Control.Selection.LogicalBounds.LastRow)) { " is 123.
Long Statement,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderCollapsedSelection,The length of the statement  "	else if ((RowIndex == Control.Selection.LogicalBounds.FirstRow) && (RowIndex == Control.Selection.LogicalBounds.LastRow)) { " is 123.
Long Statement,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderCollapsedSelection,The length of the statement  "		int endchar = Control.Selection.LogicalBounds.LastRow != RowIndex ? xtr.Text.Length : Math.Min (Control.Selection.LogicalBounds.LastColumn' xtr.Text.Length); " is 157.
Long Statement,Alsing.Windows.Forms,InfoTipForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\InfoTip\InfoTipForm.cs,SetPos,The length of the statement  "	lblIndex.Text = SelectedIndex.ToString ((CultureInfo.InvariantCulture)) + " of " + Count.ToString (CultureInfo.InvariantCulture); " is 129.
Long Statement,Alsing.Windows.Forms,InfoTipForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\InfoTip\InfoTipForm.cs,InitializeComponent,The length of the statement  "	this.InfoText.Font = new System.Drawing.Font ("Microsoft Sans Serif"' 7F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((System.Byte)(0))); " is 163.
Long Statement,Alsing.Windows.Forms,SyntaxBoxControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\Syntaxbox\SyntaxBoxControl.cs,View_MouseUp,The length of the statement  "	var ea = new MouseEventArgs (e.Button' e.Clicks' e.X + ev.Location.X + ev.BorderWidth' e.Y + ev.Location.Y + ev.BorderWidth' e.Delta); " is 134.
Long Statement,Alsing.Windows.Forms,SyntaxBoxControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\Syntaxbox\SyntaxBoxControl.cs,View_MouseMove,The length of the statement  "	var ea = new MouseEventArgs (e.Button' e.Clicks' e.X + ev.Location.X + ev.BorderWidth' e.Y + ev.Location.Y + ev.BorderWidth' e.Delta); " is 134.
Long Statement,Alsing.Windows.Forms,SyntaxBoxControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\Syntaxbox\SyntaxBoxControl.cs,View_MouseDown,The length of the statement  "	var ea = new MouseEventArgs (e.Button' e.Clicks' e.X + ev.Location.X + ev.BorderWidth' e.Y + ev.Location.Y + ev.BorderWidth' e.Delta); " is 134.
Long Statement,Alsing.Design,CollectionEditorGui,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Design\CollectionEditorGui.cs,InitializeComponent,The length of the statement  "	this.groupBox1.Anchor = ((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left) | System.Windows.Forms.AnchorStyles.Right); " is 152.
Long Statement,Alsing.Design,CollectionEditorGui,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Design\CollectionEditorGui.cs,InitializeComponent,The length of the statement  "	this.lstMembers.Anchor = (((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) | System.Windows.Forms.AnchorStyles.Left) | System.Windows.Forms.AnchorStyles.Right); " is 195.
Long Statement,Alsing.Design,CollectionEditorGui,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Design\CollectionEditorGui.cs,InitializeComponent,The length of the statement  "	this.pnlMain.Anchor = (((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) | System.Windows.Forms.AnchorStyles.Left) | System.Windows.Forms.AnchorStyles.Right); " is 192.
Long Statement,Alsing.SourceCode.SyntaxDocumentExporters,CollapsingHTMLExporter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Document\Export\CollapsingHTMLExporter.cs,Export,The length of the statement  "			Out ("<img src=\"" + ImagePath + img + "\" align=top onclick=\"open" + guid + "_" + i.ToString (CultureInfo.InvariantCulture) + ".style.display='none'; closed" + guid + "_" + i.ToString (CultureInfo.InvariantCulture) + ".style.display='block'; \">"); " is 250.
Long Statement,Alsing.SourceCode.SyntaxDocumentExporters,CollapsingHTMLExporter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Document\Export\CollapsingHTMLExporter.cs,RenderCollapsed,The length of the statement  "	Out ("<img src=\"" + ImagePath + img + "\" align=top onclick=\"open" + guid + "_" + i.ToString (CultureInfo.InvariantCulture) + ".style.display='block'; closed" + guid + "_" + i.ToString (CultureInfo.InvariantCulture) + ".style.display='none'; \">"); " is 250.
Long Statement,Alsing.SourceCode.SyntaxDocumentParsers,DefaultParser,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Document\Parser\DefaultParser.cs,ParseText,The length of the statement  "		ParseTools.AddString (Text.Substring (CurrentPosition' Word.Position - CurrentPosition)' Row' currentSpan.spanDefinition.Style' currentSpan); " is 141.
Long Statement,Alsing.SourceCode.SyntaxDocumentParsers,DefaultParser,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Document\Parser\DefaultParser.cs,InternalParseLine,The length of the statement  "		if ((EndSegment.HasContent && ChildSegment.HasContent && EndSegment.Position <= ChildSegment.Position) || (EndSegment.HasContent && ChildSegment.HasContent == false)) { " is 168.
Long Statement,Alsing.Drawing,DrawingTools,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Drawing\DrawingTools.cs,MixColors,The length of the statement  "	return Color.FromArgb ((int)(c1.R * (1 - d) + c2.R * d)' (int)(c1.G * (1 - d) + c2.G * d)' (int)(c1.B * (1 - d) + c2.B * d)); " is 125.
Long Statement,Alsing.Drawing,DrawingTools,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Drawing\DrawingTools.cs,GetLightBrush,The length of the statement  "	return BorderColor.GetBrightness () > 0.6 ? new SolidBrush (MixColors (BorderColor' Color.White' 1)) : new SolidBrush (MixColors (BorderColor' Color.White' 0.5)); " is 162.
Long Statement,Alsing.Drawing,DrawingTools,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Drawing\DrawingTools.cs,GetDarkDarkBrush,The length of the statement  "	SolidBrush darkdark = BorderColor.GetBrightness () < 0.5 ? new SolidBrush (MixColors (BorderColor' Color.Black' 1)) : new SolidBrush (MixColors (BorderColor' Color.Black' 0.6)); " is 177.
Long Statement,Alsing.Drawing,DrawingTools,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Drawing\DrawingTools.cs,GetDarkBrush,The length of the statement  "	SolidBrush dark = BorderColor.GetBrightness () < 0.5 ? new SolidBrush (MixColors (BorderColor' Color.Black' 0.7)) : new SolidBrush (MixColors (BorderColor' Color.Black' 0.4)); " is 175.
Long Statement,Alsing.Drawing,DrawingTools,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Drawing\DrawingTools.cs,DrawGrayImage,The length of the statement  "	g.DrawImage (Image' new Rectangle (X' Y' Image.Width' Image.Height)' 0' 0' Image.Width' Image.Height' GraphicsUnit.Pixel' ia); " is 126.
Long Statement,Alsing.Drawing,DrawingTools,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Drawing\DrawingTools.cs,DrawTransparentImage,The length of the statement  "	g.DrawImage (Image' new Rectangle (X' Y' Image.Width' Image.Height)' 0' 0' Image.Width' Image.Height' GraphicsUnit.Pixel' ia); " is 126.
Long Statement,Alsing.Drawing,DrawingTools,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Drawing\DrawingTools.cs,DrawControl,The length of the statement  "	NativeMethods.SendMessage (control.Handle' (int)WindowMessage.WM_PRINT' (int)hdc' (int)(WMPrintFlags.PRF_CLIENT | WMPrintFlags.PRF_ERASEBKGND)); " is 144.
Long Statement,Alsing.Drawing,DrawingTools,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Drawing\DrawingTools.cs,DrawControl,The length of the statement  "	int i = NativeMethods.SendMessage (control.Handle' (int)WindowMessage.WM_PRINT' (int)hdc' (int)(WMPrintFlags.PRF_CLIENT | WMPrintFlags.PRF_ERASEBKGND)); " is 152.
Long Statement,Alsing.Drawing.GDI,FontList,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Drawing\GDI32\FontEnum.cs,LB_DrawItem,The length of the statement  "		e.Graphics.FillRectangle (SystemBrushes.Window' new Rectangle (ofs' e.Bounds.Top' e.Bounds.Width - ofs' FontListbox.ItemHeight)); " is 129.
Long Statement,Alsing.Drawing.GDI,FontList,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Drawing\GDI32\FontEnum.cs,LB_DrawItem,The length of the statement  "		e.Graphics.FillRectangle (SystemBrushes.Highlight' new Rectangle (ofs + 1' e.Bounds.Top + 1' e.Bounds.Width - ofs - 2' FontListbox.ItemHeight - 2)); " is 148.
Long Statement,Alsing.Drawing.GDI,FontList,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Drawing\GDI32\FontEnum.cs,LB_DrawItem,The length of the statement  "		ControlPaint.DrawFocusRectangle (e.Graphics' new Rectangle (ofs' e.Bounds.Top' e.Bounds.Width - ofs' FontListbox.ItemHeight)); " is 126.
Long Statement,Alsing.Drawing.GDI,FontList,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Drawing\GDI32\FontEnum.cs,LB_DrawItem,The length of the statement  "	e.Graphics.FillRectangle (SystemBrushes.Highlight' new Rectangle (1' e.Bounds.Top + 2' 34' FontListbox.ItemHeight - 4)); " is 120.
Long Statement,Alsing.Text.PatternMatchers,HexPatternMatcher,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Text\PatternMatchers\HexPatternMatcher.cs,Match,The length of the statement  "		if ((currentChar >= '0' && currentChar <= '9') || (currentChar >= 'a' && currentChar <= 'f') || (currentChar >= 'A' && currentChar <= 'F')) { " is 141.
Long Statement,Alsing.Text.PatternMatchers,RangePatternMatcher,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Text\PatternMatchers\RegionPatternMatcher.cs,Match,The length of the statement  "		if (textToMatch [matchAtIndex + length] == EndChar && (matchAtIndex + length < textLength - 1 && textToMatch [matchAtIndex + length + 1] == EndChar)) { " is 151.
Long Statement,Alsing.Text.PatternMatchers,RangePatternMatcher,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Text\PatternMatchers\RegionPatternMatcher.cs,Match,The length of the statement  "		else if (textToMatch [matchAtIndex + length] == EndChar && (matchAtIndex + length == textLength - 1 || textToMatch [matchAtIndex + length + 1] != EndChar)) " is 155.
Complex Conditional,Alsing.Windows.Forms.CoreLib,IntelliMouseControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\IntelliMouse\IntelliMouse.cs,OnMouseDown,The conditional expression  "e.Button != MouseButtons.None && (e.Button != MouseButtons.Middle && e.X != 0 && e.Y != 0)"  is complex.
Complex Conditional,Alsing.Windows.Forms.SyntaxBox,EditViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\EditView\EditViewControl.cs,DoResize,The conditional expression  "Visible && Width > 0 && Height > 0 && IsHandleCreated"  is complex.
Complex Conditional,Alsing.Windows.Forms.SyntaxBox,EditViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\EditView\EditViewControl.cs,OnKeyDown,The conditional expression  "(e.KeyCode == Keys.Up || e.KeyCode == Keys.Down || e.KeyCode == Keys.PageUp || e.KeyCode == Keys.PageDown)"  is complex.
Complex Conditional,Alsing.Windows.Forms.SyntaxBox,EditViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\EditView\EditViewControl.cs,OnKeyDown,The conditional expression  "(ka.Key == (Keys)(int)e.KeyCode) && ka.Alt == e.Alt && ka.Shift == e.Shift && ka.Control == e.Control"  is complex.
Complex Conditional,Alsing.Windows.Forms.SyntaxBox,EditViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\EditView\EditViewControl.cs,vScroll_Scroll,The conditional expression  "(diff == -1 || diff == 1) && (e.Type == ScrollEventType.SmallDecrement || e.Type == ScrollEventType.SmallIncrement)"  is complex.
Complex Conditional,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,SetSpanIndicators,The conditional expression  "s == null || s.StartWord == null || s.StartWord.Row == null || s.EndWord == null || s.EndWord.Row == null"  is complex.
Complex Conditional,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderRow,The conditional expression  "SpanFound && RowIndex >= FirstSpanRow && RowIndex <= LastSpanRow && Control._SyntaxBox.ScopeBackColor != Color.Transparent"  is complex.
Complex Conditional,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderText,The conditional expression  "(w.Type == WordType.Space || w.Type == WordType.Tab) && !DrawBreakpoint && Control.ShowTabGuides"  is complex.
Complex Conditional,Alsing.SourceCode.SyntaxDocumentParsers,DefaultParser,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Document\Parser\DefaultParser.cs,InternalParseLine,The conditional expression  "(EndSegment.HasContent && ChildSegment.HasContent && EndSegment.Position <= ChildSegment.Position) || (EndSegment.HasContent && ChildSegment.HasContent == false)"  is complex.
Complex Conditional,Alsing.Text.PatternMatchers,HexPatternMatcher,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Text\PatternMatchers\HexPatternMatcher.cs,Match,The conditional expression  "(currentChar >= '0' && currentChar <= '9') || (currentChar >= 'a' && currentChar <= 'f') || (currentChar >= 'A' && currentChar <= 'F')"  is complex.
Virtual Method Call from Constructor,Alsing.Windows.Forms.CoreLib,SplitViewParentControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\SplitView\SplitViewParentControl.cs,SplitViewParentControl,The constructor "SplitViewParentControl" calls a virtual method "OnCreate".
Virtual Method Call from Constructor,Alsing.Windows.Forms.CoreLib,SplitViewParentControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\SplitView\SplitViewParentControl.cs,SplitViewParentControl,The constructor "SplitViewParentControl" calls a virtual method "GetNewView".
Empty Catch Block,Alsing.Windows.Forms.CoreLib,FormatLabelControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\FormatLabel\FormatLabelControl.cs,OnResize,The method has an empty catch block.
Empty Catch Block,Alsing.Windows.Forms.CoreLib,IntelliMouseControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\IntelliMouse\IntelliMouse.cs,Dispose,The method has an empty catch block.
Empty Catch Block,Alsing.Windows.Forms.CoreLib,SplitViewChildControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\SplitView\SplitViewChildControl.cs,DoResize,The method has an empty catch block.
Empty Catch Block,Alsing.Windows.Forms.CoreLib,SplitViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\SplitView\SplitViewControl.cs,Dispose,The method has an empty catch block.
Empty Catch Block,Alsing.Windows.Forms.CoreLib,SplitViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\SplitView\SplitViewControl.cs,ReSize,The method has an empty catch block.
Empty Catch Block,Alsing.SourceCode,SyntaxDocument,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Document\SyntaxDocument.cs,ParseRows,The method has an empty catch block.
Empty Catch Block,Alsing.SourceCode,SyntaxDocument,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Document\SyntaxDocument.cs,ParseRows,The method has an empty catch block.
Empty Catch Block,Alsing.Windows.Forms.SyntaxBox,Caret,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\Caret.cs,MoveUp,The method has an empty catch block.
Empty Catch Block,Alsing.Windows.Forms.SyntaxBox,Caret,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\Caret.cs,MoveUp,The method has an empty catch block.
Empty Catch Block,Alsing.Windows.Forms.SyntaxBox,Caret,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\Caret.cs,MoveDown,The method has an empty catch block.
Empty Catch Block,Alsing.Windows.Forms.SyntaxBox,Caret,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\Caret.cs,MoveDown,The method has an empty catch block.
Empty Catch Block,Alsing.Windows.Forms.SyntaxBox,EditViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\EditView\EditViewControl.cs,WndProc,The method has an empty catch block.
Empty Catch Block,Alsing.Windows.Forms.SyntaxBox,EditViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\EditView\EditViewControl.cs,Dispose,The method has an empty catch block.
Empty Catch Block,Alsing.Windows.Forms.SyntaxBox,EditViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\EditView\EditViewControl.cs,Dispose,The method has an empty catch block.
Empty Catch Block,Alsing.Windows.Forms.SyntaxBox,EditViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\EditView\EditViewControl.cs,DoResize,The method has an empty catch block.
Empty Catch Block,Alsing.Windows.Forms.SyntaxBox,EditViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\EditView\EditViewControl.cs,OutdentEndRow,The method has an empty catch block.
Empty Catch Block,Alsing.Windows.Forms.SyntaxBox,EditViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\EditView\EditViewControl.cs,ScrollScreen,The method has an empty catch block.
Empty Catch Block,Alsing.Windows.Forms.SyntaxBox,EditViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\EditView\EditViewControl.cs,PasteText,The method has an empty catch block.
Empty Catch Block,Alsing.Windows.Forms.SyntaxBox,EditViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\EditView\EditViewControl.cs,CopyText,The method has an empty catch block.
Empty Catch Block,Alsing.Windows.Forms.SyntaxBox,EditViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\EditView\EditViewControl.cs,InitializeComponent,The method has an empty catch block.
Empty Catch Block,Alsing.Windows.Forms.SyntaxBox,EditViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\EditView\EditViewControl.cs,ScrollIntoView,The method has an empty catch block.
Empty Catch Block,Alsing.Windows.Forms.SyntaxBox,EditViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\EditView\EditViewControl.cs,OnChange,The method has an empty catch block.
Empty Catch Block,Alsing.Windows.Forms.SyntaxBox,EditViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\EditView\EditViewControl.cs,OnKeyPress,The method has an empty catch block.
Empty Catch Block,Alsing.Windows.Forms.SyntaxBox,EditViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\EditView\EditViewControl.cs,OnMouseDown,The method has an empty catch block.
Empty Catch Block,Alsing.Windows.Forms.SyntaxBox,EditViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\EditView\EditViewControl.cs,OnMouseMove,The method has an empty catch block.
Empty Catch Block,Alsing.Windows.Forms.SyntaxBox,EditViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\EditView\EditViewControl.cs,OnDoubleClick,The method has an empty catch block.
Empty Catch Block,Alsing.Windows.Forms.SyntaxBox,GotoLineForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\Syntaxbox\Dialogs\GotoLine.cs,btnOK_Click,The method has an empty catch block.
Empty Catch Block,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,InitGraphics,The method has an empty catch block.
Empty Catch Block,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderAll,The method has an empty catch block.
Empty Catch Block,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,SetBrackets,The method has an empty catch block.
Empty Catch Block,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,SetSpanIndicators,The method has an empty catch block.
Empty Catch Block,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderAll2,The method has an empty catch block.
Empty Catch Block,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderAll2,The method has an empty catch block.
Empty Catch Block,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderAll2,The method has an empty catch block.
Empty Catch Block,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderRow,The method has an empty catch block.
Empty Catch Block,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderRow,The method has an empty catch block.
Empty Catch Block,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderCollapsedSelectedText,The method has an empty catch block.
Empty Catch Block,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderCollapsedText,The method has an empty catch block.
Empty Catch Block,Alsing.Windows.Forms,BaseListBoxControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\BaseControls\BaseListBoxControl.cs,WndProc,The method has an empty catch block.
Empty Catch Block,Alsing.Windows.Forms,BasePanelControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\BaseControls\BasePanelControl.cs,WndProc,The method has an empty catch block.
Empty Catch Block,Alsing.Windows.Forms,SyntaxBoxControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\Syntaxbox\SyntaxBoxControl.cs,SyntaxBoxControl,The method has an empty catch block.
Empty Catch Block,Alsing.Design,CollectionEditorGui,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Design\CollectionEditorGui.cs,lstMembers_DrawItem,The method has an empty catch block.
Empty Catch Block,Alsing.SourceCode.SyntaxDocumentExporters,CollapsingHTMLExporter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Document\Export\CollapsingHTMLExporter.cs,Export,The method has an empty catch block.
Empty Catch Block,Alsing.SourceCode.SyntaxDocumentExporters,CollapsingHTMLExporter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Document\Export\CollapsingHTMLExporter.cs,RenderCollapsed,The method has an empty catch block.
Empty Catch Block,Alsing.SourceCode.SyntaxDocumentParsers,DefaultParser,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Document\Parser\DefaultParser.cs,Init,The method has an empty catch block.
Empty Catch Block,Alsing.SourceCode.SyntaxDocumentParsers,DefaultParser,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Document\Parser\DefaultParser.cs,Init,The method has an empty catch block.
Magic Number,Alsing.Windows.Forms.CoreLib,FormatLabelControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\FormatLabel\FormatLabelControl.cs,InitializeComponent,The following statement contains a magic number: this.Filler.Location = new System.Drawing.Point (136' 112);  
Magic Number,Alsing.Windows.Forms.CoreLib,FormatLabelControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\FormatLabel\FormatLabelControl.cs,InitializeComponent,The following statement contains a magic number: this.Filler.Location = new System.Drawing.Point (136' 112);  
Magic Number,Alsing.Windows.Forms.CoreLib,FormatLabelControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\FormatLabel\FormatLabelControl.cs,InitializeComponent,The following statement contains a magic number: this.Filler.Size = new System.Drawing.Size (16' 16);  
Magic Number,Alsing.Windows.Forms.CoreLib,FormatLabelControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\FormatLabel\FormatLabelControl.cs,InitializeComponent,The following statement contains a magic number: this.Filler.Size = new System.Drawing.Size (16' 16);  
Magic Number,Alsing.Windows.Forms.CoreLib,FormatLabelControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\FormatLabel\FormatLabelControl.cs,InitializeComponent,The following statement contains a magic number: this.Filler.TabIndex = 5;  
Magic Number,Alsing.Windows.Forms.CoreLib,FormatLabelControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\FormatLabel\FormatLabelControl.cs,InitializeComponent,The following statement contains a magic number: this.vScroll.LargeChange = 2;  
Magic Number,Alsing.Windows.Forms.CoreLib,FormatLabelControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\FormatLabel\FormatLabelControl.cs,InitializeComponent,The following statement contains a magic number: this.vScroll.Location = new System.Drawing.Point (136' -8);  
Magic Number,Alsing.Windows.Forms.CoreLib,FormatLabelControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\FormatLabel\FormatLabelControl.cs,InitializeComponent,The following statement contains a magic number: this.vScroll.Location = new System.Drawing.Point (136' -8);  
Magic Number,Alsing.Windows.Forms.CoreLib,FormatLabelControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\FormatLabel\FormatLabelControl.cs,InitializeComponent,The following statement contains a magic number: this.vScroll.Size = new System.Drawing.Size (16' 112);  
Magic Number,Alsing.Windows.Forms.CoreLib,FormatLabelControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\FormatLabel\FormatLabelControl.cs,InitializeComponent,The following statement contains a magic number: this.vScroll.Size = new System.Drawing.Size (16' 112);  
Magic Number,Alsing.Windows.Forms.CoreLib,FormatLabelControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\FormatLabel\FormatLabelControl.cs,InitializeComponent,The following statement contains a magic number: this.vScroll.TabIndex = 4;  
Magic Number,Alsing.Windows.Forms.CoreLib,FormatLabelControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\FormatLabel\FormatLabelControl.cs,InitializeComponent,The following statement contains a magic number: this.hScroll.Location = new System.Drawing.Point (0' 112);  
Magic Number,Alsing.Windows.Forms.CoreLib,FormatLabelControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\FormatLabel\FormatLabelControl.cs,InitializeComponent,The following statement contains a magic number: this.hScroll.Maximum = 600;  
Magic Number,Alsing.Windows.Forms.CoreLib,FormatLabelControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\FormatLabel\FormatLabelControl.cs,InitializeComponent,The following statement contains a magic number: this.hScroll.Size = new System.Drawing.Size (128' 16);  
Magic Number,Alsing.Windows.Forms.CoreLib,FormatLabelControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\FormatLabel\FormatLabelControl.cs,InitializeComponent,The following statement contains a magic number: this.hScroll.Size = new System.Drawing.Size (128' 16);  
Magic Number,Alsing.Windows.Forms.CoreLib,FormatLabelControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\FormatLabel\FormatLabelControl.cs,InitializeComponent,The following statement contains a magic number: this.hScroll.TabIndex = 3;  
Magic Number,Alsing.Windows.Forms.CoreLib,FormatLabelControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\FormatLabel\FormatLabelControl.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size (160' 136);  
Magic Number,Alsing.Windows.Forms.CoreLib,FormatLabelControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\FormatLabel\FormatLabelControl.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size (160' 136);  
Magic Number,Alsing.Windows.Forms.CoreLib,FormatLabelControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\FormatLabel\FormatLabelControl.cs,OnPaint,The following statement contains a magic number: try {  	bbuff.FontTransparent = true;  	if (BackgroundImage != null) {  		g.DrawImage (BackgroundImage' 0' 0' Width' Height);  	}  	else {  		bbuff.Clear (BackColor);  	}  	int x = Margin;  	int y = Margin;  	for (int i = vScroll.Value; i < _Rows.Count; i++) {  		var r = (Row)_Rows [i];  		x = Margin;  		r.Visible = true;  		r.Top = y;  		if (r.RenderSeparator) {  			Color c1 = Color.FromArgb (120' 0' 0' 0);  			Brush b1 = new SolidBrush (c1);  			g.FillRectangle (b1' 0' y' Width' 1);  			Color c2 = Color.FromArgb (120' 255' 255' 255);  			Brush b2 = new SolidBrush (c2);  			g.FillRectangle (b2' 0' y + 1' Width' 1);  			b1.Dispose ();  			b2.Dispose ();  			//bbuff.DrawLine (this.ForeColor'new Point (0'y)'new Point (this.Width'y));  		}  		foreach (Word w in r.Words) {  			int ypos = r.Height - w.Height + y;  			if (w.Image != null) {  				g.DrawImage (w.Image' x' y);  				//bbuff.FillRect (Color.Red 'x'ypos'w.Width 'w.Height);  			}  			else {  				GDIFont gf;  				if (w.Element.Link != null) {  					Font f = null;  					FontStyle fs = w.Element.Font.Style;  					if (w.Element.Link == _ActiveElement) {  						if (_Link_UnderLine_Hover)  							fs |= FontStyle.Underline;  						f = new Font (w.Element.Font' fs);  					}  					else {  						if (_Link_UnderLine)  							fs |= FontStyle.Underline;  						f = new Font (w.Element.Font' fs);  					}  					gf = GetFont (f);  				}  				else {  					gf = GetFont (w.Element.Font);  				}  				bbuff.Font = gf;  				if (w.Element.Effect != TextEffect.None) {  					bbuff.TextForeColor = w.Element.EffectColor;  					if (w.Element.Effect == TextEffect.Outline) {  						for (int xx = -1; xx <= 1; xx++)  							for (int yy = -1; yy <= 1; yy++)  								bbuff.DrawTabbedString (w.Text' x + xx' ypos + yy' 0' 0);  					}  					else if (w.Element.Effect != TextEffect.None) {  						bbuff.DrawTabbedString (w.Text' x + 1' ypos + 1' 0' 0);  					}  				}  				if (w.Element.Link != null) {  					if (w.Element.Link == _ActiveElement) {  						bbuff.TextForeColor = Link_Color_Hover;  					}  					else {  						bbuff.TextForeColor = Link_Color;  					}  				}  				else  					bbuff.TextForeColor = w.Element.ForeColor;  				bbuff.TextBackColor = w.Element.BackColor;  				bbuff.DrawTabbedString (w.Text' x' ypos' 0' 0);  			}  			w.ScreenArea.X = x;  			w.ScreenArea.Y = ypos;  			x += w.Width;  		}  		y += r.Height + r.BottomPadd;  		if (y > Height)  			break;  	}  }  catch (Exception x) {  	Console.WriteLine (x.Message);  }  
Magic Number,Alsing.Windows.Forms.CoreLib,FormatLabelControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\FormatLabel\FormatLabelControl.cs,OnPaint,The following statement contains a magic number: try {  	bbuff.FontTransparent = true;  	if (BackgroundImage != null) {  		g.DrawImage (BackgroundImage' 0' 0' Width' Height);  	}  	else {  		bbuff.Clear (BackColor);  	}  	int x = Margin;  	int y = Margin;  	for (int i = vScroll.Value; i < _Rows.Count; i++) {  		var r = (Row)_Rows [i];  		x = Margin;  		r.Visible = true;  		r.Top = y;  		if (r.RenderSeparator) {  			Color c1 = Color.FromArgb (120' 0' 0' 0);  			Brush b1 = new SolidBrush (c1);  			g.FillRectangle (b1' 0' y' Width' 1);  			Color c2 = Color.FromArgb (120' 255' 255' 255);  			Brush b2 = new SolidBrush (c2);  			g.FillRectangle (b2' 0' y + 1' Width' 1);  			b1.Dispose ();  			b2.Dispose ();  			//bbuff.DrawLine (this.ForeColor'new Point (0'y)'new Point (this.Width'y));  		}  		foreach (Word w in r.Words) {  			int ypos = r.Height - w.Height + y;  			if (w.Image != null) {  				g.DrawImage (w.Image' x' y);  				//bbuff.FillRect (Color.Red 'x'ypos'w.Width 'w.Height);  			}  			else {  				GDIFont gf;  				if (w.Element.Link != null) {  					Font f = null;  					FontStyle fs = w.Element.Font.Style;  					if (w.Element.Link == _ActiveElement) {  						if (_Link_UnderLine_Hover)  							fs |= FontStyle.Underline;  						f = new Font (w.Element.Font' fs);  					}  					else {  						if (_Link_UnderLine)  							fs |= FontStyle.Underline;  						f = new Font (w.Element.Font' fs);  					}  					gf = GetFont (f);  				}  				else {  					gf = GetFont (w.Element.Font);  				}  				bbuff.Font = gf;  				if (w.Element.Effect != TextEffect.None) {  					bbuff.TextForeColor = w.Element.EffectColor;  					if (w.Element.Effect == TextEffect.Outline) {  						for (int xx = -1; xx <= 1; xx++)  							for (int yy = -1; yy <= 1; yy++)  								bbuff.DrawTabbedString (w.Text' x + xx' ypos + yy' 0' 0);  					}  					else if (w.Element.Effect != TextEffect.None) {  						bbuff.DrawTabbedString (w.Text' x + 1' ypos + 1' 0' 0);  					}  				}  				if (w.Element.Link != null) {  					if (w.Element.Link == _ActiveElement) {  						bbuff.TextForeColor = Link_Color_Hover;  					}  					else {  						bbuff.TextForeColor = Link_Color;  					}  				}  				else  					bbuff.TextForeColor = w.Element.ForeColor;  				bbuff.TextBackColor = w.Element.BackColor;  				bbuff.DrawTabbedString (w.Text' x' ypos' 0' 0);  			}  			w.ScreenArea.X = x;  			w.ScreenArea.Y = ypos;  			x += w.Width;  		}  		y += r.Height + r.BottomPadd;  		if (y > Height)  			break;  	}  }  catch (Exception x) {  	Console.WriteLine (x.Message);  }  
Magic Number,Alsing.Windows.Forms.CoreLib,FormatLabelControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\FormatLabel\FormatLabelControl.cs,OnPaint,The following statement contains a magic number: try {  	bbuff.FontTransparent = true;  	if (BackgroundImage != null) {  		g.DrawImage (BackgroundImage' 0' 0' Width' Height);  	}  	else {  		bbuff.Clear (BackColor);  	}  	int x = Margin;  	int y = Margin;  	for (int i = vScroll.Value; i < _Rows.Count; i++) {  		var r = (Row)_Rows [i];  		x = Margin;  		r.Visible = true;  		r.Top = y;  		if (r.RenderSeparator) {  			Color c1 = Color.FromArgb (120' 0' 0' 0);  			Brush b1 = new SolidBrush (c1);  			g.FillRectangle (b1' 0' y' Width' 1);  			Color c2 = Color.FromArgb (120' 255' 255' 255);  			Brush b2 = new SolidBrush (c2);  			g.FillRectangle (b2' 0' y + 1' Width' 1);  			b1.Dispose ();  			b2.Dispose ();  			//bbuff.DrawLine (this.ForeColor'new Point (0'y)'new Point (this.Width'y));  		}  		foreach (Word w in r.Words) {  			int ypos = r.Height - w.Height + y;  			if (w.Image != null) {  				g.DrawImage (w.Image' x' y);  				//bbuff.FillRect (Color.Red 'x'ypos'w.Width 'w.Height);  			}  			else {  				GDIFont gf;  				if (w.Element.Link != null) {  					Font f = null;  					FontStyle fs = w.Element.Font.Style;  					if (w.Element.Link == _ActiveElement) {  						if (_Link_UnderLine_Hover)  							fs |= FontStyle.Underline;  						f = new Font (w.Element.Font' fs);  					}  					else {  						if (_Link_UnderLine)  							fs |= FontStyle.Underline;  						f = new Font (w.Element.Font' fs);  					}  					gf = GetFont (f);  				}  				else {  					gf = GetFont (w.Element.Font);  				}  				bbuff.Font = gf;  				if (w.Element.Effect != TextEffect.None) {  					bbuff.TextForeColor = w.Element.EffectColor;  					if (w.Element.Effect == TextEffect.Outline) {  						for (int xx = -1; xx <= 1; xx++)  							for (int yy = -1; yy <= 1; yy++)  								bbuff.DrawTabbedString (w.Text' x + xx' ypos + yy' 0' 0);  					}  					else if (w.Element.Effect != TextEffect.None) {  						bbuff.DrawTabbedString (w.Text' x + 1' ypos + 1' 0' 0);  					}  				}  				if (w.Element.Link != null) {  					if (w.Element.Link == _ActiveElement) {  						bbuff.TextForeColor = Link_Color_Hover;  					}  					else {  						bbuff.TextForeColor = Link_Color;  					}  				}  				else  					bbuff.TextForeColor = w.Element.ForeColor;  				bbuff.TextBackColor = w.Element.BackColor;  				bbuff.DrawTabbedString (w.Text' x' ypos' 0' 0);  			}  			w.ScreenArea.X = x;  			w.ScreenArea.Y = ypos;  			x += w.Width;  		}  		y += r.Height + r.BottomPadd;  		if (y > Height)  			break;  	}  }  catch (Exception x) {  	Console.WriteLine (x.Message);  }  
Magic Number,Alsing.Windows.Forms.CoreLib,FormatLabelControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\FormatLabel\FormatLabelControl.cs,OnPaint,The following statement contains a magic number: try {  	bbuff.FontTransparent = true;  	if (BackgroundImage != null) {  		g.DrawImage (BackgroundImage' 0' 0' Width' Height);  	}  	else {  		bbuff.Clear (BackColor);  	}  	int x = Margin;  	int y = Margin;  	for (int i = vScroll.Value; i < _Rows.Count; i++) {  		var r = (Row)_Rows [i];  		x = Margin;  		r.Visible = true;  		r.Top = y;  		if (r.RenderSeparator) {  			Color c1 = Color.FromArgb (120' 0' 0' 0);  			Brush b1 = new SolidBrush (c1);  			g.FillRectangle (b1' 0' y' Width' 1);  			Color c2 = Color.FromArgb (120' 255' 255' 255);  			Brush b2 = new SolidBrush (c2);  			g.FillRectangle (b2' 0' y + 1' Width' 1);  			b1.Dispose ();  			b2.Dispose ();  			//bbuff.DrawLine (this.ForeColor'new Point (0'y)'new Point (this.Width'y));  		}  		foreach (Word w in r.Words) {  			int ypos = r.Height - w.Height + y;  			if (w.Image != null) {  				g.DrawImage (w.Image' x' y);  				//bbuff.FillRect (Color.Red 'x'ypos'w.Width 'w.Height);  			}  			else {  				GDIFont gf;  				if (w.Element.Link != null) {  					Font f = null;  					FontStyle fs = w.Element.Font.Style;  					if (w.Element.Link == _ActiveElement) {  						if (_Link_UnderLine_Hover)  							fs |= FontStyle.Underline;  						f = new Font (w.Element.Font' fs);  					}  					else {  						if (_Link_UnderLine)  							fs |= FontStyle.Underline;  						f = new Font (w.Element.Font' fs);  					}  					gf = GetFont (f);  				}  				else {  					gf = GetFont (w.Element.Font);  				}  				bbuff.Font = gf;  				if (w.Element.Effect != TextEffect.None) {  					bbuff.TextForeColor = w.Element.EffectColor;  					if (w.Element.Effect == TextEffect.Outline) {  						for (int xx = -1; xx <= 1; xx++)  							for (int yy = -1; yy <= 1; yy++)  								bbuff.DrawTabbedString (w.Text' x + xx' ypos + yy' 0' 0);  					}  					else if (w.Element.Effect != TextEffect.None) {  						bbuff.DrawTabbedString (w.Text' x + 1' ypos + 1' 0' 0);  					}  				}  				if (w.Element.Link != null) {  					if (w.Element.Link == _ActiveElement) {  						bbuff.TextForeColor = Link_Color_Hover;  					}  					else {  						bbuff.TextForeColor = Link_Color;  					}  				}  				else  					bbuff.TextForeColor = w.Element.ForeColor;  				bbuff.TextBackColor = w.Element.BackColor;  				bbuff.DrawTabbedString (w.Text' x' ypos' 0' 0);  			}  			w.ScreenArea.X = x;  			w.ScreenArea.Y = ypos;  			x += w.Width;  		}  		y += r.Height + r.BottomPadd;  		if (y > Height)  			break;  	}  }  catch (Exception x) {  	Console.WriteLine (x.Message);  }  
Magic Number,Alsing.Windows.Forms.CoreLib,FormatLabelControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\FormatLabel\FormatLabelControl.cs,OnPaint,The following statement contains a magic number: try {  	bbuff.FontTransparent = true;  	if (BackgroundImage != null) {  		g.DrawImage (BackgroundImage' 0' 0' Width' Height);  	}  	else {  		bbuff.Clear (BackColor);  	}  	int x = Margin;  	int y = Margin;  	for (int i = vScroll.Value; i < _Rows.Count; i++) {  		var r = (Row)_Rows [i];  		x = Margin;  		r.Visible = true;  		r.Top = y;  		if (r.RenderSeparator) {  			Color c1 = Color.FromArgb (120' 0' 0' 0);  			Brush b1 = new SolidBrush (c1);  			g.FillRectangle (b1' 0' y' Width' 1);  			Color c2 = Color.FromArgb (120' 255' 255' 255);  			Brush b2 = new SolidBrush (c2);  			g.FillRectangle (b2' 0' y + 1' Width' 1);  			b1.Dispose ();  			b2.Dispose ();  			//bbuff.DrawLine (this.ForeColor'new Point (0'y)'new Point (this.Width'y));  		}  		foreach (Word w in r.Words) {  			int ypos = r.Height - w.Height + y;  			if (w.Image != null) {  				g.DrawImage (w.Image' x' y);  				//bbuff.FillRect (Color.Red 'x'ypos'w.Width 'w.Height);  			}  			else {  				GDIFont gf;  				if (w.Element.Link != null) {  					Font f = null;  					FontStyle fs = w.Element.Font.Style;  					if (w.Element.Link == _ActiveElement) {  						if (_Link_UnderLine_Hover)  							fs |= FontStyle.Underline;  						f = new Font (w.Element.Font' fs);  					}  					else {  						if (_Link_UnderLine)  							fs |= FontStyle.Underline;  						f = new Font (w.Element.Font' fs);  					}  					gf = GetFont (f);  				}  				else {  					gf = GetFont (w.Element.Font);  				}  				bbuff.Font = gf;  				if (w.Element.Effect != TextEffect.None) {  					bbuff.TextForeColor = w.Element.EffectColor;  					if (w.Element.Effect == TextEffect.Outline) {  						for (int xx = -1; xx <= 1; xx++)  							for (int yy = -1; yy <= 1; yy++)  								bbuff.DrawTabbedString (w.Text' x + xx' ypos + yy' 0' 0);  					}  					else if (w.Element.Effect != TextEffect.None) {  						bbuff.DrawTabbedString (w.Text' x + 1' ypos + 1' 0' 0);  					}  				}  				if (w.Element.Link != null) {  					if (w.Element.Link == _ActiveElement) {  						bbuff.TextForeColor = Link_Color_Hover;  					}  					else {  						bbuff.TextForeColor = Link_Color;  					}  				}  				else  					bbuff.TextForeColor = w.Element.ForeColor;  				bbuff.TextBackColor = w.Element.BackColor;  				bbuff.DrawTabbedString (w.Text' x' ypos' 0' 0);  			}  			w.ScreenArea.X = x;  			w.ScreenArea.Y = ypos;  			x += w.Width;  		}  		y += r.Height + r.BottomPadd;  		if (y > Height)  			break;  	}  }  catch (Exception x) {  	Console.WriteLine (x.Message);  }  
Magic Number,Alsing.Windows.Forms.CoreLib,FormatLabelControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\FormatLabel\FormatLabelControl.cs,OnPaint,The following statement contains a magic number: for (int i = vScroll.Value; i < _Rows.Count; i++) {  	var r = (Row)_Rows [i];  	x = Margin;  	r.Visible = true;  	r.Top = y;  	if (r.RenderSeparator) {  		Color c1 = Color.FromArgb (120' 0' 0' 0);  		Brush b1 = new SolidBrush (c1);  		g.FillRectangle (b1' 0' y' Width' 1);  		Color c2 = Color.FromArgb (120' 255' 255' 255);  		Brush b2 = new SolidBrush (c2);  		g.FillRectangle (b2' 0' y + 1' Width' 1);  		b1.Dispose ();  		b2.Dispose ();  		//bbuff.DrawLine (this.ForeColor'new Point (0'y)'new Point (this.Width'y));  	}  	foreach (Word w in r.Words) {  		int ypos = r.Height - w.Height + y;  		if (w.Image != null) {  			g.DrawImage (w.Image' x' y);  			//bbuff.FillRect (Color.Red 'x'ypos'w.Width 'w.Height);  		}  		else {  			GDIFont gf;  			if (w.Element.Link != null) {  				Font f = null;  				FontStyle fs = w.Element.Font.Style;  				if (w.Element.Link == _ActiveElement) {  					if (_Link_UnderLine_Hover)  						fs |= FontStyle.Underline;  					f = new Font (w.Element.Font' fs);  				}  				else {  					if (_Link_UnderLine)  						fs |= FontStyle.Underline;  					f = new Font (w.Element.Font' fs);  				}  				gf = GetFont (f);  			}  			else {  				gf = GetFont (w.Element.Font);  			}  			bbuff.Font = gf;  			if (w.Element.Effect != TextEffect.None) {  				bbuff.TextForeColor = w.Element.EffectColor;  				if (w.Element.Effect == TextEffect.Outline) {  					for (int xx = -1; xx <= 1; xx++)  						for (int yy = -1; yy <= 1; yy++)  							bbuff.DrawTabbedString (w.Text' x + xx' ypos + yy' 0' 0);  				}  				else if (w.Element.Effect != TextEffect.None) {  					bbuff.DrawTabbedString (w.Text' x + 1' ypos + 1' 0' 0);  				}  			}  			if (w.Element.Link != null) {  				if (w.Element.Link == _ActiveElement) {  					bbuff.TextForeColor = Link_Color_Hover;  				}  				else {  					bbuff.TextForeColor = Link_Color;  				}  			}  			else  				bbuff.TextForeColor = w.Element.ForeColor;  			bbuff.TextBackColor = w.Element.BackColor;  			bbuff.DrawTabbedString (w.Text' x' ypos' 0' 0);  		}  		w.ScreenArea.X = x;  		w.ScreenArea.Y = ypos;  		x += w.Width;  	}  	y += r.Height + r.BottomPadd;  	if (y > Height)  		break;  }  
Magic Number,Alsing.Windows.Forms.CoreLib,FormatLabelControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\FormatLabel\FormatLabelControl.cs,OnPaint,The following statement contains a magic number: for (int i = vScroll.Value; i < _Rows.Count; i++) {  	var r = (Row)_Rows [i];  	x = Margin;  	r.Visible = true;  	r.Top = y;  	if (r.RenderSeparator) {  		Color c1 = Color.FromArgb (120' 0' 0' 0);  		Brush b1 = new SolidBrush (c1);  		g.FillRectangle (b1' 0' y' Width' 1);  		Color c2 = Color.FromArgb (120' 255' 255' 255);  		Brush b2 = new SolidBrush (c2);  		g.FillRectangle (b2' 0' y + 1' Width' 1);  		b1.Dispose ();  		b2.Dispose ();  		//bbuff.DrawLine (this.ForeColor'new Point (0'y)'new Point (this.Width'y));  	}  	foreach (Word w in r.Words) {  		int ypos = r.Height - w.Height + y;  		if (w.Image != null) {  			g.DrawImage (w.Image' x' y);  			//bbuff.FillRect (Color.Red 'x'ypos'w.Width 'w.Height);  		}  		else {  			GDIFont gf;  			if (w.Element.Link != null) {  				Font f = null;  				FontStyle fs = w.Element.Font.Style;  				if (w.Element.Link == _ActiveElement) {  					if (_Link_UnderLine_Hover)  						fs |= FontStyle.Underline;  					f = new Font (w.Element.Font' fs);  				}  				else {  					if (_Link_UnderLine)  						fs |= FontStyle.Underline;  					f = new Font (w.Element.Font' fs);  				}  				gf = GetFont (f);  			}  			else {  				gf = GetFont (w.Element.Font);  			}  			bbuff.Font = gf;  			if (w.Element.Effect != TextEffect.None) {  				bbuff.TextForeColor = w.Element.EffectColor;  				if (w.Element.Effect == TextEffect.Outline) {  					for (int xx = -1; xx <= 1; xx++)  						for (int yy = -1; yy <= 1; yy++)  							bbuff.DrawTabbedString (w.Text' x + xx' ypos + yy' 0' 0);  				}  				else if (w.Element.Effect != TextEffect.None) {  					bbuff.DrawTabbedString (w.Text' x + 1' ypos + 1' 0' 0);  				}  			}  			if (w.Element.Link != null) {  				if (w.Element.Link == _ActiveElement) {  					bbuff.TextForeColor = Link_Color_Hover;  				}  				else {  					bbuff.TextForeColor = Link_Color;  				}  			}  			else  				bbuff.TextForeColor = w.Element.ForeColor;  			bbuff.TextBackColor = w.Element.BackColor;  			bbuff.DrawTabbedString (w.Text' x' ypos' 0' 0);  		}  		w.ScreenArea.X = x;  		w.ScreenArea.Y = ypos;  		x += w.Width;  	}  	y += r.Height + r.BottomPadd;  	if (y > Height)  		break;  }  
Magic Number,Alsing.Windows.Forms.CoreLib,FormatLabelControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\FormatLabel\FormatLabelControl.cs,OnPaint,The following statement contains a magic number: for (int i = vScroll.Value; i < _Rows.Count; i++) {  	var r = (Row)_Rows [i];  	x = Margin;  	r.Visible = true;  	r.Top = y;  	if (r.RenderSeparator) {  		Color c1 = Color.FromArgb (120' 0' 0' 0);  		Brush b1 = new SolidBrush (c1);  		g.FillRectangle (b1' 0' y' Width' 1);  		Color c2 = Color.FromArgb (120' 255' 255' 255);  		Brush b2 = new SolidBrush (c2);  		g.FillRectangle (b2' 0' y + 1' Width' 1);  		b1.Dispose ();  		b2.Dispose ();  		//bbuff.DrawLine (this.ForeColor'new Point (0'y)'new Point (this.Width'y));  	}  	foreach (Word w in r.Words) {  		int ypos = r.Height - w.Height + y;  		if (w.Image != null) {  			g.DrawImage (w.Image' x' y);  			//bbuff.FillRect (Color.Red 'x'ypos'w.Width 'w.Height);  		}  		else {  			GDIFont gf;  			if (w.Element.Link != null) {  				Font f = null;  				FontStyle fs = w.Element.Font.Style;  				if (w.Element.Link == _ActiveElement) {  					if (_Link_UnderLine_Hover)  						fs |= FontStyle.Underline;  					f = new Font (w.Element.Font' fs);  				}  				else {  					if (_Link_UnderLine)  						fs |= FontStyle.Underline;  					f = new Font (w.Element.Font' fs);  				}  				gf = GetFont (f);  			}  			else {  				gf = GetFont (w.Element.Font);  			}  			bbuff.Font = gf;  			if (w.Element.Effect != TextEffect.None) {  				bbuff.TextForeColor = w.Element.EffectColor;  				if (w.Element.Effect == TextEffect.Outline) {  					for (int xx = -1; xx <= 1; xx++)  						for (int yy = -1; yy <= 1; yy++)  							bbuff.DrawTabbedString (w.Text' x + xx' ypos + yy' 0' 0);  				}  				else if (w.Element.Effect != TextEffect.None) {  					bbuff.DrawTabbedString (w.Text' x + 1' ypos + 1' 0' 0);  				}  			}  			if (w.Element.Link != null) {  				if (w.Element.Link == _ActiveElement) {  					bbuff.TextForeColor = Link_Color_Hover;  				}  				else {  					bbuff.TextForeColor = Link_Color;  				}  			}  			else  				bbuff.TextForeColor = w.Element.ForeColor;  			bbuff.TextBackColor = w.Element.BackColor;  			bbuff.DrawTabbedString (w.Text' x' ypos' 0' 0);  		}  		w.ScreenArea.X = x;  		w.ScreenArea.Y = ypos;  		x += w.Width;  	}  	y += r.Height + r.BottomPadd;  	if (y > Height)  		break;  }  
Magic Number,Alsing.Windows.Forms.CoreLib,FormatLabelControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\FormatLabel\FormatLabelControl.cs,OnPaint,The following statement contains a magic number: for (int i = vScroll.Value; i < _Rows.Count; i++) {  	var r = (Row)_Rows [i];  	x = Margin;  	r.Visible = true;  	r.Top = y;  	if (r.RenderSeparator) {  		Color c1 = Color.FromArgb (120' 0' 0' 0);  		Brush b1 = new SolidBrush (c1);  		g.FillRectangle (b1' 0' y' Width' 1);  		Color c2 = Color.FromArgb (120' 255' 255' 255);  		Brush b2 = new SolidBrush (c2);  		g.FillRectangle (b2' 0' y + 1' Width' 1);  		b1.Dispose ();  		b2.Dispose ();  		//bbuff.DrawLine (this.ForeColor'new Point (0'y)'new Point (this.Width'y));  	}  	foreach (Word w in r.Words) {  		int ypos = r.Height - w.Height + y;  		if (w.Image != null) {  			g.DrawImage (w.Image' x' y);  			//bbuff.FillRect (Color.Red 'x'ypos'w.Width 'w.Height);  		}  		else {  			GDIFont gf;  			if (w.Element.Link != null) {  				Font f = null;  				FontStyle fs = w.Element.Font.Style;  				if (w.Element.Link == _ActiveElement) {  					if (_Link_UnderLine_Hover)  						fs |= FontStyle.Underline;  					f = new Font (w.Element.Font' fs);  				}  				else {  					if (_Link_UnderLine)  						fs |= FontStyle.Underline;  					f = new Font (w.Element.Font' fs);  				}  				gf = GetFont (f);  			}  			else {  				gf = GetFont (w.Element.Font);  			}  			bbuff.Font = gf;  			if (w.Element.Effect != TextEffect.None) {  				bbuff.TextForeColor = w.Element.EffectColor;  				if (w.Element.Effect == TextEffect.Outline) {  					for (int xx = -1; xx <= 1; xx++)  						for (int yy = -1; yy <= 1; yy++)  							bbuff.DrawTabbedString (w.Text' x + xx' ypos + yy' 0' 0);  				}  				else if (w.Element.Effect != TextEffect.None) {  					bbuff.DrawTabbedString (w.Text' x + 1' ypos + 1' 0' 0);  				}  			}  			if (w.Element.Link != null) {  				if (w.Element.Link == _ActiveElement) {  					bbuff.TextForeColor = Link_Color_Hover;  				}  				else {  					bbuff.TextForeColor = Link_Color;  				}  			}  			else  				bbuff.TextForeColor = w.Element.ForeColor;  			bbuff.TextBackColor = w.Element.BackColor;  			bbuff.DrawTabbedString (w.Text' x' ypos' 0' 0);  		}  		w.ScreenArea.X = x;  		w.ScreenArea.Y = ypos;  		x += w.Width;  	}  	y += r.Height + r.BottomPadd;  	if (y > Height)  		break;  }  
Magic Number,Alsing.Windows.Forms.CoreLib,FormatLabelControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\FormatLabel\FormatLabelControl.cs,OnPaint,The following statement contains a magic number: for (int i = vScroll.Value; i < _Rows.Count; i++) {  	var r = (Row)_Rows [i];  	x = Margin;  	r.Visible = true;  	r.Top = y;  	if (r.RenderSeparator) {  		Color c1 = Color.FromArgb (120' 0' 0' 0);  		Brush b1 = new SolidBrush (c1);  		g.FillRectangle (b1' 0' y' Width' 1);  		Color c2 = Color.FromArgb (120' 255' 255' 255);  		Brush b2 = new SolidBrush (c2);  		g.FillRectangle (b2' 0' y + 1' Width' 1);  		b1.Dispose ();  		b2.Dispose ();  		//bbuff.DrawLine (this.ForeColor'new Point (0'y)'new Point (this.Width'y));  	}  	foreach (Word w in r.Words) {  		int ypos = r.Height - w.Height + y;  		if (w.Image != null) {  			g.DrawImage (w.Image' x' y);  			//bbuff.FillRect (Color.Red 'x'ypos'w.Width 'w.Height);  		}  		else {  			GDIFont gf;  			if (w.Element.Link != null) {  				Font f = null;  				FontStyle fs = w.Element.Font.Style;  				if (w.Element.Link == _ActiveElement) {  					if (_Link_UnderLine_Hover)  						fs |= FontStyle.Underline;  					f = new Font (w.Element.Font' fs);  				}  				else {  					if (_Link_UnderLine)  						fs |= FontStyle.Underline;  					f = new Font (w.Element.Font' fs);  				}  				gf = GetFont (f);  			}  			else {  				gf = GetFont (w.Element.Font);  			}  			bbuff.Font = gf;  			if (w.Element.Effect != TextEffect.None) {  				bbuff.TextForeColor = w.Element.EffectColor;  				if (w.Element.Effect == TextEffect.Outline) {  					for (int xx = -1; xx <= 1; xx++)  						for (int yy = -1; yy <= 1; yy++)  							bbuff.DrawTabbedString (w.Text' x + xx' ypos + yy' 0' 0);  				}  				else if (w.Element.Effect != TextEffect.None) {  					bbuff.DrawTabbedString (w.Text' x + 1' ypos + 1' 0' 0);  				}  			}  			if (w.Element.Link != null) {  				if (w.Element.Link == _ActiveElement) {  					bbuff.TextForeColor = Link_Color_Hover;  				}  				else {  					bbuff.TextForeColor = Link_Color;  				}  			}  			else  				bbuff.TextForeColor = w.Element.ForeColor;  			bbuff.TextBackColor = w.Element.BackColor;  			bbuff.DrawTabbedString (w.Text' x' ypos' 0' 0);  		}  		w.ScreenArea.X = x;  		w.ScreenArea.Y = ypos;  		x += w.Width;  	}  	y += r.Height + r.BottomPadd;  	if (y > Height)  		break;  }  
Magic Number,Alsing.Windows.Forms.CoreLib,FormatLabelControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\FormatLabel\FormatLabelControl.cs,OnPaint,The following statement contains a magic number: if (r.RenderSeparator) {  	Color c1 = Color.FromArgb (120' 0' 0' 0);  	Brush b1 = new SolidBrush (c1);  	g.FillRectangle (b1' 0' y' Width' 1);  	Color c2 = Color.FromArgb (120' 255' 255' 255);  	Brush b2 = new SolidBrush (c2);  	g.FillRectangle (b2' 0' y + 1' Width' 1);  	b1.Dispose ();  	b2.Dispose ();  	//bbuff.DrawLine (this.ForeColor'new Point (0'y)'new Point (this.Width'y));  }  
Magic Number,Alsing.Windows.Forms.CoreLib,FormatLabelControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\FormatLabel\FormatLabelControl.cs,OnPaint,The following statement contains a magic number: if (r.RenderSeparator) {  	Color c1 = Color.FromArgb (120' 0' 0' 0);  	Brush b1 = new SolidBrush (c1);  	g.FillRectangle (b1' 0' y' Width' 1);  	Color c2 = Color.FromArgb (120' 255' 255' 255);  	Brush b2 = new SolidBrush (c2);  	g.FillRectangle (b2' 0' y + 1' Width' 1);  	b1.Dispose ();  	b2.Dispose ();  	//bbuff.DrawLine (this.ForeColor'new Point (0'y)'new Point (this.Width'y));  }  
Magic Number,Alsing.Windows.Forms.CoreLib,FormatLabelControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\FormatLabel\FormatLabelControl.cs,OnPaint,The following statement contains a magic number: if (r.RenderSeparator) {  	Color c1 = Color.FromArgb (120' 0' 0' 0);  	Brush b1 = new SolidBrush (c1);  	g.FillRectangle (b1' 0' y' Width' 1);  	Color c2 = Color.FromArgb (120' 255' 255' 255);  	Brush b2 = new SolidBrush (c2);  	g.FillRectangle (b2' 0' y + 1' Width' 1);  	b1.Dispose ();  	b2.Dispose ();  	//bbuff.DrawLine (this.ForeColor'new Point (0'y)'new Point (this.Width'y));  }  
Magic Number,Alsing.Windows.Forms.CoreLib,FormatLabelControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\FormatLabel\FormatLabelControl.cs,OnPaint,The following statement contains a magic number: if (r.RenderSeparator) {  	Color c1 = Color.FromArgb (120' 0' 0' 0);  	Brush b1 = new SolidBrush (c1);  	g.FillRectangle (b1' 0' y' Width' 1);  	Color c2 = Color.FromArgb (120' 255' 255' 255);  	Brush b2 = new SolidBrush (c2);  	g.FillRectangle (b2' 0' y + 1' Width' 1);  	b1.Dispose ();  	b2.Dispose ();  	//bbuff.DrawLine (this.ForeColor'new Point (0'y)'new Point (this.Width'y));  }  
Magic Number,Alsing.Windows.Forms.CoreLib,FormatLabelControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\FormatLabel\FormatLabelControl.cs,OnPaint,The following statement contains a magic number: if (r.RenderSeparator) {  	Color c1 = Color.FromArgb (120' 0' 0' 0);  	Brush b1 = new SolidBrush (c1);  	g.FillRectangle (b1' 0' y' Width' 1);  	Color c2 = Color.FromArgb (120' 255' 255' 255);  	Brush b2 = new SolidBrush (c2);  	g.FillRectangle (b2' 0' y + 1' Width' 1);  	b1.Dispose ();  	b2.Dispose ();  	//bbuff.DrawLine (this.ForeColor'new Point (0'y)'new Point (this.Width'y));  }  
Magic Number,Alsing.Windows.Forms.CoreLib,FormatLabelControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\FormatLabel\FormatLabelControl.cs,ApplyFormat,The following statement contains a magic number: fontsize.Push ((int)(Font.Size * 1.3));  
Magic Number,Alsing.Windows.Forms.CoreLib,FormatLabelControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\FormatLabel\FormatLabelControl.cs,ApplyFormat,The following statement contains a magic number: foreach (Element Element in Elements) {  	switch (Element.TagName) {  	case "b": {  		bold.Push (true);  		break;  	}  	case "a": {  		//underline.Push (true);  		//forecolor.Push (_l);  		link.Push (Element);  		break;  	}  	case "i":  	case "em": {  		italic.Push (true);  		break;  	}  	case "u": {  		underline.Push (true);  		break;  	}  	case "font": {  		string _fontname = GetAttrib ("face"' Element.Tag);  		string _size = GetAttrib ("size"' Element.Tag);  		string _color = GetAttrib ("color"' Element.Tag);  		string _effectcolor = GetAttrib ("effectcolor"' Element.Tag);  		string _effect = GetAttrib ("effect"' Element.Tag);  		if (_size == "")  			fontsize.Push (fontsize.Peek ());  		else  			fontsize.Push (int.Parse (_size));  		if (_fontname == "")  			fontname.Push (fontname.Peek ());  		else  			fontname.Push (_fontname);  		if (_color == "")  			forecolor.Push (forecolor.Peek ());  		else  			forecolor.Push (Color.FromName (_color));  		if (_effectcolor == "")  			effectcolor.Push (effectcolor.Peek ());  		else  			effectcolor.Push (Color.FromName (_effectcolor));  		if (_effect == "")  			effect.Push (effect.Peek ());  		else  			effect.Push (Enum.Parse (typeof(TextEffect)' _effect' true));  		break;  	}  	case "br": {  		Element.NewLine = true;  		break;  	}  	case "hr": {  		Element.NewLine = true;  		break;  	}  	case "h3": {  		fontsize.Push ((int)(Font.Size * 1.4));  		bold.Push (true);  		Element.NewLine = true;  		break;  	}  	case "h4": {  		fontsize.Push ((int)(Font.Size * 1.2));  		bold.Push (true);  		Element.NewLine = true;  		break;  	}  	case "/b": {  		bold.Pop ();  		break;  	}  	case "/a": {  		//underline.Pop ();  		//forecolor.Pop ();  		link.Pop ();  		break;  	}  	case "/i":  	case "/em": {  		italic.Pop ();  		break;  	}  	case "/u": {  		underline.Pop ();  		break;  	}  	case "/font": {  		fontname.Pop ();  		fontsize.Pop ();  		forecolor.Pop ();  		effect.Pop ();  		effectcolor.Pop ();  		break;  	}  	case "/h3": {  		fontsize.Pop ();  		bold.Pop ();  		Element.NewLine = true;  		break;  	}  	case "/h4": {  		fontsize.Pop ();  		bold.Pop ();  		Element.NewLine = true;  		break;  	}  	default: {  		break;  	}  	}  	//---------------------------------------------------------------------  	var Bold = (bool)bold.Peek ();  	var Italic = (bool)italic.Peek ();  	var Underline = (bool)underline.Peek ();  	var Link = (Element)link.Peek ();  	var FontName = (string)fontname.Peek ();  	var FontSize = (int)fontsize.Peek ();  	var BackColor = (Color)backcolor.Peek ();  	var ForeColor1 = (Color)forecolor.Peek ();  	var Effect = (TextEffect)effect.Peek ();  	var EffectColor = (Color)effectcolor.Peek ();  	FontStyle fs = 0;  	if (Bold)  		fs |= FontStyle.Bold;  	if (Italic)  		fs |= FontStyle.Italic;  	if (Underline)  		fs |= FontStyle.Underline;  	var font = new Font (FontName' FontSize' fs);  	Element.Font = font;  	Element.BackColor = BackColor;  	Element.ForeColor = ForeColor1;  	Element.Link = Link;  	Element.Effect = Effect;  	Element.EffectColor = EffectColor;  }  
Magic Number,Alsing.Windows.Forms.CoreLib,FormatLabelControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\FormatLabel\FormatLabelControl.cs,ApplyFormat,The following statement contains a magic number: foreach (Element Element in Elements) {  	switch (Element.TagName) {  	case "b": {  		bold.Push (true);  		break;  	}  	case "a": {  		//underline.Push (true);  		//forecolor.Push (_l);  		link.Push (Element);  		break;  	}  	case "i":  	case "em": {  		italic.Push (true);  		break;  	}  	case "u": {  		underline.Push (true);  		break;  	}  	case "font": {  		string _fontname = GetAttrib ("face"' Element.Tag);  		string _size = GetAttrib ("size"' Element.Tag);  		string _color = GetAttrib ("color"' Element.Tag);  		string _effectcolor = GetAttrib ("effectcolor"' Element.Tag);  		string _effect = GetAttrib ("effect"' Element.Tag);  		if (_size == "")  			fontsize.Push (fontsize.Peek ());  		else  			fontsize.Push (int.Parse (_size));  		if (_fontname == "")  			fontname.Push (fontname.Peek ());  		else  			fontname.Push (_fontname);  		if (_color == "")  			forecolor.Push (forecolor.Peek ());  		else  			forecolor.Push (Color.FromName (_color));  		if (_effectcolor == "")  			effectcolor.Push (effectcolor.Peek ());  		else  			effectcolor.Push (Color.FromName (_effectcolor));  		if (_effect == "")  			effect.Push (effect.Peek ());  		else  			effect.Push (Enum.Parse (typeof(TextEffect)' _effect' true));  		break;  	}  	case "br": {  		Element.NewLine = true;  		break;  	}  	case "hr": {  		Element.NewLine = true;  		break;  	}  	case "h3": {  		fontsize.Push ((int)(Font.Size * 1.4));  		bold.Push (true);  		Element.NewLine = true;  		break;  	}  	case "h4": {  		fontsize.Push ((int)(Font.Size * 1.2));  		bold.Push (true);  		Element.NewLine = true;  		break;  	}  	case "/b": {  		bold.Pop ();  		break;  	}  	case "/a": {  		//underline.Pop ();  		//forecolor.Pop ();  		link.Pop ();  		break;  	}  	case "/i":  	case "/em": {  		italic.Pop ();  		break;  	}  	case "/u": {  		underline.Pop ();  		break;  	}  	case "/font": {  		fontname.Pop ();  		fontsize.Pop ();  		forecolor.Pop ();  		effect.Pop ();  		effectcolor.Pop ();  		break;  	}  	case "/h3": {  		fontsize.Pop ();  		bold.Pop ();  		Element.NewLine = true;  		break;  	}  	case "/h4": {  		fontsize.Pop ();  		bold.Pop ();  		Element.NewLine = true;  		break;  	}  	default: {  		break;  	}  	}  	//---------------------------------------------------------------------  	var Bold = (bool)bold.Peek ();  	var Italic = (bool)italic.Peek ();  	var Underline = (bool)underline.Peek ();  	var Link = (Element)link.Peek ();  	var FontName = (string)fontname.Peek ();  	var FontSize = (int)fontsize.Peek ();  	var BackColor = (Color)backcolor.Peek ();  	var ForeColor1 = (Color)forecolor.Peek ();  	var Effect = (TextEffect)effect.Peek ();  	var EffectColor = (Color)effectcolor.Peek ();  	FontStyle fs = 0;  	if (Bold)  		fs |= FontStyle.Bold;  	if (Italic)  		fs |= FontStyle.Italic;  	if (Underline)  		fs |= FontStyle.Underline;  	var font = new Font (FontName' FontSize' fs);  	Element.Font = font;  	Element.BackColor = BackColor;  	Element.ForeColor = ForeColor1;  	Element.Link = Link;  	Element.Effect = Effect;  	Element.EffectColor = EffectColor;  }  
Magic Number,Alsing.Windows.Forms.CoreLib,FormatLabelControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\FormatLabel\FormatLabelControl.cs,ApplyFormat,The following statement contains a magic number: switch (Element.TagName) {  case "b": {  	bold.Push (true);  	break;  }  case "a": {  	//underline.Push (true);  	//forecolor.Push (_l);  	link.Push (Element);  	break;  }  case "i":  case "em": {  	italic.Push (true);  	break;  }  case "u": {  	underline.Push (true);  	break;  }  case "font": {  	string _fontname = GetAttrib ("face"' Element.Tag);  	string _size = GetAttrib ("size"' Element.Tag);  	string _color = GetAttrib ("color"' Element.Tag);  	string _effectcolor = GetAttrib ("effectcolor"' Element.Tag);  	string _effect = GetAttrib ("effect"' Element.Tag);  	if (_size == "")  		fontsize.Push (fontsize.Peek ());  	else  		fontsize.Push (int.Parse (_size));  	if (_fontname == "")  		fontname.Push (fontname.Peek ());  	else  		fontname.Push (_fontname);  	if (_color == "")  		forecolor.Push (forecolor.Peek ());  	else  		forecolor.Push (Color.FromName (_color));  	if (_effectcolor == "")  		effectcolor.Push (effectcolor.Peek ());  	else  		effectcolor.Push (Color.FromName (_effectcolor));  	if (_effect == "")  		effect.Push (effect.Peek ());  	else  		effect.Push (Enum.Parse (typeof(TextEffect)' _effect' true));  	break;  }  case "br": {  	Element.NewLine = true;  	break;  }  case "hr": {  	Element.NewLine = true;  	break;  }  case "h3": {  	fontsize.Push ((int)(Font.Size * 1.4));  	bold.Push (true);  	Element.NewLine = true;  	break;  }  case "h4": {  	fontsize.Push ((int)(Font.Size * 1.2));  	bold.Push (true);  	Element.NewLine = true;  	break;  }  case "/b": {  	bold.Pop ();  	break;  }  case "/a": {  	//underline.Pop ();  	//forecolor.Pop ();  	link.Pop ();  	break;  }  case "/i":  case "/em": {  	italic.Pop ();  	break;  }  case "/u": {  	underline.Pop ();  	break;  }  case "/font": {  	fontname.Pop ();  	fontsize.Pop ();  	forecolor.Pop ();  	effect.Pop ();  	effectcolor.Pop ();  	break;  }  case "/h3": {  	fontsize.Pop ();  	bold.Pop ();  	Element.NewLine = true;  	break;  }  case "/h4": {  	fontsize.Pop ();  	bold.Pop ();  	Element.NewLine = true;  	break;  }  default: {  	break;  }  }  
Magic Number,Alsing.Windows.Forms.CoreLib,FormatLabelControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\FormatLabel\FormatLabelControl.cs,ApplyFormat,The following statement contains a magic number: switch (Element.TagName) {  case "b": {  	bold.Push (true);  	break;  }  case "a": {  	//underline.Push (true);  	//forecolor.Push (_l);  	link.Push (Element);  	break;  }  case "i":  case "em": {  	italic.Push (true);  	break;  }  case "u": {  	underline.Push (true);  	break;  }  case "font": {  	string _fontname = GetAttrib ("face"' Element.Tag);  	string _size = GetAttrib ("size"' Element.Tag);  	string _color = GetAttrib ("color"' Element.Tag);  	string _effectcolor = GetAttrib ("effectcolor"' Element.Tag);  	string _effect = GetAttrib ("effect"' Element.Tag);  	if (_size == "")  		fontsize.Push (fontsize.Peek ());  	else  		fontsize.Push (int.Parse (_size));  	if (_fontname == "")  		fontname.Push (fontname.Peek ());  	else  		fontname.Push (_fontname);  	if (_color == "")  		forecolor.Push (forecolor.Peek ());  	else  		forecolor.Push (Color.FromName (_color));  	if (_effectcolor == "")  		effectcolor.Push (effectcolor.Peek ());  	else  		effectcolor.Push (Color.FromName (_effectcolor));  	if (_effect == "")  		effect.Push (effect.Peek ());  	else  		effect.Push (Enum.Parse (typeof(TextEffect)' _effect' true));  	break;  }  case "br": {  	Element.NewLine = true;  	break;  }  case "hr": {  	Element.NewLine = true;  	break;  }  case "h3": {  	fontsize.Push ((int)(Font.Size * 1.4));  	bold.Push (true);  	Element.NewLine = true;  	break;  }  case "h4": {  	fontsize.Push ((int)(Font.Size * 1.2));  	bold.Push (true);  	Element.NewLine = true;  	break;  }  case "/b": {  	bold.Pop ();  	break;  }  case "/a": {  	//underline.Pop ();  	//forecolor.Pop ();  	link.Pop ();  	break;  }  case "/i":  case "/em": {  	italic.Pop ();  	break;  }  case "/u": {  	underline.Pop ();  	break;  }  case "/font": {  	fontname.Pop ();  	fontsize.Pop ();  	forecolor.Pop ();  	effect.Pop ();  	effectcolor.Pop ();  	break;  }  case "/h3": {  	fontsize.Pop ();  	bold.Pop ();  	Element.NewLine = true;  	break;  }  case "/h4": {  	fontsize.Pop ();  	bold.Pop ();  	Element.NewLine = true;  	break;  }  default: {  	break;  }  }  
Magic Number,Alsing.Windows.Forms.CoreLib,FormatLabelControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\FormatLabel\FormatLabelControl.cs,ApplyFormat,The following statement contains a magic number: fontsize.Push ((int)(Font.Size * 1.4));  
Magic Number,Alsing.Windows.Forms.CoreLib,FormatLabelControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\FormatLabel\FormatLabelControl.cs,ApplyFormat,The following statement contains a magic number: fontsize.Push ((int)(Font.Size * 1.2));  
Magic Number,Alsing.Windows.Forms.CoreLib,FormatLabelControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\FormatLabel\FormatLabelControl.cs,CreateWords,The following statement contains a magic number: foreach (Element Element in Elements) {  	if (Element.TagName == "img") {  		Element.words = new Word[1];  		Element.words [0] = new Word ();  		Image img = null;  		try {  			string SRC = GetAttrib ("img"' Element.Tag).ToLowerInvariant ();  			if (IsIndex (SRC)) {  				int index = int.Parse (SRC);  				img = ImageList.Images [index];  			}  			else if (SRC.StartsWith ("http://"))//from url  			 {  			}  			else if (SRC.StartsWith ("file://"))// from file  			 {  				img = Image.FromFile (SRC.Substring (7));  			}  			else//from file  			 {  				img = Image.FromFile (SRC);  			}  		}  		catch {  			img = new Bitmap (20' 20);  			_HasImageError = true;  		}  		Element.words [0].Image = img;  		Element.words [0].Element = Element;  		if (img != null) {  			Element.words [0].Height = img.Height;  			Element.words [0].Width = img.Width;  			Element.words [0].ScreenArea.Width = img.Width;  			Element.words [0].ScreenArea.Height = img.Height;  		}  	}  	else {  		string[] words = Element.Text.Split (' ');  		Element.words = new Word[words.Length];  		int i = 0;  		foreach (string word in words) {  			Element.words [i] = new Word ();  			string tmp;  			Element.words [i].Element = Element;  			if (i == words.Length - 1) {  				Element.words [i].Text = word;  				tmp = word;  			}  			else {  				Element.words [i].Text = word + " ";  				tmp = word + " ";  				//last space cant be measured ' lets measure an "'" instead  			}  			//SizeF size=g.MeasureString (tmp'Element.Font);  			bbuff.Font = GetFont (Element.Font);  			Size s = bbuff.MeasureTabbedString (tmp' 0);  			Element.words [i].Height = s.Height;  			Element.words [i].Width = s.Width - 0;  			Element.words [i].ScreenArea.Width = Element.words [i].Width;  			Element.words [i].ScreenArea.Height = Element.words [i].Height;  			//	Element.words[i].Link =Element.Link ;  			i++;  		}  	}  }  
Magic Number,Alsing.Windows.Forms.CoreLib,FormatLabelControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\FormatLabel\FormatLabelControl.cs,CreateWords,The following statement contains a magic number: foreach (Element Element in Elements) {  	if (Element.TagName == "img") {  		Element.words = new Word[1];  		Element.words [0] = new Word ();  		Image img = null;  		try {  			string SRC = GetAttrib ("img"' Element.Tag).ToLowerInvariant ();  			if (IsIndex (SRC)) {  				int index = int.Parse (SRC);  				img = ImageList.Images [index];  			}  			else if (SRC.StartsWith ("http://"))//from url  			 {  			}  			else if (SRC.StartsWith ("file://"))// from file  			 {  				img = Image.FromFile (SRC.Substring (7));  			}  			else//from file  			 {  				img = Image.FromFile (SRC);  			}  		}  		catch {  			img = new Bitmap (20' 20);  			_HasImageError = true;  		}  		Element.words [0].Image = img;  		Element.words [0].Element = Element;  		if (img != null) {  			Element.words [0].Height = img.Height;  			Element.words [0].Width = img.Width;  			Element.words [0].ScreenArea.Width = img.Width;  			Element.words [0].ScreenArea.Height = img.Height;  		}  	}  	else {  		string[] words = Element.Text.Split (' ');  		Element.words = new Word[words.Length];  		int i = 0;  		foreach (string word in words) {  			Element.words [i] = new Word ();  			string tmp;  			Element.words [i].Element = Element;  			if (i == words.Length - 1) {  				Element.words [i].Text = word;  				tmp = word;  			}  			else {  				Element.words [i].Text = word + " ";  				tmp = word + " ";  				//last space cant be measured ' lets measure an "'" instead  			}  			//SizeF size=g.MeasureString (tmp'Element.Font);  			bbuff.Font = GetFont (Element.Font);  			Size s = bbuff.MeasureTabbedString (tmp' 0);  			Element.words [i].Height = s.Height;  			Element.words [i].Width = s.Width - 0;  			Element.words [i].ScreenArea.Width = Element.words [i].Width;  			Element.words [i].ScreenArea.Height = Element.words [i].Height;  			//	Element.words[i].Link =Element.Link ;  			i++;  		}  	}  }  
Magic Number,Alsing.Windows.Forms.CoreLib,FormatLabelControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\FormatLabel\FormatLabelControl.cs,CreateWords,The following statement contains a magic number: foreach (Element Element in Elements) {  	if (Element.TagName == "img") {  		Element.words = new Word[1];  		Element.words [0] = new Word ();  		Image img = null;  		try {  			string SRC = GetAttrib ("img"' Element.Tag).ToLowerInvariant ();  			if (IsIndex (SRC)) {  				int index = int.Parse (SRC);  				img = ImageList.Images [index];  			}  			else if (SRC.StartsWith ("http://"))//from url  			 {  			}  			else if (SRC.StartsWith ("file://"))// from file  			 {  				img = Image.FromFile (SRC.Substring (7));  			}  			else//from file  			 {  				img = Image.FromFile (SRC);  			}  		}  		catch {  			img = new Bitmap (20' 20);  			_HasImageError = true;  		}  		Element.words [0].Image = img;  		Element.words [0].Element = Element;  		if (img != null) {  			Element.words [0].Height = img.Height;  			Element.words [0].Width = img.Width;  			Element.words [0].ScreenArea.Width = img.Width;  			Element.words [0].ScreenArea.Height = img.Height;  		}  	}  	else {  		string[] words = Element.Text.Split (' ');  		Element.words = new Word[words.Length];  		int i = 0;  		foreach (string word in words) {  			Element.words [i] = new Word ();  			string tmp;  			Element.words [i].Element = Element;  			if (i == words.Length - 1) {  				Element.words [i].Text = word;  				tmp = word;  			}  			else {  				Element.words [i].Text = word + " ";  				tmp = word + " ";  				//last space cant be measured ' lets measure an "'" instead  			}  			//SizeF size=g.MeasureString (tmp'Element.Font);  			bbuff.Font = GetFont (Element.Font);  			Size s = bbuff.MeasureTabbedString (tmp' 0);  			Element.words [i].Height = s.Height;  			Element.words [i].Width = s.Width - 0;  			Element.words [i].ScreenArea.Width = Element.words [i].Width;  			Element.words [i].ScreenArea.Height = Element.words [i].Height;  			//	Element.words[i].Link =Element.Link ;  			i++;  		}  	}  }  
Magic Number,Alsing.Windows.Forms.CoreLib,FormatLabelControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\FormatLabel\FormatLabelControl.cs,CreateWords,The following statement contains a magic number: if (Element.TagName == "img") {  	Element.words = new Word[1];  	Element.words [0] = new Word ();  	Image img = null;  	try {  		string SRC = GetAttrib ("img"' Element.Tag).ToLowerInvariant ();  		if (IsIndex (SRC)) {  			int index = int.Parse (SRC);  			img = ImageList.Images [index];  		}  		else if (SRC.StartsWith ("http://"))//from url  		 {  		}  		else if (SRC.StartsWith ("file://"))// from file  		 {  			img = Image.FromFile (SRC.Substring (7));  		}  		else//from file  		 {  			img = Image.FromFile (SRC);  		}  	}  	catch {  		img = new Bitmap (20' 20);  		_HasImageError = true;  	}  	Element.words [0].Image = img;  	Element.words [0].Element = Element;  	if (img != null) {  		Element.words [0].Height = img.Height;  		Element.words [0].Width = img.Width;  		Element.words [0].ScreenArea.Width = img.Width;  		Element.words [0].ScreenArea.Height = img.Height;  	}  }  else {  	string[] words = Element.Text.Split (' ');  	Element.words = new Word[words.Length];  	int i = 0;  	foreach (string word in words) {  		Element.words [i] = new Word ();  		string tmp;  		Element.words [i].Element = Element;  		if (i == words.Length - 1) {  			Element.words [i].Text = word;  			tmp = word;  		}  		else {  			Element.words [i].Text = word + " ";  			tmp = word + " ";  			//last space cant be measured ' lets measure an "'" instead  		}  		//SizeF size=g.MeasureString (tmp'Element.Font);  		bbuff.Font = GetFont (Element.Font);  		Size s = bbuff.MeasureTabbedString (tmp' 0);  		Element.words [i].Height = s.Height;  		Element.words [i].Width = s.Width - 0;  		Element.words [i].ScreenArea.Width = Element.words [i].Width;  		Element.words [i].ScreenArea.Height = Element.words [i].Height;  		//	Element.words[i].Link =Element.Link ;  		i++;  	}  }  
Magic Number,Alsing.Windows.Forms.CoreLib,FormatLabelControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\FormatLabel\FormatLabelControl.cs,CreateWords,The following statement contains a magic number: if (Element.TagName == "img") {  	Element.words = new Word[1];  	Element.words [0] = new Word ();  	Image img = null;  	try {  		string SRC = GetAttrib ("img"' Element.Tag).ToLowerInvariant ();  		if (IsIndex (SRC)) {  			int index = int.Parse (SRC);  			img = ImageList.Images [index];  		}  		else if (SRC.StartsWith ("http://"))//from url  		 {  		}  		else if (SRC.StartsWith ("file://"))// from file  		 {  			img = Image.FromFile (SRC.Substring (7));  		}  		else//from file  		 {  			img = Image.FromFile (SRC);  		}  	}  	catch {  		img = new Bitmap (20' 20);  		_HasImageError = true;  	}  	Element.words [0].Image = img;  	Element.words [0].Element = Element;  	if (img != null) {  		Element.words [0].Height = img.Height;  		Element.words [0].Width = img.Width;  		Element.words [0].ScreenArea.Width = img.Width;  		Element.words [0].ScreenArea.Height = img.Height;  	}  }  else {  	string[] words = Element.Text.Split (' ');  	Element.words = new Word[words.Length];  	int i = 0;  	foreach (string word in words) {  		Element.words [i] = new Word ();  		string tmp;  		Element.words [i].Element = Element;  		if (i == words.Length - 1) {  			Element.words [i].Text = word;  			tmp = word;  		}  		else {  			Element.words [i].Text = word + " ";  			tmp = word + " ";  			//last space cant be measured ' lets measure an "'" instead  		}  		//SizeF size=g.MeasureString (tmp'Element.Font);  		bbuff.Font = GetFont (Element.Font);  		Size s = bbuff.MeasureTabbedString (tmp' 0);  		Element.words [i].Height = s.Height;  		Element.words [i].Width = s.Width - 0;  		Element.words [i].ScreenArea.Width = Element.words [i].Width;  		Element.words [i].ScreenArea.Height = Element.words [i].Height;  		//	Element.words[i].Link =Element.Link ;  		i++;  	}  }  
Magic Number,Alsing.Windows.Forms.CoreLib,FormatLabelControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\FormatLabel\FormatLabelControl.cs,CreateWords,The following statement contains a magic number: if (Element.TagName == "img") {  	Element.words = new Word[1];  	Element.words [0] = new Word ();  	Image img = null;  	try {  		string SRC = GetAttrib ("img"' Element.Tag).ToLowerInvariant ();  		if (IsIndex (SRC)) {  			int index = int.Parse (SRC);  			img = ImageList.Images [index];  		}  		else if (SRC.StartsWith ("http://"))//from url  		 {  		}  		else if (SRC.StartsWith ("file://"))// from file  		 {  			img = Image.FromFile (SRC.Substring (7));  		}  		else//from file  		 {  			img = Image.FromFile (SRC);  		}  	}  	catch {  		img = new Bitmap (20' 20);  		_HasImageError = true;  	}  	Element.words [0].Image = img;  	Element.words [0].Element = Element;  	if (img != null) {  		Element.words [0].Height = img.Height;  		Element.words [0].Width = img.Width;  		Element.words [0].ScreenArea.Width = img.Width;  		Element.words [0].ScreenArea.Height = img.Height;  	}  }  else {  	string[] words = Element.Text.Split (' ');  	Element.words = new Word[words.Length];  	int i = 0;  	foreach (string word in words) {  		Element.words [i] = new Word ();  		string tmp;  		Element.words [i].Element = Element;  		if (i == words.Length - 1) {  			Element.words [i].Text = word;  			tmp = word;  		}  		else {  			Element.words [i].Text = word + " ";  			tmp = word + " ";  			//last space cant be measured ' lets measure an "'" instead  		}  		//SizeF size=g.MeasureString (tmp'Element.Font);  		bbuff.Font = GetFont (Element.Font);  		Size s = bbuff.MeasureTabbedString (tmp' 0);  		Element.words [i].Height = s.Height;  		Element.words [i].Width = s.Width - 0;  		Element.words [i].ScreenArea.Width = Element.words [i].Width;  		Element.words [i].ScreenArea.Height = Element.words [i].Height;  		//	Element.words[i].Link =Element.Link ;  		i++;  	}  }  
Magic Number,Alsing.Windows.Forms.CoreLib,FormatLabelControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\FormatLabel\FormatLabelControl.cs,CreateWords,The following statement contains a magic number: try {  	string SRC = GetAttrib ("img"' Element.Tag).ToLowerInvariant ();  	if (IsIndex (SRC)) {  		int index = int.Parse (SRC);  		img = ImageList.Images [index];  	}  	else if (SRC.StartsWith ("http://"))//from url  	 {  	}  	else if (SRC.StartsWith ("file://"))// from file  	 {  		img = Image.FromFile (SRC.Substring (7));  	}  	else//from file  	 {  		img = Image.FromFile (SRC);  	}  }  catch {  	img = new Bitmap (20' 20);  	_HasImageError = true;  }  
Magic Number,Alsing.Windows.Forms.CoreLib,FormatLabelControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\FormatLabel\FormatLabelControl.cs,CreateWords,The following statement contains a magic number: try {  	string SRC = GetAttrib ("img"' Element.Tag).ToLowerInvariant ();  	if (IsIndex (SRC)) {  		int index = int.Parse (SRC);  		img = ImageList.Images [index];  	}  	else if (SRC.StartsWith ("http://"))//from url  	 {  	}  	else if (SRC.StartsWith ("file://"))// from file  	 {  		img = Image.FromFile (SRC.Substring (7));  	}  	else//from file  	 {  		img = Image.FromFile (SRC);  	}  }  catch {  	img = new Bitmap (20' 20);  	_HasImageError = true;  }  
Magic Number,Alsing.Windows.Forms.CoreLib,FormatLabelControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\FormatLabel\FormatLabelControl.cs,CreateWords,The following statement contains a magic number: try {  	string SRC = GetAttrib ("img"' Element.Tag).ToLowerInvariant ();  	if (IsIndex (SRC)) {  		int index = int.Parse (SRC);  		img = ImageList.Images [index];  	}  	else if (SRC.StartsWith ("http://"))//from url  	 {  	}  	else if (SRC.StartsWith ("file://"))// from file  	 {  		img = Image.FromFile (SRC.Substring (7));  	}  	else//from file  	 {  		img = Image.FromFile (SRC);  	}  }  catch {  	img = new Bitmap (20' 20);  	_HasImageError = true;  }  
Magic Number,Alsing.Windows.Forms.CoreLib,FormatLabelControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\FormatLabel\FormatLabelControl.cs,CreateWords,The following statement contains a magic number: if (IsIndex (SRC)) {  	int index = int.Parse (SRC);  	img = ImageList.Images [index];  }  else if (SRC.StartsWith ("http://"))//from url   {  }  else if (SRC.StartsWith ("file://"))// from file   {  	img = Image.FromFile (SRC.Substring (7));  }  else//from file   {  	img = Image.FromFile (SRC);  }  
Magic Number,Alsing.Windows.Forms.CoreLib,FormatLabelControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\FormatLabel\FormatLabelControl.cs,CreateWords,The following statement contains a magic number: if (SRC.StartsWith ("http://"))//from url   {  }  else if (SRC.StartsWith ("file://"))// from file   {  	img = Image.FromFile (SRC.Substring (7));  }  else//from file   {  	img = Image.FromFile (SRC);  }  
Magic Number,Alsing.Windows.Forms.CoreLib,FormatLabelControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\FormatLabel\FormatLabelControl.cs,CreateWords,The following statement contains a magic number: if (SRC.StartsWith ("file://"))// from file   {  	img = Image.FromFile (SRC.Substring (7));  }  else//from file   {  	img = Image.FromFile (SRC);  }  
Magic Number,Alsing.Windows.Forms.CoreLib,FormatLabelControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\FormatLabel\FormatLabelControl.cs,CreateWords,The following statement contains a magic number: img = Image.FromFile (SRC.Substring (7));  
Magic Number,Alsing.Windows.Forms.CoreLib,FormatLabelControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\FormatLabel\FormatLabelControl.cs,CreateWords,The following statement contains a magic number: img = new Bitmap (20' 20);  
Magic Number,Alsing.Windows.Forms.CoreLib,FormatLabelControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\FormatLabel\FormatLabelControl.cs,CreateWords,The following statement contains a magic number: img = new Bitmap (20' 20);  
Magic Number,Alsing.Windows.Forms.CoreLib,FormatLabelControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\FormatLabel\FormatLabelControl.cs,CreateRows,The following statement contains a magic number: if (_Elements != null) {  	int x = 0;  	_Rows = new List<Row> ();  	//build rows---------------------------------------------  	var row = new Row ();  	_Rows.Add (row);  	bool WhiteSpace = false;  	foreach (Element Element in _Elements) {  		if (Element.words == null)  			return;  		if (Element.NewLine) {  			//tag forces a new line  			x = 0;  			row = new Row ();  			_Rows.Add (row);  			WhiteSpace = true;  		}  		if (Element.TagName == "hr") {  			row.RenderSeparator = true;  		}  		//else  		//{  		foreach (Word word in Element.words) {  			if (WordWrap) {  				int scrollwdh = 0;  				if (ScrollBars == ScrollBars.Both || ScrollBars == ScrollBars.Vertical)  					scrollwdh = vScroll.Width;  				if ((word.Width + x) > ClientWidth - Margin - scrollwdh) {  					//new line due to wordwrap  					x = 0;  					row = new Row ();  					_Rows.Add (row);  					WhiteSpace = true;  				}  			}  			if (word.Text.Replace (" "' "") != "" || word.Image != null)  				WhiteSpace = false;  			if (!WhiteSpace) {  				row.Words.Add (word);  				x += word.Width;  			}  		}  		//}  	}  	//apply width and height to all rows  	int index = 0;  	foreach (Row r in _Rows) {  		int width = 0;  		int height = 0;  		int padd = 0;  		if (index > 0) {  			int previndex = index - 1;  			var prev = (Row)_Rows [previndex];  			while (previndex >= 0 && prev.Words.Count == 0) {  				prev = (Row)_Rows [previndex];  				previndex--;  			}  			if (previndex >= 0) {  				prev = (Row)_Rows [previndex];  				if (prev.Words.Count > 0) {  					var w = (Word)prev.Words [prev.Words.Count - 1];  					height = w.Height;  				}  			}  		}  		foreach (Word w in r.Words) {  			if (w.Height > height && (w.Text != ""))  				height = w.Height;  			width += w.Width;  		}  		r.Height = height;  		int MaxImageH = 0;  		foreach (Word w in r.Words) {  			if (w.Image != null) {  				if (w.Height > height)  					MaxImageH = w.Height;  			}  		}  		foreach (Word w in r.Words) {  			int imgH = 0;  			int imgPadd = 0;  			if (w.Image != null) {  				string valign = GetAttrib ("valign"' w.Element.Tag);  				switch (valign) {  				case "top": {  					imgH = r.Height;  					imgPadd = w.Height - imgH;  					break;  				}  				case "middle":  				case "center": {  					imgH = r.Height;  					int tmp = (w.Height - imgH) / 2;  					imgH += tmp;  					imgPadd = tmp;  					break;  				}  				case "bottom": {  					imgH = w.Height;  					imgPadd = 0;  					break;  				}  				default: {  					imgH = w.Height;  					imgPadd = 0;  					break;  				}  				}  				if (imgH > height)  					height = imgH;  				if (imgPadd > padd)  					padd = imgPadd;  				width += w.Width;  			}  		}  		r.Width = width;  		r.Height = height;  		r.BottomPadd = padd;  		index++;  	}  	vScroll.Maximum = _Rows.Count;  }  
Magic Number,Alsing.Windows.Forms.CoreLib,FormatLabelControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\FormatLabel\FormatLabelControl.cs,CreateRows,The following statement contains a magic number: foreach (Row r in _Rows) {  	int width = 0;  	int height = 0;  	int padd = 0;  	if (index > 0) {  		int previndex = index - 1;  		var prev = (Row)_Rows [previndex];  		while (previndex >= 0 && prev.Words.Count == 0) {  			prev = (Row)_Rows [previndex];  			previndex--;  		}  		if (previndex >= 0) {  			prev = (Row)_Rows [previndex];  			if (prev.Words.Count > 0) {  				var w = (Word)prev.Words [prev.Words.Count - 1];  				height = w.Height;  			}  		}  	}  	foreach (Word w in r.Words) {  		if (w.Height > height && (w.Text != ""))  			height = w.Height;  		width += w.Width;  	}  	r.Height = height;  	int MaxImageH = 0;  	foreach (Word w in r.Words) {  		if (w.Image != null) {  			if (w.Height > height)  				MaxImageH = w.Height;  		}  	}  	foreach (Word w in r.Words) {  		int imgH = 0;  		int imgPadd = 0;  		if (w.Image != null) {  			string valign = GetAttrib ("valign"' w.Element.Tag);  			switch (valign) {  			case "top": {  				imgH = r.Height;  				imgPadd = w.Height - imgH;  				break;  			}  			case "middle":  			case "center": {  				imgH = r.Height;  				int tmp = (w.Height - imgH) / 2;  				imgH += tmp;  				imgPadd = tmp;  				break;  			}  			case "bottom": {  				imgH = w.Height;  				imgPadd = 0;  				break;  			}  			default: {  				imgH = w.Height;  				imgPadd = 0;  				break;  			}  			}  			if (imgH > height)  				height = imgH;  			if (imgPadd > padd)  				padd = imgPadd;  			width += w.Width;  		}  	}  	r.Width = width;  	r.Height = height;  	r.BottomPadd = padd;  	index++;  }  
Magic Number,Alsing.Windows.Forms.CoreLib,FormatLabelControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\FormatLabel\FormatLabelControl.cs,CreateRows,The following statement contains a magic number: foreach (Word w in r.Words) {  	int imgH = 0;  	int imgPadd = 0;  	if (w.Image != null) {  		string valign = GetAttrib ("valign"' w.Element.Tag);  		switch (valign) {  		case "top": {  			imgH = r.Height;  			imgPadd = w.Height - imgH;  			break;  		}  		case "middle":  		case "center": {  			imgH = r.Height;  			int tmp = (w.Height - imgH) / 2;  			imgH += tmp;  			imgPadd = tmp;  			break;  		}  		case "bottom": {  			imgH = w.Height;  			imgPadd = 0;  			break;  		}  		default: {  			imgH = w.Height;  			imgPadd = 0;  			break;  		}  		}  		if (imgH > height)  			height = imgH;  		if (imgPadd > padd)  			padd = imgPadd;  		width += w.Width;  	}  }  
Magic Number,Alsing.Windows.Forms.CoreLib,FormatLabelControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\FormatLabel\FormatLabelControl.cs,CreateRows,The following statement contains a magic number: if (w.Image != null) {  	string valign = GetAttrib ("valign"' w.Element.Tag);  	switch (valign) {  	case "top": {  		imgH = r.Height;  		imgPadd = w.Height - imgH;  		break;  	}  	case "middle":  	case "center": {  		imgH = r.Height;  		int tmp = (w.Height - imgH) / 2;  		imgH += tmp;  		imgPadd = tmp;  		break;  	}  	case "bottom": {  		imgH = w.Height;  		imgPadd = 0;  		break;  	}  	default: {  		imgH = w.Height;  		imgPadd = 0;  		break;  	}  	}  	if (imgH > height)  		height = imgH;  	if (imgPadd > padd)  		padd = imgPadd;  	width += w.Width;  }  
Magic Number,Alsing.Windows.Forms.CoreLib,FormatLabelControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\FormatLabel\FormatLabelControl.cs,CreateRows,The following statement contains a magic number: switch (valign) {  case "top": {  	imgH = r.Height;  	imgPadd = w.Height - imgH;  	break;  }  case "middle":  case "center": {  	imgH = r.Height;  	int tmp = (w.Height - imgH) / 2;  	imgH += tmp;  	imgPadd = tmp;  	break;  }  case "bottom": {  	imgH = w.Height;  	imgPadd = 0;  	break;  }  default: {  	imgH = w.Height;  	imgPadd = 0;  	break;  }  }  
Magic Number,Alsing.Windows.Forms.CoreLib,FormatLabelControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\FormatLabel\FormatLabelControl.cs,GetWidth,The following statement contains a magic number: return max + Margin * 2 + BorderWidth * 2;  
Magic Number,Alsing.Windows.Forms.CoreLib,FormatLabelControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\FormatLabel\FormatLabelControl.cs,GetWidth,The following statement contains a magic number: return max + Margin * 2 + BorderWidth * 2;  
Magic Number,Alsing.Windows.Forms.CoreLib,FormatLabelControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\FormatLabel\FormatLabelControl.cs,GetHeight,The following statement contains a magic number: return max + Margin * 2 + BorderWidth * 2;  
Magic Number,Alsing.Windows.Forms.CoreLib,FormatLabelControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\FormatLabel\FormatLabelControl.cs,GetHeight,The following statement contains a magic number: return max + Margin * 2 + BorderWidth * 2;  
Magic Number,Alsing.Windows.Forms.CoreLib,IntelliMouseControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\IntelliMouse\IntelliMouse.cs,InitializeComponent,The following statement contains a magic number: this.tmrFeedback.Interval = 10;  
Magic Number,Alsing.Windows.Forms.CoreLib,IntelliMouseControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\IntelliMouse\IntelliMouse.cs,InitializeComponent,The following statement contains a magic number: this.picImage.Location = new System.Drawing.Point (17' 17);  
Magic Number,Alsing.Windows.Forms.CoreLib,IntelliMouseControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\IntelliMouse\IntelliMouse.cs,InitializeComponent,The following statement contains a magic number: this.picImage.Location = new System.Drawing.Point (17' 17);  
Magic Number,Alsing.Windows.Forms.CoreLib,IntelliMouseControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\IntelliMouse\IntelliMouse.cs,InitializeComponent,The following statement contains a magic number: this.regionHandler1.TransparencyKey = System.Drawing.Color.FromArgb (((System.Byte)(255))' ((System.Byte)(0))' ((System.Byte)(255)));  
Magic Number,Alsing.Windows.Forms.CoreLib,IntelliMouseControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\IntelliMouse\IntelliMouse.cs,InitializeComponent,The following statement contains a magic number: this.regionHandler1.TransparencyKey = System.Drawing.Color.FromArgb (((System.Byte)(255))' ((System.Byte)(0))' ((System.Byte)(255)));  
Magic Number,Alsing.Windows.Forms.CoreLib,IntelliMouseControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\IntelliMouse\IntelliMouse.cs,Activate,The following statement contains a magic number: Location = new Point (x - Image.Width / 2' y - Image.Height / 2);  
Magic Number,Alsing.Windows.Forms.CoreLib,IntelliMouseControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\IntelliMouse\IntelliMouse.cs,Activate,The following statement contains a magic number: Location = new Point (x - Image.Width / 2' y - Image.Height / 2);  
Magic Number,Alsing.Windows.Forms.CoreLib,IntelliMouseControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\IntelliMouse\IntelliMouse.cs,SetCursor,The following statement contains a magic number: if (dY > 16) {  	var ms = new MemoryStream (Properties.Resources.MoveDown);  	Cursor = new Cursor (ms);  	CurrentDelta.Y -= 16;  }  else if (dY < -16) {  	var ms = new MemoryStream (Properties.Resources.MoveUp);  	Cursor = new Cursor (ms);  	CurrentDelta.Y += 16;  }  else {  	var ms = new MemoryStream (Properties.Resources.MoveUpDown);  	Cursor = new Cursor (ms);  	CurrentDelta = new Point (0' 0);  }  
Magic Number,Alsing.Windows.Forms.CoreLib,IntelliMouseControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\IntelliMouse\IntelliMouse.cs,SetCursor,The following statement contains a magic number: if (dY > 16) {  	var ms = new MemoryStream (Properties.Resources.MoveDown);  	Cursor = new Cursor (ms);  	CurrentDelta.Y -= 16;  }  else if (dY < -16) {  	var ms = new MemoryStream (Properties.Resources.MoveUp);  	Cursor = new Cursor (ms);  	CurrentDelta.Y += 16;  }  else {  	var ms = new MemoryStream (Properties.Resources.MoveUpDown);  	Cursor = new Cursor (ms);  	CurrentDelta = new Point (0' 0);  }  
Magic Number,Alsing.Windows.Forms.CoreLib,IntelliMouseControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\IntelliMouse\IntelliMouse.cs,SetCursor,The following statement contains a magic number: if (dY > 16) {  	var ms = new MemoryStream (Properties.Resources.MoveDown);  	Cursor = new Cursor (ms);  	CurrentDelta.Y -= 16;  }  else if (dY < -16) {  	var ms = new MemoryStream (Properties.Resources.MoveUp);  	Cursor = new Cursor (ms);  	CurrentDelta.Y += 16;  }  else {  	var ms = new MemoryStream (Properties.Resources.MoveUpDown);  	Cursor = new Cursor (ms);  	CurrentDelta = new Point (0' 0);  }  
Magic Number,Alsing.Windows.Forms.CoreLib,IntelliMouseControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\IntelliMouse\IntelliMouse.cs,SetCursor,The following statement contains a magic number: if (dY > 16) {  	var ms = new MemoryStream (Properties.Resources.MoveDown);  	Cursor = new Cursor (ms);  	CurrentDelta.Y -= 16;  }  else if (dY < -16) {  	var ms = new MemoryStream (Properties.Resources.MoveUp);  	Cursor = new Cursor (ms);  	CurrentDelta.Y += 16;  }  else {  	var ms = new MemoryStream (Properties.Resources.MoveUpDown);  	Cursor = new Cursor (ms);  	CurrentDelta = new Point (0' 0);  }  
Magic Number,Alsing.Windows.Forms.CoreLib,IntelliMouseControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\IntelliMouse\IntelliMouse.cs,SetCursor,The following statement contains a magic number: CurrentDelta.Y -= 16;  
Magic Number,Alsing.Windows.Forms.CoreLib,IntelliMouseControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\IntelliMouse\IntelliMouse.cs,SetCursor,The following statement contains a magic number: if (dY < -16) {  	var ms = new MemoryStream (Properties.Resources.MoveUp);  	Cursor = new Cursor (ms);  	CurrentDelta.Y += 16;  }  else {  	var ms = new MemoryStream (Properties.Resources.MoveUpDown);  	Cursor = new Cursor (ms);  	CurrentDelta = new Point (0' 0);  }  
Magic Number,Alsing.Windows.Forms.CoreLib,IntelliMouseControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\IntelliMouse\IntelliMouse.cs,SetCursor,The following statement contains a magic number: if (dY < -16) {  	var ms = new MemoryStream (Properties.Resources.MoveUp);  	Cursor = new Cursor (ms);  	CurrentDelta.Y += 16;  }  else {  	var ms = new MemoryStream (Properties.Resources.MoveUpDown);  	Cursor = new Cursor (ms);  	CurrentDelta = new Point (0' 0);  }  
Magic Number,Alsing.Windows.Forms.CoreLib,IntelliMouseControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\IntelliMouse\IntelliMouse.cs,SetCursor,The following statement contains a magic number: CurrentDelta.Y += 16;  
Magic Number,Alsing.Windows.Forms.CoreLib,IntelliMouseControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\IntelliMouse\IntelliMouse.cs,OnMouseMove,The following statement contains a magic number: if (Active) {  	if (e.Button != MouseButtons.Middle && e.Button != MouseButtons.None) {  		Deactivate ();  	}  	else {  		int x = e.X;  		int y = e.Y;  		x -= Image.Width / 2;  		y -= Image.Height / 2;  		SetCursor (x' y);  		NativeMethods.SendMessage (Handle' WM_MBUTTONDOWN' 0' 0);  	}  }  else {  	base.OnMouseMove (e);  }  
Magic Number,Alsing.Windows.Forms.CoreLib,IntelliMouseControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\IntelliMouse\IntelliMouse.cs,OnMouseMove,The following statement contains a magic number: if (Active) {  	if (e.Button != MouseButtons.Middle && e.Button != MouseButtons.None) {  		Deactivate ();  	}  	else {  		int x = e.X;  		int y = e.Y;  		x -= Image.Width / 2;  		y -= Image.Height / 2;  		SetCursor (x' y);  		NativeMethods.SendMessage (Handle' WM_MBUTTONDOWN' 0' 0);  	}  }  else {  	base.OnMouseMove (e);  }  
Magic Number,Alsing.Windows.Forms.CoreLib,IntelliMouseControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\IntelliMouse\IntelliMouse.cs,OnMouseMove,The following statement contains a magic number: if (e.Button != MouseButtons.Middle && e.Button != MouseButtons.None) {  	Deactivate ();  }  else {  	int x = e.X;  	int y = e.Y;  	x -= Image.Width / 2;  	y -= Image.Height / 2;  	SetCursor (x' y);  	NativeMethods.SendMessage (Handle' WM_MBUTTONDOWN' 0' 0);  }  
Magic Number,Alsing.Windows.Forms.CoreLib,IntelliMouseControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\IntelliMouse\IntelliMouse.cs,OnMouseMove,The following statement contains a magic number: if (e.Button != MouseButtons.Middle && e.Button != MouseButtons.None) {  	Deactivate ();  }  else {  	int x = e.X;  	int y = e.Y;  	x -= Image.Width / 2;  	y -= Image.Height / 2;  	SetCursor (x' y);  	NativeMethods.SendMessage (Handle' WM_MBUTTONDOWN' 0' 0);  }  
Magic Number,Alsing.Windows.Forms.CoreLib,IntelliMouseControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\IntelliMouse\IntelliMouse.cs,OnMouseMove,The following statement contains a magic number: x -= Image.Width / 2;  
Magic Number,Alsing.Windows.Forms.CoreLib,IntelliMouseControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\IntelliMouse\IntelliMouse.cs,OnMouseMove,The following statement contains a magic number: y -= Image.Height / 2;  
Magic Number,Alsing.Windows.Forms.CoreLib,IntelliMouseControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\IntelliMouse\IntelliMouse.cs,OnResize,The following statement contains a magic number: Size = Image != null ? new Size (Image.Width' Image.Height) : new Size (32' 32);  
Magic Number,Alsing.Windows.Forms.CoreLib,IntelliMouseControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\IntelliMouse\IntelliMouse.cs,OnResize,The following statement contains a magic number: Size = Image != null ? new Size (Image.Width' Image.Height) : new Size (32' 32);  
Magic Number,Alsing.Windows.Forms.CoreLib,SplitViewChildControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\SplitView\SplitViewChildControl.cs,ShowThumbs,The following statement contains a magic number: TopThumb.Height = 8;  
Magic Number,Alsing.Windows.Forms.CoreLib,SplitViewChildControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\SplitView\SplitViewChildControl.cs,ShowThumbs,The following statement contains a magic number: LeftThumb.Width = 8;  
Magic Number,Alsing.Windows.Forms.CoreLib,SplitViewChildControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\SplitView\SplitViewChildControl.cs,InitializeComponent,The following statement contains a magic number: this.hScroll.Location = new System.Drawing.Point (-4' 292);  
Magic Number,Alsing.Windows.Forms.CoreLib,SplitViewChildControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\SplitView\SplitViewChildControl.cs,InitializeComponent,The following statement contains a magic number: this.hScroll.Location = new System.Drawing.Point (-4' 292);  
Magic Number,Alsing.Windows.Forms.CoreLib,SplitViewChildControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\SplitView\SplitViewChildControl.cs,InitializeComponent,The following statement contains a magic number: this.hScroll.Size = new System.Drawing.Size (440' 16);  
Magic Number,Alsing.Windows.Forms.CoreLib,SplitViewChildControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\SplitView\SplitViewChildControl.cs,InitializeComponent,The following statement contains a magic number: this.hScroll.Size = new System.Drawing.Size (440' 16);  
Magic Number,Alsing.Windows.Forms.CoreLib,SplitViewChildControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\SplitView\SplitViewChildControl.cs,InitializeComponent,The following statement contains a magic number: this.vScroll.Location = new System.Drawing.Point (440' 0);  
Magic Number,Alsing.Windows.Forms.CoreLib,SplitViewChildControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\SplitView\SplitViewChildControl.cs,InitializeComponent,The following statement contains a magic number: this.vScroll.Maximum = 300;  
Magic Number,Alsing.Windows.Forms.CoreLib,SplitViewChildControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\SplitView\SplitViewChildControl.cs,InitializeComponent,The following statement contains a magic number: this.vScroll.Size = new System.Drawing.Size (16' 360);  
Magic Number,Alsing.Windows.Forms.CoreLib,SplitViewChildControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\SplitView\SplitViewChildControl.cs,InitializeComponent,The following statement contains a magic number: this.vScroll.Size = new System.Drawing.Size (16' 360);  
Magic Number,Alsing.Windows.Forms.CoreLib,SplitViewChildControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\SplitView\SplitViewChildControl.cs,InitializeComponent,The following statement contains a magic number: this.Filler.Location = new System.Drawing.Point (64' 260);  
Magic Number,Alsing.Windows.Forms.CoreLib,SplitViewChildControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\SplitView\SplitViewChildControl.cs,InitializeComponent,The following statement contains a magic number: this.Filler.Location = new System.Drawing.Point (64' 260);  
Magic Number,Alsing.Windows.Forms.CoreLib,SplitViewChildControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\SplitView\SplitViewChildControl.cs,InitializeComponent,The following statement contains a magic number: this.Filler.Size = new System.Drawing.Size (20' 20);  
Magic Number,Alsing.Windows.Forms.CoreLib,SplitViewChildControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\SplitView\SplitViewChildControl.cs,InitializeComponent,The following statement contains a magic number: this.Filler.Size = new System.Drawing.Size (20' 20);  
Magic Number,Alsing.Windows.Forms.CoreLib,SplitViewChildControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\SplitView\SplitViewChildControl.cs,InitializeComponent,The following statement contains a magic number: this.Filler.TabIndex = 3;  
Magic Number,Alsing.Windows.Forms.CoreLib,SplitViewChildControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\SplitView\SplitViewChildControl.cs,InitializeComponent,The following statement contains a magic number: this.TopThumb.Location = new System.Drawing.Point (101' 17);  
Magic Number,Alsing.Windows.Forms.CoreLib,SplitViewChildControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\SplitView\SplitViewChildControl.cs,InitializeComponent,The following statement contains a magic number: this.TopThumb.Location = new System.Drawing.Point (101' 17);  
Magic Number,Alsing.Windows.Forms.CoreLib,SplitViewChildControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\SplitView\SplitViewChildControl.cs,InitializeComponent,The following statement contains a magic number: this.TopThumb.Size = new System.Drawing.Size (16' 8);  
Magic Number,Alsing.Windows.Forms.CoreLib,SplitViewChildControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\SplitView\SplitViewChildControl.cs,InitializeComponent,The following statement contains a magic number: this.TopThumb.Size = new System.Drawing.Size (16' 8);  
Magic Number,Alsing.Windows.Forms.CoreLib,SplitViewChildControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\SplitView\SplitViewChildControl.cs,InitializeComponent,The following statement contains a magic number: this.TopThumb.TabIndex = 3;  
Magic Number,Alsing.Windows.Forms.CoreLib,SplitViewChildControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\SplitView\SplitViewChildControl.cs,InitializeComponent,The following statement contains a magic number: this.LeftThumb.Location = new System.Drawing.Point (423' 17);  
Magic Number,Alsing.Windows.Forms.CoreLib,SplitViewChildControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\SplitView\SplitViewChildControl.cs,InitializeComponent,The following statement contains a magic number: this.LeftThumb.Location = new System.Drawing.Point (423' 17);  
Magic Number,Alsing.Windows.Forms.CoreLib,SplitViewChildControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\SplitView\SplitViewChildControl.cs,InitializeComponent,The following statement contains a magic number: this.LeftThumb.Size = new System.Drawing.Size (8' 16);  
Magic Number,Alsing.Windows.Forms.CoreLib,SplitViewChildControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\SplitView\SplitViewChildControl.cs,InitializeComponent,The following statement contains a magic number: this.LeftThumb.Size = new System.Drawing.Size (8' 16);  
Magic Number,Alsing.Windows.Forms.CoreLib,SplitViewChildControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\SplitView\SplitViewChildControl.cs,InitializeComponent,The following statement contains a magic number: this.LeftThumb.TabIndex = 3;  
Magic Number,Alsing.Windows.Forms.CoreLib,SplitViewChildControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\SplitView\SplitViewChildControl.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size (456' 376);  
Magic Number,Alsing.Windows.Forms.CoreLib,SplitViewChildControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\SplitView\SplitViewChildControl.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size (456' 376);  
Magic Number,Alsing.Windows.Forms.CoreLib,SplitViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\SplitView\SplitViewControl.cs,InitializeComponent,The following statement contains a magic number: this.Vertical.Size = new System.Drawing.Size (4' 264);  
Magic Number,Alsing.Windows.Forms.CoreLib,SplitViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\SplitView\SplitViewControl.cs,InitializeComponent,The following statement contains a magic number: this.Vertical.Size = new System.Drawing.Size (4' 264);  
Magic Number,Alsing.Windows.Forms.CoreLib,SplitViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\SplitView\SplitViewControl.cs,InitializeComponent,The following statement contains a magic number: this.Horizontal.Size = new System.Drawing.Size (320' 4);  
Magic Number,Alsing.Windows.Forms.CoreLib,SplitViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\SplitView\SplitViewControl.cs,InitializeComponent,The following statement contains a magic number: this.Horizontal.Size = new System.Drawing.Size (320' 4);  
Magic Number,Alsing.Windows.Forms.CoreLib,SplitViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\SplitView\SplitViewControl.cs,InitializeComponent,The following statement contains a magic number: this.Center.Location = new System.Drawing.Point (146' 69);  
Magic Number,Alsing.Windows.Forms.CoreLib,SplitViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\SplitView\SplitViewControl.cs,InitializeComponent,The following statement contains a magic number: this.Center.Location = new System.Drawing.Point (146' 69);  
Magic Number,Alsing.Windows.Forms.CoreLib,SplitViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\SplitView\SplitViewControl.cs,InitializeComponent,The following statement contains a magic number: this.Center.Size = new System.Drawing.Size (24' 24);  
Magic Number,Alsing.Windows.Forms.CoreLib,SplitViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\SplitView\SplitViewControl.cs,InitializeComponent,The following statement contains a magic number: this.Center.Size = new System.Drawing.Size (24' 24);  
Magic Number,Alsing.Windows.Forms.CoreLib,SplitViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\SplitView\SplitViewControl.cs,InitializeComponent,The following statement contains a magic number: this.Center.TabIndex = 2;  
Magic Number,Alsing.Windows.Forms.CoreLib,SplitViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\SplitView\SplitViewControl.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size (200' 200);  
Magic Number,Alsing.Windows.Forms.CoreLib,SplitViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\SplitView\SplitViewControl.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size (200' 200);  
Magic Number,Alsing.Windows.Forms.CoreLib,SplitViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\SplitView\SplitViewControl.cs,DoResize,The following statement contains a magic number: if (NewHeight != 0 && NewWidth != 0) {  	SuspendLayout ();  	//				Horizontal.Top = (int)(NewHeight*HorizontalPos);  	//				Vertical.Left =(int)(NewWidth*VerticalPos);  	//  	//				int CenterY=(Horizontal.Top+Horizontal.Height /2)-Center.Height/2;  	//				int CenterX=(Vertical.Left+Vertical.Width /2)-Center.Width /2;  	//  	//				Center.Location =new Point (CenterX'CenterY);  	//ReSize (0'0);  	ReSize2 ();  	OnResizing ();  	if (Horizontal.Top < 15) {  		Horizontal.Top = 0 - Horizontal.Height;  		OnHideTop ();  	}  	if (Vertical.Left < 15) {  		Vertical.Left = 0 - Vertical.Width;  		OnHideLeft ();  	}  	Horizontal.Width = Width;  	Vertical.Height = Height;  	Horizontal.SendToBack ();  	Vertical.SendToBack ();  	Horizontal.BackColor = SystemColors.Control;  	Vertical.BackColor = SystemColors.Control;  	//this.SendToBack ();  	int RightLeft = Vertical.Left + Vertical.Width;  	int RightLowerTop = Horizontal.Top + Horizontal.Height;  	int RightWidth = Width - RightLeft;  	int LowerHeight = Height - RightLowerTop;  	int UpperHeight = Horizontal.Top;  	int LeftWidth = Vertical.Left;  	if (LowerRight != null) {  		LowerRight.BringToFront ();  		LowerRight.SetBounds (RightLeft' RightLowerTop' RightWidth' LowerHeight);  	}  	if (UpperRight != null) {  		UpperRight.BringToFront ();  		UpperRight.SetBounds (RightLeft' 0' RightWidth' UpperHeight);  	}  	if (LowerLeft != null) {  		LowerLeft.BringToFront ();  		LowerLeft.SetBounds (0' RightLowerTop' LeftWidth' LowerHeight);  	}  	if (UpperLeft != null) {  		UpperLeft.BringToFront ();  		UpperLeft.SetBounds (0' 0' LeftWidth' UpperHeight);  	}  	ResumeLayout ();  	//ggf  }  
Magic Number,Alsing.Windows.Forms.CoreLib,SplitViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\SplitView\SplitViewControl.cs,DoResize,The following statement contains a magic number: if (NewHeight != 0 && NewWidth != 0) {  	SuspendLayout ();  	//				Horizontal.Top = (int)(NewHeight*HorizontalPos);  	//				Vertical.Left =(int)(NewWidth*VerticalPos);  	//  	//				int CenterY=(Horizontal.Top+Horizontal.Height /2)-Center.Height/2;  	//				int CenterX=(Vertical.Left+Vertical.Width /2)-Center.Width /2;  	//  	//				Center.Location =new Point (CenterX'CenterY);  	//ReSize (0'0);  	ReSize2 ();  	OnResizing ();  	if (Horizontal.Top < 15) {  		Horizontal.Top = 0 - Horizontal.Height;  		OnHideTop ();  	}  	if (Vertical.Left < 15) {  		Vertical.Left = 0 - Vertical.Width;  		OnHideLeft ();  	}  	Horizontal.Width = Width;  	Vertical.Height = Height;  	Horizontal.SendToBack ();  	Vertical.SendToBack ();  	Horizontal.BackColor = SystemColors.Control;  	Vertical.BackColor = SystemColors.Control;  	//this.SendToBack ();  	int RightLeft = Vertical.Left + Vertical.Width;  	int RightLowerTop = Horizontal.Top + Horizontal.Height;  	int RightWidth = Width - RightLeft;  	int LowerHeight = Height - RightLowerTop;  	int UpperHeight = Horizontal.Top;  	int LeftWidth = Vertical.Left;  	if (LowerRight != null) {  		LowerRight.BringToFront ();  		LowerRight.SetBounds (RightLeft' RightLowerTop' RightWidth' LowerHeight);  	}  	if (UpperRight != null) {  		UpperRight.BringToFront ();  		UpperRight.SetBounds (RightLeft' 0' RightWidth' UpperHeight);  	}  	if (LowerLeft != null) {  		LowerLeft.BringToFront ();  		LowerLeft.SetBounds (0' RightLowerTop' LeftWidth' LowerHeight);  	}  	if (UpperLeft != null) {  		UpperLeft.BringToFront ();  		UpperLeft.SetBounds (0' 0' LeftWidth' UpperHeight);  	}  	ResumeLayout ();  	//ggf  }  
Magic Number,Alsing.Windows.Forms.CoreLib,SplitViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\SplitView\SplitViewControl.cs,DoResize,The following statement contains a magic number: if (Horizontal.Top < 15) {  	Horizontal.Top = 0 - Horizontal.Height;  	OnHideTop ();  }  
Magic Number,Alsing.Windows.Forms.CoreLib,SplitViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\SplitView\SplitViewControl.cs,DoResize,The following statement contains a magic number: if (Vertical.Left < 15) {  	Vertical.Left = 0 - Vertical.Width;  	OnHideLeft ();  }  
Magic Number,Alsing.Windows.Forms.CoreLib,SplitViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\SplitView\SplitViewControl.cs,Horizontal_MouseMove,The following statement contains a magic number: if (Action == SizeAction.SizeH && e.Button == MouseButtons.Left) {  	Point start;  	int x = e.X;  	int y = e.Y;  	if (y + Horizontal.Top > Height - 4)  		y = Height - 4 - Horizontal.Top;  	if (y + Horizontal.Top < 0)  		y = 0 - Horizontal.Top;  	if (!FirstTime) {  		start = PointToScreen (Location);  		start.Y += PrevPos.Y + Horizontal.Location.Y;  		ControlPaint.FillReversibleRectangle (new Rectangle (start.X' start.Y' Width' 3)' Color.Black);  	}  	else  		FirstTime = false;  	start = PointToScreen (Location);  	start.Y += y + Horizontal.Location.Y;  	ControlPaint.FillReversibleRectangle (new Rectangle (start.X' start.Y' Width' 3)' Color.Black);  	PrevPos = new Point (x' y);  }  
Magic Number,Alsing.Windows.Forms.CoreLib,SplitViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\SplitView\SplitViewControl.cs,Horizontal_MouseMove,The following statement contains a magic number: if (Action == SizeAction.SizeH && e.Button == MouseButtons.Left) {  	Point start;  	int x = e.X;  	int y = e.Y;  	if (y + Horizontal.Top > Height - 4)  		y = Height - 4 - Horizontal.Top;  	if (y + Horizontal.Top < 0)  		y = 0 - Horizontal.Top;  	if (!FirstTime) {  		start = PointToScreen (Location);  		start.Y += PrevPos.Y + Horizontal.Location.Y;  		ControlPaint.FillReversibleRectangle (new Rectangle (start.X' start.Y' Width' 3)' Color.Black);  	}  	else  		FirstTime = false;  	start = PointToScreen (Location);  	start.Y += y + Horizontal.Location.Y;  	ControlPaint.FillReversibleRectangle (new Rectangle (start.X' start.Y' Width' 3)' Color.Black);  	PrevPos = new Point (x' y);  }  
Magic Number,Alsing.Windows.Forms.CoreLib,SplitViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\SplitView\SplitViewControl.cs,Horizontal_MouseMove,The following statement contains a magic number: if (Action == SizeAction.SizeH && e.Button == MouseButtons.Left) {  	Point start;  	int x = e.X;  	int y = e.Y;  	if (y + Horizontal.Top > Height - 4)  		y = Height - 4 - Horizontal.Top;  	if (y + Horizontal.Top < 0)  		y = 0 - Horizontal.Top;  	if (!FirstTime) {  		start = PointToScreen (Location);  		start.Y += PrevPos.Y + Horizontal.Location.Y;  		ControlPaint.FillReversibleRectangle (new Rectangle (start.X' start.Y' Width' 3)' Color.Black);  	}  	else  		FirstTime = false;  	start = PointToScreen (Location);  	start.Y += y + Horizontal.Location.Y;  	ControlPaint.FillReversibleRectangle (new Rectangle (start.X' start.Y' Width' 3)' Color.Black);  	PrevPos = new Point (x' y);  }  
Magic Number,Alsing.Windows.Forms.CoreLib,SplitViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\SplitView\SplitViewControl.cs,Horizontal_MouseMove,The following statement contains a magic number: if (Action == SizeAction.SizeH && e.Button == MouseButtons.Left) {  	Point start;  	int x = e.X;  	int y = e.Y;  	if (y + Horizontal.Top > Height - 4)  		y = Height - 4 - Horizontal.Top;  	if (y + Horizontal.Top < 0)  		y = 0 - Horizontal.Top;  	if (!FirstTime) {  		start = PointToScreen (Location);  		start.Y += PrevPos.Y + Horizontal.Location.Y;  		ControlPaint.FillReversibleRectangle (new Rectangle (start.X' start.Y' Width' 3)' Color.Black);  	}  	else  		FirstTime = false;  	start = PointToScreen (Location);  	start.Y += y + Horizontal.Location.Y;  	ControlPaint.FillReversibleRectangle (new Rectangle (start.X' start.Y' Width' 3)' Color.Black);  	PrevPos = new Point (x' y);  }  
Magic Number,Alsing.Windows.Forms.CoreLib,SplitViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\SplitView\SplitViewControl.cs,Horizontal_MouseMove,The following statement contains a magic number: if (y + Horizontal.Top > Height - 4)  	y = Height - 4 - Horizontal.Top;  
Magic Number,Alsing.Windows.Forms.CoreLib,SplitViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\SplitView\SplitViewControl.cs,Horizontal_MouseMove,The following statement contains a magic number: if (y + Horizontal.Top > Height - 4)  	y = Height - 4 - Horizontal.Top;  
Magic Number,Alsing.Windows.Forms.CoreLib,SplitViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\SplitView\SplitViewControl.cs,Horizontal_MouseMove,The following statement contains a magic number: y = Height - 4 - Horizontal.Top;  
Magic Number,Alsing.Windows.Forms.CoreLib,SplitViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\SplitView\SplitViewControl.cs,Horizontal_MouseMove,The following statement contains a magic number: if (!FirstTime) {  	start = PointToScreen (Location);  	start.Y += PrevPos.Y + Horizontal.Location.Y;  	ControlPaint.FillReversibleRectangle (new Rectangle (start.X' start.Y' Width' 3)' Color.Black);  }  else  	FirstTime = false;  
Magic Number,Alsing.Windows.Forms.CoreLib,SplitViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\SplitView\SplitViewControl.cs,Horizontal_MouseMove,The following statement contains a magic number: ControlPaint.FillReversibleRectangle (new Rectangle (start.X' start.Y' Width' 3)' Color.Black);  
Magic Number,Alsing.Windows.Forms.CoreLib,SplitViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\SplitView\SplitViewControl.cs,Horizontal_MouseMove,The following statement contains a magic number: ControlPaint.FillReversibleRectangle (new Rectangle (start.X' start.Y' Width' 3)' Color.Black);  
Magic Number,Alsing.Windows.Forms.CoreLib,SplitViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\SplitView\SplitViewControl.cs,Vertical_MouseMove,The following statement contains a magic number: if (Action == SizeAction.SizeV && e.Button == MouseButtons.Left) {  	Point start;  	int x = e.X;  	int y = e.Y;  	if (x + Vertical.Left > Width - 4)  		x = Width - 4 - Vertical.Left;  	if (x + Vertical.Left < 0)  		x = 0 - Vertical.Left;  	if (!FirstTime) {  		start = PointToScreen (Location);  		start.X += PrevPos.X + Vertical.Location.X;  		ControlPaint.FillReversibleRectangle (new Rectangle (start.X' start.Y' 3' Height)' Color.Black);  	}  	else  		FirstTime = false;  	start = PointToScreen (Location);  	start.X += x + Vertical.Location.X;  	ControlPaint.FillReversibleRectangle (new Rectangle (start.X' start.Y' 3' Height)' Color.Black);  	PrevPos = new Point (x' y);  }  
Magic Number,Alsing.Windows.Forms.CoreLib,SplitViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\SplitView\SplitViewControl.cs,Vertical_MouseMove,The following statement contains a magic number: if (Action == SizeAction.SizeV && e.Button == MouseButtons.Left) {  	Point start;  	int x = e.X;  	int y = e.Y;  	if (x + Vertical.Left > Width - 4)  		x = Width - 4 - Vertical.Left;  	if (x + Vertical.Left < 0)  		x = 0 - Vertical.Left;  	if (!FirstTime) {  		start = PointToScreen (Location);  		start.X += PrevPos.X + Vertical.Location.X;  		ControlPaint.FillReversibleRectangle (new Rectangle (start.X' start.Y' 3' Height)' Color.Black);  	}  	else  		FirstTime = false;  	start = PointToScreen (Location);  	start.X += x + Vertical.Location.X;  	ControlPaint.FillReversibleRectangle (new Rectangle (start.X' start.Y' 3' Height)' Color.Black);  	PrevPos = new Point (x' y);  }  
Magic Number,Alsing.Windows.Forms.CoreLib,SplitViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\SplitView\SplitViewControl.cs,Vertical_MouseMove,The following statement contains a magic number: if (Action == SizeAction.SizeV && e.Button == MouseButtons.Left) {  	Point start;  	int x = e.X;  	int y = e.Y;  	if (x + Vertical.Left > Width - 4)  		x = Width - 4 - Vertical.Left;  	if (x + Vertical.Left < 0)  		x = 0 - Vertical.Left;  	if (!FirstTime) {  		start = PointToScreen (Location);  		start.X += PrevPos.X + Vertical.Location.X;  		ControlPaint.FillReversibleRectangle (new Rectangle (start.X' start.Y' 3' Height)' Color.Black);  	}  	else  		FirstTime = false;  	start = PointToScreen (Location);  	start.X += x + Vertical.Location.X;  	ControlPaint.FillReversibleRectangle (new Rectangle (start.X' start.Y' 3' Height)' Color.Black);  	PrevPos = new Point (x' y);  }  
Magic Number,Alsing.Windows.Forms.CoreLib,SplitViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\SplitView\SplitViewControl.cs,Vertical_MouseMove,The following statement contains a magic number: if (Action == SizeAction.SizeV && e.Button == MouseButtons.Left) {  	Point start;  	int x = e.X;  	int y = e.Y;  	if (x + Vertical.Left > Width - 4)  		x = Width - 4 - Vertical.Left;  	if (x + Vertical.Left < 0)  		x = 0 - Vertical.Left;  	if (!FirstTime) {  		start = PointToScreen (Location);  		start.X += PrevPos.X + Vertical.Location.X;  		ControlPaint.FillReversibleRectangle (new Rectangle (start.X' start.Y' 3' Height)' Color.Black);  	}  	else  		FirstTime = false;  	start = PointToScreen (Location);  	start.X += x + Vertical.Location.X;  	ControlPaint.FillReversibleRectangle (new Rectangle (start.X' start.Y' 3' Height)' Color.Black);  	PrevPos = new Point (x' y);  }  
Magic Number,Alsing.Windows.Forms.CoreLib,SplitViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\SplitView\SplitViewControl.cs,Vertical_MouseMove,The following statement contains a magic number: if (x + Vertical.Left > Width - 4)  	x = Width - 4 - Vertical.Left;  
Magic Number,Alsing.Windows.Forms.CoreLib,SplitViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\SplitView\SplitViewControl.cs,Vertical_MouseMove,The following statement contains a magic number: if (x + Vertical.Left > Width - 4)  	x = Width - 4 - Vertical.Left;  
Magic Number,Alsing.Windows.Forms.CoreLib,SplitViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\SplitView\SplitViewControl.cs,Vertical_MouseMove,The following statement contains a magic number: x = Width - 4 - Vertical.Left;  
Magic Number,Alsing.Windows.Forms.CoreLib,SplitViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\SplitView\SplitViewControl.cs,Vertical_MouseMove,The following statement contains a magic number: if (!FirstTime) {  	start = PointToScreen (Location);  	start.X += PrevPos.X + Vertical.Location.X;  	ControlPaint.FillReversibleRectangle (new Rectangle (start.X' start.Y' 3' Height)' Color.Black);  }  else  	FirstTime = false;  
Magic Number,Alsing.Windows.Forms.CoreLib,SplitViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\SplitView\SplitViewControl.cs,Vertical_MouseMove,The following statement contains a magic number: ControlPaint.FillReversibleRectangle (new Rectangle (start.X' start.Y' 3' Height)' Color.Black);  
Magic Number,Alsing.Windows.Forms.CoreLib,SplitViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\SplitView\SplitViewControl.cs,Vertical_MouseMove,The following statement contains a magic number: ControlPaint.FillReversibleRectangle (new Rectangle (start.X' start.Y' 3' Height)' Color.Black);  
Magic Number,Alsing.Windows.Forms.CoreLib,SplitViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\SplitView\SplitViewControl.cs,Center_MouseMove,The following statement contains a magic number: if (Action == SizeAction.SizeA && e.Button == MouseButtons.Left) {  	Point start;  	int x = e.X - Center.Width / 2;  	int y = e.Y - Center.Height / 2;  	// ROB: Added fix for graphics splatter when sizing both splitters.  	if (y + Horizontal.Top > Height - 4)  		y = Height - 4 - Horizontal.Top;  	if (y + Horizontal.Top < 0)  		y = 0 - Horizontal.Top;  	if (x + Vertical.Left > Width - 4)  		x = Width - 4 - Vertical.Left;  	if (x + Vertical.Left < 0)  		x = 0 - Vertical.Left;  	// END-ROB  	if (!FirstTime) {  		start = PointToScreen (Location);  		start.X += PrevPos.X + Vertical.Location.X;  		ControlPaint.FillReversibleRectangle (new Rectangle (start.X' start.Y' 3' Height)' Color.Black);  		start = PointToScreen (Location);  		start.Y += PrevPos.Y + Horizontal.Location.Y;  		ControlPaint.FillReversibleRectangle (new Rectangle (start.X' start.Y' Width' 3)' SystemColors.ControlDark);  	}  	else  		FirstTime = false;  	start = PointToScreen (Location);  	start.X += x + Vertical.Location.X;  	ControlPaint.FillReversibleRectangle (new Rectangle (start.X' start.Y' 3' Height)' Color.Black);  	start = PointToScreen (Location);  	start.Y += y + Horizontal.Location.Y;  	ControlPaint.FillReversibleRectangle (new Rectangle (start.X' start.Y' Width' 3)' SystemColors.ControlDark);  	PrevPos = new Point (x' y);  }  
Magic Number,Alsing.Windows.Forms.CoreLib,SplitViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\SplitView\SplitViewControl.cs,Center_MouseMove,The following statement contains a magic number: if (Action == SizeAction.SizeA && e.Button == MouseButtons.Left) {  	Point start;  	int x = e.X - Center.Width / 2;  	int y = e.Y - Center.Height / 2;  	// ROB: Added fix for graphics splatter when sizing both splitters.  	if (y + Horizontal.Top > Height - 4)  		y = Height - 4 - Horizontal.Top;  	if (y + Horizontal.Top < 0)  		y = 0 - Horizontal.Top;  	if (x + Vertical.Left > Width - 4)  		x = Width - 4 - Vertical.Left;  	if (x + Vertical.Left < 0)  		x = 0 - Vertical.Left;  	// END-ROB  	if (!FirstTime) {  		start = PointToScreen (Location);  		start.X += PrevPos.X + Vertical.Location.X;  		ControlPaint.FillReversibleRectangle (new Rectangle (start.X' start.Y' 3' Height)' Color.Black);  		start = PointToScreen (Location);  		start.Y += PrevPos.Y + Horizontal.Location.Y;  		ControlPaint.FillReversibleRectangle (new Rectangle (start.X' start.Y' Width' 3)' SystemColors.ControlDark);  	}  	else  		FirstTime = false;  	start = PointToScreen (Location);  	start.X += x + Vertical.Location.X;  	ControlPaint.FillReversibleRectangle (new Rectangle (start.X' start.Y' 3' Height)' Color.Black);  	start = PointToScreen (Location);  	start.Y += y + Horizontal.Location.Y;  	ControlPaint.FillReversibleRectangle (new Rectangle (start.X' start.Y' Width' 3)' SystemColors.ControlDark);  	PrevPos = new Point (x' y);  }  
Magic Number,Alsing.Windows.Forms.CoreLib,SplitViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\SplitView\SplitViewControl.cs,Center_MouseMove,The following statement contains a magic number: if (Action == SizeAction.SizeA && e.Button == MouseButtons.Left) {  	Point start;  	int x = e.X - Center.Width / 2;  	int y = e.Y - Center.Height / 2;  	// ROB: Added fix for graphics splatter when sizing both splitters.  	if (y + Horizontal.Top > Height - 4)  		y = Height - 4 - Horizontal.Top;  	if (y + Horizontal.Top < 0)  		y = 0 - Horizontal.Top;  	if (x + Vertical.Left > Width - 4)  		x = Width - 4 - Vertical.Left;  	if (x + Vertical.Left < 0)  		x = 0 - Vertical.Left;  	// END-ROB  	if (!FirstTime) {  		start = PointToScreen (Location);  		start.X += PrevPos.X + Vertical.Location.X;  		ControlPaint.FillReversibleRectangle (new Rectangle (start.X' start.Y' 3' Height)' Color.Black);  		start = PointToScreen (Location);  		start.Y += PrevPos.Y + Horizontal.Location.Y;  		ControlPaint.FillReversibleRectangle (new Rectangle (start.X' start.Y' Width' 3)' SystemColors.ControlDark);  	}  	else  		FirstTime = false;  	start = PointToScreen (Location);  	start.X += x + Vertical.Location.X;  	ControlPaint.FillReversibleRectangle (new Rectangle (start.X' start.Y' 3' Height)' Color.Black);  	start = PointToScreen (Location);  	start.Y += y + Horizontal.Location.Y;  	ControlPaint.FillReversibleRectangle (new Rectangle (start.X' start.Y' Width' 3)' SystemColors.ControlDark);  	PrevPos = new Point (x' y);  }  
Magic Number,Alsing.Windows.Forms.CoreLib,SplitViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\SplitView\SplitViewControl.cs,Center_MouseMove,The following statement contains a magic number: if (Action == SizeAction.SizeA && e.Button == MouseButtons.Left) {  	Point start;  	int x = e.X - Center.Width / 2;  	int y = e.Y - Center.Height / 2;  	// ROB: Added fix for graphics splatter when sizing both splitters.  	if (y + Horizontal.Top > Height - 4)  		y = Height - 4 - Horizontal.Top;  	if (y + Horizontal.Top < 0)  		y = 0 - Horizontal.Top;  	if (x + Vertical.Left > Width - 4)  		x = Width - 4 - Vertical.Left;  	if (x + Vertical.Left < 0)  		x = 0 - Vertical.Left;  	// END-ROB  	if (!FirstTime) {  		start = PointToScreen (Location);  		start.X += PrevPos.X + Vertical.Location.X;  		ControlPaint.FillReversibleRectangle (new Rectangle (start.X' start.Y' 3' Height)' Color.Black);  		start = PointToScreen (Location);  		start.Y += PrevPos.Y + Horizontal.Location.Y;  		ControlPaint.FillReversibleRectangle (new Rectangle (start.X' start.Y' Width' 3)' SystemColors.ControlDark);  	}  	else  		FirstTime = false;  	start = PointToScreen (Location);  	start.X += x + Vertical.Location.X;  	ControlPaint.FillReversibleRectangle (new Rectangle (start.X' start.Y' 3' Height)' Color.Black);  	start = PointToScreen (Location);  	start.Y += y + Horizontal.Location.Y;  	ControlPaint.FillReversibleRectangle (new Rectangle (start.X' start.Y' Width' 3)' SystemColors.ControlDark);  	PrevPos = new Point (x' y);  }  
Magic Number,Alsing.Windows.Forms.CoreLib,SplitViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\SplitView\SplitViewControl.cs,Center_MouseMove,The following statement contains a magic number: if (Action == SizeAction.SizeA && e.Button == MouseButtons.Left) {  	Point start;  	int x = e.X - Center.Width / 2;  	int y = e.Y - Center.Height / 2;  	// ROB: Added fix for graphics splatter when sizing both splitters.  	if (y + Horizontal.Top > Height - 4)  		y = Height - 4 - Horizontal.Top;  	if (y + Horizontal.Top < 0)  		y = 0 - Horizontal.Top;  	if (x + Vertical.Left > Width - 4)  		x = Width - 4 - Vertical.Left;  	if (x + Vertical.Left < 0)  		x = 0 - Vertical.Left;  	// END-ROB  	if (!FirstTime) {  		start = PointToScreen (Location);  		start.X += PrevPos.X + Vertical.Location.X;  		ControlPaint.FillReversibleRectangle (new Rectangle (start.X' start.Y' 3' Height)' Color.Black);  		start = PointToScreen (Location);  		start.Y += PrevPos.Y + Horizontal.Location.Y;  		ControlPaint.FillReversibleRectangle (new Rectangle (start.X' start.Y' Width' 3)' SystemColors.ControlDark);  	}  	else  		FirstTime = false;  	start = PointToScreen (Location);  	start.X += x + Vertical.Location.X;  	ControlPaint.FillReversibleRectangle (new Rectangle (start.X' start.Y' 3' Height)' Color.Black);  	start = PointToScreen (Location);  	start.Y += y + Horizontal.Location.Y;  	ControlPaint.FillReversibleRectangle (new Rectangle (start.X' start.Y' Width' 3)' SystemColors.ControlDark);  	PrevPos = new Point (x' y);  }  
Magic Number,Alsing.Windows.Forms.CoreLib,SplitViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\SplitView\SplitViewControl.cs,Center_MouseMove,The following statement contains a magic number: if (Action == SizeAction.SizeA && e.Button == MouseButtons.Left) {  	Point start;  	int x = e.X - Center.Width / 2;  	int y = e.Y - Center.Height / 2;  	// ROB: Added fix for graphics splatter when sizing both splitters.  	if (y + Horizontal.Top > Height - 4)  		y = Height - 4 - Horizontal.Top;  	if (y + Horizontal.Top < 0)  		y = 0 - Horizontal.Top;  	if (x + Vertical.Left > Width - 4)  		x = Width - 4 - Vertical.Left;  	if (x + Vertical.Left < 0)  		x = 0 - Vertical.Left;  	// END-ROB  	if (!FirstTime) {  		start = PointToScreen (Location);  		start.X += PrevPos.X + Vertical.Location.X;  		ControlPaint.FillReversibleRectangle (new Rectangle (start.X' start.Y' 3' Height)' Color.Black);  		start = PointToScreen (Location);  		start.Y += PrevPos.Y + Horizontal.Location.Y;  		ControlPaint.FillReversibleRectangle (new Rectangle (start.X' start.Y' Width' 3)' SystemColors.ControlDark);  	}  	else  		FirstTime = false;  	start = PointToScreen (Location);  	start.X += x + Vertical.Location.X;  	ControlPaint.FillReversibleRectangle (new Rectangle (start.X' start.Y' 3' Height)' Color.Black);  	start = PointToScreen (Location);  	start.Y += y + Horizontal.Location.Y;  	ControlPaint.FillReversibleRectangle (new Rectangle (start.X' start.Y' Width' 3)' SystemColors.ControlDark);  	PrevPos = new Point (x' y);  }  
Magic Number,Alsing.Windows.Forms.CoreLib,SplitViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\SplitView\SplitViewControl.cs,Center_MouseMove,The following statement contains a magic number: if (Action == SizeAction.SizeA && e.Button == MouseButtons.Left) {  	Point start;  	int x = e.X - Center.Width / 2;  	int y = e.Y - Center.Height / 2;  	// ROB: Added fix for graphics splatter when sizing both splitters.  	if (y + Horizontal.Top > Height - 4)  		y = Height - 4 - Horizontal.Top;  	if (y + Horizontal.Top < 0)  		y = 0 - Horizontal.Top;  	if (x + Vertical.Left > Width - 4)  		x = Width - 4 - Vertical.Left;  	if (x + Vertical.Left < 0)  		x = 0 - Vertical.Left;  	// END-ROB  	if (!FirstTime) {  		start = PointToScreen (Location);  		start.X += PrevPos.X + Vertical.Location.X;  		ControlPaint.FillReversibleRectangle (new Rectangle (start.X' start.Y' 3' Height)' Color.Black);  		start = PointToScreen (Location);  		start.Y += PrevPos.Y + Horizontal.Location.Y;  		ControlPaint.FillReversibleRectangle (new Rectangle (start.X' start.Y' Width' 3)' SystemColors.ControlDark);  	}  	else  		FirstTime = false;  	start = PointToScreen (Location);  	start.X += x + Vertical.Location.X;  	ControlPaint.FillReversibleRectangle (new Rectangle (start.X' start.Y' 3' Height)' Color.Black);  	start = PointToScreen (Location);  	start.Y += y + Horizontal.Location.Y;  	ControlPaint.FillReversibleRectangle (new Rectangle (start.X' start.Y' Width' 3)' SystemColors.ControlDark);  	PrevPos = new Point (x' y);  }  
Magic Number,Alsing.Windows.Forms.CoreLib,SplitViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\SplitView\SplitViewControl.cs,Center_MouseMove,The following statement contains a magic number: if (Action == SizeAction.SizeA && e.Button == MouseButtons.Left) {  	Point start;  	int x = e.X - Center.Width / 2;  	int y = e.Y - Center.Height / 2;  	// ROB: Added fix for graphics splatter when sizing both splitters.  	if (y + Horizontal.Top > Height - 4)  		y = Height - 4 - Horizontal.Top;  	if (y + Horizontal.Top < 0)  		y = 0 - Horizontal.Top;  	if (x + Vertical.Left > Width - 4)  		x = Width - 4 - Vertical.Left;  	if (x + Vertical.Left < 0)  		x = 0 - Vertical.Left;  	// END-ROB  	if (!FirstTime) {  		start = PointToScreen (Location);  		start.X += PrevPos.X + Vertical.Location.X;  		ControlPaint.FillReversibleRectangle (new Rectangle (start.X' start.Y' 3' Height)' Color.Black);  		start = PointToScreen (Location);  		start.Y += PrevPos.Y + Horizontal.Location.Y;  		ControlPaint.FillReversibleRectangle (new Rectangle (start.X' start.Y' Width' 3)' SystemColors.ControlDark);  	}  	else  		FirstTime = false;  	start = PointToScreen (Location);  	start.X += x + Vertical.Location.X;  	ControlPaint.FillReversibleRectangle (new Rectangle (start.X' start.Y' 3' Height)' Color.Black);  	start = PointToScreen (Location);  	start.Y += y + Horizontal.Location.Y;  	ControlPaint.FillReversibleRectangle (new Rectangle (start.X' start.Y' Width' 3)' SystemColors.ControlDark);  	PrevPos = new Point (x' y);  }  
Magic Number,Alsing.Windows.Forms.CoreLib,SplitViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\SplitView\SplitViewControl.cs,Center_MouseMove,The following statement contains a magic number: if (Action == SizeAction.SizeA && e.Button == MouseButtons.Left) {  	Point start;  	int x = e.X - Center.Width / 2;  	int y = e.Y - Center.Height / 2;  	// ROB: Added fix for graphics splatter when sizing both splitters.  	if (y + Horizontal.Top > Height - 4)  		y = Height - 4 - Horizontal.Top;  	if (y + Horizontal.Top < 0)  		y = 0 - Horizontal.Top;  	if (x + Vertical.Left > Width - 4)  		x = Width - 4 - Vertical.Left;  	if (x + Vertical.Left < 0)  		x = 0 - Vertical.Left;  	// END-ROB  	if (!FirstTime) {  		start = PointToScreen (Location);  		start.X += PrevPos.X + Vertical.Location.X;  		ControlPaint.FillReversibleRectangle (new Rectangle (start.X' start.Y' 3' Height)' Color.Black);  		start = PointToScreen (Location);  		start.Y += PrevPos.Y + Horizontal.Location.Y;  		ControlPaint.FillReversibleRectangle (new Rectangle (start.X' start.Y' Width' 3)' SystemColors.ControlDark);  	}  	else  		FirstTime = false;  	start = PointToScreen (Location);  	start.X += x + Vertical.Location.X;  	ControlPaint.FillReversibleRectangle (new Rectangle (start.X' start.Y' 3' Height)' Color.Black);  	start = PointToScreen (Location);  	start.Y += y + Horizontal.Location.Y;  	ControlPaint.FillReversibleRectangle (new Rectangle (start.X' start.Y' Width' 3)' SystemColors.ControlDark);  	PrevPos = new Point (x' y);  }  
Magic Number,Alsing.Windows.Forms.CoreLib,SplitViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\SplitView\SplitViewControl.cs,Center_MouseMove,The following statement contains a magic number: if (Action == SizeAction.SizeA && e.Button == MouseButtons.Left) {  	Point start;  	int x = e.X - Center.Width / 2;  	int y = e.Y - Center.Height / 2;  	// ROB: Added fix for graphics splatter when sizing both splitters.  	if (y + Horizontal.Top > Height - 4)  		y = Height - 4 - Horizontal.Top;  	if (y + Horizontal.Top < 0)  		y = 0 - Horizontal.Top;  	if (x + Vertical.Left > Width - 4)  		x = Width - 4 - Vertical.Left;  	if (x + Vertical.Left < 0)  		x = 0 - Vertical.Left;  	// END-ROB  	if (!FirstTime) {  		start = PointToScreen (Location);  		start.X += PrevPos.X + Vertical.Location.X;  		ControlPaint.FillReversibleRectangle (new Rectangle (start.X' start.Y' 3' Height)' Color.Black);  		start = PointToScreen (Location);  		start.Y += PrevPos.Y + Horizontal.Location.Y;  		ControlPaint.FillReversibleRectangle (new Rectangle (start.X' start.Y' Width' 3)' SystemColors.ControlDark);  	}  	else  		FirstTime = false;  	start = PointToScreen (Location);  	start.X += x + Vertical.Location.X;  	ControlPaint.FillReversibleRectangle (new Rectangle (start.X' start.Y' 3' Height)' Color.Black);  	start = PointToScreen (Location);  	start.Y += y + Horizontal.Location.Y;  	ControlPaint.FillReversibleRectangle (new Rectangle (start.X' start.Y' Width' 3)' SystemColors.ControlDark);  	PrevPos = new Point (x' y);  }  
Magic Number,Alsing.Windows.Forms.CoreLib,SplitViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\SplitView\SplitViewControl.cs,Center_MouseMove,The following statement contains a magic number: if (y + Horizontal.Top > Height - 4)  	y = Height - 4 - Horizontal.Top;  
Magic Number,Alsing.Windows.Forms.CoreLib,SplitViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\SplitView\SplitViewControl.cs,Center_MouseMove,The following statement contains a magic number: if (y + Horizontal.Top > Height - 4)  	y = Height - 4 - Horizontal.Top;  
Magic Number,Alsing.Windows.Forms.CoreLib,SplitViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\SplitView\SplitViewControl.cs,Center_MouseMove,The following statement contains a magic number: y = Height - 4 - Horizontal.Top;  
Magic Number,Alsing.Windows.Forms.CoreLib,SplitViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\SplitView\SplitViewControl.cs,Center_MouseMove,The following statement contains a magic number: if (x + Vertical.Left > Width - 4)  	x = Width - 4 - Vertical.Left;  
Magic Number,Alsing.Windows.Forms.CoreLib,SplitViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\SplitView\SplitViewControl.cs,Center_MouseMove,The following statement contains a magic number: if (x + Vertical.Left > Width - 4)  	x = Width - 4 - Vertical.Left;  
Magic Number,Alsing.Windows.Forms.CoreLib,SplitViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\SplitView\SplitViewControl.cs,Center_MouseMove,The following statement contains a magic number: x = Width - 4 - Vertical.Left;  
Magic Number,Alsing.Windows.Forms.CoreLib,SplitViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\SplitView\SplitViewControl.cs,Center_MouseMove,The following statement contains a magic number: if (!FirstTime) {  	start = PointToScreen (Location);  	start.X += PrevPos.X + Vertical.Location.X;  	ControlPaint.FillReversibleRectangle (new Rectangle (start.X' start.Y' 3' Height)' Color.Black);  	start = PointToScreen (Location);  	start.Y += PrevPos.Y + Horizontal.Location.Y;  	ControlPaint.FillReversibleRectangle (new Rectangle (start.X' start.Y' Width' 3)' SystemColors.ControlDark);  }  else  	FirstTime = false;  
Magic Number,Alsing.Windows.Forms.CoreLib,SplitViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\SplitView\SplitViewControl.cs,Center_MouseMove,The following statement contains a magic number: if (!FirstTime) {  	start = PointToScreen (Location);  	start.X += PrevPos.X + Vertical.Location.X;  	ControlPaint.FillReversibleRectangle (new Rectangle (start.X' start.Y' 3' Height)' Color.Black);  	start = PointToScreen (Location);  	start.Y += PrevPos.Y + Horizontal.Location.Y;  	ControlPaint.FillReversibleRectangle (new Rectangle (start.X' start.Y' Width' 3)' SystemColors.ControlDark);  }  else  	FirstTime = false;  
Magic Number,Alsing.Windows.Forms.CoreLib,SplitViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\SplitView\SplitViewControl.cs,Center_MouseMove,The following statement contains a magic number: ControlPaint.FillReversibleRectangle (new Rectangle (start.X' start.Y' 3' Height)' Color.Black);  
Magic Number,Alsing.Windows.Forms.CoreLib,SplitViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\SplitView\SplitViewControl.cs,Center_MouseMove,The following statement contains a magic number: ControlPaint.FillReversibleRectangle (new Rectangle (start.X' start.Y' Width' 3)' SystemColors.ControlDark);  
Magic Number,Alsing.Windows.Forms.CoreLib,SplitViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\SplitView\SplitViewControl.cs,Center_MouseMove,The following statement contains a magic number: ControlPaint.FillReversibleRectangle (new Rectangle (start.X' start.Y' 3' Height)' Color.Black);  
Magic Number,Alsing.Windows.Forms.CoreLib,SplitViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\SplitView\SplitViewControl.cs,Center_MouseMove,The following statement contains a magic number: ControlPaint.FillReversibleRectangle (new Rectangle (start.X' start.Y' Width' 3)' SystemColors.ControlDark);  
Magic Number,Alsing.Windows.Forms.CoreLib,SplitViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\SplitView\SplitViewControl.cs,ReSize,The following statement contains a magic number: if (yy > Height - Horizontal.Height - SystemInformation.VerticalScrollBarWidth * 3)  	yy = Height - Horizontal.Height - SystemInformation.VerticalScrollBarWidth * 3;  
Magic Number,Alsing.Windows.Forms.CoreLib,SplitViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\SplitView\SplitViewControl.cs,ReSize,The following statement contains a magic number: if (yy > Height - Horizontal.Height - SystemInformation.VerticalScrollBarWidth * 3)  	yy = Height - Horizontal.Height - SystemInformation.VerticalScrollBarWidth * 3;  
Magic Number,Alsing.Windows.Forms.CoreLib,SplitViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\SplitView\SplitViewControl.cs,ReSize,The following statement contains a magic number: yy = Height - Horizontal.Height - SystemInformation.VerticalScrollBarWidth * 3;  
Magic Number,Alsing.Windows.Forms.CoreLib,SplitViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\SplitView\SplitViewControl.cs,ReSize,The following statement contains a magic number: if (xx > Width - Vertical.Width - SystemInformation.VerticalScrollBarWidth * 3)  	xx = Width - Vertical.Width - SystemInformation.VerticalScrollBarWidth * 3;  
Magic Number,Alsing.Windows.Forms.CoreLib,SplitViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\SplitView\SplitViewControl.cs,ReSize,The following statement contains a magic number: if (xx > Width - Vertical.Width - SystemInformation.VerticalScrollBarWidth * 3)  	xx = Width - Vertical.Width - SystemInformation.VerticalScrollBarWidth * 3;  
Magic Number,Alsing.Windows.Forms.CoreLib,SplitViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\SplitView\SplitViewControl.cs,ReSize,The following statement contains a magic number: xx = Width - Vertical.Width - SystemInformation.VerticalScrollBarWidth * 3;  
Magic Number,Alsing.Windows.Forms.CoreLib,SplitViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\SplitView\SplitViewControl.cs,ReSize2,The following statement contains a magic number: if (yy > Height - Horizontal.Height - SystemInformation.VerticalScrollBarWidth * 3) {  	yy = Height - Horizontal.Height - SystemInformation.VerticalScrollBarWidth * 3;  	if (yy != Horizontal.Top)  		Horizontal.Top = yy;  }  
Magic Number,Alsing.Windows.Forms.CoreLib,SplitViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\SplitView\SplitViewControl.cs,ReSize2,The following statement contains a magic number: if (yy > Height - Horizontal.Height - SystemInformation.VerticalScrollBarWidth * 3) {  	yy = Height - Horizontal.Height - SystemInformation.VerticalScrollBarWidth * 3;  	if (yy != Horizontal.Top)  		Horizontal.Top = yy;  }  
Magic Number,Alsing.Windows.Forms.CoreLib,SplitViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\SplitView\SplitViewControl.cs,ReSize2,The following statement contains a magic number: yy = Height - Horizontal.Height - SystemInformation.VerticalScrollBarWidth * 3;  
Magic Number,Alsing.Windows.Forms.CoreLib,SplitViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\SplitView\SplitViewControl.cs,ReSize2,The following statement contains a magic number: if (xx > Width - Vertical.Width - SystemInformation.VerticalScrollBarWidth * 3) {  	xx = Width - Vertical.Width - SystemInformation.VerticalScrollBarWidth * 3;  	if (xx != Vertical.Left)  		Vertical.Left = xx;  }  
Magic Number,Alsing.Windows.Forms.CoreLib,SplitViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\SplitView\SplitViewControl.cs,ReSize2,The following statement contains a magic number: if (xx > Width - Vertical.Width - SystemInformation.VerticalScrollBarWidth * 3) {  	xx = Width - Vertical.Width - SystemInformation.VerticalScrollBarWidth * 3;  	if (xx != Vertical.Left)  		Vertical.Left = xx;  }  
Magic Number,Alsing.Windows.Forms.CoreLib,SplitViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\SplitView\SplitViewControl.cs,ReSize2,The following statement contains a magic number: xx = Width - Vertical.Width - SystemInformation.VerticalScrollBarWidth * 3;  
Magic Number,Alsing.Windows.Forms.CoreLib,SplitViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\SplitView\SplitViewControl.cs,Center_DoubleClick,The following statement contains a magic number: Horizontal.Top = -100;  
Magic Number,Alsing.Windows.Forms.CoreLib,SplitViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\SplitView\SplitViewControl.cs,Center_DoubleClick,The following statement contains a magic number: Vertical.Left = -100;  
Magic Number,Alsing.Windows.Forms.CoreLib,SplitViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\SplitView\SplitViewControl.cs,Vertical_DoubleClick,The following statement contains a magic number: Vertical.Left = -100;  
Magic Number,Alsing.Windows.Forms.CoreLib,SplitViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\SplitView\SplitViewControl.cs,Horizontal_DoubleClick,The following statement contains a magic number: Horizontal.Top = -100;  
Magic Number,Alsing.Windows.Forms.CoreLib,SplitViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\SplitView\SplitViewControl.cs,Split5050h,The following statement contains a magic number: Horizontal.Top = Height / 2;  
Magic Number,Alsing.Windows.Forms.CoreLib,SplitViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\SplitView\SplitViewControl.cs,Split5050v,The following statement contains a magic number: Vertical.Left = Width / 2;  
Magic Number,Alsing.Windows.Forms.CoreLib,SplitViewParentControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\SplitView\SplitViewParentControl.cs,SplitViewParentControl,The following statement contains a magic number: LowerRight.Size = new Size (100' 100);  
Magic Number,Alsing.Windows.Forms.CoreLib,SplitViewParentControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\SplitView\SplitViewParentControl.cs,SplitViewParentControl,The following statement contains a magic number: LowerRight.Size = new Size (100' 100);  
Magic Number,Alsing.Windows.Forms.CoreLib,SplitViewParentControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\SplitView\SplitViewParentControl.cs,SplitViewParentControl,The following statement contains a magic number: Size = new Size (100' 100);  
Magic Number,Alsing.Windows.Forms.CoreLib,SplitViewParentControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\SplitView\SplitViewParentControl.cs,SplitViewParentControl,The following statement contains a magic number: Size = new Size (100' 100);  
Magic Number,Alsing.Windows.Forms.CoreLib,SplitViewParentControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\SplitView\SplitViewParentControl.cs,TopThumb_MouseDown,The following statement contains a magic number: if (t < 3000000) {  	splitView.Split5050h ();  }  else {  	splitView.InvokeMouseDownh ();  }  
Magic Number,Alsing.Windows.Forms.CoreLib,SplitViewParentControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\SplitView\SplitViewParentControl.cs,LeftThumb_MouseDown,The following statement contains a magic number: if (t < 3000000) {  	splitView.Split5050v ();  }  else {  	splitView.InvokeMouseDownv ();  }  
Magic Number,Alsing.Windows.Forms.CoreLib,SplitViewParentControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\SplitView\SplitViewParentControl.cs,InitializeComponentInternal,The following statement contains a magic number: splitView.Size = new Size (248' 216);  
Magic Number,Alsing.Windows.Forms.CoreLib,SplitViewParentControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\SplitView\SplitViewParentControl.cs,InitializeComponentInternal,The following statement contains a magic number: splitView.Size = new Size (248' 216);  
Magic Number,Alsing.Windows.Forms.CoreLib,SplitViewParentControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\SplitView\SplitViewParentControl.cs,InitializeComponentInternal,The following statement contains a magic number: splitView.SplitviewH = -4;  
Magic Number,Alsing.Windows.Forms.CoreLib,SplitViewParentControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\SplitView\SplitViewParentControl.cs,InitializeComponentInternal,The following statement contains a magic number: splitView.SplitviewV = -4;  
Magic Number,Alsing.Windows.Forms.CoreLib,SplitViewParentControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\SplitView\SplitViewParentControl.cs,InitializeComponentInternal,The following statement contains a magic number: Size = new Size (248' 216);  
Magic Number,Alsing.Windows.Forms.CoreLib,SplitViewParentControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\SplitView\SplitViewParentControl.cs,InitializeComponentInternal,The following statement contains a magic number: Size = new Size (248' 216);  
Magic Number,Alsing.SourceCode,SpanDefinition,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Document\SyntaxDefinition\SpanDefinition\SpanDefinition.cs,BuildLookupTable,The following statement contains a magic number: foreach (Pattern p in tmpSimplePatterns) {  	if (p.StringPattern.Length <= 2) {  		char c = p.StringPattern [0];  		if (!p.Parent.CaseSensitive) {  			char c1 = char.ToLowerInvariant (c);  			if (LookupTable [c1] == null)  				LookupTable [c1] = new PatternCollection ();  			var patterns = LookupTable [c1] as PatternCollection;  			if (patterns != null)  				if (!patterns.Contains (p))  					patterns.Add (p);  			char c2 = char.ToUpper (c);  			if (LookupTable [c2] == null)  				LookupTable [c2] = new PatternCollection ();  			patterns = LookupTable [c2] as PatternCollection;  			if (patterns != null)  				if (!patterns.Contains (p))  					patterns.Add (p);  		}  		else {  			if (LookupTable [c] == null)  				LookupTable [c] = new PatternCollection ();  			var patterns = LookupTable [c] as PatternCollection;  			if (patterns != null)  				if (!patterns.Contains (p))  					patterns.Add (p);  		}  	}  	else {  		string c = p.StringPattern.Substring (0' 3).ToLowerInvariant ();  		if (LookupTable [c] == null)  			LookupTable [c] = new PatternCollection ();  		var patterns = LookupTable [c] as PatternCollection;  		if (patterns != null)  			if (!patterns.Contains (p))  				patterns.Add (p);  	}  }  
Magic Number,Alsing.SourceCode,SpanDefinition,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Document\SyntaxDefinition\SpanDefinition\SpanDefinition.cs,BuildLookupTable,The following statement contains a magic number: foreach (Pattern p in tmpSimplePatterns) {  	if (p.StringPattern.Length <= 2) {  		char c = p.StringPattern [0];  		if (!p.Parent.CaseSensitive) {  			char c1 = char.ToLowerInvariant (c);  			if (LookupTable [c1] == null)  				LookupTable [c1] = new PatternCollection ();  			var patterns = LookupTable [c1] as PatternCollection;  			if (patterns != null)  				if (!patterns.Contains (p))  					patterns.Add (p);  			char c2 = char.ToUpper (c);  			if (LookupTable [c2] == null)  				LookupTable [c2] = new PatternCollection ();  			patterns = LookupTable [c2] as PatternCollection;  			if (patterns != null)  				if (!patterns.Contains (p))  					patterns.Add (p);  		}  		else {  			if (LookupTable [c] == null)  				LookupTable [c] = new PatternCollection ();  			var patterns = LookupTable [c] as PatternCollection;  			if (patterns != null)  				if (!patterns.Contains (p))  					patterns.Add (p);  		}  	}  	else {  		string c = p.StringPattern.Substring (0' 3).ToLowerInvariant ();  		if (LookupTable [c] == null)  			LookupTable [c] = new PatternCollection ();  		var patterns = LookupTable [c] as PatternCollection;  		if (patterns != null)  			if (!patterns.Contains (p))  				patterns.Add (p);  	}  }  
Magic Number,Alsing.SourceCode,SpanDefinition,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Document\SyntaxDefinition\SpanDefinition\SpanDefinition.cs,BuildLookupTable,The following statement contains a magic number: if (p.StringPattern.Length <= 2) {  	char c = p.StringPattern [0];  	if (!p.Parent.CaseSensitive) {  		char c1 = char.ToLowerInvariant (c);  		if (LookupTable [c1] == null)  			LookupTable [c1] = new PatternCollection ();  		var patterns = LookupTable [c1] as PatternCollection;  		if (patterns != null)  			if (!patterns.Contains (p))  				patterns.Add (p);  		char c2 = char.ToUpper (c);  		if (LookupTable [c2] == null)  			LookupTable [c2] = new PatternCollection ();  		patterns = LookupTable [c2] as PatternCollection;  		if (patterns != null)  			if (!patterns.Contains (p))  				patterns.Add (p);  	}  	else {  		if (LookupTable [c] == null)  			LookupTable [c] = new PatternCollection ();  		var patterns = LookupTable [c] as PatternCollection;  		if (patterns != null)  			if (!patterns.Contains (p))  				patterns.Add (p);  	}  }  else {  	string c = p.StringPattern.Substring (0' 3).ToLowerInvariant ();  	if (LookupTable [c] == null)  		LookupTable [c] = new PatternCollection ();  	var patterns = LookupTable [c] as PatternCollection;  	if (patterns != null)  		if (!patterns.Contains (p))  			patterns.Add (p);  }  
Magic Number,Alsing.SourceCode,SpanDefinition,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Document\SyntaxDefinition\SpanDefinition\SpanDefinition.cs,BuildLookupTable,The following statement contains a magic number: if (p.StringPattern.Length <= 2) {  	char c = p.StringPattern [0];  	if (!p.Parent.CaseSensitive) {  		char c1 = char.ToLowerInvariant (c);  		if (LookupTable [c1] == null)  			LookupTable [c1] = new PatternCollection ();  		var patterns = LookupTable [c1] as PatternCollection;  		if (patterns != null)  			if (!patterns.Contains (p))  				patterns.Add (p);  		char c2 = char.ToUpper (c);  		if (LookupTable [c2] == null)  			LookupTable [c2] = new PatternCollection ();  		patterns = LookupTable [c2] as PatternCollection;  		if (patterns != null)  			if (!patterns.Contains (p))  				patterns.Add (p);  	}  	else {  		if (LookupTable [c] == null)  			LookupTable [c] = new PatternCollection ();  		var patterns = LookupTable [c] as PatternCollection;  		if (patterns != null)  			if (!patterns.Contains (p))  				patterns.Add (p);  	}  }  else {  	string c = p.StringPattern.Substring (0' 3).ToLowerInvariant ();  	if (LookupTable [c] == null)  		LookupTable [c] = new PatternCollection ();  	var patterns = LookupTable [c] as PatternCollection;  	if (patterns != null)  		if (!patterns.Contains (p))  			patterns.Add (p);  }  
Magic Number,Alsing.SourceCode,SyntaxDefinition,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Document\SyntaxDefinition\SyntaxDefinition.cs,ChangeVersion,The following statement contains a magic number: if (Version > long.MaxValue - 10)  	Version = long.MinValue;  
Magic Number,Alsing.SourceCode,PatternList,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Document\SyntaxDefinition\Pattern\PatternList.cs,Add,The following statement contains a magic number: if (!Pattern.IsComplex && !Pattern.ContainsSeparator) {  	//store pattern in lookuptable if it is a simple pattern  	string s;  	if (Pattern.StringPattern.Length >= 2)  		s = Pattern.StringPattern.Substring (0' 2);  	else  		s = Pattern.StringPattern.Substring (0' 1) + " ";  	s = s.ToLowerInvariant ();  	if (Pattern.StringPattern.Length == 1) {  		SimplePatterns1Char [Pattern.StringPattern] = Pattern;  	}  	else {  		if (SimplePatterns2Char [s] == null)  			SimplePatterns2Char [s] = new PatternCollection ();  		var ar = (PatternCollection)SimplePatterns2Char [s];  		ar.Add (Pattern);  	}  	if (CaseSensitive)  		SimplePatterns [Pattern.LowerStringPattern] = Pattern;  	else  		SimplePatterns [Pattern.StringPattern] = Pattern;  }  else {  	ComplexPatterns.Add (Pattern);  }  
Magic Number,Alsing.SourceCode,PatternList,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Document\SyntaxDefinition\Pattern\PatternList.cs,Add,The following statement contains a magic number: if (!Pattern.IsComplex && !Pattern.ContainsSeparator) {  	//store pattern in lookuptable if it is a simple pattern  	string s;  	if (Pattern.StringPattern.Length >= 2)  		s = Pattern.StringPattern.Substring (0' 2);  	else  		s = Pattern.StringPattern.Substring (0' 1) + " ";  	s = s.ToLowerInvariant ();  	if (Pattern.StringPattern.Length == 1) {  		SimplePatterns1Char [Pattern.StringPattern] = Pattern;  	}  	else {  		if (SimplePatterns2Char [s] == null)  			SimplePatterns2Char [s] = new PatternCollection ();  		var ar = (PatternCollection)SimplePatterns2Char [s];  		ar.Add (Pattern);  	}  	if (CaseSensitive)  		SimplePatterns [Pattern.LowerStringPattern] = Pattern;  	else  		SimplePatterns [Pattern.StringPattern] = Pattern;  }  else {  	ComplexPatterns.Add (Pattern);  }  
Magic Number,Alsing.SourceCode,PatternList,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Document\SyntaxDefinition\Pattern\PatternList.cs,Add,The following statement contains a magic number: if (Pattern.StringPattern.Length >= 2)  	s = Pattern.StringPattern.Substring (0' 2);  else  	s = Pattern.StringPattern.Substring (0' 1) + " ";  
Magic Number,Alsing.SourceCode,PatternList,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Document\SyntaxDefinition\Pattern\PatternList.cs,Add,The following statement contains a magic number: if (Pattern.StringPattern.Length >= 2)  	s = Pattern.StringPattern.Substring (0' 2);  else  	s = Pattern.StringPattern.Substring (0' 1) + " ";  
Magic Number,Alsing.SourceCode,PatternList,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Document\SyntaxDefinition\Pattern\PatternList.cs,Add,The following statement contains a magic number: s = Pattern.StringPattern.Substring (0' 2);  
Magic Number,Alsing.SourceCode,SourceCodePrintDocument,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Document\Print\SourceCodePrintDocument.cs,OnBeginPrint,The following statement contains a magic number: fontNormal = new Font ("Courier new"' 8' FontStyle.Regular);  
Magic Number,Alsing.SourceCode,SourceCodePrintDocument,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Document\Print\SourceCodePrintDocument.cs,OnBeginPrint,The following statement contains a magic number: fontBreak = new Font ("Symbol"' 8' FontStyle.Bold);  
Magic Number,Alsing.SourceCode,SourceCodePrintDocument,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Document\Print\SourceCodePrintDocument.cs,OnPrintPage,The following statement contains a magic number: if (rc == null) {  	Document.ParseAll ();  	Document.ParseAll (true);  	rc = new RowList ();  	foreach (Row r in Document) {  		bool hasbreak = false;  		float x = leftMargin;  		var newRow = new Row ();  		rc.Add (newRow);  		foreach (Word w in r) {  			Font f = fontNormal;  			if (w.Style != null) {  				FontStyle fs = 0;  				if (w.Style.Bold)  					fs |= FontStyle.Bold;  				if (w.Style.Italic)  					fs |= FontStyle.Italic;  				if (w.Style.Underline)  					fs |= FontStyle.Underline;  				f = new Font ("Courier new"' 8' fs);  			}  			SizeF sf = ev.Graphics.MeasureString (w.Text' f);  			if (x + sf.Width > rightMargin) {  				var chr = (char)0xbf;  				var br = new Word {  					Text = (chr + "")'  					InfoTip = "break char"  				};  				newRow.Add (br);  				hasbreak = true;  				newRow = new Row ();  				rc.Add (newRow);  				x = leftMargin;  			}  			x += sf.Width;  			newRow.Add (w);  		}  		if (hasbreak) {  			rc.Add (new Row ());  		}  	}  }  
Magic Number,Alsing.SourceCode,SourceCodePrintDocument,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Document\Print\SourceCodePrintDocument.cs,OnPrintPage,The following statement contains a magic number: foreach (Row r in Document) {  	bool hasbreak = false;  	float x = leftMargin;  	var newRow = new Row ();  	rc.Add (newRow);  	foreach (Word w in r) {  		Font f = fontNormal;  		if (w.Style != null) {  			FontStyle fs = 0;  			if (w.Style.Bold)  				fs |= FontStyle.Bold;  			if (w.Style.Italic)  				fs |= FontStyle.Italic;  			if (w.Style.Underline)  				fs |= FontStyle.Underline;  			f = new Font ("Courier new"' 8' fs);  		}  		SizeF sf = ev.Graphics.MeasureString (w.Text' f);  		if (x + sf.Width > rightMargin) {  			var chr = (char)0xbf;  			var br = new Word {  				Text = (chr + "")'  				InfoTip = "break char"  			};  			newRow.Add (br);  			hasbreak = true;  			newRow = new Row ();  			rc.Add (newRow);  			x = leftMargin;  		}  		x += sf.Width;  		newRow.Add (w);  	}  	if (hasbreak) {  		rc.Add (new Row ());  	}  }  
Magic Number,Alsing.SourceCode,SourceCodePrintDocument,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Document\Print\SourceCodePrintDocument.cs,OnPrintPage,The following statement contains a magic number: foreach (Word w in r) {  	Font f = fontNormal;  	if (w.Style != null) {  		FontStyle fs = 0;  		if (w.Style.Bold)  			fs |= FontStyle.Bold;  		if (w.Style.Italic)  			fs |= FontStyle.Italic;  		if (w.Style.Underline)  			fs |= FontStyle.Underline;  		f = new Font ("Courier new"' 8' fs);  	}  	SizeF sf = ev.Graphics.MeasureString (w.Text' f);  	if (x + sf.Width > rightMargin) {  		var chr = (char)0xbf;  		var br = new Word {  			Text = (chr + "")'  			InfoTip = "break char"  		};  		newRow.Add (br);  		hasbreak = true;  		newRow = new Row ();  		rc.Add (newRow);  		x = leftMargin;  	}  	x += sf.Width;  	newRow.Add (w);  }  
Magic Number,Alsing.SourceCode,SourceCodePrintDocument,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Document\Print\SourceCodePrintDocument.cs,OnPrintPage,The following statement contains a magic number: if (w.Style != null) {  	FontStyle fs = 0;  	if (w.Style.Bold)  		fs |= FontStyle.Bold;  	if (w.Style.Italic)  		fs |= FontStyle.Italic;  	if (w.Style.Underline)  		fs |= FontStyle.Underline;  	f = new Font ("Courier new"' 8' fs);  }  
Magic Number,Alsing.SourceCode,SourceCodePrintDocument,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Document\Print\SourceCodePrintDocument.cs,OnPrintPage,The following statement contains a magic number: f = new Font ("Courier new"' 8' fs);  
Magic Number,Alsing.SourceCode,SourceCodePrintDocument,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Document\Print\SourceCodePrintDocument.cs,OnPrintPage,The following statement contains a magic number: while (count < lpp && (RowIndex < rc.Count)) {  	float x = leftMargin;  	float yPos = topMargin + (count * fontNormal.GetHeight (ev.Graphics));  	Row r = rc [RowIndex];  	foreach (Word w in r) {  		if (w.InfoTip != null && w.InfoTip == "break char") {  			ev.Graphics.DrawString (w.Text' fontBreak' Brushes.Black' x' yPos' new StringFormat ());  		}  		else {  			SizeF sf = ev.Graphics.MeasureString (w.Text' fontNormal);  			if (w.Text != null && (".':;".IndexOf (w.Text) >= 0)) {  				sf.Width = 6;  				x -= 4;  			}  			if (w.Text == "\t") {  				sf.Width = ev.Graphics.MeasureString ("..."' fontNormal).Width;  			}  			Color c = Color.Black;  			Font f = fontNormal;  			if (w.Style != null) {  				c = w.Style.ForeColor;  				FontStyle fs = 0;  				if (w.Style.Bold)  					fs |= FontStyle.Bold;  				if (w.Style.Italic)  					fs |= FontStyle.Italic;  				if (w.Style.Underline)  					fs |= FontStyle.Underline;  				f = new Font ("Courier new"' 8' fs);  				if (!w.Style.Transparent) {  					Color bg = w.Style.BackColor;  					ev.Graphics.FillRectangle (new SolidBrush (bg)' x' yPos' sf.Width' fontNormal.GetHeight (ev.Graphics));  				}  			}  			c = Color.FromArgb (c.R' c.G' c.B);  			ev.Graphics.DrawString (w.Text' f' new SolidBrush (c)' x' yPos' new StringFormat ());  			x += sf.Width;  		}  	}  	count++;  	RowIndex++;  }  
Magic Number,Alsing.SourceCode,SourceCodePrintDocument,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Document\Print\SourceCodePrintDocument.cs,OnPrintPage,The following statement contains a magic number: while (count < lpp && (RowIndex < rc.Count)) {  	float x = leftMargin;  	float yPos = topMargin + (count * fontNormal.GetHeight (ev.Graphics));  	Row r = rc [RowIndex];  	foreach (Word w in r) {  		if (w.InfoTip != null && w.InfoTip == "break char") {  			ev.Graphics.DrawString (w.Text' fontBreak' Brushes.Black' x' yPos' new StringFormat ());  		}  		else {  			SizeF sf = ev.Graphics.MeasureString (w.Text' fontNormal);  			if (w.Text != null && (".':;".IndexOf (w.Text) >= 0)) {  				sf.Width = 6;  				x -= 4;  			}  			if (w.Text == "\t") {  				sf.Width = ev.Graphics.MeasureString ("..."' fontNormal).Width;  			}  			Color c = Color.Black;  			Font f = fontNormal;  			if (w.Style != null) {  				c = w.Style.ForeColor;  				FontStyle fs = 0;  				if (w.Style.Bold)  					fs |= FontStyle.Bold;  				if (w.Style.Italic)  					fs |= FontStyle.Italic;  				if (w.Style.Underline)  					fs |= FontStyle.Underline;  				f = new Font ("Courier new"' 8' fs);  				if (!w.Style.Transparent) {  					Color bg = w.Style.BackColor;  					ev.Graphics.FillRectangle (new SolidBrush (bg)' x' yPos' sf.Width' fontNormal.GetHeight (ev.Graphics));  				}  			}  			c = Color.FromArgb (c.R' c.G' c.B);  			ev.Graphics.DrawString (w.Text' f' new SolidBrush (c)' x' yPos' new StringFormat ());  			x += sf.Width;  		}  	}  	count++;  	RowIndex++;  }  
Magic Number,Alsing.SourceCode,SourceCodePrintDocument,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Document\Print\SourceCodePrintDocument.cs,OnPrintPage,The following statement contains a magic number: while (count < lpp && (RowIndex < rc.Count)) {  	float x = leftMargin;  	float yPos = topMargin + (count * fontNormal.GetHeight (ev.Graphics));  	Row r = rc [RowIndex];  	foreach (Word w in r) {  		if (w.InfoTip != null && w.InfoTip == "break char") {  			ev.Graphics.DrawString (w.Text' fontBreak' Brushes.Black' x' yPos' new StringFormat ());  		}  		else {  			SizeF sf = ev.Graphics.MeasureString (w.Text' fontNormal);  			if (w.Text != null && (".':;".IndexOf (w.Text) >= 0)) {  				sf.Width = 6;  				x -= 4;  			}  			if (w.Text == "\t") {  				sf.Width = ev.Graphics.MeasureString ("..."' fontNormal).Width;  			}  			Color c = Color.Black;  			Font f = fontNormal;  			if (w.Style != null) {  				c = w.Style.ForeColor;  				FontStyle fs = 0;  				if (w.Style.Bold)  					fs |= FontStyle.Bold;  				if (w.Style.Italic)  					fs |= FontStyle.Italic;  				if (w.Style.Underline)  					fs |= FontStyle.Underline;  				f = new Font ("Courier new"' 8' fs);  				if (!w.Style.Transparent) {  					Color bg = w.Style.BackColor;  					ev.Graphics.FillRectangle (new SolidBrush (bg)' x' yPos' sf.Width' fontNormal.GetHeight (ev.Graphics));  				}  			}  			c = Color.FromArgb (c.R' c.G' c.B);  			ev.Graphics.DrawString (w.Text' f' new SolidBrush (c)' x' yPos' new StringFormat ());  			x += sf.Width;  		}  	}  	count++;  	RowIndex++;  }  
Magic Number,Alsing.SourceCode,SourceCodePrintDocument,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Document\Print\SourceCodePrintDocument.cs,OnPrintPage,The following statement contains a magic number: foreach (Word w in r) {  	if (w.InfoTip != null && w.InfoTip == "break char") {  		ev.Graphics.DrawString (w.Text' fontBreak' Brushes.Black' x' yPos' new StringFormat ());  	}  	else {  		SizeF sf = ev.Graphics.MeasureString (w.Text' fontNormal);  		if (w.Text != null && (".':;".IndexOf (w.Text) >= 0)) {  			sf.Width = 6;  			x -= 4;  		}  		if (w.Text == "\t") {  			sf.Width = ev.Graphics.MeasureString ("..."' fontNormal).Width;  		}  		Color c = Color.Black;  		Font f = fontNormal;  		if (w.Style != null) {  			c = w.Style.ForeColor;  			FontStyle fs = 0;  			if (w.Style.Bold)  				fs |= FontStyle.Bold;  			if (w.Style.Italic)  				fs |= FontStyle.Italic;  			if (w.Style.Underline)  				fs |= FontStyle.Underline;  			f = new Font ("Courier new"' 8' fs);  			if (!w.Style.Transparent) {  				Color bg = w.Style.BackColor;  				ev.Graphics.FillRectangle (new SolidBrush (bg)' x' yPos' sf.Width' fontNormal.GetHeight (ev.Graphics));  			}  		}  		c = Color.FromArgb (c.R' c.G' c.B);  		ev.Graphics.DrawString (w.Text' f' new SolidBrush (c)' x' yPos' new StringFormat ());  		x += sf.Width;  	}  }  
Magic Number,Alsing.SourceCode,SourceCodePrintDocument,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Document\Print\SourceCodePrintDocument.cs,OnPrintPage,The following statement contains a magic number: foreach (Word w in r) {  	if (w.InfoTip != null && w.InfoTip == "break char") {  		ev.Graphics.DrawString (w.Text' fontBreak' Brushes.Black' x' yPos' new StringFormat ());  	}  	else {  		SizeF sf = ev.Graphics.MeasureString (w.Text' fontNormal);  		if (w.Text != null && (".':;".IndexOf (w.Text) >= 0)) {  			sf.Width = 6;  			x -= 4;  		}  		if (w.Text == "\t") {  			sf.Width = ev.Graphics.MeasureString ("..."' fontNormal).Width;  		}  		Color c = Color.Black;  		Font f = fontNormal;  		if (w.Style != null) {  			c = w.Style.ForeColor;  			FontStyle fs = 0;  			if (w.Style.Bold)  				fs |= FontStyle.Bold;  			if (w.Style.Italic)  				fs |= FontStyle.Italic;  			if (w.Style.Underline)  				fs |= FontStyle.Underline;  			f = new Font ("Courier new"' 8' fs);  			if (!w.Style.Transparent) {  				Color bg = w.Style.BackColor;  				ev.Graphics.FillRectangle (new SolidBrush (bg)' x' yPos' sf.Width' fontNormal.GetHeight (ev.Graphics));  			}  		}  		c = Color.FromArgb (c.R' c.G' c.B);  		ev.Graphics.DrawString (w.Text' f' new SolidBrush (c)' x' yPos' new StringFormat ());  		x += sf.Width;  	}  }  
Magic Number,Alsing.SourceCode,SourceCodePrintDocument,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Document\Print\SourceCodePrintDocument.cs,OnPrintPage,The following statement contains a magic number: foreach (Word w in r) {  	if (w.InfoTip != null && w.InfoTip == "break char") {  		ev.Graphics.DrawString (w.Text' fontBreak' Brushes.Black' x' yPos' new StringFormat ());  	}  	else {  		SizeF sf = ev.Graphics.MeasureString (w.Text' fontNormal);  		if (w.Text != null && (".':;".IndexOf (w.Text) >= 0)) {  			sf.Width = 6;  			x -= 4;  		}  		if (w.Text == "\t") {  			sf.Width = ev.Graphics.MeasureString ("..."' fontNormal).Width;  		}  		Color c = Color.Black;  		Font f = fontNormal;  		if (w.Style != null) {  			c = w.Style.ForeColor;  			FontStyle fs = 0;  			if (w.Style.Bold)  				fs |= FontStyle.Bold;  			if (w.Style.Italic)  				fs |= FontStyle.Italic;  			if (w.Style.Underline)  				fs |= FontStyle.Underline;  			f = new Font ("Courier new"' 8' fs);  			if (!w.Style.Transparent) {  				Color bg = w.Style.BackColor;  				ev.Graphics.FillRectangle (new SolidBrush (bg)' x' yPos' sf.Width' fontNormal.GetHeight (ev.Graphics));  			}  		}  		c = Color.FromArgb (c.R' c.G' c.B);  		ev.Graphics.DrawString (w.Text' f' new SolidBrush (c)' x' yPos' new StringFormat ());  		x += sf.Width;  	}  }  
Magic Number,Alsing.SourceCode,SourceCodePrintDocument,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Document\Print\SourceCodePrintDocument.cs,OnPrintPage,The following statement contains a magic number: if (w.InfoTip != null && w.InfoTip == "break char") {  	ev.Graphics.DrawString (w.Text' fontBreak' Brushes.Black' x' yPos' new StringFormat ());  }  else {  	SizeF sf = ev.Graphics.MeasureString (w.Text' fontNormal);  	if (w.Text != null && (".':;".IndexOf (w.Text) >= 0)) {  		sf.Width = 6;  		x -= 4;  	}  	if (w.Text == "\t") {  		sf.Width = ev.Graphics.MeasureString ("..."' fontNormal).Width;  	}  	Color c = Color.Black;  	Font f = fontNormal;  	if (w.Style != null) {  		c = w.Style.ForeColor;  		FontStyle fs = 0;  		if (w.Style.Bold)  			fs |= FontStyle.Bold;  		if (w.Style.Italic)  			fs |= FontStyle.Italic;  		if (w.Style.Underline)  			fs |= FontStyle.Underline;  		f = new Font ("Courier new"' 8' fs);  		if (!w.Style.Transparent) {  			Color bg = w.Style.BackColor;  			ev.Graphics.FillRectangle (new SolidBrush (bg)' x' yPos' sf.Width' fontNormal.GetHeight (ev.Graphics));  		}  	}  	c = Color.FromArgb (c.R' c.G' c.B);  	ev.Graphics.DrawString (w.Text' f' new SolidBrush (c)' x' yPos' new StringFormat ());  	x += sf.Width;  }  
Magic Number,Alsing.SourceCode,SourceCodePrintDocument,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Document\Print\SourceCodePrintDocument.cs,OnPrintPage,The following statement contains a magic number: if (w.InfoTip != null && w.InfoTip == "break char") {  	ev.Graphics.DrawString (w.Text' fontBreak' Brushes.Black' x' yPos' new StringFormat ());  }  else {  	SizeF sf = ev.Graphics.MeasureString (w.Text' fontNormal);  	if (w.Text != null && (".':;".IndexOf (w.Text) >= 0)) {  		sf.Width = 6;  		x -= 4;  	}  	if (w.Text == "\t") {  		sf.Width = ev.Graphics.MeasureString ("..."' fontNormal).Width;  	}  	Color c = Color.Black;  	Font f = fontNormal;  	if (w.Style != null) {  		c = w.Style.ForeColor;  		FontStyle fs = 0;  		if (w.Style.Bold)  			fs |= FontStyle.Bold;  		if (w.Style.Italic)  			fs |= FontStyle.Italic;  		if (w.Style.Underline)  			fs |= FontStyle.Underline;  		f = new Font ("Courier new"' 8' fs);  		if (!w.Style.Transparent) {  			Color bg = w.Style.BackColor;  			ev.Graphics.FillRectangle (new SolidBrush (bg)' x' yPos' sf.Width' fontNormal.GetHeight (ev.Graphics));  		}  	}  	c = Color.FromArgb (c.R' c.G' c.B);  	ev.Graphics.DrawString (w.Text' f' new SolidBrush (c)' x' yPos' new StringFormat ());  	x += sf.Width;  }  
Magic Number,Alsing.SourceCode,SourceCodePrintDocument,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Document\Print\SourceCodePrintDocument.cs,OnPrintPage,The following statement contains a magic number: if (w.InfoTip != null && w.InfoTip == "break char") {  	ev.Graphics.DrawString (w.Text' fontBreak' Brushes.Black' x' yPos' new StringFormat ());  }  else {  	SizeF sf = ev.Graphics.MeasureString (w.Text' fontNormal);  	if (w.Text != null && (".':;".IndexOf (w.Text) >= 0)) {  		sf.Width = 6;  		x -= 4;  	}  	if (w.Text == "\t") {  		sf.Width = ev.Graphics.MeasureString ("..."' fontNormal).Width;  	}  	Color c = Color.Black;  	Font f = fontNormal;  	if (w.Style != null) {  		c = w.Style.ForeColor;  		FontStyle fs = 0;  		if (w.Style.Bold)  			fs |= FontStyle.Bold;  		if (w.Style.Italic)  			fs |= FontStyle.Italic;  		if (w.Style.Underline)  			fs |= FontStyle.Underline;  		f = new Font ("Courier new"' 8' fs);  		if (!w.Style.Transparent) {  			Color bg = w.Style.BackColor;  			ev.Graphics.FillRectangle (new SolidBrush (bg)' x' yPos' sf.Width' fontNormal.GetHeight (ev.Graphics));  		}  	}  	c = Color.FromArgb (c.R' c.G' c.B);  	ev.Graphics.DrawString (w.Text' f' new SolidBrush (c)' x' yPos' new StringFormat ());  	x += sf.Width;  }  
Magic Number,Alsing.SourceCode,SourceCodePrintDocument,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Document\Print\SourceCodePrintDocument.cs,OnPrintPage,The following statement contains a magic number: if (w.Text != null && (".':;".IndexOf (w.Text) >= 0)) {  	sf.Width = 6;  	x -= 4;  }  
Magic Number,Alsing.SourceCode,SourceCodePrintDocument,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Document\Print\SourceCodePrintDocument.cs,OnPrintPage,The following statement contains a magic number: if (w.Text != null && (".':;".IndexOf (w.Text) >= 0)) {  	sf.Width = 6;  	x -= 4;  }  
Magic Number,Alsing.SourceCode,SourceCodePrintDocument,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Document\Print\SourceCodePrintDocument.cs,OnPrintPage,The following statement contains a magic number: sf.Width = 6;  
Magic Number,Alsing.SourceCode,SourceCodePrintDocument,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Document\Print\SourceCodePrintDocument.cs,OnPrintPage,The following statement contains a magic number: x -= 4;  
Magic Number,Alsing.SourceCode,SourceCodePrintDocument,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Document\Print\SourceCodePrintDocument.cs,OnPrintPage,The following statement contains a magic number: if (w.Style != null) {  	c = w.Style.ForeColor;  	FontStyle fs = 0;  	if (w.Style.Bold)  		fs |= FontStyle.Bold;  	if (w.Style.Italic)  		fs |= FontStyle.Italic;  	if (w.Style.Underline)  		fs |= FontStyle.Underline;  	f = new Font ("Courier new"' 8' fs);  	if (!w.Style.Transparent) {  		Color bg = w.Style.BackColor;  		ev.Graphics.FillRectangle (new SolidBrush (bg)' x' yPos' sf.Width' fontNormal.GetHeight (ev.Graphics));  	}  }  
Magic Number,Alsing.SourceCode,SourceCodePrintDocument,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Document\Print\SourceCodePrintDocument.cs,OnPrintPage,The following statement contains a magic number: f = new Font ("Courier new"' 8' fs);  
Magic Number,Alsing.SourceCode,SyntaxDocument,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Document\SyntaxDocument.cs,ChangeVersion,The following statement contains a magic number: if (Version > long.MaxValue - 10)  	Version = long.MinValue;  
Magic Number,Alsing.SourceCode,SyntaxDocument,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Document\SyntaxDocument.cs,ParseSome,The following statement contains a magic number: ParseSome (1000);  
Magic Number,Alsing.SourceCode,SyntaxDocument,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Document\SyntaxDocument.cs,ParseSome,The following statement contains a magic number: if (ParseQueue.Count == 0 && KeywordQueue.Count > 0) {  	//				Console.WriteLine (this.KeywordQueue.Count.ToString ());  	int i = 0;  	while (i < RowCount / 20 && KeywordQueue.Count > 0) {  		Row row = KeywordQueue [0];  		i += ParseRows (row' true);  	}  }  
Magic Number,Alsing.SourceCode,SyntaxDocument,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Document\SyntaxDocument.cs,ParseSome,The following statement contains a magic number: while (i < RowCount / 20 && KeywordQueue.Count > 0) {  	Row row = KeywordQueue [0];  	i += ParseRows (row' true);  }  
Magic Number,Alsing.SourceCode,SyntaxDocument,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Document\SyntaxDocument.cs,ParseRows,The following statement contains a magic number: if (!Keywords) {  	int index = IndexOf (row);  	int count = 0;  	try {  		while (row.InQueue && count < 100) {  			if (index >= 0) {  				if (index > 0)  					if (this [index - 1].InQueue)  						ParseRow (this [index - 1]);  				Parser.ParseRow (index' false);  			}  			int i = ParseQueue.IndexOf (row);  			if (i >= 0)  				ParseQueue.RemoveAt (i);  			row.InQueue = false;  			index++;  			count++;  			row = this [index];  			if (row == null)  				break;  		}  	}  	catch {  	}  	return count;  }  else {  	int index = IndexOf (row);  	if (index == -1 || row.InKeywordQueue == false) {  		KeywordQueue.Remove (row);  		return 0;  	}  	int count = 0;  	try {  		while (row.InKeywordQueue && count < 100) {  			if (index >= 0) {  				if (index > 0)  					if (this [index - 1].InQueue)  						ParseRow (this [index - 1]);  				Parser.ParseRow (index' true);  			}  			index++;  			count++;  			row = this [index];  			if (row == null)  				break;  		}  	}  	catch {  	}  	return count;  }  
Magic Number,Alsing.SourceCode,SyntaxDocument,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Document\SyntaxDocument.cs,ParseRows,The following statement contains a magic number: if (!Keywords) {  	int index = IndexOf (row);  	int count = 0;  	try {  		while (row.InQueue && count < 100) {  			if (index >= 0) {  				if (index > 0)  					if (this [index - 1].InQueue)  						ParseRow (this [index - 1]);  				Parser.ParseRow (index' false);  			}  			int i = ParseQueue.IndexOf (row);  			if (i >= 0)  				ParseQueue.RemoveAt (i);  			row.InQueue = false;  			index++;  			count++;  			row = this [index];  			if (row == null)  				break;  		}  	}  	catch {  	}  	return count;  }  else {  	int index = IndexOf (row);  	if (index == -1 || row.InKeywordQueue == false) {  		KeywordQueue.Remove (row);  		return 0;  	}  	int count = 0;  	try {  		while (row.InKeywordQueue && count < 100) {  			if (index >= 0) {  				if (index > 0)  					if (this [index - 1].InQueue)  						ParseRow (this [index - 1]);  				Parser.ParseRow (index' true);  			}  			index++;  			count++;  			row = this [index];  			if (row == null)  				break;  		}  	}  	catch {  	}  	return count;  }  
Magic Number,Alsing.SourceCode,SyntaxDocument,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Document\SyntaxDocument.cs,ParseRows,The following statement contains a magic number: try {  	while (row.InQueue && count < 100) {  		if (index >= 0) {  			if (index > 0)  				if (this [index - 1].InQueue)  					ParseRow (this [index - 1]);  			Parser.ParseRow (index' false);  		}  		int i = ParseQueue.IndexOf (row);  		if (i >= 0)  			ParseQueue.RemoveAt (i);  		row.InQueue = false;  		index++;  		count++;  		row = this [index];  		if (row == null)  			break;  	}  }  catch {  }  
Magic Number,Alsing.SourceCode,SyntaxDocument,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Document\SyntaxDocument.cs,ParseRows,The following statement contains a magic number: while (row.InQueue && count < 100) {  	if (index >= 0) {  		if (index > 0)  			if (this [index - 1].InQueue)  				ParseRow (this [index - 1]);  		Parser.ParseRow (index' false);  	}  	int i = ParseQueue.IndexOf (row);  	if (i >= 0)  		ParseQueue.RemoveAt (i);  	row.InQueue = false;  	index++;  	count++;  	row = this [index];  	if (row == null)  		break;  }  
Magic Number,Alsing.SourceCode,SyntaxDocument,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Document\SyntaxDocument.cs,ParseRows,The following statement contains a magic number: try {  	while (row.InKeywordQueue && count < 100) {  		if (index >= 0) {  			if (index > 0)  				if (this [index - 1].InQueue)  					ParseRow (this [index - 1]);  			Parser.ParseRow (index' true);  		}  		index++;  		count++;  		row = this [index];  		if (row == null)  			break;  	}  }  catch {  }  
Magic Number,Alsing.SourceCode,SyntaxDocument,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Document\SyntaxDocument.cs,ParseRows,The following statement contains a magic number: while (row.InKeywordQueue && count < 100) {  	if (index >= 0) {  		if (index > 0)  			if (this [index - 1].InQueue)  				ParseRow (this [index - 1]);  		Parser.ParseRow (index' true);  	}  	index++;  	count++;  	row = this [index];  	if (row == null)  		break;  }  
Magic Number,Alsing.SourceCode,TextStyleDesignerDialog,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Document\SyntaxDefinition\TextStyle\TextStyleDesignerDialog.cs,InitializeComponent,The following statement contains a magic number: this.panel2.Location = new System.Drawing.Point (4' 255);  
Magic Number,Alsing.SourceCode,TextStyleDesignerDialog,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Document\SyntaxDefinition\TextStyle\TextStyleDesignerDialog.cs,InitializeComponent,The following statement contains a magic number: this.panel2.Location = new System.Drawing.Point (4' 255);  
Magic Number,Alsing.SourceCode,TextStyleDesignerDialog,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Document\SyntaxDefinition\TextStyle\TextStyleDesignerDialog.cs,InitializeComponent,The following statement contains a magic number: this.panel2.Size = new System.Drawing.Size (354' 80);  
Magic Number,Alsing.SourceCode,TextStyleDesignerDialog,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Document\SyntaxDefinition\TextStyle\TextStyleDesignerDialog.cs,InitializeComponent,The following statement contains a magic number: this.panel2.Size = new System.Drawing.Size (354' 80);  
Magic Number,Alsing.SourceCode,TextStyleDesignerDialog,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Document\SyntaxDefinition\TextStyle\TextStyleDesignerDialog.cs,InitializeComponent,The following statement contains a magic number: this.panel2.TabIndex = 8;  
Magic Number,Alsing.SourceCode,TextStyleDesignerDialog,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Document\SyntaxDefinition\TextStyle\TextStyleDesignerDialog.cs,InitializeComponent,The following statement contains a magic number: this.btnCancel.Location = new System.Drawing.Point (279' 48);  
Magic Number,Alsing.SourceCode,TextStyleDesignerDialog,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Document\SyntaxDefinition\TextStyle\TextStyleDesignerDialog.cs,InitializeComponent,The following statement contains a magic number: this.btnCancel.Location = new System.Drawing.Point (279' 48);  
Magic Number,Alsing.SourceCode,TextStyleDesignerDialog,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Document\SyntaxDefinition\TextStyle\TextStyleDesignerDialog.cs,InitializeComponent,The following statement contains a magic number: this.btnCancel.TabIndex = 4;  
Magic Number,Alsing.SourceCode,TextStyleDesignerDialog,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Document\SyntaxDefinition\TextStyle\TextStyleDesignerDialog.cs,InitializeComponent,The following statement contains a magic number: this.btnOK.Location = new System.Drawing.Point (200' 48);  
Magic Number,Alsing.SourceCode,TextStyleDesignerDialog,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Document\SyntaxDefinition\TextStyle\TextStyleDesignerDialog.cs,InitializeComponent,The following statement contains a magic number: this.btnOK.Location = new System.Drawing.Point (200' 48);  
Magic Number,Alsing.SourceCode,TextStyleDesignerDialog,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Document\SyntaxDefinition\TextStyle\TextStyleDesignerDialog.cs,InitializeComponent,The following statement contains a magic number: this.btnOK.TabIndex = 3;  
Magic Number,Alsing.SourceCode,TextStyleDesignerDialog,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Document\SyntaxDefinition\TextStyle\TextStyleDesignerDialog.cs,InitializeComponent,The following statement contains a magic number: this.pgStyles.Location = new System.Drawing.Point (4' 26);  
Magic Number,Alsing.SourceCode,TextStyleDesignerDialog,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Document\SyntaxDefinition\TextStyle\TextStyleDesignerDialog.cs,InitializeComponent,The following statement contains a magic number: this.pgStyles.Location = new System.Drawing.Point (4' 26);  
Magic Number,Alsing.SourceCode,TextStyleDesignerDialog,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Document\SyntaxDefinition\TextStyle\TextStyleDesignerDialog.cs,InitializeComponent,The following statement contains a magic number: this.pgStyles.Size = new System.Drawing.Size (354' 221);  
Magic Number,Alsing.SourceCode,TextStyleDesignerDialog,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Document\SyntaxDefinition\TextStyle\TextStyleDesignerDialog.cs,InitializeComponent,The following statement contains a magic number: this.pgStyles.Size = new System.Drawing.Size (354' 221);  
Magic Number,Alsing.SourceCode,TextStyleDesignerDialog,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Document\SyntaxDefinition\TextStyle\TextStyleDesignerDialog.cs,InitializeComponent,The following statement contains a magic number: this.pgStyles.TabIndex = 6;  
Magic Number,Alsing.SourceCode,TextStyleDesignerDialog,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Document\SyntaxDefinition\TextStyle\TextStyleDesignerDialog.cs,InitializeComponent,The following statement contains a magic number: this.panel1.Location = new System.Drawing.Point (4' 247);  
Magic Number,Alsing.SourceCode,TextStyleDesignerDialog,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Document\SyntaxDefinition\TextStyle\TextStyleDesignerDialog.cs,InitializeComponent,The following statement contains a magic number: this.panel1.Location = new System.Drawing.Point (4' 247);  
Magic Number,Alsing.SourceCode,TextStyleDesignerDialog,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Document\SyntaxDefinition\TextStyle\TextStyleDesignerDialog.cs,InitializeComponent,The following statement contains a magic number: this.panel1.Size = new System.Drawing.Size (354' 8);  
Magic Number,Alsing.SourceCode,TextStyleDesignerDialog,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Document\SyntaxDefinition\TextStyle\TextStyleDesignerDialog.cs,InitializeComponent,The following statement contains a magic number: this.panel1.Size = new System.Drawing.Size (354' 8);  
Magic Number,Alsing.SourceCode,TextStyleDesignerDialog,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Document\SyntaxDefinition\TextStyle\TextStyleDesignerDialog.cs,InitializeComponent,The following statement contains a magic number: this.panel1.TabIndex = 9;  
Magic Number,Alsing.SourceCode,TextStyleDesignerDialog,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Document\SyntaxDefinition\TextStyle\TextStyleDesignerDialog.cs,InitializeComponent,The following statement contains a magic number: this.panel3.Location = new System.Drawing.Point (4' 2);  
Magic Number,Alsing.SourceCode,TextStyleDesignerDialog,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Document\SyntaxDefinition\TextStyle\TextStyleDesignerDialog.cs,InitializeComponent,The following statement contains a magic number: this.panel3.Location = new System.Drawing.Point (4' 2);  
Magic Number,Alsing.SourceCode,TextStyleDesignerDialog,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Document\SyntaxDefinition\TextStyle\TextStyleDesignerDialog.cs,InitializeComponent,The following statement contains a magic number: this.panel3.Size = new System.Drawing.Size (354' 24);  
Magic Number,Alsing.SourceCode,TextStyleDesignerDialog,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Document\SyntaxDefinition\TextStyle\TextStyleDesignerDialog.cs,InitializeComponent,The following statement contains a magic number: this.panel3.Size = new System.Drawing.Size (354' 24);  
Magic Number,Alsing.SourceCode,TextStyleDesignerDialog,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Document\SyntaxDefinition\TextStyle\TextStyleDesignerDialog.cs,InitializeComponent,The following statement contains a magic number: this.panel3.TabIndex = 10;  
Magic Number,Alsing.SourceCode,TextStyleDesignerDialog,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Document\SyntaxDefinition\TextStyle\TextStyleDesignerDialog.cs,InitializeComponent,The following statement contains a magic number: this.lblCaption.Size = new System.Drawing.Size (354' 24);  
Magic Number,Alsing.SourceCode,TextStyleDesignerDialog,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Document\SyntaxDefinition\TextStyle\TextStyleDesignerDialog.cs,InitializeComponent,The following statement contains a magic number: this.lblCaption.Size = new System.Drawing.Size (354' 24);  
Magic Number,Alsing.SourceCode,TextStyleDesignerDialog,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Document\SyntaxDefinition\TextStyle\TextStyleDesignerDialog.cs,InitializeComponent,The following statement contains a magic number: this.lblPreview.Size = new System.Drawing.Size (354' 40);  
Magic Number,Alsing.SourceCode,TextStyleDesignerDialog,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Document\SyntaxDefinition\TextStyle\TextStyleDesignerDialog.cs,InitializeComponent,The following statement contains a magic number: this.lblPreview.Size = new System.Drawing.Size (354' 40);  
Magic Number,Alsing.SourceCode,TextStyleDesignerDialog,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Document\SyntaxDefinition\TextStyle\TextStyleDesignerDialog.cs,InitializeComponent,The following statement contains a magic number: this.lblPreview.TabIndex = 8;  
Magic Number,Alsing.SourceCode,TextStyleDesignerDialog,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Document\SyntaxDefinition\TextStyle\TextStyleDesignerDialog.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleBaseSize = new System.Drawing.Size (5' 13);  
Magic Number,Alsing.SourceCode,TextStyleDesignerDialog,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Document\SyntaxDefinition\TextStyle\TextStyleDesignerDialog.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleBaseSize = new System.Drawing.Size (5' 13);  
Magic Number,Alsing.SourceCode,TextStyleDesignerDialog,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Document\SyntaxDefinition\TextStyle\TextStyleDesignerDialog.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size (362' 335);  
Magic Number,Alsing.SourceCode,TextStyleDesignerDialog,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Document\SyntaxDefinition\TextStyle\TextStyleDesignerDialog.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size (362' 335);  
Magic Number,Alsing.SourceCode,TextStyleDesignerDialog,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Document\SyntaxDefinition\TextStyle\TextStyleDesignerDialog.cs,InitializeComponent,The following statement contains a magic number: this.DockPadding.Left = 4;  
Magic Number,Alsing.SourceCode,TextStyleDesignerDialog,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Document\SyntaxDefinition\TextStyle\TextStyleDesignerDialog.cs,InitializeComponent,The following statement contains a magic number: this.DockPadding.Right = 4;  
Magic Number,Alsing.SourceCode,TextStyleDesignerDialog,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Document\SyntaxDefinition\TextStyle\TextStyleDesignerDialog.cs,InitializeComponent,The following statement contains a magic number: this.DockPadding.Top = 2;  
Magic Number,Alsing.SourceCode,UndoBlockCollection,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Document\DocumentStructure\Undo\UndoBlockCollection.cs,Grow,The following statement contains a magic number: if (NeedsGrowth ())  	Capacity = m_count * 2;  
Magic Number,Alsing.SourceCode,UndoBlockCollection,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Document\DocumentStructure\Undo\UndoBlockCollection.cs,Grow,The following statement contains a magic number: Capacity = m_count * 2;  
Magic Number,Alsing.SourceCode,UndoBlockCollection,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Document\DocumentStructure\Undo\UndoBlockCollection.cs,NeedsTrimming,The following statement contains a magic number: return (m_count <= Capacity / 2);  
Magic Number,Alsing.SourceCode,UndoBuffer,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Document\DocumentStructure\Undo\UndoBuffer.cs,UndoBuffer,The following statement contains a magic number: MaxSize = 1000;  
Magic Number,Alsing.Windows.Forms.SyntaxBox,Selection,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\Selection.cs,Outdent,The following statement contains a magic number: for (int i = LogicalBounds.FirstRow; i <= LogicalBounds.LastRow; i++) {  	xtr = Control.Document [i];  	var b = new UndoBlock ();  	b.Action = UndoAction.DeleteRange;  	b.Position.X = 0;  	b.Position.Y = i;  	ActionGroup.Add (b);  	string s = xtr.Text;  	if (s.StartsWith ("\t")) {  		b.Text = s.Substring (0' 1);  		s = s.Substring (1);  	}  	if (s.StartsWith ("    ")) {  		b.Text = s.Substring (0' 4);  		s = s.Substring (4);  	}  	xtr.Text = s;  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox,Selection,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\Selection.cs,Outdent,The following statement contains a magic number: for (int i = LogicalBounds.FirstRow; i <= LogicalBounds.LastRow; i++) {  	xtr = Control.Document [i];  	var b = new UndoBlock ();  	b.Action = UndoAction.DeleteRange;  	b.Position.X = 0;  	b.Position.Y = i;  	ActionGroup.Add (b);  	string s = xtr.Text;  	if (s.StartsWith ("\t")) {  		b.Text = s.Substring (0' 1);  		s = s.Substring (1);  	}  	if (s.StartsWith ("    ")) {  		b.Text = s.Substring (0' 4);  		s = s.Substring (4);  	}  	xtr.Text = s;  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox,Selection,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\Selection.cs,Outdent,The following statement contains a magic number: if (s.StartsWith ("    ")) {  	b.Text = s.Substring (0' 4);  	s = s.Substring (4);  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox,Selection,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\Selection.cs,Outdent,The following statement contains a magic number: if (s.StartsWith ("    ")) {  	b.Text = s.Substring (0' 4);  	s = s.Substring (4);  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox,Selection,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\Selection.cs,Outdent,The following statement contains a magic number: b.Text = s.Substring (0' 4);  
Magic Number,Alsing.Windows.Forms.SyntaxBox,Selection,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\Selection.cs,Outdent,The following statement contains a magic number: s = s.Substring (4);  
Magic Number,Alsing.Windows.Forms.SyntaxBox,AutoListForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\Autolist\AutoListForm.cs,LB_DrawItem,The following statement contains a magic number: if (!selected) {  	e.Graphics.FillRectangle (bg' 0' e.Bounds.Top' e.Bounds.Width' LB.ItemHeight);  	//e.Graphics.FillRectangle (SystemBrushes.Highlight'0'e.Bounds.Top'27 'LB.ItemHeight);   }  else {  	e.Graphics.FillRectangle (SystemBrushes.Window' Offset' e.Bounds.Top' e.Bounds.Width - Offset' LB.ItemHeight);  	e.Graphics.FillRectangle (SystemBrushes.Highlight' new Rectangle (Offset + 1' e.Bounds.Top + 1' e.Bounds.Width - Offset - 2' LB.ItemHeight - 2));  	//e.Graphics.FillRectangle (SystemBrushes.Highlight'27'e.Bounds.Top'e.Bounds.Width-27 'LB.ItemHeight);   	//e.Graphics.FillRectangle (new SolidBrush(Color.FromArgb (182'189'210))'new Rectangle (1+27'e.Bounds.Top+1'e.Bounds.Width-2- 'LB.ItemHeight-2));  	ControlPaint.DrawFocusRectangle (e.Graphics' new Rectangle (Offset' e.Bounds.Top' e.Bounds.Width - Offset' LB.ItemHeight));  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox,AutoListForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\Autolist\AutoListForm.cs,LB_DrawItem,The following statement contains a magic number: if (!selected) {  	e.Graphics.FillRectangle (bg' 0' e.Bounds.Top' e.Bounds.Width' LB.ItemHeight);  	//e.Graphics.FillRectangle (SystemBrushes.Highlight'0'e.Bounds.Top'27 'LB.ItemHeight);   }  else {  	e.Graphics.FillRectangle (SystemBrushes.Window' Offset' e.Bounds.Top' e.Bounds.Width - Offset' LB.ItemHeight);  	e.Graphics.FillRectangle (SystemBrushes.Highlight' new Rectangle (Offset + 1' e.Bounds.Top + 1' e.Bounds.Width - Offset - 2' LB.ItemHeight - 2));  	//e.Graphics.FillRectangle (SystemBrushes.Highlight'27'e.Bounds.Top'e.Bounds.Width-27 'LB.ItemHeight);   	//e.Graphics.FillRectangle (new SolidBrush(Color.FromArgb (182'189'210))'new Rectangle (1+27'e.Bounds.Top+1'e.Bounds.Width-2- 'LB.ItemHeight-2));  	ControlPaint.DrawFocusRectangle (e.Graphics' new Rectangle (Offset' e.Bounds.Top' e.Bounds.Width - Offset' LB.ItemHeight));  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox,AutoListForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\Autolist\AutoListForm.cs,LB_DrawItem,The following statement contains a magic number: e.Graphics.FillRectangle (SystemBrushes.Highlight' new Rectangle (Offset + 1' e.Bounds.Top + 1' e.Bounds.Width - Offset - 2' LB.ItemHeight - 2));  
Magic Number,Alsing.Windows.Forms.SyntaxBox,AutoListForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\Autolist\AutoListForm.cs,LB_DrawItem,The following statement contains a magic number: e.Graphics.FillRectangle (SystemBrushes.Highlight' new Rectangle (Offset + 1' e.Bounds.Top + 1' e.Bounds.Width - Offset - 2' LB.ItemHeight - 2));  
Magic Number,Alsing.Windows.Forms.SyntaxBox,AutoListForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\Autolist\AutoListForm.cs,LB_DrawItem,The following statement contains a magic number: e.Graphics.DrawString (text' e.Font' fg' Offset + 2' e.Bounds.Top + 1);  
Magic Number,Alsing.Windows.Forms.SyntaxBox,AutoListForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\Autolist\AutoListForm.cs,LB_DrawItem,The following statement contains a magic number: if (Images != null)  	e.Graphics.DrawImage (Images.Images [li.Type]' 6' e.Bounds.Top + 0);  
Magic Number,Alsing.Windows.Forms.SyntaxBox,AutoListForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\Autolist\AutoListForm.cs,LB_DrawItem,The following statement contains a magic number: e.Graphics.DrawImage (Images.Images [li.Type]' 6' e.Bounds.Top + 0);  
Magic Number,Alsing.Windows.Forms.SyntaxBox,AutoListForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\Autolist\AutoListForm.cs,EndLoad,The following statement contains a magic number: if (LB.Items.Count > 10) {  	Height = LB.ItemHeight * 11 + 12;  }  else {  	Height = LB.ItemHeight * (LB.Items.Count) + 12;  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox,AutoListForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\Autolist\AutoListForm.cs,EndLoad,The following statement contains a magic number: if (LB.Items.Count > 10) {  	Height = LB.ItemHeight * 11 + 12;  }  else {  	Height = LB.ItemHeight * (LB.Items.Count) + 12;  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox,AutoListForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\Autolist\AutoListForm.cs,EndLoad,The following statement contains a magic number: if (LB.Items.Count > 10) {  	Height = LB.ItemHeight * 11 + 12;  }  else {  	Height = LB.ItemHeight * (LB.Items.Count) + 12;  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox,AutoListForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\Autolist\AutoListForm.cs,EndLoad,The following statement contains a magic number: if (LB.Items.Count > 10) {  	Height = LB.ItemHeight * 11 + 12;  }  else {  	Height = LB.ItemHeight * (LB.Items.Count) + 12;  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox,AutoListForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\Autolist\AutoListForm.cs,EndLoad,The following statement contains a magic number: Height = LB.ItemHeight * 11 + 12;  
Magic Number,Alsing.Windows.Forms.SyntaxBox,AutoListForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\Autolist\AutoListForm.cs,EndLoad,The following statement contains a magic number: Height = LB.ItemHeight * 11 + 12;  
Magic Number,Alsing.Windows.Forms.SyntaxBox,AutoListForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\Autolist\AutoListForm.cs,EndLoad,The following statement contains a magic number: Height = LB.ItemHeight * (LB.Items.Count) + 12;  
Magic Number,Alsing.Windows.Forms.SyntaxBox,AutoListForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\Autolist\AutoListForm.cs,EndLoad,The following statement contains a magic number: foreach (ListItem li in LB.Items) {  	int w = (int)g.MeasureString (li.Text' LB.Font).Width + 45;  	if (w > max)  		max = w;  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox,AutoListForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\Autolist\AutoListForm.cs,AutoListForm_Resize,The following statement contains a magic number: LB.Size = new Size (Width - 8' Height - 8);  
Magic Number,Alsing.Windows.Forms.SyntaxBox,AutoListForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\Autolist\AutoListForm.cs,AutoListForm_Resize,The following statement contains a magic number: LB.Size = new Size (Width - 8' Height - 8);  
Magic Number,Alsing.Windows.Forms.SyntaxBox,AutoListForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\Autolist\AutoListForm.cs,LB_SelectedIndexChanged,The following statement contains a magic number: if (li.ToolTip != "") {  	tooltip.ShowAlways = true;  	tooltip.SetToolTip (LB' li.ToolTip);  	tooltip.InitialDelay = 2;  	tooltip.Active = true;  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox,AutoListForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\Autolist\AutoListForm.cs,LB_SelectedIndexChanged,The following statement contains a magic number: tooltip.InitialDelay = 2;  
Magic Number,Alsing.Windows.Forms.SyntaxBox,AutoListForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\Autolist\AutoListForm.cs,InitializeComponent,The following statement contains a magic number: this.LB.ItemHeight = 16;  
Magic Number,Alsing.Windows.Forms.SyntaxBox,AutoListForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\Autolist\AutoListForm.cs,InitializeComponent,The following statement contains a magic number: this.LB.Location = new System.Drawing.Point (4' 4);  
Magic Number,Alsing.Windows.Forms.SyntaxBox,AutoListForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\Autolist\AutoListForm.cs,InitializeComponent,The following statement contains a magic number: this.LB.Location = new System.Drawing.Point (4' 4);  
Magic Number,Alsing.Windows.Forms.SyntaxBox,AutoListForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\Autolist\AutoListForm.cs,InitializeComponent,The following statement contains a magic number: this.LB.Size = new System.Drawing.Size (168' 184);  
Magic Number,Alsing.Windows.Forms.SyntaxBox,AutoListForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\Autolist\AutoListForm.cs,InitializeComponent,The following statement contains a magic number: this.LB.Size = new System.Drawing.Size (168' 184);  
Magic Number,Alsing.Windows.Forms.SyntaxBox,AutoListForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\Autolist\AutoListForm.cs,InitializeComponent,The following statement contains a magic number: this.tooltip.AutoPopDelay = 5000;  
Magic Number,Alsing.Windows.Forms.SyntaxBox,AutoListForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\Autolist\AutoListForm.cs,InitializeComponent,The following statement contains a magic number: this.tooltip.InitialDelay = 100;  
Magic Number,Alsing.Windows.Forms.SyntaxBox,AutoListForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\Autolist\AutoListForm.cs,InitializeComponent,The following statement contains a magic number: this.tooltip.ReshowDelay = 100;  
Magic Number,Alsing.Windows.Forms.SyntaxBox,AutoListForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\Autolist\AutoListForm.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleBaseSize = new System.Drawing.Size (5' 13);  
Magic Number,Alsing.Windows.Forms.SyntaxBox,AutoListForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\Autolist\AutoListForm.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleBaseSize = new System.Drawing.Size (5' 13);  
Magic Number,Alsing.Windows.Forms.SyntaxBox,AutoListForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\Autolist\AutoListForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size (168' 165);  
Magic Number,Alsing.Windows.Forms.SyntaxBox,AutoListForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\Autolist\AutoListForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size (168' 165);  
Magic Number,Alsing.Windows.Forms.SyntaxBox,EditViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\EditView\EditViewControl.cs,CreateAutoList,The following statement contains a magic number: if (_SyntaxBox != null && !_SyntaxBox.DisableAutoList && _AutoList == null) {  	Debug.WriteLine ("Creating Autolist");  	AutoList = new AutoListForm ();  	NativeMethods.SetWindowLong (AutoList.Handle' NativeMethods.GWL_STYLE' NativeMethods.WS_CHILD);  	AutoList.SendToBack ();  	AutoList.Visible = false;  	//this.Controls.Add (this.AutoList);  	AutoList.DoubleClick += AutoListDoubleClick;  	AutoList.Images = _SyntaxBox.AutoListIcons;  	AutoList.Add ("a123"' "a123"' "Some tooltip for this item 1"' 1);  	AutoList.Add ("b456"' "b456"' "Some tooltip for this item 2"' 2);  	AutoList.Add ("c789"' "c789"' "Some tooltip for this item 3"' 2);  	AutoList.Add ("d012"' "d012"' "Some tooltip for this item 4"' 3);  	AutoList.Add ("e345"' "e345"' "Some tooltip for this item 5"' 4);  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox,EditViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\EditView\EditViewControl.cs,CreateAutoList,The following statement contains a magic number: if (_SyntaxBox != null && !_SyntaxBox.DisableAutoList && _AutoList == null) {  	Debug.WriteLine ("Creating Autolist");  	AutoList = new AutoListForm ();  	NativeMethods.SetWindowLong (AutoList.Handle' NativeMethods.GWL_STYLE' NativeMethods.WS_CHILD);  	AutoList.SendToBack ();  	AutoList.Visible = false;  	//this.Controls.Add (this.AutoList);  	AutoList.DoubleClick += AutoListDoubleClick;  	AutoList.Images = _SyntaxBox.AutoListIcons;  	AutoList.Add ("a123"' "a123"' "Some tooltip for this item 1"' 1);  	AutoList.Add ("b456"' "b456"' "Some tooltip for this item 2"' 2);  	AutoList.Add ("c789"' "c789"' "Some tooltip for this item 3"' 2);  	AutoList.Add ("d012"' "d012"' "Some tooltip for this item 4"' 3);  	AutoList.Add ("e345"' "e345"' "Some tooltip for this item 5"' 4);  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox,EditViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\EditView\EditViewControl.cs,CreateAutoList,The following statement contains a magic number: if (_SyntaxBox != null && !_SyntaxBox.DisableAutoList && _AutoList == null) {  	Debug.WriteLine ("Creating Autolist");  	AutoList = new AutoListForm ();  	NativeMethods.SetWindowLong (AutoList.Handle' NativeMethods.GWL_STYLE' NativeMethods.WS_CHILD);  	AutoList.SendToBack ();  	AutoList.Visible = false;  	//this.Controls.Add (this.AutoList);  	AutoList.DoubleClick += AutoListDoubleClick;  	AutoList.Images = _SyntaxBox.AutoListIcons;  	AutoList.Add ("a123"' "a123"' "Some tooltip for this item 1"' 1);  	AutoList.Add ("b456"' "b456"' "Some tooltip for this item 2"' 2);  	AutoList.Add ("c789"' "c789"' "Some tooltip for this item 3"' 2);  	AutoList.Add ("d012"' "d012"' "Some tooltip for this item 4"' 3);  	AutoList.Add ("e345"' "e345"' "Some tooltip for this item 5"' 4);  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox,EditViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\EditView\EditViewControl.cs,CreateAutoList,The following statement contains a magic number: if (_SyntaxBox != null && !_SyntaxBox.DisableAutoList && _AutoList == null) {  	Debug.WriteLine ("Creating Autolist");  	AutoList = new AutoListForm ();  	NativeMethods.SetWindowLong (AutoList.Handle' NativeMethods.GWL_STYLE' NativeMethods.WS_CHILD);  	AutoList.SendToBack ();  	AutoList.Visible = false;  	//this.Controls.Add (this.AutoList);  	AutoList.DoubleClick += AutoListDoubleClick;  	AutoList.Images = _SyntaxBox.AutoListIcons;  	AutoList.Add ("a123"' "a123"' "Some tooltip for this item 1"' 1);  	AutoList.Add ("b456"' "b456"' "Some tooltip for this item 2"' 2);  	AutoList.Add ("c789"' "c789"' "Some tooltip for this item 3"' 2);  	AutoList.Add ("d012"' "d012"' "Some tooltip for this item 4"' 3);  	AutoList.Add ("e345"' "e345"' "Some tooltip for this item 5"' 4);  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox,EditViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\EditView\EditViewControl.cs,CreateAutoList,The following statement contains a magic number: AutoList.Add ("b456"' "b456"' "Some tooltip for this item 2"' 2);  
Magic Number,Alsing.Windows.Forms.SyntaxBox,EditViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\EditView\EditViewControl.cs,CreateAutoList,The following statement contains a magic number: AutoList.Add ("c789"' "c789"' "Some tooltip for this item 3"' 2);  
Magic Number,Alsing.Windows.Forms.SyntaxBox,EditViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\EditView\EditViewControl.cs,CreateAutoList,The following statement contains a magic number: AutoList.Add ("d012"' "d012"' "Some tooltip for this item 4"' 3);  
Magic Number,Alsing.Windows.Forms.SyntaxBox,EditViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\EditView\EditViewControl.cs,CreateAutoList,The following statement contains a magic number: AutoList.Add ("e345"' "e345"' "Some tooltip for this item 5"' 4);  
Magic Number,Alsing.Windows.Forms.SyntaxBox,EditViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\EditView\EditViewControl.cs,IntelliMouse_Scroll,The following statement contains a magic number: _IntelliScrollPos += e.DeltaY / (double)8;  
Magic Number,Alsing.Windows.Forms.SyntaxBox,EditViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\EditView\EditViewControl.cs,CopyAsRTF,The following statement contains a magic number: for (int i = r1; i <= r2; i++) {  	Row row = Document [i];  	foreach (Word w in row) {  		if (i == r1 && w.Column + w.Text.Length < c1)  			continue;  		bool IsFirst = (i == r1 && w.Column <= c1 && w.Column + w.Text.Length > c1);  		bool IsLast = (i == r2 && w.Column < c2 && w.Column + w.Text.Length > c2);  		if (w.Type == WordType.Word && w.Style != null) {  			int clrindex = Array.IndexOf (styles' w.Style);  			clrindex *= 2;  			clrindex++;  			sb.Append ("{\\cf" + clrindex.ToString (CultureInfo.InvariantCulture));  			if (!w.Style.Transparent) {  				sb.Append ("\\highlight" + (clrindex + 1).ToString (CultureInfo.InvariantCulture));  			}  			sb.Append (" ");  		}  		if (w.Style != null) {  			if (w.Style.Bold)  				sb.Append (@"\b ");  			if (w.Style.Underline)  				sb.Append (@"\ul ");  			if (w.Style.Italic)  				sb.Append (@"\i ");  		}  		string wordtext = w.Text;  		if (IsLast)  			wordtext = wordtext.Substring (0' c2 - w.Column);  		if (IsFirst)  			wordtext = wordtext.Substring (c1 - w.Column);  		wordtext = wordtext.Replace (@"\"' @" \ \ ").Replace (@"          }          "' @" \        }        ").Replace (@"        {          "' @" \          {            ");  		sb.Append (wordtext);  		if (w.Style != null) {  			if (w.Style.Bold)  				sb.Append (@"\b0 ");  			if (w.Style.Underline)  				sb.Append (@"\ul0 ");  			if (w.Style.Italic)  				sb.Append (@"\i0 ");  		}  		if (w.Type == WordType.Word && w.Style != null) {  			sb.Append ("}");  		}  		if (IsLast) {  			Done = true;  			break;  		}  	}  	if (Done)  		break;  	sb.Append (@"\par");  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox,EditViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\EditView\EditViewControl.cs,CopyAsRTF,The following statement contains a magic number: foreach (Word w in row) {  	if (i == r1 && w.Column + w.Text.Length < c1)  		continue;  	bool IsFirst = (i == r1 && w.Column <= c1 && w.Column + w.Text.Length > c1);  	bool IsLast = (i == r2 && w.Column < c2 && w.Column + w.Text.Length > c2);  	if (w.Type == WordType.Word && w.Style != null) {  		int clrindex = Array.IndexOf (styles' w.Style);  		clrindex *= 2;  		clrindex++;  		sb.Append ("{\\cf" + clrindex.ToString (CultureInfo.InvariantCulture));  		if (!w.Style.Transparent) {  			sb.Append ("\\highlight" + (clrindex + 1).ToString (CultureInfo.InvariantCulture));  		}  		sb.Append (" ");  	}  	if (w.Style != null) {  		if (w.Style.Bold)  			sb.Append (@"\b ");  		if (w.Style.Underline)  			sb.Append (@"\ul ");  		if (w.Style.Italic)  			sb.Append (@"\i ");  	}  	string wordtext = w.Text;  	if (IsLast)  		wordtext = wordtext.Substring (0' c2 - w.Column);  	if (IsFirst)  		wordtext = wordtext.Substring (c1 - w.Column);  	wordtext = wordtext.Replace (@"\"' @" \ \ ").Replace (@"          }          "' @" \        }        ").Replace (@"        {          "' @" \          {            ");  	sb.Append (wordtext);  	if (w.Style != null) {  		if (w.Style.Bold)  			sb.Append (@"\b0 ");  		if (w.Style.Underline)  			sb.Append (@"\ul0 ");  		if (w.Style.Italic)  			sb.Append (@"\i0 ");  	}  	if (w.Type == WordType.Word && w.Style != null) {  		sb.Append ("}");  	}  	if (IsLast) {  		Done = true;  		break;  	}  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox,EditViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\EditView\EditViewControl.cs,CopyAsRTF,The following statement contains a magic number: if (w.Type == WordType.Word && w.Style != null) {  	int clrindex = Array.IndexOf (styles' w.Style);  	clrindex *= 2;  	clrindex++;  	sb.Append ("{\\cf" + clrindex.ToString (CultureInfo.InvariantCulture));  	if (!w.Style.Transparent) {  		sb.Append ("\\highlight" + (clrindex + 1).ToString (CultureInfo.InvariantCulture));  	}  	sb.Append (" ");  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox,EditViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\EditView\EditViewControl.cs,CopyAsRTF,The following statement contains a magic number: clrindex *= 2;  
Magic Number,Alsing.Windows.Forms.SyntaxBox,EditViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\EditView\EditViewControl.cs,DeleteForward,The following statement contains a magic number: if (Selection.IsValid)  	Selection.DeleteSelection ();  else {  	Row xtr = Caret.CurrentRow;  	if (Caret.Position.X == xtr.Text.Length) {  		if (Caret.Position.Y <= Document.Count - 2) {  			var r = new TextRange {  				FirstColumn = Caret.Position.X'  				FirstRow = Caret.Position.Y  			};  			r.LastRow = r.FirstRow + 1;  			r.LastColumn = 0;  			Document.DeleteRange (r);  			Document.ResetVisibleRows ();  		}  	}  	else {  		var r = new TextRange {  			FirstColumn = Caret.Position.X'  			FirstRow = Caret.Position.Y  		};  		r.LastRow = r.FirstRow;  		r.LastColumn = r.FirstColumn + 1;  		Document.DeleteRange (r);  		Document.ResetVisibleRows ();  		Caret.CurrentRow.Parse (false);  		Caret.CurrentRow.Parse (true);  	}  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox,EditViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\EditView\EditViewControl.cs,DeleteForward,The following statement contains a magic number: if (Caret.Position.X == xtr.Text.Length) {  	if (Caret.Position.Y <= Document.Count - 2) {  		var r = new TextRange {  			FirstColumn = Caret.Position.X'  			FirstRow = Caret.Position.Y  		};  		r.LastRow = r.FirstRow + 1;  		r.LastColumn = 0;  		Document.DeleteRange (r);  		Document.ResetVisibleRows ();  	}  }  else {  	var r = new TextRange {  		FirstColumn = Caret.Position.X'  		FirstRow = Caret.Position.Y  	};  	r.LastRow = r.FirstRow;  	r.LastColumn = r.FirstColumn + 1;  	Document.DeleteRange (r);  	Document.ResetVisibleRows ();  	Caret.CurrentRow.Parse (false);  	Caret.CurrentRow.Parse (true);  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox,EditViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\EditView\EditViewControl.cs,DeleteForward,The following statement contains a magic number: if (Caret.Position.Y <= Document.Count - 2) {  	var r = new TextRange {  		FirstColumn = Caret.Position.X'  		FirstRow = Caret.Position.Y  	};  	r.LastRow = r.FirstRow + 1;  	r.LastColumn = 0;  	Document.DeleteRange (r);  	Document.ResetVisibleRows ();  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox,EditViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\EditView\EditViewControl.cs,SetMouseCursor,The following statement contains a magic number: if (View.Action == EditAction.DragText) {  	Cursor = Cursors.Hand;  	//Cursor.Current = Cursors.Hand;  }  else {  	if (x < View.TotalMarginWidth) {  		if (x < View.GutterMarginWidth) {  			Cursor = Cursors.Arrow;  		}  		else {  			var ms = new MemoryStream (Properties.Resources.FlippedCursor);  			Cursor = new Cursor (ms);  		}  	}  	else {  		if (x > View.TextMargin - 8) {  			if (IsOverSelection (x' y))  				Cursor = Cursors.Arrow;  			else {  				TextPoint tp = Painter.CharFromPixel (x' y);  				Word w = Document.GetWordFromPos (tp);  				if (w != null && w.Pattern != null && w.Pattern.Category != null) {  					var e = new WordMouseEventArgs {  						Pattern = w.Pattern'  						Button = MouseButtons.None'  						Cursor = Cursors.Hand'  						Word = w  					};  					_SyntaxBox.OnWordMouseHover (ref e);  					Cursor = e.Cursor;  				}  				else  					Cursor = Cursors.IBeam;  			}  		}  		else {  			Cursor = Cursors.Arrow;  		}  	}  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox,EditViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\EditView\EditViewControl.cs,SetMouseCursor,The following statement contains a magic number: if (x < View.TotalMarginWidth) {  	if (x < View.GutterMarginWidth) {  		Cursor = Cursors.Arrow;  	}  	else {  		var ms = new MemoryStream (Properties.Resources.FlippedCursor);  		Cursor = new Cursor (ms);  	}  }  else {  	if (x > View.TextMargin - 8) {  		if (IsOverSelection (x' y))  			Cursor = Cursors.Arrow;  		else {  			TextPoint tp = Painter.CharFromPixel (x' y);  			Word w = Document.GetWordFromPos (tp);  			if (w != null && w.Pattern != null && w.Pattern.Category != null) {  				var e = new WordMouseEventArgs {  					Pattern = w.Pattern'  					Button = MouseButtons.None'  					Cursor = Cursors.Hand'  					Word = w  				};  				_SyntaxBox.OnWordMouseHover (ref e);  				Cursor = e.Cursor;  			}  			else  				Cursor = Cursors.IBeam;  		}  	}  	else {  		Cursor = Cursors.Arrow;  	}  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox,EditViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\EditView\EditViewControl.cs,SetMouseCursor,The following statement contains a magic number: if (x > View.TextMargin - 8) {  	if (IsOverSelection (x' y))  		Cursor = Cursors.Arrow;  	else {  		TextPoint tp = Painter.CharFromPixel (x' y);  		Word w = Document.GetWordFromPos (tp);  		if (w != null && w.Pattern != null && w.Pattern.Category != null) {  			var e = new WordMouseEventArgs {  				Pattern = w.Pattern'  				Button = MouseButtons.None'  				Cursor = Cursors.Hand'  				Word = w  			};  			_SyntaxBox.OnWordMouseHover (ref e);  			Cursor = e.Cursor;  		}  		else  			Cursor = Cursors.IBeam;  	}  }  else {  	Cursor = Cursors.Arrow;  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox,EditViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\EditView\EditViewControl.cs,CharType,The following statement contains a magic number: if (g2.IndexOf (s) >= 0)  	return 2;  
Magic Number,Alsing.Windows.Forms.SyntaxBox,EditViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\EditView\EditViewControl.cs,CharType,The following statement contains a magic number: return 2;  
Magic Number,Alsing.Windows.Forms.SyntaxBox,EditViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\EditView\EditViewControl.cs,CharType,The following statement contains a magic number: return 3;  
Magic Number,Alsing.Windows.Forms.SyntaxBox,EditViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\EditView\EditViewControl.cs,InitVars,The following statement contains a magic number: if (View.RowHeight == 0)  	View.RowHeight = 48;  
Magic Number,Alsing.Windows.Forms.SyntaxBox,EditViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\EditView\EditViewControl.cs,InitVars,The following statement contains a magic number: View.RowHeight = 48;  
Magic Number,Alsing.Windows.Forms.SyntaxBox,EditViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\EditView\EditViewControl.cs,InitVars,The following statement contains a magic number: if (View.CharWidth == 0)  	View.CharWidth = 16;  
Magic Number,Alsing.Windows.Forms.SyntaxBox,EditViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\EditView\EditViewControl.cs,InitVars,The following statement contains a magic number: View.CharWidth = 16;  
Magic Number,Alsing.Windows.Forms.SyntaxBox,EditViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\EditView\EditViewControl.cs,InitVars,The following statement contains a magic number: if (hScroll.Visible)  	View.VisibleRowCount = (Height - hScroll.Height) / View.RowHeight + 1;  else  	View.VisibleRowCount = (Height - hScroll.Height) / View.RowHeight + 2;  
Magic Number,Alsing.Windows.Forms.SyntaxBox,EditViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\EditView\EditViewControl.cs,InitVars,The following statement contains a magic number: View.VisibleRowCount = (Height - hScroll.Height) / View.RowHeight + 2;  
Magic Number,Alsing.Windows.Forms.SyntaxBox,EditViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\EditView\EditViewControl.cs,InitVars,The following statement contains a magic number: if (ShowLineNumbers) {  	int chars = (Document.Count).ToString (CultureInfo.InvariantCulture).Length;  	var s = new String ('9'' chars);  	View.LineNumberMarginWidth = 10 + Painter.MeasureString (s).Width;  }  else  	View.LineNumberMarginWidth = 0;  
Magic Number,Alsing.Windows.Forms.SyntaxBox,EditViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\EditView\EditViewControl.cs,InitVars,The following statement contains a magic number: View.LineNumberMarginWidth = 10 + Painter.MeasureString (s).Width;  
Magic Number,Alsing.Windows.Forms.SyntaxBox,EditViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\EditView\EditViewControl.cs,InitVars,The following statement contains a magic number: if (Document.Folding)  	View.TextMargin = View.TotalMarginWidth + 20;  else  	View.TextMargin = View.TotalMarginWidth + 7;  
Magic Number,Alsing.Windows.Forms.SyntaxBox,EditViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\EditView\EditViewControl.cs,InitVars,The following statement contains a magic number: if (Document.Folding)  	View.TextMargin = View.TotalMarginWidth + 20;  else  	View.TextMargin = View.TotalMarginWidth + 7;  
Magic Number,Alsing.Windows.Forms.SyntaxBox,EditViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\EditView\EditViewControl.cs,InitVars,The following statement contains a magic number: View.TextMargin = View.TotalMarginWidth + 20;  
Magic Number,Alsing.Windows.Forms.SyntaxBox,EditViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\EditView\EditViewControl.cs,InitVars,The following statement contains a magic number: View.TextMargin = View.TotalMarginWidth + 7;  
Magic Number,Alsing.Windows.Forms.SyntaxBox,EditViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\EditView\EditViewControl.cs,SetMaxHorizontalScroll,The following statement contains a magic number: if (View.ClientAreaWidth / CharWidth < 0) {  	hScroll.Maximum = 1000;  	return;  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox,EditViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\EditView\EditViewControl.cs,SetMaxHorizontalScroll,The following statement contains a magic number: hScroll.Maximum = 1000;  
Magic Number,Alsing.Windows.Forms.SyntaxBox,EditViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\EditView\EditViewControl.cs,SetMaxHorizontalScroll,The following statement contains a magic number: try {  	int max = 0;  	for (int i = View.FirstVisibleRow; i < Document.VisibleRows.Count; i++) {  		if (i >= View.VisibleRowCount + View.FirstVisibleRow)  			break;  		string l = Document.VisibleRows [i].IsCollapsed ? Document.VisibleRows [i].VirtualCollapsedRow.Text : Document.VisibleRows [i].Text;  		l = l.Replace ("\t"' new string (' '' TabSize));  		if (l.Length > max)  			max = l.Length;  	}  	int pixels = max * MaxCharWidth;  	int chars = pixels / CharWidth;  	if (hScroll.Value <= chars)  		hScroll.Maximum = chars;  }  catch {  	hScroll.Maximum = 1000;  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox,EditViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\EditView\EditViewControl.cs,SetMaxHorizontalScroll,The following statement contains a magic number: hScroll.Maximum = 1000;  
Magic Number,Alsing.Windows.Forms.SyntaxBox,EditViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\EditView\EditViewControl.cs,InitializeComponent,The following statement contains a magic number: if (!_SyntaxBox.DisableIntelliMouse) {  	IntelliMouse = new IntelliMouseControl {  		BackgroundImage = ((Bitmap)(resources.GetObject ("IntelliMouse.BackgroundImage")))'  		Image = ((Bitmap)(resources.GetObject ("IntelliMouse.Image")))'  		Location = new Point (197' 157)'  		Name = "IntelliMouse"'  		Size = new Size (28' 28)'  		TabIndex = 4'  		TransparencyKey = Color.FromArgb (((255))' ((0))' ((255)))'  		Visible = false  	};  	//   	// IntelliMouse  	//   	IntelliMouse.EndScroll += IntelliMouse_EndScroll;  	IntelliMouse.BeginScroll += IntelliMouse_BeginScroll;  	IntelliMouse.Scroll += IntelliMouse_Scroll;  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox,EditViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\EditView\EditViewControl.cs,InitializeComponent,The following statement contains a magic number: if (!_SyntaxBox.DisableIntelliMouse) {  	IntelliMouse = new IntelliMouseControl {  		BackgroundImage = ((Bitmap)(resources.GetObject ("IntelliMouse.BackgroundImage")))'  		Image = ((Bitmap)(resources.GetObject ("IntelliMouse.Image")))'  		Location = new Point (197' 157)'  		Name = "IntelliMouse"'  		Size = new Size (28' 28)'  		TabIndex = 4'  		TransparencyKey = Color.FromArgb (((255))' ((0))' ((255)))'  		Visible = false  	};  	//   	// IntelliMouse  	//   	IntelliMouse.EndScroll += IntelliMouse_EndScroll;  	IntelliMouse.BeginScroll += IntelliMouse_BeginScroll;  	IntelliMouse.Scroll += IntelliMouse_Scroll;  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox,EditViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\EditView\EditViewControl.cs,InitializeComponent,The following statement contains a magic number: if (!_SyntaxBox.DisableIntelliMouse) {  	IntelliMouse = new IntelliMouseControl {  		BackgroundImage = ((Bitmap)(resources.GetObject ("IntelliMouse.BackgroundImage")))'  		Image = ((Bitmap)(resources.GetObject ("IntelliMouse.Image")))'  		Location = new Point (197' 157)'  		Name = "IntelliMouse"'  		Size = new Size (28' 28)'  		TabIndex = 4'  		TransparencyKey = Color.FromArgb (((255))' ((0))' ((255)))'  		Visible = false  	};  	//   	// IntelliMouse  	//   	IntelliMouse.EndScroll += IntelliMouse_EndScroll;  	IntelliMouse.BeginScroll += IntelliMouse_BeginScroll;  	IntelliMouse.Scroll += IntelliMouse_Scroll;  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox,EditViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\EditView\EditViewControl.cs,InitializeComponent,The following statement contains a magic number: if (!_SyntaxBox.DisableIntelliMouse) {  	IntelliMouse = new IntelliMouseControl {  		BackgroundImage = ((Bitmap)(resources.GetObject ("IntelliMouse.BackgroundImage")))'  		Image = ((Bitmap)(resources.GetObject ("IntelliMouse.Image")))'  		Location = new Point (197' 157)'  		Name = "IntelliMouse"'  		Size = new Size (28' 28)'  		TabIndex = 4'  		TransparencyKey = Color.FromArgb (((255))' ((0))' ((255)))'  		Visible = false  	};  	//   	// IntelliMouse  	//   	IntelliMouse.EndScroll += IntelliMouse_EndScroll;  	IntelliMouse.BeginScroll += IntelliMouse_BeginScroll;  	IntelliMouse.Scroll += IntelliMouse_Scroll;  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox,EditViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\EditView\EditViewControl.cs,InitializeComponent,The following statement contains a magic number: if (!_SyntaxBox.DisableIntelliMouse) {  	IntelliMouse = new IntelliMouseControl {  		BackgroundImage = ((Bitmap)(resources.GetObject ("IntelliMouse.BackgroundImage")))'  		Image = ((Bitmap)(resources.GetObject ("IntelliMouse.Image")))'  		Location = new Point (197' 157)'  		Name = "IntelliMouse"'  		Size = new Size (28' 28)'  		TabIndex = 4'  		TransparencyKey = Color.FromArgb (((255))' ((0))' ((255)))'  		Visible = false  	};  	//   	// IntelliMouse  	//   	IntelliMouse.EndScroll += IntelliMouse_EndScroll;  	IntelliMouse.BeginScroll += IntelliMouse_BeginScroll;  	IntelliMouse.Scroll += IntelliMouse_Scroll;  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox,EditViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\EditView\EditViewControl.cs,InitializeComponent,The following statement contains a magic number: if (!_SyntaxBox.DisableIntelliMouse) {  	IntelliMouse = new IntelliMouseControl {  		BackgroundImage = ((Bitmap)(resources.GetObject ("IntelliMouse.BackgroundImage")))'  		Image = ((Bitmap)(resources.GetObject ("IntelliMouse.Image")))'  		Location = new Point (197' 157)'  		Name = "IntelliMouse"'  		Size = new Size (28' 28)'  		TabIndex = 4'  		TransparencyKey = Color.FromArgb (((255))' ((0))' ((255)))'  		Visible = false  	};  	//   	// IntelliMouse  	//   	IntelliMouse.EndScroll += IntelliMouse_EndScroll;  	IntelliMouse.BeginScroll += IntelliMouse_BeginScroll;  	IntelliMouse.Scroll += IntelliMouse_Scroll;  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox,EditViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\EditView\EditViewControl.cs,InitializeComponent,The following statement contains a magic number: if (!_SyntaxBox.DisableIntelliMouse) {  	IntelliMouse = new IntelliMouseControl {  		BackgroundImage = ((Bitmap)(resources.GetObject ("IntelliMouse.BackgroundImage")))'  		Image = ((Bitmap)(resources.GetObject ("IntelliMouse.Image")))'  		Location = new Point (197' 157)'  		Name = "IntelliMouse"'  		Size = new Size (28' 28)'  		TabIndex = 4'  		TransparencyKey = Color.FromArgb (((255))' ((0))' ((255)))'  		Visible = false  	};  	//   	// IntelliMouse  	//   	IntelliMouse.EndScroll += IntelliMouse_EndScroll;  	IntelliMouse.BeginScroll += IntelliMouse_BeginScroll;  	IntelliMouse.Scroll += IntelliMouse_Scroll;  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox,EditViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\EditView\EditViewControl.cs,InitializeComponent,The following statement contains a magic number: IntelliMouse = new IntelliMouseControl {  	BackgroundImage = ((Bitmap)(resources.GetObject ("IntelliMouse.BackgroundImage")))'  	Image = ((Bitmap)(resources.GetObject ("IntelliMouse.Image")))'  	Location = new Point (197' 157)'  	Name = "IntelliMouse"'  	Size = new Size (28' 28)'  	TabIndex = 4'  	TransparencyKey = Color.FromArgb (((255))' ((0))' ((255)))'  	Visible = false  };  
Magic Number,Alsing.Windows.Forms.SyntaxBox,EditViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\EditView\EditViewControl.cs,InitializeComponent,The following statement contains a magic number: IntelliMouse = new IntelliMouseControl {  	BackgroundImage = ((Bitmap)(resources.GetObject ("IntelliMouse.BackgroundImage")))'  	Image = ((Bitmap)(resources.GetObject ("IntelliMouse.Image")))'  	Location = new Point (197' 157)'  	Name = "IntelliMouse"'  	Size = new Size (28' 28)'  	TabIndex = 4'  	TransparencyKey = Color.FromArgb (((255))' ((0))' ((255)))'  	Visible = false  };  
Magic Number,Alsing.Windows.Forms.SyntaxBox,EditViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\EditView\EditViewControl.cs,InitializeComponent,The following statement contains a magic number: IntelliMouse = new IntelliMouseControl {  	BackgroundImage = ((Bitmap)(resources.GetObject ("IntelliMouse.BackgroundImage")))'  	Image = ((Bitmap)(resources.GetObject ("IntelliMouse.Image")))'  	Location = new Point (197' 157)'  	Name = "IntelliMouse"'  	Size = new Size (28' 28)'  	TabIndex = 4'  	TransparencyKey = Color.FromArgb (((255))' ((0))' ((255)))'  	Visible = false  };  
Magic Number,Alsing.Windows.Forms.SyntaxBox,EditViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\EditView\EditViewControl.cs,InitializeComponent,The following statement contains a magic number: IntelliMouse = new IntelliMouseControl {  	BackgroundImage = ((Bitmap)(resources.GetObject ("IntelliMouse.BackgroundImage")))'  	Image = ((Bitmap)(resources.GetObject ("IntelliMouse.Image")))'  	Location = new Point (197' 157)'  	Name = "IntelliMouse"'  	Size = new Size (28' 28)'  	TabIndex = 4'  	TransparencyKey = Color.FromArgb (((255))' ((0))' ((255)))'  	Visible = false  };  
Magic Number,Alsing.Windows.Forms.SyntaxBox,EditViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\EditView\EditViewControl.cs,InitializeComponent,The following statement contains a magic number: IntelliMouse = new IntelliMouseControl {  	BackgroundImage = ((Bitmap)(resources.GetObject ("IntelliMouse.BackgroundImage")))'  	Image = ((Bitmap)(resources.GetObject ("IntelliMouse.Image")))'  	Location = new Point (197' 157)'  	Name = "IntelliMouse"'  	Size = new Size (28' 28)'  	TabIndex = 4'  	TransparencyKey = Color.FromArgb (((255))' ((0))' ((255)))'  	Visible = false  };  
Magic Number,Alsing.Windows.Forms.SyntaxBox,EditViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\EditView\EditViewControl.cs,InitializeComponent,The following statement contains a magic number: IntelliMouse = new IntelliMouseControl {  	BackgroundImage = ((Bitmap)(resources.GetObject ("IntelliMouse.BackgroundImage")))'  	Image = ((Bitmap)(resources.GetObject ("IntelliMouse.Image")))'  	Location = new Point (197' 157)'  	Name = "IntelliMouse"'  	Size = new Size (28' 28)'  	TabIndex = 4'  	TransparencyKey = Color.FromArgb (((255))' ((0))' ((255)))'  	Visible = false  };  
Magic Number,Alsing.Windows.Forms.SyntaxBox,EditViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\EditView\EditViewControl.cs,InitializeComponent,The following statement contains a magic number: IntelliMouse = new IntelliMouseControl {  	BackgroundImage = ((Bitmap)(resources.GetObject ("IntelliMouse.BackgroundImage")))'  	Image = ((Bitmap)(resources.GetObject ("IntelliMouse.Image")))'  	Location = new Point (197' 157)'  	Name = "IntelliMouse"'  	Size = new Size (28' 28)'  	TabIndex = 4'  	TransparencyKey = Color.FromArgb (((255))' ((0))' ((255)))'  	Visible = false  };  
Magic Number,Alsing.Windows.Forms.SyntaxBox,EditViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\EditView\EditViewControl.cs,InitializeComponent,The following statement contains a magic number: CaretTimer.Interval = 500;  
Magic Number,Alsing.Windows.Forms.SyntaxBox,EditViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\EditView\EditViewControl.cs,InitializeComponent,The following statement contains a magic number: tooltip.AutoPopDelay = 50000;  
Magic Number,Alsing.Windows.Forms.SyntaxBox,EditViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\EditView\EditViewControl.cs,InitializeComponent,The following statement contains a magic number: tooltip.ReshowDelay = 1000;  
Magic Number,Alsing.Windows.Forms.SyntaxBox,EditViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\EditView\EditViewControl.cs,InitializeComponent,The following statement contains a magic number: TopThumb.Location = new Point (101' 17);  
Magic Number,Alsing.Windows.Forms.SyntaxBox,EditViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\EditView\EditViewControl.cs,InitializeComponent,The following statement contains a magic number: TopThumb.Location = new Point (101' 17);  
Magic Number,Alsing.Windows.Forms.SyntaxBox,EditViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\EditView\EditViewControl.cs,InitializeComponent,The following statement contains a magic number: TopThumb.Size = new Size (16' 8);  
Magic Number,Alsing.Windows.Forms.SyntaxBox,EditViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\EditView\EditViewControl.cs,InitializeComponent,The following statement contains a magic number: TopThumb.Size = new Size (16' 8);  
Magic Number,Alsing.Windows.Forms.SyntaxBox,EditViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\EditView\EditViewControl.cs,InitializeComponent,The following statement contains a magic number: TopThumb.TabIndex = 3;  
Magic Number,Alsing.Windows.Forms.SyntaxBox,EditViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\EditView\EditViewControl.cs,InitializeComponent,The following statement contains a magic number: LeftThumb.Location = new Point (423' 17);  
Magic Number,Alsing.Windows.Forms.SyntaxBox,EditViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\EditView\EditViewControl.cs,InitializeComponent,The following statement contains a magic number: LeftThumb.Location = new Point (423' 17);  
Magic Number,Alsing.Windows.Forms.SyntaxBox,EditViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\EditView\EditViewControl.cs,InitializeComponent,The following statement contains a magic number: LeftThumb.Size = new Size (8' 16);  
Magic Number,Alsing.Windows.Forms.SyntaxBox,EditViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\EditView\EditViewControl.cs,InitializeComponent,The following statement contains a magic number: LeftThumb.Size = new Size (8' 16);  
Magic Number,Alsing.Windows.Forms.SyntaxBox,EditViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\EditView\EditViewControl.cs,InitializeComponent,The following statement contains a magic number: LeftThumb.TabIndex = 3;  
Magic Number,Alsing.Windows.Forms.SyntaxBox,EditViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\EditView\EditViewControl.cs,ScrollIntoView,The following statement contains a magic number: try {  	Row xtr2 = Caret.CurrentRow;  	if (xtr2.VisibleIndex >= View.FirstVisibleRow + View.VisibleRowCount - 2) {  		int Diff = Caret.CurrentRow.VisibleIndex - (View.FirstVisibleRow + View.VisibleRowCount - 2) + View.FirstVisibleRow;  		if (Diff > Document.VisibleRows.Count - 1)  			Diff = Document.VisibleRows.Count - 1;  		Row r = Document.VisibleRows [Diff];  		int index = r.VisibleIndex;  		if (index != -1)  			vScroll.Value = index;  	}  }  catch {  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox,EditViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\EditView\EditViewControl.cs,ScrollIntoView,The following statement contains a magic number: try {  	Row xtr2 = Caret.CurrentRow;  	if (xtr2.VisibleIndex >= View.FirstVisibleRow + View.VisibleRowCount - 2) {  		int Diff = Caret.CurrentRow.VisibleIndex - (View.FirstVisibleRow + View.VisibleRowCount - 2) + View.FirstVisibleRow;  		if (Diff > Document.VisibleRows.Count - 1)  			Diff = Document.VisibleRows.Count - 1;  		Row r = Document.VisibleRows [Diff];  		int index = r.VisibleIndex;  		if (index != -1)  			vScroll.Value = index;  	}  }  catch {  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox,EditViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\EditView\EditViewControl.cs,ScrollIntoView,The following statement contains a magic number: if (xtr2.VisibleIndex >= View.FirstVisibleRow + View.VisibleRowCount - 2) {  	int Diff = Caret.CurrentRow.VisibleIndex - (View.FirstVisibleRow + View.VisibleRowCount - 2) + View.FirstVisibleRow;  	if (Diff > Document.VisibleRows.Count - 1)  		Diff = Document.VisibleRows.Count - 1;  	Row r = Document.VisibleRows [Diff];  	int index = r.VisibleIndex;  	if (index != -1)  		vScroll.Value = index;  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox,EditViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\EditView\EditViewControl.cs,ScrollIntoView,The following statement contains a magic number: if (xtr2.VisibleIndex >= View.FirstVisibleRow + View.VisibleRowCount - 2) {  	int Diff = Caret.CurrentRow.VisibleIndex - (View.FirstVisibleRow + View.VisibleRowCount - 2) + View.FirstVisibleRow;  	if (Diff > Document.VisibleRows.Count - 1)  		Diff = Document.VisibleRows.Count - 1;  	Row r = Document.VisibleRows [Diff];  	int index = r.VisibleIndex;  	if (index != -1)  		vScroll.Value = index;  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox,EditViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\EditView\EditViewControl.cs,ScrollIntoView,The following statement contains a magic number: if (Caret.CurrentRow.IsCollapsedEndPart) {  	x = Painter.MeasureRow (xtr' Caret.Position.X).Width + Caret.CurrentRow.Expansion_PixelStart;  	x -= Painter.MeasureRow (xtr' xtr.Expansion_StartChar).Width;  	if (x >= View.ClientAreaWidth + View.ClientAreaStart)  		hScroll.Value = Math.Min (hScroll.Maximum' ((x - View.ClientAreaWidth) / View.CharWidth) + 15);  	if (x < View.ClientAreaStart + 10)  		hScroll.Value = Math.Max (hScroll.Minimum' ((x) / View.CharWidth) - 15);  }  else {  	x = Painter.MeasureRow (xtr' Caret.Position.X).Width;  	if (x >= View.ClientAreaWidth + View.ClientAreaStart)  		hScroll.Value = Math.Min (hScroll.Maximum' ((x - View.ClientAreaWidth) / View.CharWidth) + 15);  	if (x < View.ClientAreaStart)  		hScroll.Value = Math.Max (hScroll.Minimum' ((x) / View.CharWidth) - 15);  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox,EditViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\EditView\EditViewControl.cs,ScrollIntoView,The following statement contains a magic number: if (Caret.CurrentRow.IsCollapsedEndPart) {  	x = Painter.MeasureRow (xtr' Caret.Position.X).Width + Caret.CurrentRow.Expansion_PixelStart;  	x -= Painter.MeasureRow (xtr' xtr.Expansion_StartChar).Width;  	if (x >= View.ClientAreaWidth + View.ClientAreaStart)  		hScroll.Value = Math.Min (hScroll.Maximum' ((x - View.ClientAreaWidth) / View.CharWidth) + 15);  	if (x < View.ClientAreaStart + 10)  		hScroll.Value = Math.Max (hScroll.Minimum' ((x) / View.CharWidth) - 15);  }  else {  	x = Painter.MeasureRow (xtr' Caret.Position.X).Width;  	if (x >= View.ClientAreaWidth + View.ClientAreaStart)  		hScroll.Value = Math.Min (hScroll.Maximum' ((x - View.ClientAreaWidth) / View.CharWidth) + 15);  	if (x < View.ClientAreaStart)  		hScroll.Value = Math.Max (hScroll.Minimum' ((x) / View.CharWidth) - 15);  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox,EditViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\EditView\EditViewControl.cs,ScrollIntoView,The following statement contains a magic number: if (Caret.CurrentRow.IsCollapsedEndPart) {  	x = Painter.MeasureRow (xtr' Caret.Position.X).Width + Caret.CurrentRow.Expansion_PixelStart;  	x -= Painter.MeasureRow (xtr' xtr.Expansion_StartChar).Width;  	if (x >= View.ClientAreaWidth + View.ClientAreaStart)  		hScroll.Value = Math.Min (hScroll.Maximum' ((x - View.ClientAreaWidth) / View.CharWidth) + 15);  	if (x < View.ClientAreaStart + 10)  		hScroll.Value = Math.Max (hScroll.Minimum' ((x) / View.CharWidth) - 15);  }  else {  	x = Painter.MeasureRow (xtr' Caret.Position.X).Width;  	if (x >= View.ClientAreaWidth + View.ClientAreaStart)  		hScroll.Value = Math.Min (hScroll.Maximum' ((x - View.ClientAreaWidth) / View.CharWidth) + 15);  	if (x < View.ClientAreaStart)  		hScroll.Value = Math.Max (hScroll.Minimum' ((x) / View.CharWidth) - 15);  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox,EditViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\EditView\EditViewControl.cs,ScrollIntoView,The following statement contains a magic number: if (Caret.CurrentRow.IsCollapsedEndPart) {  	x = Painter.MeasureRow (xtr' Caret.Position.X).Width + Caret.CurrentRow.Expansion_PixelStart;  	x -= Painter.MeasureRow (xtr' xtr.Expansion_StartChar).Width;  	if (x >= View.ClientAreaWidth + View.ClientAreaStart)  		hScroll.Value = Math.Min (hScroll.Maximum' ((x - View.ClientAreaWidth) / View.CharWidth) + 15);  	if (x < View.ClientAreaStart + 10)  		hScroll.Value = Math.Max (hScroll.Minimum' ((x) / View.CharWidth) - 15);  }  else {  	x = Painter.MeasureRow (xtr' Caret.Position.X).Width;  	if (x >= View.ClientAreaWidth + View.ClientAreaStart)  		hScroll.Value = Math.Min (hScroll.Maximum' ((x - View.ClientAreaWidth) / View.CharWidth) + 15);  	if (x < View.ClientAreaStart)  		hScroll.Value = Math.Max (hScroll.Minimum' ((x) / View.CharWidth) - 15);  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox,EditViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\EditView\EditViewControl.cs,ScrollIntoView,The following statement contains a magic number: if (Caret.CurrentRow.IsCollapsedEndPart) {  	x = Painter.MeasureRow (xtr' Caret.Position.X).Width + Caret.CurrentRow.Expansion_PixelStart;  	x -= Painter.MeasureRow (xtr' xtr.Expansion_StartChar).Width;  	if (x >= View.ClientAreaWidth + View.ClientAreaStart)  		hScroll.Value = Math.Min (hScroll.Maximum' ((x - View.ClientAreaWidth) / View.CharWidth) + 15);  	if (x < View.ClientAreaStart + 10)  		hScroll.Value = Math.Max (hScroll.Minimum' ((x) / View.CharWidth) - 15);  }  else {  	x = Painter.MeasureRow (xtr' Caret.Position.X).Width;  	if (x >= View.ClientAreaWidth + View.ClientAreaStart)  		hScroll.Value = Math.Min (hScroll.Maximum' ((x - View.ClientAreaWidth) / View.CharWidth) + 15);  	if (x < View.ClientAreaStart)  		hScroll.Value = Math.Max (hScroll.Minimum' ((x) / View.CharWidth) - 15);  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox,EditViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\EditView\EditViewControl.cs,ScrollIntoView,The following statement contains a magic number: if (x >= View.ClientAreaWidth + View.ClientAreaStart)  	hScroll.Value = Math.Min (hScroll.Maximum' ((x - View.ClientAreaWidth) / View.CharWidth) + 15);  
Magic Number,Alsing.Windows.Forms.SyntaxBox,EditViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\EditView\EditViewControl.cs,ScrollIntoView,The following statement contains a magic number: hScroll.Value = Math.Min (hScroll.Maximum' ((x - View.ClientAreaWidth) / View.CharWidth) + 15);  
Magic Number,Alsing.Windows.Forms.SyntaxBox,EditViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\EditView\EditViewControl.cs,ScrollIntoView,The following statement contains a magic number: if (x < View.ClientAreaStart + 10)  	hScroll.Value = Math.Max (hScroll.Minimum' ((x) / View.CharWidth) - 15);  
Magic Number,Alsing.Windows.Forms.SyntaxBox,EditViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\EditView\EditViewControl.cs,ScrollIntoView,The following statement contains a magic number: if (x < View.ClientAreaStart + 10)  	hScroll.Value = Math.Max (hScroll.Minimum' ((x) / View.CharWidth) - 15);  
Magic Number,Alsing.Windows.Forms.SyntaxBox,EditViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\EditView\EditViewControl.cs,ScrollIntoView,The following statement contains a magic number: hScroll.Value = Math.Max (hScroll.Minimum' ((x) / View.CharWidth) - 15);  
Magic Number,Alsing.Windows.Forms.SyntaxBox,EditViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\EditView\EditViewControl.cs,ScrollIntoView,The following statement contains a magic number: if (x >= View.ClientAreaWidth + View.ClientAreaStart)  	hScroll.Value = Math.Min (hScroll.Maximum' ((x - View.ClientAreaWidth) / View.CharWidth) + 15);  
Magic Number,Alsing.Windows.Forms.SyntaxBox,EditViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\EditView\EditViewControl.cs,ScrollIntoView,The following statement contains a magic number: hScroll.Value = Math.Min (hScroll.Maximum' ((x - View.ClientAreaWidth) / View.CharWidth) + 15);  
Magic Number,Alsing.Windows.Forms.SyntaxBox,EditViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\EditView\EditViewControl.cs,ScrollIntoView,The following statement contains a magic number: if (x < View.ClientAreaStart)  	hScroll.Value = Math.Max (hScroll.Minimum' ((x) / View.CharWidth) - 15);  
Magic Number,Alsing.Windows.Forms.SyntaxBox,EditViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\EditView\EditViewControl.cs,ScrollIntoView,The following statement contains a magic number: hScroll.Value = Math.Max (hScroll.Minimum' ((x) / View.CharWidth) - 15);  
Magic Number,Alsing.Windows.Forms.SyntaxBox,EditViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\EditView\EditViewControl.cs,OnKeyDown,The following statement contains a magic number: if (!e.Handled) {  	//do keyboard actions  	foreach (KeyboardAction ka in _SyntaxBox.KeyboardActions) {  		if (!ReadOnly || ka.AllowReadOnly) {  			if ((ka.Key == (Keys)(int)e.KeyCode) && ka.Alt == e.Alt && ka.Shift == e.Shift && ka.Control == e.Control)  				ka.Action ();  			//if keys match ' call action delegate  		}  	}  	//------------------------------------------------------------------------------------------------------------  	switch ((Keys)(int)e.KeyCode) {  	case Keys.ShiftKey:  	case Keys.ControlKey:  	case Keys.Alt:  		return;  	case Keys.Down:  		if (e.Control)  			ScrollScreen (1);  		else {  			Caret.MoveDown (e.Shift);  			Redraw ();  		}  		break;  	case Keys.Up:  		if (e.Control)  			ScrollScreen (-1);  		else {  			Caret.MoveUp (e.Shift);  		}  		Redraw ();  		break;  	case Keys.Left:  		{  			if (e.Control) {  				MoveCaretToPrevWord (e.Shift);  			}  			else {  				Caret.MoveLeft (e.Shift);  			}  		}  		Redraw ();  		break;  	case Keys.Right:  		{  			if (e.Control) {  				MoveCaretToNextWord (e.Shift);  			}  			else {  				Caret.MoveRight (e.Shift);  			}  		}  		Redraw ();  		break;  	case Keys.End:  		if (e.Control)  			Caret.MoveAbsoluteEnd (e.Shift);  		else  			Caret.MoveEnd (e.Shift);  		Redraw ();  		break;  	case Keys.Home:  		if (e.Control)  			Caret.MoveAbsoluteHome (e.Shift);  		else  			Caret.MoveHome (e.Shift);  		Redraw ();  		break;  	case Keys.PageDown:  		Caret.MoveDown (View.VisibleRowCount - 2' e.Shift);  		Redraw ();  		break;  	case Keys.PageUp:  		Caret.MoveUp (View.VisibleRowCount - 2' e.Shift);  		Redraw ();  		break;  	default:  		break;  	}  	//dont do if readonly  	if (!ReadOnly) {  		switch ((Keys)(int)e.KeyCode) {  		case Keys.Enter: {  			if (e.Control) {  				if (Caret.CurrentRow.CanFold) {  					Caret.MoveHome (false);  					Document.ToggleRow (Caret.CurrentRow);  					Redraw ();  				}  			}  			else  				InsertEnter ();  			break;  		}  		case Keys.Back:  			if (!e.Control)  				DeleteBackwards ();  			else {  				if (Selection.IsValid)  					Selection.DeleteSelection ();  				else {  					Selection.ClearSelection ();  					MoveCaretToPrevWord (true);  					Selection.DeleteSelection ();  				}  				Caret.CurrentRow.Parse (true);  			}  			break;  		case Keys.Delete: {  			if (!e.Control && !e.Alt && !e.Shift) {  				Delete ();  			}  			else if (e.Control && !e.Alt && !e.Shift) {  				if (Selection.IsValid) {  					Cut ();  				}  				else {  					Selection.ClearSelection ();  					MoveCaretToNextWord (true);  					Selection.DeleteSelection ();  				}  				Caret.CurrentRow.Parse (true);  			}  			break;  		}  		case Keys.Insert: {  			if (!e.Control && !e.Alt && !e.Shift) {  				_OverWrite = !_OverWrite;  			}  			break;  		}  		case Keys.Tab: {  			if (!Selection.IsValid) {  				// ROB: Implementation of .TabsToSpaces  				if (!TabsToSpaces) {  					InsertText ("\t");  				}  				else {  					InsertText (new string (' '' TabSize));  				}  				// ROB-END  			}  			break;  		}  		default: {  			break;  		}  		}  	}  	Caret.Blink = true;  	//this.Redraw ();  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox,EditViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\EditView\EditViewControl.cs,OnKeyDown,The following statement contains a magic number: if (!e.Handled) {  	//do keyboard actions  	foreach (KeyboardAction ka in _SyntaxBox.KeyboardActions) {  		if (!ReadOnly || ka.AllowReadOnly) {  			if ((ka.Key == (Keys)(int)e.KeyCode) && ka.Alt == e.Alt && ka.Shift == e.Shift && ka.Control == e.Control)  				ka.Action ();  			//if keys match ' call action delegate  		}  	}  	//------------------------------------------------------------------------------------------------------------  	switch ((Keys)(int)e.KeyCode) {  	case Keys.ShiftKey:  	case Keys.ControlKey:  	case Keys.Alt:  		return;  	case Keys.Down:  		if (e.Control)  			ScrollScreen (1);  		else {  			Caret.MoveDown (e.Shift);  			Redraw ();  		}  		break;  	case Keys.Up:  		if (e.Control)  			ScrollScreen (-1);  		else {  			Caret.MoveUp (e.Shift);  		}  		Redraw ();  		break;  	case Keys.Left:  		{  			if (e.Control) {  				MoveCaretToPrevWord (e.Shift);  			}  			else {  				Caret.MoveLeft (e.Shift);  			}  		}  		Redraw ();  		break;  	case Keys.Right:  		{  			if (e.Control) {  				MoveCaretToNextWord (e.Shift);  			}  			else {  				Caret.MoveRight (e.Shift);  			}  		}  		Redraw ();  		break;  	case Keys.End:  		if (e.Control)  			Caret.MoveAbsoluteEnd (e.Shift);  		else  			Caret.MoveEnd (e.Shift);  		Redraw ();  		break;  	case Keys.Home:  		if (e.Control)  			Caret.MoveAbsoluteHome (e.Shift);  		else  			Caret.MoveHome (e.Shift);  		Redraw ();  		break;  	case Keys.PageDown:  		Caret.MoveDown (View.VisibleRowCount - 2' e.Shift);  		Redraw ();  		break;  	case Keys.PageUp:  		Caret.MoveUp (View.VisibleRowCount - 2' e.Shift);  		Redraw ();  		break;  	default:  		break;  	}  	//dont do if readonly  	if (!ReadOnly) {  		switch ((Keys)(int)e.KeyCode) {  		case Keys.Enter: {  			if (e.Control) {  				if (Caret.CurrentRow.CanFold) {  					Caret.MoveHome (false);  					Document.ToggleRow (Caret.CurrentRow);  					Redraw ();  				}  			}  			else  				InsertEnter ();  			break;  		}  		case Keys.Back:  			if (!e.Control)  				DeleteBackwards ();  			else {  				if (Selection.IsValid)  					Selection.DeleteSelection ();  				else {  					Selection.ClearSelection ();  					MoveCaretToPrevWord (true);  					Selection.DeleteSelection ();  				}  				Caret.CurrentRow.Parse (true);  			}  			break;  		case Keys.Delete: {  			if (!e.Control && !e.Alt && !e.Shift) {  				Delete ();  			}  			else if (e.Control && !e.Alt && !e.Shift) {  				if (Selection.IsValid) {  					Cut ();  				}  				else {  					Selection.ClearSelection ();  					MoveCaretToNextWord (true);  					Selection.DeleteSelection ();  				}  				Caret.CurrentRow.Parse (true);  			}  			break;  		}  		case Keys.Insert: {  			if (!e.Control && !e.Alt && !e.Shift) {  				_OverWrite = !_OverWrite;  			}  			break;  		}  		case Keys.Tab: {  			if (!Selection.IsValid) {  				// ROB: Implementation of .TabsToSpaces  				if (!TabsToSpaces) {  					InsertText ("\t");  				}  				else {  					InsertText (new string (' '' TabSize));  				}  				// ROB-END  			}  			break;  		}  		default: {  			break;  		}  		}  	}  	Caret.Blink = true;  	//this.Redraw ();  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox,EditViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\EditView\EditViewControl.cs,OnKeyDown,The following statement contains a magic number: switch ((Keys)(int)e.KeyCode) {  case Keys.ShiftKey:  case Keys.ControlKey:  case Keys.Alt:  	return;  case Keys.Down:  	if (e.Control)  		ScrollScreen (1);  	else {  		Caret.MoveDown (e.Shift);  		Redraw ();  	}  	break;  case Keys.Up:  	if (e.Control)  		ScrollScreen (-1);  	else {  		Caret.MoveUp (e.Shift);  	}  	Redraw ();  	break;  case Keys.Left:  	{  		if (e.Control) {  			MoveCaretToPrevWord (e.Shift);  		}  		else {  			Caret.MoveLeft (e.Shift);  		}  	}  	Redraw ();  	break;  case Keys.Right:  	{  		if (e.Control) {  			MoveCaretToNextWord (e.Shift);  		}  		else {  			Caret.MoveRight (e.Shift);  		}  	}  	Redraw ();  	break;  case Keys.End:  	if (e.Control)  		Caret.MoveAbsoluteEnd (e.Shift);  	else  		Caret.MoveEnd (e.Shift);  	Redraw ();  	break;  case Keys.Home:  	if (e.Control)  		Caret.MoveAbsoluteHome (e.Shift);  	else  		Caret.MoveHome (e.Shift);  	Redraw ();  	break;  case Keys.PageDown:  	Caret.MoveDown (View.VisibleRowCount - 2' e.Shift);  	Redraw ();  	break;  case Keys.PageUp:  	Caret.MoveUp (View.VisibleRowCount - 2' e.Shift);  	Redraw ();  	break;  default:  	break;  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox,EditViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\EditView\EditViewControl.cs,OnKeyDown,The following statement contains a magic number: switch ((Keys)(int)e.KeyCode) {  case Keys.ShiftKey:  case Keys.ControlKey:  case Keys.Alt:  	return;  case Keys.Down:  	if (e.Control)  		ScrollScreen (1);  	else {  		Caret.MoveDown (e.Shift);  		Redraw ();  	}  	break;  case Keys.Up:  	if (e.Control)  		ScrollScreen (-1);  	else {  		Caret.MoveUp (e.Shift);  	}  	Redraw ();  	break;  case Keys.Left:  	{  		if (e.Control) {  			MoveCaretToPrevWord (e.Shift);  		}  		else {  			Caret.MoveLeft (e.Shift);  		}  	}  	Redraw ();  	break;  case Keys.Right:  	{  		if (e.Control) {  			MoveCaretToNextWord (e.Shift);  		}  		else {  			Caret.MoveRight (e.Shift);  		}  	}  	Redraw ();  	break;  case Keys.End:  	if (e.Control)  		Caret.MoveAbsoluteEnd (e.Shift);  	else  		Caret.MoveEnd (e.Shift);  	Redraw ();  	break;  case Keys.Home:  	if (e.Control)  		Caret.MoveAbsoluteHome (e.Shift);  	else  		Caret.MoveHome (e.Shift);  	Redraw ();  	break;  case Keys.PageDown:  	Caret.MoveDown (View.VisibleRowCount - 2' e.Shift);  	Redraw ();  	break;  case Keys.PageUp:  	Caret.MoveUp (View.VisibleRowCount - 2' e.Shift);  	Redraw ();  	break;  default:  	break;  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox,EditViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\EditView\EditViewControl.cs,OnKeyDown,The following statement contains a magic number: Caret.MoveDown (View.VisibleRowCount - 2' e.Shift);  
Magic Number,Alsing.Windows.Forms.SyntaxBox,EditViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\EditView\EditViewControl.cs,OnKeyDown,The following statement contains a magic number: Caret.MoveUp (View.VisibleRowCount - 2' e.Shift);  
Magic Number,Alsing.Windows.Forms.SyntaxBox,EditViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\EditView\EditViewControl.cs,OnKeyPress,The following statement contains a magic number: if (!e.Handled && !_KeyDownHandled && e.KeyChar != (char)127) {  	if ((e.KeyChar) < 32)  		return;  	if (!ReadOnly) {  		switch ((Keys)(int)e.KeyChar) {  		default: {  			InsertText (e.KeyChar.ToString (CultureInfo.InvariantCulture));  			if (Indent == IndentStyle.Scope || Indent == IndentStyle.Smart) {  				if (Caret.CurrentRow.ShouldOutdent) {  					OutdentEndRow ();  				}  			}  			break;  		}  		}  	}  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox,EditViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\EditView\EditViewControl.cs,OnKeyPress,The following statement contains a magic number: if (!e.Handled && !_KeyDownHandled && e.KeyChar != (char)127) {  	if ((e.KeyChar) < 32)  		return;  	if (!ReadOnly) {  		switch ((Keys)(int)e.KeyChar) {  		default: {  			InsertText (e.KeyChar.ToString (CultureInfo.InvariantCulture));  			if (Indent == IndentStyle.Scope || Indent == IndentStyle.Smart) {  				if (Caret.CurrentRow.ShouldOutdent) {  					OutdentEndRow ();  				}  			}  			break;  		}  		}  	}  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox,EditViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\EditView\EditViewControl.cs,OnKeyPress,The following statement contains a magic number: if ((e.KeyChar) < 32)  	return;  
Magic Number,Alsing.Windows.Forms.SyntaxBox,EditViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\EditView\EditViewControl.cs,OnMouseDown,The following statement contains a magic number: if (e.X >= View.TextMargin - 7) {  	rea.Area = RowArea.TextArea;  }  else if (e.X < View.GutterMarginWidth) {  	rea.Area = RowArea.GutterArea;  }  else if (e.X < View.LineNumberMarginWidth + View.GutterMarginWidth) {  	rea.Area = RowArea.LineNumberArea;  }  else if (e.X < View.TextMargin - 7) {  	rea.Area = RowArea.FoldingArea;  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox,EditViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\EditView\EditViewControl.cs,OnMouseDown,The following statement contains a magic number: if (e.X >= View.TextMargin - 7) {  	rea.Area = RowArea.TextArea;  }  else if (e.X < View.GutterMarginWidth) {  	rea.Area = RowArea.GutterArea;  }  else if (e.X < View.LineNumberMarginWidth + View.GutterMarginWidth) {  	rea.Area = RowArea.LineNumberArea;  }  else if (e.X < View.TextMargin - 7) {  	rea.Area = RowArea.FoldingArea;  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox,EditViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\EditView\EditViewControl.cs,OnMouseDown,The following statement contains a magic number: if (e.X < View.GutterMarginWidth) {  	rea.Area = RowArea.GutterArea;  }  else if (e.X < View.LineNumberMarginWidth + View.GutterMarginWidth) {  	rea.Area = RowArea.LineNumberArea;  }  else if (e.X < View.TextMargin - 7) {  	rea.Area = RowArea.FoldingArea;  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox,EditViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\EditView\EditViewControl.cs,OnMouseDown,The following statement contains a magic number: if (e.X < View.LineNumberMarginWidth + View.GutterMarginWidth) {  	rea.Area = RowArea.LineNumberArea;  }  else if (e.X < View.TextMargin - 7) {  	rea.Area = RowArea.FoldingArea;  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox,EditViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\EditView\EditViewControl.cs,OnMouseDown,The following statement contains a magic number: if (e.X < View.TextMargin - 7) {  	rea.Area = RowArea.FoldingArea;  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox,EditViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\EditView\EditViewControl.cs,OnMouseDown,The following statement contains a magic number: if (e.X > View.TotalMarginWidth) {  	if (e.X > View.TextMargin - 8) {  		if (!IsOverSelection (e.X' e.Y)) {  			//selecting  			if (e.Button == MouseButtons.Left) {  				if (!shift) {  					TextPoint tp = pos;  					Word w = Document.GetWordFromPos (tp);  					if (w != null && w.Pattern != null && w.Pattern.Category != null) {  						var pe = new WordMouseEventArgs {  							Pattern = w.Pattern'  							Button = e.Button'  							Cursor = Cursors.Hand'  							Word = w  						};  						_SyntaxBox.OnWordMouseDown (ref pe);  						Cursor = pe.Cursor;  						return;  					}  					View.Action = EditAction.SelectText;  					Caret.SetPos (pos);  					Selection.ClearSelection ();  					Caret.Blink = true;  					Redraw ();  				}  				else {  					View.Action = EditAction.SelectText;  					Caret.SetPos (pos);  					Selection.MakeSelection ();  					Caret.Blink = true;  					Redraw ();  				}  			}  		}  	}  	else {  		if (row != null)  			if (row.expansion_StartSpan != null) {  				Caret.SetPos (new TextPoint (0' pos.Y));  				Selection.ClearSelection ();  				Document.ToggleRow (row);  				Redraw ();  			}  	}  }  else {  	if (e.X < View.GutterMarginWidth) {  		if (_SyntaxBox.AllowBreakPoints) {  			Row r = Document [Painter.CharFromPixel (e.X' e.Y).Y];  			r.Breakpoint = !r.Breakpoint;  			Redraw ();  		}  		else {  			Row r = Document [Painter.CharFromPixel (e.X' e.Y).Y];  			r.Breakpoint = false;  			Redraw ();  		}  	}  	else {  		View.Action = EditAction.SelectText;  		Caret.SetPos (Painter.CharFromPixel (0' e.Y));  		Selection.ClearSelection ();  		Caret.MoveDown (true);  		Redraw ();  	}  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox,EditViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\EditView\EditViewControl.cs,OnMouseDown,The following statement contains a magic number: if (e.X > View.TextMargin - 8) {  	if (!IsOverSelection (e.X' e.Y)) {  		//selecting  		if (e.Button == MouseButtons.Left) {  			if (!shift) {  				TextPoint tp = pos;  				Word w = Document.GetWordFromPos (tp);  				if (w != null && w.Pattern != null && w.Pattern.Category != null) {  					var pe = new WordMouseEventArgs {  						Pattern = w.Pattern'  						Button = e.Button'  						Cursor = Cursors.Hand'  						Word = w  					};  					_SyntaxBox.OnWordMouseDown (ref pe);  					Cursor = pe.Cursor;  					return;  				}  				View.Action = EditAction.SelectText;  				Caret.SetPos (pos);  				Selection.ClearSelection ();  				Caret.Blink = true;  				Redraw ();  			}  			else {  				View.Action = EditAction.SelectText;  				Caret.SetPos (pos);  				Selection.MakeSelection ();  				Caret.Blink = true;  				Redraw ();  			}  		}  	}  }  else {  	if (row != null)  		if (row.expansion_StartSpan != null) {  			Caret.SetPos (new TextPoint (0' pos.Y));  			Selection.ClearSelection ();  			Document.ToggleRow (row);  			Redraw ();  		}  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox,EditViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\EditView\EditViewControl.cs,OnMouseMove,The following statement contains a magic number: if (e.X >= View.TextMargin - 7) {  	rea.Area = RowArea.TextArea;  }  else if (e.X < View.GutterMarginWidth) {  	rea.Area = RowArea.GutterArea;  }  else if (e.X < View.LineNumberMarginWidth + View.GutterMarginWidth) {  	rea.Area = RowArea.LineNumberArea;  }  else if (e.X < View.TextMargin - 7) {  	rea.Area = RowArea.FoldingArea;  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox,EditViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\EditView\EditViewControl.cs,OnMouseMove,The following statement contains a magic number: if (e.X >= View.TextMargin - 7) {  	rea.Area = RowArea.TextArea;  }  else if (e.X < View.GutterMarginWidth) {  	rea.Area = RowArea.GutterArea;  }  else if (e.X < View.LineNumberMarginWidth + View.GutterMarginWidth) {  	rea.Area = RowArea.LineNumberArea;  }  else if (e.X < View.TextMargin - 7) {  	rea.Area = RowArea.FoldingArea;  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox,EditViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\EditView\EditViewControl.cs,OnMouseMove,The following statement contains a magic number: if (e.X < View.GutterMarginWidth) {  	rea.Area = RowArea.GutterArea;  }  else if (e.X < View.LineNumberMarginWidth + View.GutterMarginWidth) {  	rea.Area = RowArea.LineNumberArea;  }  else if (e.X < View.TextMargin - 7) {  	rea.Area = RowArea.FoldingArea;  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox,EditViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\EditView\EditViewControl.cs,OnMouseMove,The following statement contains a magic number: if (e.X < View.LineNumberMarginWidth + View.GutterMarginWidth) {  	rea.Area = RowArea.LineNumberArea;  }  else if (e.X < View.TextMargin - 7) {  	rea.Area = RowArea.FoldingArea;  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox,EditViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\EditView\EditViewControl.cs,OnMouseMove,The following statement contains a magic number: if (e.X < View.TextMargin - 7) {  	rea.Area = RowArea.FoldingArea;  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox,EditViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\EditView\EditViewControl.cs,OnMouseMove,The following statement contains a magic number: try {  	if (Document != null) {  		if (e.Button == MouseButtons.Left) {  			if (View.Action == EditAction.SelectText) {  				//Selection ACTIONS!!!!!!!!!!!!!!  				Caret.Blink = true;  				Caret.SetPos (pos);  				if (e.X <= View.TotalMarginWidth)  					Caret.MoveDown (true);  				Caret.CropPosition ();  				Selection.MakeSelection ();  				ScrollIntoView ();  				Redraw ();  			}  			else if (View.Action == EditAction.None) {  				if (IsOverSelection (e.X' e.Y)) {  					BeginDragDrop ();  				}  			}  			else if (View.Action == EditAction.DragText) {  			}  		}  		else {  			TextPoint p = pos;  			Row r = Document [p.Y];  			bool DidShow = false;  			if (r != null) {  				if (e.X >= r.Expansion_PixelEnd && r.IsCollapsed) {  					// ROB: Added check for Collapsed tooltips.  					if (CollapsedBlockTooltipsEnabled) {  						if (r.expansion_StartSpan != null) {  							if (r.expansion_StartSpan.StartRow != null && r.expansion_StartSpan.EndRow != null && r.expansion_StartSpan.Expanded == false) {  								string t = "";  								int j = 0;  								for (int i = r.expansion_StartSpan.StartRow.Index; i <= r.expansion_StartSpan.EndRow.Index; i++) {  									if (j > 0)  										t += "\n";  									Row tmp = Document [i];  									string tmpstr = tmp.Text.Replace ("\t"' "    ");  									t += tmpstr;  									if (j > 20) {  										t += "...";  										break;  									}  									j++;  								}  								//tooltip.res  								tooltip.InitialDelay = TooltipDelay;  								if (tooltip.GetToolTip (this) != t)  									tooltip.SetToolTip (this' t);  								tooltip.Active = true;  								DidShow = true;  							}  						}  					}  				}  				else {  					Word w = Document.GetFormatWordFromPos (p);  					if (w != null) {  						if (w.InfoTip != null) {  							tooltip.InitialDelay = TooltipDelay;  							if (tooltip.GetToolTip (this) != w.InfoTip)  								tooltip.SetToolTip (this' w.InfoTip);  							tooltip.Active = true;  							DidShow = true;  						}  					}  				}  			}  			if (tooltip != null) {  				if (!DidShow)  					tooltip.SetToolTip (this' "");  			}  		}  		SetMouseCursor (e.X' e.Y);  		base.OnMouseMove (e);  	}  }  catch {  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox,EditViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\EditView\EditViewControl.cs,OnMouseMove,The following statement contains a magic number: if (Document != null) {  	if (e.Button == MouseButtons.Left) {  		if (View.Action == EditAction.SelectText) {  			//Selection ACTIONS!!!!!!!!!!!!!!  			Caret.Blink = true;  			Caret.SetPos (pos);  			if (e.X <= View.TotalMarginWidth)  				Caret.MoveDown (true);  			Caret.CropPosition ();  			Selection.MakeSelection ();  			ScrollIntoView ();  			Redraw ();  		}  		else if (View.Action == EditAction.None) {  			if (IsOverSelection (e.X' e.Y)) {  				BeginDragDrop ();  			}  		}  		else if (View.Action == EditAction.DragText) {  		}  	}  	else {  		TextPoint p = pos;  		Row r = Document [p.Y];  		bool DidShow = false;  		if (r != null) {  			if (e.X >= r.Expansion_PixelEnd && r.IsCollapsed) {  				// ROB: Added check for Collapsed tooltips.  				if (CollapsedBlockTooltipsEnabled) {  					if (r.expansion_StartSpan != null) {  						if (r.expansion_StartSpan.StartRow != null && r.expansion_StartSpan.EndRow != null && r.expansion_StartSpan.Expanded == false) {  							string t = "";  							int j = 0;  							for (int i = r.expansion_StartSpan.StartRow.Index; i <= r.expansion_StartSpan.EndRow.Index; i++) {  								if (j > 0)  									t += "\n";  								Row tmp = Document [i];  								string tmpstr = tmp.Text.Replace ("\t"' "    ");  								t += tmpstr;  								if (j > 20) {  									t += "...";  									break;  								}  								j++;  							}  							//tooltip.res  							tooltip.InitialDelay = TooltipDelay;  							if (tooltip.GetToolTip (this) != t)  								tooltip.SetToolTip (this' t);  							tooltip.Active = true;  							DidShow = true;  						}  					}  				}  			}  			else {  				Word w = Document.GetFormatWordFromPos (p);  				if (w != null) {  					if (w.InfoTip != null) {  						tooltip.InitialDelay = TooltipDelay;  						if (tooltip.GetToolTip (this) != w.InfoTip)  							tooltip.SetToolTip (this' w.InfoTip);  						tooltip.Active = true;  						DidShow = true;  					}  				}  			}  		}  		if (tooltip != null) {  			if (!DidShow)  				tooltip.SetToolTip (this' "");  		}  	}  	SetMouseCursor (e.X' e.Y);  	base.OnMouseMove (e);  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox,EditViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\EditView\EditViewControl.cs,OnMouseMove,The following statement contains a magic number: if (e.Button == MouseButtons.Left) {  	if (View.Action == EditAction.SelectText) {  		//Selection ACTIONS!!!!!!!!!!!!!!  		Caret.Blink = true;  		Caret.SetPos (pos);  		if (e.X <= View.TotalMarginWidth)  			Caret.MoveDown (true);  		Caret.CropPosition ();  		Selection.MakeSelection ();  		ScrollIntoView ();  		Redraw ();  	}  	else if (View.Action == EditAction.None) {  		if (IsOverSelection (e.X' e.Y)) {  			BeginDragDrop ();  		}  	}  	else if (View.Action == EditAction.DragText) {  	}  }  else {  	TextPoint p = pos;  	Row r = Document [p.Y];  	bool DidShow = false;  	if (r != null) {  		if (e.X >= r.Expansion_PixelEnd && r.IsCollapsed) {  			// ROB: Added check for Collapsed tooltips.  			if (CollapsedBlockTooltipsEnabled) {  				if (r.expansion_StartSpan != null) {  					if (r.expansion_StartSpan.StartRow != null && r.expansion_StartSpan.EndRow != null && r.expansion_StartSpan.Expanded == false) {  						string t = "";  						int j = 0;  						for (int i = r.expansion_StartSpan.StartRow.Index; i <= r.expansion_StartSpan.EndRow.Index; i++) {  							if (j > 0)  								t += "\n";  							Row tmp = Document [i];  							string tmpstr = tmp.Text.Replace ("\t"' "    ");  							t += tmpstr;  							if (j > 20) {  								t += "...";  								break;  							}  							j++;  						}  						//tooltip.res  						tooltip.InitialDelay = TooltipDelay;  						if (tooltip.GetToolTip (this) != t)  							tooltip.SetToolTip (this' t);  						tooltip.Active = true;  						DidShow = true;  					}  				}  			}  		}  		else {  			Word w = Document.GetFormatWordFromPos (p);  			if (w != null) {  				if (w.InfoTip != null) {  					tooltip.InitialDelay = TooltipDelay;  					if (tooltip.GetToolTip (this) != w.InfoTip)  						tooltip.SetToolTip (this' w.InfoTip);  					tooltip.Active = true;  					DidShow = true;  				}  			}  		}  	}  	if (tooltip != null) {  		if (!DidShow)  			tooltip.SetToolTip (this' "");  	}  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox,EditViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\EditView\EditViewControl.cs,OnMouseMove,The following statement contains a magic number: if (r != null) {  	if (e.X >= r.Expansion_PixelEnd && r.IsCollapsed) {  		// ROB: Added check for Collapsed tooltips.  		if (CollapsedBlockTooltipsEnabled) {  			if (r.expansion_StartSpan != null) {  				if (r.expansion_StartSpan.StartRow != null && r.expansion_StartSpan.EndRow != null && r.expansion_StartSpan.Expanded == false) {  					string t = "";  					int j = 0;  					for (int i = r.expansion_StartSpan.StartRow.Index; i <= r.expansion_StartSpan.EndRow.Index; i++) {  						if (j > 0)  							t += "\n";  						Row tmp = Document [i];  						string tmpstr = tmp.Text.Replace ("\t"' "    ");  						t += tmpstr;  						if (j > 20) {  							t += "...";  							break;  						}  						j++;  					}  					//tooltip.res  					tooltip.InitialDelay = TooltipDelay;  					if (tooltip.GetToolTip (this) != t)  						tooltip.SetToolTip (this' t);  					tooltip.Active = true;  					DidShow = true;  				}  			}  		}  	}  	else {  		Word w = Document.GetFormatWordFromPos (p);  		if (w != null) {  			if (w.InfoTip != null) {  				tooltip.InitialDelay = TooltipDelay;  				if (tooltip.GetToolTip (this) != w.InfoTip)  					tooltip.SetToolTip (this' w.InfoTip);  				tooltip.Active = true;  				DidShow = true;  			}  		}  	}  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox,EditViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\EditView\EditViewControl.cs,OnMouseMove,The following statement contains a magic number: if (e.X >= r.Expansion_PixelEnd && r.IsCollapsed) {  	// ROB: Added check for Collapsed tooltips.  	if (CollapsedBlockTooltipsEnabled) {  		if (r.expansion_StartSpan != null) {  			if (r.expansion_StartSpan.StartRow != null && r.expansion_StartSpan.EndRow != null && r.expansion_StartSpan.Expanded == false) {  				string t = "";  				int j = 0;  				for (int i = r.expansion_StartSpan.StartRow.Index; i <= r.expansion_StartSpan.EndRow.Index; i++) {  					if (j > 0)  						t += "\n";  					Row tmp = Document [i];  					string tmpstr = tmp.Text.Replace ("\t"' "    ");  					t += tmpstr;  					if (j > 20) {  						t += "...";  						break;  					}  					j++;  				}  				//tooltip.res  				tooltip.InitialDelay = TooltipDelay;  				if (tooltip.GetToolTip (this) != t)  					tooltip.SetToolTip (this' t);  				tooltip.Active = true;  				DidShow = true;  			}  		}  	}  }  else {  	Word w = Document.GetFormatWordFromPos (p);  	if (w != null) {  		if (w.InfoTip != null) {  			tooltip.InitialDelay = TooltipDelay;  			if (tooltip.GetToolTip (this) != w.InfoTip)  				tooltip.SetToolTip (this' w.InfoTip);  			tooltip.Active = true;  			DidShow = true;  		}  	}  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox,EditViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\EditView\EditViewControl.cs,OnMouseMove,The following statement contains a magic number: if (CollapsedBlockTooltipsEnabled) {  	if (r.expansion_StartSpan != null) {  		if (r.expansion_StartSpan.StartRow != null && r.expansion_StartSpan.EndRow != null && r.expansion_StartSpan.Expanded == false) {  			string t = "";  			int j = 0;  			for (int i = r.expansion_StartSpan.StartRow.Index; i <= r.expansion_StartSpan.EndRow.Index; i++) {  				if (j > 0)  					t += "\n";  				Row tmp = Document [i];  				string tmpstr = tmp.Text.Replace ("\t"' "    ");  				t += tmpstr;  				if (j > 20) {  					t += "...";  					break;  				}  				j++;  			}  			//tooltip.res  			tooltip.InitialDelay = TooltipDelay;  			if (tooltip.GetToolTip (this) != t)  				tooltip.SetToolTip (this' t);  			tooltip.Active = true;  			DidShow = true;  		}  	}  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox,EditViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\EditView\EditViewControl.cs,OnMouseMove,The following statement contains a magic number: if (r.expansion_StartSpan != null) {  	if (r.expansion_StartSpan.StartRow != null && r.expansion_StartSpan.EndRow != null && r.expansion_StartSpan.Expanded == false) {  		string t = "";  		int j = 0;  		for (int i = r.expansion_StartSpan.StartRow.Index; i <= r.expansion_StartSpan.EndRow.Index; i++) {  			if (j > 0)  				t += "\n";  			Row tmp = Document [i];  			string tmpstr = tmp.Text.Replace ("\t"' "    ");  			t += tmpstr;  			if (j > 20) {  				t += "...";  				break;  			}  			j++;  		}  		//tooltip.res  		tooltip.InitialDelay = TooltipDelay;  		if (tooltip.GetToolTip (this) != t)  			tooltip.SetToolTip (this' t);  		tooltip.Active = true;  		DidShow = true;  	}  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox,EditViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\EditView\EditViewControl.cs,OnMouseMove,The following statement contains a magic number: if (r.expansion_StartSpan.StartRow != null && r.expansion_StartSpan.EndRow != null && r.expansion_StartSpan.Expanded == false) {  	string t = "";  	int j = 0;  	for (int i = r.expansion_StartSpan.StartRow.Index; i <= r.expansion_StartSpan.EndRow.Index; i++) {  		if (j > 0)  			t += "\n";  		Row tmp = Document [i];  		string tmpstr = tmp.Text.Replace ("\t"' "    ");  		t += tmpstr;  		if (j > 20) {  			t += "...";  			break;  		}  		j++;  	}  	//tooltip.res  	tooltip.InitialDelay = TooltipDelay;  	if (tooltip.GetToolTip (this) != t)  		tooltip.SetToolTip (this' t);  	tooltip.Active = true;  	DidShow = true;  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox,EditViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\EditView\EditViewControl.cs,OnMouseMove,The following statement contains a magic number: for (int i = r.expansion_StartSpan.StartRow.Index; i <= r.expansion_StartSpan.EndRow.Index; i++) {  	if (j > 0)  		t += "\n";  	Row tmp = Document [i];  	string tmpstr = tmp.Text.Replace ("\t"' "    ");  	t += tmpstr;  	if (j > 20) {  		t += "...";  		break;  	}  	j++;  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox,EditViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\EditView\EditViewControl.cs,OnMouseMove,The following statement contains a magic number: if (j > 20) {  	t += "...";  	break;  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox,EditViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\EditView\EditViewControl.cs,OnMouseUp,The following statement contains a magic number: if (e.X >= View.TextMargin - 7) {  	rea.Area = RowArea.TextArea;  }  else if (e.X < View.GutterMarginWidth) {  	rea.Area = RowArea.GutterArea;  }  else if (e.X < View.LineNumberMarginWidth + View.GutterMarginWidth) {  	rea.Area = RowArea.LineNumberArea;  }  else if (e.X < View.TextMargin - 7) {  	rea.Area = RowArea.FoldingArea;  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox,EditViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\EditView\EditViewControl.cs,OnMouseUp,The following statement contains a magic number: if (e.X >= View.TextMargin - 7) {  	rea.Area = RowArea.TextArea;  }  else if (e.X < View.GutterMarginWidth) {  	rea.Area = RowArea.GutterArea;  }  else if (e.X < View.LineNumberMarginWidth + View.GutterMarginWidth) {  	rea.Area = RowArea.LineNumberArea;  }  else if (e.X < View.TextMargin - 7) {  	rea.Area = RowArea.FoldingArea;  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox,EditViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\EditView\EditViewControl.cs,OnMouseUp,The following statement contains a magic number: if (e.X < View.GutterMarginWidth) {  	rea.Area = RowArea.GutterArea;  }  else if (e.X < View.LineNumberMarginWidth + View.GutterMarginWidth) {  	rea.Area = RowArea.LineNumberArea;  }  else if (e.X < View.TextMargin - 7) {  	rea.Area = RowArea.FoldingArea;  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox,EditViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\EditView\EditViewControl.cs,OnMouseUp,The following statement contains a magic number: if (e.X < View.LineNumberMarginWidth + View.GutterMarginWidth) {  	rea.Area = RowArea.LineNumberArea;  }  else if (e.X < View.TextMargin - 7) {  	rea.Area = RowArea.FoldingArea;  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox,EditViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\EditView\EditViewControl.cs,OnMouseUp,The following statement contains a magic number: if (e.X < View.TextMargin - 7) {  	rea.Area = RowArea.FoldingArea;  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox,EditViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\EditView\EditViewControl.cs,OnMouseWheel,The following statement contains a magic number: ScrollScreen (-(e.Delta / 120) * l);  
Magic Number,Alsing.Windows.Forms.SyntaxBox,EditViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\EditView\EditViewControl.cs,OnDragOver,The following statement contains a magic number: if (!ReadOnly) {  	if (Document != null) {  		View.Action = EditAction.DragText;  		Point pt = PointToClient (new Point (drgevent.X' drgevent.Y));  		int x = pt.X;  		int y = pt.Y;  		//	drgevent.Effect = DragDropEffects.All  ;  		//Caret.Position = Painter.CharFromPixel(x'y);  		drgevent.Effect = (drgevent.KeyState & 8) == 8 ? DragDropEffects.Copy : DragDropEffects.Move;  		Caret.SetPos (Painter.CharFromPixel (x' y));  		Redraw ();  	}  }  else {  	drgevent.Effect = DragDropEffects.None;  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox,EditViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\EditView\EditViewControl.cs,OnDragOver,The following statement contains a magic number: if (!ReadOnly) {  	if (Document != null) {  		View.Action = EditAction.DragText;  		Point pt = PointToClient (new Point (drgevent.X' drgevent.Y));  		int x = pt.X;  		int y = pt.Y;  		//	drgevent.Effect = DragDropEffects.All  ;  		//Caret.Position = Painter.CharFromPixel(x'y);  		drgevent.Effect = (drgevent.KeyState & 8) == 8 ? DragDropEffects.Copy : DragDropEffects.Move;  		Caret.SetPos (Painter.CharFromPixel (x' y));  		Redraw ();  	}  }  else {  	drgevent.Effect = DragDropEffects.None;  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox,EditViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\EditView\EditViewControl.cs,OnDragOver,The following statement contains a magic number: if (Document != null) {  	View.Action = EditAction.DragText;  	Point pt = PointToClient (new Point (drgevent.X' drgevent.Y));  	int x = pt.X;  	int y = pt.Y;  	//	drgevent.Effect = DragDropEffects.All  ;  	//Caret.Position = Painter.CharFromPixel(x'y);  	drgevent.Effect = (drgevent.KeyState & 8) == 8 ? DragDropEffects.Copy : DragDropEffects.Move;  	Caret.SetPos (Painter.CharFromPixel (x' y));  	Redraw ();  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox,EditViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\EditView\EditViewControl.cs,OnDragOver,The following statement contains a magic number: if (Document != null) {  	View.Action = EditAction.DragText;  	Point pt = PointToClient (new Point (drgevent.X' drgevent.Y));  	int x = pt.X;  	int y = pt.Y;  	//	drgevent.Effect = DragDropEffects.All  ;  	//Caret.Position = Painter.CharFromPixel(x'y);  	drgevent.Effect = (drgevent.KeyState & 8) == 8 ? DragDropEffects.Copy : DragDropEffects.Move;  	Caret.SetPos (Painter.CharFromPixel (x' y));  	Redraw ();  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox,EditViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\EditView\EditViewControl.cs,OnDragOver,The following statement contains a magic number: drgevent.Effect = (drgevent.KeyState & 8) == 8 ? DragDropEffects.Copy : DragDropEffects.Move;  
Magic Number,Alsing.Windows.Forms.SyntaxBox,EditViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\EditView\EditViewControl.cs,OnDragOver,The following statement contains a magic number: drgevent.Effect = (drgevent.KeyState & 8) == 8 ? DragDropEffects.Copy : DragDropEffects.Move;  
Magic Number,Alsing.Windows.Forms.SyntaxBox,EditViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\EditView\EditViewControl.cs,OnDragDrop,The following statement contains a magic number: if (!ReadOnly) {  	if (Document != null) {  		View.Action = EditAction.None;  		int SelStart = Selection.LogicalSelStart;  		int DropStart = Document.PointToIntPos (Caret.Position);  		string s = drgevent.Data.GetData (typeof(string)).ToString ();  		//int SelLen=s.Replace ("\r\n"'"\n").Length ;  		int SelLen = s.Length;  		if (DropStart >= SelStart && DropStart <= SelStart + Math.Abs (Selection.SelLength))  			DropStart = SelStart;  		else if (DropStart >= SelStart + SelLen)  			DropStart -= SelLen;  		Document.StartUndoCapture ();  		if ((drgevent.KeyState & 8) == 0) {  			_SyntaxBox.Selection.DeleteSelection ();  			Caret.Position = Document.IntPosToPoint (DropStart);  		}  		Document.InsertText (s' Caret.Position.X' Caret.Position.Y);  		Document.EndUndoCapture ();  		Selection.SelStart = Document.PointToIntPos (Caret.Position);  		Selection.SelLength = SelLen;  		Document.ResetVisibleRows ();  		ScrollIntoView ();  		Redraw ();  		drgevent.Effect = DragDropEffects.All;  		if (ParseOnPaste)  			Document.ParseAll (true);  		View.Action = EditAction.None;  	}  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox,EditViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\EditView\EditViewControl.cs,OnDragDrop,The following statement contains a magic number: if (Document != null) {  	View.Action = EditAction.None;  	int SelStart = Selection.LogicalSelStart;  	int DropStart = Document.PointToIntPos (Caret.Position);  	string s = drgevent.Data.GetData (typeof(string)).ToString ();  	//int SelLen=s.Replace ("\r\n"'"\n").Length ;  	int SelLen = s.Length;  	if (DropStart >= SelStart && DropStart <= SelStart + Math.Abs (Selection.SelLength))  		DropStart = SelStart;  	else if (DropStart >= SelStart + SelLen)  		DropStart -= SelLen;  	Document.StartUndoCapture ();  	if ((drgevent.KeyState & 8) == 0) {  		_SyntaxBox.Selection.DeleteSelection ();  		Caret.Position = Document.IntPosToPoint (DropStart);  	}  	Document.InsertText (s' Caret.Position.X' Caret.Position.Y);  	Document.EndUndoCapture ();  	Selection.SelStart = Document.PointToIntPos (Caret.Position);  	Selection.SelLength = SelLen;  	Document.ResetVisibleRows ();  	ScrollIntoView ();  	Redraw ();  	drgevent.Effect = DragDropEffects.All;  	if (ParseOnPaste)  		Document.ParseAll (true);  	View.Action = EditAction.None;  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox,EditViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\EditView\EditViewControl.cs,OnDragDrop,The following statement contains a magic number: if ((drgevent.KeyState & 8) == 0) {  	_SyntaxBox.Selection.DeleteSelection ();  	Caret.Position = Document.IntPosToPoint (DropStart);  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox,EditViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\EditView\EditViewControl.cs,OnDoubleClick,The following statement contains a magic number: if (MouseX >= View.TextMargin - 7) {  	rea.Area = RowArea.TextArea;  }  else if (MouseX < View.GutterMarginWidth) {  	rea.Area = RowArea.GutterArea;  }  else if (MouseX < View.LineNumberMarginWidth + View.GutterMarginWidth) {  	rea.Area = RowArea.LineNumberArea;  }  else if (MouseX < View.TextMargin - 7) {  	rea.Area = RowArea.FoldingArea;  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox,EditViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\EditView\EditViewControl.cs,OnDoubleClick,The following statement contains a magic number: if (MouseX >= View.TextMargin - 7) {  	rea.Area = RowArea.TextArea;  }  else if (MouseX < View.GutterMarginWidth) {  	rea.Area = RowArea.GutterArea;  }  else if (MouseX < View.LineNumberMarginWidth + View.GutterMarginWidth) {  	rea.Area = RowArea.LineNumberArea;  }  else if (MouseX < View.TextMargin - 7) {  	rea.Area = RowArea.FoldingArea;  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox,EditViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\EditView\EditViewControl.cs,OnDoubleClick,The following statement contains a magic number: if (MouseX < View.GutterMarginWidth) {  	rea.Area = RowArea.GutterArea;  }  else if (MouseX < View.LineNumberMarginWidth + View.GutterMarginWidth) {  	rea.Area = RowArea.LineNumberArea;  }  else if (MouseX < View.TextMargin - 7) {  	rea.Area = RowArea.FoldingArea;  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox,EditViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\EditView\EditViewControl.cs,OnDoubleClick,The following statement contains a magic number: if (MouseX < View.LineNumberMarginWidth + View.GutterMarginWidth) {  	rea.Area = RowArea.LineNumberArea;  }  else if (MouseX < View.TextMargin - 7) {  	rea.Area = RowArea.FoldingArea;  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox,EditViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\EditView\EditViewControl.cs,OnDoubleClick,The following statement contains a magic number: if (MouseX < View.TextMargin - 7) {  	rea.Area = RowArea.FoldingArea;  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox,EditViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\EditView\EditViewControl.cs,OnClick,The following statement contains a magic number: if (MouseX >= View.TextMargin - 7) {  	rea.Area = RowArea.TextArea;  }  else if (MouseX < View.GutterMarginWidth) {  	rea.Area = RowArea.GutterArea;  }  else if (MouseX < View.LineNumberMarginWidth + View.GutterMarginWidth) {  	rea.Area = RowArea.LineNumberArea;  }  else if (MouseX < View.TextMargin - 7) {  	rea.Area = RowArea.FoldingArea;  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox,EditViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\EditView\EditViewControl.cs,OnClick,The following statement contains a magic number: if (MouseX >= View.TextMargin - 7) {  	rea.Area = RowArea.TextArea;  }  else if (MouseX < View.GutterMarginWidth) {  	rea.Area = RowArea.GutterArea;  }  else if (MouseX < View.LineNumberMarginWidth + View.GutterMarginWidth) {  	rea.Area = RowArea.LineNumberArea;  }  else if (MouseX < View.TextMargin - 7) {  	rea.Area = RowArea.FoldingArea;  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox,EditViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\EditView\EditViewControl.cs,OnClick,The following statement contains a magic number: if (MouseX < View.GutterMarginWidth) {  	rea.Area = RowArea.GutterArea;  }  else if (MouseX < View.LineNumberMarginWidth + View.GutterMarginWidth) {  	rea.Area = RowArea.LineNumberArea;  }  else if (MouseX < View.TextMargin - 7) {  	rea.Area = RowArea.FoldingArea;  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox,EditViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\EditView\EditViewControl.cs,OnClick,The following statement contains a magic number: if (MouseX < View.LineNumberMarginWidth + View.GutterMarginWidth) {  	rea.Area = RowArea.LineNumberArea;  }  else if (MouseX < View.TextMargin - 7) {  	rea.Area = RowArea.FoldingArea;  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox,EditViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\EditView\EditViewControl.cs,OnClick,The following statement contains a magic number: if (MouseX < View.TextMargin - 7) {  	rea.Area = RowArea.FoldingArea;  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox,FindReplaceForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\Syntaxbox\Dialogs\FindReplace.cs,ShowFind,The following statement contains a magic number: Height = 160;  
Magic Number,Alsing.Windows.Forms.SyntaxBox,FindReplaceForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\Syntaxbox\Dialogs\FindReplace.cs,ShowReplace,The following statement contains a magic number: Height = 200;  
Magic Number,Alsing.Windows.Forms.SyntaxBox,FindReplaceForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\Syntaxbox\Dialogs\FindReplace.cs,InitializeComponent,The following statement contains a magic number: this.pnlButtons.Location = new System.Drawing.Point (400' 0);  
Magic Number,Alsing.Windows.Forms.SyntaxBox,FindReplaceForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\Syntaxbox\Dialogs\FindReplace.cs,InitializeComponent,The following statement contains a magic number: this.pnlButtons.Size = new System.Drawing.Size (96' 178);  
Magic Number,Alsing.Windows.Forms.SyntaxBox,FindReplaceForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\Syntaxbox\Dialogs\FindReplace.cs,InitializeComponent,The following statement contains a magic number: this.pnlButtons.Size = new System.Drawing.Size (96' 178);  
Magic Number,Alsing.Windows.Forms.SyntaxBox,FindReplaceForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\Syntaxbox\Dialogs\FindReplace.cs,InitializeComponent,The following statement contains a magic number: this.panel3.Location = new System.Drawing.Point (0' 96);  
Magic Number,Alsing.Windows.Forms.SyntaxBox,FindReplaceForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\Syntaxbox\Dialogs\FindReplace.cs,InitializeComponent,The following statement contains a magic number: this.panel3.Size = new System.Drawing.Size (96' 82);  
Magic Number,Alsing.Windows.Forms.SyntaxBox,FindReplaceForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\Syntaxbox\Dialogs\FindReplace.cs,InitializeComponent,The following statement contains a magic number: this.panel3.Size = new System.Drawing.Size (96' 82);  
Magic Number,Alsing.Windows.Forms.SyntaxBox,FindReplaceForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\Syntaxbox\Dialogs\FindReplace.cs,InitializeComponent,The following statement contains a magic number: this.panel3.TabIndex = 4;  
Magic Number,Alsing.Windows.Forms.SyntaxBox,FindReplaceForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\Syntaxbox\Dialogs\FindReplace.cs,InitializeComponent,The following statement contains a magic number: this.btnClose.Location = new System.Drawing.Point (8' 40);  
Magic Number,Alsing.Windows.Forms.SyntaxBox,FindReplaceForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\Syntaxbox\Dialogs\FindReplace.cs,InitializeComponent,The following statement contains a magic number: this.btnClose.Location = new System.Drawing.Point (8' 40);  
Magic Number,Alsing.Windows.Forms.SyntaxBox,FindReplaceForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\Syntaxbox\Dialogs\FindReplace.cs,InitializeComponent,The following statement contains a magic number: this.btnClose.Size = new System.Drawing.Size (80' 24);  
Magic Number,Alsing.Windows.Forms.SyntaxBox,FindReplaceForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\Syntaxbox\Dialogs\FindReplace.cs,InitializeComponent,The following statement contains a magic number: this.btnClose.Size = new System.Drawing.Size (80' 24);  
Magic Number,Alsing.Windows.Forms.SyntaxBox,FindReplaceForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\Syntaxbox\Dialogs\FindReplace.cs,InitializeComponent,The following statement contains a magic number: this.btnClose.TabIndex = 3;  
Magic Number,Alsing.Windows.Forms.SyntaxBox,FindReplaceForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\Syntaxbox\Dialogs\FindReplace.cs,InitializeComponent,The following statement contains a magic number: this.btnMarkAll.Location = new System.Drawing.Point (8' 8);  
Magic Number,Alsing.Windows.Forms.SyntaxBox,FindReplaceForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\Syntaxbox\Dialogs\FindReplace.cs,InitializeComponent,The following statement contains a magic number: this.btnMarkAll.Location = new System.Drawing.Point (8' 8);  
Magic Number,Alsing.Windows.Forms.SyntaxBox,FindReplaceForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\Syntaxbox\Dialogs\FindReplace.cs,InitializeComponent,The following statement contains a magic number: this.btnMarkAll.Size = new System.Drawing.Size (80' 24);  
Magic Number,Alsing.Windows.Forms.SyntaxBox,FindReplaceForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\Syntaxbox\Dialogs\FindReplace.cs,InitializeComponent,The following statement contains a magic number: this.btnMarkAll.Size = new System.Drawing.Size (80' 24);  
Magic Number,Alsing.Windows.Forms.SyntaxBox,FindReplaceForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\Syntaxbox\Dialogs\FindReplace.cs,InitializeComponent,The following statement contains a magic number: this.btnMarkAll.TabIndex = 2;  
Magic Number,Alsing.Windows.Forms.SyntaxBox,FindReplaceForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\Syntaxbox\Dialogs\FindReplace.cs,InitializeComponent,The following statement contains a magic number: this.pnlReplaceButtons.Location = new System.Drawing.Point (0' 64);  
Magic Number,Alsing.Windows.Forms.SyntaxBox,FindReplaceForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\Syntaxbox\Dialogs\FindReplace.cs,InitializeComponent,The following statement contains a magic number: this.pnlReplaceButtons.Size = new System.Drawing.Size (96' 32);  
Magic Number,Alsing.Windows.Forms.SyntaxBox,FindReplaceForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\Syntaxbox\Dialogs\FindReplace.cs,InitializeComponent,The following statement contains a magic number: this.pnlReplaceButtons.Size = new System.Drawing.Size (96' 32);  
Magic Number,Alsing.Windows.Forms.SyntaxBox,FindReplaceForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\Syntaxbox\Dialogs\FindReplace.cs,InitializeComponent,The following statement contains a magic number: this.pnlReplaceButtons.TabIndex = 3;  
Magic Number,Alsing.Windows.Forms.SyntaxBox,FindReplaceForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\Syntaxbox\Dialogs\FindReplace.cs,InitializeComponent,The following statement contains a magic number: this.btnReplaceAll.Location = new System.Drawing.Point (8' 8);  
Magic Number,Alsing.Windows.Forms.SyntaxBox,FindReplaceForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\Syntaxbox\Dialogs\FindReplace.cs,InitializeComponent,The following statement contains a magic number: this.btnReplaceAll.Location = new System.Drawing.Point (8' 8);  
Magic Number,Alsing.Windows.Forms.SyntaxBox,FindReplaceForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\Syntaxbox\Dialogs\FindReplace.cs,InitializeComponent,The following statement contains a magic number: this.btnReplaceAll.Size = new System.Drawing.Size (80' 24);  
Magic Number,Alsing.Windows.Forms.SyntaxBox,FindReplaceForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\Syntaxbox\Dialogs\FindReplace.cs,InitializeComponent,The following statement contains a magic number: this.btnReplaceAll.Size = new System.Drawing.Size (80' 24);  
Magic Number,Alsing.Windows.Forms.SyntaxBox,FindReplaceForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\Syntaxbox\Dialogs\FindReplace.cs,InitializeComponent,The following statement contains a magic number: this.btnReplaceAll.TabIndex = 2;  
Magic Number,Alsing.Windows.Forms.SyntaxBox,FindReplaceForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\Syntaxbox\Dialogs\FindReplace.cs,InitializeComponent,The following statement contains a magic number: this.panel1.Size = new System.Drawing.Size (96' 64);  
Magic Number,Alsing.Windows.Forms.SyntaxBox,FindReplaceForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\Syntaxbox\Dialogs\FindReplace.cs,InitializeComponent,The following statement contains a magic number: this.panel1.Size = new System.Drawing.Size (96' 64);  
Magic Number,Alsing.Windows.Forms.SyntaxBox,FindReplaceForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\Syntaxbox\Dialogs\FindReplace.cs,InitializeComponent,The following statement contains a magic number: this.panel1.TabIndex = 2;  
Magic Number,Alsing.Windows.Forms.SyntaxBox,FindReplaceForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\Syntaxbox\Dialogs\FindReplace.cs,InitializeComponent,The following statement contains a magic number: this.btnDoReplace.Location = new System.Drawing.Point (8' 40);  
Magic Number,Alsing.Windows.Forms.SyntaxBox,FindReplaceForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\Syntaxbox\Dialogs\FindReplace.cs,InitializeComponent,The following statement contains a magic number: this.btnDoReplace.Location = new System.Drawing.Point (8' 40);  
Magic Number,Alsing.Windows.Forms.SyntaxBox,FindReplaceForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\Syntaxbox\Dialogs\FindReplace.cs,InitializeComponent,The following statement contains a magic number: this.btnDoReplace.Size = new System.Drawing.Size (80' 24);  
Magic Number,Alsing.Windows.Forms.SyntaxBox,FindReplaceForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\Syntaxbox\Dialogs\FindReplace.cs,InitializeComponent,The following statement contains a magic number: this.btnDoReplace.Size = new System.Drawing.Size (80' 24);  
Magic Number,Alsing.Windows.Forms.SyntaxBox,FindReplaceForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\Syntaxbox\Dialogs\FindReplace.cs,InitializeComponent,The following statement contains a magic number: this.btnDoReplace.TabIndex = 4;  
Magic Number,Alsing.Windows.Forms.SyntaxBox,FindReplaceForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\Syntaxbox\Dialogs\FindReplace.cs,InitializeComponent,The following statement contains a magic number: this.btnReplace.Location = new System.Drawing.Point (8' 40);  
Magic Number,Alsing.Windows.Forms.SyntaxBox,FindReplaceForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\Syntaxbox\Dialogs\FindReplace.cs,InitializeComponent,The following statement contains a magic number: this.btnReplace.Location = new System.Drawing.Point (8' 40);  
Magic Number,Alsing.Windows.Forms.SyntaxBox,FindReplaceForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\Syntaxbox\Dialogs\FindReplace.cs,InitializeComponent,The following statement contains a magic number: this.btnReplace.Size = new System.Drawing.Size (80' 24);  
Magic Number,Alsing.Windows.Forms.SyntaxBox,FindReplaceForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\Syntaxbox\Dialogs\FindReplace.cs,InitializeComponent,The following statement contains a magic number: this.btnReplace.Size = new System.Drawing.Size (80' 24);  
Magic Number,Alsing.Windows.Forms.SyntaxBox,FindReplaceForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\Syntaxbox\Dialogs\FindReplace.cs,InitializeComponent,The following statement contains a magic number: this.btnReplace.TabIndex = 3;  
Magic Number,Alsing.Windows.Forms.SyntaxBox,FindReplaceForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\Syntaxbox\Dialogs\FindReplace.cs,InitializeComponent,The following statement contains a magic number: this.btnFind.Location = new System.Drawing.Point (8' 8);  
Magic Number,Alsing.Windows.Forms.SyntaxBox,FindReplaceForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\Syntaxbox\Dialogs\FindReplace.cs,InitializeComponent,The following statement contains a magic number: this.btnFind.Location = new System.Drawing.Point (8' 8);  
Magic Number,Alsing.Windows.Forms.SyntaxBox,FindReplaceForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\Syntaxbox\Dialogs\FindReplace.cs,InitializeComponent,The following statement contains a magic number: this.btnFind.Size = new System.Drawing.Size (80' 24);  
Magic Number,Alsing.Windows.Forms.SyntaxBox,FindReplaceForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\Syntaxbox\Dialogs\FindReplace.cs,InitializeComponent,The following statement contains a magic number: this.btnFind.Size = new System.Drawing.Size (80' 24);  
Magic Number,Alsing.Windows.Forms.SyntaxBox,FindReplaceForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\Syntaxbox\Dialogs\FindReplace.cs,InitializeComponent,The following statement contains a magic number: this.btnFind.TabIndex = 2;  
Magic Number,Alsing.Windows.Forms.SyntaxBox,FindReplaceForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\Syntaxbox\Dialogs\FindReplace.cs,InitializeComponent,The following statement contains a magic number: this.pnlFind.Size = new System.Drawing.Size (400' 40);  
Magic Number,Alsing.Windows.Forms.SyntaxBox,FindReplaceForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\Syntaxbox\Dialogs\FindReplace.cs,InitializeComponent,The following statement contains a magic number: this.pnlFind.Size = new System.Drawing.Size (400' 40);  
Magic Number,Alsing.Windows.Forms.SyntaxBox,FindReplaceForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\Syntaxbox\Dialogs\FindReplace.cs,InitializeComponent,The following statement contains a magic number: this.cboFind.Location = new System.Drawing.Point (104' 8);  
Magic Number,Alsing.Windows.Forms.SyntaxBox,FindReplaceForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\Syntaxbox\Dialogs\FindReplace.cs,InitializeComponent,The following statement contains a magic number: this.cboFind.Location = new System.Drawing.Point (104' 8);  
Magic Number,Alsing.Windows.Forms.SyntaxBox,FindReplaceForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\Syntaxbox\Dialogs\FindReplace.cs,InitializeComponent,The following statement contains a magic number: this.cboFind.Size = new System.Drawing.Size (288' 21);  
Magic Number,Alsing.Windows.Forms.SyntaxBox,FindReplaceForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\Syntaxbox\Dialogs\FindReplace.cs,InitializeComponent,The following statement contains a magic number: this.cboFind.Size = new System.Drawing.Size (288' 21);  
Magic Number,Alsing.Windows.Forms.SyntaxBox,FindReplaceForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\Syntaxbox\Dialogs\FindReplace.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point (8' 8);  
Magic Number,Alsing.Windows.Forms.SyntaxBox,FindReplaceForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\Syntaxbox\Dialogs\FindReplace.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point (8' 8);  
Magic Number,Alsing.Windows.Forms.SyntaxBox,FindReplaceForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\Syntaxbox\Dialogs\FindReplace.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size (96' 24);  
Magic Number,Alsing.Windows.Forms.SyntaxBox,FindReplaceForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\Syntaxbox\Dialogs\FindReplace.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size (96' 24);  
Magic Number,Alsing.Windows.Forms.SyntaxBox,FindReplaceForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\Syntaxbox\Dialogs\FindReplace.cs,InitializeComponent,The following statement contains a magic number: this.btnRegex1.Location = new System.Drawing.Point (368' 8);  
Magic Number,Alsing.Windows.Forms.SyntaxBox,FindReplaceForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\Syntaxbox\Dialogs\FindReplace.cs,InitializeComponent,The following statement contains a magic number: this.btnRegex1.Location = new System.Drawing.Point (368' 8);  
Magic Number,Alsing.Windows.Forms.SyntaxBox,FindReplaceForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\Syntaxbox\Dialogs\FindReplace.cs,InitializeComponent,The following statement contains a magic number: this.btnRegex1.Size = new System.Drawing.Size (21' 21);  
Magic Number,Alsing.Windows.Forms.SyntaxBox,FindReplaceForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\Syntaxbox\Dialogs\FindReplace.cs,InitializeComponent,The following statement contains a magic number: this.btnRegex1.Size = new System.Drawing.Size (21' 21);  
Magic Number,Alsing.Windows.Forms.SyntaxBox,FindReplaceForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\Syntaxbox\Dialogs\FindReplace.cs,InitializeComponent,The following statement contains a magic number: this.btnRegex1.TabIndex = 2;  
Magic Number,Alsing.Windows.Forms.SyntaxBox,FindReplaceForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\Syntaxbox\Dialogs\FindReplace.cs,InitializeComponent,The following statement contains a magic number: this.pnlReplace.Location = new System.Drawing.Point (0' 40);  
Magic Number,Alsing.Windows.Forms.SyntaxBox,FindReplaceForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\Syntaxbox\Dialogs\FindReplace.cs,InitializeComponent,The following statement contains a magic number: this.pnlReplace.Size = new System.Drawing.Size (400' 40);  
Magic Number,Alsing.Windows.Forms.SyntaxBox,FindReplaceForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\Syntaxbox\Dialogs\FindReplace.cs,InitializeComponent,The following statement contains a magic number: this.pnlReplace.Size = new System.Drawing.Size (400' 40);  
Magic Number,Alsing.Windows.Forms.SyntaxBox,FindReplaceForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\Syntaxbox\Dialogs\FindReplace.cs,InitializeComponent,The following statement contains a magic number: this.pnlReplace.TabIndex = 2;  
Magic Number,Alsing.Windows.Forms.SyntaxBox,FindReplaceForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\Syntaxbox\Dialogs\FindReplace.cs,InitializeComponent,The following statement contains a magic number: this.cboReplace.Location = new System.Drawing.Point (106' 8);  
Magic Number,Alsing.Windows.Forms.SyntaxBox,FindReplaceForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\Syntaxbox\Dialogs\FindReplace.cs,InitializeComponent,The following statement contains a magic number: this.cboReplace.Location = new System.Drawing.Point (106' 8);  
Magic Number,Alsing.Windows.Forms.SyntaxBox,FindReplaceForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\Syntaxbox\Dialogs\FindReplace.cs,InitializeComponent,The following statement contains a magic number: this.cboReplace.Size = new System.Drawing.Size (286' 21);  
Magic Number,Alsing.Windows.Forms.SyntaxBox,FindReplaceForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\Syntaxbox\Dialogs\FindReplace.cs,InitializeComponent,The following statement contains a magic number: this.cboReplace.Size = new System.Drawing.Size (286' 21);  
Magic Number,Alsing.Windows.Forms.SyntaxBox,FindReplaceForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\Syntaxbox\Dialogs\FindReplace.cs,InitializeComponent,The following statement contains a magic number: this.cboReplace.TabIndex = 4;  
Magic Number,Alsing.Windows.Forms.SyntaxBox,FindReplaceForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\Syntaxbox\Dialogs\FindReplace.cs,InitializeComponent,The following statement contains a magic number: this.label2.Location = new System.Drawing.Point (10' 8);  
Magic Number,Alsing.Windows.Forms.SyntaxBox,FindReplaceForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\Syntaxbox\Dialogs\FindReplace.cs,InitializeComponent,The following statement contains a magic number: this.label2.Location = new System.Drawing.Point (10' 8);  
Magic Number,Alsing.Windows.Forms.SyntaxBox,FindReplaceForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\Syntaxbox\Dialogs\FindReplace.cs,InitializeComponent,The following statement contains a magic number: this.label2.Size = new System.Drawing.Size (96' 24);  
Magic Number,Alsing.Windows.Forms.SyntaxBox,FindReplaceForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\Syntaxbox\Dialogs\FindReplace.cs,InitializeComponent,The following statement contains a magic number: this.label2.Size = new System.Drawing.Size (96' 24);  
Magic Number,Alsing.Windows.Forms.SyntaxBox,FindReplaceForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\Syntaxbox\Dialogs\FindReplace.cs,InitializeComponent,The following statement contains a magic number: this.label2.TabIndex = 3;  
Magic Number,Alsing.Windows.Forms.SyntaxBox,FindReplaceForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\Syntaxbox\Dialogs\FindReplace.cs,InitializeComponent,The following statement contains a magic number: this.button1.Location = new System.Drawing.Point (368' 8);  
Magic Number,Alsing.Windows.Forms.SyntaxBox,FindReplaceForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\Syntaxbox\Dialogs\FindReplace.cs,InitializeComponent,The following statement contains a magic number: this.button1.Location = new System.Drawing.Point (368' 8);  
Magic Number,Alsing.Windows.Forms.SyntaxBox,FindReplaceForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\Syntaxbox\Dialogs\FindReplace.cs,InitializeComponent,The following statement contains a magic number: this.button1.Size = new System.Drawing.Size (21' 21);  
Magic Number,Alsing.Windows.Forms.SyntaxBox,FindReplaceForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\Syntaxbox\Dialogs\FindReplace.cs,InitializeComponent,The following statement contains a magic number: this.button1.Size = new System.Drawing.Size (21' 21);  
Magic Number,Alsing.Windows.Forms.SyntaxBox,FindReplaceForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\Syntaxbox\Dialogs\FindReplace.cs,InitializeComponent,The following statement contains a magic number: this.button1.TabIndex = 5;  
Magic Number,Alsing.Windows.Forms.SyntaxBox,FindReplaceForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\Syntaxbox\Dialogs\FindReplace.cs,InitializeComponent,The following statement contains a magic number: this.pnlSettings.Location = new System.Drawing.Point (0' 80);  
Magic Number,Alsing.Windows.Forms.SyntaxBox,FindReplaceForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\Syntaxbox\Dialogs\FindReplace.cs,InitializeComponent,The following statement contains a magic number: this.pnlSettings.Size = new System.Drawing.Size (400' 98);  
Magic Number,Alsing.Windows.Forms.SyntaxBox,FindReplaceForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\Syntaxbox\Dialogs\FindReplace.cs,InitializeComponent,The following statement contains a magic number: this.pnlSettings.Size = new System.Drawing.Size (400' 98);  
Magic Number,Alsing.Windows.Forms.SyntaxBox,FindReplaceForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\Syntaxbox\Dialogs\FindReplace.cs,InitializeComponent,The following statement contains a magic number: this.pnlSettings.TabIndex = 3;  
Magic Number,Alsing.Windows.Forms.SyntaxBox,FindReplaceForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\Syntaxbox\Dialogs\FindReplace.cs,InitializeComponent,The following statement contains a magic number: this.groupBox1.Location = new System.Drawing.Point (8' 0);  
Magic Number,Alsing.Windows.Forms.SyntaxBox,FindReplaceForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\Syntaxbox\Dialogs\FindReplace.cs,InitializeComponent,The following statement contains a magic number: this.groupBox1.Size = new System.Drawing.Size (384' 88);  
Magic Number,Alsing.Windows.Forms.SyntaxBox,FindReplaceForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\Syntaxbox\Dialogs\FindReplace.cs,InitializeComponent,The following statement contains a magic number: this.groupBox1.Size = new System.Drawing.Size (384' 88);  
Magic Number,Alsing.Windows.Forms.SyntaxBox,FindReplaceForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\Syntaxbox\Dialogs\FindReplace.cs,InitializeComponent,The following statement contains a magic number: this.chkRegEx.Location = new System.Drawing.Point (8' 64);  
Magic Number,Alsing.Windows.Forms.SyntaxBox,FindReplaceForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\Syntaxbox\Dialogs\FindReplace.cs,InitializeComponent,The following statement contains a magic number: this.chkRegEx.Location = new System.Drawing.Point (8' 64);  
Magic Number,Alsing.Windows.Forms.SyntaxBox,FindReplaceForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\Syntaxbox\Dialogs\FindReplace.cs,InitializeComponent,The following statement contains a magic number: this.chkRegEx.Size = new System.Drawing.Size (144' 16);  
Magic Number,Alsing.Windows.Forms.SyntaxBox,FindReplaceForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\Syntaxbox\Dialogs\FindReplace.cs,InitializeComponent,The following statement contains a magic number: this.chkRegEx.Size = new System.Drawing.Size (144' 16);  
Magic Number,Alsing.Windows.Forms.SyntaxBox,FindReplaceForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\Syntaxbox\Dialogs\FindReplace.cs,InitializeComponent,The following statement contains a magic number: this.chkRegEx.TabIndex = 2;  
Magic Number,Alsing.Windows.Forms.SyntaxBox,FindReplaceForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\Syntaxbox\Dialogs\FindReplace.cs,InitializeComponent,The following statement contains a magic number: this.chkWholeWord.Location = new System.Drawing.Point (8' 40);  
Magic Number,Alsing.Windows.Forms.SyntaxBox,FindReplaceForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\Syntaxbox\Dialogs\FindReplace.cs,InitializeComponent,The following statement contains a magic number: this.chkWholeWord.Location = new System.Drawing.Point (8' 40);  
Magic Number,Alsing.Windows.Forms.SyntaxBox,FindReplaceForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\Syntaxbox\Dialogs\FindReplace.cs,InitializeComponent,The following statement contains a magic number: this.chkWholeWord.Size = new System.Drawing.Size (144' 16);  
Magic Number,Alsing.Windows.Forms.SyntaxBox,FindReplaceForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\Syntaxbox\Dialogs\FindReplace.cs,InitializeComponent,The following statement contains a magic number: this.chkWholeWord.Size = new System.Drawing.Size (144' 16);  
Magic Number,Alsing.Windows.Forms.SyntaxBox,FindReplaceForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\Syntaxbox\Dialogs\FindReplace.cs,InitializeComponent,The following statement contains a magic number: this.chkMatchCase.Location = new System.Drawing.Point (8' 16);  
Magic Number,Alsing.Windows.Forms.SyntaxBox,FindReplaceForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\Syntaxbox\Dialogs\FindReplace.cs,InitializeComponent,The following statement contains a magic number: this.chkMatchCase.Location = new System.Drawing.Point (8' 16);  
Magic Number,Alsing.Windows.Forms.SyntaxBox,FindReplaceForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\Syntaxbox\Dialogs\FindReplace.cs,InitializeComponent,The following statement contains a magic number: this.chkMatchCase.Size = new System.Drawing.Size (144' 16);  
Magic Number,Alsing.Windows.Forms.SyntaxBox,FindReplaceForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\Syntaxbox\Dialogs\FindReplace.cs,InitializeComponent,The following statement contains a magic number: this.chkMatchCase.Size = new System.Drawing.Size (144' 16);  
Magic Number,Alsing.Windows.Forms.SyntaxBox,FindReplaceForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\Syntaxbox\Dialogs\FindReplace.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleBaseSize = new System.Drawing.Size (5' 13);  
Magic Number,Alsing.Windows.Forms.SyntaxBox,FindReplaceForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\Syntaxbox\Dialogs\FindReplace.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleBaseSize = new System.Drawing.Size (5' 13);  
Magic Number,Alsing.Windows.Forms.SyntaxBox,FindReplaceForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\Syntaxbox\Dialogs\FindReplace.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size (496' 178);  
Magic Number,Alsing.Windows.Forms.SyntaxBox,FindReplaceForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\Syntaxbox\Dialogs\FindReplace.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size (496' 178);  
Magic Number,Alsing.Windows.Forms.SyntaxBox,GotoLineForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\Syntaxbox\Dialogs\GotoLine.cs,InitializeComponent,The following statement contains a magic number: this.btnCancel.Location = new System.Drawing.Point (160' 48);  
Magic Number,Alsing.Windows.Forms.SyntaxBox,GotoLineForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\Syntaxbox\Dialogs\GotoLine.cs,InitializeComponent,The following statement contains a magic number: this.btnCancel.Location = new System.Drawing.Point (160' 48);  
Magic Number,Alsing.Windows.Forms.SyntaxBox,GotoLineForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\Syntaxbox\Dialogs\GotoLine.cs,InitializeComponent,The following statement contains a magic number: this.btnCancel.Size = new System.Drawing.Size (72' 24);  
Magic Number,Alsing.Windows.Forms.SyntaxBox,GotoLineForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\Syntaxbox\Dialogs\GotoLine.cs,InitializeComponent,The following statement contains a magic number: this.btnCancel.Size = new System.Drawing.Size (72' 24);  
Magic Number,Alsing.Windows.Forms.SyntaxBox,GotoLineForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\Syntaxbox\Dialogs\GotoLine.cs,InitializeComponent,The following statement contains a magic number: this.btnOK.Location = new System.Drawing.Point (80' 48);  
Magic Number,Alsing.Windows.Forms.SyntaxBox,GotoLineForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\Syntaxbox\Dialogs\GotoLine.cs,InitializeComponent,The following statement contains a magic number: this.btnOK.Location = new System.Drawing.Point (80' 48);  
Magic Number,Alsing.Windows.Forms.SyntaxBox,GotoLineForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\Syntaxbox\Dialogs\GotoLine.cs,InitializeComponent,The following statement contains a magic number: this.btnOK.Size = new System.Drawing.Size (72' 24);  
Magic Number,Alsing.Windows.Forms.SyntaxBox,GotoLineForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\Syntaxbox\Dialogs\GotoLine.cs,InitializeComponent,The following statement contains a magic number: this.btnOK.Size = new System.Drawing.Size (72' 24);  
Magic Number,Alsing.Windows.Forms.SyntaxBox,GotoLineForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\Syntaxbox\Dialogs\GotoLine.cs,InitializeComponent,The following statement contains a magic number: this.txtRow.Location = new System.Drawing.Point (8' 24);  
Magic Number,Alsing.Windows.Forms.SyntaxBox,GotoLineForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\Syntaxbox\Dialogs\GotoLine.cs,InitializeComponent,The following statement contains a magic number: this.txtRow.Location = new System.Drawing.Point (8' 24);  
Magic Number,Alsing.Windows.Forms.SyntaxBox,GotoLineForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\Syntaxbox\Dialogs\GotoLine.cs,InitializeComponent,The following statement contains a magic number: this.txtRow.Size = new System.Drawing.Size (224' 20);  
Magic Number,Alsing.Windows.Forms.SyntaxBox,GotoLineForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\Syntaxbox\Dialogs\GotoLine.cs,InitializeComponent,The following statement contains a magic number: this.txtRow.Size = new System.Drawing.Size (224' 20);  
Magic Number,Alsing.Windows.Forms.SyntaxBox,GotoLineForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\Syntaxbox\Dialogs\GotoLine.cs,InitializeComponent,The following statement contains a magic number: this.txtRow.TabIndex = 2;  
Magic Number,Alsing.Windows.Forms.SyntaxBox,GotoLineForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\Syntaxbox\Dialogs\GotoLine.cs,InitializeComponent,The following statement contains a magic number: this.lblLines.Location = new System.Drawing.Point (8' 8);  
Magic Number,Alsing.Windows.Forms.SyntaxBox,GotoLineForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\Syntaxbox\Dialogs\GotoLine.cs,InitializeComponent,The following statement contains a magic number: this.lblLines.Location = new System.Drawing.Point (8' 8);  
Magic Number,Alsing.Windows.Forms.SyntaxBox,GotoLineForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\Syntaxbox\Dialogs\GotoLine.cs,InitializeComponent,The following statement contains a magic number: this.lblLines.Size = new System.Drawing.Size (128' 16);  
Magic Number,Alsing.Windows.Forms.SyntaxBox,GotoLineForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\Syntaxbox\Dialogs\GotoLine.cs,InitializeComponent,The following statement contains a magic number: this.lblLines.Size = new System.Drawing.Size (128' 16);  
Magic Number,Alsing.Windows.Forms.SyntaxBox,GotoLineForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\Syntaxbox\Dialogs\GotoLine.cs,InitializeComponent,The following statement contains a magic number: this.lblLines.TabIndex = 3;  
Magic Number,Alsing.Windows.Forms.SyntaxBox,GotoLineForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\Syntaxbox\Dialogs\GotoLine.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleBaseSize = new System.Drawing.Size (5' 13);  
Magic Number,Alsing.Windows.Forms.SyntaxBox,GotoLineForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\Syntaxbox\Dialogs\GotoLine.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleBaseSize = new System.Drawing.Size (5' 13);  
Magic Number,Alsing.Windows.Forms.SyntaxBox,GotoLineForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\Syntaxbox\Dialogs\GotoLine.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size (242' 82);  
Magic Number,Alsing.Windows.Forms.SyntaxBox,GotoLineForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\Syntaxbox\Dialogs\GotoLine.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size (242' 82);  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderRow,The following statement contains a magic number: RenderRow (RowIndex' 10);  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,CharFromPixel,The following statement contains a magic number: try {  	int RowIndex = Y / Control.View.RowHeight + Control.View.FirstVisibleRow;  	RowIndex = Math.Min (RowIndex' Control.Document.VisibleRows.Count);  	if (RowIndex == Control.Document.VisibleRows.Count) {  		RowIndex--;  		Row r = Control.Document.VisibleRows [RowIndex];  		if (r.IsCollapsed)  			r = r.Expansion_EndRow;  		return new TextPoint (r.Text.Length' r.Index);  	}  	RowIndex = Math.Max (RowIndex' 0);  	Row row;  	if (Control.Document.VisibleRows.Count != 0) {  		row = Control.Document.VisibleRows [RowIndex];  		RowIndex = Control.Document.IndexOf (row);  	}  	else {  		return new TextPoint (0' 0);  	}  	if (RowIndex == -1)  		return new TextPoint (-1' -1);  	//normal line  	if (!row.IsCollapsed)  		return ColumnFromPixel (RowIndex' X);  	//this.RenderRow (xtr.Index'-200);  	if (X < row.Expansion_PixelEnd - Control.View.FirstVisibleColumn * Control.View.CharWidth) {  		//start of collapsed line  		return ColumnFromPixel (RowIndex' X);  	}  	if (X >= row.Expansion_EndRow.Expansion_PixelStart - Control.View.FirstVisibleColumn * Control.View.CharWidth + Control.View.TextMargin) {  		//end of collapsed line  		return ColumnFromPixel (row.Expansion_EndRow.Index' X - row.Expansion_EndRow.Expansion_PixelStart + MeasureRow (row.Expansion_EndRow' row.Expansion_EndRow.Expansion_StartChar).Width);  	}  	//the collapsed text  	return new TextPoint (row.Expansion_EndChar' row.Index);  }  catch {  	Control._SyntaxBox.FontName = "Courier New";  	Control._SyntaxBox.FontSize = 10;  	return new TextPoint (0' 0);  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,CharFromPixel,The following statement contains a magic number: Control._SyntaxBox.FontSize = 10;  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderAll2,The following statement contains a magic number: try {  	int j = Control.View.FirstVisibleRow;  	if (Control.AutoListStartPos != null) {  		try {  			if (Control.AutoListVisible) {  				Point alP = GetTextPointPixelPos (Control.AutoListStartPos);  				if (alP == new Point (-1' -1)) {  					Control.AutoList.Visible = false;  				}  				else {  					alP.Y += Control.View.RowHeight + 2;  					alP.X += -20;  					alP = Control.PointToScreen (alP);  					Screen screen = Screen.FromPoint (new Point (Control.Right' alP.Y));  					if (alP.Y + Control.AutoList.Height > screen.WorkingArea.Height) {  						alP.Y -= Control.View.RowHeight + 2 + Control.AutoList.Height;  					}  					if (alP.X + Control.AutoList.Width > screen.WorkingArea.Width) {  						alP.X -= alP.X + Control.AutoList.Width - screen.WorkingArea.Width;  					}  					Control.AutoList.Location = alP;  					//Control.Controls[0].Focus();  					Control.Focus ();  				}  			}  		}  		catch {  		}  	}  	if (Control.InfoTipStartPos != null) {  		try {  			if (Control.InfoTipVisible) {  				Point itP = GetTextPointPixelPos (Control.InfoTipStartPos);  				if (itP == new Point (-1' -1)) {  					Control.InfoTip.Visible = false;  				}  				else {  					itP.Y += Control.View.RowHeight + 2;  					itP.X += -20;  					itP = Control.PointToScreen (itP);  					Screen screen = Screen.FromPoint (new Point (Control.Right' itP.Y));  					if (itP.Y + Control.InfoTip.Height > screen.WorkingArea.Height) {  						itP.Y -= Control.View.RowHeight + 2 + Control.InfoTip.Height;  					}  					if (itP.X + Control.InfoTip.Width > screen.WorkingArea.Width) {  						itP.X -= itP.X + Control.InfoTip.Width - screen.WorkingArea.Width;  					}  					Control.InfoTip.Location = itP;  					Control.InfoTip.Visible = true;  					Debug.WriteLine ("Infotip Made Visible");  				}  			}  			else {  				Control.InfoTip.Visible = false;  				Debug.WriteLine ("Infotip Made Invisible");  			}  		}  		catch {  		}  	}  	for (int i = 0; i < Control.View.VisibleRowCount; i++) {  		if (j >= 0 && j < Control.Document.VisibleRows.Count) {  			Row r = Control.Document.VisibleRows [j];  			if (RenderCaretRowOnly) {  				if (r == Control.Caret.CurrentRow) {  					RenderRow (Control.Document.IndexOf (r)' i);  				}  				//Control.Caret.CurrentRow.expansion_EndSpan.StartRow.Index  				if (Control.Caret.CurrentRow.expansion_EndSpan != null && Control.Caret.CurrentRow.expansion_EndSpan.StartRow != null && Control.Caret.CurrentRow.expansion_EndSpan.StartRow == r) {  					RenderRow (Control.Document.IndexOf (r)' i);  				}  			}  			else {  				RenderRow (Control.Document.IndexOf (r)' i);  			}  		}  		else {  			if (RenderCaretRowOnly) {  			}  			else {  				RenderRow (Control.Document.Count' i);  			}  		}  		j++;  	}  }  catch {  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderAll2,The following statement contains a magic number: try {  	int j = Control.View.FirstVisibleRow;  	if (Control.AutoListStartPos != null) {  		try {  			if (Control.AutoListVisible) {  				Point alP = GetTextPointPixelPos (Control.AutoListStartPos);  				if (alP == new Point (-1' -1)) {  					Control.AutoList.Visible = false;  				}  				else {  					alP.Y += Control.View.RowHeight + 2;  					alP.X += -20;  					alP = Control.PointToScreen (alP);  					Screen screen = Screen.FromPoint (new Point (Control.Right' alP.Y));  					if (alP.Y + Control.AutoList.Height > screen.WorkingArea.Height) {  						alP.Y -= Control.View.RowHeight + 2 + Control.AutoList.Height;  					}  					if (alP.X + Control.AutoList.Width > screen.WorkingArea.Width) {  						alP.X -= alP.X + Control.AutoList.Width - screen.WorkingArea.Width;  					}  					Control.AutoList.Location = alP;  					//Control.Controls[0].Focus();  					Control.Focus ();  				}  			}  		}  		catch {  		}  	}  	if (Control.InfoTipStartPos != null) {  		try {  			if (Control.InfoTipVisible) {  				Point itP = GetTextPointPixelPos (Control.InfoTipStartPos);  				if (itP == new Point (-1' -1)) {  					Control.InfoTip.Visible = false;  				}  				else {  					itP.Y += Control.View.RowHeight + 2;  					itP.X += -20;  					itP = Control.PointToScreen (itP);  					Screen screen = Screen.FromPoint (new Point (Control.Right' itP.Y));  					if (itP.Y + Control.InfoTip.Height > screen.WorkingArea.Height) {  						itP.Y -= Control.View.RowHeight + 2 + Control.InfoTip.Height;  					}  					if (itP.X + Control.InfoTip.Width > screen.WorkingArea.Width) {  						itP.X -= itP.X + Control.InfoTip.Width - screen.WorkingArea.Width;  					}  					Control.InfoTip.Location = itP;  					Control.InfoTip.Visible = true;  					Debug.WriteLine ("Infotip Made Visible");  				}  			}  			else {  				Control.InfoTip.Visible = false;  				Debug.WriteLine ("Infotip Made Invisible");  			}  		}  		catch {  		}  	}  	for (int i = 0; i < Control.View.VisibleRowCount; i++) {  		if (j >= 0 && j < Control.Document.VisibleRows.Count) {  			Row r = Control.Document.VisibleRows [j];  			if (RenderCaretRowOnly) {  				if (r == Control.Caret.CurrentRow) {  					RenderRow (Control.Document.IndexOf (r)' i);  				}  				//Control.Caret.CurrentRow.expansion_EndSpan.StartRow.Index  				if (Control.Caret.CurrentRow.expansion_EndSpan != null && Control.Caret.CurrentRow.expansion_EndSpan.StartRow != null && Control.Caret.CurrentRow.expansion_EndSpan.StartRow == r) {  					RenderRow (Control.Document.IndexOf (r)' i);  				}  			}  			else {  				RenderRow (Control.Document.IndexOf (r)' i);  			}  		}  		else {  			if (RenderCaretRowOnly) {  			}  			else {  				RenderRow (Control.Document.Count' i);  			}  		}  		j++;  	}  }  catch {  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderAll2,The following statement contains a magic number: try {  	int j = Control.View.FirstVisibleRow;  	if (Control.AutoListStartPos != null) {  		try {  			if (Control.AutoListVisible) {  				Point alP = GetTextPointPixelPos (Control.AutoListStartPos);  				if (alP == new Point (-1' -1)) {  					Control.AutoList.Visible = false;  				}  				else {  					alP.Y += Control.View.RowHeight + 2;  					alP.X += -20;  					alP = Control.PointToScreen (alP);  					Screen screen = Screen.FromPoint (new Point (Control.Right' alP.Y));  					if (alP.Y + Control.AutoList.Height > screen.WorkingArea.Height) {  						alP.Y -= Control.View.RowHeight + 2 + Control.AutoList.Height;  					}  					if (alP.X + Control.AutoList.Width > screen.WorkingArea.Width) {  						alP.X -= alP.X + Control.AutoList.Width - screen.WorkingArea.Width;  					}  					Control.AutoList.Location = alP;  					//Control.Controls[0].Focus();  					Control.Focus ();  				}  			}  		}  		catch {  		}  	}  	if (Control.InfoTipStartPos != null) {  		try {  			if (Control.InfoTipVisible) {  				Point itP = GetTextPointPixelPos (Control.InfoTipStartPos);  				if (itP == new Point (-1' -1)) {  					Control.InfoTip.Visible = false;  				}  				else {  					itP.Y += Control.View.RowHeight + 2;  					itP.X += -20;  					itP = Control.PointToScreen (itP);  					Screen screen = Screen.FromPoint (new Point (Control.Right' itP.Y));  					if (itP.Y + Control.InfoTip.Height > screen.WorkingArea.Height) {  						itP.Y -= Control.View.RowHeight + 2 + Control.InfoTip.Height;  					}  					if (itP.X + Control.InfoTip.Width > screen.WorkingArea.Width) {  						itP.X -= itP.X + Control.InfoTip.Width - screen.WorkingArea.Width;  					}  					Control.InfoTip.Location = itP;  					Control.InfoTip.Visible = true;  					Debug.WriteLine ("Infotip Made Visible");  				}  			}  			else {  				Control.InfoTip.Visible = false;  				Debug.WriteLine ("Infotip Made Invisible");  			}  		}  		catch {  		}  	}  	for (int i = 0; i < Control.View.VisibleRowCount; i++) {  		if (j >= 0 && j < Control.Document.VisibleRows.Count) {  			Row r = Control.Document.VisibleRows [j];  			if (RenderCaretRowOnly) {  				if (r == Control.Caret.CurrentRow) {  					RenderRow (Control.Document.IndexOf (r)' i);  				}  				//Control.Caret.CurrentRow.expansion_EndSpan.StartRow.Index  				if (Control.Caret.CurrentRow.expansion_EndSpan != null && Control.Caret.CurrentRow.expansion_EndSpan.StartRow != null && Control.Caret.CurrentRow.expansion_EndSpan.StartRow == r) {  					RenderRow (Control.Document.IndexOf (r)' i);  				}  			}  			else {  				RenderRow (Control.Document.IndexOf (r)' i);  			}  		}  		else {  			if (RenderCaretRowOnly) {  			}  			else {  				RenderRow (Control.Document.Count' i);  			}  		}  		j++;  	}  }  catch {  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderAll2,The following statement contains a magic number: try {  	int j = Control.View.FirstVisibleRow;  	if (Control.AutoListStartPos != null) {  		try {  			if (Control.AutoListVisible) {  				Point alP = GetTextPointPixelPos (Control.AutoListStartPos);  				if (alP == new Point (-1' -1)) {  					Control.AutoList.Visible = false;  				}  				else {  					alP.Y += Control.View.RowHeight + 2;  					alP.X += -20;  					alP = Control.PointToScreen (alP);  					Screen screen = Screen.FromPoint (new Point (Control.Right' alP.Y));  					if (alP.Y + Control.AutoList.Height > screen.WorkingArea.Height) {  						alP.Y -= Control.View.RowHeight + 2 + Control.AutoList.Height;  					}  					if (alP.X + Control.AutoList.Width > screen.WorkingArea.Width) {  						alP.X -= alP.X + Control.AutoList.Width - screen.WorkingArea.Width;  					}  					Control.AutoList.Location = alP;  					//Control.Controls[0].Focus();  					Control.Focus ();  				}  			}  		}  		catch {  		}  	}  	if (Control.InfoTipStartPos != null) {  		try {  			if (Control.InfoTipVisible) {  				Point itP = GetTextPointPixelPos (Control.InfoTipStartPos);  				if (itP == new Point (-1' -1)) {  					Control.InfoTip.Visible = false;  				}  				else {  					itP.Y += Control.View.RowHeight + 2;  					itP.X += -20;  					itP = Control.PointToScreen (itP);  					Screen screen = Screen.FromPoint (new Point (Control.Right' itP.Y));  					if (itP.Y + Control.InfoTip.Height > screen.WorkingArea.Height) {  						itP.Y -= Control.View.RowHeight + 2 + Control.InfoTip.Height;  					}  					if (itP.X + Control.InfoTip.Width > screen.WorkingArea.Width) {  						itP.X -= itP.X + Control.InfoTip.Width - screen.WorkingArea.Width;  					}  					Control.InfoTip.Location = itP;  					Control.InfoTip.Visible = true;  					Debug.WriteLine ("Infotip Made Visible");  				}  			}  			else {  				Control.InfoTip.Visible = false;  				Debug.WriteLine ("Infotip Made Invisible");  			}  		}  		catch {  		}  	}  	for (int i = 0; i < Control.View.VisibleRowCount; i++) {  		if (j >= 0 && j < Control.Document.VisibleRows.Count) {  			Row r = Control.Document.VisibleRows [j];  			if (RenderCaretRowOnly) {  				if (r == Control.Caret.CurrentRow) {  					RenderRow (Control.Document.IndexOf (r)' i);  				}  				//Control.Caret.CurrentRow.expansion_EndSpan.StartRow.Index  				if (Control.Caret.CurrentRow.expansion_EndSpan != null && Control.Caret.CurrentRow.expansion_EndSpan.StartRow != null && Control.Caret.CurrentRow.expansion_EndSpan.StartRow == r) {  					RenderRow (Control.Document.IndexOf (r)' i);  				}  			}  			else {  				RenderRow (Control.Document.IndexOf (r)' i);  			}  		}  		else {  			if (RenderCaretRowOnly) {  			}  			else {  				RenderRow (Control.Document.Count' i);  			}  		}  		j++;  	}  }  catch {  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderAll2,The following statement contains a magic number: try {  	int j = Control.View.FirstVisibleRow;  	if (Control.AutoListStartPos != null) {  		try {  			if (Control.AutoListVisible) {  				Point alP = GetTextPointPixelPos (Control.AutoListStartPos);  				if (alP == new Point (-1' -1)) {  					Control.AutoList.Visible = false;  				}  				else {  					alP.Y += Control.View.RowHeight + 2;  					alP.X += -20;  					alP = Control.PointToScreen (alP);  					Screen screen = Screen.FromPoint (new Point (Control.Right' alP.Y));  					if (alP.Y + Control.AutoList.Height > screen.WorkingArea.Height) {  						alP.Y -= Control.View.RowHeight + 2 + Control.AutoList.Height;  					}  					if (alP.X + Control.AutoList.Width > screen.WorkingArea.Width) {  						alP.X -= alP.X + Control.AutoList.Width - screen.WorkingArea.Width;  					}  					Control.AutoList.Location = alP;  					//Control.Controls[0].Focus();  					Control.Focus ();  				}  			}  		}  		catch {  		}  	}  	if (Control.InfoTipStartPos != null) {  		try {  			if (Control.InfoTipVisible) {  				Point itP = GetTextPointPixelPos (Control.InfoTipStartPos);  				if (itP == new Point (-1' -1)) {  					Control.InfoTip.Visible = false;  				}  				else {  					itP.Y += Control.View.RowHeight + 2;  					itP.X += -20;  					itP = Control.PointToScreen (itP);  					Screen screen = Screen.FromPoint (new Point (Control.Right' itP.Y));  					if (itP.Y + Control.InfoTip.Height > screen.WorkingArea.Height) {  						itP.Y -= Control.View.RowHeight + 2 + Control.InfoTip.Height;  					}  					if (itP.X + Control.InfoTip.Width > screen.WorkingArea.Width) {  						itP.X -= itP.X + Control.InfoTip.Width - screen.WorkingArea.Width;  					}  					Control.InfoTip.Location = itP;  					Control.InfoTip.Visible = true;  					Debug.WriteLine ("Infotip Made Visible");  				}  			}  			else {  				Control.InfoTip.Visible = false;  				Debug.WriteLine ("Infotip Made Invisible");  			}  		}  		catch {  		}  	}  	for (int i = 0; i < Control.View.VisibleRowCount; i++) {  		if (j >= 0 && j < Control.Document.VisibleRows.Count) {  			Row r = Control.Document.VisibleRows [j];  			if (RenderCaretRowOnly) {  				if (r == Control.Caret.CurrentRow) {  					RenderRow (Control.Document.IndexOf (r)' i);  				}  				//Control.Caret.CurrentRow.expansion_EndSpan.StartRow.Index  				if (Control.Caret.CurrentRow.expansion_EndSpan != null && Control.Caret.CurrentRow.expansion_EndSpan.StartRow != null && Control.Caret.CurrentRow.expansion_EndSpan.StartRow == r) {  					RenderRow (Control.Document.IndexOf (r)' i);  				}  			}  			else {  				RenderRow (Control.Document.IndexOf (r)' i);  			}  		}  		else {  			if (RenderCaretRowOnly) {  			}  			else {  				RenderRow (Control.Document.Count' i);  			}  		}  		j++;  	}  }  catch {  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderAll2,The following statement contains a magic number: try {  	int j = Control.View.FirstVisibleRow;  	if (Control.AutoListStartPos != null) {  		try {  			if (Control.AutoListVisible) {  				Point alP = GetTextPointPixelPos (Control.AutoListStartPos);  				if (alP == new Point (-1' -1)) {  					Control.AutoList.Visible = false;  				}  				else {  					alP.Y += Control.View.RowHeight + 2;  					alP.X += -20;  					alP = Control.PointToScreen (alP);  					Screen screen = Screen.FromPoint (new Point (Control.Right' alP.Y));  					if (alP.Y + Control.AutoList.Height > screen.WorkingArea.Height) {  						alP.Y -= Control.View.RowHeight + 2 + Control.AutoList.Height;  					}  					if (alP.X + Control.AutoList.Width > screen.WorkingArea.Width) {  						alP.X -= alP.X + Control.AutoList.Width - screen.WorkingArea.Width;  					}  					Control.AutoList.Location = alP;  					//Control.Controls[0].Focus();  					Control.Focus ();  				}  			}  		}  		catch {  		}  	}  	if (Control.InfoTipStartPos != null) {  		try {  			if (Control.InfoTipVisible) {  				Point itP = GetTextPointPixelPos (Control.InfoTipStartPos);  				if (itP == new Point (-1' -1)) {  					Control.InfoTip.Visible = false;  				}  				else {  					itP.Y += Control.View.RowHeight + 2;  					itP.X += -20;  					itP = Control.PointToScreen (itP);  					Screen screen = Screen.FromPoint (new Point (Control.Right' itP.Y));  					if (itP.Y + Control.InfoTip.Height > screen.WorkingArea.Height) {  						itP.Y -= Control.View.RowHeight + 2 + Control.InfoTip.Height;  					}  					if (itP.X + Control.InfoTip.Width > screen.WorkingArea.Width) {  						itP.X -= itP.X + Control.InfoTip.Width - screen.WorkingArea.Width;  					}  					Control.InfoTip.Location = itP;  					Control.InfoTip.Visible = true;  					Debug.WriteLine ("Infotip Made Visible");  				}  			}  			else {  				Control.InfoTip.Visible = false;  				Debug.WriteLine ("Infotip Made Invisible");  			}  		}  		catch {  		}  	}  	for (int i = 0; i < Control.View.VisibleRowCount; i++) {  		if (j >= 0 && j < Control.Document.VisibleRows.Count) {  			Row r = Control.Document.VisibleRows [j];  			if (RenderCaretRowOnly) {  				if (r == Control.Caret.CurrentRow) {  					RenderRow (Control.Document.IndexOf (r)' i);  				}  				//Control.Caret.CurrentRow.expansion_EndSpan.StartRow.Index  				if (Control.Caret.CurrentRow.expansion_EndSpan != null && Control.Caret.CurrentRow.expansion_EndSpan.StartRow != null && Control.Caret.CurrentRow.expansion_EndSpan.StartRow == r) {  					RenderRow (Control.Document.IndexOf (r)' i);  				}  			}  			else {  				RenderRow (Control.Document.IndexOf (r)' i);  			}  		}  		else {  			if (RenderCaretRowOnly) {  			}  			else {  				RenderRow (Control.Document.Count' i);  			}  		}  		j++;  	}  }  catch {  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderAll2,The following statement contains a magic number: if (Control.AutoListStartPos != null) {  	try {  		if (Control.AutoListVisible) {  			Point alP = GetTextPointPixelPos (Control.AutoListStartPos);  			if (alP == new Point (-1' -1)) {  				Control.AutoList.Visible = false;  			}  			else {  				alP.Y += Control.View.RowHeight + 2;  				alP.X += -20;  				alP = Control.PointToScreen (alP);  				Screen screen = Screen.FromPoint (new Point (Control.Right' alP.Y));  				if (alP.Y + Control.AutoList.Height > screen.WorkingArea.Height) {  					alP.Y -= Control.View.RowHeight + 2 + Control.AutoList.Height;  				}  				if (alP.X + Control.AutoList.Width > screen.WorkingArea.Width) {  					alP.X -= alP.X + Control.AutoList.Width - screen.WorkingArea.Width;  				}  				Control.AutoList.Location = alP;  				//Control.Controls[0].Focus();  				Control.Focus ();  			}  		}  	}  	catch {  	}  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderAll2,The following statement contains a magic number: if (Control.AutoListStartPos != null) {  	try {  		if (Control.AutoListVisible) {  			Point alP = GetTextPointPixelPos (Control.AutoListStartPos);  			if (alP == new Point (-1' -1)) {  				Control.AutoList.Visible = false;  			}  			else {  				alP.Y += Control.View.RowHeight + 2;  				alP.X += -20;  				alP = Control.PointToScreen (alP);  				Screen screen = Screen.FromPoint (new Point (Control.Right' alP.Y));  				if (alP.Y + Control.AutoList.Height > screen.WorkingArea.Height) {  					alP.Y -= Control.View.RowHeight + 2 + Control.AutoList.Height;  				}  				if (alP.X + Control.AutoList.Width > screen.WorkingArea.Width) {  					alP.X -= alP.X + Control.AutoList.Width - screen.WorkingArea.Width;  				}  				Control.AutoList.Location = alP;  				//Control.Controls[0].Focus();  				Control.Focus ();  			}  		}  	}  	catch {  	}  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderAll2,The following statement contains a magic number: if (Control.AutoListStartPos != null) {  	try {  		if (Control.AutoListVisible) {  			Point alP = GetTextPointPixelPos (Control.AutoListStartPos);  			if (alP == new Point (-1' -1)) {  				Control.AutoList.Visible = false;  			}  			else {  				alP.Y += Control.View.RowHeight + 2;  				alP.X += -20;  				alP = Control.PointToScreen (alP);  				Screen screen = Screen.FromPoint (new Point (Control.Right' alP.Y));  				if (alP.Y + Control.AutoList.Height > screen.WorkingArea.Height) {  					alP.Y -= Control.View.RowHeight + 2 + Control.AutoList.Height;  				}  				if (alP.X + Control.AutoList.Width > screen.WorkingArea.Width) {  					alP.X -= alP.X + Control.AutoList.Width - screen.WorkingArea.Width;  				}  				Control.AutoList.Location = alP;  				//Control.Controls[0].Focus();  				Control.Focus ();  			}  		}  	}  	catch {  	}  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderAll2,The following statement contains a magic number: try {  	if (Control.AutoListVisible) {  		Point alP = GetTextPointPixelPos (Control.AutoListStartPos);  		if (alP == new Point (-1' -1)) {  			Control.AutoList.Visible = false;  		}  		else {  			alP.Y += Control.View.RowHeight + 2;  			alP.X += -20;  			alP = Control.PointToScreen (alP);  			Screen screen = Screen.FromPoint (new Point (Control.Right' alP.Y));  			if (alP.Y + Control.AutoList.Height > screen.WorkingArea.Height) {  				alP.Y -= Control.View.RowHeight + 2 + Control.AutoList.Height;  			}  			if (alP.X + Control.AutoList.Width > screen.WorkingArea.Width) {  				alP.X -= alP.X + Control.AutoList.Width - screen.WorkingArea.Width;  			}  			Control.AutoList.Location = alP;  			//Control.Controls[0].Focus();  			Control.Focus ();  		}  	}  }  catch {  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderAll2,The following statement contains a magic number: try {  	if (Control.AutoListVisible) {  		Point alP = GetTextPointPixelPos (Control.AutoListStartPos);  		if (alP == new Point (-1' -1)) {  			Control.AutoList.Visible = false;  		}  		else {  			alP.Y += Control.View.RowHeight + 2;  			alP.X += -20;  			alP = Control.PointToScreen (alP);  			Screen screen = Screen.FromPoint (new Point (Control.Right' alP.Y));  			if (alP.Y + Control.AutoList.Height > screen.WorkingArea.Height) {  				alP.Y -= Control.View.RowHeight + 2 + Control.AutoList.Height;  			}  			if (alP.X + Control.AutoList.Width > screen.WorkingArea.Width) {  				alP.X -= alP.X + Control.AutoList.Width - screen.WorkingArea.Width;  			}  			Control.AutoList.Location = alP;  			//Control.Controls[0].Focus();  			Control.Focus ();  		}  	}  }  catch {  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderAll2,The following statement contains a magic number: try {  	if (Control.AutoListVisible) {  		Point alP = GetTextPointPixelPos (Control.AutoListStartPos);  		if (alP == new Point (-1' -1)) {  			Control.AutoList.Visible = false;  		}  		else {  			alP.Y += Control.View.RowHeight + 2;  			alP.X += -20;  			alP = Control.PointToScreen (alP);  			Screen screen = Screen.FromPoint (new Point (Control.Right' alP.Y));  			if (alP.Y + Control.AutoList.Height > screen.WorkingArea.Height) {  				alP.Y -= Control.View.RowHeight + 2 + Control.AutoList.Height;  			}  			if (alP.X + Control.AutoList.Width > screen.WorkingArea.Width) {  				alP.X -= alP.X + Control.AutoList.Width - screen.WorkingArea.Width;  			}  			Control.AutoList.Location = alP;  			//Control.Controls[0].Focus();  			Control.Focus ();  		}  	}  }  catch {  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderAll2,The following statement contains a magic number: if (Control.AutoListVisible) {  	Point alP = GetTextPointPixelPos (Control.AutoListStartPos);  	if (alP == new Point (-1' -1)) {  		Control.AutoList.Visible = false;  	}  	else {  		alP.Y += Control.View.RowHeight + 2;  		alP.X += -20;  		alP = Control.PointToScreen (alP);  		Screen screen = Screen.FromPoint (new Point (Control.Right' alP.Y));  		if (alP.Y + Control.AutoList.Height > screen.WorkingArea.Height) {  			alP.Y -= Control.View.RowHeight + 2 + Control.AutoList.Height;  		}  		if (alP.X + Control.AutoList.Width > screen.WorkingArea.Width) {  			alP.X -= alP.X + Control.AutoList.Width - screen.WorkingArea.Width;  		}  		Control.AutoList.Location = alP;  		//Control.Controls[0].Focus();  		Control.Focus ();  	}  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderAll2,The following statement contains a magic number: if (Control.AutoListVisible) {  	Point alP = GetTextPointPixelPos (Control.AutoListStartPos);  	if (alP == new Point (-1' -1)) {  		Control.AutoList.Visible = false;  	}  	else {  		alP.Y += Control.View.RowHeight + 2;  		alP.X += -20;  		alP = Control.PointToScreen (alP);  		Screen screen = Screen.FromPoint (new Point (Control.Right' alP.Y));  		if (alP.Y + Control.AutoList.Height > screen.WorkingArea.Height) {  			alP.Y -= Control.View.RowHeight + 2 + Control.AutoList.Height;  		}  		if (alP.X + Control.AutoList.Width > screen.WorkingArea.Width) {  			alP.X -= alP.X + Control.AutoList.Width - screen.WorkingArea.Width;  		}  		Control.AutoList.Location = alP;  		//Control.Controls[0].Focus();  		Control.Focus ();  	}  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderAll2,The following statement contains a magic number: if (Control.AutoListVisible) {  	Point alP = GetTextPointPixelPos (Control.AutoListStartPos);  	if (alP == new Point (-1' -1)) {  		Control.AutoList.Visible = false;  	}  	else {  		alP.Y += Control.View.RowHeight + 2;  		alP.X += -20;  		alP = Control.PointToScreen (alP);  		Screen screen = Screen.FromPoint (new Point (Control.Right' alP.Y));  		if (alP.Y + Control.AutoList.Height > screen.WorkingArea.Height) {  			alP.Y -= Control.View.RowHeight + 2 + Control.AutoList.Height;  		}  		if (alP.X + Control.AutoList.Width > screen.WorkingArea.Width) {  			alP.X -= alP.X + Control.AutoList.Width - screen.WorkingArea.Width;  		}  		Control.AutoList.Location = alP;  		//Control.Controls[0].Focus();  		Control.Focus ();  	}  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderAll2,The following statement contains a magic number: if (alP == new Point (-1' -1)) {  	Control.AutoList.Visible = false;  }  else {  	alP.Y += Control.View.RowHeight + 2;  	alP.X += -20;  	alP = Control.PointToScreen (alP);  	Screen screen = Screen.FromPoint (new Point (Control.Right' alP.Y));  	if (alP.Y + Control.AutoList.Height > screen.WorkingArea.Height) {  		alP.Y -= Control.View.RowHeight + 2 + Control.AutoList.Height;  	}  	if (alP.X + Control.AutoList.Width > screen.WorkingArea.Width) {  		alP.X -= alP.X + Control.AutoList.Width - screen.WorkingArea.Width;  	}  	Control.AutoList.Location = alP;  	//Control.Controls[0].Focus();  	Control.Focus ();  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderAll2,The following statement contains a magic number: if (alP == new Point (-1' -1)) {  	Control.AutoList.Visible = false;  }  else {  	alP.Y += Control.View.RowHeight + 2;  	alP.X += -20;  	alP = Control.PointToScreen (alP);  	Screen screen = Screen.FromPoint (new Point (Control.Right' alP.Y));  	if (alP.Y + Control.AutoList.Height > screen.WorkingArea.Height) {  		alP.Y -= Control.View.RowHeight + 2 + Control.AutoList.Height;  	}  	if (alP.X + Control.AutoList.Width > screen.WorkingArea.Width) {  		alP.X -= alP.X + Control.AutoList.Width - screen.WorkingArea.Width;  	}  	Control.AutoList.Location = alP;  	//Control.Controls[0].Focus();  	Control.Focus ();  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderAll2,The following statement contains a magic number: if (alP == new Point (-1' -1)) {  	Control.AutoList.Visible = false;  }  else {  	alP.Y += Control.View.RowHeight + 2;  	alP.X += -20;  	alP = Control.PointToScreen (alP);  	Screen screen = Screen.FromPoint (new Point (Control.Right' alP.Y));  	if (alP.Y + Control.AutoList.Height > screen.WorkingArea.Height) {  		alP.Y -= Control.View.RowHeight + 2 + Control.AutoList.Height;  	}  	if (alP.X + Control.AutoList.Width > screen.WorkingArea.Width) {  		alP.X -= alP.X + Control.AutoList.Width - screen.WorkingArea.Width;  	}  	Control.AutoList.Location = alP;  	//Control.Controls[0].Focus();  	Control.Focus ();  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderAll2,The following statement contains a magic number: alP.Y += Control.View.RowHeight + 2;  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderAll2,The following statement contains a magic number: alP.X += -20;  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderAll2,The following statement contains a magic number: if (alP.Y + Control.AutoList.Height > screen.WorkingArea.Height) {  	alP.Y -= Control.View.RowHeight + 2 + Control.AutoList.Height;  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderAll2,The following statement contains a magic number: alP.Y -= Control.View.RowHeight + 2 + Control.AutoList.Height;  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderAll2,The following statement contains a magic number: if (Control.InfoTipStartPos != null) {  	try {  		if (Control.InfoTipVisible) {  			Point itP = GetTextPointPixelPos (Control.InfoTipStartPos);  			if (itP == new Point (-1' -1)) {  				Control.InfoTip.Visible = false;  			}  			else {  				itP.Y += Control.View.RowHeight + 2;  				itP.X += -20;  				itP = Control.PointToScreen (itP);  				Screen screen = Screen.FromPoint (new Point (Control.Right' itP.Y));  				if (itP.Y + Control.InfoTip.Height > screen.WorkingArea.Height) {  					itP.Y -= Control.View.RowHeight + 2 + Control.InfoTip.Height;  				}  				if (itP.X + Control.InfoTip.Width > screen.WorkingArea.Width) {  					itP.X -= itP.X + Control.InfoTip.Width - screen.WorkingArea.Width;  				}  				Control.InfoTip.Location = itP;  				Control.InfoTip.Visible = true;  				Debug.WriteLine ("Infotip Made Visible");  			}  		}  		else {  			Control.InfoTip.Visible = false;  			Debug.WriteLine ("Infotip Made Invisible");  		}  	}  	catch {  	}  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderAll2,The following statement contains a magic number: if (Control.InfoTipStartPos != null) {  	try {  		if (Control.InfoTipVisible) {  			Point itP = GetTextPointPixelPos (Control.InfoTipStartPos);  			if (itP == new Point (-1' -1)) {  				Control.InfoTip.Visible = false;  			}  			else {  				itP.Y += Control.View.RowHeight + 2;  				itP.X += -20;  				itP = Control.PointToScreen (itP);  				Screen screen = Screen.FromPoint (new Point (Control.Right' itP.Y));  				if (itP.Y + Control.InfoTip.Height > screen.WorkingArea.Height) {  					itP.Y -= Control.View.RowHeight + 2 + Control.InfoTip.Height;  				}  				if (itP.X + Control.InfoTip.Width > screen.WorkingArea.Width) {  					itP.X -= itP.X + Control.InfoTip.Width - screen.WorkingArea.Width;  				}  				Control.InfoTip.Location = itP;  				Control.InfoTip.Visible = true;  				Debug.WriteLine ("Infotip Made Visible");  			}  		}  		else {  			Control.InfoTip.Visible = false;  			Debug.WriteLine ("Infotip Made Invisible");  		}  	}  	catch {  	}  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderAll2,The following statement contains a magic number: if (Control.InfoTipStartPos != null) {  	try {  		if (Control.InfoTipVisible) {  			Point itP = GetTextPointPixelPos (Control.InfoTipStartPos);  			if (itP == new Point (-1' -1)) {  				Control.InfoTip.Visible = false;  			}  			else {  				itP.Y += Control.View.RowHeight + 2;  				itP.X += -20;  				itP = Control.PointToScreen (itP);  				Screen screen = Screen.FromPoint (new Point (Control.Right' itP.Y));  				if (itP.Y + Control.InfoTip.Height > screen.WorkingArea.Height) {  					itP.Y -= Control.View.RowHeight + 2 + Control.InfoTip.Height;  				}  				if (itP.X + Control.InfoTip.Width > screen.WorkingArea.Width) {  					itP.X -= itP.X + Control.InfoTip.Width - screen.WorkingArea.Width;  				}  				Control.InfoTip.Location = itP;  				Control.InfoTip.Visible = true;  				Debug.WriteLine ("Infotip Made Visible");  			}  		}  		else {  			Control.InfoTip.Visible = false;  			Debug.WriteLine ("Infotip Made Invisible");  		}  	}  	catch {  	}  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderAll2,The following statement contains a magic number: try {  	if (Control.InfoTipVisible) {  		Point itP = GetTextPointPixelPos (Control.InfoTipStartPos);  		if (itP == new Point (-1' -1)) {  			Control.InfoTip.Visible = false;  		}  		else {  			itP.Y += Control.View.RowHeight + 2;  			itP.X += -20;  			itP = Control.PointToScreen (itP);  			Screen screen = Screen.FromPoint (new Point (Control.Right' itP.Y));  			if (itP.Y + Control.InfoTip.Height > screen.WorkingArea.Height) {  				itP.Y -= Control.View.RowHeight + 2 + Control.InfoTip.Height;  			}  			if (itP.X + Control.InfoTip.Width > screen.WorkingArea.Width) {  				itP.X -= itP.X + Control.InfoTip.Width - screen.WorkingArea.Width;  			}  			Control.InfoTip.Location = itP;  			Control.InfoTip.Visible = true;  			Debug.WriteLine ("Infotip Made Visible");  		}  	}  	else {  		Control.InfoTip.Visible = false;  		Debug.WriteLine ("Infotip Made Invisible");  	}  }  catch {  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderAll2,The following statement contains a magic number: try {  	if (Control.InfoTipVisible) {  		Point itP = GetTextPointPixelPos (Control.InfoTipStartPos);  		if (itP == new Point (-1' -1)) {  			Control.InfoTip.Visible = false;  		}  		else {  			itP.Y += Control.View.RowHeight + 2;  			itP.X += -20;  			itP = Control.PointToScreen (itP);  			Screen screen = Screen.FromPoint (new Point (Control.Right' itP.Y));  			if (itP.Y + Control.InfoTip.Height > screen.WorkingArea.Height) {  				itP.Y -= Control.View.RowHeight + 2 + Control.InfoTip.Height;  			}  			if (itP.X + Control.InfoTip.Width > screen.WorkingArea.Width) {  				itP.X -= itP.X + Control.InfoTip.Width - screen.WorkingArea.Width;  			}  			Control.InfoTip.Location = itP;  			Control.InfoTip.Visible = true;  			Debug.WriteLine ("Infotip Made Visible");  		}  	}  	else {  		Control.InfoTip.Visible = false;  		Debug.WriteLine ("Infotip Made Invisible");  	}  }  catch {  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderAll2,The following statement contains a magic number: try {  	if (Control.InfoTipVisible) {  		Point itP = GetTextPointPixelPos (Control.InfoTipStartPos);  		if (itP == new Point (-1' -1)) {  			Control.InfoTip.Visible = false;  		}  		else {  			itP.Y += Control.View.RowHeight + 2;  			itP.X += -20;  			itP = Control.PointToScreen (itP);  			Screen screen = Screen.FromPoint (new Point (Control.Right' itP.Y));  			if (itP.Y + Control.InfoTip.Height > screen.WorkingArea.Height) {  				itP.Y -= Control.View.RowHeight + 2 + Control.InfoTip.Height;  			}  			if (itP.X + Control.InfoTip.Width > screen.WorkingArea.Width) {  				itP.X -= itP.X + Control.InfoTip.Width - screen.WorkingArea.Width;  			}  			Control.InfoTip.Location = itP;  			Control.InfoTip.Visible = true;  			Debug.WriteLine ("Infotip Made Visible");  		}  	}  	else {  		Control.InfoTip.Visible = false;  		Debug.WriteLine ("Infotip Made Invisible");  	}  }  catch {  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderAll2,The following statement contains a magic number: if (Control.InfoTipVisible) {  	Point itP = GetTextPointPixelPos (Control.InfoTipStartPos);  	if (itP == new Point (-1' -1)) {  		Control.InfoTip.Visible = false;  	}  	else {  		itP.Y += Control.View.RowHeight + 2;  		itP.X += -20;  		itP = Control.PointToScreen (itP);  		Screen screen = Screen.FromPoint (new Point (Control.Right' itP.Y));  		if (itP.Y + Control.InfoTip.Height > screen.WorkingArea.Height) {  			itP.Y -= Control.View.RowHeight + 2 + Control.InfoTip.Height;  		}  		if (itP.X + Control.InfoTip.Width > screen.WorkingArea.Width) {  			itP.X -= itP.X + Control.InfoTip.Width - screen.WorkingArea.Width;  		}  		Control.InfoTip.Location = itP;  		Control.InfoTip.Visible = true;  		Debug.WriteLine ("Infotip Made Visible");  	}  }  else {  	Control.InfoTip.Visible = false;  	Debug.WriteLine ("Infotip Made Invisible");  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderAll2,The following statement contains a magic number: if (Control.InfoTipVisible) {  	Point itP = GetTextPointPixelPos (Control.InfoTipStartPos);  	if (itP == new Point (-1' -1)) {  		Control.InfoTip.Visible = false;  	}  	else {  		itP.Y += Control.View.RowHeight + 2;  		itP.X += -20;  		itP = Control.PointToScreen (itP);  		Screen screen = Screen.FromPoint (new Point (Control.Right' itP.Y));  		if (itP.Y + Control.InfoTip.Height > screen.WorkingArea.Height) {  			itP.Y -= Control.View.RowHeight + 2 + Control.InfoTip.Height;  		}  		if (itP.X + Control.InfoTip.Width > screen.WorkingArea.Width) {  			itP.X -= itP.X + Control.InfoTip.Width - screen.WorkingArea.Width;  		}  		Control.InfoTip.Location = itP;  		Control.InfoTip.Visible = true;  		Debug.WriteLine ("Infotip Made Visible");  	}  }  else {  	Control.InfoTip.Visible = false;  	Debug.WriteLine ("Infotip Made Invisible");  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderAll2,The following statement contains a magic number: if (Control.InfoTipVisible) {  	Point itP = GetTextPointPixelPos (Control.InfoTipStartPos);  	if (itP == new Point (-1' -1)) {  		Control.InfoTip.Visible = false;  	}  	else {  		itP.Y += Control.View.RowHeight + 2;  		itP.X += -20;  		itP = Control.PointToScreen (itP);  		Screen screen = Screen.FromPoint (new Point (Control.Right' itP.Y));  		if (itP.Y + Control.InfoTip.Height > screen.WorkingArea.Height) {  			itP.Y -= Control.View.RowHeight + 2 + Control.InfoTip.Height;  		}  		if (itP.X + Control.InfoTip.Width > screen.WorkingArea.Width) {  			itP.X -= itP.X + Control.InfoTip.Width - screen.WorkingArea.Width;  		}  		Control.InfoTip.Location = itP;  		Control.InfoTip.Visible = true;  		Debug.WriteLine ("Infotip Made Visible");  	}  }  else {  	Control.InfoTip.Visible = false;  	Debug.WriteLine ("Infotip Made Invisible");  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderAll2,The following statement contains a magic number: if (itP == new Point (-1' -1)) {  	Control.InfoTip.Visible = false;  }  else {  	itP.Y += Control.View.RowHeight + 2;  	itP.X += -20;  	itP = Control.PointToScreen (itP);  	Screen screen = Screen.FromPoint (new Point (Control.Right' itP.Y));  	if (itP.Y + Control.InfoTip.Height > screen.WorkingArea.Height) {  		itP.Y -= Control.View.RowHeight + 2 + Control.InfoTip.Height;  	}  	if (itP.X + Control.InfoTip.Width > screen.WorkingArea.Width) {  		itP.X -= itP.X + Control.InfoTip.Width - screen.WorkingArea.Width;  	}  	Control.InfoTip.Location = itP;  	Control.InfoTip.Visible = true;  	Debug.WriteLine ("Infotip Made Visible");  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderAll2,The following statement contains a magic number: if (itP == new Point (-1' -1)) {  	Control.InfoTip.Visible = false;  }  else {  	itP.Y += Control.View.RowHeight + 2;  	itP.X += -20;  	itP = Control.PointToScreen (itP);  	Screen screen = Screen.FromPoint (new Point (Control.Right' itP.Y));  	if (itP.Y + Control.InfoTip.Height > screen.WorkingArea.Height) {  		itP.Y -= Control.View.RowHeight + 2 + Control.InfoTip.Height;  	}  	if (itP.X + Control.InfoTip.Width > screen.WorkingArea.Width) {  		itP.X -= itP.X + Control.InfoTip.Width - screen.WorkingArea.Width;  	}  	Control.InfoTip.Location = itP;  	Control.InfoTip.Visible = true;  	Debug.WriteLine ("Infotip Made Visible");  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderAll2,The following statement contains a magic number: if (itP == new Point (-1' -1)) {  	Control.InfoTip.Visible = false;  }  else {  	itP.Y += Control.View.RowHeight + 2;  	itP.X += -20;  	itP = Control.PointToScreen (itP);  	Screen screen = Screen.FromPoint (new Point (Control.Right' itP.Y));  	if (itP.Y + Control.InfoTip.Height > screen.WorkingArea.Height) {  		itP.Y -= Control.View.RowHeight + 2 + Control.InfoTip.Height;  	}  	if (itP.X + Control.InfoTip.Width > screen.WorkingArea.Width) {  		itP.X -= itP.X + Control.InfoTip.Width - screen.WorkingArea.Width;  	}  	Control.InfoTip.Location = itP;  	Control.InfoTip.Visible = true;  	Debug.WriteLine ("Infotip Made Visible");  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderAll2,The following statement contains a magic number: itP.Y += Control.View.RowHeight + 2;  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderAll2,The following statement contains a magic number: itP.X += -20;  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderAll2,The following statement contains a magic number: if (itP.Y + Control.InfoTip.Height > screen.WorkingArea.Height) {  	itP.Y -= Control.View.RowHeight + 2 + Control.InfoTip.Height;  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderAll2,The following statement contains a magic number: itP.Y -= Control.View.RowHeight + 2 + Control.InfoTip.Height;  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderCollapsedSelectedText,The following statement contains a magic number: if (Control.ContainsFocus) {  	bbuff.FillRect (Control.SelectionForeColor' xPos + 0' 0' wdh + 2' Control.View.RowHeight);  	bbuff.FillRect (Control.SelectionBackColor' xPos + 1' 1' wdh' Control.View.RowHeight - 2);  }  else {  	bbuff.FillRect (Control.InactiveSelectionForeColor' xPos + 0' 0' wdh + 2' Control.View.RowHeight);  	bbuff.FillRect (Control.InactiveSelectionBackColor' xPos + 1' 1' wdh' Control.View.RowHeight - 2);  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderCollapsedSelectedText,The following statement contains a magic number: if (Control.ContainsFocus) {  	bbuff.FillRect (Control.SelectionForeColor' xPos + 0' 0' wdh + 2' Control.View.RowHeight);  	bbuff.FillRect (Control.SelectionBackColor' xPos + 1' 1' wdh' Control.View.RowHeight - 2);  }  else {  	bbuff.FillRect (Control.InactiveSelectionForeColor' xPos + 0' 0' wdh + 2' Control.View.RowHeight);  	bbuff.FillRect (Control.InactiveSelectionBackColor' xPos + 1' 1' wdh' Control.View.RowHeight - 2);  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderCollapsedSelectedText,The following statement contains a magic number: if (Control.ContainsFocus) {  	bbuff.FillRect (Control.SelectionForeColor' xPos + 0' 0' wdh + 2' Control.View.RowHeight);  	bbuff.FillRect (Control.SelectionBackColor' xPos + 1' 1' wdh' Control.View.RowHeight - 2);  }  else {  	bbuff.FillRect (Control.InactiveSelectionForeColor' xPos + 0' 0' wdh + 2' Control.View.RowHeight);  	bbuff.FillRect (Control.InactiveSelectionBackColor' xPos + 1' 1' wdh' Control.View.RowHeight - 2);  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderCollapsedSelectedText,The following statement contains a magic number: if (Control.ContainsFocus) {  	bbuff.FillRect (Control.SelectionForeColor' xPos + 0' 0' wdh + 2' Control.View.RowHeight);  	bbuff.FillRect (Control.SelectionBackColor' xPos + 1' 1' wdh' Control.View.RowHeight - 2);  }  else {  	bbuff.FillRect (Control.InactiveSelectionForeColor' xPos + 0' 0' wdh + 2' Control.View.RowHeight);  	bbuff.FillRect (Control.InactiveSelectionBackColor' xPos + 1' 1' wdh' Control.View.RowHeight - 2);  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderCollapsedSelectedText,The following statement contains a magic number: bbuff.FillRect (Control.SelectionForeColor' xPos + 0' 0' wdh + 2' Control.View.RowHeight);  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderCollapsedSelectedText,The following statement contains a magic number: bbuff.FillRect (Control.SelectionBackColor' xPos + 1' 1' wdh' Control.View.RowHeight - 2);  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderCollapsedSelectedText,The following statement contains a magic number: bbuff.FillRect (Control.InactiveSelectionForeColor' xPos + 0' 0' wdh + 2' Control.View.RowHeight);  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderCollapsedSelectedText,The following statement contains a magic number: bbuff.FillRect (Control.InactiveSelectionBackColor' xPos + 1' 1' wdh' Control.View.RowHeight - 2);  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderCollapsedSelectedText,The following statement contains a magic number: try {  	if (r.expansion_StartSpan.EndRow != null) {  		if (r.expansion_StartSpan.EndRow.RowState == RowState.SpanParsed)  			Control.Document.Parser.ParseRow (r.expansion_StartSpan.EndRow.Index' true);  		Word last = r.expansion_StartSpan.EndWord;  		xPos += Control.View.FirstVisibleColumn * Control.View.CharWidth;  		r.expansion_StartSpan.EndRow.Expansion_PixelStart = xPos + wdh - Control.View.TextMargin + 2;  		r.Expansion_PixelEnd = xPos - 1;  		RenderSelectedText (Control.Document.IndexOf (r.expansion_StartSpan.EndRow)' r.expansion_StartSpan.EndRow.Expansion_PixelStart' last);  	}  }  catch {  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderCollapsedSelectedText,The following statement contains a magic number: if (r.expansion_StartSpan.EndRow != null) {  	if (r.expansion_StartSpan.EndRow.RowState == RowState.SpanParsed)  		Control.Document.Parser.ParseRow (r.expansion_StartSpan.EndRow.Index' true);  	Word last = r.expansion_StartSpan.EndWord;  	xPos += Control.View.FirstVisibleColumn * Control.View.CharWidth;  	r.expansion_StartSpan.EndRow.Expansion_PixelStart = xPos + wdh - Control.View.TextMargin + 2;  	r.Expansion_PixelEnd = xPos - 1;  	RenderSelectedText (Control.Document.IndexOf (r.expansion_StartSpan.EndRow)' r.expansion_StartSpan.EndRow.Expansion_PixelStart' last);  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderCollapsedSelectedText,The following statement contains a magic number: r.expansion_StartSpan.EndRow.Expansion_PixelStart = xPos + wdh - Control.View.TextMargin + 2;  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderCollapsedText,The following statement contains a magic number: bbuff.FillRect (GFX.OutlineBrush' xPos + 0' 0' wdh + 2' Control.View.RowHeight);  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderCollapsedText,The following statement contains a magic number: bbuff.FillRect (GFX.BackgroundBrush' xPos + 1' 1' wdh' Control.View.RowHeight - 2);  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderCollapsedText,The following statement contains a magic number: try {  	if (r.expansion_StartSpan.EndRow != null) {  		if (r.expansion_StartSpan.EndRow.RowState == RowState.SpanParsed)  			Control.Document.Parser.ParseRow (r.expansion_StartSpan.EndRow.Index' true);  		Word last = r.expansion_StartSpan.EndWord;  		xPos += Control.View.FirstVisibleColumn * Control.View.CharWidth;  		r.expansion_StartSpan.EndRow.Expansion_PixelStart = xPos + wdh - Control.View.TextMargin + 2;  		r.Expansion_PixelEnd = xPos - 1;  		RenderText (Control.Document.IndexOf (r.expansion_StartSpan.EndRow)' r.expansion_StartSpan.EndRow.Expansion_PixelStart' last);  	}  }  catch {  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderCollapsedText,The following statement contains a magic number: if (r.expansion_StartSpan.EndRow != null) {  	if (r.expansion_StartSpan.EndRow.RowState == RowState.SpanParsed)  		Control.Document.Parser.ParseRow (r.expansion_StartSpan.EndRow.Index' true);  	Word last = r.expansion_StartSpan.EndWord;  	xPos += Control.View.FirstVisibleColumn * Control.View.CharWidth;  	r.expansion_StartSpan.EndRow.Expansion_PixelStart = xPos + wdh - Control.View.TextMargin + 2;  	r.Expansion_PixelEnd = xPos - 1;  	RenderText (Control.Document.IndexOf (r.expansion_StartSpan.EndRow)' r.expansion_StartSpan.EndRow.Expansion_PixelStart' last);  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderCollapsedText,The following statement contains a magic number: r.expansion_StartSpan.EndRow.Expansion_PixelStart = xPos + wdh - Control.View.TextMargin + 2;  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderText,The following statement contains a magic number: if (RowIndex <= Control.Document.Count - 1) {  	bbuff.TextForeColor = Color.Black;  	Row xtr = Control.Document [RowIndex];  	//if (xtr.startSpan != null)  	//	bbuff.DrawTabbedString (xtr.startSpan.GetHashCode ().ToString (System.Globalization.CultureInfo.InvariantCulture)'100'0'0'0);  	//bbuff.TextForeColor = Color.Black;  	//bbuff.DrawTabbedString (xtr.Text'(int)(Control.View.TextMargin -Control.View.ClientAreaStart)'1'-Control.View.FirstVisibleColumn*Control.View.CharWidth+Control.View.TextMargin'Control.PixelTabSize);					  	int xpos = Control.View.TextMargin - Control.View.ClientAreaStart + XOffset;  	int wdh = 0;  	int taborig = -Control.View.FirstVisibleColumn * Control.View.CharWidth + Control.View.TextMargin;  	bool ws = Control.ShowWhitespace;  	bool StartDraw = false;  	if (StartWord == null)  		StartDraw = true;  	xtr.Expansion_StartChar = 0;  	xtr.Expansion_EndChar = 0;  	bool HasExpansion = false;  	foreach (Word w in xtr.FormattedWords) {  		if (StartDraw) {  			if (w.Span == xtr.expansion_StartSpan && xtr.expansion_StartSpan != null)  				if (xtr.expansion_StartSpan.Expanded == false) {  					RenderCollapsedText (RowIndex' xpos);  					HasExpansion = true;  					break;  				}  			if ((w.Type == WordType.Space || w.Type == WordType.Tab) && !DrawBreakpoint && Control.ShowTabGuides) {  				int xtab = xpos - (Control.View.TextMargin - Control.View.ClientAreaStart + XOffset);  				if ((xtab / (double)Control.PixelTabSize) == (xtab / Control.PixelTabSize))  					bbuff.FillRect (Control.TabGuideColor' xpos' 0' 1' Control.View.RowHeight);  			}  			if (w.Type == WordType.Word || ws == false) {  				if (w.Style != null) {  					SetFont (w.Style.Bold' w.Style.Italic' w.Style.Underline' bbuff);  					bbuff.TextBackColor = w.Style.BackColor;  					bbuff.TextForeColor = w.Style.ForeColor;  					bbuff.FontTransparent = w.Style.Transparent;  				}  				else {  					bbuff.Font = GFX.FontNormal;  					bbuff.TextForeColor = Color.Black;  					bbuff.FontTransparent = true;  				}  				if (w.Type == WordType.Word)  					DrawBreakpoint = true;  				if (xtr.Breakpoint && DrawBreakpoint) {  					bbuff.TextForeColor = Control.BreakPointForeColor;  					bbuff.TextBackColor = Control.BreakPointBackColor;  					bbuff.FontTransparent = false;  				}  				if (Control.BracketMatching && (w == BracketEnd || w == BracketStart)) {  					bbuff.TextForeColor = Control.BracketForeColor;  					if (Control.BracketBackColor != Color.Transparent) {  						bbuff.TextBackColor = Control.BracketBackColor;  						bbuff.FontTransparent = false;  					}  					wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  					if (Control.BracketBorderColor != Color.Transparent) {  						bbuff.DrawRect (Control.BracketBorderColor' xpos - 1' 0' wdh' Control.View.RowHeight - 1);  					}  				}  				else {  					wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  				}  				//render errors  				if (w.HasError) {  					//bbuff.FillRect (Color.Red'xpos'Control.View.RowHeight-2'wdh'2);  					int ey = Control.View.RowHeight - 1;  					Color c = w.ErrorColor;  					for (int x = 0; x < wdh + 3; x += 4) {  						bbuff.DrawLine (c' new Point (xpos + x' ey)' new Point (xpos + x + 2' ey - 2));  						bbuff.DrawLine (c' new Point (xpos + x + 2' ey - 2)' new Point (xpos + x + 4' ey));  					}  				}  			}  			else if (w.Type == WordType.Space) {  				bbuff.Font = GFX.FontNormal;  				bbuff.TextForeColor = Control.WhitespaceColor;  				bbuff.FontTransparent = true;  				if (xtr.Breakpoint && DrawBreakpoint) {  					bbuff.TextForeColor = Control.BreakPointForeColor;  					bbuff.TextBackColor = Control.BreakPointBackColor;  					bbuff.FontTransparent = false;  				}  				bbuff.DrawTabbedString ("�"' xpos' 0' taborig' Control.PixelTabSize);  				wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  			}  			else if (w.Type == WordType.Tab) {  				bbuff.Font = GFX.FontNormal;  				bbuff.TextForeColor = Control.WhitespaceColor;  				bbuff.FontTransparent = true;  				if (xtr.Breakpoint && DrawBreakpoint) {  					bbuff.TextForeColor = Control.BreakPointForeColor;  					bbuff.TextBackColor = Control.BreakPointBackColor;  					bbuff.FontTransparent = false;  				}  				bbuff.DrawTabbedString ("�"' xpos' 0' taborig' Control.PixelTabSize);  				wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  			}  			if (w.Pattern != null)  				if (w.Pattern.IsSeparator) {  					bbuff.FillRect (Control.SeparatorColor' Control.View.TextMargin - 4' Control.View.RowHeight - 1' Control.View.ClientAreaWidth' 1);  				}  			xpos += wdh;  		}  		if (!StartDraw)  			xtr.Expansion_StartChar += w.Text.Length;  		if (w == StartWord)  			StartDraw = true;  		xtr.Expansion_EndChar += w.Text.Length;  	}  	if (xtr.IsCollapsed) {  	}  	else if (xtr.endSpan != null && xtr.endSpan.spanDefinition != null && xtr.endSpan.spanDefinition.Style != null) {  		bbuff.FillRect (xtr.endSpan.spanDefinition.Style.BackColor' xpos' 0' Control.Width - xpos' Control.View.RowHeight);  	}  	if (Control._SyntaxBox.ShowEOLMarker && !HasExpansion) {  		bbuff.Font = GFX.FontNormal;  		bbuff.TextForeColor = Control._SyntaxBox.EOLMarkerColor;  		bbuff.FontTransparent = true;  		bbuff.DrawTabbedString ("�"' xpos' 0' taborig' Control.PixelTabSize);  	}  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderText,The following statement contains a magic number: if (RowIndex <= Control.Document.Count - 1) {  	bbuff.TextForeColor = Color.Black;  	Row xtr = Control.Document [RowIndex];  	//if (xtr.startSpan != null)  	//	bbuff.DrawTabbedString (xtr.startSpan.GetHashCode ().ToString (System.Globalization.CultureInfo.InvariantCulture)'100'0'0'0);  	//bbuff.TextForeColor = Color.Black;  	//bbuff.DrawTabbedString (xtr.Text'(int)(Control.View.TextMargin -Control.View.ClientAreaStart)'1'-Control.View.FirstVisibleColumn*Control.View.CharWidth+Control.View.TextMargin'Control.PixelTabSize);					  	int xpos = Control.View.TextMargin - Control.View.ClientAreaStart + XOffset;  	int wdh = 0;  	int taborig = -Control.View.FirstVisibleColumn * Control.View.CharWidth + Control.View.TextMargin;  	bool ws = Control.ShowWhitespace;  	bool StartDraw = false;  	if (StartWord == null)  		StartDraw = true;  	xtr.Expansion_StartChar = 0;  	xtr.Expansion_EndChar = 0;  	bool HasExpansion = false;  	foreach (Word w in xtr.FormattedWords) {  		if (StartDraw) {  			if (w.Span == xtr.expansion_StartSpan && xtr.expansion_StartSpan != null)  				if (xtr.expansion_StartSpan.Expanded == false) {  					RenderCollapsedText (RowIndex' xpos);  					HasExpansion = true;  					break;  				}  			if ((w.Type == WordType.Space || w.Type == WordType.Tab) && !DrawBreakpoint && Control.ShowTabGuides) {  				int xtab = xpos - (Control.View.TextMargin - Control.View.ClientAreaStart + XOffset);  				if ((xtab / (double)Control.PixelTabSize) == (xtab / Control.PixelTabSize))  					bbuff.FillRect (Control.TabGuideColor' xpos' 0' 1' Control.View.RowHeight);  			}  			if (w.Type == WordType.Word || ws == false) {  				if (w.Style != null) {  					SetFont (w.Style.Bold' w.Style.Italic' w.Style.Underline' bbuff);  					bbuff.TextBackColor = w.Style.BackColor;  					bbuff.TextForeColor = w.Style.ForeColor;  					bbuff.FontTransparent = w.Style.Transparent;  				}  				else {  					bbuff.Font = GFX.FontNormal;  					bbuff.TextForeColor = Color.Black;  					bbuff.FontTransparent = true;  				}  				if (w.Type == WordType.Word)  					DrawBreakpoint = true;  				if (xtr.Breakpoint && DrawBreakpoint) {  					bbuff.TextForeColor = Control.BreakPointForeColor;  					bbuff.TextBackColor = Control.BreakPointBackColor;  					bbuff.FontTransparent = false;  				}  				if (Control.BracketMatching && (w == BracketEnd || w == BracketStart)) {  					bbuff.TextForeColor = Control.BracketForeColor;  					if (Control.BracketBackColor != Color.Transparent) {  						bbuff.TextBackColor = Control.BracketBackColor;  						bbuff.FontTransparent = false;  					}  					wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  					if (Control.BracketBorderColor != Color.Transparent) {  						bbuff.DrawRect (Control.BracketBorderColor' xpos - 1' 0' wdh' Control.View.RowHeight - 1);  					}  				}  				else {  					wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  				}  				//render errors  				if (w.HasError) {  					//bbuff.FillRect (Color.Red'xpos'Control.View.RowHeight-2'wdh'2);  					int ey = Control.View.RowHeight - 1;  					Color c = w.ErrorColor;  					for (int x = 0; x < wdh + 3; x += 4) {  						bbuff.DrawLine (c' new Point (xpos + x' ey)' new Point (xpos + x + 2' ey - 2));  						bbuff.DrawLine (c' new Point (xpos + x + 2' ey - 2)' new Point (xpos + x + 4' ey));  					}  				}  			}  			else if (w.Type == WordType.Space) {  				bbuff.Font = GFX.FontNormal;  				bbuff.TextForeColor = Control.WhitespaceColor;  				bbuff.FontTransparent = true;  				if (xtr.Breakpoint && DrawBreakpoint) {  					bbuff.TextForeColor = Control.BreakPointForeColor;  					bbuff.TextBackColor = Control.BreakPointBackColor;  					bbuff.FontTransparent = false;  				}  				bbuff.DrawTabbedString ("�"' xpos' 0' taborig' Control.PixelTabSize);  				wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  			}  			else if (w.Type == WordType.Tab) {  				bbuff.Font = GFX.FontNormal;  				bbuff.TextForeColor = Control.WhitespaceColor;  				bbuff.FontTransparent = true;  				if (xtr.Breakpoint && DrawBreakpoint) {  					bbuff.TextForeColor = Control.BreakPointForeColor;  					bbuff.TextBackColor = Control.BreakPointBackColor;  					bbuff.FontTransparent = false;  				}  				bbuff.DrawTabbedString ("�"' xpos' 0' taborig' Control.PixelTabSize);  				wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  			}  			if (w.Pattern != null)  				if (w.Pattern.IsSeparator) {  					bbuff.FillRect (Control.SeparatorColor' Control.View.TextMargin - 4' Control.View.RowHeight - 1' Control.View.ClientAreaWidth' 1);  				}  			xpos += wdh;  		}  		if (!StartDraw)  			xtr.Expansion_StartChar += w.Text.Length;  		if (w == StartWord)  			StartDraw = true;  		xtr.Expansion_EndChar += w.Text.Length;  	}  	if (xtr.IsCollapsed) {  	}  	else if (xtr.endSpan != null && xtr.endSpan.spanDefinition != null && xtr.endSpan.spanDefinition.Style != null) {  		bbuff.FillRect (xtr.endSpan.spanDefinition.Style.BackColor' xpos' 0' Control.Width - xpos' Control.View.RowHeight);  	}  	if (Control._SyntaxBox.ShowEOLMarker && !HasExpansion) {  		bbuff.Font = GFX.FontNormal;  		bbuff.TextForeColor = Control._SyntaxBox.EOLMarkerColor;  		bbuff.FontTransparent = true;  		bbuff.DrawTabbedString ("�"' xpos' 0' taborig' Control.PixelTabSize);  	}  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderText,The following statement contains a magic number: if (RowIndex <= Control.Document.Count - 1) {  	bbuff.TextForeColor = Color.Black;  	Row xtr = Control.Document [RowIndex];  	//if (xtr.startSpan != null)  	//	bbuff.DrawTabbedString (xtr.startSpan.GetHashCode ().ToString (System.Globalization.CultureInfo.InvariantCulture)'100'0'0'0);  	//bbuff.TextForeColor = Color.Black;  	//bbuff.DrawTabbedString (xtr.Text'(int)(Control.View.TextMargin -Control.View.ClientAreaStart)'1'-Control.View.FirstVisibleColumn*Control.View.CharWidth+Control.View.TextMargin'Control.PixelTabSize);					  	int xpos = Control.View.TextMargin - Control.View.ClientAreaStart + XOffset;  	int wdh = 0;  	int taborig = -Control.View.FirstVisibleColumn * Control.View.CharWidth + Control.View.TextMargin;  	bool ws = Control.ShowWhitespace;  	bool StartDraw = false;  	if (StartWord == null)  		StartDraw = true;  	xtr.Expansion_StartChar = 0;  	xtr.Expansion_EndChar = 0;  	bool HasExpansion = false;  	foreach (Word w in xtr.FormattedWords) {  		if (StartDraw) {  			if (w.Span == xtr.expansion_StartSpan && xtr.expansion_StartSpan != null)  				if (xtr.expansion_StartSpan.Expanded == false) {  					RenderCollapsedText (RowIndex' xpos);  					HasExpansion = true;  					break;  				}  			if ((w.Type == WordType.Space || w.Type == WordType.Tab) && !DrawBreakpoint && Control.ShowTabGuides) {  				int xtab = xpos - (Control.View.TextMargin - Control.View.ClientAreaStart + XOffset);  				if ((xtab / (double)Control.PixelTabSize) == (xtab / Control.PixelTabSize))  					bbuff.FillRect (Control.TabGuideColor' xpos' 0' 1' Control.View.RowHeight);  			}  			if (w.Type == WordType.Word || ws == false) {  				if (w.Style != null) {  					SetFont (w.Style.Bold' w.Style.Italic' w.Style.Underline' bbuff);  					bbuff.TextBackColor = w.Style.BackColor;  					bbuff.TextForeColor = w.Style.ForeColor;  					bbuff.FontTransparent = w.Style.Transparent;  				}  				else {  					bbuff.Font = GFX.FontNormal;  					bbuff.TextForeColor = Color.Black;  					bbuff.FontTransparent = true;  				}  				if (w.Type == WordType.Word)  					DrawBreakpoint = true;  				if (xtr.Breakpoint && DrawBreakpoint) {  					bbuff.TextForeColor = Control.BreakPointForeColor;  					bbuff.TextBackColor = Control.BreakPointBackColor;  					bbuff.FontTransparent = false;  				}  				if (Control.BracketMatching && (w == BracketEnd || w == BracketStart)) {  					bbuff.TextForeColor = Control.BracketForeColor;  					if (Control.BracketBackColor != Color.Transparent) {  						bbuff.TextBackColor = Control.BracketBackColor;  						bbuff.FontTransparent = false;  					}  					wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  					if (Control.BracketBorderColor != Color.Transparent) {  						bbuff.DrawRect (Control.BracketBorderColor' xpos - 1' 0' wdh' Control.View.RowHeight - 1);  					}  				}  				else {  					wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  				}  				//render errors  				if (w.HasError) {  					//bbuff.FillRect (Color.Red'xpos'Control.View.RowHeight-2'wdh'2);  					int ey = Control.View.RowHeight - 1;  					Color c = w.ErrorColor;  					for (int x = 0; x < wdh + 3; x += 4) {  						bbuff.DrawLine (c' new Point (xpos + x' ey)' new Point (xpos + x + 2' ey - 2));  						bbuff.DrawLine (c' new Point (xpos + x + 2' ey - 2)' new Point (xpos + x + 4' ey));  					}  				}  			}  			else if (w.Type == WordType.Space) {  				bbuff.Font = GFX.FontNormal;  				bbuff.TextForeColor = Control.WhitespaceColor;  				bbuff.FontTransparent = true;  				if (xtr.Breakpoint && DrawBreakpoint) {  					bbuff.TextForeColor = Control.BreakPointForeColor;  					bbuff.TextBackColor = Control.BreakPointBackColor;  					bbuff.FontTransparent = false;  				}  				bbuff.DrawTabbedString ("�"' xpos' 0' taborig' Control.PixelTabSize);  				wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  			}  			else if (w.Type == WordType.Tab) {  				bbuff.Font = GFX.FontNormal;  				bbuff.TextForeColor = Control.WhitespaceColor;  				bbuff.FontTransparent = true;  				if (xtr.Breakpoint && DrawBreakpoint) {  					bbuff.TextForeColor = Control.BreakPointForeColor;  					bbuff.TextBackColor = Control.BreakPointBackColor;  					bbuff.FontTransparent = false;  				}  				bbuff.DrawTabbedString ("�"' xpos' 0' taborig' Control.PixelTabSize);  				wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  			}  			if (w.Pattern != null)  				if (w.Pattern.IsSeparator) {  					bbuff.FillRect (Control.SeparatorColor' Control.View.TextMargin - 4' Control.View.RowHeight - 1' Control.View.ClientAreaWidth' 1);  				}  			xpos += wdh;  		}  		if (!StartDraw)  			xtr.Expansion_StartChar += w.Text.Length;  		if (w == StartWord)  			StartDraw = true;  		xtr.Expansion_EndChar += w.Text.Length;  	}  	if (xtr.IsCollapsed) {  	}  	else if (xtr.endSpan != null && xtr.endSpan.spanDefinition != null && xtr.endSpan.spanDefinition.Style != null) {  		bbuff.FillRect (xtr.endSpan.spanDefinition.Style.BackColor' xpos' 0' Control.Width - xpos' Control.View.RowHeight);  	}  	if (Control._SyntaxBox.ShowEOLMarker && !HasExpansion) {  		bbuff.Font = GFX.FontNormal;  		bbuff.TextForeColor = Control._SyntaxBox.EOLMarkerColor;  		bbuff.FontTransparent = true;  		bbuff.DrawTabbedString ("�"' xpos' 0' taborig' Control.PixelTabSize);  	}  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderText,The following statement contains a magic number: if (RowIndex <= Control.Document.Count - 1) {  	bbuff.TextForeColor = Color.Black;  	Row xtr = Control.Document [RowIndex];  	//if (xtr.startSpan != null)  	//	bbuff.DrawTabbedString (xtr.startSpan.GetHashCode ().ToString (System.Globalization.CultureInfo.InvariantCulture)'100'0'0'0);  	//bbuff.TextForeColor = Color.Black;  	//bbuff.DrawTabbedString (xtr.Text'(int)(Control.View.TextMargin -Control.View.ClientAreaStart)'1'-Control.View.FirstVisibleColumn*Control.View.CharWidth+Control.View.TextMargin'Control.PixelTabSize);					  	int xpos = Control.View.TextMargin - Control.View.ClientAreaStart + XOffset;  	int wdh = 0;  	int taborig = -Control.View.FirstVisibleColumn * Control.View.CharWidth + Control.View.TextMargin;  	bool ws = Control.ShowWhitespace;  	bool StartDraw = false;  	if (StartWord == null)  		StartDraw = true;  	xtr.Expansion_StartChar = 0;  	xtr.Expansion_EndChar = 0;  	bool HasExpansion = false;  	foreach (Word w in xtr.FormattedWords) {  		if (StartDraw) {  			if (w.Span == xtr.expansion_StartSpan && xtr.expansion_StartSpan != null)  				if (xtr.expansion_StartSpan.Expanded == false) {  					RenderCollapsedText (RowIndex' xpos);  					HasExpansion = true;  					break;  				}  			if ((w.Type == WordType.Space || w.Type == WordType.Tab) && !DrawBreakpoint && Control.ShowTabGuides) {  				int xtab = xpos - (Control.View.TextMargin - Control.View.ClientAreaStart + XOffset);  				if ((xtab / (double)Control.PixelTabSize) == (xtab / Control.PixelTabSize))  					bbuff.FillRect (Control.TabGuideColor' xpos' 0' 1' Control.View.RowHeight);  			}  			if (w.Type == WordType.Word || ws == false) {  				if (w.Style != null) {  					SetFont (w.Style.Bold' w.Style.Italic' w.Style.Underline' bbuff);  					bbuff.TextBackColor = w.Style.BackColor;  					bbuff.TextForeColor = w.Style.ForeColor;  					bbuff.FontTransparent = w.Style.Transparent;  				}  				else {  					bbuff.Font = GFX.FontNormal;  					bbuff.TextForeColor = Color.Black;  					bbuff.FontTransparent = true;  				}  				if (w.Type == WordType.Word)  					DrawBreakpoint = true;  				if (xtr.Breakpoint && DrawBreakpoint) {  					bbuff.TextForeColor = Control.BreakPointForeColor;  					bbuff.TextBackColor = Control.BreakPointBackColor;  					bbuff.FontTransparent = false;  				}  				if (Control.BracketMatching && (w == BracketEnd || w == BracketStart)) {  					bbuff.TextForeColor = Control.BracketForeColor;  					if (Control.BracketBackColor != Color.Transparent) {  						bbuff.TextBackColor = Control.BracketBackColor;  						bbuff.FontTransparent = false;  					}  					wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  					if (Control.BracketBorderColor != Color.Transparent) {  						bbuff.DrawRect (Control.BracketBorderColor' xpos - 1' 0' wdh' Control.View.RowHeight - 1);  					}  				}  				else {  					wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  				}  				//render errors  				if (w.HasError) {  					//bbuff.FillRect (Color.Red'xpos'Control.View.RowHeight-2'wdh'2);  					int ey = Control.View.RowHeight - 1;  					Color c = w.ErrorColor;  					for (int x = 0; x < wdh + 3; x += 4) {  						bbuff.DrawLine (c' new Point (xpos + x' ey)' new Point (xpos + x + 2' ey - 2));  						bbuff.DrawLine (c' new Point (xpos + x + 2' ey - 2)' new Point (xpos + x + 4' ey));  					}  				}  			}  			else if (w.Type == WordType.Space) {  				bbuff.Font = GFX.FontNormal;  				bbuff.TextForeColor = Control.WhitespaceColor;  				bbuff.FontTransparent = true;  				if (xtr.Breakpoint && DrawBreakpoint) {  					bbuff.TextForeColor = Control.BreakPointForeColor;  					bbuff.TextBackColor = Control.BreakPointBackColor;  					bbuff.FontTransparent = false;  				}  				bbuff.DrawTabbedString ("�"' xpos' 0' taborig' Control.PixelTabSize);  				wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  			}  			else if (w.Type == WordType.Tab) {  				bbuff.Font = GFX.FontNormal;  				bbuff.TextForeColor = Control.WhitespaceColor;  				bbuff.FontTransparent = true;  				if (xtr.Breakpoint && DrawBreakpoint) {  					bbuff.TextForeColor = Control.BreakPointForeColor;  					bbuff.TextBackColor = Control.BreakPointBackColor;  					bbuff.FontTransparent = false;  				}  				bbuff.DrawTabbedString ("�"' xpos' 0' taborig' Control.PixelTabSize);  				wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  			}  			if (w.Pattern != null)  				if (w.Pattern.IsSeparator) {  					bbuff.FillRect (Control.SeparatorColor' Control.View.TextMargin - 4' Control.View.RowHeight - 1' Control.View.ClientAreaWidth' 1);  				}  			xpos += wdh;  		}  		if (!StartDraw)  			xtr.Expansion_StartChar += w.Text.Length;  		if (w == StartWord)  			StartDraw = true;  		xtr.Expansion_EndChar += w.Text.Length;  	}  	if (xtr.IsCollapsed) {  	}  	else if (xtr.endSpan != null && xtr.endSpan.spanDefinition != null && xtr.endSpan.spanDefinition.Style != null) {  		bbuff.FillRect (xtr.endSpan.spanDefinition.Style.BackColor' xpos' 0' Control.Width - xpos' Control.View.RowHeight);  	}  	if (Control._SyntaxBox.ShowEOLMarker && !HasExpansion) {  		bbuff.Font = GFX.FontNormal;  		bbuff.TextForeColor = Control._SyntaxBox.EOLMarkerColor;  		bbuff.FontTransparent = true;  		bbuff.DrawTabbedString ("�"' xpos' 0' taborig' Control.PixelTabSize);  	}  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderText,The following statement contains a magic number: if (RowIndex <= Control.Document.Count - 1) {  	bbuff.TextForeColor = Color.Black;  	Row xtr = Control.Document [RowIndex];  	//if (xtr.startSpan != null)  	//	bbuff.DrawTabbedString (xtr.startSpan.GetHashCode ().ToString (System.Globalization.CultureInfo.InvariantCulture)'100'0'0'0);  	//bbuff.TextForeColor = Color.Black;  	//bbuff.DrawTabbedString (xtr.Text'(int)(Control.View.TextMargin -Control.View.ClientAreaStart)'1'-Control.View.FirstVisibleColumn*Control.View.CharWidth+Control.View.TextMargin'Control.PixelTabSize);					  	int xpos = Control.View.TextMargin - Control.View.ClientAreaStart + XOffset;  	int wdh = 0;  	int taborig = -Control.View.FirstVisibleColumn * Control.View.CharWidth + Control.View.TextMargin;  	bool ws = Control.ShowWhitespace;  	bool StartDraw = false;  	if (StartWord == null)  		StartDraw = true;  	xtr.Expansion_StartChar = 0;  	xtr.Expansion_EndChar = 0;  	bool HasExpansion = false;  	foreach (Word w in xtr.FormattedWords) {  		if (StartDraw) {  			if (w.Span == xtr.expansion_StartSpan && xtr.expansion_StartSpan != null)  				if (xtr.expansion_StartSpan.Expanded == false) {  					RenderCollapsedText (RowIndex' xpos);  					HasExpansion = true;  					break;  				}  			if ((w.Type == WordType.Space || w.Type == WordType.Tab) && !DrawBreakpoint && Control.ShowTabGuides) {  				int xtab = xpos - (Control.View.TextMargin - Control.View.ClientAreaStart + XOffset);  				if ((xtab / (double)Control.PixelTabSize) == (xtab / Control.PixelTabSize))  					bbuff.FillRect (Control.TabGuideColor' xpos' 0' 1' Control.View.RowHeight);  			}  			if (w.Type == WordType.Word || ws == false) {  				if (w.Style != null) {  					SetFont (w.Style.Bold' w.Style.Italic' w.Style.Underline' bbuff);  					bbuff.TextBackColor = w.Style.BackColor;  					bbuff.TextForeColor = w.Style.ForeColor;  					bbuff.FontTransparent = w.Style.Transparent;  				}  				else {  					bbuff.Font = GFX.FontNormal;  					bbuff.TextForeColor = Color.Black;  					bbuff.FontTransparent = true;  				}  				if (w.Type == WordType.Word)  					DrawBreakpoint = true;  				if (xtr.Breakpoint && DrawBreakpoint) {  					bbuff.TextForeColor = Control.BreakPointForeColor;  					bbuff.TextBackColor = Control.BreakPointBackColor;  					bbuff.FontTransparent = false;  				}  				if (Control.BracketMatching && (w == BracketEnd || w == BracketStart)) {  					bbuff.TextForeColor = Control.BracketForeColor;  					if (Control.BracketBackColor != Color.Transparent) {  						bbuff.TextBackColor = Control.BracketBackColor;  						bbuff.FontTransparent = false;  					}  					wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  					if (Control.BracketBorderColor != Color.Transparent) {  						bbuff.DrawRect (Control.BracketBorderColor' xpos - 1' 0' wdh' Control.View.RowHeight - 1);  					}  				}  				else {  					wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  				}  				//render errors  				if (w.HasError) {  					//bbuff.FillRect (Color.Red'xpos'Control.View.RowHeight-2'wdh'2);  					int ey = Control.View.RowHeight - 1;  					Color c = w.ErrorColor;  					for (int x = 0; x < wdh + 3; x += 4) {  						bbuff.DrawLine (c' new Point (xpos + x' ey)' new Point (xpos + x + 2' ey - 2));  						bbuff.DrawLine (c' new Point (xpos + x + 2' ey - 2)' new Point (xpos + x + 4' ey));  					}  				}  			}  			else if (w.Type == WordType.Space) {  				bbuff.Font = GFX.FontNormal;  				bbuff.TextForeColor = Control.WhitespaceColor;  				bbuff.FontTransparent = true;  				if (xtr.Breakpoint && DrawBreakpoint) {  					bbuff.TextForeColor = Control.BreakPointForeColor;  					bbuff.TextBackColor = Control.BreakPointBackColor;  					bbuff.FontTransparent = false;  				}  				bbuff.DrawTabbedString ("�"' xpos' 0' taborig' Control.PixelTabSize);  				wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  			}  			else if (w.Type == WordType.Tab) {  				bbuff.Font = GFX.FontNormal;  				bbuff.TextForeColor = Control.WhitespaceColor;  				bbuff.FontTransparent = true;  				if (xtr.Breakpoint && DrawBreakpoint) {  					bbuff.TextForeColor = Control.BreakPointForeColor;  					bbuff.TextBackColor = Control.BreakPointBackColor;  					bbuff.FontTransparent = false;  				}  				bbuff.DrawTabbedString ("�"' xpos' 0' taborig' Control.PixelTabSize);  				wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  			}  			if (w.Pattern != null)  				if (w.Pattern.IsSeparator) {  					bbuff.FillRect (Control.SeparatorColor' Control.View.TextMargin - 4' Control.View.RowHeight - 1' Control.View.ClientAreaWidth' 1);  				}  			xpos += wdh;  		}  		if (!StartDraw)  			xtr.Expansion_StartChar += w.Text.Length;  		if (w == StartWord)  			StartDraw = true;  		xtr.Expansion_EndChar += w.Text.Length;  	}  	if (xtr.IsCollapsed) {  	}  	else if (xtr.endSpan != null && xtr.endSpan.spanDefinition != null && xtr.endSpan.spanDefinition.Style != null) {  		bbuff.FillRect (xtr.endSpan.spanDefinition.Style.BackColor' xpos' 0' Control.Width - xpos' Control.View.RowHeight);  	}  	if (Control._SyntaxBox.ShowEOLMarker && !HasExpansion) {  		bbuff.Font = GFX.FontNormal;  		bbuff.TextForeColor = Control._SyntaxBox.EOLMarkerColor;  		bbuff.FontTransparent = true;  		bbuff.DrawTabbedString ("�"' xpos' 0' taborig' Control.PixelTabSize);  	}  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderText,The following statement contains a magic number: if (RowIndex <= Control.Document.Count - 1) {  	bbuff.TextForeColor = Color.Black;  	Row xtr = Control.Document [RowIndex];  	//if (xtr.startSpan != null)  	//	bbuff.DrawTabbedString (xtr.startSpan.GetHashCode ().ToString (System.Globalization.CultureInfo.InvariantCulture)'100'0'0'0);  	//bbuff.TextForeColor = Color.Black;  	//bbuff.DrawTabbedString (xtr.Text'(int)(Control.View.TextMargin -Control.View.ClientAreaStart)'1'-Control.View.FirstVisibleColumn*Control.View.CharWidth+Control.View.TextMargin'Control.PixelTabSize);					  	int xpos = Control.View.TextMargin - Control.View.ClientAreaStart + XOffset;  	int wdh = 0;  	int taborig = -Control.View.FirstVisibleColumn * Control.View.CharWidth + Control.View.TextMargin;  	bool ws = Control.ShowWhitespace;  	bool StartDraw = false;  	if (StartWord == null)  		StartDraw = true;  	xtr.Expansion_StartChar = 0;  	xtr.Expansion_EndChar = 0;  	bool HasExpansion = false;  	foreach (Word w in xtr.FormattedWords) {  		if (StartDraw) {  			if (w.Span == xtr.expansion_StartSpan && xtr.expansion_StartSpan != null)  				if (xtr.expansion_StartSpan.Expanded == false) {  					RenderCollapsedText (RowIndex' xpos);  					HasExpansion = true;  					break;  				}  			if ((w.Type == WordType.Space || w.Type == WordType.Tab) && !DrawBreakpoint && Control.ShowTabGuides) {  				int xtab = xpos - (Control.View.TextMargin - Control.View.ClientAreaStart + XOffset);  				if ((xtab / (double)Control.PixelTabSize) == (xtab / Control.PixelTabSize))  					bbuff.FillRect (Control.TabGuideColor' xpos' 0' 1' Control.View.RowHeight);  			}  			if (w.Type == WordType.Word || ws == false) {  				if (w.Style != null) {  					SetFont (w.Style.Bold' w.Style.Italic' w.Style.Underline' bbuff);  					bbuff.TextBackColor = w.Style.BackColor;  					bbuff.TextForeColor = w.Style.ForeColor;  					bbuff.FontTransparent = w.Style.Transparent;  				}  				else {  					bbuff.Font = GFX.FontNormal;  					bbuff.TextForeColor = Color.Black;  					bbuff.FontTransparent = true;  				}  				if (w.Type == WordType.Word)  					DrawBreakpoint = true;  				if (xtr.Breakpoint && DrawBreakpoint) {  					bbuff.TextForeColor = Control.BreakPointForeColor;  					bbuff.TextBackColor = Control.BreakPointBackColor;  					bbuff.FontTransparent = false;  				}  				if (Control.BracketMatching && (w == BracketEnd || w == BracketStart)) {  					bbuff.TextForeColor = Control.BracketForeColor;  					if (Control.BracketBackColor != Color.Transparent) {  						bbuff.TextBackColor = Control.BracketBackColor;  						bbuff.FontTransparent = false;  					}  					wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  					if (Control.BracketBorderColor != Color.Transparent) {  						bbuff.DrawRect (Control.BracketBorderColor' xpos - 1' 0' wdh' Control.View.RowHeight - 1);  					}  				}  				else {  					wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  				}  				//render errors  				if (w.HasError) {  					//bbuff.FillRect (Color.Red'xpos'Control.View.RowHeight-2'wdh'2);  					int ey = Control.View.RowHeight - 1;  					Color c = w.ErrorColor;  					for (int x = 0; x < wdh + 3; x += 4) {  						bbuff.DrawLine (c' new Point (xpos + x' ey)' new Point (xpos + x + 2' ey - 2));  						bbuff.DrawLine (c' new Point (xpos + x + 2' ey - 2)' new Point (xpos + x + 4' ey));  					}  				}  			}  			else if (w.Type == WordType.Space) {  				bbuff.Font = GFX.FontNormal;  				bbuff.TextForeColor = Control.WhitespaceColor;  				bbuff.FontTransparent = true;  				if (xtr.Breakpoint && DrawBreakpoint) {  					bbuff.TextForeColor = Control.BreakPointForeColor;  					bbuff.TextBackColor = Control.BreakPointBackColor;  					bbuff.FontTransparent = false;  				}  				bbuff.DrawTabbedString ("�"' xpos' 0' taborig' Control.PixelTabSize);  				wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  			}  			else if (w.Type == WordType.Tab) {  				bbuff.Font = GFX.FontNormal;  				bbuff.TextForeColor = Control.WhitespaceColor;  				bbuff.FontTransparent = true;  				if (xtr.Breakpoint && DrawBreakpoint) {  					bbuff.TextForeColor = Control.BreakPointForeColor;  					bbuff.TextBackColor = Control.BreakPointBackColor;  					bbuff.FontTransparent = false;  				}  				bbuff.DrawTabbedString ("�"' xpos' 0' taborig' Control.PixelTabSize);  				wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  			}  			if (w.Pattern != null)  				if (w.Pattern.IsSeparator) {  					bbuff.FillRect (Control.SeparatorColor' Control.View.TextMargin - 4' Control.View.RowHeight - 1' Control.View.ClientAreaWidth' 1);  				}  			xpos += wdh;  		}  		if (!StartDraw)  			xtr.Expansion_StartChar += w.Text.Length;  		if (w == StartWord)  			StartDraw = true;  		xtr.Expansion_EndChar += w.Text.Length;  	}  	if (xtr.IsCollapsed) {  	}  	else if (xtr.endSpan != null && xtr.endSpan.spanDefinition != null && xtr.endSpan.spanDefinition.Style != null) {  		bbuff.FillRect (xtr.endSpan.spanDefinition.Style.BackColor' xpos' 0' Control.Width - xpos' Control.View.RowHeight);  	}  	if (Control._SyntaxBox.ShowEOLMarker && !HasExpansion) {  		bbuff.Font = GFX.FontNormal;  		bbuff.TextForeColor = Control._SyntaxBox.EOLMarkerColor;  		bbuff.FontTransparent = true;  		bbuff.DrawTabbedString ("�"' xpos' 0' taborig' Control.PixelTabSize);  	}  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderText,The following statement contains a magic number: if (RowIndex <= Control.Document.Count - 1) {  	bbuff.TextForeColor = Color.Black;  	Row xtr = Control.Document [RowIndex];  	//if (xtr.startSpan != null)  	//	bbuff.DrawTabbedString (xtr.startSpan.GetHashCode ().ToString (System.Globalization.CultureInfo.InvariantCulture)'100'0'0'0);  	//bbuff.TextForeColor = Color.Black;  	//bbuff.DrawTabbedString (xtr.Text'(int)(Control.View.TextMargin -Control.View.ClientAreaStart)'1'-Control.View.FirstVisibleColumn*Control.View.CharWidth+Control.View.TextMargin'Control.PixelTabSize);					  	int xpos = Control.View.TextMargin - Control.View.ClientAreaStart + XOffset;  	int wdh = 0;  	int taborig = -Control.View.FirstVisibleColumn * Control.View.CharWidth + Control.View.TextMargin;  	bool ws = Control.ShowWhitespace;  	bool StartDraw = false;  	if (StartWord == null)  		StartDraw = true;  	xtr.Expansion_StartChar = 0;  	xtr.Expansion_EndChar = 0;  	bool HasExpansion = false;  	foreach (Word w in xtr.FormattedWords) {  		if (StartDraw) {  			if (w.Span == xtr.expansion_StartSpan && xtr.expansion_StartSpan != null)  				if (xtr.expansion_StartSpan.Expanded == false) {  					RenderCollapsedText (RowIndex' xpos);  					HasExpansion = true;  					break;  				}  			if ((w.Type == WordType.Space || w.Type == WordType.Tab) && !DrawBreakpoint && Control.ShowTabGuides) {  				int xtab = xpos - (Control.View.TextMargin - Control.View.ClientAreaStart + XOffset);  				if ((xtab / (double)Control.PixelTabSize) == (xtab / Control.PixelTabSize))  					bbuff.FillRect (Control.TabGuideColor' xpos' 0' 1' Control.View.RowHeight);  			}  			if (w.Type == WordType.Word || ws == false) {  				if (w.Style != null) {  					SetFont (w.Style.Bold' w.Style.Italic' w.Style.Underline' bbuff);  					bbuff.TextBackColor = w.Style.BackColor;  					bbuff.TextForeColor = w.Style.ForeColor;  					bbuff.FontTransparent = w.Style.Transparent;  				}  				else {  					bbuff.Font = GFX.FontNormal;  					bbuff.TextForeColor = Color.Black;  					bbuff.FontTransparent = true;  				}  				if (w.Type == WordType.Word)  					DrawBreakpoint = true;  				if (xtr.Breakpoint && DrawBreakpoint) {  					bbuff.TextForeColor = Control.BreakPointForeColor;  					bbuff.TextBackColor = Control.BreakPointBackColor;  					bbuff.FontTransparent = false;  				}  				if (Control.BracketMatching && (w == BracketEnd || w == BracketStart)) {  					bbuff.TextForeColor = Control.BracketForeColor;  					if (Control.BracketBackColor != Color.Transparent) {  						bbuff.TextBackColor = Control.BracketBackColor;  						bbuff.FontTransparent = false;  					}  					wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  					if (Control.BracketBorderColor != Color.Transparent) {  						bbuff.DrawRect (Control.BracketBorderColor' xpos - 1' 0' wdh' Control.View.RowHeight - 1);  					}  				}  				else {  					wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  				}  				//render errors  				if (w.HasError) {  					//bbuff.FillRect (Color.Red'xpos'Control.View.RowHeight-2'wdh'2);  					int ey = Control.View.RowHeight - 1;  					Color c = w.ErrorColor;  					for (int x = 0; x < wdh + 3; x += 4) {  						bbuff.DrawLine (c' new Point (xpos + x' ey)' new Point (xpos + x + 2' ey - 2));  						bbuff.DrawLine (c' new Point (xpos + x + 2' ey - 2)' new Point (xpos + x + 4' ey));  					}  				}  			}  			else if (w.Type == WordType.Space) {  				bbuff.Font = GFX.FontNormal;  				bbuff.TextForeColor = Control.WhitespaceColor;  				bbuff.FontTransparent = true;  				if (xtr.Breakpoint && DrawBreakpoint) {  					bbuff.TextForeColor = Control.BreakPointForeColor;  					bbuff.TextBackColor = Control.BreakPointBackColor;  					bbuff.FontTransparent = false;  				}  				bbuff.DrawTabbedString ("�"' xpos' 0' taborig' Control.PixelTabSize);  				wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  			}  			else if (w.Type == WordType.Tab) {  				bbuff.Font = GFX.FontNormal;  				bbuff.TextForeColor = Control.WhitespaceColor;  				bbuff.FontTransparent = true;  				if (xtr.Breakpoint && DrawBreakpoint) {  					bbuff.TextForeColor = Control.BreakPointForeColor;  					bbuff.TextBackColor = Control.BreakPointBackColor;  					bbuff.FontTransparent = false;  				}  				bbuff.DrawTabbedString ("�"' xpos' 0' taborig' Control.PixelTabSize);  				wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  			}  			if (w.Pattern != null)  				if (w.Pattern.IsSeparator) {  					bbuff.FillRect (Control.SeparatorColor' Control.View.TextMargin - 4' Control.View.RowHeight - 1' Control.View.ClientAreaWidth' 1);  				}  			xpos += wdh;  		}  		if (!StartDraw)  			xtr.Expansion_StartChar += w.Text.Length;  		if (w == StartWord)  			StartDraw = true;  		xtr.Expansion_EndChar += w.Text.Length;  	}  	if (xtr.IsCollapsed) {  	}  	else if (xtr.endSpan != null && xtr.endSpan.spanDefinition != null && xtr.endSpan.spanDefinition.Style != null) {  		bbuff.FillRect (xtr.endSpan.spanDefinition.Style.BackColor' xpos' 0' Control.Width - xpos' Control.View.RowHeight);  	}  	if (Control._SyntaxBox.ShowEOLMarker && !HasExpansion) {  		bbuff.Font = GFX.FontNormal;  		bbuff.TextForeColor = Control._SyntaxBox.EOLMarkerColor;  		bbuff.FontTransparent = true;  		bbuff.DrawTabbedString ("�"' xpos' 0' taborig' Control.PixelTabSize);  	}  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderText,The following statement contains a magic number: if (RowIndex <= Control.Document.Count - 1) {  	bbuff.TextForeColor = Color.Black;  	Row xtr = Control.Document [RowIndex];  	//if (xtr.startSpan != null)  	//	bbuff.DrawTabbedString (xtr.startSpan.GetHashCode ().ToString (System.Globalization.CultureInfo.InvariantCulture)'100'0'0'0);  	//bbuff.TextForeColor = Color.Black;  	//bbuff.DrawTabbedString (xtr.Text'(int)(Control.View.TextMargin -Control.View.ClientAreaStart)'1'-Control.View.FirstVisibleColumn*Control.View.CharWidth+Control.View.TextMargin'Control.PixelTabSize);					  	int xpos = Control.View.TextMargin - Control.View.ClientAreaStart + XOffset;  	int wdh = 0;  	int taborig = -Control.View.FirstVisibleColumn * Control.View.CharWidth + Control.View.TextMargin;  	bool ws = Control.ShowWhitespace;  	bool StartDraw = false;  	if (StartWord == null)  		StartDraw = true;  	xtr.Expansion_StartChar = 0;  	xtr.Expansion_EndChar = 0;  	bool HasExpansion = false;  	foreach (Word w in xtr.FormattedWords) {  		if (StartDraw) {  			if (w.Span == xtr.expansion_StartSpan && xtr.expansion_StartSpan != null)  				if (xtr.expansion_StartSpan.Expanded == false) {  					RenderCollapsedText (RowIndex' xpos);  					HasExpansion = true;  					break;  				}  			if ((w.Type == WordType.Space || w.Type == WordType.Tab) && !DrawBreakpoint && Control.ShowTabGuides) {  				int xtab = xpos - (Control.View.TextMargin - Control.View.ClientAreaStart + XOffset);  				if ((xtab / (double)Control.PixelTabSize) == (xtab / Control.PixelTabSize))  					bbuff.FillRect (Control.TabGuideColor' xpos' 0' 1' Control.View.RowHeight);  			}  			if (w.Type == WordType.Word || ws == false) {  				if (w.Style != null) {  					SetFont (w.Style.Bold' w.Style.Italic' w.Style.Underline' bbuff);  					bbuff.TextBackColor = w.Style.BackColor;  					bbuff.TextForeColor = w.Style.ForeColor;  					bbuff.FontTransparent = w.Style.Transparent;  				}  				else {  					bbuff.Font = GFX.FontNormal;  					bbuff.TextForeColor = Color.Black;  					bbuff.FontTransparent = true;  				}  				if (w.Type == WordType.Word)  					DrawBreakpoint = true;  				if (xtr.Breakpoint && DrawBreakpoint) {  					bbuff.TextForeColor = Control.BreakPointForeColor;  					bbuff.TextBackColor = Control.BreakPointBackColor;  					bbuff.FontTransparent = false;  				}  				if (Control.BracketMatching && (w == BracketEnd || w == BracketStart)) {  					bbuff.TextForeColor = Control.BracketForeColor;  					if (Control.BracketBackColor != Color.Transparent) {  						bbuff.TextBackColor = Control.BracketBackColor;  						bbuff.FontTransparent = false;  					}  					wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  					if (Control.BracketBorderColor != Color.Transparent) {  						bbuff.DrawRect (Control.BracketBorderColor' xpos - 1' 0' wdh' Control.View.RowHeight - 1);  					}  				}  				else {  					wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  				}  				//render errors  				if (w.HasError) {  					//bbuff.FillRect (Color.Red'xpos'Control.View.RowHeight-2'wdh'2);  					int ey = Control.View.RowHeight - 1;  					Color c = w.ErrorColor;  					for (int x = 0; x < wdh + 3; x += 4) {  						bbuff.DrawLine (c' new Point (xpos + x' ey)' new Point (xpos + x + 2' ey - 2));  						bbuff.DrawLine (c' new Point (xpos + x + 2' ey - 2)' new Point (xpos + x + 4' ey));  					}  				}  			}  			else if (w.Type == WordType.Space) {  				bbuff.Font = GFX.FontNormal;  				bbuff.TextForeColor = Control.WhitespaceColor;  				bbuff.FontTransparent = true;  				if (xtr.Breakpoint && DrawBreakpoint) {  					bbuff.TextForeColor = Control.BreakPointForeColor;  					bbuff.TextBackColor = Control.BreakPointBackColor;  					bbuff.FontTransparent = false;  				}  				bbuff.DrawTabbedString ("�"' xpos' 0' taborig' Control.PixelTabSize);  				wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  			}  			else if (w.Type == WordType.Tab) {  				bbuff.Font = GFX.FontNormal;  				bbuff.TextForeColor = Control.WhitespaceColor;  				bbuff.FontTransparent = true;  				if (xtr.Breakpoint && DrawBreakpoint) {  					bbuff.TextForeColor = Control.BreakPointForeColor;  					bbuff.TextBackColor = Control.BreakPointBackColor;  					bbuff.FontTransparent = false;  				}  				bbuff.DrawTabbedString ("�"' xpos' 0' taborig' Control.PixelTabSize);  				wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  			}  			if (w.Pattern != null)  				if (w.Pattern.IsSeparator) {  					bbuff.FillRect (Control.SeparatorColor' Control.View.TextMargin - 4' Control.View.RowHeight - 1' Control.View.ClientAreaWidth' 1);  				}  			xpos += wdh;  		}  		if (!StartDraw)  			xtr.Expansion_StartChar += w.Text.Length;  		if (w == StartWord)  			StartDraw = true;  		xtr.Expansion_EndChar += w.Text.Length;  	}  	if (xtr.IsCollapsed) {  	}  	else if (xtr.endSpan != null && xtr.endSpan.spanDefinition != null && xtr.endSpan.spanDefinition.Style != null) {  		bbuff.FillRect (xtr.endSpan.spanDefinition.Style.BackColor' xpos' 0' Control.Width - xpos' Control.View.RowHeight);  	}  	if (Control._SyntaxBox.ShowEOLMarker && !HasExpansion) {  		bbuff.Font = GFX.FontNormal;  		bbuff.TextForeColor = Control._SyntaxBox.EOLMarkerColor;  		bbuff.FontTransparent = true;  		bbuff.DrawTabbedString ("�"' xpos' 0' taborig' Control.PixelTabSize);  	}  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderText,The following statement contains a magic number: foreach (Word w in xtr.FormattedWords) {  	if (StartDraw) {  		if (w.Span == xtr.expansion_StartSpan && xtr.expansion_StartSpan != null)  			if (xtr.expansion_StartSpan.Expanded == false) {  				RenderCollapsedText (RowIndex' xpos);  				HasExpansion = true;  				break;  			}  		if ((w.Type == WordType.Space || w.Type == WordType.Tab) && !DrawBreakpoint && Control.ShowTabGuides) {  			int xtab = xpos - (Control.View.TextMargin - Control.View.ClientAreaStart + XOffset);  			if ((xtab / (double)Control.PixelTabSize) == (xtab / Control.PixelTabSize))  				bbuff.FillRect (Control.TabGuideColor' xpos' 0' 1' Control.View.RowHeight);  		}  		if (w.Type == WordType.Word || ws == false) {  			if (w.Style != null) {  				SetFont (w.Style.Bold' w.Style.Italic' w.Style.Underline' bbuff);  				bbuff.TextBackColor = w.Style.BackColor;  				bbuff.TextForeColor = w.Style.ForeColor;  				bbuff.FontTransparent = w.Style.Transparent;  			}  			else {  				bbuff.Font = GFX.FontNormal;  				bbuff.TextForeColor = Color.Black;  				bbuff.FontTransparent = true;  			}  			if (w.Type == WordType.Word)  				DrawBreakpoint = true;  			if (xtr.Breakpoint && DrawBreakpoint) {  				bbuff.TextForeColor = Control.BreakPointForeColor;  				bbuff.TextBackColor = Control.BreakPointBackColor;  				bbuff.FontTransparent = false;  			}  			if (Control.BracketMatching && (w == BracketEnd || w == BracketStart)) {  				bbuff.TextForeColor = Control.BracketForeColor;  				if (Control.BracketBackColor != Color.Transparent) {  					bbuff.TextBackColor = Control.BracketBackColor;  					bbuff.FontTransparent = false;  				}  				wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  				if (Control.BracketBorderColor != Color.Transparent) {  					bbuff.DrawRect (Control.BracketBorderColor' xpos - 1' 0' wdh' Control.View.RowHeight - 1);  				}  			}  			else {  				wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  			}  			//render errors  			if (w.HasError) {  				//bbuff.FillRect (Color.Red'xpos'Control.View.RowHeight-2'wdh'2);  				int ey = Control.View.RowHeight - 1;  				Color c = w.ErrorColor;  				for (int x = 0; x < wdh + 3; x += 4) {  					bbuff.DrawLine (c' new Point (xpos + x' ey)' new Point (xpos + x + 2' ey - 2));  					bbuff.DrawLine (c' new Point (xpos + x + 2' ey - 2)' new Point (xpos + x + 4' ey));  				}  			}  		}  		else if (w.Type == WordType.Space) {  			bbuff.Font = GFX.FontNormal;  			bbuff.TextForeColor = Control.WhitespaceColor;  			bbuff.FontTransparent = true;  			if (xtr.Breakpoint && DrawBreakpoint) {  				bbuff.TextForeColor = Control.BreakPointForeColor;  				bbuff.TextBackColor = Control.BreakPointBackColor;  				bbuff.FontTransparent = false;  			}  			bbuff.DrawTabbedString ("�"' xpos' 0' taborig' Control.PixelTabSize);  			wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  		}  		else if (w.Type == WordType.Tab) {  			bbuff.Font = GFX.FontNormal;  			bbuff.TextForeColor = Control.WhitespaceColor;  			bbuff.FontTransparent = true;  			if (xtr.Breakpoint && DrawBreakpoint) {  				bbuff.TextForeColor = Control.BreakPointForeColor;  				bbuff.TextBackColor = Control.BreakPointBackColor;  				bbuff.FontTransparent = false;  			}  			bbuff.DrawTabbedString ("�"' xpos' 0' taborig' Control.PixelTabSize);  			wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  		}  		if (w.Pattern != null)  			if (w.Pattern.IsSeparator) {  				bbuff.FillRect (Control.SeparatorColor' Control.View.TextMargin - 4' Control.View.RowHeight - 1' Control.View.ClientAreaWidth' 1);  			}  		xpos += wdh;  	}  	if (!StartDraw)  		xtr.Expansion_StartChar += w.Text.Length;  	if (w == StartWord)  		StartDraw = true;  	xtr.Expansion_EndChar += w.Text.Length;  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderText,The following statement contains a magic number: foreach (Word w in xtr.FormattedWords) {  	if (StartDraw) {  		if (w.Span == xtr.expansion_StartSpan && xtr.expansion_StartSpan != null)  			if (xtr.expansion_StartSpan.Expanded == false) {  				RenderCollapsedText (RowIndex' xpos);  				HasExpansion = true;  				break;  			}  		if ((w.Type == WordType.Space || w.Type == WordType.Tab) && !DrawBreakpoint && Control.ShowTabGuides) {  			int xtab = xpos - (Control.View.TextMargin - Control.View.ClientAreaStart + XOffset);  			if ((xtab / (double)Control.PixelTabSize) == (xtab / Control.PixelTabSize))  				bbuff.FillRect (Control.TabGuideColor' xpos' 0' 1' Control.View.RowHeight);  		}  		if (w.Type == WordType.Word || ws == false) {  			if (w.Style != null) {  				SetFont (w.Style.Bold' w.Style.Italic' w.Style.Underline' bbuff);  				bbuff.TextBackColor = w.Style.BackColor;  				bbuff.TextForeColor = w.Style.ForeColor;  				bbuff.FontTransparent = w.Style.Transparent;  			}  			else {  				bbuff.Font = GFX.FontNormal;  				bbuff.TextForeColor = Color.Black;  				bbuff.FontTransparent = true;  			}  			if (w.Type == WordType.Word)  				DrawBreakpoint = true;  			if (xtr.Breakpoint && DrawBreakpoint) {  				bbuff.TextForeColor = Control.BreakPointForeColor;  				bbuff.TextBackColor = Control.BreakPointBackColor;  				bbuff.FontTransparent = false;  			}  			if (Control.BracketMatching && (w == BracketEnd || w == BracketStart)) {  				bbuff.TextForeColor = Control.BracketForeColor;  				if (Control.BracketBackColor != Color.Transparent) {  					bbuff.TextBackColor = Control.BracketBackColor;  					bbuff.FontTransparent = false;  				}  				wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  				if (Control.BracketBorderColor != Color.Transparent) {  					bbuff.DrawRect (Control.BracketBorderColor' xpos - 1' 0' wdh' Control.View.RowHeight - 1);  				}  			}  			else {  				wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  			}  			//render errors  			if (w.HasError) {  				//bbuff.FillRect (Color.Red'xpos'Control.View.RowHeight-2'wdh'2);  				int ey = Control.View.RowHeight - 1;  				Color c = w.ErrorColor;  				for (int x = 0; x < wdh + 3; x += 4) {  					bbuff.DrawLine (c' new Point (xpos + x' ey)' new Point (xpos + x + 2' ey - 2));  					bbuff.DrawLine (c' new Point (xpos + x + 2' ey - 2)' new Point (xpos + x + 4' ey));  				}  			}  		}  		else if (w.Type == WordType.Space) {  			bbuff.Font = GFX.FontNormal;  			bbuff.TextForeColor = Control.WhitespaceColor;  			bbuff.FontTransparent = true;  			if (xtr.Breakpoint && DrawBreakpoint) {  				bbuff.TextForeColor = Control.BreakPointForeColor;  				bbuff.TextBackColor = Control.BreakPointBackColor;  				bbuff.FontTransparent = false;  			}  			bbuff.DrawTabbedString ("�"' xpos' 0' taborig' Control.PixelTabSize);  			wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  		}  		else if (w.Type == WordType.Tab) {  			bbuff.Font = GFX.FontNormal;  			bbuff.TextForeColor = Control.WhitespaceColor;  			bbuff.FontTransparent = true;  			if (xtr.Breakpoint && DrawBreakpoint) {  				bbuff.TextForeColor = Control.BreakPointForeColor;  				bbuff.TextBackColor = Control.BreakPointBackColor;  				bbuff.FontTransparent = false;  			}  			bbuff.DrawTabbedString ("�"' xpos' 0' taborig' Control.PixelTabSize);  			wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  		}  		if (w.Pattern != null)  			if (w.Pattern.IsSeparator) {  				bbuff.FillRect (Control.SeparatorColor' Control.View.TextMargin - 4' Control.View.RowHeight - 1' Control.View.ClientAreaWidth' 1);  			}  		xpos += wdh;  	}  	if (!StartDraw)  		xtr.Expansion_StartChar += w.Text.Length;  	if (w == StartWord)  		StartDraw = true;  	xtr.Expansion_EndChar += w.Text.Length;  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderText,The following statement contains a magic number: foreach (Word w in xtr.FormattedWords) {  	if (StartDraw) {  		if (w.Span == xtr.expansion_StartSpan && xtr.expansion_StartSpan != null)  			if (xtr.expansion_StartSpan.Expanded == false) {  				RenderCollapsedText (RowIndex' xpos);  				HasExpansion = true;  				break;  			}  		if ((w.Type == WordType.Space || w.Type == WordType.Tab) && !DrawBreakpoint && Control.ShowTabGuides) {  			int xtab = xpos - (Control.View.TextMargin - Control.View.ClientAreaStart + XOffset);  			if ((xtab / (double)Control.PixelTabSize) == (xtab / Control.PixelTabSize))  				bbuff.FillRect (Control.TabGuideColor' xpos' 0' 1' Control.View.RowHeight);  		}  		if (w.Type == WordType.Word || ws == false) {  			if (w.Style != null) {  				SetFont (w.Style.Bold' w.Style.Italic' w.Style.Underline' bbuff);  				bbuff.TextBackColor = w.Style.BackColor;  				bbuff.TextForeColor = w.Style.ForeColor;  				bbuff.FontTransparent = w.Style.Transparent;  			}  			else {  				bbuff.Font = GFX.FontNormal;  				bbuff.TextForeColor = Color.Black;  				bbuff.FontTransparent = true;  			}  			if (w.Type == WordType.Word)  				DrawBreakpoint = true;  			if (xtr.Breakpoint && DrawBreakpoint) {  				bbuff.TextForeColor = Control.BreakPointForeColor;  				bbuff.TextBackColor = Control.BreakPointBackColor;  				bbuff.FontTransparent = false;  			}  			if (Control.BracketMatching && (w == BracketEnd || w == BracketStart)) {  				bbuff.TextForeColor = Control.BracketForeColor;  				if (Control.BracketBackColor != Color.Transparent) {  					bbuff.TextBackColor = Control.BracketBackColor;  					bbuff.FontTransparent = false;  				}  				wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  				if (Control.BracketBorderColor != Color.Transparent) {  					bbuff.DrawRect (Control.BracketBorderColor' xpos - 1' 0' wdh' Control.View.RowHeight - 1);  				}  			}  			else {  				wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  			}  			//render errors  			if (w.HasError) {  				//bbuff.FillRect (Color.Red'xpos'Control.View.RowHeight-2'wdh'2);  				int ey = Control.View.RowHeight - 1;  				Color c = w.ErrorColor;  				for (int x = 0; x < wdh + 3; x += 4) {  					bbuff.DrawLine (c' new Point (xpos + x' ey)' new Point (xpos + x + 2' ey - 2));  					bbuff.DrawLine (c' new Point (xpos + x + 2' ey - 2)' new Point (xpos + x + 4' ey));  				}  			}  		}  		else if (w.Type == WordType.Space) {  			bbuff.Font = GFX.FontNormal;  			bbuff.TextForeColor = Control.WhitespaceColor;  			bbuff.FontTransparent = true;  			if (xtr.Breakpoint && DrawBreakpoint) {  				bbuff.TextForeColor = Control.BreakPointForeColor;  				bbuff.TextBackColor = Control.BreakPointBackColor;  				bbuff.FontTransparent = false;  			}  			bbuff.DrawTabbedString ("�"' xpos' 0' taborig' Control.PixelTabSize);  			wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  		}  		else if (w.Type == WordType.Tab) {  			bbuff.Font = GFX.FontNormal;  			bbuff.TextForeColor = Control.WhitespaceColor;  			bbuff.FontTransparent = true;  			if (xtr.Breakpoint && DrawBreakpoint) {  				bbuff.TextForeColor = Control.BreakPointForeColor;  				bbuff.TextBackColor = Control.BreakPointBackColor;  				bbuff.FontTransparent = false;  			}  			bbuff.DrawTabbedString ("�"' xpos' 0' taborig' Control.PixelTabSize);  			wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  		}  		if (w.Pattern != null)  			if (w.Pattern.IsSeparator) {  				bbuff.FillRect (Control.SeparatorColor' Control.View.TextMargin - 4' Control.View.RowHeight - 1' Control.View.ClientAreaWidth' 1);  			}  		xpos += wdh;  	}  	if (!StartDraw)  		xtr.Expansion_StartChar += w.Text.Length;  	if (w == StartWord)  		StartDraw = true;  	xtr.Expansion_EndChar += w.Text.Length;  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderText,The following statement contains a magic number: foreach (Word w in xtr.FormattedWords) {  	if (StartDraw) {  		if (w.Span == xtr.expansion_StartSpan && xtr.expansion_StartSpan != null)  			if (xtr.expansion_StartSpan.Expanded == false) {  				RenderCollapsedText (RowIndex' xpos);  				HasExpansion = true;  				break;  			}  		if ((w.Type == WordType.Space || w.Type == WordType.Tab) && !DrawBreakpoint && Control.ShowTabGuides) {  			int xtab = xpos - (Control.View.TextMargin - Control.View.ClientAreaStart + XOffset);  			if ((xtab / (double)Control.PixelTabSize) == (xtab / Control.PixelTabSize))  				bbuff.FillRect (Control.TabGuideColor' xpos' 0' 1' Control.View.RowHeight);  		}  		if (w.Type == WordType.Word || ws == false) {  			if (w.Style != null) {  				SetFont (w.Style.Bold' w.Style.Italic' w.Style.Underline' bbuff);  				bbuff.TextBackColor = w.Style.BackColor;  				bbuff.TextForeColor = w.Style.ForeColor;  				bbuff.FontTransparent = w.Style.Transparent;  			}  			else {  				bbuff.Font = GFX.FontNormal;  				bbuff.TextForeColor = Color.Black;  				bbuff.FontTransparent = true;  			}  			if (w.Type == WordType.Word)  				DrawBreakpoint = true;  			if (xtr.Breakpoint && DrawBreakpoint) {  				bbuff.TextForeColor = Control.BreakPointForeColor;  				bbuff.TextBackColor = Control.BreakPointBackColor;  				bbuff.FontTransparent = false;  			}  			if (Control.BracketMatching && (w == BracketEnd || w == BracketStart)) {  				bbuff.TextForeColor = Control.BracketForeColor;  				if (Control.BracketBackColor != Color.Transparent) {  					bbuff.TextBackColor = Control.BracketBackColor;  					bbuff.FontTransparent = false;  				}  				wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  				if (Control.BracketBorderColor != Color.Transparent) {  					bbuff.DrawRect (Control.BracketBorderColor' xpos - 1' 0' wdh' Control.View.RowHeight - 1);  				}  			}  			else {  				wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  			}  			//render errors  			if (w.HasError) {  				//bbuff.FillRect (Color.Red'xpos'Control.View.RowHeight-2'wdh'2);  				int ey = Control.View.RowHeight - 1;  				Color c = w.ErrorColor;  				for (int x = 0; x < wdh + 3; x += 4) {  					bbuff.DrawLine (c' new Point (xpos + x' ey)' new Point (xpos + x + 2' ey - 2));  					bbuff.DrawLine (c' new Point (xpos + x + 2' ey - 2)' new Point (xpos + x + 4' ey));  				}  			}  		}  		else if (w.Type == WordType.Space) {  			bbuff.Font = GFX.FontNormal;  			bbuff.TextForeColor = Control.WhitespaceColor;  			bbuff.FontTransparent = true;  			if (xtr.Breakpoint && DrawBreakpoint) {  				bbuff.TextForeColor = Control.BreakPointForeColor;  				bbuff.TextBackColor = Control.BreakPointBackColor;  				bbuff.FontTransparent = false;  			}  			bbuff.DrawTabbedString ("�"' xpos' 0' taborig' Control.PixelTabSize);  			wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  		}  		else if (w.Type == WordType.Tab) {  			bbuff.Font = GFX.FontNormal;  			bbuff.TextForeColor = Control.WhitespaceColor;  			bbuff.FontTransparent = true;  			if (xtr.Breakpoint && DrawBreakpoint) {  				bbuff.TextForeColor = Control.BreakPointForeColor;  				bbuff.TextBackColor = Control.BreakPointBackColor;  				bbuff.FontTransparent = false;  			}  			bbuff.DrawTabbedString ("�"' xpos' 0' taborig' Control.PixelTabSize);  			wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  		}  		if (w.Pattern != null)  			if (w.Pattern.IsSeparator) {  				bbuff.FillRect (Control.SeparatorColor' Control.View.TextMargin - 4' Control.View.RowHeight - 1' Control.View.ClientAreaWidth' 1);  			}  		xpos += wdh;  	}  	if (!StartDraw)  		xtr.Expansion_StartChar += w.Text.Length;  	if (w == StartWord)  		StartDraw = true;  	xtr.Expansion_EndChar += w.Text.Length;  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderText,The following statement contains a magic number: foreach (Word w in xtr.FormattedWords) {  	if (StartDraw) {  		if (w.Span == xtr.expansion_StartSpan && xtr.expansion_StartSpan != null)  			if (xtr.expansion_StartSpan.Expanded == false) {  				RenderCollapsedText (RowIndex' xpos);  				HasExpansion = true;  				break;  			}  		if ((w.Type == WordType.Space || w.Type == WordType.Tab) && !DrawBreakpoint && Control.ShowTabGuides) {  			int xtab = xpos - (Control.View.TextMargin - Control.View.ClientAreaStart + XOffset);  			if ((xtab / (double)Control.PixelTabSize) == (xtab / Control.PixelTabSize))  				bbuff.FillRect (Control.TabGuideColor' xpos' 0' 1' Control.View.RowHeight);  		}  		if (w.Type == WordType.Word || ws == false) {  			if (w.Style != null) {  				SetFont (w.Style.Bold' w.Style.Italic' w.Style.Underline' bbuff);  				bbuff.TextBackColor = w.Style.BackColor;  				bbuff.TextForeColor = w.Style.ForeColor;  				bbuff.FontTransparent = w.Style.Transparent;  			}  			else {  				bbuff.Font = GFX.FontNormal;  				bbuff.TextForeColor = Color.Black;  				bbuff.FontTransparent = true;  			}  			if (w.Type == WordType.Word)  				DrawBreakpoint = true;  			if (xtr.Breakpoint && DrawBreakpoint) {  				bbuff.TextForeColor = Control.BreakPointForeColor;  				bbuff.TextBackColor = Control.BreakPointBackColor;  				bbuff.FontTransparent = false;  			}  			if (Control.BracketMatching && (w == BracketEnd || w == BracketStart)) {  				bbuff.TextForeColor = Control.BracketForeColor;  				if (Control.BracketBackColor != Color.Transparent) {  					bbuff.TextBackColor = Control.BracketBackColor;  					bbuff.FontTransparent = false;  				}  				wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  				if (Control.BracketBorderColor != Color.Transparent) {  					bbuff.DrawRect (Control.BracketBorderColor' xpos - 1' 0' wdh' Control.View.RowHeight - 1);  				}  			}  			else {  				wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  			}  			//render errors  			if (w.HasError) {  				//bbuff.FillRect (Color.Red'xpos'Control.View.RowHeight-2'wdh'2);  				int ey = Control.View.RowHeight - 1;  				Color c = w.ErrorColor;  				for (int x = 0; x < wdh + 3; x += 4) {  					bbuff.DrawLine (c' new Point (xpos + x' ey)' new Point (xpos + x + 2' ey - 2));  					bbuff.DrawLine (c' new Point (xpos + x + 2' ey - 2)' new Point (xpos + x + 4' ey));  				}  			}  		}  		else if (w.Type == WordType.Space) {  			bbuff.Font = GFX.FontNormal;  			bbuff.TextForeColor = Control.WhitespaceColor;  			bbuff.FontTransparent = true;  			if (xtr.Breakpoint && DrawBreakpoint) {  				bbuff.TextForeColor = Control.BreakPointForeColor;  				bbuff.TextBackColor = Control.BreakPointBackColor;  				bbuff.FontTransparent = false;  			}  			bbuff.DrawTabbedString ("�"' xpos' 0' taborig' Control.PixelTabSize);  			wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  		}  		else if (w.Type == WordType.Tab) {  			bbuff.Font = GFX.FontNormal;  			bbuff.TextForeColor = Control.WhitespaceColor;  			bbuff.FontTransparent = true;  			if (xtr.Breakpoint && DrawBreakpoint) {  				bbuff.TextForeColor = Control.BreakPointForeColor;  				bbuff.TextBackColor = Control.BreakPointBackColor;  				bbuff.FontTransparent = false;  			}  			bbuff.DrawTabbedString ("�"' xpos' 0' taborig' Control.PixelTabSize);  			wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  		}  		if (w.Pattern != null)  			if (w.Pattern.IsSeparator) {  				bbuff.FillRect (Control.SeparatorColor' Control.View.TextMargin - 4' Control.View.RowHeight - 1' Control.View.ClientAreaWidth' 1);  			}  		xpos += wdh;  	}  	if (!StartDraw)  		xtr.Expansion_StartChar += w.Text.Length;  	if (w == StartWord)  		StartDraw = true;  	xtr.Expansion_EndChar += w.Text.Length;  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderText,The following statement contains a magic number: foreach (Word w in xtr.FormattedWords) {  	if (StartDraw) {  		if (w.Span == xtr.expansion_StartSpan && xtr.expansion_StartSpan != null)  			if (xtr.expansion_StartSpan.Expanded == false) {  				RenderCollapsedText (RowIndex' xpos);  				HasExpansion = true;  				break;  			}  		if ((w.Type == WordType.Space || w.Type == WordType.Tab) && !DrawBreakpoint && Control.ShowTabGuides) {  			int xtab = xpos - (Control.View.TextMargin - Control.View.ClientAreaStart + XOffset);  			if ((xtab / (double)Control.PixelTabSize) == (xtab / Control.PixelTabSize))  				bbuff.FillRect (Control.TabGuideColor' xpos' 0' 1' Control.View.RowHeight);  		}  		if (w.Type == WordType.Word || ws == false) {  			if (w.Style != null) {  				SetFont (w.Style.Bold' w.Style.Italic' w.Style.Underline' bbuff);  				bbuff.TextBackColor = w.Style.BackColor;  				bbuff.TextForeColor = w.Style.ForeColor;  				bbuff.FontTransparent = w.Style.Transparent;  			}  			else {  				bbuff.Font = GFX.FontNormal;  				bbuff.TextForeColor = Color.Black;  				bbuff.FontTransparent = true;  			}  			if (w.Type == WordType.Word)  				DrawBreakpoint = true;  			if (xtr.Breakpoint && DrawBreakpoint) {  				bbuff.TextForeColor = Control.BreakPointForeColor;  				bbuff.TextBackColor = Control.BreakPointBackColor;  				bbuff.FontTransparent = false;  			}  			if (Control.BracketMatching && (w == BracketEnd || w == BracketStart)) {  				bbuff.TextForeColor = Control.BracketForeColor;  				if (Control.BracketBackColor != Color.Transparent) {  					bbuff.TextBackColor = Control.BracketBackColor;  					bbuff.FontTransparent = false;  				}  				wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  				if (Control.BracketBorderColor != Color.Transparent) {  					bbuff.DrawRect (Control.BracketBorderColor' xpos - 1' 0' wdh' Control.View.RowHeight - 1);  				}  			}  			else {  				wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  			}  			//render errors  			if (w.HasError) {  				//bbuff.FillRect (Color.Red'xpos'Control.View.RowHeight-2'wdh'2);  				int ey = Control.View.RowHeight - 1;  				Color c = w.ErrorColor;  				for (int x = 0; x < wdh + 3; x += 4) {  					bbuff.DrawLine (c' new Point (xpos + x' ey)' new Point (xpos + x + 2' ey - 2));  					bbuff.DrawLine (c' new Point (xpos + x + 2' ey - 2)' new Point (xpos + x + 4' ey));  				}  			}  		}  		else if (w.Type == WordType.Space) {  			bbuff.Font = GFX.FontNormal;  			bbuff.TextForeColor = Control.WhitespaceColor;  			bbuff.FontTransparent = true;  			if (xtr.Breakpoint && DrawBreakpoint) {  				bbuff.TextForeColor = Control.BreakPointForeColor;  				bbuff.TextBackColor = Control.BreakPointBackColor;  				bbuff.FontTransparent = false;  			}  			bbuff.DrawTabbedString ("�"' xpos' 0' taborig' Control.PixelTabSize);  			wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  		}  		else if (w.Type == WordType.Tab) {  			bbuff.Font = GFX.FontNormal;  			bbuff.TextForeColor = Control.WhitespaceColor;  			bbuff.FontTransparent = true;  			if (xtr.Breakpoint && DrawBreakpoint) {  				bbuff.TextForeColor = Control.BreakPointForeColor;  				bbuff.TextBackColor = Control.BreakPointBackColor;  				bbuff.FontTransparent = false;  			}  			bbuff.DrawTabbedString ("�"' xpos' 0' taborig' Control.PixelTabSize);  			wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  		}  		if (w.Pattern != null)  			if (w.Pattern.IsSeparator) {  				bbuff.FillRect (Control.SeparatorColor' Control.View.TextMargin - 4' Control.View.RowHeight - 1' Control.View.ClientAreaWidth' 1);  			}  		xpos += wdh;  	}  	if (!StartDraw)  		xtr.Expansion_StartChar += w.Text.Length;  	if (w == StartWord)  		StartDraw = true;  	xtr.Expansion_EndChar += w.Text.Length;  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderText,The following statement contains a magic number: foreach (Word w in xtr.FormattedWords) {  	if (StartDraw) {  		if (w.Span == xtr.expansion_StartSpan && xtr.expansion_StartSpan != null)  			if (xtr.expansion_StartSpan.Expanded == false) {  				RenderCollapsedText (RowIndex' xpos);  				HasExpansion = true;  				break;  			}  		if ((w.Type == WordType.Space || w.Type == WordType.Tab) && !DrawBreakpoint && Control.ShowTabGuides) {  			int xtab = xpos - (Control.View.TextMargin - Control.View.ClientAreaStart + XOffset);  			if ((xtab / (double)Control.PixelTabSize) == (xtab / Control.PixelTabSize))  				bbuff.FillRect (Control.TabGuideColor' xpos' 0' 1' Control.View.RowHeight);  		}  		if (w.Type == WordType.Word || ws == false) {  			if (w.Style != null) {  				SetFont (w.Style.Bold' w.Style.Italic' w.Style.Underline' bbuff);  				bbuff.TextBackColor = w.Style.BackColor;  				bbuff.TextForeColor = w.Style.ForeColor;  				bbuff.FontTransparent = w.Style.Transparent;  			}  			else {  				bbuff.Font = GFX.FontNormal;  				bbuff.TextForeColor = Color.Black;  				bbuff.FontTransparent = true;  			}  			if (w.Type == WordType.Word)  				DrawBreakpoint = true;  			if (xtr.Breakpoint && DrawBreakpoint) {  				bbuff.TextForeColor = Control.BreakPointForeColor;  				bbuff.TextBackColor = Control.BreakPointBackColor;  				bbuff.FontTransparent = false;  			}  			if (Control.BracketMatching && (w == BracketEnd || w == BracketStart)) {  				bbuff.TextForeColor = Control.BracketForeColor;  				if (Control.BracketBackColor != Color.Transparent) {  					bbuff.TextBackColor = Control.BracketBackColor;  					bbuff.FontTransparent = false;  				}  				wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  				if (Control.BracketBorderColor != Color.Transparent) {  					bbuff.DrawRect (Control.BracketBorderColor' xpos - 1' 0' wdh' Control.View.RowHeight - 1);  				}  			}  			else {  				wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  			}  			//render errors  			if (w.HasError) {  				//bbuff.FillRect (Color.Red'xpos'Control.View.RowHeight-2'wdh'2);  				int ey = Control.View.RowHeight - 1;  				Color c = w.ErrorColor;  				for (int x = 0; x < wdh + 3; x += 4) {  					bbuff.DrawLine (c' new Point (xpos + x' ey)' new Point (xpos + x + 2' ey - 2));  					bbuff.DrawLine (c' new Point (xpos + x + 2' ey - 2)' new Point (xpos + x + 4' ey));  				}  			}  		}  		else if (w.Type == WordType.Space) {  			bbuff.Font = GFX.FontNormal;  			bbuff.TextForeColor = Control.WhitespaceColor;  			bbuff.FontTransparent = true;  			if (xtr.Breakpoint && DrawBreakpoint) {  				bbuff.TextForeColor = Control.BreakPointForeColor;  				bbuff.TextBackColor = Control.BreakPointBackColor;  				bbuff.FontTransparent = false;  			}  			bbuff.DrawTabbedString ("�"' xpos' 0' taborig' Control.PixelTabSize);  			wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  		}  		else if (w.Type == WordType.Tab) {  			bbuff.Font = GFX.FontNormal;  			bbuff.TextForeColor = Control.WhitespaceColor;  			bbuff.FontTransparent = true;  			if (xtr.Breakpoint && DrawBreakpoint) {  				bbuff.TextForeColor = Control.BreakPointForeColor;  				bbuff.TextBackColor = Control.BreakPointBackColor;  				bbuff.FontTransparent = false;  			}  			bbuff.DrawTabbedString ("�"' xpos' 0' taborig' Control.PixelTabSize);  			wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  		}  		if (w.Pattern != null)  			if (w.Pattern.IsSeparator) {  				bbuff.FillRect (Control.SeparatorColor' Control.View.TextMargin - 4' Control.View.RowHeight - 1' Control.View.ClientAreaWidth' 1);  			}  		xpos += wdh;  	}  	if (!StartDraw)  		xtr.Expansion_StartChar += w.Text.Length;  	if (w == StartWord)  		StartDraw = true;  	xtr.Expansion_EndChar += w.Text.Length;  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderText,The following statement contains a magic number: foreach (Word w in xtr.FormattedWords) {  	if (StartDraw) {  		if (w.Span == xtr.expansion_StartSpan && xtr.expansion_StartSpan != null)  			if (xtr.expansion_StartSpan.Expanded == false) {  				RenderCollapsedText (RowIndex' xpos);  				HasExpansion = true;  				break;  			}  		if ((w.Type == WordType.Space || w.Type == WordType.Tab) && !DrawBreakpoint && Control.ShowTabGuides) {  			int xtab = xpos - (Control.View.TextMargin - Control.View.ClientAreaStart + XOffset);  			if ((xtab / (double)Control.PixelTabSize) == (xtab / Control.PixelTabSize))  				bbuff.FillRect (Control.TabGuideColor' xpos' 0' 1' Control.View.RowHeight);  		}  		if (w.Type == WordType.Word || ws == false) {  			if (w.Style != null) {  				SetFont (w.Style.Bold' w.Style.Italic' w.Style.Underline' bbuff);  				bbuff.TextBackColor = w.Style.BackColor;  				bbuff.TextForeColor = w.Style.ForeColor;  				bbuff.FontTransparent = w.Style.Transparent;  			}  			else {  				bbuff.Font = GFX.FontNormal;  				bbuff.TextForeColor = Color.Black;  				bbuff.FontTransparent = true;  			}  			if (w.Type == WordType.Word)  				DrawBreakpoint = true;  			if (xtr.Breakpoint && DrawBreakpoint) {  				bbuff.TextForeColor = Control.BreakPointForeColor;  				bbuff.TextBackColor = Control.BreakPointBackColor;  				bbuff.FontTransparent = false;  			}  			if (Control.BracketMatching && (w == BracketEnd || w == BracketStart)) {  				bbuff.TextForeColor = Control.BracketForeColor;  				if (Control.BracketBackColor != Color.Transparent) {  					bbuff.TextBackColor = Control.BracketBackColor;  					bbuff.FontTransparent = false;  				}  				wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  				if (Control.BracketBorderColor != Color.Transparent) {  					bbuff.DrawRect (Control.BracketBorderColor' xpos - 1' 0' wdh' Control.View.RowHeight - 1);  				}  			}  			else {  				wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  			}  			//render errors  			if (w.HasError) {  				//bbuff.FillRect (Color.Red'xpos'Control.View.RowHeight-2'wdh'2);  				int ey = Control.View.RowHeight - 1;  				Color c = w.ErrorColor;  				for (int x = 0; x < wdh + 3; x += 4) {  					bbuff.DrawLine (c' new Point (xpos + x' ey)' new Point (xpos + x + 2' ey - 2));  					bbuff.DrawLine (c' new Point (xpos + x + 2' ey - 2)' new Point (xpos + x + 4' ey));  				}  			}  		}  		else if (w.Type == WordType.Space) {  			bbuff.Font = GFX.FontNormal;  			bbuff.TextForeColor = Control.WhitespaceColor;  			bbuff.FontTransparent = true;  			if (xtr.Breakpoint && DrawBreakpoint) {  				bbuff.TextForeColor = Control.BreakPointForeColor;  				bbuff.TextBackColor = Control.BreakPointBackColor;  				bbuff.FontTransparent = false;  			}  			bbuff.DrawTabbedString ("�"' xpos' 0' taborig' Control.PixelTabSize);  			wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  		}  		else if (w.Type == WordType.Tab) {  			bbuff.Font = GFX.FontNormal;  			bbuff.TextForeColor = Control.WhitespaceColor;  			bbuff.FontTransparent = true;  			if (xtr.Breakpoint && DrawBreakpoint) {  				bbuff.TextForeColor = Control.BreakPointForeColor;  				bbuff.TextBackColor = Control.BreakPointBackColor;  				bbuff.FontTransparent = false;  			}  			bbuff.DrawTabbedString ("�"' xpos' 0' taborig' Control.PixelTabSize);  			wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  		}  		if (w.Pattern != null)  			if (w.Pattern.IsSeparator) {  				bbuff.FillRect (Control.SeparatorColor' Control.View.TextMargin - 4' Control.View.RowHeight - 1' Control.View.ClientAreaWidth' 1);  			}  		xpos += wdh;  	}  	if (!StartDraw)  		xtr.Expansion_StartChar += w.Text.Length;  	if (w == StartWord)  		StartDraw = true;  	xtr.Expansion_EndChar += w.Text.Length;  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderText,The following statement contains a magic number: if (StartDraw) {  	if (w.Span == xtr.expansion_StartSpan && xtr.expansion_StartSpan != null)  		if (xtr.expansion_StartSpan.Expanded == false) {  			RenderCollapsedText (RowIndex' xpos);  			HasExpansion = true;  			break;  		}  	if ((w.Type == WordType.Space || w.Type == WordType.Tab) && !DrawBreakpoint && Control.ShowTabGuides) {  		int xtab = xpos - (Control.View.TextMargin - Control.View.ClientAreaStart + XOffset);  		if ((xtab / (double)Control.PixelTabSize) == (xtab / Control.PixelTabSize))  			bbuff.FillRect (Control.TabGuideColor' xpos' 0' 1' Control.View.RowHeight);  	}  	if (w.Type == WordType.Word || ws == false) {  		if (w.Style != null) {  			SetFont (w.Style.Bold' w.Style.Italic' w.Style.Underline' bbuff);  			bbuff.TextBackColor = w.Style.BackColor;  			bbuff.TextForeColor = w.Style.ForeColor;  			bbuff.FontTransparent = w.Style.Transparent;  		}  		else {  			bbuff.Font = GFX.FontNormal;  			bbuff.TextForeColor = Color.Black;  			bbuff.FontTransparent = true;  		}  		if (w.Type == WordType.Word)  			DrawBreakpoint = true;  		if (xtr.Breakpoint && DrawBreakpoint) {  			bbuff.TextForeColor = Control.BreakPointForeColor;  			bbuff.TextBackColor = Control.BreakPointBackColor;  			bbuff.FontTransparent = false;  		}  		if (Control.BracketMatching && (w == BracketEnd || w == BracketStart)) {  			bbuff.TextForeColor = Control.BracketForeColor;  			if (Control.BracketBackColor != Color.Transparent) {  				bbuff.TextBackColor = Control.BracketBackColor;  				bbuff.FontTransparent = false;  			}  			wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  			if (Control.BracketBorderColor != Color.Transparent) {  				bbuff.DrawRect (Control.BracketBorderColor' xpos - 1' 0' wdh' Control.View.RowHeight - 1);  			}  		}  		else {  			wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  		}  		//render errors  		if (w.HasError) {  			//bbuff.FillRect (Color.Red'xpos'Control.View.RowHeight-2'wdh'2);  			int ey = Control.View.RowHeight - 1;  			Color c = w.ErrorColor;  			for (int x = 0; x < wdh + 3; x += 4) {  				bbuff.DrawLine (c' new Point (xpos + x' ey)' new Point (xpos + x + 2' ey - 2));  				bbuff.DrawLine (c' new Point (xpos + x + 2' ey - 2)' new Point (xpos + x + 4' ey));  			}  		}  	}  	else if (w.Type == WordType.Space) {  		bbuff.Font = GFX.FontNormal;  		bbuff.TextForeColor = Control.WhitespaceColor;  		bbuff.FontTransparent = true;  		if (xtr.Breakpoint && DrawBreakpoint) {  			bbuff.TextForeColor = Control.BreakPointForeColor;  			bbuff.TextBackColor = Control.BreakPointBackColor;  			bbuff.FontTransparent = false;  		}  		bbuff.DrawTabbedString ("�"' xpos' 0' taborig' Control.PixelTabSize);  		wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  	}  	else if (w.Type == WordType.Tab) {  		bbuff.Font = GFX.FontNormal;  		bbuff.TextForeColor = Control.WhitespaceColor;  		bbuff.FontTransparent = true;  		if (xtr.Breakpoint && DrawBreakpoint) {  			bbuff.TextForeColor = Control.BreakPointForeColor;  			bbuff.TextBackColor = Control.BreakPointBackColor;  			bbuff.FontTransparent = false;  		}  		bbuff.DrawTabbedString ("�"' xpos' 0' taborig' Control.PixelTabSize);  		wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  	}  	if (w.Pattern != null)  		if (w.Pattern.IsSeparator) {  			bbuff.FillRect (Control.SeparatorColor' Control.View.TextMargin - 4' Control.View.RowHeight - 1' Control.View.ClientAreaWidth' 1);  		}  	xpos += wdh;  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderText,The following statement contains a magic number: if (StartDraw) {  	if (w.Span == xtr.expansion_StartSpan && xtr.expansion_StartSpan != null)  		if (xtr.expansion_StartSpan.Expanded == false) {  			RenderCollapsedText (RowIndex' xpos);  			HasExpansion = true;  			break;  		}  	if ((w.Type == WordType.Space || w.Type == WordType.Tab) && !DrawBreakpoint && Control.ShowTabGuides) {  		int xtab = xpos - (Control.View.TextMargin - Control.View.ClientAreaStart + XOffset);  		if ((xtab / (double)Control.PixelTabSize) == (xtab / Control.PixelTabSize))  			bbuff.FillRect (Control.TabGuideColor' xpos' 0' 1' Control.View.RowHeight);  	}  	if (w.Type == WordType.Word || ws == false) {  		if (w.Style != null) {  			SetFont (w.Style.Bold' w.Style.Italic' w.Style.Underline' bbuff);  			bbuff.TextBackColor = w.Style.BackColor;  			bbuff.TextForeColor = w.Style.ForeColor;  			bbuff.FontTransparent = w.Style.Transparent;  		}  		else {  			bbuff.Font = GFX.FontNormal;  			bbuff.TextForeColor = Color.Black;  			bbuff.FontTransparent = true;  		}  		if (w.Type == WordType.Word)  			DrawBreakpoint = true;  		if (xtr.Breakpoint && DrawBreakpoint) {  			bbuff.TextForeColor = Control.BreakPointForeColor;  			bbuff.TextBackColor = Control.BreakPointBackColor;  			bbuff.FontTransparent = false;  		}  		if (Control.BracketMatching && (w == BracketEnd || w == BracketStart)) {  			bbuff.TextForeColor = Control.BracketForeColor;  			if (Control.BracketBackColor != Color.Transparent) {  				bbuff.TextBackColor = Control.BracketBackColor;  				bbuff.FontTransparent = false;  			}  			wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  			if (Control.BracketBorderColor != Color.Transparent) {  				bbuff.DrawRect (Control.BracketBorderColor' xpos - 1' 0' wdh' Control.View.RowHeight - 1);  			}  		}  		else {  			wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  		}  		//render errors  		if (w.HasError) {  			//bbuff.FillRect (Color.Red'xpos'Control.View.RowHeight-2'wdh'2);  			int ey = Control.View.RowHeight - 1;  			Color c = w.ErrorColor;  			for (int x = 0; x < wdh + 3; x += 4) {  				bbuff.DrawLine (c' new Point (xpos + x' ey)' new Point (xpos + x + 2' ey - 2));  				bbuff.DrawLine (c' new Point (xpos + x + 2' ey - 2)' new Point (xpos + x + 4' ey));  			}  		}  	}  	else if (w.Type == WordType.Space) {  		bbuff.Font = GFX.FontNormal;  		bbuff.TextForeColor = Control.WhitespaceColor;  		bbuff.FontTransparent = true;  		if (xtr.Breakpoint && DrawBreakpoint) {  			bbuff.TextForeColor = Control.BreakPointForeColor;  			bbuff.TextBackColor = Control.BreakPointBackColor;  			bbuff.FontTransparent = false;  		}  		bbuff.DrawTabbedString ("�"' xpos' 0' taborig' Control.PixelTabSize);  		wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  	}  	else if (w.Type == WordType.Tab) {  		bbuff.Font = GFX.FontNormal;  		bbuff.TextForeColor = Control.WhitespaceColor;  		bbuff.FontTransparent = true;  		if (xtr.Breakpoint && DrawBreakpoint) {  			bbuff.TextForeColor = Control.BreakPointForeColor;  			bbuff.TextBackColor = Control.BreakPointBackColor;  			bbuff.FontTransparent = false;  		}  		bbuff.DrawTabbedString ("�"' xpos' 0' taborig' Control.PixelTabSize);  		wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  	}  	if (w.Pattern != null)  		if (w.Pattern.IsSeparator) {  			bbuff.FillRect (Control.SeparatorColor' Control.View.TextMargin - 4' Control.View.RowHeight - 1' Control.View.ClientAreaWidth' 1);  		}  	xpos += wdh;  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderText,The following statement contains a magic number: if (StartDraw) {  	if (w.Span == xtr.expansion_StartSpan && xtr.expansion_StartSpan != null)  		if (xtr.expansion_StartSpan.Expanded == false) {  			RenderCollapsedText (RowIndex' xpos);  			HasExpansion = true;  			break;  		}  	if ((w.Type == WordType.Space || w.Type == WordType.Tab) && !DrawBreakpoint && Control.ShowTabGuides) {  		int xtab = xpos - (Control.View.TextMargin - Control.View.ClientAreaStart + XOffset);  		if ((xtab / (double)Control.PixelTabSize) == (xtab / Control.PixelTabSize))  			bbuff.FillRect (Control.TabGuideColor' xpos' 0' 1' Control.View.RowHeight);  	}  	if (w.Type == WordType.Word || ws == false) {  		if (w.Style != null) {  			SetFont (w.Style.Bold' w.Style.Italic' w.Style.Underline' bbuff);  			bbuff.TextBackColor = w.Style.BackColor;  			bbuff.TextForeColor = w.Style.ForeColor;  			bbuff.FontTransparent = w.Style.Transparent;  		}  		else {  			bbuff.Font = GFX.FontNormal;  			bbuff.TextForeColor = Color.Black;  			bbuff.FontTransparent = true;  		}  		if (w.Type == WordType.Word)  			DrawBreakpoint = true;  		if (xtr.Breakpoint && DrawBreakpoint) {  			bbuff.TextForeColor = Control.BreakPointForeColor;  			bbuff.TextBackColor = Control.BreakPointBackColor;  			bbuff.FontTransparent = false;  		}  		if (Control.BracketMatching && (w == BracketEnd || w == BracketStart)) {  			bbuff.TextForeColor = Control.BracketForeColor;  			if (Control.BracketBackColor != Color.Transparent) {  				bbuff.TextBackColor = Control.BracketBackColor;  				bbuff.FontTransparent = false;  			}  			wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  			if (Control.BracketBorderColor != Color.Transparent) {  				bbuff.DrawRect (Control.BracketBorderColor' xpos - 1' 0' wdh' Control.View.RowHeight - 1);  			}  		}  		else {  			wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  		}  		//render errors  		if (w.HasError) {  			//bbuff.FillRect (Color.Red'xpos'Control.View.RowHeight-2'wdh'2);  			int ey = Control.View.RowHeight - 1;  			Color c = w.ErrorColor;  			for (int x = 0; x < wdh + 3; x += 4) {  				bbuff.DrawLine (c' new Point (xpos + x' ey)' new Point (xpos + x + 2' ey - 2));  				bbuff.DrawLine (c' new Point (xpos + x + 2' ey - 2)' new Point (xpos + x + 4' ey));  			}  		}  	}  	else if (w.Type == WordType.Space) {  		bbuff.Font = GFX.FontNormal;  		bbuff.TextForeColor = Control.WhitespaceColor;  		bbuff.FontTransparent = true;  		if (xtr.Breakpoint && DrawBreakpoint) {  			bbuff.TextForeColor = Control.BreakPointForeColor;  			bbuff.TextBackColor = Control.BreakPointBackColor;  			bbuff.FontTransparent = false;  		}  		bbuff.DrawTabbedString ("�"' xpos' 0' taborig' Control.PixelTabSize);  		wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  	}  	else if (w.Type == WordType.Tab) {  		bbuff.Font = GFX.FontNormal;  		bbuff.TextForeColor = Control.WhitespaceColor;  		bbuff.FontTransparent = true;  		if (xtr.Breakpoint && DrawBreakpoint) {  			bbuff.TextForeColor = Control.BreakPointForeColor;  			bbuff.TextBackColor = Control.BreakPointBackColor;  			bbuff.FontTransparent = false;  		}  		bbuff.DrawTabbedString ("�"' xpos' 0' taborig' Control.PixelTabSize);  		wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  	}  	if (w.Pattern != null)  		if (w.Pattern.IsSeparator) {  			bbuff.FillRect (Control.SeparatorColor' Control.View.TextMargin - 4' Control.View.RowHeight - 1' Control.View.ClientAreaWidth' 1);  		}  	xpos += wdh;  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderText,The following statement contains a magic number: if (StartDraw) {  	if (w.Span == xtr.expansion_StartSpan && xtr.expansion_StartSpan != null)  		if (xtr.expansion_StartSpan.Expanded == false) {  			RenderCollapsedText (RowIndex' xpos);  			HasExpansion = true;  			break;  		}  	if ((w.Type == WordType.Space || w.Type == WordType.Tab) && !DrawBreakpoint && Control.ShowTabGuides) {  		int xtab = xpos - (Control.View.TextMargin - Control.View.ClientAreaStart + XOffset);  		if ((xtab / (double)Control.PixelTabSize) == (xtab / Control.PixelTabSize))  			bbuff.FillRect (Control.TabGuideColor' xpos' 0' 1' Control.View.RowHeight);  	}  	if (w.Type == WordType.Word || ws == false) {  		if (w.Style != null) {  			SetFont (w.Style.Bold' w.Style.Italic' w.Style.Underline' bbuff);  			bbuff.TextBackColor = w.Style.BackColor;  			bbuff.TextForeColor = w.Style.ForeColor;  			bbuff.FontTransparent = w.Style.Transparent;  		}  		else {  			bbuff.Font = GFX.FontNormal;  			bbuff.TextForeColor = Color.Black;  			bbuff.FontTransparent = true;  		}  		if (w.Type == WordType.Word)  			DrawBreakpoint = true;  		if (xtr.Breakpoint && DrawBreakpoint) {  			bbuff.TextForeColor = Control.BreakPointForeColor;  			bbuff.TextBackColor = Control.BreakPointBackColor;  			bbuff.FontTransparent = false;  		}  		if (Control.BracketMatching && (w == BracketEnd || w == BracketStart)) {  			bbuff.TextForeColor = Control.BracketForeColor;  			if (Control.BracketBackColor != Color.Transparent) {  				bbuff.TextBackColor = Control.BracketBackColor;  				bbuff.FontTransparent = false;  			}  			wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  			if (Control.BracketBorderColor != Color.Transparent) {  				bbuff.DrawRect (Control.BracketBorderColor' xpos - 1' 0' wdh' Control.View.RowHeight - 1);  			}  		}  		else {  			wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  		}  		//render errors  		if (w.HasError) {  			//bbuff.FillRect (Color.Red'xpos'Control.View.RowHeight-2'wdh'2);  			int ey = Control.View.RowHeight - 1;  			Color c = w.ErrorColor;  			for (int x = 0; x < wdh + 3; x += 4) {  				bbuff.DrawLine (c' new Point (xpos + x' ey)' new Point (xpos + x + 2' ey - 2));  				bbuff.DrawLine (c' new Point (xpos + x + 2' ey - 2)' new Point (xpos + x + 4' ey));  			}  		}  	}  	else if (w.Type == WordType.Space) {  		bbuff.Font = GFX.FontNormal;  		bbuff.TextForeColor = Control.WhitespaceColor;  		bbuff.FontTransparent = true;  		if (xtr.Breakpoint && DrawBreakpoint) {  			bbuff.TextForeColor = Control.BreakPointForeColor;  			bbuff.TextBackColor = Control.BreakPointBackColor;  			bbuff.FontTransparent = false;  		}  		bbuff.DrawTabbedString ("�"' xpos' 0' taborig' Control.PixelTabSize);  		wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  	}  	else if (w.Type == WordType.Tab) {  		bbuff.Font = GFX.FontNormal;  		bbuff.TextForeColor = Control.WhitespaceColor;  		bbuff.FontTransparent = true;  		if (xtr.Breakpoint && DrawBreakpoint) {  			bbuff.TextForeColor = Control.BreakPointForeColor;  			bbuff.TextBackColor = Control.BreakPointBackColor;  			bbuff.FontTransparent = false;  		}  		bbuff.DrawTabbedString ("�"' xpos' 0' taborig' Control.PixelTabSize);  		wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  	}  	if (w.Pattern != null)  		if (w.Pattern.IsSeparator) {  			bbuff.FillRect (Control.SeparatorColor' Control.View.TextMargin - 4' Control.View.RowHeight - 1' Control.View.ClientAreaWidth' 1);  		}  	xpos += wdh;  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderText,The following statement contains a magic number: if (StartDraw) {  	if (w.Span == xtr.expansion_StartSpan && xtr.expansion_StartSpan != null)  		if (xtr.expansion_StartSpan.Expanded == false) {  			RenderCollapsedText (RowIndex' xpos);  			HasExpansion = true;  			break;  		}  	if ((w.Type == WordType.Space || w.Type == WordType.Tab) && !DrawBreakpoint && Control.ShowTabGuides) {  		int xtab = xpos - (Control.View.TextMargin - Control.View.ClientAreaStart + XOffset);  		if ((xtab / (double)Control.PixelTabSize) == (xtab / Control.PixelTabSize))  			bbuff.FillRect (Control.TabGuideColor' xpos' 0' 1' Control.View.RowHeight);  	}  	if (w.Type == WordType.Word || ws == false) {  		if (w.Style != null) {  			SetFont (w.Style.Bold' w.Style.Italic' w.Style.Underline' bbuff);  			bbuff.TextBackColor = w.Style.BackColor;  			bbuff.TextForeColor = w.Style.ForeColor;  			bbuff.FontTransparent = w.Style.Transparent;  		}  		else {  			bbuff.Font = GFX.FontNormal;  			bbuff.TextForeColor = Color.Black;  			bbuff.FontTransparent = true;  		}  		if (w.Type == WordType.Word)  			DrawBreakpoint = true;  		if (xtr.Breakpoint && DrawBreakpoint) {  			bbuff.TextForeColor = Control.BreakPointForeColor;  			bbuff.TextBackColor = Control.BreakPointBackColor;  			bbuff.FontTransparent = false;  		}  		if (Control.BracketMatching && (w == BracketEnd || w == BracketStart)) {  			bbuff.TextForeColor = Control.BracketForeColor;  			if (Control.BracketBackColor != Color.Transparent) {  				bbuff.TextBackColor = Control.BracketBackColor;  				bbuff.FontTransparent = false;  			}  			wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  			if (Control.BracketBorderColor != Color.Transparent) {  				bbuff.DrawRect (Control.BracketBorderColor' xpos - 1' 0' wdh' Control.View.RowHeight - 1);  			}  		}  		else {  			wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  		}  		//render errors  		if (w.HasError) {  			//bbuff.FillRect (Color.Red'xpos'Control.View.RowHeight-2'wdh'2);  			int ey = Control.View.RowHeight - 1;  			Color c = w.ErrorColor;  			for (int x = 0; x < wdh + 3; x += 4) {  				bbuff.DrawLine (c' new Point (xpos + x' ey)' new Point (xpos + x + 2' ey - 2));  				bbuff.DrawLine (c' new Point (xpos + x + 2' ey - 2)' new Point (xpos + x + 4' ey));  			}  		}  	}  	else if (w.Type == WordType.Space) {  		bbuff.Font = GFX.FontNormal;  		bbuff.TextForeColor = Control.WhitespaceColor;  		bbuff.FontTransparent = true;  		if (xtr.Breakpoint && DrawBreakpoint) {  			bbuff.TextForeColor = Control.BreakPointForeColor;  			bbuff.TextBackColor = Control.BreakPointBackColor;  			bbuff.FontTransparent = false;  		}  		bbuff.DrawTabbedString ("�"' xpos' 0' taborig' Control.PixelTabSize);  		wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  	}  	else if (w.Type == WordType.Tab) {  		bbuff.Font = GFX.FontNormal;  		bbuff.TextForeColor = Control.WhitespaceColor;  		bbuff.FontTransparent = true;  		if (xtr.Breakpoint && DrawBreakpoint) {  			bbuff.TextForeColor = Control.BreakPointForeColor;  			bbuff.TextBackColor = Control.BreakPointBackColor;  			bbuff.FontTransparent = false;  		}  		bbuff.DrawTabbedString ("�"' xpos' 0' taborig' Control.PixelTabSize);  		wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  	}  	if (w.Pattern != null)  		if (w.Pattern.IsSeparator) {  			bbuff.FillRect (Control.SeparatorColor' Control.View.TextMargin - 4' Control.View.RowHeight - 1' Control.View.ClientAreaWidth' 1);  		}  	xpos += wdh;  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderText,The following statement contains a magic number: if (StartDraw) {  	if (w.Span == xtr.expansion_StartSpan && xtr.expansion_StartSpan != null)  		if (xtr.expansion_StartSpan.Expanded == false) {  			RenderCollapsedText (RowIndex' xpos);  			HasExpansion = true;  			break;  		}  	if ((w.Type == WordType.Space || w.Type == WordType.Tab) && !DrawBreakpoint && Control.ShowTabGuides) {  		int xtab = xpos - (Control.View.TextMargin - Control.View.ClientAreaStart + XOffset);  		if ((xtab / (double)Control.PixelTabSize) == (xtab / Control.PixelTabSize))  			bbuff.FillRect (Control.TabGuideColor' xpos' 0' 1' Control.View.RowHeight);  	}  	if (w.Type == WordType.Word || ws == false) {  		if (w.Style != null) {  			SetFont (w.Style.Bold' w.Style.Italic' w.Style.Underline' bbuff);  			bbuff.TextBackColor = w.Style.BackColor;  			bbuff.TextForeColor = w.Style.ForeColor;  			bbuff.FontTransparent = w.Style.Transparent;  		}  		else {  			bbuff.Font = GFX.FontNormal;  			bbuff.TextForeColor = Color.Black;  			bbuff.FontTransparent = true;  		}  		if (w.Type == WordType.Word)  			DrawBreakpoint = true;  		if (xtr.Breakpoint && DrawBreakpoint) {  			bbuff.TextForeColor = Control.BreakPointForeColor;  			bbuff.TextBackColor = Control.BreakPointBackColor;  			bbuff.FontTransparent = false;  		}  		if (Control.BracketMatching && (w == BracketEnd || w == BracketStart)) {  			bbuff.TextForeColor = Control.BracketForeColor;  			if (Control.BracketBackColor != Color.Transparent) {  				bbuff.TextBackColor = Control.BracketBackColor;  				bbuff.FontTransparent = false;  			}  			wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  			if (Control.BracketBorderColor != Color.Transparent) {  				bbuff.DrawRect (Control.BracketBorderColor' xpos - 1' 0' wdh' Control.View.RowHeight - 1);  			}  		}  		else {  			wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  		}  		//render errors  		if (w.HasError) {  			//bbuff.FillRect (Color.Red'xpos'Control.View.RowHeight-2'wdh'2);  			int ey = Control.View.RowHeight - 1;  			Color c = w.ErrorColor;  			for (int x = 0; x < wdh + 3; x += 4) {  				bbuff.DrawLine (c' new Point (xpos + x' ey)' new Point (xpos + x + 2' ey - 2));  				bbuff.DrawLine (c' new Point (xpos + x + 2' ey - 2)' new Point (xpos + x + 4' ey));  			}  		}  	}  	else if (w.Type == WordType.Space) {  		bbuff.Font = GFX.FontNormal;  		bbuff.TextForeColor = Control.WhitespaceColor;  		bbuff.FontTransparent = true;  		if (xtr.Breakpoint && DrawBreakpoint) {  			bbuff.TextForeColor = Control.BreakPointForeColor;  			bbuff.TextBackColor = Control.BreakPointBackColor;  			bbuff.FontTransparent = false;  		}  		bbuff.DrawTabbedString ("�"' xpos' 0' taborig' Control.PixelTabSize);  		wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  	}  	else if (w.Type == WordType.Tab) {  		bbuff.Font = GFX.FontNormal;  		bbuff.TextForeColor = Control.WhitespaceColor;  		bbuff.FontTransparent = true;  		if (xtr.Breakpoint && DrawBreakpoint) {  			bbuff.TextForeColor = Control.BreakPointForeColor;  			bbuff.TextBackColor = Control.BreakPointBackColor;  			bbuff.FontTransparent = false;  		}  		bbuff.DrawTabbedString ("�"' xpos' 0' taborig' Control.PixelTabSize);  		wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  	}  	if (w.Pattern != null)  		if (w.Pattern.IsSeparator) {  			bbuff.FillRect (Control.SeparatorColor' Control.View.TextMargin - 4' Control.View.RowHeight - 1' Control.View.ClientAreaWidth' 1);  		}  	xpos += wdh;  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderText,The following statement contains a magic number: if (StartDraw) {  	if (w.Span == xtr.expansion_StartSpan && xtr.expansion_StartSpan != null)  		if (xtr.expansion_StartSpan.Expanded == false) {  			RenderCollapsedText (RowIndex' xpos);  			HasExpansion = true;  			break;  		}  	if ((w.Type == WordType.Space || w.Type == WordType.Tab) && !DrawBreakpoint && Control.ShowTabGuides) {  		int xtab = xpos - (Control.View.TextMargin - Control.View.ClientAreaStart + XOffset);  		if ((xtab / (double)Control.PixelTabSize) == (xtab / Control.PixelTabSize))  			bbuff.FillRect (Control.TabGuideColor' xpos' 0' 1' Control.View.RowHeight);  	}  	if (w.Type == WordType.Word || ws == false) {  		if (w.Style != null) {  			SetFont (w.Style.Bold' w.Style.Italic' w.Style.Underline' bbuff);  			bbuff.TextBackColor = w.Style.BackColor;  			bbuff.TextForeColor = w.Style.ForeColor;  			bbuff.FontTransparent = w.Style.Transparent;  		}  		else {  			bbuff.Font = GFX.FontNormal;  			bbuff.TextForeColor = Color.Black;  			bbuff.FontTransparent = true;  		}  		if (w.Type == WordType.Word)  			DrawBreakpoint = true;  		if (xtr.Breakpoint && DrawBreakpoint) {  			bbuff.TextForeColor = Control.BreakPointForeColor;  			bbuff.TextBackColor = Control.BreakPointBackColor;  			bbuff.FontTransparent = false;  		}  		if (Control.BracketMatching && (w == BracketEnd || w == BracketStart)) {  			bbuff.TextForeColor = Control.BracketForeColor;  			if (Control.BracketBackColor != Color.Transparent) {  				bbuff.TextBackColor = Control.BracketBackColor;  				bbuff.FontTransparent = false;  			}  			wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  			if (Control.BracketBorderColor != Color.Transparent) {  				bbuff.DrawRect (Control.BracketBorderColor' xpos - 1' 0' wdh' Control.View.RowHeight - 1);  			}  		}  		else {  			wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  		}  		//render errors  		if (w.HasError) {  			//bbuff.FillRect (Color.Red'xpos'Control.View.RowHeight-2'wdh'2);  			int ey = Control.View.RowHeight - 1;  			Color c = w.ErrorColor;  			for (int x = 0; x < wdh + 3; x += 4) {  				bbuff.DrawLine (c' new Point (xpos + x' ey)' new Point (xpos + x + 2' ey - 2));  				bbuff.DrawLine (c' new Point (xpos + x + 2' ey - 2)' new Point (xpos + x + 4' ey));  			}  		}  	}  	else if (w.Type == WordType.Space) {  		bbuff.Font = GFX.FontNormal;  		bbuff.TextForeColor = Control.WhitespaceColor;  		bbuff.FontTransparent = true;  		if (xtr.Breakpoint && DrawBreakpoint) {  			bbuff.TextForeColor = Control.BreakPointForeColor;  			bbuff.TextBackColor = Control.BreakPointBackColor;  			bbuff.FontTransparent = false;  		}  		bbuff.DrawTabbedString ("�"' xpos' 0' taborig' Control.PixelTabSize);  		wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  	}  	else if (w.Type == WordType.Tab) {  		bbuff.Font = GFX.FontNormal;  		bbuff.TextForeColor = Control.WhitespaceColor;  		bbuff.FontTransparent = true;  		if (xtr.Breakpoint && DrawBreakpoint) {  			bbuff.TextForeColor = Control.BreakPointForeColor;  			bbuff.TextBackColor = Control.BreakPointBackColor;  			bbuff.FontTransparent = false;  		}  		bbuff.DrawTabbedString ("�"' xpos' 0' taborig' Control.PixelTabSize);  		wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  	}  	if (w.Pattern != null)  		if (w.Pattern.IsSeparator) {  			bbuff.FillRect (Control.SeparatorColor' Control.View.TextMargin - 4' Control.View.RowHeight - 1' Control.View.ClientAreaWidth' 1);  		}  	xpos += wdh;  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderText,The following statement contains a magic number: if (StartDraw) {  	if (w.Span == xtr.expansion_StartSpan && xtr.expansion_StartSpan != null)  		if (xtr.expansion_StartSpan.Expanded == false) {  			RenderCollapsedText (RowIndex' xpos);  			HasExpansion = true;  			break;  		}  	if ((w.Type == WordType.Space || w.Type == WordType.Tab) && !DrawBreakpoint && Control.ShowTabGuides) {  		int xtab = xpos - (Control.View.TextMargin - Control.View.ClientAreaStart + XOffset);  		if ((xtab / (double)Control.PixelTabSize) == (xtab / Control.PixelTabSize))  			bbuff.FillRect (Control.TabGuideColor' xpos' 0' 1' Control.View.RowHeight);  	}  	if (w.Type == WordType.Word || ws == false) {  		if (w.Style != null) {  			SetFont (w.Style.Bold' w.Style.Italic' w.Style.Underline' bbuff);  			bbuff.TextBackColor = w.Style.BackColor;  			bbuff.TextForeColor = w.Style.ForeColor;  			bbuff.FontTransparent = w.Style.Transparent;  		}  		else {  			bbuff.Font = GFX.FontNormal;  			bbuff.TextForeColor = Color.Black;  			bbuff.FontTransparent = true;  		}  		if (w.Type == WordType.Word)  			DrawBreakpoint = true;  		if (xtr.Breakpoint && DrawBreakpoint) {  			bbuff.TextForeColor = Control.BreakPointForeColor;  			bbuff.TextBackColor = Control.BreakPointBackColor;  			bbuff.FontTransparent = false;  		}  		if (Control.BracketMatching && (w == BracketEnd || w == BracketStart)) {  			bbuff.TextForeColor = Control.BracketForeColor;  			if (Control.BracketBackColor != Color.Transparent) {  				bbuff.TextBackColor = Control.BracketBackColor;  				bbuff.FontTransparent = false;  			}  			wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  			if (Control.BracketBorderColor != Color.Transparent) {  				bbuff.DrawRect (Control.BracketBorderColor' xpos - 1' 0' wdh' Control.View.RowHeight - 1);  			}  		}  		else {  			wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  		}  		//render errors  		if (w.HasError) {  			//bbuff.FillRect (Color.Red'xpos'Control.View.RowHeight-2'wdh'2);  			int ey = Control.View.RowHeight - 1;  			Color c = w.ErrorColor;  			for (int x = 0; x < wdh + 3; x += 4) {  				bbuff.DrawLine (c' new Point (xpos + x' ey)' new Point (xpos + x + 2' ey - 2));  				bbuff.DrawLine (c' new Point (xpos + x + 2' ey - 2)' new Point (xpos + x + 4' ey));  			}  		}  	}  	else if (w.Type == WordType.Space) {  		bbuff.Font = GFX.FontNormal;  		bbuff.TextForeColor = Control.WhitespaceColor;  		bbuff.FontTransparent = true;  		if (xtr.Breakpoint && DrawBreakpoint) {  			bbuff.TextForeColor = Control.BreakPointForeColor;  			bbuff.TextBackColor = Control.BreakPointBackColor;  			bbuff.FontTransparent = false;  		}  		bbuff.DrawTabbedString ("�"' xpos' 0' taborig' Control.PixelTabSize);  		wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  	}  	else if (w.Type == WordType.Tab) {  		bbuff.Font = GFX.FontNormal;  		bbuff.TextForeColor = Control.WhitespaceColor;  		bbuff.FontTransparent = true;  		if (xtr.Breakpoint && DrawBreakpoint) {  			bbuff.TextForeColor = Control.BreakPointForeColor;  			bbuff.TextBackColor = Control.BreakPointBackColor;  			bbuff.FontTransparent = false;  		}  		bbuff.DrawTabbedString ("�"' xpos' 0' taborig' Control.PixelTabSize);  		wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  	}  	if (w.Pattern != null)  		if (w.Pattern.IsSeparator) {  			bbuff.FillRect (Control.SeparatorColor' Control.View.TextMargin - 4' Control.View.RowHeight - 1' Control.View.ClientAreaWidth' 1);  		}  	xpos += wdh;  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderText,The following statement contains a magic number: if (w.Type == WordType.Word || ws == false) {  	if (w.Style != null) {  		SetFont (w.Style.Bold' w.Style.Italic' w.Style.Underline' bbuff);  		bbuff.TextBackColor = w.Style.BackColor;  		bbuff.TextForeColor = w.Style.ForeColor;  		bbuff.FontTransparent = w.Style.Transparent;  	}  	else {  		bbuff.Font = GFX.FontNormal;  		bbuff.TextForeColor = Color.Black;  		bbuff.FontTransparent = true;  	}  	if (w.Type == WordType.Word)  		DrawBreakpoint = true;  	if (xtr.Breakpoint && DrawBreakpoint) {  		bbuff.TextForeColor = Control.BreakPointForeColor;  		bbuff.TextBackColor = Control.BreakPointBackColor;  		bbuff.FontTransparent = false;  	}  	if (Control.BracketMatching && (w == BracketEnd || w == BracketStart)) {  		bbuff.TextForeColor = Control.BracketForeColor;  		if (Control.BracketBackColor != Color.Transparent) {  			bbuff.TextBackColor = Control.BracketBackColor;  			bbuff.FontTransparent = false;  		}  		wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  		if (Control.BracketBorderColor != Color.Transparent) {  			bbuff.DrawRect (Control.BracketBorderColor' xpos - 1' 0' wdh' Control.View.RowHeight - 1);  		}  	}  	else {  		wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  	}  	//render errors  	if (w.HasError) {  		//bbuff.FillRect (Color.Red'xpos'Control.View.RowHeight-2'wdh'2);  		int ey = Control.View.RowHeight - 1;  		Color c = w.ErrorColor;  		for (int x = 0; x < wdh + 3; x += 4) {  			bbuff.DrawLine (c' new Point (xpos + x' ey)' new Point (xpos + x + 2' ey - 2));  			bbuff.DrawLine (c' new Point (xpos + x + 2' ey - 2)' new Point (xpos + x + 4' ey));  		}  	}  }  else if (w.Type == WordType.Space) {  	bbuff.Font = GFX.FontNormal;  	bbuff.TextForeColor = Control.WhitespaceColor;  	bbuff.FontTransparent = true;  	if (xtr.Breakpoint && DrawBreakpoint) {  		bbuff.TextForeColor = Control.BreakPointForeColor;  		bbuff.TextBackColor = Control.BreakPointBackColor;  		bbuff.FontTransparent = false;  	}  	bbuff.DrawTabbedString ("�"' xpos' 0' taborig' Control.PixelTabSize);  	wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  }  else if (w.Type == WordType.Tab) {  	bbuff.Font = GFX.FontNormal;  	bbuff.TextForeColor = Control.WhitespaceColor;  	bbuff.FontTransparent = true;  	if (xtr.Breakpoint && DrawBreakpoint) {  		bbuff.TextForeColor = Control.BreakPointForeColor;  		bbuff.TextBackColor = Control.BreakPointBackColor;  		bbuff.FontTransparent = false;  	}  	bbuff.DrawTabbedString ("�"' xpos' 0' taborig' Control.PixelTabSize);  	wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderText,The following statement contains a magic number: if (w.Type == WordType.Word || ws == false) {  	if (w.Style != null) {  		SetFont (w.Style.Bold' w.Style.Italic' w.Style.Underline' bbuff);  		bbuff.TextBackColor = w.Style.BackColor;  		bbuff.TextForeColor = w.Style.ForeColor;  		bbuff.FontTransparent = w.Style.Transparent;  	}  	else {  		bbuff.Font = GFX.FontNormal;  		bbuff.TextForeColor = Color.Black;  		bbuff.FontTransparent = true;  	}  	if (w.Type == WordType.Word)  		DrawBreakpoint = true;  	if (xtr.Breakpoint && DrawBreakpoint) {  		bbuff.TextForeColor = Control.BreakPointForeColor;  		bbuff.TextBackColor = Control.BreakPointBackColor;  		bbuff.FontTransparent = false;  	}  	if (Control.BracketMatching && (w == BracketEnd || w == BracketStart)) {  		bbuff.TextForeColor = Control.BracketForeColor;  		if (Control.BracketBackColor != Color.Transparent) {  			bbuff.TextBackColor = Control.BracketBackColor;  			bbuff.FontTransparent = false;  		}  		wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  		if (Control.BracketBorderColor != Color.Transparent) {  			bbuff.DrawRect (Control.BracketBorderColor' xpos - 1' 0' wdh' Control.View.RowHeight - 1);  		}  	}  	else {  		wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  	}  	//render errors  	if (w.HasError) {  		//bbuff.FillRect (Color.Red'xpos'Control.View.RowHeight-2'wdh'2);  		int ey = Control.View.RowHeight - 1;  		Color c = w.ErrorColor;  		for (int x = 0; x < wdh + 3; x += 4) {  			bbuff.DrawLine (c' new Point (xpos + x' ey)' new Point (xpos + x + 2' ey - 2));  			bbuff.DrawLine (c' new Point (xpos + x + 2' ey - 2)' new Point (xpos + x + 4' ey));  		}  	}  }  else if (w.Type == WordType.Space) {  	bbuff.Font = GFX.FontNormal;  	bbuff.TextForeColor = Control.WhitespaceColor;  	bbuff.FontTransparent = true;  	if (xtr.Breakpoint && DrawBreakpoint) {  		bbuff.TextForeColor = Control.BreakPointForeColor;  		bbuff.TextBackColor = Control.BreakPointBackColor;  		bbuff.FontTransparent = false;  	}  	bbuff.DrawTabbedString ("�"' xpos' 0' taborig' Control.PixelTabSize);  	wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  }  else if (w.Type == WordType.Tab) {  	bbuff.Font = GFX.FontNormal;  	bbuff.TextForeColor = Control.WhitespaceColor;  	bbuff.FontTransparent = true;  	if (xtr.Breakpoint && DrawBreakpoint) {  		bbuff.TextForeColor = Control.BreakPointForeColor;  		bbuff.TextBackColor = Control.BreakPointBackColor;  		bbuff.FontTransparent = false;  	}  	bbuff.DrawTabbedString ("�"' xpos' 0' taborig' Control.PixelTabSize);  	wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderText,The following statement contains a magic number: if (w.Type == WordType.Word || ws == false) {  	if (w.Style != null) {  		SetFont (w.Style.Bold' w.Style.Italic' w.Style.Underline' bbuff);  		bbuff.TextBackColor = w.Style.BackColor;  		bbuff.TextForeColor = w.Style.ForeColor;  		bbuff.FontTransparent = w.Style.Transparent;  	}  	else {  		bbuff.Font = GFX.FontNormal;  		bbuff.TextForeColor = Color.Black;  		bbuff.FontTransparent = true;  	}  	if (w.Type == WordType.Word)  		DrawBreakpoint = true;  	if (xtr.Breakpoint && DrawBreakpoint) {  		bbuff.TextForeColor = Control.BreakPointForeColor;  		bbuff.TextBackColor = Control.BreakPointBackColor;  		bbuff.FontTransparent = false;  	}  	if (Control.BracketMatching && (w == BracketEnd || w == BracketStart)) {  		bbuff.TextForeColor = Control.BracketForeColor;  		if (Control.BracketBackColor != Color.Transparent) {  			bbuff.TextBackColor = Control.BracketBackColor;  			bbuff.FontTransparent = false;  		}  		wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  		if (Control.BracketBorderColor != Color.Transparent) {  			bbuff.DrawRect (Control.BracketBorderColor' xpos - 1' 0' wdh' Control.View.RowHeight - 1);  		}  	}  	else {  		wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  	}  	//render errors  	if (w.HasError) {  		//bbuff.FillRect (Color.Red'xpos'Control.View.RowHeight-2'wdh'2);  		int ey = Control.View.RowHeight - 1;  		Color c = w.ErrorColor;  		for (int x = 0; x < wdh + 3; x += 4) {  			bbuff.DrawLine (c' new Point (xpos + x' ey)' new Point (xpos + x + 2' ey - 2));  			bbuff.DrawLine (c' new Point (xpos + x + 2' ey - 2)' new Point (xpos + x + 4' ey));  		}  	}  }  else if (w.Type == WordType.Space) {  	bbuff.Font = GFX.FontNormal;  	bbuff.TextForeColor = Control.WhitespaceColor;  	bbuff.FontTransparent = true;  	if (xtr.Breakpoint && DrawBreakpoint) {  		bbuff.TextForeColor = Control.BreakPointForeColor;  		bbuff.TextBackColor = Control.BreakPointBackColor;  		bbuff.FontTransparent = false;  	}  	bbuff.DrawTabbedString ("�"' xpos' 0' taborig' Control.PixelTabSize);  	wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  }  else if (w.Type == WordType.Tab) {  	bbuff.Font = GFX.FontNormal;  	bbuff.TextForeColor = Control.WhitespaceColor;  	bbuff.FontTransparent = true;  	if (xtr.Breakpoint && DrawBreakpoint) {  		bbuff.TextForeColor = Control.BreakPointForeColor;  		bbuff.TextBackColor = Control.BreakPointBackColor;  		bbuff.FontTransparent = false;  	}  	bbuff.DrawTabbedString ("�"' xpos' 0' taborig' Control.PixelTabSize);  	wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderText,The following statement contains a magic number: if (w.Type == WordType.Word || ws == false) {  	if (w.Style != null) {  		SetFont (w.Style.Bold' w.Style.Italic' w.Style.Underline' bbuff);  		bbuff.TextBackColor = w.Style.BackColor;  		bbuff.TextForeColor = w.Style.ForeColor;  		bbuff.FontTransparent = w.Style.Transparent;  	}  	else {  		bbuff.Font = GFX.FontNormal;  		bbuff.TextForeColor = Color.Black;  		bbuff.FontTransparent = true;  	}  	if (w.Type == WordType.Word)  		DrawBreakpoint = true;  	if (xtr.Breakpoint && DrawBreakpoint) {  		bbuff.TextForeColor = Control.BreakPointForeColor;  		bbuff.TextBackColor = Control.BreakPointBackColor;  		bbuff.FontTransparent = false;  	}  	if (Control.BracketMatching && (w == BracketEnd || w == BracketStart)) {  		bbuff.TextForeColor = Control.BracketForeColor;  		if (Control.BracketBackColor != Color.Transparent) {  			bbuff.TextBackColor = Control.BracketBackColor;  			bbuff.FontTransparent = false;  		}  		wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  		if (Control.BracketBorderColor != Color.Transparent) {  			bbuff.DrawRect (Control.BracketBorderColor' xpos - 1' 0' wdh' Control.View.RowHeight - 1);  		}  	}  	else {  		wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  	}  	//render errors  	if (w.HasError) {  		//bbuff.FillRect (Color.Red'xpos'Control.View.RowHeight-2'wdh'2);  		int ey = Control.View.RowHeight - 1;  		Color c = w.ErrorColor;  		for (int x = 0; x < wdh + 3; x += 4) {  			bbuff.DrawLine (c' new Point (xpos + x' ey)' new Point (xpos + x + 2' ey - 2));  			bbuff.DrawLine (c' new Point (xpos + x + 2' ey - 2)' new Point (xpos + x + 4' ey));  		}  	}  }  else if (w.Type == WordType.Space) {  	bbuff.Font = GFX.FontNormal;  	bbuff.TextForeColor = Control.WhitespaceColor;  	bbuff.FontTransparent = true;  	if (xtr.Breakpoint && DrawBreakpoint) {  		bbuff.TextForeColor = Control.BreakPointForeColor;  		bbuff.TextBackColor = Control.BreakPointBackColor;  		bbuff.FontTransparent = false;  	}  	bbuff.DrawTabbedString ("�"' xpos' 0' taborig' Control.PixelTabSize);  	wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  }  else if (w.Type == WordType.Tab) {  	bbuff.Font = GFX.FontNormal;  	bbuff.TextForeColor = Control.WhitespaceColor;  	bbuff.FontTransparent = true;  	if (xtr.Breakpoint && DrawBreakpoint) {  		bbuff.TextForeColor = Control.BreakPointForeColor;  		bbuff.TextBackColor = Control.BreakPointBackColor;  		bbuff.FontTransparent = false;  	}  	bbuff.DrawTabbedString ("�"' xpos' 0' taborig' Control.PixelTabSize);  	wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderText,The following statement contains a magic number: if (w.Type == WordType.Word || ws == false) {  	if (w.Style != null) {  		SetFont (w.Style.Bold' w.Style.Italic' w.Style.Underline' bbuff);  		bbuff.TextBackColor = w.Style.BackColor;  		bbuff.TextForeColor = w.Style.ForeColor;  		bbuff.FontTransparent = w.Style.Transparent;  	}  	else {  		bbuff.Font = GFX.FontNormal;  		bbuff.TextForeColor = Color.Black;  		bbuff.FontTransparent = true;  	}  	if (w.Type == WordType.Word)  		DrawBreakpoint = true;  	if (xtr.Breakpoint && DrawBreakpoint) {  		bbuff.TextForeColor = Control.BreakPointForeColor;  		bbuff.TextBackColor = Control.BreakPointBackColor;  		bbuff.FontTransparent = false;  	}  	if (Control.BracketMatching && (w == BracketEnd || w == BracketStart)) {  		bbuff.TextForeColor = Control.BracketForeColor;  		if (Control.BracketBackColor != Color.Transparent) {  			bbuff.TextBackColor = Control.BracketBackColor;  			bbuff.FontTransparent = false;  		}  		wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  		if (Control.BracketBorderColor != Color.Transparent) {  			bbuff.DrawRect (Control.BracketBorderColor' xpos - 1' 0' wdh' Control.View.RowHeight - 1);  		}  	}  	else {  		wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  	}  	//render errors  	if (w.HasError) {  		//bbuff.FillRect (Color.Red'xpos'Control.View.RowHeight-2'wdh'2);  		int ey = Control.View.RowHeight - 1;  		Color c = w.ErrorColor;  		for (int x = 0; x < wdh + 3; x += 4) {  			bbuff.DrawLine (c' new Point (xpos + x' ey)' new Point (xpos + x + 2' ey - 2));  			bbuff.DrawLine (c' new Point (xpos + x + 2' ey - 2)' new Point (xpos + x + 4' ey));  		}  	}  }  else if (w.Type == WordType.Space) {  	bbuff.Font = GFX.FontNormal;  	bbuff.TextForeColor = Control.WhitespaceColor;  	bbuff.FontTransparent = true;  	if (xtr.Breakpoint && DrawBreakpoint) {  		bbuff.TextForeColor = Control.BreakPointForeColor;  		bbuff.TextBackColor = Control.BreakPointBackColor;  		bbuff.FontTransparent = false;  	}  	bbuff.DrawTabbedString ("�"' xpos' 0' taborig' Control.PixelTabSize);  	wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  }  else if (w.Type == WordType.Tab) {  	bbuff.Font = GFX.FontNormal;  	bbuff.TextForeColor = Control.WhitespaceColor;  	bbuff.FontTransparent = true;  	if (xtr.Breakpoint && DrawBreakpoint) {  		bbuff.TextForeColor = Control.BreakPointForeColor;  		bbuff.TextBackColor = Control.BreakPointBackColor;  		bbuff.FontTransparent = false;  	}  	bbuff.DrawTabbedString ("�"' xpos' 0' taborig' Control.PixelTabSize);  	wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderText,The following statement contains a magic number: if (w.Type == WordType.Word || ws == false) {  	if (w.Style != null) {  		SetFont (w.Style.Bold' w.Style.Italic' w.Style.Underline' bbuff);  		bbuff.TextBackColor = w.Style.BackColor;  		bbuff.TextForeColor = w.Style.ForeColor;  		bbuff.FontTransparent = w.Style.Transparent;  	}  	else {  		bbuff.Font = GFX.FontNormal;  		bbuff.TextForeColor = Color.Black;  		bbuff.FontTransparent = true;  	}  	if (w.Type == WordType.Word)  		DrawBreakpoint = true;  	if (xtr.Breakpoint && DrawBreakpoint) {  		bbuff.TextForeColor = Control.BreakPointForeColor;  		bbuff.TextBackColor = Control.BreakPointBackColor;  		bbuff.FontTransparent = false;  	}  	if (Control.BracketMatching && (w == BracketEnd || w == BracketStart)) {  		bbuff.TextForeColor = Control.BracketForeColor;  		if (Control.BracketBackColor != Color.Transparent) {  			bbuff.TextBackColor = Control.BracketBackColor;  			bbuff.FontTransparent = false;  		}  		wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  		if (Control.BracketBorderColor != Color.Transparent) {  			bbuff.DrawRect (Control.BracketBorderColor' xpos - 1' 0' wdh' Control.View.RowHeight - 1);  		}  	}  	else {  		wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  	}  	//render errors  	if (w.HasError) {  		//bbuff.FillRect (Color.Red'xpos'Control.View.RowHeight-2'wdh'2);  		int ey = Control.View.RowHeight - 1;  		Color c = w.ErrorColor;  		for (int x = 0; x < wdh + 3; x += 4) {  			bbuff.DrawLine (c' new Point (xpos + x' ey)' new Point (xpos + x + 2' ey - 2));  			bbuff.DrawLine (c' new Point (xpos + x + 2' ey - 2)' new Point (xpos + x + 4' ey));  		}  	}  }  else if (w.Type == WordType.Space) {  	bbuff.Font = GFX.FontNormal;  	bbuff.TextForeColor = Control.WhitespaceColor;  	bbuff.FontTransparent = true;  	if (xtr.Breakpoint && DrawBreakpoint) {  		bbuff.TextForeColor = Control.BreakPointForeColor;  		bbuff.TextBackColor = Control.BreakPointBackColor;  		bbuff.FontTransparent = false;  	}  	bbuff.DrawTabbedString ("�"' xpos' 0' taborig' Control.PixelTabSize);  	wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  }  else if (w.Type == WordType.Tab) {  	bbuff.Font = GFX.FontNormal;  	bbuff.TextForeColor = Control.WhitespaceColor;  	bbuff.FontTransparent = true;  	if (xtr.Breakpoint && DrawBreakpoint) {  		bbuff.TextForeColor = Control.BreakPointForeColor;  		bbuff.TextBackColor = Control.BreakPointBackColor;  		bbuff.FontTransparent = false;  	}  	bbuff.DrawTabbedString ("�"' xpos' 0' taborig' Control.PixelTabSize);  	wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderText,The following statement contains a magic number: if (w.Type == WordType.Word || ws == false) {  	if (w.Style != null) {  		SetFont (w.Style.Bold' w.Style.Italic' w.Style.Underline' bbuff);  		bbuff.TextBackColor = w.Style.BackColor;  		bbuff.TextForeColor = w.Style.ForeColor;  		bbuff.FontTransparent = w.Style.Transparent;  	}  	else {  		bbuff.Font = GFX.FontNormal;  		bbuff.TextForeColor = Color.Black;  		bbuff.FontTransparent = true;  	}  	if (w.Type == WordType.Word)  		DrawBreakpoint = true;  	if (xtr.Breakpoint && DrawBreakpoint) {  		bbuff.TextForeColor = Control.BreakPointForeColor;  		bbuff.TextBackColor = Control.BreakPointBackColor;  		bbuff.FontTransparent = false;  	}  	if (Control.BracketMatching && (w == BracketEnd || w == BracketStart)) {  		bbuff.TextForeColor = Control.BracketForeColor;  		if (Control.BracketBackColor != Color.Transparent) {  			bbuff.TextBackColor = Control.BracketBackColor;  			bbuff.FontTransparent = false;  		}  		wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  		if (Control.BracketBorderColor != Color.Transparent) {  			bbuff.DrawRect (Control.BracketBorderColor' xpos - 1' 0' wdh' Control.View.RowHeight - 1);  		}  	}  	else {  		wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  	}  	//render errors  	if (w.HasError) {  		//bbuff.FillRect (Color.Red'xpos'Control.View.RowHeight-2'wdh'2);  		int ey = Control.View.RowHeight - 1;  		Color c = w.ErrorColor;  		for (int x = 0; x < wdh + 3; x += 4) {  			bbuff.DrawLine (c' new Point (xpos + x' ey)' new Point (xpos + x + 2' ey - 2));  			bbuff.DrawLine (c' new Point (xpos + x + 2' ey - 2)' new Point (xpos + x + 4' ey));  		}  	}  }  else if (w.Type == WordType.Space) {  	bbuff.Font = GFX.FontNormal;  	bbuff.TextForeColor = Control.WhitespaceColor;  	bbuff.FontTransparent = true;  	if (xtr.Breakpoint && DrawBreakpoint) {  		bbuff.TextForeColor = Control.BreakPointForeColor;  		bbuff.TextBackColor = Control.BreakPointBackColor;  		bbuff.FontTransparent = false;  	}  	bbuff.DrawTabbedString ("�"' xpos' 0' taborig' Control.PixelTabSize);  	wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  }  else if (w.Type == WordType.Tab) {  	bbuff.Font = GFX.FontNormal;  	bbuff.TextForeColor = Control.WhitespaceColor;  	bbuff.FontTransparent = true;  	if (xtr.Breakpoint && DrawBreakpoint) {  		bbuff.TextForeColor = Control.BreakPointForeColor;  		bbuff.TextBackColor = Control.BreakPointBackColor;  		bbuff.FontTransparent = false;  	}  	bbuff.DrawTabbedString ("�"' xpos' 0' taborig' Control.PixelTabSize);  	wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderText,The following statement contains a magic number: if (w.HasError) {  	//bbuff.FillRect (Color.Red'xpos'Control.View.RowHeight-2'wdh'2);  	int ey = Control.View.RowHeight - 1;  	Color c = w.ErrorColor;  	for (int x = 0; x < wdh + 3; x += 4) {  		bbuff.DrawLine (c' new Point (xpos + x' ey)' new Point (xpos + x + 2' ey - 2));  		bbuff.DrawLine (c' new Point (xpos + x + 2' ey - 2)' new Point (xpos + x + 4' ey));  	}  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderText,The following statement contains a magic number: if (w.HasError) {  	//bbuff.FillRect (Color.Red'xpos'Control.View.RowHeight-2'wdh'2);  	int ey = Control.View.RowHeight - 1;  	Color c = w.ErrorColor;  	for (int x = 0; x < wdh + 3; x += 4) {  		bbuff.DrawLine (c' new Point (xpos + x' ey)' new Point (xpos + x + 2' ey - 2));  		bbuff.DrawLine (c' new Point (xpos + x + 2' ey - 2)' new Point (xpos + x + 4' ey));  	}  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderText,The following statement contains a magic number: if (w.HasError) {  	//bbuff.FillRect (Color.Red'xpos'Control.View.RowHeight-2'wdh'2);  	int ey = Control.View.RowHeight - 1;  	Color c = w.ErrorColor;  	for (int x = 0; x < wdh + 3; x += 4) {  		bbuff.DrawLine (c' new Point (xpos + x' ey)' new Point (xpos + x + 2' ey - 2));  		bbuff.DrawLine (c' new Point (xpos + x + 2' ey - 2)' new Point (xpos + x + 4' ey));  	}  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderText,The following statement contains a magic number: if (w.HasError) {  	//bbuff.FillRect (Color.Red'xpos'Control.View.RowHeight-2'wdh'2);  	int ey = Control.View.RowHeight - 1;  	Color c = w.ErrorColor;  	for (int x = 0; x < wdh + 3; x += 4) {  		bbuff.DrawLine (c' new Point (xpos + x' ey)' new Point (xpos + x + 2' ey - 2));  		bbuff.DrawLine (c' new Point (xpos + x + 2' ey - 2)' new Point (xpos + x + 4' ey));  	}  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderText,The following statement contains a magic number: if (w.HasError) {  	//bbuff.FillRect (Color.Red'xpos'Control.View.RowHeight-2'wdh'2);  	int ey = Control.View.RowHeight - 1;  	Color c = w.ErrorColor;  	for (int x = 0; x < wdh + 3; x += 4) {  		bbuff.DrawLine (c' new Point (xpos + x' ey)' new Point (xpos + x + 2' ey - 2));  		bbuff.DrawLine (c' new Point (xpos + x + 2' ey - 2)' new Point (xpos + x + 4' ey));  	}  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderText,The following statement contains a magic number: if (w.HasError) {  	//bbuff.FillRect (Color.Red'xpos'Control.View.RowHeight-2'wdh'2);  	int ey = Control.View.RowHeight - 1;  	Color c = w.ErrorColor;  	for (int x = 0; x < wdh + 3; x += 4) {  		bbuff.DrawLine (c' new Point (xpos + x' ey)' new Point (xpos + x + 2' ey - 2));  		bbuff.DrawLine (c' new Point (xpos + x + 2' ey - 2)' new Point (xpos + x + 4' ey));  	}  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderText,The following statement contains a magic number: if (w.HasError) {  	//bbuff.FillRect (Color.Red'xpos'Control.View.RowHeight-2'wdh'2);  	int ey = Control.View.RowHeight - 1;  	Color c = w.ErrorColor;  	for (int x = 0; x < wdh + 3; x += 4) {  		bbuff.DrawLine (c' new Point (xpos + x' ey)' new Point (xpos + x + 2' ey - 2));  		bbuff.DrawLine (c' new Point (xpos + x + 2' ey - 2)' new Point (xpos + x + 4' ey));  	}  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderText,The following statement contains a magic number: for (int x = 0; x < wdh + 3; x += 4) {  	bbuff.DrawLine (c' new Point (xpos + x' ey)' new Point (xpos + x + 2' ey - 2));  	bbuff.DrawLine (c' new Point (xpos + x + 2' ey - 2)' new Point (xpos + x + 4' ey));  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderText,The following statement contains a magic number: for (int x = 0; x < wdh + 3; x += 4) {  	bbuff.DrawLine (c' new Point (xpos + x' ey)' new Point (xpos + x + 2' ey - 2));  	bbuff.DrawLine (c' new Point (xpos + x + 2' ey - 2)' new Point (xpos + x + 4' ey));  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderText,The following statement contains a magic number: for (int x = 0; x < wdh + 3; x += 4) {  	bbuff.DrawLine (c' new Point (xpos + x' ey)' new Point (xpos + x + 2' ey - 2));  	bbuff.DrawLine (c' new Point (xpos + x + 2' ey - 2)' new Point (xpos + x + 4' ey));  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderText,The following statement contains a magic number: for (int x = 0; x < wdh + 3; x += 4) {  	bbuff.DrawLine (c' new Point (xpos + x' ey)' new Point (xpos + x + 2' ey - 2));  	bbuff.DrawLine (c' new Point (xpos + x + 2' ey - 2)' new Point (xpos + x + 4' ey));  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderText,The following statement contains a magic number: for (int x = 0; x < wdh + 3; x += 4) {  	bbuff.DrawLine (c' new Point (xpos + x' ey)' new Point (xpos + x + 2' ey - 2));  	bbuff.DrawLine (c' new Point (xpos + x + 2' ey - 2)' new Point (xpos + x + 4' ey));  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderText,The following statement contains a magic number: for (int x = 0; x < wdh + 3; x += 4) {  	bbuff.DrawLine (c' new Point (xpos + x' ey)' new Point (xpos + x + 2' ey - 2));  	bbuff.DrawLine (c' new Point (xpos + x + 2' ey - 2)' new Point (xpos + x + 4' ey));  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderText,The following statement contains a magic number: for (int x = 0; x < wdh + 3; x += 4) {  	bbuff.DrawLine (c' new Point (xpos + x' ey)' new Point (xpos + x + 2' ey - 2));  	bbuff.DrawLine (c' new Point (xpos + x + 2' ey - 2)' new Point (xpos + x + 4' ey));  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderText,The following statement contains a magic number: x += 4
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderText,The following statement contains a magic number: bbuff.DrawLine (c' new Point (xpos + x' ey)' new Point (xpos + x + 2' ey - 2));  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderText,The following statement contains a magic number: bbuff.DrawLine (c' new Point (xpos + x' ey)' new Point (xpos + x + 2' ey - 2));  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderText,The following statement contains a magic number: bbuff.DrawLine (c' new Point (xpos + x + 2' ey - 2)' new Point (xpos + x + 4' ey));  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderText,The following statement contains a magic number: bbuff.DrawLine (c' new Point (xpos + x + 2' ey - 2)' new Point (xpos + x + 4' ey));  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderText,The following statement contains a magic number: bbuff.DrawLine (c' new Point (xpos + x + 2' ey - 2)' new Point (xpos + x + 4' ey));  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderText,The following statement contains a magic number: if (w.Pattern != null)  	if (w.Pattern.IsSeparator) {  		bbuff.FillRect (Control.SeparatorColor' Control.View.TextMargin - 4' Control.View.RowHeight - 1' Control.View.ClientAreaWidth' 1);  	}  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderText,The following statement contains a magic number: if (w.Pattern.IsSeparator) {  	bbuff.FillRect (Control.SeparatorColor' Control.View.TextMargin - 4' Control.View.RowHeight - 1' Control.View.ClientAreaWidth' 1);  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderText,The following statement contains a magic number: bbuff.FillRect (Control.SeparatorColor' Control.View.TextMargin - 4' Control.View.RowHeight - 1' Control.View.ClientAreaWidth' 1);  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderSelectedText,The following statement contains a magic number: if (RowIndex <= Control.Document.Count - 1) {  	bbuff.TextForeColor = Control.ContainsFocus ? Control.SelectionForeColor : Control.InactiveSelectionForeColor;  	Row xtr = Control.Document [RowIndex];  	//if (xtr.startSpan != null)  	//	bbuff.DrawTabbedString (xtr.startSpan.GetHashCode ().ToString (System.Globalization.CultureInfo.InvariantCulture)'100'0'0'0);  	//bbuff.TextForeColor = Color.Black;  	//bbuff.DrawTabbedString (xtr.Text'(int)(Control.View.TextMargin -Control.View.ClientAreaStart)'1'-Control.View.FirstVisibleColumn*Control.View.CharWidth+Control.View.TextMargin'Control.PixelTabSize);					  	int xpos = Control.View.TextMargin - Control.View.ClientAreaStart + XOffset;  	int wdh = 0;  	int taborig = -Control.View.FirstVisibleColumn * Control.View.CharWidth + Control.View.TextMargin;  	bool ws = Control.ShowWhitespace;  	bool StartDraw = false;  	if (StartWord == null)  		StartDraw = true;  	xtr.Expansion_StartChar = 0;  	xtr.Expansion_EndChar = 0;  	bool HasExpansion = false;  	foreach (Word w in xtr.FormattedWords) {  		if (StartDraw) {  			if (w.Span == xtr.expansion_StartSpan && xtr.expansion_StartSpan != null)  				if (xtr.expansion_StartSpan.Expanded == false) {  					RenderCollapsedSelectedText (RowIndex' xpos);  					HasExpansion = true;  					break;  				}  			if (w.Type == WordType.Word || ws == false) {  				if (w.Style != null) {  					SetFont (w.Style.Bold' w.Style.Italic' w.Style.Underline' bbuff);  				}  				else {  					bbuff.Font = GFX.FontNormal;  				}  				wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  				//render errors  				if (w.HasError) {  					//bbuff.FillRect (Color.Red'xpos'Control.View.RowHeight-2'wdh'2);  					int ey = Control.View.RowHeight - 1;  					Color c = w.ErrorColor;  					for (int x = 0; x < wdh + 3; x += 4) {  						bbuff.DrawLine (c' new Point (xpos + x' ey)' new Point (xpos + x + 2' ey - 2));  						bbuff.DrawLine (c' new Point (xpos + x + 2' ey - 2)' new Point (xpos + x + 4' ey));  					}  				}  			}  			else if (w.Type == WordType.Space) {  				bbuff.Font = GFX.FontNormal;  				bbuff.DrawTabbedString ("�"' xpos' 0' taborig' Control.PixelTabSize);  				wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  			}  			else if (w.Type == WordType.Tab) {  				bbuff.Font = GFX.FontNormal;  				bbuff.DrawTabbedString ("�"' xpos' 0' taborig' Control.PixelTabSize);  				wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  			}  			if (w.Pattern != null)  				if (w.Pattern.IsSeparator) {  					bbuff.FillRect (Control.SeparatorColor' Control.View.TextMargin - 4' Control.View.RowHeight - 1' Control.View.ClientAreaWidth' 1);  				}  			xpos += wdh;  		}  		if (!StartDraw)  			xtr.Expansion_StartChar += w.Text.Length;  		if (w == StartWord)  			StartDraw = true;  		xtr.Expansion_EndChar += w.Text.Length;  	}  	if (xtr.IsCollapsed) {  	}  	else if (xtr.endSpan != null && xtr.endSpan.spanDefinition != null && xtr.endSpan.spanDefinition.Style != null) {  		GFX.BackBuffer.FillRect (xtr.endSpan.spanDefinition.Style.BackColor' xpos' 0' Control.Width - xpos' Control.View.RowHeight);  	}  	if (Control._SyntaxBox.ShowEOLMarker && !HasExpansion) {  		bbuff.Font = GFX.FontNormal;  		bbuff.TextForeColor = Control.SelectionForeColor;  		bbuff.FontTransparent = true;  		bbuff.DrawTabbedString ("�"' xpos' 0' taborig' Control.PixelTabSize);  	}  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderSelectedText,The following statement contains a magic number: if (RowIndex <= Control.Document.Count - 1) {  	bbuff.TextForeColor = Control.ContainsFocus ? Control.SelectionForeColor : Control.InactiveSelectionForeColor;  	Row xtr = Control.Document [RowIndex];  	//if (xtr.startSpan != null)  	//	bbuff.DrawTabbedString (xtr.startSpan.GetHashCode ().ToString (System.Globalization.CultureInfo.InvariantCulture)'100'0'0'0);  	//bbuff.TextForeColor = Color.Black;  	//bbuff.DrawTabbedString (xtr.Text'(int)(Control.View.TextMargin -Control.View.ClientAreaStart)'1'-Control.View.FirstVisibleColumn*Control.View.CharWidth+Control.View.TextMargin'Control.PixelTabSize);					  	int xpos = Control.View.TextMargin - Control.View.ClientAreaStart + XOffset;  	int wdh = 0;  	int taborig = -Control.View.FirstVisibleColumn * Control.View.CharWidth + Control.View.TextMargin;  	bool ws = Control.ShowWhitespace;  	bool StartDraw = false;  	if (StartWord == null)  		StartDraw = true;  	xtr.Expansion_StartChar = 0;  	xtr.Expansion_EndChar = 0;  	bool HasExpansion = false;  	foreach (Word w in xtr.FormattedWords) {  		if (StartDraw) {  			if (w.Span == xtr.expansion_StartSpan && xtr.expansion_StartSpan != null)  				if (xtr.expansion_StartSpan.Expanded == false) {  					RenderCollapsedSelectedText (RowIndex' xpos);  					HasExpansion = true;  					break;  				}  			if (w.Type == WordType.Word || ws == false) {  				if (w.Style != null) {  					SetFont (w.Style.Bold' w.Style.Italic' w.Style.Underline' bbuff);  				}  				else {  					bbuff.Font = GFX.FontNormal;  				}  				wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  				//render errors  				if (w.HasError) {  					//bbuff.FillRect (Color.Red'xpos'Control.View.RowHeight-2'wdh'2);  					int ey = Control.View.RowHeight - 1;  					Color c = w.ErrorColor;  					for (int x = 0; x < wdh + 3; x += 4) {  						bbuff.DrawLine (c' new Point (xpos + x' ey)' new Point (xpos + x + 2' ey - 2));  						bbuff.DrawLine (c' new Point (xpos + x + 2' ey - 2)' new Point (xpos + x + 4' ey));  					}  				}  			}  			else if (w.Type == WordType.Space) {  				bbuff.Font = GFX.FontNormal;  				bbuff.DrawTabbedString ("�"' xpos' 0' taborig' Control.PixelTabSize);  				wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  			}  			else if (w.Type == WordType.Tab) {  				bbuff.Font = GFX.FontNormal;  				bbuff.DrawTabbedString ("�"' xpos' 0' taborig' Control.PixelTabSize);  				wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  			}  			if (w.Pattern != null)  				if (w.Pattern.IsSeparator) {  					bbuff.FillRect (Control.SeparatorColor' Control.View.TextMargin - 4' Control.View.RowHeight - 1' Control.View.ClientAreaWidth' 1);  				}  			xpos += wdh;  		}  		if (!StartDraw)  			xtr.Expansion_StartChar += w.Text.Length;  		if (w == StartWord)  			StartDraw = true;  		xtr.Expansion_EndChar += w.Text.Length;  	}  	if (xtr.IsCollapsed) {  	}  	else if (xtr.endSpan != null && xtr.endSpan.spanDefinition != null && xtr.endSpan.spanDefinition.Style != null) {  		GFX.BackBuffer.FillRect (xtr.endSpan.spanDefinition.Style.BackColor' xpos' 0' Control.Width - xpos' Control.View.RowHeight);  	}  	if (Control._SyntaxBox.ShowEOLMarker && !HasExpansion) {  		bbuff.Font = GFX.FontNormal;  		bbuff.TextForeColor = Control.SelectionForeColor;  		bbuff.FontTransparent = true;  		bbuff.DrawTabbedString ("�"' xpos' 0' taborig' Control.PixelTabSize);  	}  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderSelectedText,The following statement contains a magic number: if (RowIndex <= Control.Document.Count - 1) {  	bbuff.TextForeColor = Control.ContainsFocus ? Control.SelectionForeColor : Control.InactiveSelectionForeColor;  	Row xtr = Control.Document [RowIndex];  	//if (xtr.startSpan != null)  	//	bbuff.DrawTabbedString (xtr.startSpan.GetHashCode ().ToString (System.Globalization.CultureInfo.InvariantCulture)'100'0'0'0);  	//bbuff.TextForeColor = Color.Black;  	//bbuff.DrawTabbedString (xtr.Text'(int)(Control.View.TextMargin -Control.View.ClientAreaStart)'1'-Control.View.FirstVisibleColumn*Control.View.CharWidth+Control.View.TextMargin'Control.PixelTabSize);					  	int xpos = Control.View.TextMargin - Control.View.ClientAreaStart + XOffset;  	int wdh = 0;  	int taborig = -Control.View.FirstVisibleColumn * Control.View.CharWidth + Control.View.TextMargin;  	bool ws = Control.ShowWhitespace;  	bool StartDraw = false;  	if (StartWord == null)  		StartDraw = true;  	xtr.Expansion_StartChar = 0;  	xtr.Expansion_EndChar = 0;  	bool HasExpansion = false;  	foreach (Word w in xtr.FormattedWords) {  		if (StartDraw) {  			if (w.Span == xtr.expansion_StartSpan && xtr.expansion_StartSpan != null)  				if (xtr.expansion_StartSpan.Expanded == false) {  					RenderCollapsedSelectedText (RowIndex' xpos);  					HasExpansion = true;  					break;  				}  			if (w.Type == WordType.Word || ws == false) {  				if (w.Style != null) {  					SetFont (w.Style.Bold' w.Style.Italic' w.Style.Underline' bbuff);  				}  				else {  					bbuff.Font = GFX.FontNormal;  				}  				wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  				//render errors  				if (w.HasError) {  					//bbuff.FillRect (Color.Red'xpos'Control.View.RowHeight-2'wdh'2);  					int ey = Control.View.RowHeight - 1;  					Color c = w.ErrorColor;  					for (int x = 0; x < wdh + 3; x += 4) {  						bbuff.DrawLine (c' new Point (xpos + x' ey)' new Point (xpos + x + 2' ey - 2));  						bbuff.DrawLine (c' new Point (xpos + x + 2' ey - 2)' new Point (xpos + x + 4' ey));  					}  				}  			}  			else if (w.Type == WordType.Space) {  				bbuff.Font = GFX.FontNormal;  				bbuff.DrawTabbedString ("�"' xpos' 0' taborig' Control.PixelTabSize);  				wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  			}  			else if (w.Type == WordType.Tab) {  				bbuff.Font = GFX.FontNormal;  				bbuff.DrawTabbedString ("�"' xpos' 0' taborig' Control.PixelTabSize);  				wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  			}  			if (w.Pattern != null)  				if (w.Pattern.IsSeparator) {  					bbuff.FillRect (Control.SeparatorColor' Control.View.TextMargin - 4' Control.View.RowHeight - 1' Control.View.ClientAreaWidth' 1);  				}  			xpos += wdh;  		}  		if (!StartDraw)  			xtr.Expansion_StartChar += w.Text.Length;  		if (w == StartWord)  			StartDraw = true;  		xtr.Expansion_EndChar += w.Text.Length;  	}  	if (xtr.IsCollapsed) {  	}  	else if (xtr.endSpan != null && xtr.endSpan.spanDefinition != null && xtr.endSpan.spanDefinition.Style != null) {  		GFX.BackBuffer.FillRect (xtr.endSpan.spanDefinition.Style.BackColor' xpos' 0' Control.Width - xpos' Control.View.RowHeight);  	}  	if (Control._SyntaxBox.ShowEOLMarker && !HasExpansion) {  		bbuff.Font = GFX.FontNormal;  		bbuff.TextForeColor = Control.SelectionForeColor;  		bbuff.FontTransparent = true;  		bbuff.DrawTabbedString ("�"' xpos' 0' taborig' Control.PixelTabSize);  	}  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderSelectedText,The following statement contains a magic number: if (RowIndex <= Control.Document.Count - 1) {  	bbuff.TextForeColor = Control.ContainsFocus ? Control.SelectionForeColor : Control.InactiveSelectionForeColor;  	Row xtr = Control.Document [RowIndex];  	//if (xtr.startSpan != null)  	//	bbuff.DrawTabbedString (xtr.startSpan.GetHashCode ().ToString (System.Globalization.CultureInfo.InvariantCulture)'100'0'0'0);  	//bbuff.TextForeColor = Color.Black;  	//bbuff.DrawTabbedString (xtr.Text'(int)(Control.View.TextMargin -Control.View.ClientAreaStart)'1'-Control.View.FirstVisibleColumn*Control.View.CharWidth+Control.View.TextMargin'Control.PixelTabSize);					  	int xpos = Control.View.TextMargin - Control.View.ClientAreaStart + XOffset;  	int wdh = 0;  	int taborig = -Control.View.FirstVisibleColumn * Control.View.CharWidth + Control.View.TextMargin;  	bool ws = Control.ShowWhitespace;  	bool StartDraw = false;  	if (StartWord == null)  		StartDraw = true;  	xtr.Expansion_StartChar = 0;  	xtr.Expansion_EndChar = 0;  	bool HasExpansion = false;  	foreach (Word w in xtr.FormattedWords) {  		if (StartDraw) {  			if (w.Span == xtr.expansion_StartSpan && xtr.expansion_StartSpan != null)  				if (xtr.expansion_StartSpan.Expanded == false) {  					RenderCollapsedSelectedText (RowIndex' xpos);  					HasExpansion = true;  					break;  				}  			if (w.Type == WordType.Word || ws == false) {  				if (w.Style != null) {  					SetFont (w.Style.Bold' w.Style.Italic' w.Style.Underline' bbuff);  				}  				else {  					bbuff.Font = GFX.FontNormal;  				}  				wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  				//render errors  				if (w.HasError) {  					//bbuff.FillRect (Color.Red'xpos'Control.View.RowHeight-2'wdh'2);  					int ey = Control.View.RowHeight - 1;  					Color c = w.ErrorColor;  					for (int x = 0; x < wdh + 3; x += 4) {  						bbuff.DrawLine (c' new Point (xpos + x' ey)' new Point (xpos + x + 2' ey - 2));  						bbuff.DrawLine (c' new Point (xpos + x + 2' ey - 2)' new Point (xpos + x + 4' ey));  					}  				}  			}  			else if (w.Type == WordType.Space) {  				bbuff.Font = GFX.FontNormal;  				bbuff.DrawTabbedString ("�"' xpos' 0' taborig' Control.PixelTabSize);  				wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  			}  			else if (w.Type == WordType.Tab) {  				bbuff.Font = GFX.FontNormal;  				bbuff.DrawTabbedString ("�"' xpos' 0' taborig' Control.PixelTabSize);  				wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  			}  			if (w.Pattern != null)  				if (w.Pattern.IsSeparator) {  					bbuff.FillRect (Control.SeparatorColor' Control.View.TextMargin - 4' Control.View.RowHeight - 1' Control.View.ClientAreaWidth' 1);  				}  			xpos += wdh;  		}  		if (!StartDraw)  			xtr.Expansion_StartChar += w.Text.Length;  		if (w == StartWord)  			StartDraw = true;  		xtr.Expansion_EndChar += w.Text.Length;  	}  	if (xtr.IsCollapsed) {  	}  	else if (xtr.endSpan != null && xtr.endSpan.spanDefinition != null && xtr.endSpan.spanDefinition.Style != null) {  		GFX.BackBuffer.FillRect (xtr.endSpan.spanDefinition.Style.BackColor' xpos' 0' Control.Width - xpos' Control.View.RowHeight);  	}  	if (Control._SyntaxBox.ShowEOLMarker && !HasExpansion) {  		bbuff.Font = GFX.FontNormal;  		bbuff.TextForeColor = Control.SelectionForeColor;  		bbuff.FontTransparent = true;  		bbuff.DrawTabbedString ("�"' xpos' 0' taborig' Control.PixelTabSize);  	}  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderSelectedText,The following statement contains a magic number: if (RowIndex <= Control.Document.Count - 1) {  	bbuff.TextForeColor = Control.ContainsFocus ? Control.SelectionForeColor : Control.InactiveSelectionForeColor;  	Row xtr = Control.Document [RowIndex];  	//if (xtr.startSpan != null)  	//	bbuff.DrawTabbedString (xtr.startSpan.GetHashCode ().ToString (System.Globalization.CultureInfo.InvariantCulture)'100'0'0'0);  	//bbuff.TextForeColor = Color.Black;  	//bbuff.DrawTabbedString (xtr.Text'(int)(Control.View.TextMargin -Control.View.ClientAreaStart)'1'-Control.View.FirstVisibleColumn*Control.View.CharWidth+Control.View.TextMargin'Control.PixelTabSize);					  	int xpos = Control.View.TextMargin - Control.View.ClientAreaStart + XOffset;  	int wdh = 0;  	int taborig = -Control.View.FirstVisibleColumn * Control.View.CharWidth + Control.View.TextMargin;  	bool ws = Control.ShowWhitespace;  	bool StartDraw = false;  	if (StartWord == null)  		StartDraw = true;  	xtr.Expansion_StartChar = 0;  	xtr.Expansion_EndChar = 0;  	bool HasExpansion = false;  	foreach (Word w in xtr.FormattedWords) {  		if (StartDraw) {  			if (w.Span == xtr.expansion_StartSpan && xtr.expansion_StartSpan != null)  				if (xtr.expansion_StartSpan.Expanded == false) {  					RenderCollapsedSelectedText (RowIndex' xpos);  					HasExpansion = true;  					break;  				}  			if (w.Type == WordType.Word || ws == false) {  				if (w.Style != null) {  					SetFont (w.Style.Bold' w.Style.Italic' w.Style.Underline' bbuff);  				}  				else {  					bbuff.Font = GFX.FontNormal;  				}  				wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  				//render errors  				if (w.HasError) {  					//bbuff.FillRect (Color.Red'xpos'Control.View.RowHeight-2'wdh'2);  					int ey = Control.View.RowHeight - 1;  					Color c = w.ErrorColor;  					for (int x = 0; x < wdh + 3; x += 4) {  						bbuff.DrawLine (c' new Point (xpos + x' ey)' new Point (xpos + x + 2' ey - 2));  						bbuff.DrawLine (c' new Point (xpos + x + 2' ey - 2)' new Point (xpos + x + 4' ey));  					}  				}  			}  			else if (w.Type == WordType.Space) {  				bbuff.Font = GFX.FontNormal;  				bbuff.DrawTabbedString ("�"' xpos' 0' taborig' Control.PixelTabSize);  				wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  			}  			else if (w.Type == WordType.Tab) {  				bbuff.Font = GFX.FontNormal;  				bbuff.DrawTabbedString ("�"' xpos' 0' taborig' Control.PixelTabSize);  				wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  			}  			if (w.Pattern != null)  				if (w.Pattern.IsSeparator) {  					bbuff.FillRect (Control.SeparatorColor' Control.View.TextMargin - 4' Control.View.RowHeight - 1' Control.View.ClientAreaWidth' 1);  				}  			xpos += wdh;  		}  		if (!StartDraw)  			xtr.Expansion_StartChar += w.Text.Length;  		if (w == StartWord)  			StartDraw = true;  		xtr.Expansion_EndChar += w.Text.Length;  	}  	if (xtr.IsCollapsed) {  	}  	else if (xtr.endSpan != null && xtr.endSpan.spanDefinition != null && xtr.endSpan.spanDefinition.Style != null) {  		GFX.BackBuffer.FillRect (xtr.endSpan.spanDefinition.Style.BackColor' xpos' 0' Control.Width - xpos' Control.View.RowHeight);  	}  	if (Control._SyntaxBox.ShowEOLMarker && !HasExpansion) {  		bbuff.Font = GFX.FontNormal;  		bbuff.TextForeColor = Control.SelectionForeColor;  		bbuff.FontTransparent = true;  		bbuff.DrawTabbedString ("�"' xpos' 0' taborig' Control.PixelTabSize);  	}  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderSelectedText,The following statement contains a magic number: if (RowIndex <= Control.Document.Count - 1) {  	bbuff.TextForeColor = Control.ContainsFocus ? Control.SelectionForeColor : Control.InactiveSelectionForeColor;  	Row xtr = Control.Document [RowIndex];  	//if (xtr.startSpan != null)  	//	bbuff.DrawTabbedString (xtr.startSpan.GetHashCode ().ToString (System.Globalization.CultureInfo.InvariantCulture)'100'0'0'0);  	//bbuff.TextForeColor = Color.Black;  	//bbuff.DrawTabbedString (xtr.Text'(int)(Control.View.TextMargin -Control.View.ClientAreaStart)'1'-Control.View.FirstVisibleColumn*Control.View.CharWidth+Control.View.TextMargin'Control.PixelTabSize);					  	int xpos = Control.View.TextMargin - Control.View.ClientAreaStart + XOffset;  	int wdh = 0;  	int taborig = -Control.View.FirstVisibleColumn * Control.View.CharWidth + Control.View.TextMargin;  	bool ws = Control.ShowWhitespace;  	bool StartDraw = false;  	if (StartWord == null)  		StartDraw = true;  	xtr.Expansion_StartChar = 0;  	xtr.Expansion_EndChar = 0;  	bool HasExpansion = false;  	foreach (Word w in xtr.FormattedWords) {  		if (StartDraw) {  			if (w.Span == xtr.expansion_StartSpan && xtr.expansion_StartSpan != null)  				if (xtr.expansion_StartSpan.Expanded == false) {  					RenderCollapsedSelectedText (RowIndex' xpos);  					HasExpansion = true;  					break;  				}  			if (w.Type == WordType.Word || ws == false) {  				if (w.Style != null) {  					SetFont (w.Style.Bold' w.Style.Italic' w.Style.Underline' bbuff);  				}  				else {  					bbuff.Font = GFX.FontNormal;  				}  				wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  				//render errors  				if (w.HasError) {  					//bbuff.FillRect (Color.Red'xpos'Control.View.RowHeight-2'wdh'2);  					int ey = Control.View.RowHeight - 1;  					Color c = w.ErrorColor;  					for (int x = 0; x < wdh + 3; x += 4) {  						bbuff.DrawLine (c' new Point (xpos + x' ey)' new Point (xpos + x + 2' ey - 2));  						bbuff.DrawLine (c' new Point (xpos + x + 2' ey - 2)' new Point (xpos + x + 4' ey));  					}  				}  			}  			else if (w.Type == WordType.Space) {  				bbuff.Font = GFX.FontNormal;  				bbuff.DrawTabbedString ("�"' xpos' 0' taborig' Control.PixelTabSize);  				wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  			}  			else if (w.Type == WordType.Tab) {  				bbuff.Font = GFX.FontNormal;  				bbuff.DrawTabbedString ("�"' xpos' 0' taborig' Control.PixelTabSize);  				wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  			}  			if (w.Pattern != null)  				if (w.Pattern.IsSeparator) {  					bbuff.FillRect (Control.SeparatorColor' Control.View.TextMargin - 4' Control.View.RowHeight - 1' Control.View.ClientAreaWidth' 1);  				}  			xpos += wdh;  		}  		if (!StartDraw)  			xtr.Expansion_StartChar += w.Text.Length;  		if (w == StartWord)  			StartDraw = true;  		xtr.Expansion_EndChar += w.Text.Length;  	}  	if (xtr.IsCollapsed) {  	}  	else if (xtr.endSpan != null && xtr.endSpan.spanDefinition != null && xtr.endSpan.spanDefinition.Style != null) {  		GFX.BackBuffer.FillRect (xtr.endSpan.spanDefinition.Style.BackColor' xpos' 0' Control.Width - xpos' Control.View.RowHeight);  	}  	if (Control._SyntaxBox.ShowEOLMarker && !HasExpansion) {  		bbuff.Font = GFX.FontNormal;  		bbuff.TextForeColor = Control.SelectionForeColor;  		bbuff.FontTransparent = true;  		bbuff.DrawTabbedString ("�"' xpos' 0' taborig' Control.PixelTabSize);  	}  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderSelectedText,The following statement contains a magic number: if (RowIndex <= Control.Document.Count - 1) {  	bbuff.TextForeColor = Control.ContainsFocus ? Control.SelectionForeColor : Control.InactiveSelectionForeColor;  	Row xtr = Control.Document [RowIndex];  	//if (xtr.startSpan != null)  	//	bbuff.DrawTabbedString (xtr.startSpan.GetHashCode ().ToString (System.Globalization.CultureInfo.InvariantCulture)'100'0'0'0);  	//bbuff.TextForeColor = Color.Black;  	//bbuff.DrawTabbedString (xtr.Text'(int)(Control.View.TextMargin -Control.View.ClientAreaStart)'1'-Control.View.FirstVisibleColumn*Control.View.CharWidth+Control.View.TextMargin'Control.PixelTabSize);					  	int xpos = Control.View.TextMargin - Control.View.ClientAreaStart + XOffset;  	int wdh = 0;  	int taborig = -Control.View.FirstVisibleColumn * Control.View.CharWidth + Control.View.TextMargin;  	bool ws = Control.ShowWhitespace;  	bool StartDraw = false;  	if (StartWord == null)  		StartDraw = true;  	xtr.Expansion_StartChar = 0;  	xtr.Expansion_EndChar = 0;  	bool HasExpansion = false;  	foreach (Word w in xtr.FormattedWords) {  		if (StartDraw) {  			if (w.Span == xtr.expansion_StartSpan && xtr.expansion_StartSpan != null)  				if (xtr.expansion_StartSpan.Expanded == false) {  					RenderCollapsedSelectedText (RowIndex' xpos);  					HasExpansion = true;  					break;  				}  			if (w.Type == WordType.Word || ws == false) {  				if (w.Style != null) {  					SetFont (w.Style.Bold' w.Style.Italic' w.Style.Underline' bbuff);  				}  				else {  					bbuff.Font = GFX.FontNormal;  				}  				wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  				//render errors  				if (w.HasError) {  					//bbuff.FillRect (Color.Red'xpos'Control.View.RowHeight-2'wdh'2);  					int ey = Control.View.RowHeight - 1;  					Color c = w.ErrorColor;  					for (int x = 0; x < wdh + 3; x += 4) {  						bbuff.DrawLine (c' new Point (xpos + x' ey)' new Point (xpos + x + 2' ey - 2));  						bbuff.DrawLine (c' new Point (xpos + x + 2' ey - 2)' new Point (xpos + x + 4' ey));  					}  				}  			}  			else if (w.Type == WordType.Space) {  				bbuff.Font = GFX.FontNormal;  				bbuff.DrawTabbedString ("�"' xpos' 0' taborig' Control.PixelTabSize);  				wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  			}  			else if (w.Type == WordType.Tab) {  				bbuff.Font = GFX.FontNormal;  				bbuff.DrawTabbedString ("�"' xpos' 0' taborig' Control.PixelTabSize);  				wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  			}  			if (w.Pattern != null)  				if (w.Pattern.IsSeparator) {  					bbuff.FillRect (Control.SeparatorColor' Control.View.TextMargin - 4' Control.View.RowHeight - 1' Control.View.ClientAreaWidth' 1);  				}  			xpos += wdh;  		}  		if (!StartDraw)  			xtr.Expansion_StartChar += w.Text.Length;  		if (w == StartWord)  			StartDraw = true;  		xtr.Expansion_EndChar += w.Text.Length;  	}  	if (xtr.IsCollapsed) {  	}  	else if (xtr.endSpan != null && xtr.endSpan.spanDefinition != null && xtr.endSpan.spanDefinition.Style != null) {  		GFX.BackBuffer.FillRect (xtr.endSpan.spanDefinition.Style.BackColor' xpos' 0' Control.Width - xpos' Control.View.RowHeight);  	}  	if (Control._SyntaxBox.ShowEOLMarker && !HasExpansion) {  		bbuff.Font = GFX.FontNormal;  		bbuff.TextForeColor = Control.SelectionForeColor;  		bbuff.FontTransparent = true;  		bbuff.DrawTabbedString ("�"' xpos' 0' taborig' Control.PixelTabSize);  	}  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderSelectedText,The following statement contains a magic number: if (RowIndex <= Control.Document.Count - 1) {  	bbuff.TextForeColor = Control.ContainsFocus ? Control.SelectionForeColor : Control.InactiveSelectionForeColor;  	Row xtr = Control.Document [RowIndex];  	//if (xtr.startSpan != null)  	//	bbuff.DrawTabbedString (xtr.startSpan.GetHashCode ().ToString (System.Globalization.CultureInfo.InvariantCulture)'100'0'0'0);  	//bbuff.TextForeColor = Color.Black;  	//bbuff.DrawTabbedString (xtr.Text'(int)(Control.View.TextMargin -Control.View.ClientAreaStart)'1'-Control.View.FirstVisibleColumn*Control.View.CharWidth+Control.View.TextMargin'Control.PixelTabSize);					  	int xpos = Control.View.TextMargin - Control.View.ClientAreaStart + XOffset;  	int wdh = 0;  	int taborig = -Control.View.FirstVisibleColumn * Control.View.CharWidth + Control.View.TextMargin;  	bool ws = Control.ShowWhitespace;  	bool StartDraw = false;  	if (StartWord == null)  		StartDraw = true;  	xtr.Expansion_StartChar = 0;  	xtr.Expansion_EndChar = 0;  	bool HasExpansion = false;  	foreach (Word w in xtr.FormattedWords) {  		if (StartDraw) {  			if (w.Span == xtr.expansion_StartSpan && xtr.expansion_StartSpan != null)  				if (xtr.expansion_StartSpan.Expanded == false) {  					RenderCollapsedSelectedText (RowIndex' xpos);  					HasExpansion = true;  					break;  				}  			if (w.Type == WordType.Word || ws == false) {  				if (w.Style != null) {  					SetFont (w.Style.Bold' w.Style.Italic' w.Style.Underline' bbuff);  				}  				else {  					bbuff.Font = GFX.FontNormal;  				}  				wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  				//render errors  				if (w.HasError) {  					//bbuff.FillRect (Color.Red'xpos'Control.View.RowHeight-2'wdh'2);  					int ey = Control.View.RowHeight - 1;  					Color c = w.ErrorColor;  					for (int x = 0; x < wdh + 3; x += 4) {  						bbuff.DrawLine (c' new Point (xpos + x' ey)' new Point (xpos + x + 2' ey - 2));  						bbuff.DrawLine (c' new Point (xpos + x + 2' ey - 2)' new Point (xpos + x + 4' ey));  					}  				}  			}  			else if (w.Type == WordType.Space) {  				bbuff.Font = GFX.FontNormal;  				bbuff.DrawTabbedString ("�"' xpos' 0' taborig' Control.PixelTabSize);  				wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  			}  			else if (w.Type == WordType.Tab) {  				bbuff.Font = GFX.FontNormal;  				bbuff.DrawTabbedString ("�"' xpos' 0' taborig' Control.PixelTabSize);  				wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  			}  			if (w.Pattern != null)  				if (w.Pattern.IsSeparator) {  					bbuff.FillRect (Control.SeparatorColor' Control.View.TextMargin - 4' Control.View.RowHeight - 1' Control.View.ClientAreaWidth' 1);  				}  			xpos += wdh;  		}  		if (!StartDraw)  			xtr.Expansion_StartChar += w.Text.Length;  		if (w == StartWord)  			StartDraw = true;  		xtr.Expansion_EndChar += w.Text.Length;  	}  	if (xtr.IsCollapsed) {  	}  	else if (xtr.endSpan != null && xtr.endSpan.spanDefinition != null && xtr.endSpan.spanDefinition.Style != null) {  		GFX.BackBuffer.FillRect (xtr.endSpan.spanDefinition.Style.BackColor' xpos' 0' Control.Width - xpos' Control.View.RowHeight);  	}  	if (Control._SyntaxBox.ShowEOLMarker && !HasExpansion) {  		bbuff.Font = GFX.FontNormal;  		bbuff.TextForeColor = Control.SelectionForeColor;  		bbuff.FontTransparent = true;  		bbuff.DrawTabbedString ("�"' xpos' 0' taborig' Control.PixelTabSize);  	}  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderSelectedText,The following statement contains a magic number: foreach (Word w in xtr.FormattedWords) {  	if (StartDraw) {  		if (w.Span == xtr.expansion_StartSpan && xtr.expansion_StartSpan != null)  			if (xtr.expansion_StartSpan.Expanded == false) {  				RenderCollapsedSelectedText (RowIndex' xpos);  				HasExpansion = true;  				break;  			}  		if (w.Type == WordType.Word || ws == false) {  			if (w.Style != null) {  				SetFont (w.Style.Bold' w.Style.Italic' w.Style.Underline' bbuff);  			}  			else {  				bbuff.Font = GFX.FontNormal;  			}  			wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  			//render errors  			if (w.HasError) {  				//bbuff.FillRect (Color.Red'xpos'Control.View.RowHeight-2'wdh'2);  				int ey = Control.View.RowHeight - 1;  				Color c = w.ErrorColor;  				for (int x = 0; x < wdh + 3; x += 4) {  					bbuff.DrawLine (c' new Point (xpos + x' ey)' new Point (xpos + x + 2' ey - 2));  					bbuff.DrawLine (c' new Point (xpos + x + 2' ey - 2)' new Point (xpos + x + 4' ey));  				}  			}  		}  		else if (w.Type == WordType.Space) {  			bbuff.Font = GFX.FontNormal;  			bbuff.DrawTabbedString ("�"' xpos' 0' taborig' Control.PixelTabSize);  			wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  		}  		else if (w.Type == WordType.Tab) {  			bbuff.Font = GFX.FontNormal;  			bbuff.DrawTabbedString ("�"' xpos' 0' taborig' Control.PixelTabSize);  			wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  		}  		if (w.Pattern != null)  			if (w.Pattern.IsSeparator) {  				bbuff.FillRect (Control.SeparatorColor' Control.View.TextMargin - 4' Control.View.RowHeight - 1' Control.View.ClientAreaWidth' 1);  			}  		xpos += wdh;  	}  	if (!StartDraw)  		xtr.Expansion_StartChar += w.Text.Length;  	if (w == StartWord)  		StartDraw = true;  	xtr.Expansion_EndChar += w.Text.Length;  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderSelectedText,The following statement contains a magic number: foreach (Word w in xtr.FormattedWords) {  	if (StartDraw) {  		if (w.Span == xtr.expansion_StartSpan && xtr.expansion_StartSpan != null)  			if (xtr.expansion_StartSpan.Expanded == false) {  				RenderCollapsedSelectedText (RowIndex' xpos);  				HasExpansion = true;  				break;  			}  		if (w.Type == WordType.Word || ws == false) {  			if (w.Style != null) {  				SetFont (w.Style.Bold' w.Style.Italic' w.Style.Underline' bbuff);  			}  			else {  				bbuff.Font = GFX.FontNormal;  			}  			wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  			//render errors  			if (w.HasError) {  				//bbuff.FillRect (Color.Red'xpos'Control.View.RowHeight-2'wdh'2);  				int ey = Control.View.RowHeight - 1;  				Color c = w.ErrorColor;  				for (int x = 0; x < wdh + 3; x += 4) {  					bbuff.DrawLine (c' new Point (xpos + x' ey)' new Point (xpos + x + 2' ey - 2));  					bbuff.DrawLine (c' new Point (xpos + x + 2' ey - 2)' new Point (xpos + x + 4' ey));  				}  			}  		}  		else if (w.Type == WordType.Space) {  			bbuff.Font = GFX.FontNormal;  			bbuff.DrawTabbedString ("�"' xpos' 0' taborig' Control.PixelTabSize);  			wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  		}  		else if (w.Type == WordType.Tab) {  			bbuff.Font = GFX.FontNormal;  			bbuff.DrawTabbedString ("�"' xpos' 0' taborig' Control.PixelTabSize);  			wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  		}  		if (w.Pattern != null)  			if (w.Pattern.IsSeparator) {  				bbuff.FillRect (Control.SeparatorColor' Control.View.TextMargin - 4' Control.View.RowHeight - 1' Control.View.ClientAreaWidth' 1);  			}  		xpos += wdh;  	}  	if (!StartDraw)  		xtr.Expansion_StartChar += w.Text.Length;  	if (w == StartWord)  		StartDraw = true;  	xtr.Expansion_EndChar += w.Text.Length;  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderSelectedText,The following statement contains a magic number: foreach (Word w in xtr.FormattedWords) {  	if (StartDraw) {  		if (w.Span == xtr.expansion_StartSpan && xtr.expansion_StartSpan != null)  			if (xtr.expansion_StartSpan.Expanded == false) {  				RenderCollapsedSelectedText (RowIndex' xpos);  				HasExpansion = true;  				break;  			}  		if (w.Type == WordType.Word || ws == false) {  			if (w.Style != null) {  				SetFont (w.Style.Bold' w.Style.Italic' w.Style.Underline' bbuff);  			}  			else {  				bbuff.Font = GFX.FontNormal;  			}  			wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  			//render errors  			if (w.HasError) {  				//bbuff.FillRect (Color.Red'xpos'Control.View.RowHeight-2'wdh'2);  				int ey = Control.View.RowHeight - 1;  				Color c = w.ErrorColor;  				for (int x = 0; x < wdh + 3; x += 4) {  					bbuff.DrawLine (c' new Point (xpos + x' ey)' new Point (xpos + x + 2' ey - 2));  					bbuff.DrawLine (c' new Point (xpos + x + 2' ey - 2)' new Point (xpos + x + 4' ey));  				}  			}  		}  		else if (w.Type == WordType.Space) {  			bbuff.Font = GFX.FontNormal;  			bbuff.DrawTabbedString ("�"' xpos' 0' taborig' Control.PixelTabSize);  			wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  		}  		else if (w.Type == WordType.Tab) {  			bbuff.Font = GFX.FontNormal;  			bbuff.DrawTabbedString ("�"' xpos' 0' taborig' Control.PixelTabSize);  			wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  		}  		if (w.Pattern != null)  			if (w.Pattern.IsSeparator) {  				bbuff.FillRect (Control.SeparatorColor' Control.View.TextMargin - 4' Control.View.RowHeight - 1' Control.View.ClientAreaWidth' 1);  			}  		xpos += wdh;  	}  	if (!StartDraw)  		xtr.Expansion_StartChar += w.Text.Length;  	if (w == StartWord)  		StartDraw = true;  	xtr.Expansion_EndChar += w.Text.Length;  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderSelectedText,The following statement contains a magic number: foreach (Word w in xtr.FormattedWords) {  	if (StartDraw) {  		if (w.Span == xtr.expansion_StartSpan && xtr.expansion_StartSpan != null)  			if (xtr.expansion_StartSpan.Expanded == false) {  				RenderCollapsedSelectedText (RowIndex' xpos);  				HasExpansion = true;  				break;  			}  		if (w.Type == WordType.Word || ws == false) {  			if (w.Style != null) {  				SetFont (w.Style.Bold' w.Style.Italic' w.Style.Underline' bbuff);  			}  			else {  				bbuff.Font = GFX.FontNormal;  			}  			wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  			//render errors  			if (w.HasError) {  				//bbuff.FillRect (Color.Red'xpos'Control.View.RowHeight-2'wdh'2);  				int ey = Control.View.RowHeight - 1;  				Color c = w.ErrorColor;  				for (int x = 0; x < wdh + 3; x += 4) {  					bbuff.DrawLine (c' new Point (xpos + x' ey)' new Point (xpos + x + 2' ey - 2));  					bbuff.DrawLine (c' new Point (xpos + x + 2' ey - 2)' new Point (xpos + x + 4' ey));  				}  			}  		}  		else if (w.Type == WordType.Space) {  			bbuff.Font = GFX.FontNormal;  			bbuff.DrawTabbedString ("�"' xpos' 0' taborig' Control.PixelTabSize);  			wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  		}  		else if (w.Type == WordType.Tab) {  			bbuff.Font = GFX.FontNormal;  			bbuff.DrawTabbedString ("�"' xpos' 0' taborig' Control.PixelTabSize);  			wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  		}  		if (w.Pattern != null)  			if (w.Pattern.IsSeparator) {  				bbuff.FillRect (Control.SeparatorColor' Control.View.TextMargin - 4' Control.View.RowHeight - 1' Control.View.ClientAreaWidth' 1);  			}  		xpos += wdh;  	}  	if (!StartDraw)  		xtr.Expansion_StartChar += w.Text.Length;  	if (w == StartWord)  		StartDraw = true;  	xtr.Expansion_EndChar += w.Text.Length;  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderSelectedText,The following statement contains a magic number: foreach (Word w in xtr.FormattedWords) {  	if (StartDraw) {  		if (w.Span == xtr.expansion_StartSpan && xtr.expansion_StartSpan != null)  			if (xtr.expansion_StartSpan.Expanded == false) {  				RenderCollapsedSelectedText (RowIndex' xpos);  				HasExpansion = true;  				break;  			}  		if (w.Type == WordType.Word || ws == false) {  			if (w.Style != null) {  				SetFont (w.Style.Bold' w.Style.Italic' w.Style.Underline' bbuff);  			}  			else {  				bbuff.Font = GFX.FontNormal;  			}  			wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  			//render errors  			if (w.HasError) {  				//bbuff.FillRect (Color.Red'xpos'Control.View.RowHeight-2'wdh'2);  				int ey = Control.View.RowHeight - 1;  				Color c = w.ErrorColor;  				for (int x = 0; x < wdh + 3; x += 4) {  					bbuff.DrawLine (c' new Point (xpos + x' ey)' new Point (xpos + x + 2' ey - 2));  					bbuff.DrawLine (c' new Point (xpos + x + 2' ey - 2)' new Point (xpos + x + 4' ey));  				}  			}  		}  		else if (w.Type == WordType.Space) {  			bbuff.Font = GFX.FontNormal;  			bbuff.DrawTabbedString ("�"' xpos' 0' taborig' Control.PixelTabSize);  			wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  		}  		else if (w.Type == WordType.Tab) {  			bbuff.Font = GFX.FontNormal;  			bbuff.DrawTabbedString ("�"' xpos' 0' taborig' Control.PixelTabSize);  			wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  		}  		if (w.Pattern != null)  			if (w.Pattern.IsSeparator) {  				bbuff.FillRect (Control.SeparatorColor' Control.View.TextMargin - 4' Control.View.RowHeight - 1' Control.View.ClientAreaWidth' 1);  			}  		xpos += wdh;  	}  	if (!StartDraw)  		xtr.Expansion_StartChar += w.Text.Length;  	if (w == StartWord)  		StartDraw = true;  	xtr.Expansion_EndChar += w.Text.Length;  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderSelectedText,The following statement contains a magic number: foreach (Word w in xtr.FormattedWords) {  	if (StartDraw) {  		if (w.Span == xtr.expansion_StartSpan && xtr.expansion_StartSpan != null)  			if (xtr.expansion_StartSpan.Expanded == false) {  				RenderCollapsedSelectedText (RowIndex' xpos);  				HasExpansion = true;  				break;  			}  		if (w.Type == WordType.Word || ws == false) {  			if (w.Style != null) {  				SetFont (w.Style.Bold' w.Style.Italic' w.Style.Underline' bbuff);  			}  			else {  				bbuff.Font = GFX.FontNormal;  			}  			wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  			//render errors  			if (w.HasError) {  				//bbuff.FillRect (Color.Red'xpos'Control.View.RowHeight-2'wdh'2);  				int ey = Control.View.RowHeight - 1;  				Color c = w.ErrorColor;  				for (int x = 0; x < wdh + 3; x += 4) {  					bbuff.DrawLine (c' new Point (xpos + x' ey)' new Point (xpos + x + 2' ey - 2));  					bbuff.DrawLine (c' new Point (xpos + x + 2' ey - 2)' new Point (xpos + x + 4' ey));  				}  			}  		}  		else if (w.Type == WordType.Space) {  			bbuff.Font = GFX.FontNormal;  			bbuff.DrawTabbedString ("�"' xpos' 0' taborig' Control.PixelTabSize);  			wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  		}  		else if (w.Type == WordType.Tab) {  			bbuff.Font = GFX.FontNormal;  			bbuff.DrawTabbedString ("�"' xpos' 0' taborig' Control.PixelTabSize);  			wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  		}  		if (w.Pattern != null)  			if (w.Pattern.IsSeparator) {  				bbuff.FillRect (Control.SeparatorColor' Control.View.TextMargin - 4' Control.View.RowHeight - 1' Control.View.ClientAreaWidth' 1);  			}  		xpos += wdh;  	}  	if (!StartDraw)  		xtr.Expansion_StartChar += w.Text.Length;  	if (w == StartWord)  		StartDraw = true;  	xtr.Expansion_EndChar += w.Text.Length;  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderSelectedText,The following statement contains a magic number: foreach (Word w in xtr.FormattedWords) {  	if (StartDraw) {  		if (w.Span == xtr.expansion_StartSpan && xtr.expansion_StartSpan != null)  			if (xtr.expansion_StartSpan.Expanded == false) {  				RenderCollapsedSelectedText (RowIndex' xpos);  				HasExpansion = true;  				break;  			}  		if (w.Type == WordType.Word || ws == false) {  			if (w.Style != null) {  				SetFont (w.Style.Bold' w.Style.Italic' w.Style.Underline' bbuff);  			}  			else {  				bbuff.Font = GFX.FontNormal;  			}  			wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  			//render errors  			if (w.HasError) {  				//bbuff.FillRect (Color.Red'xpos'Control.View.RowHeight-2'wdh'2);  				int ey = Control.View.RowHeight - 1;  				Color c = w.ErrorColor;  				for (int x = 0; x < wdh + 3; x += 4) {  					bbuff.DrawLine (c' new Point (xpos + x' ey)' new Point (xpos + x + 2' ey - 2));  					bbuff.DrawLine (c' new Point (xpos + x + 2' ey - 2)' new Point (xpos + x + 4' ey));  				}  			}  		}  		else if (w.Type == WordType.Space) {  			bbuff.Font = GFX.FontNormal;  			bbuff.DrawTabbedString ("�"' xpos' 0' taborig' Control.PixelTabSize);  			wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  		}  		else if (w.Type == WordType.Tab) {  			bbuff.Font = GFX.FontNormal;  			bbuff.DrawTabbedString ("�"' xpos' 0' taborig' Control.PixelTabSize);  			wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  		}  		if (w.Pattern != null)  			if (w.Pattern.IsSeparator) {  				bbuff.FillRect (Control.SeparatorColor' Control.View.TextMargin - 4' Control.View.RowHeight - 1' Control.View.ClientAreaWidth' 1);  			}  		xpos += wdh;  	}  	if (!StartDraw)  		xtr.Expansion_StartChar += w.Text.Length;  	if (w == StartWord)  		StartDraw = true;  	xtr.Expansion_EndChar += w.Text.Length;  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderSelectedText,The following statement contains a magic number: foreach (Word w in xtr.FormattedWords) {  	if (StartDraw) {  		if (w.Span == xtr.expansion_StartSpan && xtr.expansion_StartSpan != null)  			if (xtr.expansion_StartSpan.Expanded == false) {  				RenderCollapsedSelectedText (RowIndex' xpos);  				HasExpansion = true;  				break;  			}  		if (w.Type == WordType.Word || ws == false) {  			if (w.Style != null) {  				SetFont (w.Style.Bold' w.Style.Italic' w.Style.Underline' bbuff);  			}  			else {  				bbuff.Font = GFX.FontNormal;  			}  			wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  			//render errors  			if (w.HasError) {  				//bbuff.FillRect (Color.Red'xpos'Control.View.RowHeight-2'wdh'2);  				int ey = Control.View.RowHeight - 1;  				Color c = w.ErrorColor;  				for (int x = 0; x < wdh + 3; x += 4) {  					bbuff.DrawLine (c' new Point (xpos + x' ey)' new Point (xpos + x + 2' ey - 2));  					bbuff.DrawLine (c' new Point (xpos + x + 2' ey - 2)' new Point (xpos + x + 4' ey));  				}  			}  		}  		else if (w.Type == WordType.Space) {  			bbuff.Font = GFX.FontNormal;  			bbuff.DrawTabbedString ("�"' xpos' 0' taborig' Control.PixelTabSize);  			wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  		}  		else if (w.Type == WordType.Tab) {  			bbuff.Font = GFX.FontNormal;  			bbuff.DrawTabbedString ("�"' xpos' 0' taborig' Control.PixelTabSize);  			wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  		}  		if (w.Pattern != null)  			if (w.Pattern.IsSeparator) {  				bbuff.FillRect (Control.SeparatorColor' Control.View.TextMargin - 4' Control.View.RowHeight - 1' Control.View.ClientAreaWidth' 1);  			}  		xpos += wdh;  	}  	if (!StartDraw)  		xtr.Expansion_StartChar += w.Text.Length;  	if (w == StartWord)  		StartDraw = true;  	xtr.Expansion_EndChar += w.Text.Length;  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderSelectedText,The following statement contains a magic number: if (StartDraw) {  	if (w.Span == xtr.expansion_StartSpan && xtr.expansion_StartSpan != null)  		if (xtr.expansion_StartSpan.Expanded == false) {  			RenderCollapsedSelectedText (RowIndex' xpos);  			HasExpansion = true;  			break;  		}  	if (w.Type == WordType.Word || ws == false) {  		if (w.Style != null) {  			SetFont (w.Style.Bold' w.Style.Italic' w.Style.Underline' bbuff);  		}  		else {  			bbuff.Font = GFX.FontNormal;  		}  		wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  		//render errors  		if (w.HasError) {  			//bbuff.FillRect (Color.Red'xpos'Control.View.RowHeight-2'wdh'2);  			int ey = Control.View.RowHeight - 1;  			Color c = w.ErrorColor;  			for (int x = 0; x < wdh + 3; x += 4) {  				bbuff.DrawLine (c' new Point (xpos + x' ey)' new Point (xpos + x + 2' ey - 2));  				bbuff.DrawLine (c' new Point (xpos + x + 2' ey - 2)' new Point (xpos + x + 4' ey));  			}  		}  	}  	else if (w.Type == WordType.Space) {  		bbuff.Font = GFX.FontNormal;  		bbuff.DrawTabbedString ("�"' xpos' 0' taborig' Control.PixelTabSize);  		wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  	}  	else if (w.Type == WordType.Tab) {  		bbuff.Font = GFX.FontNormal;  		bbuff.DrawTabbedString ("�"' xpos' 0' taborig' Control.PixelTabSize);  		wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  	}  	if (w.Pattern != null)  		if (w.Pattern.IsSeparator) {  			bbuff.FillRect (Control.SeparatorColor' Control.View.TextMargin - 4' Control.View.RowHeight - 1' Control.View.ClientAreaWidth' 1);  		}  	xpos += wdh;  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderSelectedText,The following statement contains a magic number: if (StartDraw) {  	if (w.Span == xtr.expansion_StartSpan && xtr.expansion_StartSpan != null)  		if (xtr.expansion_StartSpan.Expanded == false) {  			RenderCollapsedSelectedText (RowIndex' xpos);  			HasExpansion = true;  			break;  		}  	if (w.Type == WordType.Word || ws == false) {  		if (w.Style != null) {  			SetFont (w.Style.Bold' w.Style.Italic' w.Style.Underline' bbuff);  		}  		else {  			bbuff.Font = GFX.FontNormal;  		}  		wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  		//render errors  		if (w.HasError) {  			//bbuff.FillRect (Color.Red'xpos'Control.View.RowHeight-2'wdh'2);  			int ey = Control.View.RowHeight - 1;  			Color c = w.ErrorColor;  			for (int x = 0; x < wdh + 3; x += 4) {  				bbuff.DrawLine (c' new Point (xpos + x' ey)' new Point (xpos + x + 2' ey - 2));  				bbuff.DrawLine (c' new Point (xpos + x + 2' ey - 2)' new Point (xpos + x + 4' ey));  			}  		}  	}  	else if (w.Type == WordType.Space) {  		bbuff.Font = GFX.FontNormal;  		bbuff.DrawTabbedString ("�"' xpos' 0' taborig' Control.PixelTabSize);  		wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  	}  	else if (w.Type == WordType.Tab) {  		bbuff.Font = GFX.FontNormal;  		bbuff.DrawTabbedString ("�"' xpos' 0' taborig' Control.PixelTabSize);  		wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  	}  	if (w.Pattern != null)  		if (w.Pattern.IsSeparator) {  			bbuff.FillRect (Control.SeparatorColor' Control.View.TextMargin - 4' Control.View.RowHeight - 1' Control.View.ClientAreaWidth' 1);  		}  	xpos += wdh;  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderSelectedText,The following statement contains a magic number: if (StartDraw) {  	if (w.Span == xtr.expansion_StartSpan && xtr.expansion_StartSpan != null)  		if (xtr.expansion_StartSpan.Expanded == false) {  			RenderCollapsedSelectedText (RowIndex' xpos);  			HasExpansion = true;  			break;  		}  	if (w.Type == WordType.Word || ws == false) {  		if (w.Style != null) {  			SetFont (w.Style.Bold' w.Style.Italic' w.Style.Underline' bbuff);  		}  		else {  			bbuff.Font = GFX.FontNormal;  		}  		wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  		//render errors  		if (w.HasError) {  			//bbuff.FillRect (Color.Red'xpos'Control.View.RowHeight-2'wdh'2);  			int ey = Control.View.RowHeight - 1;  			Color c = w.ErrorColor;  			for (int x = 0; x < wdh + 3; x += 4) {  				bbuff.DrawLine (c' new Point (xpos + x' ey)' new Point (xpos + x + 2' ey - 2));  				bbuff.DrawLine (c' new Point (xpos + x + 2' ey - 2)' new Point (xpos + x + 4' ey));  			}  		}  	}  	else if (w.Type == WordType.Space) {  		bbuff.Font = GFX.FontNormal;  		bbuff.DrawTabbedString ("�"' xpos' 0' taborig' Control.PixelTabSize);  		wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  	}  	else if (w.Type == WordType.Tab) {  		bbuff.Font = GFX.FontNormal;  		bbuff.DrawTabbedString ("�"' xpos' 0' taborig' Control.PixelTabSize);  		wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  	}  	if (w.Pattern != null)  		if (w.Pattern.IsSeparator) {  			bbuff.FillRect (Control.SeparatorColor' Control.View.TextMargin - 4' Control.View.RowHeight - 1' Control.View.ClientAreaWidth' 1);  		}  	xpos += wdh;  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderSelectedText,The following statement contains a magic number: if (StartDraw) {  	if (w.Span == xtr.expansion_StartSpan && xtr.expansion_StartSpan != null)  		if (xtr.expansion_StartSpan.Expanded == false) {  			RenderCollapsedSelectedText (RowIndex' xpos);  			HasExpansion = true;  			break;  		}  	if (w.Type == WordType.Word || ws == false) {  		if (w.Style != null) {  			SetFont (w.Style.Bold' w.Style.Italic' w.Style.Underline' bbuff);  		}  		else {  			bbuff.Font = GFX.FontNormal;  		}  		wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  		//render errors  		if (w.HasError) {  			//bbuff.FillRect (Color.Red'xpos'Control.View.RowHeight-2'wdh'2);  			int ey = Control.View.RowHeight - 1;  			Color c = w.ErrorColor;  			for (int x = 0; x < wdh + 3; x += 4) {  				bbuff.DrawLine (c' new Point (xpos + x' ey)' new Point (xpos + x + 2' ey - 2));  				bbuff.DrawLine (c' new Point (xpos + x + 2' ey - 2)' new Point (xpos + x + 4' ey));  			}  		}  	}  	else if (w.Type == WordType.Space) {  		bbuff.Font = GFX.FontNormal;  		bbuff.DrawTabbedString ("�"' xpos' 0' taborig' Control.PixelTabSize);  		wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  	}  	else if (w.Type == WordType.Tab) {  		bbuff.Font = GFX.FontNormal;  		bbuff.DrawTabbedString ("�"' xpos' 0' taborig' Control.PixelTabSize);  		wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  	}  	if (w.Pattern != null)  		if (w.Pattern.IsSeparator) {  			bbuff.FillRect (Control.SeparatorColor' Control.View.TextMargin - 4' Control.View.RowHeight - 1' Control.View.ClientAreaWidth' 1);  		}  	xpos += wdh;  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderSelectedText,The following statement contains a magic number: if (StartDraw) {  	if (w.Span == xtr.expansion_StartSpan && xtr.expansion_StartSpan != null)  		if (xtr.expansion_StartSpan.Expanded == false) {  			RenderCollapsedSelectedText (RowIndex' xpos);  			HasExpansion = true;  			break;  		}  	if (w.Type == WordType.Word || ws == false) {  		if (w.Style != null) {  			SetFont (w.Style.Bold' w.Style.Italic' w.Style.Underline' bbuff);  		}  		else {  			bbuff.Font = GFX.FontNormal;  		}  		wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  		//render errors  		if (w.HasError) {  			//bbuff.FillRect (Color.Red'xpos'Control.View.RowHeight-2'wdh'2);  			int ey = Control.View.RowHeight - 1;  			Color c = w.ErrorColor;  			for (int x = 0; x < wdh + 3; x += 4) {  				bbuff.DrawLine (c' new Point (xpos + x' ey)' new Point (xpos + x + 2' ey - 2));  				bbuff.DrawLine (c' new Point (xpos + x + 2' ey - 2)' new Point (xpos + x + 4' ey));  			}  		}  	}  	else if (w.Type == WordType.Space) {  		bbuff.Font = GFX.FontNormal;  		bbuff.DrawTabbedString ("�"' xpos' 0' taborig' Control.PixelTabSize);  		wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  	}  	else if (w.Type == WordType.Tab) {  		bbuff.Font = GFX.FontNormal;  		bbuff.DrawTabbedString ("�"' xpos' 0' taborig' Control.PixelTabSize);  		wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  	}  	if (w.Pattern != null)  		if (w.Pattern.IsSeparator) {  			bbuff.FillRect (Control.SeparatorColor' Control.View.TextMargin - 4' Control.View.RowHeight - 1' Control.View.ClientAreaWidth' 1);  		}  	xpos += wdh;  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderSelectedText,The following statement contains a magic number: if (StartDraw) {  	if (w.Span == xtr.expansion_StartSpan && xtr.expansion_StartSpan != null)  		if (xtr.expansion_StartSpan.Expanded == false) {  			RenderCollapsedSelectedText (RowIndex' xpos);  			HasExpansion = true;  			break;  		}  	if (w.Type == WordType.Word || ws == false) {  		if (w.Style != null) {  			SetFont (w.Style.Bold' w.Style.Italic' w.Style.Underline' bbuff);  		}  		else {  			bbuff.Font = GFX.FontNormal;  		}  		wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  		//render errors  		if (w.HasError) {  			//bbuff.FillRect (Color.Red'xpos'Control.View.RowHeight-2'wdh'2);  			int ey = Control.View.RowHeight - 1;  			Color c = w.ErrorColor;  			for (int x = 0; x < wdh + 3; x += 4) {  				bbuff.DrawLine (c' new Point (xpos + x' ey)' new Point (xpos + x + 2' ey - 2));  				bbuff.DrawLine (c' new Point (xpos + x + 2' ey - 2)' new Point (xpos + x + 4' ey));  			}  		}  	}  	else if (w.Type == WordType.Space) {  		bbuff.Font = GFX.FontNormal;  		bbuff.DrawTabbedString ("�"' xpos' 0' taborig' Control.PixelTabSize);  		wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  	}  	else if (w.Type == WordType.Tab) {  		bbuff.Font = GFX.FontNormal;  		bbuff.DrawTabbedString ("�"' xpos' 0' taborig' Control.PixelTabSize);  		wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  	}  	if (w.Pattern != null)  		if (w.Pattern.IsSeparator) {  			bbuff.FillRect (Control.SeparatorColor' Control.View.TextMargin - 4' Control.View.RowHeight - 1' Control.View.ClientAreaWidth' 1);  		}  	xpos += wdh;  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderSelectedText,The following statement contains a magic number: if (StartDraw) {  	if (w.Span == xtr.expansion_StartSpan && xtr.expansion_StartSpan != null)  		if (xtr.expansion_StartSpan.Expanded == false) {  			RenderCollapsedSelectedText (RowIndex' xpos);  			HasExpansion = true;  			break;  		}  	if (w.Type == WordType.Word || ws == false) {  		if (w.Style != null) {  			SetFont (w.Style.Bold' w.Style.Italic' w.Style.Underline' bbuff);  		}  		else {  			bbuff.Font = GFX.FontNormal;  		}  		wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  		//render errors  		if (w.HasError) {  			//bbuff.FillRect (Color.Red'xpos'Control.View.RowHeight-2'wdh'2);  			int ey = Control.View.RowHeight - 1;  			Color c = w.ErrorColor;  			for (int x = 0; x < wdh + 3; x += 4) {  				bbuff.DrawLine (c' new Point (xpos + x' ey)' new Point (xpos + x + 2' ey - 2));  				bbuff.DrawLine (c' new Point (xpos + x + 2' ey - 2)' new Point (xpos + x + 4' ey));  			}  		}  	}  	else if (w.Type == WordType.Space) {  		bbuff.Font = GFX.FontNormal;  		bbuff.DrawTabbedString ("�"' xpos' 0' taborig' Control.PixelTabSize);  		wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  	}  	else if (w.Type == WordType.Tab) {  		bbuff.Font = GFX.FontNormal;  		bbuff.DrawTabbedString ("�"' xpos' 0' taborig' Control.PixelTabSize);  		wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  	}  	if (w.Pattern != null)  		if (w.Pattern.IsSeparator) {  			bbuff.FillRect (Control.SeparatorColor' Control.View.TextMargin - 4' Control.View.RowHeight - 1' Control.View.ClientAreaWidth' 1);  		}  	xpos += wdh;  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderSelectedText,The following statement contains a magic number: if (StartDraw) {  	if (w.Span == xtr.expansion_StartSpan && xtr.expansion_StartSpan != null)  		if (xtr.expansion_StartSpan.Expanded == false) {  			RenderCollapsedSelectedText (RowIndex' xpos);  			HasExpansion = true;  			break;  		}  	if (w.Type == WordType.Word || ws == false) {  		if (w.Style != null) {  			SetFont (w.Style.Bold' w.Style.Italic' w.Style.Underline' bbuff);  		}  		else {  			bbuff.Font = GFX.FontNormal;  		}  		wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  		//render errors  		if (w.HasError) {  			//bbuff.FillRect (Color.Red'xpos'Control.View.RowHeight-2'wdh'2);  			int ey = Control.View.RowHeight - 1;  			Color c = w.ErrorColor;  			for (int x = 0; x < wdh + 3; x += 4) {  				bbuff.DrawLine (c' new Point (xpos + x' ey)' new Point (xpos + x + 2' ey - 2));  				bbuff.DrawLine (c' new Point (xpos + x + 2' ey - 2)' new Point (xpos + x + 4' ey));  			}  		}  	}  	else if (w.Type == WordType.Space) {  		bbuff.Font = GFX.FontNormal;  		bbuff.DrawTabbedString ("�"' xpos' 0' taborig' Control.PixelTabSize);  		wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  	}  	else if (w.Type == WordType.Tab) {  		bbuff.Font = GFX.FontNormal;  		bbuff.DrawTabbedString ("�"' xpos' 0' taborig' Control.PixelTabSize);  		wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  	}  	if (w.Pattern != null)  		if (w.Pattern.IsSeparator) {  			bbuff.FillRect (Control.SeparatorColor' Control.View.TextMargin - 4' Control.View.RowHeight - 1' Control.View.ClientAreaWidth' 1);  		}  	xpos += wdh;  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderSelectedText,The following statement contains a magic number: if (w.Type == WordType.Word || ws == false) {  	if (w.Style != null) {  		SetFont (w.Style.Bold' w.Style.Italic' w.Style.Underline' bbuff);  	}  	else {  		bbuff.Font = GFX.FontNormal;  	}  	wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  	//render errors  	if (w.HasError) {  		//bbuff.FillRect (Color.Red'xpos'Control.View.RowHeight-2'wdh'2);  		int ey = Control.View.RowHeight - 1;  		Color c = w.ErrorColor;  		for (int x = 0; x < wdh + 3; x += 4) {  			bbuff.DrawLine (c' new Point (xpos + x' ey)' new Point (xpos + x + 2' ey - 2));  			bbuff.DrawLine (c' new Point (xpos + x + 2' ey - 2)' new Point (xpos + x + 4' ey));  		}  	}  }  else if (w.Type == WordType.Space) {  	bbuff.Font = GFX.FontNormal;  	bbuff.DrawTabbedString ("�"' xpos' 0' taborig' Control.PixelTabSize);  	wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  }  else if (w.Type == WordType.Tab) {  	bbuff.Font = GFX.FontNormal;  	bbuff.DrawTabbedString ("�"' xpos' 0' taborig' Control.PixelTabSize);  	wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderSelectedText,The following statement contains a magic number: if (w.Type == WordType.Word || ws == false) {  	if (w.Style != null) {  		SetFont (w.Style.Bold' w.Style.Italic' w.Style.Underline' bbuff);  	}  	else {  		bbuff.Font = GFX.FontNormal;  	}  	wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  	//render errors  	if (w.HasError) {  		//bbuff.FillRect (Color.Red'xpos'Control.View.RowHeight-2'wdh'2);  		int ey = Control.View.RowHeight - 1;  		Color c = w.ErrorColor;  		for (int x = 0; x < wdh + 3; x += 4) {  			bbuff.DrawLine (c' new Point (xpos + x' ey)' new Point (xpos + x + 2' ey - 2));  			bbuff.DrawLine (c' new Point (xpos + x + 2' ey - 2)' new Point (xpos + x + 4' ey));  		}  	}  }  else if (w.Type == WordType.Space) {  	bbuff.Font = GFX.FontNormal;  	bbuff.DrawTabbedString ("�"' xpos' 0' taborig' Control.PixelTabSize);  	wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  }  else if (w.Type == WordType.Tab) {  	bbuff.Font = GFX.FontNormal;  	bbuff.DrawTabbedString ("�"' xpos' 0' taborig' Control.PixelTabSize);  	wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderSelectedText,The following statement contains a magic number: if (w.Type == WordType.Word || ws == false) {  	if (w.Style != null) {  		SetFont (w.Style.Bold' w.Style.Italic' w.Style.Underline' bbuff);  	}  	else {  		bbuff.Font = GFX.FontNormal;  	}  	wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  	//render errors  	if (w.HasError) {  		//bbuff.FillRect (Color.Red'xpos'Control.View.RowHeight-2'wdh'2);  		int ey = Control.View.RowHeight - 1;  		Color c = w.ErrorColor;  		for (int x = 0; x < wdh + 3; x += 4) {  			bbuff.DrawLine (c' new Point (xpos + x' ey)' new Point (xpos + x + 2' ey - 2));  			bbuff.DrawLine (c' new Point (xpos + x + 2' ey - 2)' new Point (xpos + x + 4' ey));  		}  	}  }  else if (w.Type == WordType.Space) {  	bbuff.Font = GFX.FontNormal;  	bbuff.DrawTabbedString ("�"' xpos' 0' taborig' Control.PixelTabSize);  	wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  }  else if (w.Type == WordType.Tab) {  	bbuff.Font = GFX.FontNormal;  	bbuff.DrawTabbedString ("�"' xpos' 0' taborig' Control.PixelTabSize);  	wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderSelectedText,The following statement contains a magic number: if (w.Type == WordType.Word || ws == false) {  	if (w.Style != null) {  		SetFont (w.Style.Bold' w.Style.Italic' w.Style.Underline' bbuff);  	}  	else {  		bbuff.Font = GFX.FontNormal;  	}  	wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  	//render errors  	if (w.HasError) {  		//bbuff.FillRect (Color.Red'xpos'Control.View.RowHeight-2'wdh'2);  		int ey = Control.View.RowHeight - 1;  		Color c = w.ErrorColor;  		for (int x = 0; x < wdh + 3; x += 4) {  			bbuff.DrawLine (c' new Point (xpos + x' ey)' new Point (xpos + x + 2' ey - 2));  			bbuff.DrawLine (c' new Point (xpos + x + 2' ey - 2)' new Point (xpos + x + 4' ey));  		}  	}  }  else if (w.Type == WordType.Space) {  	bbuff.Font = GFX.FontNormal;  	bbuff.DrawTabbedString ("�"' xpos' 0' taborig' Control.PixelTabSize);  	wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  }  else if (w.Type == WordType.Tab) {  	bbuff.Font = GFX.FontNormal;  	bbuff.DrawTabbedString ("�"' xpos' 0' taborig' Control.PixelTabSize);  	wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderSelectedText,The following statement contains a magic number: if (w.Type == WordType.Word || ws == false) {  	if (w.Style != null) {  		SetFont (w.Style.Bold' w.Style.Italic' w.Style.Underline' bbuff);  	}  	else {  		bbuff.Font = GFX.FontNormal;  	}  	wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  	//render errors  	if (w.HasError) {  		//bbuff.FillRect (Color.Red'xpos'Control.View.RowHeight-2'wdh'2);  		int ey = Control.View.RowHeight - 1;  		Color c = w.ErrorColor;  		for (int x = 0; x < wdh + 3; x += 4) {  			bbuff.DrawLine (c' new Point (xpos + x' ey)' new Point (xpos + x + 2' ey - 2));  			bbuff.DrawLine (c' new Point (xpos + x + 2' ey - 2)' new Point (xpos + x + 4' ey));  		}  	}  }  else if (w.Type == WordType.Space) {  	bbuff.Font = GFX.FontNormal;  	bbuff.DrawTabbedString ("�"' xpos' 0' taborig' Control.PixelTabSize);  	wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  }  else if (w.Type == WordType.Tab) {  	bbuff.Font = GFX.FontNormal;  	bbuff.DrawTabbedString ("�"' xpos' 0' taborig' Control.PixelTabSize);  	wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderSelectedText,The following statement contains a magic number: if (w.Type == WordType.Word || ws == false) {  	if (w.Style != null) {  		SetFont (w.Style.Bold' w.Style.Italic' w.Style.Underline' bbuff);  	}  	else {  		bbuff.Font = GFX.FontNormal;  	}  	wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  	//render errors  	if (w.HasError) {  		//bbuff.FillRect (Color.Red'xpos'Control.View.RowHeight-2'wdh'2);  		int ey = Control.View.RowHeight - 1;  		Color c = w.ErrorColor;  		for (int x = 0; x < wdh + 3; x += 4) {  			bbuff.DrawLine (c' new Point (xpos + x' ey)' new Point (xpos + x + 2' ey - 2));  			bbuff.DrawLine (c' new Point (xpos + x + 2' ey - 2)' new Point (xpos + x + 4' ey));  		}  	}  }  else if (w.Type == WordType.Space) {  	bbuff.Font = GFX.FontNormal;  	bbuff.DrawTabbedString ("�"' xpos' 0' taborig' Control.PixelTabSize);  	wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  }  else if (w.Type == WordType.Tab) {  	bbuff.Font = GFX.FontNormal;  	bbuff.DrawTabbedString ("�"' xpos' 0' taborig' Control.PixelTabSize);  	wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderSelectedText,The following statement contains a magic number: if (w.Type == WordType.Word || ws == false) {  	if (w.Style != null) {  		SetFont (w.Style.Bold' w.Style.Italic' w.Style.Underline' bbuff);  	}  	else {  		bbuff.Font = GFX.FontNormal;  	}  	wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  	//render errors  	if (w.HasError) {  		//bbuff.FillRect (Color.Red'xpos'Control.View.RowHeight-2'wdh'2);  		int ey = Control.View.RowHeight - 1;  		Color c = w.ErrorColor;  		for (int x = 0; x < wdh + 3; x += 4) {  			bbuff.DrawLine (c' new Point (xpos + x' ey)' new Point (xpos + x + 2' ey - 2));  			bbuff.DrawLine (c' new Point (xpos + x + 2' ey - 2)' new Point (xpos + x + 4' ey));  		}  	}  }  else if (w.Type == WordType.Space) {  	bbuff.Font = GFX.FontNormal;  	bbuff.DrawTabbedString ("�"' xpos' 0' taborig' Control.PixelTabSize);  	wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  }  else if (w.Type == WordType.Tab) {  	bbuff.Font = GFX.FontNormal;  	bbuff.DrawTabbedString ("�"' xpos' 0' taborig' Control.PixelTabSize);  	wdh = bbuff.DrawTabbedString (w.Text' xpos' 0' taborig' Control.PixelTabSize).Width;  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderSelectedText,The following statement contains a magic number: if (w.HasError) {  	//bbuff.FillRect (Color.Red'xpos'Control.View.RowHeight-2'wdh'2);  	int ey = Control.View.RowHeight - 1;  	Color c = w.ErrorColor;  	for (int x = 0; x < wdh + 3; x += 4) {  		bbuff.DrawLine (c' new Point (xpos + x' ey)' new Point (xpos + x + 2' ey - 2));  		bbuff.DrawLine (c' new Point (xpos + x + 2' ey - 2)' new Point (xpos + x + 4' ey));  	}  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderSelectedText,The following statement contains a magic number: if (w.HasError) {  	//bbuff.FillRect (Color.Red'xpos'Control.View.RowHeight-2'wdh'2);  	int ey = Control.View.RowHeight - 1;  	Color c = w.ErrorColor;  	for (int x = 0; x < wdh + 3; x += 4) {  		bbuff.DrawLine (c' new Point (xpos + x' ey)' new Point (xpos + x + 2' ey - 2));  		bbuff.DrawLine (c' new Point (xpos + x + 2' ey - 2)' new Point (xpos + x + 4' ey));  	}  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderSelectedText,The following statement contains a magic number: if (w.HasError) {  	//bbuff.FillRect (Color.Red'xpos'Control.View.RowHeight-2'wdh'2);  	int ey = Control.View.RowHeight - 1;  	Color c = w.ErrorColor;  	for (int x = 0; x < wdh + 3; x += 4) {  		bbuff.DrawLine (c' new Point (xpos + x' ey)' new Point (xpos + x + 2' ey - 2));  		bbuff.DrawLine (c' new Point (xpos + x + 2' ey - 2)' new Point (xpos + x + 4' ey));  	}  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderSelectedText,The following statement contains a magic number: if (w.HasError) {  	//bbuff.FillRect (Color.Red'xpos'Control.View.RowHeight-2'wdh'2);  	int ey = Control.View.RowHeight - 1;  	Color c = w.ErrorColor;  	for (int x = 0; x < wdh + 3; x += 4) {  		bbuff.DrawLine (c' new Point (xpos + x' ey)' new Point (xpos + x + 2' ey - 2));  		bbuff.DrawLine (c' new Point (xpos + x + 2' ey - 2)' new Point (xpos + x + 4' ey));  	}  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderSelectedText,The following statement contains a magic number: if (w.HasError) {  	//bbuff.FillRect (Color.Red'xpos'Control.View.RowHeight-2'wdh'2);  	int ey = Control.View.RowHeight - 1;  	Color c = w.ErrorColor;  	for (int x = 0; x < wdh + 3; x += 4) {  		bbuff.DrawLine (c' new Point (xpos + x' ey)' new Point (xpos + x + 2' ey - 2));  		bbuff.DrawLine (c' new Point (xpos + x + 2' ey - 2)' new Point (xpos + x + 4' ey));  	}  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderSelectedText,The following statement contains a magic number: if (w.HasError) {  	//bbuff.FillRect (Color.Red'xpos'Control.View.RowHeight-2'wdh'2);  	int ey = Control.View.RowHeight - 1;  	Color c = w.ErrorColor;  	for (int x = 0; x < wdh + 3; x += 4) {  		bbuff.DrawLine (c' new Point (xpos + x' ey)' new Point (xpos + x + 2' ey - 2));  		bbuff.DrawLine (c' new Point (xpos + x + 2' ey - 2)' new Point (xpos + x + 4' ey));  	}  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderSelectedText,The following statement contains a magic number: if (w.HasError) {  	//bbuff.FillRect (Color.Red'xpos'Control.View.RowHeight-2'wdh'2);  	int ey = Control.View.RowHeight - 1;  	Color c = w.ErrorColor;  	for (int x = 0; x < wdh + 3; x += 4) {  		bbuff.DrawLine (c' new Point (xpos + x' ey)' new Point (xpos + x + 2' ey - 2));  		bbuff.DrawLine (c' new Point (xpos + x + 2' ey - 2)' new Point (xpos + x + 4' ey));  	}  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderSelectedText,The following statement contains a magic number: for (int x = 0; x < wdh + 3; x += 4) {  	bbuff.DrawLine (c' new Point (xpos + x' ey)' new Point (xpos + x + 2' ey - 2));  	bbuff.DrawLine (c' new Point (xpos + x + 2' ey - 2)' new Point (xpos + x + 4' ey));  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderSelectedText,The following statement contains a magic number: for (int x = 0; x < wdh + 3; x += 4) {  	bbuff.DrawLine (c' new Point (xpos + x' ey)' new Point (xpos + x + 2' ey - 2));  	bbuff.DrawLine (c' new Point (xpos + x + 2' ey - 2)' new Point (xpos + x + 4' ey));  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderSelectedText,The following statement contains a magic number: for (int x = 0; x < wdh + 3; x += 4) {  	bbuff.DrawLine (c' new Point (xpos + x' ey)' new Point (xpos + x + 2' ey - 2));  	bbuff.DrawLine (c' new Point (xpos + x + 2' ey - 2)' new Point (xpos + x + 4' ey));  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderSelectedText,The following statement contains a magic number: for (int x = 0; x < wdh + 3; x += 4) {  	bbuff.DrawLine (c' new Point (xpos + x' ey)' new Point (xpos + x + 2' ey - 2));  	bbuff.DrawLine (c' new Point (xpos + x + 2' ey - 2)' new Point (xpos + x + 4' ey));  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderSelectedText,The following statement contains a magic number: for (int x = 0; x < wdh + 3; x += 4) {  	bbuff.DrawLine (c' new Point (xpos + x' ey)' new Point (xpos + x + 2' ey - 2));  	bbuff.DrawLine (c' new Point (xpos + x + 2' ey - 2)' new Point (xpos + x + 4' ey));  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderSelectedText,The following statement contains a magic number: for (int x = 0; x < wdh + 3; x += 4) {  	bbuff.DrawLine (c' new Point (xpos + x' ey)' new Point (xpos + x + 2' ey - 2));  	bbuff.DrawLine (c' new Point (xpos + x + 2' ey - 2)' new Point (xpos + x + 4' ey));  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderSelectedText,The following statement contains a magic number: for (int x = 0; x < wdh + 3; x += 4) {  	bbuff.DrawLine (c' new Point (xpos + x' ey)' new Point (xpos + x + 2' ey - 2));  	bbuff.DrawLine (c' new Point (xpos + x + 2' ey - 2)' new Point (xpos + x + 4' ey));  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderSelectedText,The following statement contains a magic number: x += 4
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderSelectedText,The following statement contains a magic number: bbuff.DrawLine (c' new Point (xpos + x' ey)' new Point (xpos + x + 2' ey - 2));  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderSelectedText,The following statement contains a magic number: bbuff.DrawLine (c' new Point (xpos + x' ey)' new Point (xpos + x + 2' ey - 2));  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderSelectedText,The following statement contains a magic number: bbuff.DrawLine (c' new Point (xpos + x + 2' ey - 2)' new Point (xpos + x + 4' ey));  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderSelectedText,The following statement contains a magic number: bbuff.DrawLine (c' new Point (xpos + x + 2' ey - 2)' new Point (xpos + x + 4' ey));  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderSelectedText,The following statement contains a magic number: bbuff.DrawLine (c' new Point (xpos + x + 2' ey - 2)' new Point (xpos + x + 4' ey));  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderSelectedText,The following statement contains a magic number: if (w.Pattern != null)  	if (w.Pattern.IsSeparator) {  		bbuff.FillRect (Control.SeparatorColor' Control.View.TextMargin - 4' Control.View.RowHeight - 1' Control.View.ClientAreaWidth' 1);  	}  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderSelectedText,The following statement contains a magic number: if (w.Pattern.IsSeparator) {  	bbuff.FillRect (Control.SeparatorColor' Control.View.TextMargin - 4' Control.View.RowHeight - 1' Control.View.ClientAreaWidth' 1);  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderSelectedText,The following statement contains a magic number: bbuff.FillRect (Control.SeparatorColor' Control.View.TextMargin - 4' Control.View.RowHeight - 1' Control.View.ClientAreaWidth' 1);  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderCaret,The following statement contains a magic number: if (Control.View.Action == EditAction.DragText) {  	//drop Control.Caret  	Row xtr = Control.Document [cr];  	int pos = MeasureRow (xtr' Control.Caret.Position.X).Width + 1;  	if (Collapsed) {  		pos += xtr.Expansion_PixelStart;  		pos -= MeasureRow (xtr' xtr.Expansion_StartChar).Width;  	}  	GFX.BackBuffer.InvertRect (pos + Control.View.TextMargin - Control.View.ClientAreaStart - 1' 0' 3' Control.View.RowHeight);  	GFX.BackBuffer.InvertRect (pos + Control.View.TextMargin - Control.View.ClientAreaStart' 1' 1' Control.View.RowHeight - 2);  }  else {  	//normal Control.Caret  	Row xtr = Control.Document [cr];  	if (!Control.OverWrite) {  		int pos = Control.View.TextMargin - Control.View.ClientAreaStart;  		pos += MeasureRow (xtr' Control.Caret.Position.X).Width + 1;  		if (Collapsed) {  			pos += xtr.Expansion_PixelStart;  			pos -= MeasureRow (xtr' xtr.Expansion_StartChar).Width;  		}  		int wdh = Control.View.CharWidth / 12 + 1;  		if (wdh < 2)  			wdh = 2;  		if (Control.Caret.Blink) {  			GFX.BackBuffer.InvertRect (pos' 0' wdh' Control.View.RowHeight);  		}  		if (Control.IMEWindow == null) {  			Control.IMEWindow = new IMEWindow (Control.Handle' Control.FontName' Control.FontSize);  			InitIMEWindow ();  		}  		Control.IMEWindow.Loation = new Point (pos' ypos);  	}  	else {  		int pos1 = MeasureRow (xtr' Control.Caret.Position.X).Width;  		int pos2 = MeasureRow (xtr' Control.Caret.Position.X + 1).Width;  		int wdh = pos2 - pos1;  		if (Collapsed) {  			pos1 += xtr.Expansion_PixelStart;  			pos1 -= MeasureRow (xtr' xtr.Expansion_StartChar).Width;  		}  		int pos = pos1 + Control.View.TextMargin - Control.View.ClientAreaStart;  		if (Control.Caret.Blink) {  			GFX.BackBuffer.InvertRect (pos' 0' wdh' Control.View.RowHeight);  		}  		Control.IMEWindow.Loation = new Point (pos' ypos);  	}  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderCaret,The following statement contains a magic number: if (Control.View.Action == EditAction.DragText) {  	//drop Control.Caret  	Row xtr = Control.Document [cr];  	int pos = MeasureRow (xtr' Control.Caret.Position.X).Width + 1;  	if (Collapsed) {  		pos += xtr.Expansion_PixelStart;  		pos -= MeasureRow (xtr' xtr.Expansion_StartChar).Width;  	}  	GFX.BackBuffer.InvertRect (pos + Control.View.TextMargin - Control.View.ClientAreaStart - 1' 0' 3' Control.View.RowHeight);  	GFX.BackBuffer.InvertRect (pos + Control.View.TextMargin - Control.View.ClientAreaStart' 1' 1' Control.View.RowHeight - 2);  }  else {  	//normal Control.Caret  	Row xtr = Control.Document [cr];  	if (!Control.OverWrite) {  		int pos = Control.View.TextMargin - Control.View.ClientAreaStart;  		pos += MeasureRow (xtr' Control.Caret.Position.X).Width + 1;  		if (Collapsed) {  			pos += xtr.Expansion_PixelStart;  			pos -= MeasureRow (xtr' xtr.Expansion_StartChar).Width;  		}  		int wdh = Control.View.CharWidth / 12 + 1;  		if (wdh < 2)  			wdh = 2;  		if (Control.Caret.Blink) {  			GFX.BackBuffer.InvertRect (pos' 0' wdh' Control.View.RowHeight);  		}  		if (Control.IMEWindow == null) {  			Control.IMEWindow = new IMEWindow (Control.Handle' Control.FontName' Control.FontSize);  			InitIMEWindow ();  		}  		Control.IMEWindow.Loation = new Point (pos' ypos);  	}  	else {  		int pos1 = MeasureRow (xtr' Control.Caret.Position.X).Width;  		int pos2 = MeasureRow (xtr' Control.Caret.Position.X + 1).Width;  		int wdh = pos2 - pos1;  		if (Collapsed) {  			pos1 += xtr.Expansion_PixelStart;  			pos1 -= MeasureRow (xtr' xtr.Expansion_StartChar).Width;  		}  		int pos = pos1 + Control.View.TextMargin - Control.View.ClientAreaStart;  		if (Control.Caret.Blink) {  			GFX.BackBuffer.InvertRect (pos' 0' wdh' Control.View.RowHeight);  		}  		Control.IMEWindow.Loation = new Point (pos' ypos);  	}  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderCaret,The following statement contains a magic number: if (Control.View.Action == EditAction.DragText) {  	//drop Control.Caret  	Row xtr = Control.Document [cr];  	int pos = MeasureRow (xtr' Control.Caret.Position.X).Width + 1;  	if (Collapsed) {  		pos += xtr.Expansion_PixelStart;  		pos -= MeasureRow (xtr' xtr.Expansion_StartChar).Width;  	}  	GFX.BackBuffer.InvertRect (pos + Control.View.TextMargin - Control.View.ClientAreaStart - 1' 0' 3' Control.View.RowHeight);  	GFX.BackBuffer.InvertRect (pos + Control.View.TextMargin - Control.View.ClientAreaStart' 1' 1' Control.View.RowHeight - 2);  }  else {  	//normal Control.Caret  	Row xtr = Control.Document [cr];  	if (!Control.OverWrite) {  		int pos = Control.View.TextMargin - Control.View.ClientAreaStart;  		pos += MeasureRow (xtr' Control.Caret.Position.X).Width + 1;  		if (Collapsed) {  			pos += xtr.Expansion_PixelStart;  			pos -= MeasureRow (xtr' xtr.Expansion_StartChar).Width;  		}  		int wdh = Control.View.CharWidth / 12 + 1;  		if (wdh < 2)  			wdh = 2;  		if (Control.Caret.Blink) {  			GFX.BackBuffer.InvertRect (pos' 0' wdh' Control.View.RowHeight);  		}  		if (Control.IMEWindow == null) {  			Control.IMEWindow = new IMEWindow (Control.Handle' Control.FontName' Control.FontSize);  			InitIMEWindow ();  		}  		Control.IMEWindow.Loation = new Point (pos' ypos);  	}  	else {  		int pos1 = MeasureRow (xtr' Control.Caret.Position.X).Width;  		int pos2 = MeasureRow (xtr' Control.Caret.Position.X + 1).Width;  		int wdh = pos2 - pos1;  		if (Collapsed) {  			pos1 += xtr.Expansion_PixelStart;  			pos1 -= MeasureRow (xtr' xtr.Expansion_StartChar).Width;  		}  		int pos = pos1 + Control.View.TextMargin - Control.View.ClientAreaStart;  		if (Control.Caret.Blink) {  			GFX.BackBuffer.InvertRect (pos' 0' wdh' Control.View.RowHeight);  		}  		Control.IMEWindow.Loation = new Point (pos' ypos);  	}  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderCaret,The following statement contains a magic number: if (Control.View.Action == EditAction.DragText) {  	//drop Control.Caret  	Row xtr = Control.Document [cr];  	int pos = MeasureRow (xtr' Control.Caret.Position.X).Width + 1;  	if (Collapsed) {  		pos += xtr.Expansion_PixelStart;  		pos -= MeasureRow (xtr' xtr.Expansion_StartChar).Width;  	}  	GFX.BackBuffer.InvertRect (pos + Control.View.TextMargin - Control.View.ClientAreaStart - 1' 0' 3' Control.View.RowHeight);  	GFX.BackBuffer.InvertRect (pos + Control.View.TextMargin - Control.View.ClientAreaStart' 1' 1' Control.View.RowHeight - 2);  }  else {  	//normal Control.Caret  	Row xtr = Control.Document [cr];  	if (!Control.OverWrite) {  		int pos = Control.View.TextMargin - Control.View.ClientAreaStart;  		pos += MeasureRow (xtr' Control.Caret.Position.X).Width + 1;  		if (Collapsed) {  			pos += xtr.Expansion_PixelStart;  			pos -= MeasureRow (xtr' xtr.Expansion_StartChar).Width;  		}  		int wdh = Control.View.CharWidth / 12 + 1;  		if (wdh < 2)  			wdh = 2;  		if (Control.Caret.Blink) {  			GFX.BackBuffer.InvertRect (pos' 0' wdh' Control.View.RowHeight);  		}  		if (Control.IMEWindow == null) {  			Control.IMEWindow = new IMEWindow (Control.Handle' Control.FontName' Control.FontSize);  			InitIMEWindow ();  		}  		Control.IMEWindow.Loation = new Point (pos' ypos);  	}  	else {  		int pos1 = MeasureRow (xtr' Control.Caret.Position.X).Width;  		int pos2 = MeasureRow (xtr' Control.Caret.Position.X + 1).Width;  		int wdh = pos2 - pos1;  		if (Collapsed) {  			pos1 += xtr.Expansion_PixelStart;  			pos1 -= MeasureRow (xtr' xtr.Expansion_StartChar).Width;  		}  		int pos = pos1 + Control.View.TextMargin - Control.View.ClientAreaStart;  		if (Control.Caret.Blink) {  			GFX.BackBuffer.InvertRect (pos' 0' wdh' Control.View.RowHeight);  		}  		Control.IMEWindow.Loation = new Point (pos' ypos);  	}  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderCaret,The following statement contains a magic number: if (Control.View.Action == EditAction.DragText) {  	//drop Control.Caret  	Row xtr = Control.Document [cr];  	int pos = MeasureRow (xtr' Control.Caret.Position.X).Width + 1;  	if (Collapsed) {  		pos += xtr.Expansion_PixelStart;  		pos -= MeasureRow (xtr' xtr.Expansion_StartChar).Width;  	}  	GFX.BackBuffer.InvertRect (pos + Control.View.TextMargin - Control.View.ClientAreaStart - 1' 0' 3' Control.View.RowHeight);  	GFX.BackBuffer.InvertRect (pos + Control.View.TextMargin - Control.View.ClientAreaStart' 1' 1' Control.View.RowHeight - 2);  }  else {  	//normal Control.Caret  	Row xtr = Control.Document [cr];  	if (!Control.OverWrite) {  		int pos = Control.View.TextMargin - Control.View.ClientAreaStart;  		pos += MeasureRow (xtr' Control.Caret.Position.X).Width + 1;  		if (Collapsed) {  			pos += xtr.Expansion_PixelStart;  			pos -= MeasureRow (xtr' xtr.Expansion_StartChar).Width;  		}  		int wdh = Control.View.CharWidth / 12 + 1;  		if (wdh < 2)  			wdh = 2;  		if (Control.Caret.Blink) {  			GFX.BackBuffer.InvertRect (pos' 0' wdh' Control.View.RowHeight);  		}  		if (Control.IMEWindow == null) {  			Control.IMEWindow = new IMEWindow (Control.Handle' Control.FontName' Control.FontSize);  			InitIMEWindow ();  		}  		Control.IMEWindow.Loation = new Point (pos' ypos);  	}  	else {  		int pos1 = MeasureRow (xtr' Control.Caret.Position.X).Width;  		int pos2 = MeasureRow (xtr' Control.Caret.Position.X + 1).Width;  		int wdh = pos2 - pos1;  		if (Collapsed) {  			pos1 += xtr.Expansion_PixelStart;  			pos1 -= MeasureRow (xtr' xtr.Expansion_StartChar).Width;  		}  		int pos = pos1 + Control.View.TextMargin - Control.View.ClientAreaStart;  		if (Control.Caret.Blink) {  			GFX.BackBuffer.InvertRect (pos' 0' wdh' Control.View.RowHeight);  		}  		Control.IMEWindow.Loation = new Point (pos' ypos);  	}  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderCaret,The following statement contains a magic number: GFX.BackBuffer.InvertRect (pos + Control.View.TextMargin - Control.View.ClientAreaStart - 1' 0' 3' Control.View.RowHeight);  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderCaret,The following statement contains a magic number: GFX.BackBuffer.InvertRect (pos + Control.View.TextMargin - Control.View.ClientAreaStart' 1' 1' Control.View.RowHeight - 2);  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderCaret,The following statement contains a magic number: if (!Control.OverWrite) {  	int pos = Control.View.TextMargin - Control.View.ClientAreaStart;  	pos += MeasureRow (xtr' Control.Caret.Position.X).Width + 1;  	if (Collapsed) {  		pos += xtr.Expansion_PixelStart;  		pos -= MeasureRow (xtr' xtr.Expansion_StartChar).Width;  	}  	int wdh = Control.View.CharWidth / 12 + 1;  	if (wdh < 2)  		wdh = 2;  	if (Control.Caret.Blink) {  		GFX.BackBuffer.InvertRect (pos' 0' wdh' Control.View.RowHeight);  	}  	if (Control.IMEWindow == null) {  		Control.IMEWindow = new IMEWindow (Control.Handle' Control.FontName' Control.FontSize);  		InitIMEWindow ();  	}  	Control.IMEWindow.Loation = new Point (pos' ypos);  }  else {  	int pos1 = MeasureRow (xtr' Control.Caret.Position.X).Width;  	int pos2 = MeasureRow (xtr' Control.Caret.Position.X + 1).Width;  	int wdh = pos2 - pos1;  	if (Collapsed) {  		pos1 += xtr.Expansion_PixelStart;  		pos1 -= MeasureRow (xtr' xtr.Expansion_StartChar).Width;  	}  	int pos = pos1 + Control.View.TextMargin - Control.View.ClientAreaStart;  	if (Control.Caret.Blink) {  		GFX.BackBuffer.InvertRect (pos' 0' wdh' Control.View.RowHeight);  	}  	Control.IMEWindow.Loation = new Point (pos' ypos);  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderCaret,The following statement contains a magic number: if (!Control.OverWrite) {  	int pos = Control.View.TextMargin - Control.View.ClientAreaStart;  	pos += MeasureRow (xtr' Control.Caret.Position.X).Width + 1;  	if (Collapsed) {  		pos += xtr.Expansion_PixelStart;  		pos -= MeasureRow (xtr' xtr.Expansion_StartChar).Width;  	}  	int wdh = Control.View.CharWidth / 12 + 1;  	if (wdh < 2)  		wdh = 2;  	if (Control.Caret.Blink) {  		GFX.BackBuffer.InvertRect (pos' 0' wdh' Control.View.RowHeight);  	}  	if (Control.IMEWindow == null) {  		Control.IMEWindow = new IMEWindow (Control.Handle' Control.FontName' Control.FontSize);  		InitIMEWindow ();  	}  	Control.IMEWindow.Loation = new Point (pos' ypos);  }  else {  	int pos1 = MeasureRow (xtr' Control.Caret.Position.X).Width;  	int pos2 = MeasureRow (xtr' Control.Caret.Position.X + 1).Width;  	int wdh = pos2 - pos1;  	if (Collapsed) {  		pos1 += xtr.Expansion_PixelStart;  		pos1 -= MeasureRow (xtr' xtr.Expansion_StartChar).Width;  	}  	int pos = pos1 + Control.View.TextMargin - Control.View.ClientAreaStart;  	if (Control.Caret.Blink) {  		GFX.BackBuffer.InvertRect (pos' 0' wdh' Control.View.RowHeight);  	}  	Control.IMEWindow.Loation = new Point (pos' ypos);  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderCaret,The following statement contains a magic number: if (!Control.OverWrite) {  	int pos = Control.View.TextMargin - Control.View.ClientAreaStart;  	pos += MeasureRow (xtr' Control.Caret.Position.X).Width + 1;  	if (Collapsed) {  		pos += xtr.Expansion_PixelStart;  		pos -= MeasureRow (xtr' xtr.Expansion_StartChar).Width;  	}  	int wdh = Control.View.CharWidth / 12 + 1;  	if (wdh < 2)  		wdh = 2;  	if (Control.Caret.Blink) {  		GFX.BackBuffer.InvertRect (pos' 0' wdh' Control.View.RowHeight);  	}  	if (Control.IMEWindow == null) {  		Control.IMEWindow = new IMEWindow (Control.Handle' Control.FontName' Control.FontSize);  		InitIMEWindow ();  	}  	Control.IMEWindow.Loation = new Point (pos' ypos);  }  else {  	int pos1 = MeasureRow (xtr' Control.Caret.Position.X).Width;  	int pos2 = MeasureRow (xtr' Control.Caret.Position.X + 1).Width;  	int wdh = pos2 - pos1;  	if (Collapsed) {  		pos1 += xtr.Expansion_PixelStart;  		pos1 -= MeasureRow (xtr' xtr.Expansion_StartChar).Width;  	}  	int pos = pos1 + Control.View.TextMargin - Control.View.ClientAreaStart;  	if (Control.Caret.Blink) {  		GFX.BackBuffer.InvertRect (pos' 0' wdh' Control.View.RowHeight);  	}  	Control.IMEWindow.Loation = new Point (pos' ypos);  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderCaret,The following statement contains a magic number: if (wdh < 2)  	wdh = 2;  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderCaret,The following statement contains a magic number: if (wdh < 2)  	wdh = 2;  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderCaret,The following statement contains a magic number: wdh = 2;  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderMargin,The following statement contains a magic number: if (Control.ShowLineNumbers) {  	bbuff.FillRect (GFX.LineNumberMarginBrush' Control.View.GutterMarginWidth' 0' Control.View.LineNumberMarginWidth + 1' Control.View.RowHeight);  	//bbuff.FillRect (GFX.LineNumberMarginBrush  'Control.View.GutterMarginWidth+Control.View.LineNumberMarginWidth'0'1'Control.View.RowHeight);  	for (int j = 0; j < Control.View.RowHeight; j += 2) {  		bbuff.FillRect (GFX.LineNumberMarginBorderBrush' Control.View.GutterMarginWidth + Control.View.LineNumberMarginWidth' j' 1' 1);  	}  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderMargin,The following statement contains a magic number: for (int j = 0; j < Control.View.RowHeight; j += 2) {  	bbuff.FillRect (GFX.LineNumberMarginBorderBrush' Control.View.GutterMarginWidth + Control.View.LineNumberMarginWidth' j' 1' 1);  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderMargin,The following statement contains a magic number: j += 2
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderMargin,The following statement contains a magic number: if (!Control.ShowLineNumbers || !Control.ShowGutterMargin)  	bbuff.FillRect (GFX.BackgroundBrush' Control.View.TotalMarginWidth' 0' Control.View.TextMargin - Control.View.TotalMarginWidth - 3' Control.View.RowHeight);  else  	bbuff.FillRect (GFX.BackgroundBrush' Control.View.TotalMarginWidth + 1' 0' Control.View.TextMargin - Control.View.TotalMarginWidth - 4' Control.View.RowHeight);  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderMargin,The following statement contains a magic number: if (!Control.ShowLineNumbers || !Control.ShowGutterMargin)  	bbuff.FillRect (GFX.BackgroundBrush' Control.View.TotalMarginWidth' 0' Control.View.TextMargin - Control.View.TotalMarginWidth - 3' Control.View.RowHeight);  else  	bbuff.FillRect (GFX.BackgroundBrush' Control.View.TotalMarginWidth + 1' 0' Control.View.TextMargin - Control.View.TotalMarginWidth - 4' Control.View.RowHeight);  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderMargin,The following statement contains a magic number: bbuff.FillRect (GFX.BackgroundBrush' Control.View.TotalMarginWidth' 0' Control.View.TextMargin - Control.View.TotalMarginWidth - 3' Control.View.RowHeight);  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderMargin,The following statement contains a magic number: bbuff.FillRect (GFX.BackgroundBrush' Control.View.TotalMarginWidth + 1' 0' Control.View.TextMargin - Control.View.TotalMarginWidth - 4' Control.View.RowHeight);  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderExpansion,The following statement contains a magic number: if (RowIndex <= Control.Document.Count - 1) {  	const int yo = 4;  	Row xtr = Control.Document [RowIndex];  	GDISurface bbuff = GFX.BackBuffer;  	if (xtr.endSpan != null) {  		if (xtr.expansion_StartSpan != null && xtr.startSpan.Parent == null) {  			if (!xtr.IsCollapsed) {  				bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 6' yo' 1' Control.View.RowHeight - yo);  			}  		}  		else if ((xtr.endSpan.Parent != null || xtr.expansion_EndSpan != null)) {  			bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 6' 0' 1' Control.View.RowHeight);  		}  		if (xtr.expansion_StartSpan != null) {  			bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 2' yo' 9' 9);  			bbuff.FillRect (GFX.BackgroundBrush' Control.View.TotalMarginWidth + 3' yo + 1' 7' 7);  			//render plus / minus  			bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 4' yo + 4' 5' 1);  			if (!xtr.expansion_StartSpan.Expanded)  				bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 6' yo + 2' 1' 5);  		}  		if (xtr.expansion_EndSpan != null) {  			bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 7' Control.View.RowHeight - 1' 5' 1);  		}  	}  	//				//RENDER SPAN LINES  	//				if (SpanFound)  	//				{  	//					if (RowIndex==FirstSpanRow)  	//						bbuff.FillRect (GFX.OutlineBrush'this.Control.View.TotalMarginWidth +14'0'Control.ClientWidth '1);  	//  	//					if (RowIndex==LastSpanRow)  	//						bbuff.FillRect (GFX.OutlineBrush'this.Control.View.TotalMarginWidth +14'Control.View.RowHeight-1'Control.ClientWidth'1);				  	//				}  	//RENDER SPAN MARGIN  	if (SpanFound && Control._SyntaxBox.ScopeIndicatorColor != Color.Transparent && Control._SyntaxBox.ShowScopeIndicator) {  		if (RowIndex >= FirstSpanRow && RowIndex <= LastSpanRow)  			bbuff.FillRect (Control._SyntaxBox.ScopeIndicatorColor' Control.View.TotalMarginWidth + 14' 0' 2' Control.View.RowHeight);  		if (RowIndex == FirstSpanRow)  			bbuff.FillRect (Control._SyntaxBox.ScopeIndicatorColor' Control.View.TotalMarginWidth + 14' 0' 4' 2);  		if (RowIndex == LastSpanRow)  			bbuff.FillRect (Control._SyntaxBox.ScopeIndicatorColor' Control.View.TotalMarginWidth + 14' Control.View.RowHeight - 2' 4' 2);  	}  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderExpansion,The following statement contains a magic number: if (RowIndex <= Control.Document.Count - 1) {  	const int yo = 4;  	Row xtr = Control.Document [RowIndex];  	GDISurface bbuff = GFX.BackBuffer;  	if (xtr.endSpan != null) {  		if (xtr.expansion_StartSpan != null && xtr.startSpan.Parent == null) {  			if (!xtr.IsCollapsed) {  				bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 6' yo' 1' Control.View.RowHeight - yo);  			}  		}  		else if ((xtr.endSpan.Parent != null || xtr.expansion_EndSpan != null)) {  			bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 6' 0' 1' Control.View.RowHeight);  		}  		if (xtr.expansion_StartSpan != null) {  			bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 2' yo' 9' 9);  			bbuff.FillRect (GFX.BackgroundBrush' Control.View.TotalMarginWidth + 3' yo + 1' 7' 7);  			//render plus / minus  			bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 4' yo + 4' 5' 1);  			if (!xtr.expansion_StartSpan.Expanded)  				bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 6' yo + 2' 1' 5);  		}  		if (xtr.expansion_EndSpan != null) {  			bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 7' Control.View.RowHeight - 1' 5' 1);  		}  	}  	//				//RENDER SPAN LINES  	//				if (SpanFound)  	//				{  	//					if (RowIndex==FirstSpanRow)  	//						bbuff.FillRect (GFX.OutlineBrush'this.Control.View.TotalMarginWidth +14'0'Control.ClientWidth '1);  	//  	//					if (RowIndex==LastSpanRow)  	//						bbuff.FillRect (GFX.OutlineBrush'this.Control.View.TotalMarginWidth +14'Control.View.RowHeight-1'Control.ClientWidth'1);				  	//				}  	//RENDER SPAN MARGIN  	if (SpanFound && Control._SyntaxBox.ScopeIndicatorColor != Color.Transparent && Control._SyntaxBox.ShowScopeIndicator) {  		if (RowIndex >= FirstSpanRow && RowIndex <= LastSpanRow)  			bbuff.FillRect (Control._SyntaxBox.ScopeIndicatorColor' Control.View.TotalMarginWidth + 14' 0' 2' Control.View.RowHeight);  		if (RowIndex == FirstSpanRow)  			bbuff.FillRect (Control._SyntaxBox.ScopeIndicatorColor' Control.View.TotalMarginWidth + 14' 0' 4' 2);  		if (RowIndex == LastSpanRow)  			bbuff.FillRect (Control._SyntaxBox.ScopeIndicatorColor' Control.View.TotalMarginWidth + 14' Control.View.RowHeight - 2' 4' 2);  	}  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderExpansion,The following statement contains a magic number: if (RowIndex <= Control.Document.Count - 1) {  	const int yo = 4;  	Row xtr = Control.Document [RowIndex];  	GDISurface bbuff = GFX.BackBuffer;  	if (xtr.endSpan != null) {  		if (xtr.expansion_StartSpan != null && xtr.startSpan.Parent == null) {  			if (!xtr.IsCollapsed) {  				bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 6' yo' 1' Control.View.RowHeight - yo);  			}  		}  		else if ((xtr.endSpan.Parent != null || xtr.expansion_EndSpan != null)) {  			bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 6' 0' 1' Control.View.RowHeight);  		}  		if (xtr.expansion_StartSpan != null) {  			bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 2' yo' 9' 9);  			bbuff.FillRect (GFX.BackgroundBrush' Control.View.TotalMarginWidth + 3' yo + 1' 7' 7);  			//render plus / minus  			bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 4' yo + 4' 5' 1);  			if (!xtr.expansion_StartSpan.Expanded)  				bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 6' yo + 2' 1' 5);  		}  		if (xtr.expansion_EndSpan != null) {  			bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 7' Control.View.RowHeight - 1' 5' 1);  		}  	}  	//				//RENDER SPAN LINES  	//				if (SpanFound)  	//				{  	//					if (RowIndex==FirstSpanRow)  	//						bbuff.FillRect (GFX.OutlineBrush'this.Control.View.TotalMarginWidth +14'0'Control.ClientWidth '1);  	//  	//					if (RowIndex==LastSpanRow)  	//						bbuff.FillRect (GFX.OutlineBrush'this.Control.View.TotalMarginWidth +14'Control.View.RowHeight-1'Control.ClientWidth'1);				  	//				}  	//RENDER SPAN MARGIN  	if (SpanFound && Control._SyntaxBox.ScopeIndicatorColor != Color.Transparent && Control._SyntaxBox.ShowScopeIndicator) {  		if (RowIndex >= FirstSpanRow && RowIndex <= LastSpanRow)  			bbuff.FillRect (Control._SyntaxBox.ScopeIndicatorColor' Control.View.TotalMarginWidth + 14' 0' 2' Control.View.RowHeight);  		if (RowIndex == FirstSpanRow)  			bbuff.FillRect (Control._SyntaxBox.ScopeIndicatorColor' Control.View.TotalMarginWidth + 14' 0' 4' 2);  		if (RowIndex == LastSpanRow)  			bbuff.FillRect (Control._SyntaxBox.ScopeIndicatorColor' Control.View.TotalMarginWidth + 14' Control.View.RowHeight - 2' 4' 2);  	}  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderExpansion,The following statement contains a magic number: if (RowIndex <= Control.Document.Count - 1) {  	const int yo = 4;  	Row xtr = Control.Document [RowIndex];  	GDISurface bbuff = GFX.BackBuffer;  	if (xtr.endSpan != null) {  		if (xtr.expansion_StartSpan != null && xtr.startSpan.Parent == null) {  			if (!xtr.IsCollapsed) {  				bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 6' yo' 1' Control.View.RowHeight - yo);  			}  		}  		else if ((xtr.endSpan.Parent != null || xtr.expansion_EndSpan != null)) {  			bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 6' 0' 1' Control.View.RowHeight);  		}  		if (xtr.expansion_StartSpan != null) {  			bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 2' yo' 9' 9);  			bbuff.FillRect (GFX.BackgroundBrush' Control.View.TotalMarginWidth + 3' yo + 1' 7' 7);  			//render plus / minus  			bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 4' yo + 4' 5' 1);  			if (!xtr.expansion_StartSpan.Expanded)  				bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 6' yo + 2' 1' 5);  		}  		if (xtr.expansion_EndSpan != null) {  			bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 7' Control.View.RowHeight - 1' 5' 1);  		}  	}  	//				//RENDER SPAN LINES  	//				if (SpanFound)  	//				{  	//					if (RowIndex==FirstSpanRow)  	//						bbuff.FillRect (GFX.OutlineBrush'this.Control.View.TotalMarginWidth +14'0'Control.ClientWidth '1);  	//  	//					if (RowIndex==LastSpanRow)  	//						bbuff.FillRect (GFX.OutlineBrush'this.Control.View.TotalMarginWidth +14'Control.View.RowHeight-1'Control.ClientWidth'1);				  	//				}  	//RENDER SPAN MARGIN  	if (SpanFound && Control._SyntaxBox.ScopeIndicatorColor != Color.Transparent && Control._SyntaxBox.ShowScopeIndicator) {  		if (RowIndex >= FirstSpanRow && RowIndex <= LastSpanRow)  			bbuff.FillRect (Control._SyntaxBox.ScopeIndicatorColor' Control.View.TotalMarginWidth + 14' 0' 2' Control.View.RowHeight);  		if (RowIndex == FirstSpanRow)  			bbuff.FillRect (Control._SyntaxBox.ScopeIndicatorColor' Control.View.TotalMarginWidth + 14' 0' 4' 2);  		if (RowIndex == LastSpanRow)  			bbuff.FillRect (Control._SyntaxBox.ScopeIndicatorColor' Control.View.TotalMarginWidth + 14' Control.View.RowHeight - 2' 4' 2);  	}  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderExpansion,The following statement contains a magic number: if (RowIndex <= Control.Document.Count - 1) {  	const int yo = 4;  	Row xtr = Control.Document [RowIndex];  	GDISurface bbuff = GFX.BackBuffer;  	if (xtr.endSpan != null) {  		if (xtr.expansion_StartSpan != null && xtr.startSpan.Parent == null) {  			if (!xtr.IsCollapsed) {  				bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 6' yo' 1' Control.View.RowHeight - yo);  			}  		}  		else if ((xtr.endSpan.Parent != null || xtr.expansion_EndSpan != null)) {  			bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 6' 0' 1' Control.View.RowHeight);  		}  		if (xtr.expansion_StartSpan != null) {  			bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 2' yo' 9' 9);  			bbuff.FillRect (GFX.BackgroundBrush' Control.View.TotalMarginWidth + 3' yo + 1' 7' 7);  			//render plus / minus  			bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 4' yo + 4' 5' 1);  			if (!xtr.expansion_StartSpan.Expanded)  				bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 6' yo + 2' 1' 5);  		}  		if (xtr.expansion_EndSpan != null) {  			bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 7' Control.View.RowHeight - 1' 5' 1);  		}  	}  	//				//RENDER SPAN LINES  	//				if (SpanFound)  	//				{  	//					if (RowIndex==FirstSpanRow)  	//						bbuff.FillRect (GFX.OutlineBrush'this.Control.View.TotalMarginWidth +14'0'Control.ClientWidth '1);  	//  	//					if (RowIndex==LastSpanRow)  	//						bbuff.FillRect (GFX.OutlineBrush'this.Control.View.TotalMarginWidth +14'Control.View.RowHeight-1'Control.ClientWidth'1);				  	//				}  	//RENDER SPAN MARGIN  	if (SpanFound && Control._SyntaxBox.ScopeIndicatorColor != Color.Transparent && Control._SyntaxBox.ShowScopeIndicator) {  		if (RowIndex >= FirstSpanRow && RowIndex <= LastSpanRow)  			bbuff.FillRect (Control._SyntaxBox.ScopeIndicatorColor' Control.View.TotalMarginWidth + 14' 0' 2' Control.View.RowHeight);  		if (RowIndex == FirstSpanRow)  			bbuff.FillRect (Control._SyntaxBox.ScopeIndicatorColor' Control.View.TotalMarginWidth + 14' 0' 4' 2);  		if (RowIndex == LastSpanRow)  			bbuff.FillRect (Control._SyntaxBox.ScopeIndicatorColor' Control.View.TotalMarginWidth + 14' Control.View.RowHeight - 2' 4' 2);  	}  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderExpansion,The following statement contains a magic number: if (RowIndex <= Control.Document.Count - 1) {  	const int yo = 4;  	Row xtr = Control.Document [RowIndex];  	GDISurface bbuff = GFX.BackBuffer;  	if (xtr.endSpan != null) {  		if (xtr.expansion_StartSpan != null && xtr.startSpan.Parent == null) {  			if (!xtr.IsCollapsed) {  				bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 6' yo' 1' Control.View.RowHeight - yo);  			}  		}  		else if ((xtr.endSpan.Parent != null || xtr.expansion_EndSpan != null)) {  			bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 6' 0' 1' Control.View.RowHeight);  		}  		if (xtr.expansion_StartSpan != null) {  			bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 2' yo' 9' 9);  			bbuff.FillRect (GFX.BackgroundBrush' Control.View.TotalMarginWidth + 3' yo + 1' 7' 7);  			//render plus / minus  			bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 4' yo + 4' 5' 1);  			if (!xtr.expansion_StartSpan.Expanded)  				bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 6' yo + 2' 1' 5);  		}  		if (xtr.expansion_EndSpan != null) {  			bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 7' Control.View.RowHeight - 1' 5' 1);  		}  	}  	//				//RENDER SPAN LINES  	//				if (SpanFound)  	//				{  	//					if (RowIndex==FirstSpanRow)  	//						bbuff.FillRect (GFX.OutlineBrush'this.Control.View.TotalMarginWidth +14'0'Control.ClientWidth '1);  	//  	//					if (RowIndex==LastSpanRow)  	//						bbuff.FillRect (GFX.OutlineBrush'this.Control.View.TotalMarginWidth +14'Control.View.RowHeight-1'Control.ClientWidth'1);				  	//				}  	//RENDER SPAN MARGIN  	if (SpanFound && Control._SyntaxBox.ScopeIndicatorColor != Color.Transparent && Control._SyntaxBox.ShowScopeIndicator) {  		if (RowIndex >= FirstSpanRow && RowIndex <= LastSpanRow)  			bbuff.FillRect (Control._SyntaxBox.ScopeIndicatorColor' Control.View.TotalMarginWidth + 14' 0' 2' Control.View.RowHeight);  		if (RowIndex == FirstSpanRow)  			bbuff.FillRect (Control._SyntaxBox.ScopeIndicatorColor' Control.View.TotalMarginWidth + 14' 0' 4' 2);  		if (RowIndex == LastSpanRow)  			bbuff.FillRect (Control._SyntaxBox.ScopeIndicatorColor' Control.View.TotalMarginWidth + 14' Control.View.RowHeight - 2' 4' 2);  	}  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderExpansion,The following statement contains a magic number: if (RowIndex <= Control.Document.Count - 1) {  	const int yo = 4;  	Row xtr = Control.Document [RowIndex];  	GDISurface bbuff = GFX.BackBuffer;  	if (xtr.endSpan != null) {  		if (xtr.expansion_StartSpan != null && xtr.startSpan.Parent == null) {  			if (!xtr.IsCollapsed) {  				bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 6' yo' 1' Control.View.RowHeight - yo);  			}  		}  		else if ((xtr.endSpan.Parent != null || xtr.expansion_EndSpan != null)) {  			bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 6' 0' 1' Control.View.RowHeight);  		}  		if (xtr.expansion_StartSpan != null) {  			bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 2' yo' 9' 9);  			bbuff.FillRect (GFX.BackgroundBrush' Control.View.TotalMarginWidth + 3' yo + 1' 7' 7);  			//render plus / minus  			bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 4' yo + 4' 5' 1);  			if (!xtr.expansion_StartSpan.Expanded)  				bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 6' yo + 2' 1' 5);  		}  		if (xtr.expansion_EndSpan != null) {  			bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 7' Control.View.RowHeight - 1' 5' 1);  		}  	}  	//				//RENDER SPAN LINES  	//				if (SpanFound)  	//				{  	//					if (RowIndex==FirstSpanRow)  	//						bbuff.FillRect (GFX.OutlineBrush'this.Control.View.TotalMarginWidth +14'0'Control.ClientWidth '1);  	//  	//					if (RowIndex==LastSpanRow)  	//						bbuff.FillRect (GFX.OutlineBrush'this.Control.View.TotalMarginWidth +14'Control.View.RowHeight-1'Control.ClientWidth'1);				  	//				}  	//RENDER SPAN MARGIN  	if (SpanFound && Control._SyntaxBox.ScopeIndicatorColor != Color.Transparent && Control._SyntaxBox.ShowScopeIndicator) {  		if (RowIndex >= FirstSpanRow && RowIndex <= LastSpanRow)  			bbuff.FillRect (Control._SyntaxBox.ScopeIndicatorColor' Control.View.TotalMarginWidth + 14' 0' 2' Control.View.RowHeight);  		if (RowIndex == FirstSpanRow)  			bbuff.FillRect (Control._SyntaxBox.ScopeIndicatorColor' Control.View.TotalMarginWidth + 14' 0' 4' 2);  		if (RowIndex == LastSpanRow)  			bbuff.FillRect (Control._SyntaxBox.ScopeIndicatorColor' Control.View.TotalMarginWidth + 14' Control.View.RowHeight - 2' 4' 2);  	}  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderExpansion,The following statement contains a magic number: if (RowIndex <= Control.Document.Count - 1) {  	const int yo = 4;  	Row xtr = Control.Document [RowIndex];  	GDISurface bbuff = GFX.BackBuffer;  	if (xtr.endSpan != null) {  		if (xtr.expansion_StartSpan != null && xtr.startSpan.Parent == null) {  			if (!xtr.IsCollapsed) {  				bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 6' yo' 1' Control.View.RowHeight - yo);  			}  		}  		else if ((xtr.endSpan.Parent != null || xtr.expansion_EndSpan != null)) {  			bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 6' 0' 1' Control.View.RowHeight);  		}  		if (xtr.expansion_StartSpan != null) {  			bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 2' yo' 9' 9);  			bbuff.FillRect (GFX.BackgroundBrush' Control.View.TotalMarginWidth + 3' yo + 1' 7' 7);  			//render plus / minus  			bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 4' yo + 4' 5' 1);  			if (!xtr.expansion_StartSpan.Expanded)  				bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 6' yo + 2' 1' 5);  		}  		if (xtr.expansion_EndSpan != null) {  			bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 7' Control.View.RowHeight - 1' 5' 1);  		}  	}  	//				//RENDER SPAN LINES  	//				if (SpanFound)  	//				{  	//					if (RowIndex==FirstSpanRow)  	//						bbuff.FillRect (GFX.OutlineBrush'this.Control.View.TotalMarginWidth +14'0'Control.ClientWidth '1);  	//  	//					if (RowIndex==LastSpanRow)  	//						bbuff.FillRect (GFX.OutlineBrush'this.Control.View.TotalMarginWidth +14'Control.View.RowHeight-1'Control.ClientWidth'1);				  	//				}  	//RENDER SPAN MARGIN  	if (SpanFound && Control._SyntaxBox.ScopeIndicatorColor != Color.Transparent && Control._SyntaxBox.ShowScopeIndicator) {  		if (RowIndex >= FirstSpanRow && RowIndex <= LastSpanRow)  			bbuff.FillRect (Control._SyntaxBox.ScopeIndicatorColor' Control.View.TotalMarginWidth + 14' 0' 2' Control.View.RowHeight);  		if (RowIndex == FirstSpanRow)  			bbuff.FillRect (Control._SyntaxBox.ScopeIndicatorColor' Control.View.TotalMarginWidth + 14' 0' 4' 2);  		if (RowIndex == LastSpanRow)  			bbuff.FillRect (Control._SyntaxBox.ScopeIndicatorColor' Control.View.TotalMarginWidth + 14' Control.View.RowHeight - 2' 4' 2);  	}  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderExpansion,The following statement contains a magic number: if (RowIndex <= Control.Document.Count - 1) {  	const int yo = 4;  	Row xtr = Control.Document [RowIndex];  	GDISurface bbuff = GFX.BackBuffer;  	if (xtr.endSpan != null) {  		if (xtr.expansion_StartSpan != null && xtr.startSpan.Parent == null) {  			if (!xtr.IsCollapsed) {  				bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 6' yo' 1' Control.View.RowHeight - yo);  			}  		}  		else if ((xtr.endSpan.Parent != null || xtr.expansion_EndSpan != null)) {  			bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 6' 0' 1' Control.View.RowHeight);  		}  		if (xtr.expansion_StartSpan != null) {  			bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 2' yo' 9' 9);  			bbuff.FillRect (GFX.BackgroundBrush' Control.View.TotalMarginWidth + 3' yo + 1' 7' 7);  			//render plus / minus  			bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 4' yo + 4' 5' 1);  			if (!xtr.expansion_StartSpan.Expanded)  				bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 6' yo + 2' 1' 5);  		}  		if (xtr.expansion_EndSpan != null) {  			bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 7' Control.View.RowHeight - 1' 5' 1);  		}  	}  	//				//RENDER SPAN LINES  	//				if (SpanFound)  	//				{  	//					if (RowIndex==FirstSpanRow)  	//						bbuff.FillRect (GFX.OutlineBrush'this.Control.View.TotalMarginWidth +14'0'Control.ClientWidth '1);  	//  	//					if (RowIndex==LastSpanRow)  	//						bbuff.FillRect (GFX.OutlineBrush'this.Control.View.TotalMarginWidth +14'Control.View.RowHeight-1'Control.ClientWidth'1);				  	//				}  	//RENDER SPAN MARGIN  	if (SpanFound && Control._SyntaxBox.ScopeIndicatorColor != Color.Transparent && Control._SyntaxBox.ShowScopeIndicator) {  		if (RowIndex >= FirstSpanRow && RowIndex <= LastSpanRow)  			bbuff.FillRect (Control._SyntaxBox.ScopeIndicatorColor' Control.View.TotalMarginWidth + 14' 0' 2' Control.View.RowHeight);  		if (RowIndex == FirstSpanRow)  			bbuff.FillRect (Control._SyntaxBox.ScopeIndicatorColor' Control.View.TotalMarginWidth + 14' 0' 4' 2);  		if (RowIndex == LastSpanRow)  			bbuff.FillRect (Control._SyntaxBox.ScopeIndicatorColor' Control.View.TotalMarginWidth + 14' Control.View.RowHeight - 2' 4' 2);  	}  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderExpansion,The following statement contains a magic number: if (RowIndex <= Control.Document.Count - 1) {  	const int yo = 4;  	Row xtr = Control.Document [RowIndex];  	GDISurface bbuff = GFX.BackBuffer;  	if (xtr.endSpan != null) {  		if (xtr.expansion_StartSpan != null && xtr.startSpan.Parent == null) {  			if (!xtr.IsCollapsed) {  				bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 6' yo' 1' Control.View.RowHeight - yo);  			}  		}  		else if ((xtr.endSpan.Parent != null || xtr.expansion_EndSpan != null)) {  			bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 6' 0' 1' Control.View.RowHeight);  		}  		if (xtr.expansion_StartSpan != null) {  			bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 2' yo' 9' 9);  			bbuff.FillRect (GFX.BackgroundBrush' Control.View.TotalMarginWidth + 3' yo + 1' 7' 7);  			//render plus / minus  			bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 4' yo + 4' 5' 1);  			if (!xtr.expansion_StartSpan.Expanded)  				bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 6' yo + 2' 1' 5);  		}  		if (xtr.expansion_EndSpan != null) {  			bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 7' Control.View.RowHeight - 1' 5' 1);  		}  	}  	//				//RENDER SPAN LINES  	//				if (SpanFound)  	//				{  	//					if (RowIndex==FirstSpanRow)  	//						bbuff.FillRect (GFX.OutlineBrush'this.Control.View.TotalMarginWidth +14'0'Control.ClientWidth '1);  	//  	//					if (RowIndex==LastSpanRow)  	//						bbuff.FillRect (GFX.OutlineBrush'this.Control.View.TotalMarginWidth +14'Control.View.RowHeight-1'Control.ClientWidth'1);				  	//				}  	//RENDER SPAN MARGIN  	if (SpanFound && Control._SyntaxBox.ScopeIndicatorColor != Color.Transparent && Control._SyntaxBox.ShowScopeIndicator) {  		if (RowIndex >= FirstSpanRow && RowIndex <= LastSpanRow)  			bbuff.FillRect (Control._SyntaxBox.ScopeIndicatorColor' Control.View.TotalMarginWidth + 14' 0' 2' Control.View.RowHeight);  		if (RowIndex == FirstSpanRow)  			bbuff.FillRect (Control._SyntaxBox.ScopeIndicatorColor' Control.View.TotalMarginWidth + 14' 0' 4' 2);  		if (RowIndex == LastSpanRow)  			bbuff.FillRect (Control._SyntaxBox.ScopeIndicatorColor' Control.View.TotalMarginWidth + 14' Control.View.RowHeight - 2' 4' 2);  	}  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderExpansion,The following statement contains a magic number: if (RowIndex <= Control.Document.Count - 1) {  	const int yo = 4;  	Row xtr = Control.Document [RowIndex];  	GDISurface bbuff = GFX.BackBuffer;  	if (xtr.endSpan != null) {  		if (xtr.expansion_StartSpan != null && xtr.startSpan.Parent == null) {  			if (!xtr.IsCollapsed) {  				bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 6' yo' 1' Control.View.RowHeight - yo);  			}  		}  		else if ((xtr.endSpan.Parent != null || xtr.expansion_EndSpan != null)) {  			bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 6' 0' 1' Control.View.RowHeight);  		}  		if (xtr.expansion_StartSpan != null) {  			bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 2' yo' 9' 9);  			bbuff.FillRect (GFX.BackgroundBrush' Control.View.TotalMarginWidth + 3' yo + 1' 7' 7);  			//render plus / minus  			bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 4' yo + 4' 5' 1);  			if (!xtr.expansion_StartSpan.Expanded)  				bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 6' yo + 2' 1' 5);  		}  		if (xtr.expansion_EndSpan != null) {  			bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 7' Control.View.RowHeight - 1' 5' 1);  		}  	}  	//				//RENDER SPAN LINES  	//				if (SpanFound)  	//				{  	//					if (RowIndex==FirstSpanRow)  	//						bbuff.FillRect (GFX.OutlineBrush'this.Control.View.TotalMarginWidth +14'0'Control.ClientWidth '1);  	//  	//					if (RowIndex==LastSpanRow)  	//						bbuff.FillRect (GFX.OutlineBrush'this.Control.View.TotalMarginWidth +14'Control.View.RowHeight-1'Control.ClientWidth'1);				  	//				}  	//RENDER SPAN MARGIN  	if (SpanFound && Control._SyntaxBox.ScopeIndicatorColor != Color.Transparent && Control._SyntaxBox.ShowScopeIndicator) {  		if (RowIndex >= FirstSpanRow && RowIndex <= LastSpanRow)  			bbuff.FillRect (Control._SyntaxBox.ScopeIndicatorColor' Control.View.TotalMarginWidth + 14' 0' 2' Control.View.RowHeight);  		if (RowIndex == FirstSpanRow)  			bbuff.FillRect (Control._SyntaxBox.ScopeIndicatorColor' Control.View.TotalMarginWidth + 14' 0' 4' 2);  		if (RowIndex == LastSpanRow)  			bbuff.FillRect (Control._SyntaxBox.ScopeIndicatorColor' Control.View.TotalMarginWidth + 14' Control.View.RowHeight - 2' 4' 2);  	}  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderExpansion,The following statement contains a magic number: if (RowIndex <= Control.Document.Count - 1) {  	const int yo = 4;  	Row xtr = Control.Document [RowIndex];  	GDISurface bbuff = GFX.BackBuffer;  	if (xtr.endSpan != null) {  		if (xtr.expansion_StartSpan != null && xtr.startSpan.Parent == null) {  			if (!xtr.IsCollapsed) {  				bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 6' yo' 1' Control.View.RowHeight - yo);  			}  		}  		else if ((xtr.endSpan.Parent != null || xtr.expansion_EndSpan != null)) {  			bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 6' 0' 1' Control.View.RowHeight);  		}  		if (xtr.expansion_StartSpan != null) {  			bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 2' yo' 9' 9);  			bbuff.FillRect (GFX.BackgroundBrush' Control.View.TotalMarginWidth + 3' yo + 1' 7' 7);  			//render plus / minus  			bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 4' yo + 4' 5' 1);  			if (!xtr.expansion_StartSpan.Expanded)  				bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 6' yo + 2' 1' 5);  		}  		if (xtr.expansion_EndSpan != null) {  			bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 7' Control.View.RowHeight - 1' 5' 1);  		}  	}  	//				//RENDER SPAN LINES  	//				if (SpanFound)  	//				{  	//					if (RowIndex==FirstSpanRow)  	//						bbuff.FillRect (GFX.OutlineBrush'this.Control.View.TotalMarginWidth +14'0'Control.ClientWidth '1);  	//  	//					if (RowIndex==LastSpanRow)  	//						bbuff.FillRect (GFX.OutlineBrush'this.Control.View.TotalMarginWidth +14'Control.View.RowHeight-1'Control.ClientWidth'1);				  	//				}  	//RENDER SPAN MARGIN  	if (SpanFound && Control._SyntaxBox.ScopeIndicatorColor != Color.Transparent && Control._SyntaxBox.ShowScopeIndicator) {  		if (RowIndex >= FirstSpanRow && RowIndex <= LastSpanRow)  			bbuff.FillRect (Control._SyntaxBox.ScopeIndicatorColor' Control.View.TotalMarginWidth + 14' 0' 2' Control.View.RowHeight);  		if (RowIndex == FirstSpanRow)  			bbuff.FillRect (Control._SyntaxBox.ScopeIndicatorColor' Control.View.TotalMarginWidth + 14' 0' 4' 2);  		if (RowIndex == LastSpanRow)  			bbuff.FillRect (Control._SyntaxBox.ScopeIndicatorColor' Control.View.TotalMarginWidth + 14' Control.View.RowHeight - 2' 4' 2);  	}  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderExpansion,The following statement contains a magic number: if (RowIndex <= Control.Document.Count - 1) {  	const int yo = 4;  	Row xtr = Control.Document [RowIndex];  	GDISurface bbuff = GFX.BackBuffer;  	if (xtr.endSpan != null) {  		if (xtr.expansion_StartSpan != null && xtr.startSpan.Parent == null) {  			if (!xtr.IsCollapsed) {  				bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 6' yo' 1' Control.View.RowHeight - yo);  			}  		}  		else if ((xtr.endSpan.Parent != null || xtr.expansion_EndSpan != null)) {  			bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 6' 0' 1' Control.View.RowHeight);  		}  		if (xtr.expansion_StartSpan != null) {  			bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 2' yo' 9' 9);  			bbuff.FillRect (GFX.BackgroundBrush' Control.View.TotalMarginWidth + 3' yo + 1' 7' 7);  			//render plus / minus  			bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 4' yo + 4' 5' 1);  			if (!xtr.expansion_StartSpan.Expanded)  				bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 6' yo + 2' 1' 5);  		}  		if (xtr.expansion_EndSpan != null) {  			bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 7' Control.View.RowHeight - 1' 5' 1);  		}  	}  	//				//RENDER SPAN LINES  	//				if (SpanFound)  	//				{  	//					if (RowIndex==FirstSpanRow)  	//						bbuff.FillRect (GFX.OutlineBrush'this.Control.View.TotalMarginWidth +14'0'Control.ClientWidth '1);  	//  	//					if (RowIndex==LastSpanRow)  	//						bbuff.FillRect (GFX.OutlineBrush'this.Control.View.TotalMarginWidth +14'Control.View.RowHeight-1'Control.ClientWidth'1);				  	//				}  	//RENDER SPAN MARGIN  	if (SpanFound && Control._SyntaxBox.ScopeIndicatorColor != Color.Transparent && Control._SyntaxBox.ShowScopeIndicator) {  		if (RowIndex >= FirstSpanRow && RowIndex <= LastSpanRow)  			bbuff.FillRect (Control._SyntaxBox.ScopeIndicatorColor' Control.View.TotalMarginWidth + 14' 0' 2' Control.View.RowHeight);  		if (RowIndex == FirstSpanRow)  			bbuff.FillRect (Control._SyntaxBox.ScopeIndicatorColor' Control.View.TotalMarginWidth + 14' 0' 4' 2);  		if (RowIndex == LastSpanRow)  			bbuff.FillRect (Control._SyntaxBox.ScopeIndicatorColor' Control.View.TotalMarginWidth + 14' Control.View.RowHeight - 2' 4' 2);  	}  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderExpansion,The following statement contains a magic number: if (RowIndex <= Control.Document.Count - 1) {  	const int yo = 4;  	Row xtr = Control.Document [RowIndex];  	GDISurface bbuff = GFX.BackBuffer;  	if (xtr.endSpan != null) {  		if (xtr.expansion_StartSpan != null && xtr.startSpan.Parent == null) {  			if (!xtr.IsCollapsed) {  				bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 6' yo' 1' Control.View.RowHeight - yo);  			}  		}  		else if ((xtr.endSpan.Parent != null || xtr.expansion_EndSpan != null)) {  			bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 6' 0' 1' Control.View.RowHeight);  		}  		if (xtr.expansion_StartSpan != null) {  			bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 2' yo' 9' 9);  			bbuff.FillRect (GFX.BackgroundBrush' Control.View.TotalMarginWidth + 3' yo + 1' 7' 7);  			//render plus / minus  			bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 4' yo + 4' 5' 1);  			if (!xtr.expansion_StartSpan.Expanded)  				bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 6' yo + 2' 1' 5);  		}  		if (xtr.expansion_EndSpan != null) {  			bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 7' Control.View.RowHeight - 1' 5' 1);  		}  	}  	//				//RENDER SPAN LINES  	//				if (SpanFound)  	//				{  	//					if (RowIndex==FirstSpanRow)  	//						bbuff.FillRect (GFX.OutlineBrush'this.Control.View.TotalMarginWidth +14'0'Control.ClientWidth '1);  	//  	//					if (RowIndex==LastSpanRow)  	//						bbuff.FillRect (GFX.OutlineBrush'this.Control.View.TotalMarginWidth +14'Control.View.RowHeight-1'Control.ClientWidth'1);				  	//				}  	//RENDER SPAN MARGIN  	if (SpanFound && Control._SyntaxBox.ScopeIndicatorColor != Color.Transparent && Control._SyntaxBox.ShowScopeIndicator) {  		if (RowIndex >= FirstSpanRow && RowIndex <= LastSpanRow)  			bbuff.FillRect (Control._SyntaxBox.ScopeIndicatorColor' Control.View.TotalMarginWidth + 14' 0' 2' Control.View.RowHeight);  		if (RowIndex == FirstSpanRow)  			bbuff.FillRect (Control._SyntaxBox.ScopeIndicatorColor' Control.View.TotalMarginWidth + 14' 0' 4' 2);  		if (RowIndex == LastSpanRow)  			bbuff.FillRect (Control._SyntaxBox.ScopeIndicatorColor' Control.View.TotalMarginWidth + 14' Control.View.RowHeight - 2' 4' 2);  	}  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderExpansion,The following statement contains a magic number: if (RowIndex <= Control.Document.Count - 1) {  	const int yo = 4;  	Row xtr = Control.Document [RowIndex];  	GDISurface bbuff = GFX.BackBuffer;  	if (xtr.endSpan != null) {  		if (xtr.expansion_StartSpan != null && xtr.startSpan.Parent == null) {  			if (!xtr.IsCollapsed) {  				bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 6' yo' 1' Control.View.RowHeight - yo);  			}  		}  		else if ((xtr.endSpan.Parent != null || xtr.expansion_EndSpan != null)) {  			bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 6' 0' 1' Control.View.RowHeight);  		}  		if (xtr.expansion_StartSpan != null) {  			bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 2' yo' 9' 9);  			bbuff.FillRect (GFX.BackgroundBrush' Control.View.TotalMarginWidth + 3' yo + 1' 7' 7);  			//render plus / minus  			bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 4' yo + 4' 5' 1);  			if (!xtr.expansion_StartSpan.Expanded)  				bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 6' yo + 2' 1' 5);  		}  		if (xtr.expansion_EndSpan != null) {  			bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 7' Control.View.RowHeight - 1' 5' 1);  		}  	}  	//				//RENDER SPAN LINES  	//				if (SpanFound)  	//				{  	//					if (RowIndex==FirstSpanRow)  	//						bbuff.FillRect (GFX.OutlineBrush'this.Control.View.TotalMarginWidth +14'0'Control.ClientWidth '1);  	//  	//					if (RowIndex==LastSpanRow)  	//						bbuff.FillRect (GFX.OutlineBrush'this.Control.View.TotalMarginWidth +14'Control.View.RowHeight-1'Control.ClientWidth'1);				  	//				}  	//RENDER SPAN MARGIN  	if (SpanFound && Control._SyntaxBox.ScopeIndicatorColor != Color.Transparent && Control._SyntaxBox.ShowScopeIndicator) {  		if (RowIndex >= FirstSpanRow && RowIndex <= LastSpanRow)  			bbuff.FillRect (Control._SyntaxBox.ScopeIndicatorColor' Control.View.TotalMarginWidth + 14' 0' 2' Control.View.RowHeight);  		if (RowIndex == FirstSpanRow)  			bbuff.FillRect (Control._SyntaxBox.ScopeIndicatorColor' Control.View.TotalMarginWidth + 14' 0' 4' 2);  		if (RowIndex == LastSpanRow)  			bbuff.FillRect (Control._SyntaxBox.ScopeIndicatorColor' Control.View.TotalMarginWidth + 14' Control.View.RowHeight - 2' 4' 2);  	}  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderExpansion,The following statement contains a magic number: if (RowIndex <= Control.Document.Count - 1) {  	const int yo = 4;  	Row xtr = Control.Document [RowIndex];  	GDISurface bbuff = GFX.BackBuffer;  	if (xtr.endSpan != null) {  		if (xtr.expansion_StartSpan != null && xtr.startSpan.Parent == null) {  			if (!xtr.IsCollapsed) {  				bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 6' yo' 1' Control.View.RowHeight - yo);  			}  		}  		else if ((xtr.endSpan.Parent != null || xtr.expansion_EndSpan != null)) {  			bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 6' 0' 1' Control.View.RowHeight);  		}  		if (xtr.expansion_StartSpan != null) {  			bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 2' yo' 9' 9);  			bbuff.FillRect (GFX.BackgroundBrush' Control.View.TotalMarginWidth + 3' yo + 1' 7' 7);  			//render plus / minus  			bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 4' yo + 4' 5' 1);  			if (!xtr.expansion_StartSpan.Expanded)  				bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 6' yo + 2' 1' 5);  		}  		if (xtr.expansion_EndSpan != null) {  			bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 7' Control.View.RowHeight - 1' 5' 1);  		}  	}  	//				//RENDER SPAN LINES  	//				if (SpanFound)  	//				{  	//					if (RowIndex==FirstSpanRow)  	//						bbuff.FillRect (GFX.OutlineBrush'this.Control.View.TotalMarginWidth +14'0'Control.ClientWidth '1);  	//  	//					if (RowIndex==LastSpanRow)  	//						bbuff.FillRect (GFX.OutlineBrush'this.Control.View.TotalMarginWidth +14'Control.View.RowHeight-1'Control.ClientWidth'1);				  	//				}  	//RENDER SPAN MARGIN  	if (SpanFound && Control._SyntaxBox.ScopeIndicatorColor != Color.Transparent && Control._SyntaxBox.ShowScopeIndicator) {  		if (RowIndex >= FirstSpanRow && RowIndex <= LastSpanRow)  			bbuff.FillRect (Control._SyntaxBox.ScopeIndicatorColor' Control.View.TotalMarginWidth + 14' 0' 2' Control.View.RowHeight);  		if (RowIndex == FirstSpanRow)  			bbuff.FillRect (Control._SyntaxBox.ScopeIndicatorColor' Control.View.TotalMarginWidth + 14' 0' 4' 2);  		if (RowIndex == LastSpanRow)  			bbuff.FillRect (Control._SyntaxBox.ScopeIndicatorColor' Control.View.TotalMarginWidth + 14' Control.View.RowHeight - 2' 4' 2);  	}  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderExpansion,The following statement contains a magic number: if (RowIndex <= Control.Document.Count - 1) {  	const int yo = 4;  	Row xtr = Control.Document [RowIndex];  	GDISurface bbuff = GFX.BackBuffer;  	if (xtr.endSpan != null) {  		if (xtr.expansion_StartSpan != null && xtr.startSpan.Parent == null) {  			if (!xtr.IsCollapsed) {  				bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 6' yo' 1' Control.View.RowHeight - yo);  			}  		}  		else if ((xtr.endSpan.Parent != null || xtr.expansion_EndSpan != null)) {  			bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 6' 0' 1' Control.View.RowHeight);  		}  		if (xtr.expansion_StartSpan != null) {  			bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 2' yo' 9' 9);  			bbuff.FillRect (GFX.BackgroundBrush' Control.View.TotalMarginWidth + 3' yo + 1' 7' 7);  			//render plus / minus  			bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 4' yo + 4' 5' 1);  			if (!xtr.expansion_StartSpan.Expanded)  				bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 6' yo + 2' 1' 5);  		}  		if (xtr.expansion_EndSpan != null) {  			bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 7' Control.View.RowHeight - 1' 5' 1);  		}  	}  	//				//RENDER SPAN LINES  	//				if (SpanFound)  	//				{  	//					if (RowIndex==FirstSpanRow)  	//						bbuff.FillRect (GFX.OutlineBrush'this.Control.View.TotalMarginWidth +14'0'Control.ClientWidth '1);  	//  	//					if (RowIndex==LastSpanRow)  	//						bbuff.FillRect (GFX.OutlineBrush'this.Control.View.TotalMarginWidth +14'Control.View.RowHeight-1'Control.ClientWidth'1);				  	//				}  	//RENDER SPAN MARGIN  	if (SpanFound && Control._SyntaxBox.ScopeIndicatorColor != Color.Transparent && Control._SyntaxBox.ShowScopeIndicator) {  		if (RowIndex >= FirstSpanRow && RowIndex <= LastSpanRow)  			bbuff.FillRect (Control._SyntaxBox.ScopeIndicatorColor' Control.View.TotalMarginWidth + 14' 0' 2' Control.View.RowHeight);  		if (RowIndex == FirstSpanRow)  			bbuff.FillRect (Control._SyntaxBox.ScopeIndicatorColor' Control.View.TotalMarginWidth + 14' 0' 4' 2);  		if (RowIndex == LastSpanRow)  			bbuff.FillRect (Control._SyntaxBox.ScopeIndicatorColor' Control.View.TotalMarginWidth + 14' Control.View.RowHeight - 2' 4' 2);  	}  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderExpansion,The following statement contains a magic number: if (RowIndex <= Control.Document.Count - 1) {  	const int yo = 4;  	Row xtr = Control.Document [RowIndex];  	GDISurface bbuff = GFX.BackBuffer;  	if (xtr.endSpan != null) {  		if (xtr.expansion_StartSpan != null && xtr.startSpan.Parent == null) {  			if (!xtr.IsCollapsed) {  				bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 6' yo' 1' Control.View.RowHeight - yo);  			}  		}  		else if ((xtr.endSpan.Parent != null || xtr.expansion_EndSpan != null)) {  			bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 6' 0' 1' Control.View.RowHeight);  		}  		if (xtr.expansion_StartSpan != null) {  			bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 2' yo' 9' 9);  			bbuff.FillRect (GFX.BackgroundBrush' Control.View.TotalMarginWidth + 3' yo + 1' 7' 7);  			//render plus / minus  			bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 4' yo + 4' 5' 1);  			if (!xtr.expansion_StartSpan.Expanded)  				bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 6' yo + 2' 1' 5);  		}  		if (xtr.expansion_EndSpan != null) {  			bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 7' Control.View.RowHeight - 1' 5' 1);  		}  	}  	//				//RENDER SPAN LINES  	//				if (SpanFound)  	//				{  	//					if (RowIndex==FirstSpanRow)  	//						bbuff.FillRect (GFX.OutlineBrush'this.Control.View.TotalMarginWidth +14'0'Control.ClientWidth '1);  	//  	//					if (RowIndex==LastSpanRow)  	//						bbuff.FillRect (GFX.OutlineBrush'this.Control.View.TotalMarginWidth +14'Control.View.RowHeight-1'Control.ClientWidth'1);				  	//				}  	//RENDER SPAN MARGIN  	if (SpanFound && Control._SyntaxBox.ScopeIndicatorColor != Color.Transparent && Control._SyntaxBox.ShowScopeIndicator) {  		if (RowIndex >= FirstSpanRow && RowIndex <= LastSpanRow)  			bbuff.FillRect (Control._SyntaxBox.ScopeIndicatorColor' Control.View.TotalMarginWidth + 14' 0' 2' Control.View.RowHeight);  		if (RowIndex == FirstSpanRow)  			bbuff.FillRect (Control._SyntaxBox.ScopeIndicatorColor' Control.View.TotalMarginWidth + 14' 0' 4' 2);  		if (RowIndex == LastSpanRow)  			bbuff.FillRect (Control._SyntaxBox.ScopeIndicatorColor' Control.View.TotalMarginWidth + 14' Control.View.RowHeight - 2' 4' 2);  	}  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderExpansion,The following statement contains a magic number: if (RowIndex <= Control.Document.Count - 1) {  	const int yo = 4;  	Row xtr = Control.Document [RowIndex];  	GDISurface bbuff = GFX.BackBuffer;  	if (xtr.endSpan != null) {  		if (xtr.expansion_StartSpan != null && xtr.startSpan.Parent == null) {  			if (!xtr.IsCollapsed) {  				bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 6' yo' 1' Control.View.RowHeight - yo);  			}  		}  		else if ((xtr.endSpan.Parent != null || xtr.expansion_EndSpan != null)) {  			bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 6' 0' 1' Control.View.RowHeight);  		}  		if (xtr.expansion_StartSpan != null) {  			bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 2' yo' 9' 9);  			bbuff.FillRect (GFX.BackgroundBrush' Control.View.TotalMarginWidth + 3' yo + 1' 7' 7);  			//render plus / minus  			bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 4' yo + 4' 5' 1);  			if (!xtr.expansion_StartSpan.Expanded)  				bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 6' yo + 2' 1' 5);  		}  		if (xtr.expansion_EndSpan != null) {  			bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 7' Control.View.RowHeight - 1' 5' 1);  		}  	}  	//				//RENDER SPAN LINES  	//				if (SpanFound)  	//				{  	//					if (RowIndex==FirstSpanRow)  	//						bbuff.FillRect (GFX.OutlineBrush'this.Control.View.TotalMarginWidth +14'0'Control.ClientWidth '1);  	//  	//					if (RowIndex==LastSpanRow)  	//						bbuff.FillRect (GFX.OutlineBrush'this.Control.View.TotalMarginWidth +14'Control.View.RowHeight-1'Control.ClientWidth'1);				  	//				}  	//RENDER SPAN MARGIN  	if (SpanFound && Control._SyntaxBox.ScopeIndicatorColor != Color.Transparent && Control._SyntaxBox.ShowScopeIndicator) {  		if (RowIndex >= FirstSpanRow && RowIndex <= LastSpanRow)  			bbuff.FillRect (Control._SyntaxBox.ScopeIndicatorColor' Control.View.TotalMarginWidth + 14' 0' 2' Control.View.RowHeight);  		if (RowIndex == FirstSpanRow)  			bbuff.FillRect (Control._SyntaxBox.ScopeIndicatorColor' Control.View.TotalMarginWidth + 14' 0' 4' 2);  		if (RowIndex == LastSpanRow)  			bbuff.FillRect (Control._SyntaxBox.ScopeIndicatorColor' Control.View.TotalMarginWidth + 14' Control.View.RowHeight - 2' 4' 2);  	}  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderExpansion,The following statement contains a magic number: if (RowIndex <= Control.Document.Count - 1) {  	const int yo = 4;  	Row xtr = Control.Document [RowIndex];  	GDISurface bbuff = GFX.BackBuffer;  	if (xtr.endSpan != null) {  		if (xtr.expansion_StartSpan != null && xtr.startSpan.Parent == null) {  			if (!xtr.IsCollapsed) {  				bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 6' yo' 1' Control.View.RowHeight - yo);  			}  		}  		else if ((xtr.endSpan.Parent != null || xtr.expansion_EndSpan != null)) {  			bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 6' 0' 1' Control.View.RowHeight);  		}  		if (xtr.expansion_StartSpan != null) {  			bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 2' yo' 9' 9);  			bbuff.FillRect (GFX.BackgroundBrush' Control.View.TotalMarginWidth + 3' yo + 1' 7' 7);  			//render plus / minus  			bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 4' yo + 4' 5' 1);  			if (!xtr.expansion_StartSpan.Expanded)  				bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 6' yo + 2' 1' 5);  		}  		if (xtr.expansion_EndSpan != null) {  			bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 7' Control.View.RowHeight - 1' 5' 1);  		}  	}  	//				//RENDER SPAN LINES  	//				if (SpanFound)  	//				{  	//					if (RowIndex==FirstSpanRow)  	//						bbuff.FillRect (GFX.OutlineBrush'this.Control.View.TotalMarginWidth +14'0'Control.ClientWidth '1);  	//  	//					if (RowIndex==LastSpanRow)  	//						bbuff.FillRect (GFX.OutlineBrush'this.Control.View.TotalMarginWidth +14'Control.View.RowHeight-1'Control.ClientWidth'1);				  	//				}  	//RENDER SPAN MARGIN  	if (SpanFound && Control._SyntaxBox.ScopeIndicatorColor != Color.Transparent && Control._SyntaxBox.ShowScopeIndicator) {  		if (RowIndex >= FirstSpanRow && RowIndex <= LastSpanRow)  			bbuff.FillRect (Control._SyntaxBox.ScopeIndicatorColor' Control.View.TotalMarginWidth + 14' 0' 2' Control.View.RowHeight);  		if (RowIndex == FirstSpanRow)  			bbuff.FillRect (Control._SyntaxBox.ScopeIndicatorColor' Control.View.TotalMarginWidth + 14' 0' 4' 2);  		if (RowIndex == LastSpanRow)  			bbuff.FillRect (Control._SyntaxBox.ScopeIndicatorColor' Control.View.TotalMarginWidth + 14' Control.View.RowHeight - 2' 4' 2);  	}  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderExpansion,The following statement contains a magic number: if (RowIndex <= Control.Document.Count - 1) {  	const int yo = 4;  	Row xtr = Control.Document [RowIndex];  	GDISurface bbuff = GFX.BackBuffer;  	if (xtr.endSpan != null) {  		if (xtr.expansion_StartSpan != null && xtr.startSpan.Parent == null) {  			if (!xtr.IsCollapsed) {  				bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 6' yo' 1' Control.View.RowHeight - yo);  			}  		}  		else if ((xtr.endSpan.Parent != null || xtr.expansion_EndSpan != null)) {  			bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 6' 0' 1' Control.View.RowHeight);  		}  		if (xtr.expansion_StartSpan != null) {  			bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 2' yo' 9' 9);  			bbuff.FillRect (GFX.BackgroundBrush' Control.View.TotalMarginWidth + 3' yo + 1' 7' 7);  			//render plus / minus  			bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 4' yo + 4' 5' 1);  			if (!xtr.expansion_StartSpan.Expanded)  				bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 6' yo + 2' 1' 5);  		}  		if (xtr.expansion_EndSpan != null) {  			bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 7' Control.View.RowHeight - 1' 5' 1);  		}  	}  	//				//RENDER SPAN LINES  	//				if (SpanFound)  	//				{  	//					if (RowIndex==FirstSpanRow)  	//						bbuff.FillRect (GFX.OutlineBrush'this.Control.View.TotalMarginWidth +14'0'Control.ClientWidth '1);  	//  	//					if (RowIndex==LastSpanRow)  	//						bbuff.FillRect (GFX.OutlineBrush'this.Control.View.TotalMarginWidth +14'Control.View.RowHeight-1'Control.ClientWidth'1);				  	//				}  	//RENDER SPAN MARGIN  	if (SpanFound && Control._SyntaxBox.ScopeIndicatorColor != Color.Transparent && Control._SyntaxBox.ShowScopeIndicator) {  		if (RowIndex >= FirstSpanRow && RowIndex <= LastSpanRow)  			bbuff.FillRect (Control._SyntaxBox.ScopeIndicatorColor' Control.View.TotalMarginWidth + 14' 0' 2' Control.View.RowHeight);  		if (RowIndex == FirstSpanRow)  			bbuff.FillRect (Control._SyntaxBox.ScopeIndicatorColor' Control.View.TotalMarginWidth + 14' 0' 4' 2);  		if (RowIndex == LastSpanRow)  			bbuff.FillRect (Control._SyntaxBox.ScopeIndicatorColor' Control.View.TotalMarginWidth + 14' Control.View.RowHeight - 2' 4' 2);  	}  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderExpansion,The following statement contains a magic number: if (RowIndex <= Control.Document.Count - 1) {  	const int yo = 4;  	Row xtr = Control.Document [RowIndex];  	GDISurface bbuff = GFX.BackBuffer;  	if (xtr.endSpan != null) {  		if (xtr.expansion_StartSpan != null && xtr.startSpan.Parent == null) {  			if (!xtr.IsCollapsed) {  				bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 6' yo' 1' Control.View.RowHeight - yo);  			}  		}  		else if ((xtr.endSpan.Parent != null || xtr.expansion_EndSpan != null)) {  			bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 6' 0' 1' Control.View.RowHeight);  		}  		if (xtr.expansion_StartSpan != null) {  			bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 2' yo' 9' 9);  			bbuff.FillRect (GFX.BackgroundBrush' Control.View.TotalMarginWidth + 3' yo + 1' 7' 7);  			//render plus / minus  			bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 4' yo + 4' 5' 1);  			if (!xtr.expansion_StartSpan.Expanded)  				bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 6' yo + 2' 1' 5);  		}  		if (xtr.expansion_EndSpan != null) {  			bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 7' Control.View.RowHeight - 1' 5' 1);  		}  	}  	//				//RENDER SPAN LINES  	//				if (SpanFound)  	//				{  	//					if (RowIndex==FirstSpanRow)  	//						bbuff.FillRect (GFX.OutlineBrush'this.Control.View.TotalMarginWidth +14'0'Control.ClientWidth '1);  	//  	//					if (RowIndex==LastSpanRow)  	//						bbuff.FillRect (GFX.OutlineBrush'this.Control.View.TotalMarginWidth +14'Control.View.RowHeight-1'Control.ClientWidth'1);				  	//				}  	//RENDER SPAN MARGIN  	if (SpanFound && Control._SyntaxBox.ScopeIndicatorColor != Color.Transparent && Control._SyntaxBox.ShowScopeIndicator) {  		if (RowIndex >= FirstSpanRow && RowIndex <= LastSpanRow)  			bbuff.FillRect (Control._SyntaxBox.ScopeIndicatorColor' Control.View.TotalMarginWidth + 14' 0' 2' Control.View.RowHeight);  		if (RowIndex == FirstSpanRow)  			bbuff.FillRect (Control._SyntaxBox.ScopeIndicatorColor' Control.View.TotalMarginWidth + 14' 0' 4' 2);  		if (RowIndex == LastSpanRow)  			bbuff.FillRect (Control._SyntaxBox.ScopeIndicatorColor' Control.View.TotalMarginWidth + 14' Control.View.RowHeight - 2' 4' 2);  	}  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderExpansion,The following statement contains a magic number: if (RowIndex <= Control.Document.Count - 1) {  	const int yo = 4;  	Row xtr = Control.Document [RowIndex];  	GDISurface bbuff = GFX.BackBuffer;  	if (xtr.endSpan != null) {  		if (xtr.expansion_StartSpan != null && xtr.startSpan.Parent == null) {  			if (!xtr.IsCollapsed) {  				bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 6' yo' 1' Control.View.RowHeight - yo);  			}  		}  		else if ((xtr.endSpan.Parent != null || xtr.expansion_EndSpan != null)) {  			bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 6' 0' 1' Control.View.RowHeight);  		}  		if (xtr.expansion_StartSpan != null) {  			bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 2' yo' 9' 9);  			bbuff.FillRect (GFX.BackgroundBrush' Control.View.TotalMarginWidth + 3' yo + 1' 7' 7);  			//render plus / minus  			bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 4' yo + 4' 5' 1);  			if (!xtr.expansion_StartSpan.Expanded)  				bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 6' yo + 2' 1' 5);  		}  		if (xtr.expansion_EndSpan != null) {  			bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 7' Control.View.RowHeight - 1' 5' 1);  		}  	}  	//				//RENDER SPAN LINES  	//				if (SpanFound)  	//				{  	//					if (RowIndex==FirstSpanRow)  	//						bbuff.FillRect (GFX.OutlineBrush'this.Control.View.TotalMarginWidth +14'0'Control.ClientWidth '1);  	//  	//					if (RowIndex==LastSpanRow)  	//						bbuff.FillRect (GFX.OutlineBrush'this.Control.View.TotalMarginWidth +14'Control.View.RowHeight-1'Control.ClientWidth'1);				  	//				}  	//RENDER SPAN MARGIN  	if (SpanFound && Control._SyntaxBox.ScopeIndicatorColor != Color.Transparent && Control._SyntaxBox.ShowScopeIndicator) {  		if (RowIndex >= FirstSpanRow && RowIndex <= LastSpanRow)  			bbuff.FillRect (Control._SyntaxBox.ScopeIndicatorColor' Control.View.TotalMarginWidth + 14' 0' 2' Control.View.RowHeight);  		if (RowIndex == FirstSpanRow)  			bbuff.FillRect (Control._SyntaxBox.ScopeIndicatorColor' Control.View.TotalMarginWidth + 14' 0' 4' 2);  		if (RowIndex == LastSpanRow)  			bbuff.FillRect (Control._SyntaxBox.ScopeIndicatorColor' Control.View.TotalMarginWidth + 14' Control.View.RowHeight - 2' 4' 2);  	}  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderExpansion,The following statement contains a magic number: if (RowIndex <= Control.Document.Count - 1) {  	const int yo = 4;  	Row xtr = Control.Document [RowIndex];  	GDISurface bbuff = GFX.BackBuffer;  	if (xtr.endSpan != null) {  		if (xtr.expansion_StartSpan != null && xtr.startSpan.Parent == null) {  			if (!xtr.IsCollapsed) {  				bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 6' yo' 1' Control.View.RowHeight - yo);  			}  		}  		else if ((xtr.endSpan.Parent != null || xtr.expansion_EndSpan != null)) {  			bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 6' 0' 1' Control.View.RowHeight);  		}  		if (xtr.expansion_StartSpan != null) {  			bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 2' yo' 9' 9);  			bbuff.FillRect (GFX.BackgroundBrush' Control.View.TotalMarginWidth + 3' yo + 1' 7' 7);  			//render plus / minus  			bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 4' yo + 4' 5' 1);  			if (!xtr.expansion_StartSpan.Expanded)  				bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 6' yo + 2' 1' 5);  		}  		if (xtr.expansion_EndSpan != null) {  			bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 7' Control.View.RowHeight - 1' 5' 1);  		}  	}  	//				//RENDER SPAN LINES  	//				if (SpanFound)  	//				{  	//					if (RowIndex==FirstSpanRow)  	//						bbuff.FillRect (GFX.OutlineBrush'this.Control.View.TotalMarginWidth +14'0'Control.ClientWidth '1);  	//  	//					if (RowIndex==LastSpanRow)  	//						bbuff.FillRect (GFX.OutlineBrush'this.Control.View.TotalMarginWidth +14'Control.View.RowHeight-1'Control.ClientWidth'1);				  	//				}  	//RENDER SPAN MARGIN  	if (SpanFound && Control._SyntaxBox.ScopeIndicatorColor != Color.Transparent && Control._SyntaxBox.ShowScopeIndicator) {  		if (RowIndex >= FirstSpanRow && RowIndex <= LastSpanRow)  			bbuff.FillRect (Control._SyntaxBox.ScopeIndicatorColor' Control.View.TotalMarginWidth + 14' 0' 2' Control.View.RowHeight);  		if (RowIndex == FirstSpanRow)  			bbuff.FillRect (Control._SyntaxBox.ScopeIndicatorColor' Control.View.TotalMarginWidth + 14' 0' 4' 2);  		if (RowIndex == LastSpanRow)  			bbuff.FillRect (Control._SyntaxBox.ScopeIndicatorColor' Control.View.TotalMarginWidth + 14' Control.View.RowHeight - 2' 4' 2);  	}  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderExpansion,The following statement contains a magic number: if (RowIndex <= Control.Document.Count - 1) {  	const int yo = 4;  	Row xtr = Control.Document [RowIndex];  	GDISurface bbuff = GFX.BackBuffer;  	if (xtr.endSpan != null) {  		if (xtr.expansion_StartSpan != null && xtr.startSpan.Parent == null) {  			if (!xtr.IsCollapsed) {  				bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 6' yo' 1' Control.View.RowHeight - yo);  			}  		}  		else if ((xtr.endSpan.Parent != null || xtr.expansion_EndSpan != null)) {  			bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 6' 0' 1' Control.View.RowHeight);  		}  		if (xtr.expansion_StartSpan != null) {  			bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 2' yo' 9' 9);  			bbuff.FillRect (GFX.BackgroundBrush' Control.View.TotalMarginWidth + 3' yo + 1' 7' 7);  			//render plus / minus  			bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 4' yo + 4' 5' 1);  			if (!xtr.expansion_StartSpan.Expanded)  				bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 6' yo + 2' 1' 5);  		}  		if (xtr.expansion_EndSpan != null) {  			bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 7' Control.View.RowHeight - 1' 5' 1);  		}  	}  	//				//RENDER SPAN LINES  	//				if (SpanFound)  	//				{  	//					if (RowIndex==FirstSpanRow)  	//						bbuff.FillRect (GFX.OutlineBrush'this.Control.View.TotalMarginWidth +14'0'Control.ClientWidth '1);  	//  	//					if (RowIndex==LastSpanRow)  	//						bbuff.FillRect (GFX.OutlineBrush'this.Control.View.TotalMarginWidth +14'Control.View.RowHeight-1'Control.ClientWidth'1);				  	//				}  	//RENDER SPAN MARGIN  	if (SpanFound && Control._SyntaxBox.ScopeIndicatorColor != Color.Transparent && Control._SyntaxBox.ShowScopeIndicator) {  		if (RowIndex >= FirstSpanRow && RowIndex <= LastSpanRow)  			bbuff.FillRect (Control._SyntaxBox.ScopeIndicatorColor' Control.View.TotalMarginWidth + 14' 0' 2' Control.View.RowHeight);  		if (RowIndex == FirstSpanRow)  			bbuff.FillRect (Control._SyntaxBox.ScopeIndicatorColor' Control.View.TotalMarginWidth + 14' 0' 4' 2);  		if (RowIndex == LastSpanRow)  			bbuff.FillRect (Control._SyntaxBox.ScopeIndicatorColor' Control.View.TotalMarginWidth + 14' Control.View.RowHeight - 2' 4' 2);  	}  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderExpansion,The following statement contains a magic number: if (RowIndex <= Control.Document.Count - 1) {  	const int yo = 4;  	Row xtr = Control.Document [RowIndex];  	GDISurface bbuff = GFX.BackBuffer;  	if (xtr.endSpan != null) {  		if (xtr.expansion_StartSpan != null && xtr.startSpan.Parent == null) {  			if (!xtr.IsCollapsed) {  				bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 6' yo' 1' Control.View.RowHeight - yo);  			}  		}  		else if ((xtr.endSpan.Parent != null || xtr.expansion_EndSpan != null)) {  			bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 6' 0' 1' Control.View.RowHeight);  		}  		if (xtr.expansion_StartSpan != null) {  			bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 2' yo' 9' 9);  			bbuff.FillRect (GFX.BackgroundBrush' Control.View.TotalMarginWidth + 3' yo + 1' 7' 7);  			//render plus / minus  			bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 4' yo + 4' 5' 1);  			if (!xtr.expansion_StartSpan.Expanded)  				bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 6' yo + 2' 1' 5);  		}  		if (xtr.expansion_EndSpan != null) {  			bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 7' Control.View.RowHeight - 1' 5' 1);  		}  	}  	//				//RENDER SPAN LINES  	//				if (SpanFound)  	//				{  	//					if (RowIndex==FirstSpanRow)  	//						bbuff.FillRect (GFX.OutlineBrush'this.Control.View.TotalMarginWidth +14'0'Control.ClientWidth '1);  	//  	//					if (RowIndex==LastSpanRow)  	//						bbuff.FillRect (GFX.OutlineBrush'this.Control.View.TotalMarginWidth +14'Control.View.RowHeight-1'Control.ClientWidth'1);				  	//				}  	//RENDER SPAN MARGIN  	if (SpanFound && Control._SyntaxBox.ScopeIndicatorColor != Color.Transparent && Control._SyntaxBox.ShowScopeIndicator) {  		if (RowIndex >= FirstSpanRow && RowIndex <= LastSpanRow)  			bbuff.FillRect (Control._SyntaxBox.ScopeIndicatorColor' Control.View.TotalMarginWidth + 14' 0' 2' Control.View.RowHeight);  		if (RowIndex == FirstSpanRow)  			bbuff.FillRect (Control._SyntaxBox.ScopeIndicatorColor' Control.View.TotalMarginWidth + 14' 0' 4' 2);  		if (RowIndex == LastSpanRow)  			bbuff.FillRect (Control._SyntaxBox.ScopeIndicatorColor' Control.View.TotalMarginWidth + 14' Control.View.RowHeight - 2' 4' 2);  	}  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderExpansion,The following statement contains a magic number: if (xtr.endSpan != null) {  	if (xtr.expansion_StartSpan != null && xtr.startSpan.Parent == null) {  		if (!xtr.IsCollapsed) {  			bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 6' yo' 1' Control.View.RowHeight - yo);  		}  	}  	else if ((xtr.endSpan.Parent != null || xtr.expansion_EndSpan != null)) {  		bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 6' 0' 1' Control.View.RowHeight);  	}  	if (xtr.expansion_StartSpan != null) {  		bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 2' yo' 9' 9);  		bbuff.FillRect (GFX.BackgroundBrush' Control.View.TotalMarginWidth + 3' yo + 1' 7' 7);  		//render plus / minus  		bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 4' yo + 4' 5' 1);  		if (!xtr.expansion_StartSpan.Expanded)  			bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 6' yo + 2' 1' 5);  	}  	if (xtr.expansion_EndSpan != null) {  		bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 7' Control.View.RowHeight - 1' 5' 1);  	}  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderExpansion,The following statement contains a magic number: if (xtr.endSpan != null) {  	if (xtr.expansion_StartSpan != null && xtr.startSpan.Parent == null) {  		if (!xtr.IsCollapsed) {  			bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 6' yo' 1' Control.View.RowHeight - yo);  		}  	}  	else if ((xtr.endSpan.Parent != null || xtr.expansion_EndSpan != null)) {  		bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 6' 0' 1' Control.View.RowHeight);  	}  	if (xtr.expansion_StartSpan != null) {  		bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 2' yo' 9' 9);  		bbuff.FillRect (GFX.BackgroundBrush' Control.View.TotalMarginWidth + 3' yo + 1' 7' 7);  		//render plus / minus  		bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 4' yo + 4' 5' 1);  		if (!xtr.expansion_StartSpan.Expanded)  			bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 6' yo + 2' 1' 5);  	}  	if (xtr.expansion_EndSpan != null) {  		bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 7' Control.View.RowHeight - 1' 5' 1);  	}  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderExpansion,The following statement contains a magic number: if (xtr.endSpan != null) {  	if (xtr.expansion_StartSpan != null && xtr.startSpan.Parent == null) {  		if (!xtr.IsCollapsed) {  			bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 6' yo' 1' Control.View.RowHeight - yo);  		}  	}  	else if ((xtr.endSpan.Parent != null || xtr.expansion_EndSpan != null)) {  		bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 6' 0' 1' Control.View.RowHeight);  	}  	if (xtr.expansion_StartSpan != null) {  		bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 2' yo' 9' 9);  		bbuff.FillRect (GFX.BackgroundBrush' Control.View.TotalMarginWidth + 3' yo + 1' 7' 7);  		//render plus / minus  		bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 4' yo + 4' 5' 1);  		if (!xtr.expansion_StartSpan.Expanded)  			bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 6' yo + 2' 1' 5);  	}  	if (xtr.expansion_EndSpan != null) {  		bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 7' Control.View.RowHeight - 1' 5' 1);  	}  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderExpansion,The following statement contains a magic number: if (xtr.endSpan != null) {  	if (xtr.expansion_StartSpan != null && xtr.startSpan.Parent == null) {  		if (!xtr.IsCollapsed) {  			bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 6' yo' 1' Control.View.RowHeight - yo);  		}  	}  	else if ((xtr.endSpan.Parent != null || xtr.expansion_EndSpan != null)) {  		bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 6' 0' 1' Control.View.RowHeight);  	}  	if (xtr.expansion_StartSpan != null) {  		bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 2' yo' 9' 9);  		bbuff.FillRect (GFX.BackgroundBrush' Control.View.TotalMarginWidth + 3' yo + 1' 7' 7);  		//render plus / minus  		bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 4' yo + 4' 5' 1);  		if (!xtr.expansion_StartSpan.Expanded)  			bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 6' yo + 2' 1' 5);  	}  	if (xtr.expansion_EndSpan != null) {  		bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 7' Control.View.RowHeight - 1' 5' 1);  	}  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderExpansion,The following statement contains a magic number: if (xtr.endSpan != null) {  	if (xtr.expansion_StartSpan != null && xtr.startSpan.Parent == null) {  		if (!xtr.IsCollapsed) {  			bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 6' yo' 1' Control.View.RowHeight - yo);  		}  	}  	else if ((xtr.endSpan.Parent != null || xtr.expansion_EndSpan != null)) {  		bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 6' 0' 1' Control.View.RowHeight);  	}  	if (xtr.expansion_StartSpan != null) {  		bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 2' yo' 9' 9);  		bbuff.FillRect (GFX.BackgroundBrush' Control.View.TotalMarginWidth + 3' yo + 1' 7' 7);  		//render plus / minus  		bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 4' yo + 4' 5' 1);  		if (!xtr.expansion_StartSpan.Expanded)  			bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 6' yo + 2' 1' 5);  	}  	if (xtr.expansion_EndSpan != null) {  		bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 7' Control.View.RowHeight - 1' 5' 1);  	}  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderExpansion,The following statement contains a magic number: if (xtr.endSpan != null) {  	if (xtr.expansion_StartSpan != null && xtr.startSpan.Parent == null) {  		if (!xtr.IsCollapsed) {  			bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 6' yo' 1' Control.View.RowHeight - yo);  		}  	}  	else if ((xtr.endSpan.Parent != null || xtr.expansion_EndSpan != null)) {  		bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 6' 0' 1' Control.View.RowHeight);  	}  	if (xtr.expansion_StartSpan != null) {  		bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 2' yo' 9' 9);  		bbuff.FillRect (GFX.BackgroundBrush' Control.View.TotalMarginWidth + 3' yo + 1' 7' 7);  		//render plus / minus  		bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 4' yo + 4' 5' 1);  		if (!xtr.expansion_StartSpan.Expanded)  			bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 6' yo + 2' 1' 5);  	}  	if (xtr.expansion_EndSpan != null) {  		bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 7' Control.View.RowHeight - 1' 5' 1);  	}  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderExpansion,The following statement contains a magic number: if (xtr.endSpan != null) {  	if (xtr.expansion_StartSpan != null && xtr.startSpan.Parent == null) {  		if (!xtr.IsCollapsed) {  			bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 6' yo' 1' Control.View.RowHeight - yo);  		}  	}  	else if ((xtr.endSpan.Parent != null || xtr.expansion_EndSpan != null)) {  		bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 6' 0' 1' Control.View.RowHeight);  	}  	if (xtr.expansion_StartSpan != null) {  		bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 2' yo' 9' 9);  		bbuff.FillRect (GFX.BackgroundBrush' Control.View.TotalMarginWidth + 3' yo + 1' 7' 7);  		//render plus / minus  		bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 4' yo + 4' 5' 1);  		if (!xtr.expansion_StartSpan.Expanded)  			bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 6' yo + 2' 1' 5);  	}  	if (xtr.expansion_EndSpan != null) {  		bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 7' Control.View.RowHeight - 1' 5' 1);  	}  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderExpansion,The following statement contains a magic number: if (xtr.endSpan != null) {  	if (xtr.expansion_StartSpan != null && xtr.startSpan.Parent == null) {  		if (!xtr.IsCollapsed) {  			bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 6' yo' 1' Control.View.RowHeight - yo);  		}  	}  	else if ((xtr.endSpan.Parent != null || xtr.expansion_EndSpan != null)) {  		bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 6' 0' 1' Control.View.RowHeight);  	}  	if (xtr.expansion_StartSpan != null) {  		bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 2' yo' 9' 9);  		bbuff.FillRect (GFX.BackgroundBrush' Control.View.TotalMarginWidth + 3' yo + 1' 7' 7);  		//render plus / minus  		bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 4' yo + 4' 5' 1);  		if (!xtr.expansion_StartSpan.Expanded)  			bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 6' yo + 2' 1' 5);  	}  	if (xtr.expansion_EndSpan != null) {  		bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 7' Control.View.RowHeight - 1' 5' 1);  	}  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderExpansion,The following statement contains a magic number: if (xtr.endSpan != null) {  	if (xtr.expansion_StartSpan != null && xtr.startSpan.Parent == null) {  		if (!xtr.IsCollapsed) {  			bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 6' yo' 1' Control.View.RowHeight - yo);  		}  	}  	else if ((xtr.endSpan.Parent != null || xtr.expansion_EndSpan != null)) {  		bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 6' 0' 1' Control.View.RowHeight);  	}  	if (xtr.expansion_StartSpan != null) {  		bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 2' yo' 9' 9);  		bbuff.FillRect (GFX.BackgroundBrush' Control.View.TotalMarginWidth + 3' yo + 1' 7' 7);  		//render plus / minus  		bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 4' yo + 4' 5' 1);  		if (!xtr.expansion_StartSpan.Expanded)  			bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 6' yo + 2' 1' 5);  	}  	if (xtr.expansion_EndSpan != null) {  		bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 7' Control.View.RowHeight - 1' 5' 1);  	}  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderExpansion,The following statement contains a magic number: if (xtr.endSpan != null) {  	if (xtr.expansion_StartSpan != null && xtr.startSpan.Parent == null) {  		if (!xtr.IsCollapsed) {  			bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 6' yo' 1' Control.View.RowHeight - yo);  		}  	}  	else if ((xtr.endSpan.Parent != null || xtr.expansion_EndSpan != null)) {  		bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 6' 0' 1' Control.View.RowHeight);  	}  	if (xtr.expansion_StartSpan != null) {  		bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 2' yo' 9' 9);  		bbuff.FillRect (GFX.BackgroundBrush' Control.View.TotalMarginWidth + 3' yo + 1' 7' 7);  		//render plus / minus  		bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 4' yo + 4' 5' 1);  		if (!xtr.expansion_StartSpan.Expanded)  			bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 6' yo + 2' 1' 5);  	}  	if (xtr.expansion_EndSpan != null) {  		bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 7' Control.View.RowHeight - 1' 5' 1);  	}  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderExpansion,The following statement contains a magic number: if (xtr.endSpan != null) {  	if (xtr.expansion_StartSpan != null && xtr.startSpan.Parent == null) {  		if (!xtr.IsCollapsed) {  			bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 6' yo' 1' Control.View.RowHeight - yo);  		}  	}  	else if ((xtr.endSpan.Parent != null || xtr.expansion_EndSpan != null)) {  		bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 6' 0' 1' Control.View.RowHeight);  	}  	if (xtr.expansion_StartSpan != null) {  		bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 2' yo' 9' 9);  		bbuff.FillRect (GFX.BackgroundBrush' Control.View.TotalMarginWidth + 3' yo + 1' 7' 7);  		//render plus / minus  		bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 4' yo + 4' 5' 1);  		if (!xtr.expansion_StartSpan.Expanded)  			bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 6' yo + 2' 1' 5);  	}  	if (xtr.expansion_EndSpan != null) {  		bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 7' Control.View.RowHeight - 1' 5' 1);  	}  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderExpansion,The following statement contains a magic number: if (xtr.endSpan != null) {  	if (xtr.expansion_StartSpan != null && xtr.startSpan.Parent == null) {  		if (!xtr.IsCollapsed) {  			bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 6' yo' 1' Control.View.RowHeight - yo);  		}  	}  	else if ((xtr.endSpan.Parent != null || xtr.expansion_EndSpan != null)) {  		bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 6' 0' 1' Control.View.RowHeight);  	}  	if (xtr.expansion_StartSpan != null) {  		bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 2' yo' 9' 9);  		bbuff.FillRect (GFX.BackgroundBrush' Control.View.TotalMarginWidth + 3' yo + 1' 7' 7);  		//render plus / minus  		bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 4' yo + 4' 5' 1);  		if (!xtr.expansion_StartSpan.Expanded)  			bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 6' yo + 2' 1' 5);  	}  	if (xtr.expansion_EndSpan != null) {  		bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 7' Control.View.RowHeight - 1' 5' 1);  	}  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderExpansion,The following statement contains a magic number: if (xtr.endSpan != null) {  	if (xtr.expansion_StartSpan != null && xtr.startSpan.Parent == null) {  		if (!xtr.IsCollapsed) {  			bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 6' yo' 1' Control.View.RowHeight - yo);  		}  	}  	else if ((xtr.endSpan.Parent != null || xtr.expansion_EndSpan != null)) {  		bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 6' 0' 1' Control.View.RowHeight);  	}  	if (xtr.expansion_StartSpan != null) {  		bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 2' yo' 9' 9);  		bbuff.FillRect (GFX.BackgroundBrush' Control.View.TotalMarginWidth + 3' yo + 1' 7' 7);  		//render plus / minus  		bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 4' yo + 4' 5' 1);  		if (!xtr.expansion_StartSpan.Expanded)  			bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 6' yo + 2' 1' 5);  	}  	if (xtr.expansion_EndSpan != null) {  		bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 7' Control.View.RowHeight - 1' 5' 1);  	}  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderExpansion,The following statement contains a magic number: if (xtr.endSpan != null) {  	if (xtr.expansion_StartSpan != null && xtr.startSpan.Parent == null) {  		if (!xtr.IsCollapsed) {  			bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 6' yo' 1' Control.View.RowHeight - yo);  		}  	}  	else if ((xtr.endSpan.Parent != null || xtr.expansion_EndSpan != null)) {  		bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 6' 0' 1' Control.View.RowHeight);  	}  	if (xtr.expansion_StartSpan != null) {  		bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 2' yo' 9' 9);  		bbuff.FillRect (GFX.BackgroundBrush' Control.View.TotalMarginWidth + 3' yo + 1' 7' 7);  		//render plus / minus  		bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 4' yo + 4' 5' 1);  		if (!xtr.expansion_StartSpan.Expanded)  			bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 6' yo + 2' 1' 5);  	}  	if (xtr.expansion_EndSpan != null) {  		bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 7' Control.View.RowHeight - 1' 5' 1);  	}  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderExpansion,The following statement contains a magic number: if (xtr.endSpan != null) {  	if (xtr.expansion_StartSpan != null && xtr.startSpan.Parent == null) {  		if (!xtr.IsCollapsed) {  			bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 6' yo' 1' Control.View.RowHeight - yo);  		}  	}  	else if ((xtr.endSpan.Parent != null || xtr.expansion_EndSpan != null)) {  		bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 6' 0' 1' Control.View.RowHeight);  	}  	if (xtr.expansion_StartSpan != null) {  		bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 2' yo' 9' 9);  		bbuff.FillRect (GFX.BackgroundBrush' Control.View.TotalMarginWidth + 3' yo + 1' 7' 7);  		//render plus / minus  		bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 4' yo + 4' 5' 1);  		if (!xtr.expansion_StartSpan.Expanded)  			bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 6' yo + 2' 1' 5);  	}  	if (xtr.expansion_EndSpan != null) {  		bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 7' Control.View.RowHeight - 1' 5' 1);  	}  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderExpansion,The following statement contains a magic number: if (xtr.endSpan != null) {  	if (xtr.expansion_StartSpan != null && xtr.startSpan.Parent == null) {  		if (!xtr.IsCollapsed) {  			bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 6' yo' 1' Control.View.RowHeight - yo);  		}  	}  	else if ((xtr.endSpan.Parent != null || xtr.expansion_EndSpan != null)) {  		bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 6' 0' 1' Control.View.RowHeight);  	}  	if (xtr.expansion_StartSpan != null) {  		bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 2' yo' 9' 9);  		bbuff.FillRect (GFX.BackgroundBrush' Control.View.TotalMarginWidth + 3' yo + 1' 7' 7);  		//render plus / minus  		bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 4' yo + 4' 5' 1);  		if (!xtr.expansion_StartSpan.Expanded)  			bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 6' yo + 2' 1' 5);  	}  	if (xtr.expansion_EndSpan != null) {  		bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 7' Control.View.RowHeight - 1' 5' 1);  	}  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderExpansion,The following statement contains a magic number: if (xtr.expansion_StartSpan != null && xtr.startSpan.Parent == null) {  	if (!xtr.IsCollapsed) {  		bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 6' yo' 1' Control.View.RowHeight - yo);  	}  }  else if ((xtr.endSpan.Parent != null || xtr.expansion_EndSpan != null)) {  	bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 6' 0' 1' Control.View.RowHeight);  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderExpansion,The following statement contains a magic number: if (xtr.expansion_StartSpan != null && xtr.startSpan.Parent == null) {  	if (!xtr.IsCollapsed) {  		bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 6' yo' 1' Control.View.RowHeight - yo);  	}  }  else if ((xtr.endSpan.Parent != null || xtr.expansion_EndSpan != null)) {  	bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 6' 0' 1' Control.View.RowHeight);  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderExpansion,The following statement contains a magic number: if (!xtr.IsCollapsed) {  	bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 6' yo' 1' Control.View.RowHeight - yo);  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderExpansion,The following statement contains a magic number: bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 6' yo' 1' Control.View.RowHeight - yo);  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderExpansion,The following statement contains a magic number: if ((xtr.endSpan.Parent != null || xtr.expansion_EndSpan != null)) {  	bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 6' 0' 1' Control.View.RowHeight);  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderExpansion,The following statement contains a magic number: bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 6' 0' 1' Control.View.RowHeight);  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderExpansion,The following statement contains a magic number: if (xtr.expansion_StartSpan != null) {  	bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 2' yo' 9' 9);  	bbuff.FillRect (GFX.BackgroundBrush' Control.View.TotalMarginWidth + 3' yo + 1' 7' 7);  	//render plus / minus  	bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 4' yo + 4' 5' 1);  	if (!xtr.expansion_StartSpan.Expanded)  		bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 6' yo + 2' 1' 5);  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderExpansion,The following statement contains a magic number: if (xtr.expansion_StartSpan != null) {  	bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 2' yo' 9' 9);  	bbuff.FillRect (GFX.BackgroundBrush' Control.View.TotalMarginWidth + 3' yo + 1' 7' 7);  	//render plus / minus  	bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 4' yo + 4' 5' 1);  	if (!xtr.expansion_StartSpan.Expanded)  		bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 6' yo + 2' 1' 5);  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderExpansion,The following statement contains a magic number: if (xtr.expansion_StartSpan != null) {  	bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 2' yo' 9' 9);  	bbuff.FillRect (GFX.BackgroundBrush' Control.View.TotalMarginWidth + 3' yo + 1' 7' 7);  	//render plus / minus  	bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 4' yo + 4' 5' 1);  	if (!xtr.expansion_StartSpan.Expanded)  		bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 6' yo + 2' 1' 5);  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderExpansion,The following statement contains a magic number: if (xtr.expansion_StartSpan != null) {  	bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 2' yo' 9' 9);  	bbuff.FillRect (GFX.BackgroundBrush' Control.View.TotalMarginWidth + 3' yo + 1' 7' 7);  	//render plus / minus  	bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 4' yo + 4' 5' 1);  	if (!xtr.expansion_StartSpan.Expanded)  		bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 6' yo + 2' 1' 5);  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderExpansion,The following statement contains a magic number: if (xtr.expansion_StartSpan != null) {  	bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 2' yo' 9' 9);  	bbuff.FillRect (GFX.BackgroundBrush' Control.View.TotalMarginWidth + 3' yo + 1' 7' 7);  	//render plus / minus  	bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 4' yo + 4' 5' 1);  	if (!xtr.expansion_StartSpan.Expanded)  		bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 6' yo + 2' 1' 5);  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderExpansion,The following statement contains a magic number: if (xtr.expansion_StartSpan != null) {  	bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 2' yo' 9' 9);  	bbuff.FillRect (GFX.BackgroundBrush' Control.View.TotalMarginWidth + 3' yo + 1' 7' 7);  	//render plus / minus  	bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 4' yo + 4' 5' 1);  	if (!xtr.expansion_StartSpan.Expanded)  		bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 6' yo + 2' 1' 5);  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderExpansion,The following statement contains a magic number: if (xtr.expansion_StartSpan != null) {  	bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 2' yo' 9' 9);  	bbuff.FillRect (GFX.BackgroundBrush' Control.View.TotalMarginWidth + 3' yo + 1' 7' 7);  	//render plus / minus  	bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 4' yo + 4' 5' 1);  	if (!xtr.expansion_StartSpan.Expanded)  		bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 6' yo + 2' 1' 5);  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderExpansion,The following statement contains a magic number: if (xtr.expansion_StartSpan != null) {  	bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 2' yo' 9' 9);  	bbuff.FillRect (GFX.BackgroundBrush' Control.View.TotalMarginWidth + 3' yo + 1' 7' 7);  	//render plus / minus  	bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 4' yo + 4' 5' 1);  	if (!xtr.expansion_StartSpan.Expanded)  		bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 6' yo + 2' 1' 5);  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderExpansion,The following statement contains a magic number: if (xtr.expansion_StartSpan != null) {  	bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 2' yo' 9' 9);  	bbuff.FillRect (GFX.BackgroundBrush' Control.View.TotalMarginWidth + 3' yo + 1' 7' 7);  	//render plus / minus  	bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 4' yo + 4' 5' 1);  	if (!xtr.expansion_StartSpan.Expanded)  		bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 6' yo + 2' 1' 5);  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderExpansion,The following statement contains a magic number: if (xtr.expansion_StartSpan != null) {  	bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 2' yo' 9' 9);  	bbuff.FillRect (GFX.BackgroundBrush' Control.View.TotalMarginWidth + 3' yo + 1' 7' 7);  	//render plus / minus  	bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 4' yo + 4' 5' 1);  	if (!xtr.expansion_StartSpan.Expanded)  		bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 6' yo + 2' 1' 5);  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderExpansion,The following statement contains a magic number: if (xtr.expansion_StartSpan != null) {  	bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 2' yo' 9' 9);  	bbuff.FillRect (GFX.BackgroundBrush' Control.View.TotalMarginWidth + 3' yo + 1' 7' 7);  	//render plus / minus  	bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 4' yo + 4' 5' 1);  	if (!xtr.expansion_StartSpan.Expanded)  		bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 6' yo + 2' 1' 5);  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderExpansion,The following statement contains a magic number: if (xtr.expansion_StartSpan != null) {  	bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 2' yo' 9' 9);  	bbuff.FillRect (GFX.BackgroundBrush' Control.View.TotalMarginWidth + 3' yo + 1' 7' 7);  	//render plus / minus  	bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 4' yo + 4' 5' 1);  	if (!xtr.expansion_StartSpan.Expanded)  		bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 6' yo + 2' 1' 5);  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderExpansion,The following statement contains a magic number: bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 2' yo' 9' 9);  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderExpansion,The following statement contains a magic number: bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 2' yo' 9' 9);  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderExpansion,The following statement contains a magic number: bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 2' yo' 9' 9);  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderExpansion,The following statement contains a magic number: bbuff.FillRect (GFX.BackgroundBrush' Control.View.TotalMarginWidth + 3' yo + 1' 7' 7);  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderExpansion,The following statement contains a magic number: bbuff.FillRect (GFX.BackgroundBrush' Control.View.TotalMarginWidth + 3' yo + 1' 7' 7);  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderExpansion,The following statement contains a magic number: bbuff.FillRect (GFX.BackgroundBrush' Control.View.TotalMarginWidth + 3' yo + 1' 7' 7);  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderExpansion,The following statement contains a magic number: bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 4' yo + 4' 5' 1);  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderExpansion,The following statement contains a magic number: bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 4' yo + 4' 5' 1);  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderExpansion,The following statement contains a magic number: bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 4' yo + 4' 5' 1);  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderExpansion,The following statement contains a magic number: if (!xtr.expansion_StartSpan.Expanded)  	bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 6' yo + 2' 1' 5);  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderExpansion,The following statement contains a magic number: if (!xtr.expansion_StartSpan.Expanded)  	bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 6' yo + 2' 1' 5);  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderExpansion,The following statement contains a magic number: if (!xtr.expansion_StartSpan.Expanded)  	bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 6' yo + 2' 1' 5);  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderExpansion,The following statement contains a magic number: bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 6' yo + 2' 1' 5);  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderExpansion,The following statement contains a magic number: bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 6' yo + 2' 1' 5);  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderExpansion,The following statement contains a magic number: bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 6' yo + 2' 1' 5);  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderExpansion,The following statement contains a magic number: if (xtr.expansion_EndSpan != null) {  	bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 7' Control.View.RowHeight - 1' 5' 1);  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderExpansion,The following statement contains a magic number: if (xtr.expansion_EndSpan != null) {  	bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 7' Control.View.RowHeight - 1' 5' 1);  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderExpansion,The following statement contains a magic number: bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 7' Control.View.RowHeight - 1' 5' 1);  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderExpansion,The following statement contains a magic number: bbuff.FillRect (GFX.OutlineBrush' Control.View.TotalMarginWidth + 7' Control.View.RowHeight - 1' 5' 1);  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderExpansion,The following statement contains a magic number: if (SpanFound && Control._SyntaxBox.ScopeIndicatorColor != Color.Transparent && Control._SyntaxBox.ShowScopeIndicator) {  	if (RowIndex >= FirstSpanRow && RowIndex <= LastSpanRow)  		bbuff.FillRect (Control._SyntaxBox.ScopeIndicatorColor' Control.View.TotalMarginWidth + 14' 0' 2' Control.View.RowHeight);  	if (RowIndex == FirstSpanRow)  		bbuff.FillRect (Control._SyntaxBox.ScopeIndicatorColor' Control.View.TotalMarginWidth + 14' 0' 4' 2);  	if (RowIndex == LastSpanRow)  		bbuff.FillRect (Control._SyntaxBox.ScopeIndicatorColor' Control.View.TotalMarginWidth + 14' Control.View.RowHeight - 2' 4' 2);  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderExpansion,The following statement contains a magic number: if (SpanFound && Control._SyntaxBox.ScopeIndicatorColor != Color.Transparent && Control._SyntaxBox.ShowScopeIndicator) {  	if (RowIndex >= FirstSpanRow && RowIndex <= LastSpanRow)  		bbuff.FillRect (Control._SyntaxBox.ScopeIndicatorColor' Control.View.TotalMarginWidth + 14' 0' 2' Control.View.RowHeight);  	if (RowIndex == FirstSpanRow)  		bbuff.FillRect (Control._SyntaxBox.ScopeIndicatorColor' Control.View.TotalMarginWidth + 14' 0' 4' 2);  	if (RowIndex == LastSpanRow)  		bbuff.FillRect (Control._SyntaxBox.ScopeIndicatorColor' Control.View.TotalMarginWidth + 14' Control.View.RowHeight - 2' 4' 2);  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderExpansion,The following statement contains a magic number: if (SpanFound && Control._SyntaxBox.ScopeIndicatorColor != Color.Transparent && Control._SyntaxBox.ShowScopeIndicator) {  	if (RowIndex >= FirstSpanRow && RowIndex <= LastSpanRow)  		bbuff.FillRect (Control._SyntaxBox.ScopeIndicatorColor' Control.View.TotalMarginWidth + 14' 0' 2' Control.View.RowHeight);  	if (RowIndex == FirstSpanRow)  		bbuff.FillRect (Control._SyntaxBox.ScopeIndicatorColor' Control.View.TotalMarginWidth + 14' 0' 4' 2);  	if (RowIndex == LastSpanRow)  		bbuff.FillRect (Control._SyntaxBox.ScopeIndicatorColor' Control.View.TotalMarginWidth + 14' Control.View.RowHeight - 2' 4' 2);  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderExpansion,The following statement contains a magic number: if (SpanFound && Control._SyntaxBox.ScopeIndicatorColor != Color.Transparent && Control._SyntaxBox.ShowScopeIndicator) {  	if (RowIndex >= FirstSpanRow && RowIndex <= LastSpanRow)  		bbuff.FillRect (Control._SyntaxBox.ScopeIndicatorColor' Control.View.TotalMarginWidth + 14' 0' 2' Control.View.RowHeight);  	if (RowIndex == FirstSpanRow)  		bbuff.FillRect (Control._SyntaxBox.ScopeIndicatorColor' Control.View.TotalMarginWidth + 14' 0' 4' 2);  	if (RowIndex == LastSpanRow)  		bbuff.FillRect (Control._SyntaxBox.ScopeIndicatorColor' Control.View.TotalMarginWidth + 14' Control.View.RowHeight - 2' 4' 2);  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderExpansion,The following statement contains a magic number: if (SpanFound && Control._SyntaxBox.ScopeIndicatorColor != Color.Transparent && Control._SyntaxBox.ShowScopeIndicator) {  	if (RowIndex >= FirstSpanRow && RowIndex <= LastSpanRow)  		bbuff.FillRect (Control._SyntaxBox.ScopeIndicatorColor' Control.View.TotalMarginWidth + 14' 0' 2' Control.View.RowHeight);  	if (RowIndex == FirstSpanRow)  		bbuff.FillRect (Control._SyntaxBox.ScopeIndicatorColor' Control.View.TotalMarginWidth + 14' 0' 4' 2);  	if (RowIndex == LastSpanRow)  		bbuff.FillRect (Control._SyntaxBox.ScopeIndicatorColor' Control.View.TotalMarginWidth + 14' Control.View.RowHeight - 2' 4' 2);  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderExpansion,The following statement contains a magic number: if (SpanFound && Control._SyntaxBox.ScopeIndicatorColor != Color.Transparent && Control._SyntaxBox.ShowScopeIndicator) {  	if (RowIndex >= FirstSpanRow && RowIndex <= LastSpanRow)  		bbuff.FillRect (Control._SyntaxBox.ScopeIndicatorColor' Control.View.TotalMarginWidth + 14' 0' 2' Control.View.RowHeight);  	if (RowIndex == FirstSpanRow)  		bbuff.FillRect (Control._SyntaxBox.ScopeIndicatorColor' Control.View.TotalMarginWidth + 14' 0' 4' 2);  	if (RowIndex == LastSpanRow)  		bbuff.FillRect (Control._SyntaxBox.ScopeIndicatorColor' Control.View.TotalMarginWidth + 14' Control.View.RowHeight - 2' 4' 2);  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderExpansion,The following statement contains a magic number: if (SpanFound && Control._SyntaxBox.ScopeIndicatorColor != Color.Transparent && Control._SyntaxBox.ShowScopeIndicator) {  	if (RowIndex >= FirstSpanRow && RowIndex <= LastSpanRow)  		bbuff.FillRect (Control._SyntaxBox.ScopeIndicatorColor' Control.View.TotalMarginWidth + 14' 0' 2' Control.View.RowHeight);  	if (RowIndex == FirstSpanRow)  		bbuff.FillRect (Control._SyntaxBox.ScopeIndicatorColor' Control.View.TotalMarginWidth + 14' 0' 4' 2);  	if (RowIndex == LastSpanRow)  		bbuff.FillRect (Control._SyntaxBox.ScopeIndicatorColor' Control.View.TotalMarginWidth + 14' Control.View.RowHeight - 2' 4' 2);  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderExpansion,The following statement contains a magic number: if (SpanFound && Control._SyntaxBox.ScopeIndicatorColor != Color.Transparent && Control._SyntaxBox.ShowScopeIndicator) {  	if (RowIndex >= FirstSpanRow && RowIndex <= LastSpanRow)  		bbuff.FillRect (Control._SyntaxBox.ScopeIndicatorColor' Control.View.TotalMarginWidth + 14' 0' 2' Control.View.RowHeight);  	if (RowIndex == FirstSpanRow)  		bbuff.FillRect (Control._SyntaxBox.ScopeIndicatorColor' Control.View.TotalMarginWidth + 14' 0' 4' 2);  	if (RowIndex == LastSpanRow)  		bbuff.FillRect (Control._SyntaxBox.ScopeIndicatorColor' Control.View.TotalMarginWidth + 14' Control.View.RowHeight - 2' 4' 2);  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderExpansion,The following statement contains a magic number: if (SpanFound && Control._SyntaxBox.ScopeIndicatorColor != Color.Transparent && Control._SyntaxBox.ShowScopeIndicator) {  	if (RowIndex >= FirstSpanRow && RowIndex <= LastSpanRow)  		bbuff.FillRect (Control._SyntaxBox.ScopeIndicatorColor' Control.View.TotalMarginWidth + 14' 0' 2' Control.View.RowHeight);  	if (RowIndex == FirstSpanRow)  		bbuff.FillRect (Control._SyntaxBox.ScopeIndicatorColor' Control.View.TotalMarginWidth + 14' 0' 4' 2);  	if (RowIndex == LastSpanRow)  		bbuff.FillRect (Control._SyntaxBox.ScopeIndicatorColor' Control.View.TotalMarginWidth + 14' Control.View.RowHeight - 2' 4' 2);  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderExpansion,The following statement contains a magic number: if (RowIndex >= FirstSpanRow && RowIndex <= LastSpanRow)  	bbuff.FillRect (Control._SyntaxBox.ScopeIndicatorColor' Control.View.TotalMarginWidth + 14' 0' 2' Control.View.RowHeight);  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderExpansion,The following statement contains a magic number: if (RowIndex >= FirstSpanRow && RowIndex <= LastSpanRow)  	bbuff.FillRect (Control._SyntaxBox.ScopeIndicatorColor' Control.View.TotalMarginWidth + 14' 0' 2' Control.View.RowHeight);  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderExpansion,The following statement contains a magic number: bbuff.FillRect (Control._SyntaxBox.ScopeIndicatorColor' Control.View.TotalMarginWidth + 14' 0' 2' Control.View.RowHeight);  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderExpansion,The following statement contains a magic number: bbuff.FillRect (Control._SyntaxBox.ScopeIndicatorColor' Control.View.TotalMarginWidth + 14' 0' 2' Control.View.RowHeight);  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderExpansion,The following statement contains a magic number: if (RowIndex == FirstSpanRow)  	bbuff.FillRect (Control._SyntaxBox.ScopeIndicatorColor' Control.View.TotalMarginWidth + 14' 0' 4' 2);  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderExpansion,The following statement contains a magic number: if (RowIndex == FirstSpanRow)  	bbuff.FillRect (Control._SyntaxBox.ScopeIndicatorColor' Control.View.TotalMarginWidth + 14' 0' 4' 2);  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderExpansion,The following statement contains a magic number: if (RowIndex == FirstSpanRow)  	bbuff.FillRect (Control._SyntaxBox.ScopeIndicatorColor' Control.View.TotalMarginWidth + 14' 0' 4' 2);  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderExpansion,The following statement contains a magic number: bbuff.FillRect (Control._SyntaxBox.ScopeIndicatorColor' Control.View.TotalMarginWidth + 14' 0' 4' 2);  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderExpansion,The following statement contains a magic number: bbuff.FillRect (Control._SyntaxBox.ScopeIndicatorColor' Control.View.TotalMarginWidth + 14' 0' 4' 2);  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderExpansion,The following statement contains a magic number: bbuff.FillRect (Control._SyntaxBox.ScopeIndicatorColor' Control.View.TotalMarginWidth + 14' 0' 4' 2);  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderExpansion,The following statement contains a magic number: if (RowIndex == LastSpanRow)  	bbuff.FillRect (Control._SyntaxBox.ScopeIndicatorColor' Control.View.TotalMarginWidth + 14' Control.View.RowHeight - 2' 4' 2);  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderExpansion,The following statement contains a magic number: if (RowIndex == LastSpanRow)  	bbuff.FillRect (Control._SyntaxBox.ScopeIndicatorColor' Control.View.TotalMarginWidth + 14' Control.View.RowHeight - 2' 4' 2);  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderExpansion,The following statement contains a magic number: if (RowIndex == LastSpanRow)  	bbuff.FillRect (Control._SyntaxBox.ScopeIndicatorColor' Control.View.TotalMarginWidth + 14' Control.View.RowHeight - 2' 4' 2);  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderExpansion,The following statement contains a magic number: if (RowIndex == LastSpanRow)  	bbuff.FillRect (Control._SyntaxBox.ScopeIndicatorColor' Control.View.TotalMarginWidth + 14' Control.View.RowHeight - 2' 4' 2);  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderExpansion,The following statement contains a magic number: bbuff.FillRect (Control._SyntaxBox.ScopeIndicatorColor' Control.View.TotalMarginWidth + 14' Control.View.RowHeight - 2' 4' 2);  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderExpansion,The following statement contains a magic number: bbuff.FillRect (Control._SyntaxBox.ScopeIndicatorColor' Control.View.TotalMarginWidth + 14' Control.View.RowHeight - 2' 4' 2);  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderExpansion,The following statement contains a magic number: bbuff.FillRect (Control._SyntaxBox.ScopeIndicatorColor' Control.View.TotalMarginWidth + 14' Control.View.RowHeight - 2' 4' 2);  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderExpansion,The following statement contains a magic number: bbuff.FillRect (Control._SyntaxBox.ScopeIndicatorColor' Control.View.TotalMarginWidth + 14' Control.View.RowHeight - 2' 4' 2);  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderSelection,The following statement contains a magic number: if (RowIndex <= Control.Document.Count - 1 && Control.Selection.IsValid) {  	Row xtr = Control.Document [RowIndex];  	if (!xtr.IsCollapsed) {  		if ((RowIndex > Control.Selection.LogicalBounds.FirstRow) && (RowIndex < Control.Selection.LogicalBounds.LastRow)) {  			int width = MeasureRow (xtr' xtr.Text.Length).Width + MeasureString ("�").Width + 3;  			RenderBox (Control.View.TextMargin' 0' Math.Max (width - Control.View.ClientAreaStart' 0)' Control.View.RowHeight);  		}  		else if ((RowIndex == Control.Selection.LogicalBounds.FirstRow) && (RowIndex == Control.Selection.LogicalBounds.LastRow)) {  			int start = MeasureRow (xtr' Math.Min (xtr.Text.Length' Control.Selection.LogicalBounds.FirstColumn)).Width;  			int width = MeasureRow (xtr' Math.Min (xtr.Text.Length' Control.Selection.LogicalBounds.LastColumn)).Width - start;  			RenderBox (Control.View.TextMargin + start - Control.View.ClientAreaStart' 0' width' Control.View.RowHeight);  		}  		else if (RowIndex == Control.Selection.LogicalBounds.LastRow) {  			int width = MeasureRow (xtr' Math.Min (xtr.Text.Length' Control.Selection.LogicalBounds.LastColumn)).Width;  			RenderBox (Control.View.TextMargin' 0' Math.Max (width - Control.View.ClientAreaStart' 0)' Control.View.RowHeight);  		}  		else if (RowIndex == Control.Selection.LogicalBounds.FirstRow) {  			int start = MeasureRow (xtr' Math.Min (xtr.Text.Length' Control.Selection.LogicalBounds.FirstColumn)).Width;  			int width = MeasureRow (xtr' xtr.Text.Length).Width + MeasureString ("�").Width + 3 - start;  			RenderBox (Control.View.TextMargin + start - Control.View.ClientAreaStart' 0' width' Control.View.RowHeight);  		}  	}  	else {  		RenderCollapsedSelection (RowIndex);  	}  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderSelection,The following statement contains a magic number: if (RowIndex <= Control.Document.Count - 1 && Control.Selection.IsValid) {  	Row xtr = Control.Document [RowIndex];  	if (!xtr.IsCollapsed) {  		if ((RowIndex > Control.Selection.LogicalBounds.FirstRow) && (RowIndex < Control.Selection.LogicalBounds.LastRow)) {  			int width = MeasureRow (xtr' xtr.Text.Length).Width + MeasureString ("�").Width + 3;  			RenderBox (Control.View.TextMargin' 0' Math.Max (width - Control.View.ClientAreaStart' 0)' Control.View.RowHeight);  		}  		else if ((RowIndex == Control.Selection.LogicalBounds.FirstRow) && (RowIndex == Control.Selection.LogicalBounds.LastRow)) {  			int start = MeasureRow (xtr' Math.Min (xtr.Text.Length' Control.Selection.LogicalBounds.FirstColumn)).Width;  			int width = MeasureRow (xtr' Math.Min (xtr.Text.Length' Control.Selection.LogicalBounds.LastColumn)).Width - start;  			RenderBox (Control.View.TextMargin + start - Control.View.ClientAreaStart' 0' width' Control.View.RowHeight);  		}  		else if (RowIndex == Control.Selection.LogicalBounds.LastRow) {  			int width = MeasureRow (xtr' Math.Min (xtr.Text.Length' Control.Selection.LogicalBounds.LastColumn)).Width;  			RenderBox (Control.View.TextMargin' 0' Math.Max (width - Control.View.ClientAreaStart' 0)' Control.View.RowHeight);  		}  		else if (RowIndex == Control.Selection.LogicalBounds.FirstRow) {  			int start = MeasureRow (xtr' Math.Min (xtr.Text.Length' Control.Selection.LogicalBounds.FirstColumn)).Width;  			int width = MeasureRow (xtr' xtr.Text.Length).Width + MeasureString ("�").Width + 3 - start;  			RenderBox (Control.View.TextMargin + start - Control.View.ClientAreaStart' 0' width' Control.View.RowHeight);  		}  	}  	else {  		RenderCollapsedSelection (RowIndex);  	}  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderSelection,The following statement contains a magic number: if (!xtr.IsCollapsed) {  	if ((RowIndex > Control.Selection.LogicalBounds.FirstRow) && (RowIndex < Control.Selection.LogicalBounds.LastRow)) {  		int width = MeasureRow (xtr' xtr.Text.Length).Width + MeasureString ("�").Width + 3;  		RenderBox (Control.View.TextMargin' 0' Math.Max (width - Control.View.ClientAreaStart' 0)' Control.View.RowHeight);  	}  	else if ((RowIndex == Control.Selection.LogicalBounds.FirstRow) && (RowIndex == Control.Selection.LogicalBounds.LastRow)) {  		int start = MeasureRow (xtr' Math.Min (xtr.Text.Length' Control.Selection.LogicalBounds.FirstColumn)).Width;  		int width = MeasureRow (xtr' Math.Min (xtr.Text.Length' Control.Selection.LogicalBounds.LastColumn)).Width - start;  		RenderBox (Control.View.TextMargin + start - Control.View.ClientAreaStart' 0' width' Control.View.RowHeight);  	}  	else if (RowIndex == Control.Selection.LogicalBounds.LastRow) {  		int width = MeasureRow (xtr' Math.Min (xtr.Text.Length' Control.Selection.LogicalBounds.LastColumn)).Width;  		RenderBox (Control.View.TextMargin' 0' Math.Max (width - Control.View.ClientAreaStart' 0)' Control.View.RowHeight);  	}  	else if (RowIndex == Control.Selection.LogicalBounds.FirstRow) {  		int start = MeasureRow (xtr' Math.Min (xtr.Text.Length' Control.Selection.LogicalBounds.FirstColumn)).Width;  		int width = MeasureRow (xtr' xtr.Text.Length).Width + MeasureString ("�").Width + 3 - start;  		RenderBox (Control.View.TextMargin + start - Control.View.ClientAreaStart' 0' width' Control.View.RowHeight);  	}  }  else {  	RenderCollapsedSelection (RowIndex);  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderSelection,The following statement contains a magic number: if (!xtr.IsCollapsed) {  	if ((RowIndex > Control.Selection.LogicalBounds.FirstRow) && (RowIndex < Control.Selection.LogicalBounds.LastRow)) {  		int width = MeasureRow (xtr' xtr.Text.Length).Width + MeasureString ("�").Width + 3;  		RenderBox (Control.View.TextMargin' 0' Math.Max (width - Control.View.ClientAreaStart' 0)' Control.View.RowHeight);  	}  	else if ((RowIndex == Control.Selection.LogicalBounds.FirstRow) && (RowIndex == Control.Selection.LogicalBounds.LastRow)) {  		int start = MeasureRow (xtr' Math.Min (xtr.Text.Length' Control.Selection.LogicalBounds.FirstColumn)).Width;  		int width = MeasureRow (xtr' Math.Min (xtr.Text.Length' Control.Selection.LogicalBounds.LastColumn)).Width - start;  		RenderBox (Control.View.TextMargin + start - Control.View.ClientAreaStart' 0' width' Control.View.RowHeight);  	}  	else if (RowIndex == Control.Selection.LogicalBounds.LastRow) {  		int width = MeasureRow (xtr' Math.Min (xtr.Text.Length' Control.Selection.LogicalBounds.LastColumn)).Width;  		RenderBox (Control.View.TextMargin' 0' Math.Max (width - Control.View.ClientAreaStart' 0)' Control.View.RowHeight);  	}  	else if (RowIndex == Control.Selection.LogicalBounds.FirstRow) {  		int start = MeasureRow (xtr' Math.Min (xtr.Text.Length' Control.Selection.LogicalBounds.FirstColumn)).Width;  		int width = MeasureRow (xtr' xtr.Text.Length).Width + MeasureString ("�").Width + 3 - start;  		RenderBox (Control.View.TextMargin + start - Control.View.ClientAreaStart' 0' width' Control.View.RowHeight);  	}  }  else {  	RenderCollapsedSelection (RowIndex);  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderSelection,The following statement contains a magic number: if ((RowIndex > Control.Selection.LogicalBounds.FirstRow) && (RowIndex < Control.Selection.LogicalBounds.LastRow)) {  	int width = MeasureRow (xtr' xtr.Text.Length).Width + MeasureString ("�").Width + 3;  	RenderBox (Control.View.TextMargin' 0' Math.Max (width - Control.View.ClientAreaStart' 0)' Control.View.RowHeight);  }  else if ((RowIndex == Control.Selection.LogicalBounds.FirstRow) && (RowIndex == Control.Selection.LogicalBounds.LastRow)) {  	int start = MeasureRow (xtr' Math.Min (xtr.Text.Length' Control.Selection.LogicalBounds.FirstColumn)).Width;  	int width = MeasureRow (xtr' Math.Min (xtr.Text.Length' Control.Selection.LogicalBounds.LastColumn)).Width - start;  	RenderBox (Control.View.TextMargin + start - Control.View.ClientAreaStart' 0' width' Control.View.RowHeight);  }  else if (RowIndex == Control.Selection.LogicalBounds.LastRow) {  	int width = MeasureRow (xtr' Math.Min (xtr.Text.Length' Control.Selection.LogicalBounds.LastColumn)).Width;  	RenderBox (Control.View.TextMargin' 0' Math.Max (width - Control.View.ClientAreaStart' 0)' Control.View.RowHeight);  }  else if (RowIndex == Control.Selection.LogicalBounds.FirstRow) {  	int start = MeasureRow (xtr' Math.Min (xtr.Text.Length' Control.Selection.LogicalBounds.FirstColumn)).Width;  	int width = MeasureRow (xtr' xtr.Text.Length).Width + MeasureString ("�").Width + 3 - start;  	RenderBox (Control.View.TextMargin + start - Control.View.ClientAreaStart' 0' width' Control.View.RowHeight);  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderSelection,The following statement contains a magic number: if ((RowIndex > Control.Selection.LogicalBounds.FirstRow) && (RowIndex < Control.Selection.LogicalBounds.LastRow)) {  	int width = MeasureRow (xtr' xtr.Text.Length).Width + MeasureString ("�").Width + 3;  	RenderBox (Control.View.TextMargin' 0' Math.Max (width - Control.View.ClientAreaStart' 0)' Control.View.RowHeight);  }  else if ((RowIndex == Control.Selection.LogicalBounds.FirstRow) && (RowIndex == Control.Selection.LogicalBounds.LastRow)) {  	int start = MeasureRow (xtr' Math.Min (xtr.Text.Length' Control.Selection.LogicalBounds.FirstColumn)).Width;  	int width = MeasureRow (xtr' Math.Min (xtr.Text.Length' Control.Selection.LogicalBounds.LastColumn)).Width - start;  	RenderBox (Control.View.TextMargin + start - Control.View.ClientAreaStart' 0' width' Control.View.RowHeight);  }  else if (RowIndex == Control.Selection.LogicalBounds.LastRow) {  	int width = MeasureRow (xtr' Math.Min (xtr.Text.Length' Control.Selection.LogicalBounds.LastColumn)).Width;  	RenderBox (Control.View.TextMargin' 0' Math.Max (width - Control.View.ClientAreaStart' 0)' Control.View.RowHeight);  }  else if (RowIndex == Control.Selection.LogicalBounds.FirstRow) {  	int start = MeasureRow (xtr' Math.Min (xtr.Text.Length' Control.Selection.LogicalBounds.FirstColumn)).Width;  	int width = MeasureRow (xtr' xtr.Text.Length).Width + MeasureString ("�").Width + 3 - start;  	RenderBox (Control.View.TextMargin + start - Control.View.ClientAreaStart' 0' width' Control.View.RowHeight);  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderSelection,The following statement contains a magic number: if ((RowIndex == Control.Selection.LogicalBounds.FirstRow) && (RowIndex == Control.Selection.LogicalBounds.LastRow)) {  	int start = MeasureRow (xtr' Math.Min (xtr.Text.Length' Control.Selection.LogicalBounds.FirstColumn)).Width;  	int width = MeasureRow (xtr' Math.Min (xtr.Text.Length' Control.Selection.LogicalBounds.LastColumn)).Width - start;  	RenderBox (Control.View.TextMargin + start - Control.View.ClientAreaStart' 0' width' Control.View.RowHeight);  }  else if (RowIndex == Control.Selection.LogicalBounds.LastRow) {  	int width = MeasureRow (xtr' Math.Min (xtr.Text.Length' Control.Selection.LogicalBounds.LastColumn)).Width;  	RenderBox (Control.View.TextMargin' 0' Math.Max (width - Control.View.ClientAreaStart' 0)' Control.View.RowHeight);  }  else if (RowIndex == Control.Selection.LogicalBounds.FirstRow) {  	int start = MeasureRow (xtr' Math.Min (xtr.Text.Length' Control.Selection.LogicalBounds.FirstColumn)).Width;  	int width = MeasureRow (xtr' xtr.Text.Length).Width + MeasureString ("�").Width + 3 - start;  	RenderBox (Control.View.TextMargin + start - Control.View.ClientAreaStart' 0' width' Control.View.RowHeight);  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderSelection,The following statement contains a magic number: if (RowIndex == Control.Selection.LogicalBounds.LastRow) {  	int width = MeasureRow (xtr' Math.Min (xtr.Text.Length' Control.Selection.LogicalBounds.LastColumn)).Width;  	RenderBox (Control.View.TextMargin' 0' Math.Max (width - Control.View.ClientAreaStart' 0)' Control.View.RowHeight);  }  else if (RowIndex == Control.Selection.LogicalBounds.FirstRow) {  	int start = MeasureRow (xtr' Math.Min (xtr.Text.Length' Control.Selection.LogicalBounds.FirstColumn)).Width;  	int width = MeasureRow (xtr' xtr.Text.Length).Width + MeasureString ("�").Width + 3 - start;  	RenderBox (Control.View.TextMargin + start - Control.View.ClientAreaStart' 0' width' Control.View.RowHeight);  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderSelection,The following statement contains a magic number: if (RowIndex == Control.Selection.LogicalBounds.FirstRow) {  	int start = MeasureRow (xtr' Math.Min (xtr.Text.Length' Control.Selection.LogicalBounds.FirstColumn)).Width;  	int width = MeasureRow (xtr' xtr.Text.Length).Width + MeasureString ("�").Width + 3 - start;  	RenderBox (Control.View.TextMargin + start - Control.View.ClientAreaStart' 0' width' Control.View.RowHeight);  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderCollapsedSelection,The following statement contains a magic number: if (Control.Selection.LogicalBounds.FirstRow <= RowIndex && Control.Selection.LogicalBounds.LastRow >= RowIndex) {  	int endchar = Control.Selection.LogicalBounds.LastRow != RowIndex ? xtr.Text.Length : Math.Min (Control.Selection.LogicalBounds.LastColumn' xtr.Text.Length);  	int end = MeasureRow (xtr' endchar).Width;  	end += xtr.Expansion_PixelStart;  	end -= MeasureRow (xtr' xtr.Expansion_StartChar).Width;  	int start;  	if (Control.Selection.LogicalBounds.FirstRow == RowIndex) {  		int startchar = Math.Max (Control.Selection.LogicalBounds.FirstColumn' xtr.Expansion_StartChar);  		start = MeasureRow (xtr' startchar).Width;  		start += xtr.Expansion_PixelStart;  		start -= MeasureRow (xtr' xtr.Expansion_StartChar).Width;  	}  	else {  		start = MeasureRow (xtr' xtr.Expansion_StartChar).Width;  		start += xtr.Expansion_PixelStart;  		start -= MeasureRow (xtr' xtr.Expansion_StartChar).Width;  	}  	end -= start;  	if (Control.Selection.LogicalBounds.LastRow != RowIndex)  		end += 6;  	RenderBox (Control.View.TextMargin + start - Control.View.ClientAreaStart' 0' end' Control.View.RowHeight);  }  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderCollapsedSelection,The following statement contains a magic number: if (Control.Selection.LogicalBounds.LastRow != RowIndex)  	end += 6;  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,RenderCollapsedSelection,The following statement contains a magic number: end += 6;  
Magic Number,Alsing.Windows.Forms.SyntaxBox.Painter,NativePainter,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Classes\NativePainter.cs,ColumnFromPixel,The following statement contains a magic number: X -= Control.View.TextMargin - 2 - Control.View.FirstVisibleColumn * Control.View.CharWidth;  
Magic Number,Alsing.Windows.Forms,BaseControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\BaseControls\BaseControl.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size (272' 264);  
Magic Number,Alsing.Windows.Forms,BaseControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\BaseControls\BaseControl.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size (272' 264);  
Magic Number,Alsing.Windows.Forms,BasePanelControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\BaseControls\BasePanelControl.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size (272' 264);  
Magic Number,Alsing.Windows.Forms,BasePanelControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\BaseControls\BasePanelControl.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size (272' 264);  
Magic Number,Alsing.Windows.Forms,InfoTipForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\InfoTip\InfoTipForm.cs,DoResize,The following statement contains a magic number: if (Image != null && Image.Height + picIcon.Top * 2 > h)  	h = Image.Height + picIcon.Top * 2;  
Magic Number,Alsing.Windows.Forms,InfoTipForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\InfoTip\InfoTipForm.cs,DoResize,The following statement contains a magic number: if (Image != null && Image.Height + picIcon.Top * 2 > h)  	h = Image.Height + picIcon.Top * 2;  
Magic Number,Alsing.Windows.Forms,InfoTipForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\InfoTip\InfoTipForm.cs,DoResize,The following statement contains a magic number: h = Image.Height + picIcon.Top * 2;  
Magic Number,Alsing.Windows.Forms,InfoTipForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\InfoTip\InfoTipForm.cs,InitializeComponent,The following statement contains a magic number: this.pnlSelect.DockPadding.All = 4;  
Magic Number,Alsing.Windows.Forms,InfoTipForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\InfoTip\InfoTipForm.cs,InitializeComponent,The following statement contains a magic number: this.pnlSelect.Location = new System.Drawing.Point (32' 0);  
Magic Number,Alsing.Windows.Forms,InfoTipForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\InfoTip\InfoTipForm.cs,InitializeComponent,The following statement contains a magic number: this.pnlSelect.Size = new System.Drawing.Size (80' 35);  
Magic Number,Alsing.Windows.Forms,InfoTipForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\InfoTip\InfoTipForm.cs,InitializeComponent,The following statement contains a magic number: this.pnlSelect.Size = new System.Drawing.Size (80' 35);  
Magic Number,Alsing.Windows.Forms,InfoTipForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\InfoTip\InfoTipForm.cs,InitializeComponent,The following statement contains a magic number: this.btnNext.Location = new System.Drawing.Point (68' 6);  
Magic Number,Alsing.Windows.Forms,InfoTipForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\InfoTip\InfoTipForm.cs,InitializeComponent,The following statement contains a magic number: this.btnNext.Location = new System.Drawing.Point (68' 6);  
Magic Number,Alsing.Windows.Forms,InfoTipForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\InfoTip\InfoTipForm.cs,InitializeComponent,The following statement contains a magic number: this.btnNext.Size = new System.Drawing.Size (9' 11);  
Magic Number,Alsing.Windows.Forms,InfoTipForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\InfoTip\InfoTipForm.cs,InitializeComponent,The following statement contains a magic number: this.btnNext.Size = new System.Drawing.Size (9' 11);  
Magic Number,Alsing.Windows.Forms,InfoTipForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\InfoTip\InfoTipForm.cs,InitializeComponent,The following statement contains a magic number: this.btnPrev.Location = new System.Drawing.Point (4' 6);  
Magic Number,Alsing.Windows.Forms,InfoTipForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\InfoTip\InfoTipForm.cs,InitializeComponent,The following statement contains a magic number: this.btnPrev.Location = new System.Drawing.Point (4' 6);  
Magic Number,Alsing.Windows.Forms,InfoTipForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\InfoTip\InfoTipForm.cs,InitializeComponent,The following statement contains a magic number: this.btnPrev.Size = new System.Drawing.Size (9' 11);  
Magic Number,Alsing.Windows.Forms,InfoTipForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\InfoTip\InfoTipForm.cs,InitializeComponent,The following statement contains a magic number: this.btnPrev.Size = new System.Drawing.Size (9' 11);  
Magic Number,Alsing.Windows.Forms,InfoTipForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\InfoTip\InfoTipForm.cs,InitializeComponent,The following statement contains a magic number: this.lblIndex.Location = new System.Drawing.Point (4' 4);  
Magic Number,Alsing.Windows.Forms,InfoTipForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\InfoTip\InfoTipForm.cs,InitializeComponent,The following statement contains a magic number: this.lblIndex.Location = new System.Drawing.Point (4' 4);  
Magic Number,Alsing.Windows.Forms,InfoTipForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\InfoTip\InfoTipForm.cs,InitializeComponent,The following statement contains a magic number: this.lblIndex.Size = new System.Drawing.Size (72' 23);  
Magic Number,Alsing.Windows.Forms,InfoTipForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\InfoTip\InfoTipForm.cs,InitializeComponent,The following statement contains a magic number: this.lblIndex.Size = new System.Drawing.Size (72' 23);  
Magic Number,Alsing.Windows.Forms,InfoTipForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\InfoTip\InfoTipForm.cs,InitializeComponent,The following statement contains a magic number: this.lblIndex.TabIndex = 2;  
Magic Number,Alsing.Windows.Forms,InfoTipForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\InfoTip\InfoTipForm.cs,InitializeComponent,The following statement contains a magic number: this.panel2.DockPadding.All = 4;  
Magic Number,Alsing.Windows.Forms,InfoTipForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\InfoTip\InfoTipForm.cs,InitializeComponent,The following statement contains a magic number: this.panel2.Location = new System.Drawing.Point (112' 0);  
Magic Number,Alsing.Windows.Forms,InfoTipForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\InfoTip\InfoTipForm.cs,InitializeComponent,The following statement contains a magic number: this.panel2.Size = new System.Drawing.Size (126' 35);  
Magic Number,Alsing.Windows.Forms,InfoTipForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\InfoTip\InfoTipForm.cs,InitializeComponent,The following statement contains a magic number: this.panel2.Size = new System.Drawing.Size (126' 35);  
Magic Number,Alsing.Windows.Forms,InfoTipForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\InfoTip\InfoTipForm.cs,InitializeComponent,The following statement contains a magic number: this.InfoText.Location = new System.Drawing.Point (2' 4);  
Magic Number,Alsing.Windows.Forms,InfoTipForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\InfoTip\InfoTipForm.cs,InitializeComponent,The following statement contains a magic number: this.InfoText.Location = new System.Drawing.Point (2' 4);  
Magic Number,Alsing.Windows.Forms,InfoTipForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\InfoTip\InfoTipForm.cs,InitializeComponent,The following statement contains a magic number: this.InfoText.Size = new System.Drawing.Size (59' 13);  
Magic Number,Alsing.Windows.Forms,InfoTipForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\InfoTip\InfoTipForm.cs,InitializeComponent,The following statement contains a magic number: this.InfoText.Size = new System.Drawing.Size (59' 13);  
Magic Number,Alsing.Windows.Forms,InfoTipForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\InfoTip\InfoTipForm.cs,InitializeComponent,The following statement contains a magic number: this.pnlImage.Size = new System.Drawing.Size (32' 35);  
Magic Number,Alsing.Windows.Forms,InfoTipForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\InfoTip\InfoTipForm.cs,InitializeComponent,The following statement contains a magic number: this.pnlImage.Size = new System.Drawing.Size (32' 35);  
Magic Number,Alsing.Windows.Forms,InfoTipForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\InfoTip\InfoTipForm.cs,InitializeComponent,The following statement contains a magic number: this.pnlImage.TabIndex = 2;  
Magic Number,Alsing.Windows.Forms,InfoTipForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\InfoTip\InfoTipForm.cs,InitializeComponent,The following statement contains a magic number: this.picIcon.Location = new System.Drawing.Point (5' 3);  
Magic Number,Alsing.Windows.Forms,InfoTipForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\InfoTip\InfoTipForm.cs,InitializeComponent,The following statement contains a magic number: this.picIcon.Location = new System.Drawing.Point (5' 3);  
Magic Number,Alsing.Windows.Forms,InfoTipForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\InfoTip\InfoTipForm.cs,InitializeComponent,The following statement contains a magic number: this.picIcon.Size = new System.Drawing.Size (19' 20);  
Magic Number,Alsing.Windows.Forms,InfoTipForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\InfoTip\InfoTipForm.cs,InitializeComponent,The following statement contains a magic number: this.picIcon.Size = new System.Drawing.Size (19' 20);  
Magic Number,Alsing.Windows.Forms,InfoTipForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\InfoTip\InfoTipForm.cs,InitializeComponent,The following statement contains a magic number: this.panel1.Size = new System.Drawing.Size (240' 37);  
Magic Number,Alsing.Windows.Forms,InfoTipForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\InfoTip\InfoTipForm.cs,InitializeComponent,The following statement contains a magic number: this.panel1.Size = new System.Drawing.Size (240' 37);  
Magic Number,Alsing.Windows.Forms,InfoTipForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\InfoTip\InfoTipForm.cs,InitializeComponent,The following statement contains a magic number: this.panel1.TabIndex = 3;  
Magic Number,Alsing.Windows.Forms,InfoTipForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\InfoTip\InfoTipForm.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleBaseSize = new System.Drawing.Size (5' 13);  
Magic Number,Alsing.Windows.Forms,InfoTipForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\InfoTip\InfoTipForm.cs,InitializeComponent,The following statement contains a magic number: this.AutoScaleBaseSize = new System.Drawing.Size (5' 13);  
Magic Number,Alsing.Windows.Forms,InfoTipForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\InfoTip\InfoTipForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size (240' 37);  
Magic Number,Alsing.Windows.Forms,InfoTipForm,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\InfoTip\InfoTipForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size (240' 37);  
Magic Number,Alsing.Windows.Forms,SyntaxBoxControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\Syntaxbox\SyntaxBoxControl.cs,InitializeComponent,The following statement contains a magic number: _GutterIcons.ImageSize = new Size (17' 17);  
Magic Number,Alsing.Windows.Forms,SyntaxBoxControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\Syntaxbox\SyntaxBoxControl.cs,InitializeComponent,The following statement contains a magic number: _GutterIcons.ImageSize = new Size (17' 17);  
Magic Number,Alsing.Windows.Forms,SyntaxBoxControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\Syntaxbox\SyntaxBoxControl.cs,InitializeComponent,The following statement contains a magic number: _AutoListIcons.ImageSize = new Size (16' 16);  
Magic Number,Alsing.Windows.Forms,SyntaxBoxControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\Syntaxbox\SyntaxBoxControl.cs,InitializeComponent,The following statement contains a magic number: _AutoListIcons.ImageSize = new Size (16' 16);  
Magic Number,Alsing.Design,CollectionEditorGui,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Design\CollectionEditorGui.cs,lstMembers_DrawItem,The following statement contains a magic number: try {  	if (e.Index == -1)  		return;  	int c = lstMembers.Items.Count;  	SizeF s = e.Graphics.MeasureString (c.ToString ()' lstMembers.Font);  	var maxwidth = (int)s.Width;  	if (maxwidth < 16 + 2)  		maxwidth = 16 + 2;  	var r = new Rectangle (0' e.Bounds.Top' maxwidth' lstMembers.ItemHeight);  	bool SupportPaint = Editor.GetPaintValueSupported ();  	int w = SupportPaint ? 20 : 0;  	var rcItem = new Rectangle (r.Right + w' r.Top' e.Bounds.Width - r.Right - w' lstMembers.ItemHeight);  	ControlPaint.DrawBorder3D (e.Graphics' r' Border3DStyle.Raised' Border3DSide.All);  	StringFormat sf = StringFormat.GenericDefault;  	sf.Alignment = StringAlignment.Far;  	r.Inflate (-1' -1);  	e.Graphics.DrawString (e.Index.ToString ()' lstMembers.Font' Brushes.Black' r' sf);  	bool Selected = ((int)e.State & (int)DrawItemState.Selected) != 0;  	using (SolidBrush bg = GetBgBrush (Selected))  		using (SolidBrush fg = GetFgBrush (Selected)) {  			e.Graphics.FillRectangle (bg' rcItem);  			if (Selected && e.Index != -1) {  				if (((int)e.State & (int)DrawItemState.Focus) != 0) {  					ControlPaint.DrawFocusRectangle (e.Graphics' rcItem);  				}  			}  			if (e.Index >= 0) {  				object o = lstMembers.Items [e.Index];  				string name = GetDisplayText (o);  				e.Graphics.DrawString (name' lstMembers.Font' fg' rcItem);  			}  		}  }  catch {  }  
Magic Number,Alsing.Design,CollectionEditorGui,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Design\CollectionEditorGui.cs,lstMembers_DrawItem,The following statement contains a magic number: try {  	if (e.Index == -1)  		return;  	int c = lstMembers.Items.Count;  	SizeF s = e.Graphics.MeasureString (c.ToString ()' lstMembers.Font);  	var maxwidth = (int)s.Width;  	if (maxwidth < 16 + 2)  		maxwidth = 16 + 2;  	var r = new Rectangle (0' e.Bounds.Top' maxwidth' lstMembers.ItemHeight);  	bool SupportPaint = Editor.GetPaintValueSupported ();  	int w = SupportPaint ? 20 : 0;  	var rcItem = new Rectangle (r.Right + w' r.Top' e.Bounds.Width - r.Right - w' lstMembers.ItemHeight);  	ControlPaint.DrawBorder3D (e.Graphics' r' Border3DStyle.Raised' Border3DSide.All);  	StringFormat sf = StringFormat.GenericDefault;  	sf.Alignment = StringAlignment.Far;  	r.Inflate (-1' -1);  	e.Graphics.DrawString (e.Index.ToString ()' lstMembers.Font' Brushes.Black' r' sf);  	bool Selected = ((int)e.State & (int)DrawItemState.Selected) != 0;  	using (SolidBrush bg = GetBgBrush (Selected))  		using (SolidBrush fg = GetFgBrush (Selected)) {  			e.Graphics.FillRectangle (bg' rcItem);  			if (Selected && e.Index != -1) {  				if (((int)e.State & (int)DrawItemState.Focus) != 0) {  					ControlPaint.DrawFocusRectangle (e.Graphics' rcItem);  				}  			}  			if (e.Index >= 0) {  				object o = lstMembers.Items [e.Index];  				string name = GetDisplayText (o);  				e.Graphics.DrawString (name' lstMembers.Font' fg' rcItem);  			}  		}  }  catch {  }  
Magic Number,Alsing.Design,CollectionEditorGui,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Design\CollectionEditorGui.cs,lstMembers_DrawItem,The following statement contains a magic number: try {  	if (e.Index == -1)  		return;  	int c = lstMembers.Items.Count;  	SizeF s = e.Graphics.MeasureString (c.ToString ()' lstMembers.Font);  	var maxwidth = (int)s.Width;  	if (maxwidth < 16 + 2)  		maxwidth = 16 + 2;  	var r = new Rectangle (0' e.Bounds.Top' maxwidth' lstMembers.ItemHeight);  	bool SupportPaint = Editor.GetPaintValueSupported ();  	int w = SupportPaint ? 20 : 0;  	var rcItem = new Rectangle (r.Right + w' r.Top' e.Bounds.Width - r.Right - w' lstMembers.ItemHeight);  	ControlPaint.DrawBorder3D (e.Graphics' r' Border3DStyle.Raised' Border3DSide.All);  	StringFormat sf = StringFormat.GenericDefault;  	sf.Alignment = StringAlignment.Far;  	r.Inflate (-1' -1);  	e.Graphics.DrawString (e.Index.ToString ()' lstMembers.Font' Brushes.Black' r' sf);  	bool Selected = ((int)e.State & (int)DrawItemState.Selected) != 0;  	using (SolidBrush bg = GetBgBrush (Selected))  		using (SolidBrush fg = GetFgBrush (Selected)) {  			e.Graphics.FillRectangle (bg' rcItem);  			if (Selected && e.Index != -1) {  				if (((int)e.State & (int)DrawItemState.Focus) != 0) {  					ControlPaint.DrawFocusRectangle (e.Graphics' rcItem);  				}  			}  			if (e.Index >= 0) {  				object o = lstMembers.Items [e.Index];  				string name = GetDisplayText (o);  				e.Graphics.DrawString (name' lstMembers.Font' fg' rcItem);  			}  		}  }  catch {  }  
Magic Number,Alsing.Design,CollectionEditorGui,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Design\CollectionEditorGui.cs,lstMembers_DrawItem,The following statement contains a magic number: try {  	if (e.Index == -1)  		return;  	int c = lstMembers.Items.Count;  	SizeF s = e.Graphics.MeasureString (c.ToString ()' lstMembers.Font);  	var maxwidth = (int)s.Width;  	if (maxwidth < 16 + 2)  		maxwidth = 16 + 2;  	var r = new Rectangle (0' e.Bounds.Top' maxwidth' lstMembers.ItemHeight);  	bool SupportPaint = Editor.GetPaintValueSupported ();  	int w = SupportPaint ? 20 : 0;  	var rcItem = new Rectangle (r.Right + w' r.Top' e.Bounds.Width - r.Right - w' lstMembers.ItemHeight);  	ControlPaint.DrawBorder3D (e.Graphics' r' Border3DStyle.Raised' Border3DSide.All);  	StringFormat sf = StringFormat.GenericDefault;  	sf.Alignment = StringAlignment.Far;  	r.Inflate (-1' -1);  	e.Graphics.DrawString (e.Index.ToString ()' lstMembers.Font' Brushes.Black' r' sf);  	bool Selected = ((int)e.State & (int)DrawItemState.Selected) != 0;  	using (SolidBrush bg = GetBgBrush (Selected))  		using (SolidBrush fg = GetFgBrush (Selected)) {  			e.Graphics.FillRectangle (bg' rcItem);  			if (Selected && e.Index != -1) {  				if (((int)e.State & (int)DrawItemState.Focus) != 0) {  					ControlPaint.DrawFocusRectangle (e.Graphics' rcItem);  				}  			}  			if (e.Index >= 0) {  				object o = lstMembers.Items [e.Index];  				string name = GetDisplayText (o);  				e.Graphics.DrawString (name' lstMembers.Font' fg' rcItem);  			}  		}  }  catch {  }  
Magic Number,Alsing.Design,CollectionEditorGui,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Design\CollectionEditorGui.cs,lstMembers_DrawItem,The following statement contains a magic number: try {  	if (e.Index == -1)  		return;  	int c = lstMembers.Items.Count;  	SizeF s = e.Graphics.MeasureString (c.ToString ()' lstMembers.Font);  	var maxwidth = (int)s.Width;  	if (maxwidth < 16 + 2)  		maxwidth = 16 + 2;  	var r = new Rectangle (0' e.Bounds.Top' maxwidth' lstMembers.ItemHeight);  	bool SupportPaint = Editor.GetPaintValueSupported ();  	int w = SupportPaint ? 20 : 0;  	var rcItem = new Rectangle (r.Right + w' r.Top' e.Bounds.Width - r.Right - w' lstMembers.ItemHeight);  	ControlPaint.DrawBorder3D (e.Graphics' r' Border3DStyle.Raised' Border3DSide.All);  	StringFormat sf = StringFormat.GenericDefault;  	sf.Alignment = StringAlignment.Far;  	r.Inflate (-1' -1);  	e.Graphics.DrawString (e.Index.ToString ()' lstMembers.Font' Brushes.Black' r' sf);  	bool Selected = ((int)e.State & (int)DrawItemState.Selected) != 0;  	using (SolidBrush bg = GetBgBrush (Selected))  		using (SolidBrush fg = GetFgBrush (Selected)) {  			e.Graphics.FillRectangle (bg' rcItem);  			if (Selected && e.Index != -1) {  				if (((int)e.State & (int)DrawItemState.Focus) != 0) {  					ControlPaint.DrawFocusRectangle (e.Graphics' rcItem);  				}  			}  			if (e.Index >= 0) {  				object o = lstMembers.Items [e.Index];  				string name = GetDisplayText (o);  				e.Graphics.DrawString (name' lstMembers.Font' fg' rcItem);  			}  		}  }  catch {  }  
Magic Number,Alsing.Design,CollectionEditorGui,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Design\CollectionEditorGui.cs,lstMembers_DrawItem,The following statement contains a magic number: if (maxwidth < 16 + 2)  	maxwidth = 16 + 2;  
Magic Number,Alsing.Design,CollectionEditorGui,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Design\CollectionEditorGui.cs,lstMembers_DrawItem,The following statement contains a magic number: if (maxwidth < 16 + 2)  	maxwidth = 16 + 2;  
Magic Number,Alsing.Design,CollectionEditorGui,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Design\CollectionEditorGui.cs,lstMembers_DrawItem,The following statement contains a magic number: if (maxwidth < 16 + 2)  	maxwidth = 16 + 2;  
Magic Number,Alsing.Design,CollectionEditorGui,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Design\CollectionEditorGui.cs,lstMembers_DrawItem,The following statement contains a magic number: if (maxwidth < 16 + 2)  	maxwidth = 16 + 2;  
Magic Number,Alsing.Design,CollectionEditorGui,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Design\CollectionEditorGui.cs,lstMembers_DrawItem,The following statement contains a magic number: maxwidth = 16 + 2;  
Magic Number,Alsing.Design,CollectionEditorGui,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Design\CollectionEditorGui.cs,lstMembers_DrawItem,The following statement contains a magic number: maxwidth = 16 + 2;  
Magic Number,Alsing.Design,CollectionEditorGui,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Design\CollectionEditorGui.cs,InitializeComponent,The following statement contains a magic number: this.btnCancel.Location = new System.Drawing.Point (456' 312);  
Magic Number,Alsing.Design,CollectionEditorGui,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Design\CollectionEditorGui.cs,InitializeComponent,The following statement contains a magic number: this.btnCancel.Location = new System.Drawing.Point (456' 312);  
Magic Number,Alsing.Design,CollectionEditorGui,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Design\CollectionEditorGui.cs,InitializeComponent,The following statement contains a magic number: this.btnOK.Location = new System.Drawing.Point (376' 312);  
Magic Number,Alsing.Design,CollectionEditorGui,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Design\CollectionEditorGui.cs,InitializeComponent,The following statement contains a magic number: this.btnOK.Location = new System.Drawing.Point (376' 312);  
Magic Number,Alsing.Design,CollectionEditorGui,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Design\CollectionEditorGui.cs,InitializeComponent,The following statement contains a magic number: this.groupBox1.Location = new System.Drawing.Point (8' 296);  
Magic Number,Alsing.Design,CollectionEditorGui,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Design\CollectionEditorGui.cs,InitializeComponent,The following statement contains a magic number: this.groupBox1.Location = new System.Drawing.Point (8' 296);  
Magic Number,Alsing.Design,CollectionEditorGui,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Design\CollectionEditorGui.cs,InitializeComponent,The following statement contains a magic number: this.groupBox1.Size = new System.Drawing.Size (520' 8);  
Magic Number,Alsing.Design,CollectionEditorGui,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Design\CollectionEditorGui.cs,InitializeComponent,The following statement contains a magic number: this.groupBox1.Size = new System.Drawing.Size (520' 8);  
Magic Number,Alsing.Design,CollectionEditorGui,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Design\CollectionEditorGui.cs,InitializeComponent,The following statement contains a magic number: this.groupBox1.TabIndex = 2;  
Magic Number,Alsing.Design,CollectionEditorGui,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Design\CollectionEditorGui.cs,InitializeComponent,The following statement contains a magic number: this.pygProperties.Location = new System.Drawing.Point (240' 16);  
Magic Number,Alsing.Design,CollectionEditorGui,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Design\CollectionEditorGui.cs,InitializeComponent,The following statement contains a magic number: this.pygProperties.Location = new System.Drawing.Point (240' 16);  
Magic Number,Alsing.Design,CollectionEditorGui,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Design\CollectionEditorGui.cs,InitializeComponent,The following statement contains a magic number: this.pygProperties.Size = new System.Drawing.Size (280' 280);  
Magic Number,Alsing.Design,CollectionEditorGui,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Design\CollectionEditorGui.cs,InitializeComponent,The following statement contains a magic number: this.pygProperties.Size = new System.Drawing.Size (280' 280);  
Magic Number,Alsing.Design,CollectionEditorGui,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Design\CollectionEditorGui.cs,InitializeComponent,The following statement contains a magic number: this.pygProperties.TabIndex = 3;  
Magic Number,Alsing.Design,CollectionEditorGui,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Design\CollectionEditorGui.cs,InitializeComponent,The following statement contains a magic number: this.lstMembers.ItemHeight = 16;  
Magic Number,Alsing.Design,CollectionEditorGui,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Design\CollectionEditorGui.cs,InitializeComponent,The following statement contains a magic number: this.lstMembers.Location = new System.Drawing.Point (0' 16);  
Magic Number,Alsing.Design,CollectionEditorGui,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Design\CollectionEditorGui.cs,InitializeComponent,The following statement contains a magic number: this.lstMembers.Size = new System.Drawing.Size (208' 240);  
Magic Number,Alsing.Design,CollectionEditorGui,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Design\CollectionEditorGui.cs,InitializeComponent,The following statement contains a magic number: this.lstMembers.Size = new System.Drawing.Size (208' 240);  
Magic Number,Alsing.Design,CollectionEditorGui,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Design\CollectionEditorGui.cs,InitializeComponent,The following statement contains a magic number: this.lstMembers.TabIndex = 4;  
Magic Number,Alsing.Design,CollectionEditorGui,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Design\CollectionEditorGui.cs,InitializeComponent,The following statement contains a magic number: this.btnUp.Location = new System.Drawing.Point (212' 16);  
Magic Number,Alsing.Design,CollectionEditorGui,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Design\CollectionEditorGui.cs,InitializeComponent,The following statement contains a magic number: this.btnUp.Location = new System.Drawing.Point (212' 16);  
Magic Number,Alsing.Design,CollectionEditorGui,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Design\CollectionEditorGui.cs,InitializeComponent,The following statement contains a magic number: this.btnUp.Size = new System.Drawing.Size (22' 28);  
Magic Number,Alsing.Design,CollectionEditorGui,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Design\CollectionEditorGui.cs,InitializeComponent,The following statement contains a magic number: this.btnUp.Size = new System.Drawing.Size (22' 28);  
Magic Number,Alsing.Design,CollectionEditorGui,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Design\CollectionEditorGui.cs,InitializeComponent,The following statement contains a magic number: this.btnUp.TabIndex = 5;  
Magic Number,Alsing.Design,CollectionEditorGui,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Design\CollectionEditorGui.cs,InitializeComponent,The following statement contains a magic number: this.btnDown.Location = new System.Drawing.Point (212' 48);  
Magic Number,Alsing.Design,CollectionEditorGui,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Design\CollectionEditorGui.cs,InitializeComponent,The following statement contains a magic number: this.btnDown.Location = new System.Drawing.Point (212' 48);  
Magic Number,Alsing.Design,CollectionEditorGui,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Design\CollectionEditorGui.cs,InitializeComponent,The following statement contains a magic number: this.btnDown.Size = new System.Drawing.Size (22' 28);  
Magic Number,Alsing.Design,CollectionEditorGui,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Design\CollectionEditorGui.cs,InitializeComponent,The following statement contains a magic number: this.btnDown.Size = new System.Drawing.Size (22' 28);  
Magic Number,Alsing.Design,CollectionEditorGui,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Design\CollectionEditorGui.cs,InitializeComponent,The following statement contains a magic number: this.btnDown.TabIndex = 6;  
Magic Number,Alsing.Design,CollectionEditorGui,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Design\CollectionEditorGui.cs,InitializeComponent,The following statement contains a magic number: this.pnlMembers.Size = new System.Drawing.Size (240' 296);  
Magic Number,Alsing.Design,CollectionEditorGui,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Design\CollectionEditorGui.cs,InitializeComponent,The following statement contains a magic number: this.pnlMembers.Size = new System.Drawing.Size (240' 296);  
Magic Number,Alsing.Design,CollectionEditorGui,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Design\CollectionEditorGui.cs,InitializeComponent,The following statement contains a magic number: this.pnlMembers.TabIndex = 7;  
Magic Number,Alsing.Design,CollectionEditorGui,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Design\CollectionEditorGui.cs,InitializeComponent,The following statement contains a magic number: this.btnRemove.Location = new System.Drawing.Point (136' 264);  
Magic Number,Alsing.Design,CollectionEditorGui,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Design\CollectionEditorGui.cs,InitializeComponent,The following statement contains a magic number: this.btnRemove.Location = new System.Drawing.Point (136' 264);  
Magic Number,Alsing.Design,CollectionEditorGui,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Design\CollectionEditorGui.cs,InitializeComponent,The following statement contains a magic number: this.btnRemove.Size = new System.Drawing.Size (72' 24);  
Magic Number,Alsing.Design,CollectionEditorGui,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Design\CollectionEditorGui.cs,InitializeComponent,The following statement contains a magic number: this.btnRemove.Size = new System.Drawing.Size (72' 24);  
Magic Number,Alsing.Design,CollectionEditorGui,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Design\CollectionEditorGui.cs,InitializeComponent,The following statement contains a magic number: this.btnRemove.TabIndex = 11;  
Magic Number,Alsing.Design,CollectionEditorGui,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Design\CollectionEditorGui.cs,InitializeComponent,The following statement contains a magic number: this.lblMembers.Size = new System.Drawing.Size (240' 16);  
Magic Number,Alsing.Design,CollectionEditorGui,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Design\CollectionEditorGui.cs,InitializeComponent,The following statement contains a magic number: this.lblMembers.Size = new System.Drawing.Size (240' 16);  
Magic Number,Alsing.Design,CollectionEditorGui,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Design\CollectionEditorGui.cs,InitializeComponent,The following statement contains a magic number: this.lblMembers.TabIndex = 10;  
Magic Number,Alsing.Design,CollectionEditorGui,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Design\CollectionEditorGui.cs,InitializeComponent,The following statement contains a magic number: this.btnDropdown.Location = new System.Drawing.Point (95' 264);  
Magic Number,Alsing.Design,CollectionEditorGui,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Design\CollectionEditorGui.cs,InitializeComponent,The following statement contains a magic number: this.btnDropdown.Location = new System.Drawing.Point (95' 264);  
Magic Number,Alsing.Design,CollectionEditorGui,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Design\CollectionEditorGui.cs,InitializeComponent,The following statement contains a magic number: this.btnDropdown.Size = new System.Drawing.Size (24' 24);  
Magic Number,Alsing.Design,CollectionEditorGui,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Design\CollectionEditorGui.cs,InitializeComponent,The following statement contains a magic number: this.btnDropdown.Size = new System.Drawing.Size (24' 24);  
Magic Number,Alsing.Design,CollectionEditorGui,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Design\CollectionEditorGui.cs,InitializeComponent,The following statement contains a magic number: this.btnDropdown.TabIndex = 9;  
Magic Number,Alsing.Design,CollectionEditorGui,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Design\CollectionEditorGui.cs,InitializeComponent,The following statement contains a magic number: this.btnAdd.Location = new System.Drawing.Point (8' 264);  
Magic Number,Alsing.Design,CollectionEditorGui,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Design\CollectionEditorGui.cs,InitializeComponent,The following statement contains a magic number: this.btnAdd.Location = new System.Drawing.Point (8' 264);  
Magic Number,Alsing.Design,CollectionEditorGui,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Design\CollectionEditorGui.cs,InitializeComponent,The following statement contains a magic number: this.btnAdd.Size = new System.Drawing.Size (88' 24);  
Magic Number,Alsing.Design,CollectionEditorGui,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Design\CollectionEditorGui.cs,InitializeComponent,The following statement contains a magic number: this.btnAdd.Size = new System.Drawing.Size (88' 24);  
Magic Number,Alsing.Design,CollectionEditorGui,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Design\CollectionEditorGui.cs,InitializeComponent,The following statement contains a magic number: this.btnAdd.TabIndex = 12;  
Magic Number,Alsing.Design,CollectionEditorGui,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Design\CollectionEditorGui.cs,InitializeComponent,The following statement contains a magic number: this.pnlMain.Location = new System.Drawing.Point (8' 0);  
Magic Number,Alsing.Design,CollectionEditorGui,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Design\CollectionEditorGui.cs,InitializeComponent,The following statement contains a magic number: this.pnlMain.Size = new System.Drawing.Size (520' 296);  
Magic Number,Alsing.Design,CollectionEditorGui,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Design\CollectionEditorGui.cs,InitializeComponent,The following statement contains a magic number: this.pnlMain.Size = new System.Drawing.Size (520' 296);  
Magic Number,Alsing.Design,CollectionEditorGui,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Design\CollectionEditorGui.cs,InitializeComponent,The following statement contains a magic number: this.pnlMain.TabIndex = 8;  
Magic Number,Alsing.Design,CollectionEditorGui,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Design\CollectionEditorGui.cs,InitializeComponent,The following statement contains a magic number: this.lblProperties.Location = new System.Drawing.Point (240' 0);  
Magic Number,Alsing.Design,CollectionEditorGui,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Design\CollectionEditorGui.cs,InitializeComponent,The following statement contains a magic number: this.lblProperties.Size = new System.Drawing.Size (280' 16);  
Magic Number,Alsing.Design,CollectionEditorGui,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Design\CollectionEditorGui.cs,InitializeComponent,The following statement contains a magic number: this.lblProperties.Size = new System.Drawing.Size (280' 16);  
Magic Number,Alsing.Design,CollectionEditorGui,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Design\CollectionEditorGui.cs,InitializeComponent,The following statement contains a magic number: this.lblProperties.TabIndex = 9;  
Magic Number,Alsing.Design,CollectionEditorGui,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Design\CollectionEditorGui.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size (536' 352);  
Magic Number,Alsing.Design,CollectionEditorGui,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Design\CollectionEditorGui.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size (536' 352);  
Magic Number,Alsing.SourceCode.SyntaxDocumentParsers,DefaultParser,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Document\Parser\DefaultParser.cs,GetNextWord,The following statement contains a magic number: for (int i = StartPos; i < Text.Length; i++) {  	//bailout if we found a complex pattern before this char pos  	if (i > complexword.Position && complexword.HasContent)  		break;  	#region 3+ char pattern  	if (i <= Text.Length - 3) {  		string key = Text.Substring (i' 3).ToLowerInvariant ();  		var patterns2 = (PatternCollection)spanDefinition.LookupTable [key];  		//ok ' there are patterns that start with this char  		if (patterns2 != null) {  			foreach (Pattern pattern in patterns2) {  				int len = pattern.StringPattern.Length;  				if (i + len > Text.Length)  					continue;  				char lastpatternchar = char.ToLower (pattern.StringPattern [len - 1]);  				char lasttextchar = char.ToLower (Text [i + len - 1]);  				#region Case Insensitive  				if (lastpatternchar == lasttextchar) {  					if (!pattern.IsKeyword || (pattern.IsKeyword && pattern.HasSeparators (Text' i))) {  						if (!pattern.Parent.CaseSensitive) {  							string s = Text.Substring (i' len).ToLowerInvariant ();  							if (s == pattern.StringPattern.ToLowerInvariant ()) {  								simpleword.HasContent = true;  								simpleword.ParentList = pattern.Parent;  								simpleword.Pattern = pattern;  								simpleword.Position = i;  								simpleword.Token = pattern.Parent.NormalizeCase ? pattern.StringPattern : Text.Substring (i' len);  								break;  							}  						}  						else {  							string s = Text.Substring (i' len);  							if (s == pattern.StringPattern) {  								simpleword.HasContent = true;  								simpleword.ParentList = pattern.Parent;  								simpleword.Pattern = pattern;  								simpleword.Position = i;  								simpleword.Token = pattern.StringPattern;  								break;  							}  						}  					}  				}  			}  			#endregion  		}  	}  	#endregion  	if (simpleword.HasContent)  		break;  	#region single char pattern  	char c = Text [i];  	var patterns = (PatternCollection)spanDefinition.LookupTable [c];  	if (patterns != null) {  		//ok ' there are patterns that start with this char  		foreach (Pattern pattern in patterns) {  			int len = pattern.StringPattern.Length;  			if (i + len > Text.Length)  				continue;  			char lastpatternchar = pattern.StringPattern [len - 1];  			char lasttextchar = Text [i + len - 1];  			if (!pattern.Parent.CaseSensitive) {  				#region Case Insensitive  				if (char.ToLower (lastpatternchar) == char.ToLower (lasttextchar)) {  					if (!pattern.IsKeyword || (pattern.IsKeyword && pattern.HasSeparators (Text' i))) {  						string s = Text.Substring (i' len).ToLowerInvariant ();  						if (s == pattern.StringPattern.ToLowerInvariant ()) {  							simpleword.HasContent = true;  							simpleword.ParentList = pattern.Parent;  							simpleword.Pattern = pattern;  							simpleword.Position = i;  							simpleword.Token = pattern.Parent.NormalizeCase ? pattern.StringPattern : Text.Substring (i' len);  							break;  						}  					}  				}  				#endregion  			}  			else {  				#region Case Sensitive  				if (lastpatternchar == lasttextchar) {  					if (!pattern.IsKeyword || (pattern.IsKeyword && pattern.HasSeparators (Text' i))) {  						string s = Text.Substring (i' len);  						if (s == pattern.StringPattern) {  							simpleword.HasContent = true;  							simpleword.ParentList = pattern.Parent;  							simpleword.Pattern = pattern;  							simpleword.Position = i;  							simpleword.Token = pattern.StringPattern;  							break;  						}  					}  				}  				#endregion  			}  		}  		if (simpleword.HasContent)  			break;  	}  	#endregion  }  
Magic Number,Alsing.SourceCode.SyntaxDocumentParsers,DefaultParser,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Document\Parser\DefaultParser.cs,GetNextWord,The following statement contains a magic number: for (int i = StartPos; i < Text.Length; i++) {  	//bailout if we found a complex pattern before this char pos  	if (i > complexword.Position && complexword.HasContent)  		break;  	#region 3+ char pattern  	if (i <= Text.Length - 3) {  		string key = Text.Substring (i' 3).ToLowerInvariant ();  		var patterns2 = (PatternCollection)spanDefinition.LookupTable [key];  		//ok ' there are patterns that start with this char  		if (patterns2 != null) {  			foreach (Pattern pattern in patterns2) {  				int len = pattern.StringPattern.Length;  				if (i + len > Text.Length)  					continue;  				char lastpatternchar = char.ToLower (pattern.StringPattern [len - 1]);  				char lasttextchar = char.ToLower (Text [i + len - 1]);  				#region Case Insensitive  				if (lastpatternchar == lasttextchar) {  					if (!pattern.IsKeyword || (pattern.IsKeyword && pattern.HasSeparators (Text' i))) {  						if (!pattern.Parent.CaseSensitive) {  							string s = Text.Substring (i' len).ToLowerInvariant ();  							if (s == pattern.StringPattern.ToLowerInvariant ()) {  								simpleword.HasContent = true;  								simpleword.ParentList = pattern.Parent;  								simpleword.Pattern = pattern;  								simpleword.Position = i;  								simpleword.Token = pattern.Parent.NormalizeCase ? pattern.StringPattern : Text.Substring (i' len);  								break;  							}  						}  						else {  							string s = Text.Substring (i' len);  							if (s == pattern.StringPattern) {  								simpleword.HasContent = true;  								simpleword.ParentList = pattern.Parent;  								simpleword.Pattern = pattern;  								simpleword.Position = i;  								simpleword.Token = pattern.StringPattern;  								break;  							}  						}  					}  				}  			}  			#endregion  		}  	}  	#endregion  	if (simpleword.HasContent)  		break;  	#region single char pattern  	char c = Text [i];  	var patterns = (PatternCollection)spanDefinition.LookupTable [c];  	if (patterns != null) {  		//ok ' there are patterns that start with this char  		foreach (Pattern pattern in patterns) {  			int len = pattern.StringPattern.Length;  			if (i + len > Text.Length)  				continue;  			char lastpatternchar = pattern.StringPattern [len - 1];  			char lasttextchar = Text [i + len - 1];  			if (!pattern.Parent.CaseSensitive) {  				#region Case Insensitive  				if (char.ToLower (lastpatternchar) == char.ToLower (lasttextchar)) {  					if (!pattern.IsKeyword || (pattern.IsKeyword && pattern.HasSeparators (Text' i))) {  						string s = Text.Substring (i' len).ToLowerInvariant ();  						if (s == pattern.StringPattern.ToLowerInvariant ()) {  							simpleword.HasContent = true;  							simpleword.ParentList = pattern.Parent;  							simpleword.Pattern = pattern;  							simpleword.Position = i;  							simpleword.Token = pattern.Parent.NormalizeCase ? pattern.StringPattern : Text.Substring (i' len);  							break;  						}  					}  				}  				#endregion  			}  			else {  				#region Case Sensitive  				if (lastpatternchar == lasttextchar) {  					if (!pattern.IsKeyword || (pattern.IsKeyword && pattern.HasSeparators (Text' i))) {  						string s = Text.Substring (i' len);  						if (s == pattern.StringPattern) {  							simpleword.HasContent = true;  							simpleword.ParentList = pattern.Parent;  							simpleword.Pattern = pattern;  							simpleword.Position = i;  							simpleword.Token = pattern.StringPattern;  							break;  						}  					}  				}  				#endregion  			}  		}  		if (simpleword.HasContent)  			break;  	}  	#endregion  }  
Magic Number,Alsing.SourceCode.SyntaxDocumentParsers,DefaultParser,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Document\Parser\DefaultParser.cs,GetNextWord,The following statement contains a magic number: if (i <= Text.Length - 3) {  	string key = Text.Substring (i' 3).ToLowerInvariant ();  	var patterns2 = (PatternCollection)spanDefinition.LookupTable [key];  	//ok ' there are patterns that start with this char  	if (patterns2 != null) {  		foreach (Pattern pattern in patterns2) {  			int len = pattern.StringPattern.Length;  			if (i + len > Text.Length)  				continue;  			char lastpatternchar = char.ToLower (pattern.StringPattern [len - 1]);  			char lasttextchar = char.ToLower (Text [i + len - 1]);  			#region Case Insensitive  			if (lastpatternchar == lasttextchar) {  				if (!pattern.IsKeyword || (pattern.IsKeyword && pattern.HasSeparators (Text' i))) {  					if (!pattern.Parent.CaseSensitive) {  						string s = Text.Substring (i' len).ToLowerInvariant ();  						if (s == pattern.StringPattern.ToLowerInvariant ()) {  							simpleword.HasContent = true;  							simpleword.ParentList = pattern.Parent;  							simpleword.Pattern = pattern;  							simpleword.Position = i;  							simpleword.Token = pattern.Parent.NormalizeCase ? pattern.StringPattern : Text.Substring (i' len);  							break;  						}  					}  					else {  						string s = Text.Substring (i' len);  						if (s == pattern.StringPattern) {  							simpleword.HasContent = true;  							simpleword.ParentList = pattern.Parent;  							simpleword.Pattern = pattern;  							simpleword.Position = i;  							simpleword.Token = pattern.StringPattern;  							break;  						}  					}  				}  			}  		}  		#endregion  	}  }  
Magic Number,Alsing.SourceCode.SyntaxDocumentParsers,DefaultParser,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Document\Parser\DefaultParser.cs,GetNextWord,The following statement contains a magic number: if (i <= Text.Length - 3) {  	string key = Text.Substring (i' 3).ToLowerInvariant ();  	var patterns2 = (PatternCollection)spanDefinition.LookupTable [key];  	//ok ' there are patterns that start with this char  	if (patterns2 != null) {  		foreach (Pattern pattern in patterns2) {  			int len = pattern.StringPattern.Length;  			if (i + len > Text.Length)  				continue;  			char lastpatternchar = char.ToLower (pattern.StringPattern [len - 1]);  			char lasttextchar = char.ToLower (Text [i + len - 1]);  			#region Case Insensitive  			if (lastpatternchar == lasttextchar) {  				if (!pattern.IsKeyword || (pattern.IsKeyword && pattern.HasSeparators (Text' i))) {  					if (!pattern.Parent.CaseSensitive) {  						string s = Text.Substring (i' len).ToLowerInvariant ();  						if (s == pattern.StringPattern.ToLowerInvariant ()) {  							simpleword.HasContent = true;  							simpleword.ParentList = pattern.Parent;  							simpleword.Pattern = pattern;  							simpleword.Position = i;  							simpleword.Token = pattern.Parent.NormalizeCase ? pattern.StringPattern : Text.Substring (i' len);  							break;  						}  					}  					else {  						string s = Text.Substring (i' len);  						if (s == pattern.StringPattern) {  							simpleword.HasContent = true;  							simpleword.ParentList = pattern.Parent;  							simpleword.Pattern = pattern;  							simpleword.Position = i;  							simpleword.Token = pattern.StringPattern;  							break;  						}  					}  				}  			}  		}  		#endregion  	}  }  
Magic Number,Alsing.SourceCode.SyntaxDocumentParsers,DefaultParser,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Document\Parser\DefaultParser.cs,InternalParseLine,The following statement contains a magic number: if (!ParseKeywords) {  	if (oldEndSpan != null) {  		if (Row.endSpan != oldEndSpan && index <= Document.Count - 2) {  			//if (Row.CanFold)  			//	Row.expansion_StartSpan.Expanded = true;  			Document [index + 1].AddToParseQueue ();  			Document.NeedResetRows = true;  		}  	}  	else if (index <= Document.Count - 2) {  		//if (Row.CanFold)  		//	Row.expansion_StartSpan.Expanded = true;  		Document [index + 1].AddToParseQueue ();  		Document.NeedResetRows = true;  	}  }  
Magic Number,Alsing.SourceCode.SyntaxDocumentParsers,DefaultParser,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Document\Parser\DefaultParser.cs,InternalParseLine,The following statement contains a magic number: if (!ParseKeywords) {  	if (oldEndSpan != null) {  		if (Row.endSpan != oldEndSpan && index <= Document.Count - 2) {  			//if (Row.CanFold)  			//	Row.expansion_StartSpan.Expanded = true;  			Document [index + 1].AddToParseQueue ();  			Document.NeedResetRows = true;  		}  	}  	else if (index <= Document.Count - 2) {  		//if (Row.CanFold)  		//	Row.expansion_StartSpan.Expanded = true;  		Document [index + 1].AddToParseQueue ();  		Document.NeedResetRows = true;  	}  }  
Magic Number,Alsing.SourceCode.SyntaxDocumentParsers,DefaultParser,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Document\Parser\DefaultParser.cs,InternalParseLine,The following statement contains a magic number: if (oldEndSpan != null) {  	if (Row.endSpan != oldEndSpan && index <= Document.Count - 2) {  		//if (Row.CanFold)  		//	Row.expansion_StartSpan.Expanded = true;  		Document [index + 1].AddToParseQueue ();  		Document.NeedResetRows = true;  	}  }  else if (index <= Document.Count - 2) {  	//if (Row.CanFold)  	//	Row.expansion_StartSpan.Expanded = true;  	Document [index + 1].AddToParseQueue ();  	Document.NeedResetRows = true;  }  
Magic Number,Alsing.SourceCode.SyntaxDocumentParsers,DefaultParser,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Document\Parser\DefaultParser.cs,InternalParseLine,The following statement contains a magic number: if (oldEndSpan != null) {  	if (Row.endSpan != oldEndSpan && index <= Document.Count - 2) {  		//if (Row.CanFold)  		//	Row.expansion_StartSpan.Expanded = true;  		Document [index + 1].AddToParseQueue ();  		Document.NeedResetRows = true;  	}  }  else if (index <= Document.Count - 2) {  	//if (Row.CanFold)  	//	Row.expansion_StartSpan.Expanded = true;  	Document [index + 1].AddToParseQueue ();  	Document.NeedResetRows = true;  }  
Magic Number,Alsing.SourceCode.SyntaxDocumentParsers,DefaultParser,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Document\Parser\DefaultParser.cs,InternalParseLine,The following statement contains a magic number: if (Row.endSpan != oldEndSpan && index <= Document.Count - 2) {  	//if (Row.CanFold)  	//	Row.expansion_StartSpan.Expanded = true;  	Document [index + 1].AddToParseQueue ();  	Document.NeedResetRows = true;  }  
Magic Number,Alsing.SourceCode.SyntaxDocumentParsers,DefaultParser,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Document\Parser\DefaultParser.cs,InternalParseLine,The following statement contains a magic number: if (index <= Document.Count - 2) {  	//if (Row.CanFold)  	//	Row.expansion_StartSpan.Expanded = true;  	Document [index + 1].AddToParseQueue ();  	Document.NeedResetRows = true;  }  
Magic Number,Alsing.Drawing,DrawingTools,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Drawing\DrawingTools.cs,DrawRaisedBorder,The following statement contains a magic number: g.FillRectangle (light' r.Left + 1' r.Top + 1' r.Width - 2' 1);  
Magic Number,Alsing.Drawing,DrawingTools,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Drawing\DrawingTools.cs,DrawRaisedBorder,The following statement contains a magic number: g.FillRectangle (light' r.Left + 1' r.Top + 1' 1' r.Height - 2);  
Magic Number,Alsing.Drawing,DrawingTools,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Drawing\DrawingTools.cs,DrawRaisedBorder,The following statement contains a magic number: g.FillRectangle (dark' r.Right - 2' r.Top + 1' 1' r.Height - 2);  
Magic Number,Alsing.Drawing,DrawingTools,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Drawing\DrawingTools.cs,DrawRaisedBorder,The following statement contains a magic number: g.FillRectangle (dark' r.Right - 2' r.Top + 1' 1' r.Height - 2);  
Magic Number,Alsing.Drawing,DrawingTools,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Drawing\DrawingTools.cs,DrawRaisedBorder,The following statement contains a magic number: g.FillRectangle (dark' r.Left + 1' r.Bottom - 2' r.Width - 2' 1);  
Magic Number,Alsing.Drawing,DrawingTools,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Drawing\DrawingTools.cs,DrawRaisedBorder,The following statement contains a magic number: g.FillRectangle (dark' r.Left + 1' r.Bottom - 2' r.Width - 2' 1);  
Magic Number,Alsing.Drawing,DrawingTools,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Drawing\DrawingTools.cs,DrawSunkenBorder,The following statement contains a magic number: g.FillRectangle (darkdark' r.Left + 1' r.Top + 1' r.Width - 2' 1);  
Magic Number,Alsing.Drawing,DrawingTools,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Drawing\DrawingTools.cs,DrawSunkenBorder,The following statement contains a magic number: g.FillRectangle (darkdark' r.Left + 1' r.Top + 1' 1' r.Height - 2);  
Magic Number,Alsing.Drawing,DrawingTools,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Drawing\DrawingTools.cs,DrawSunkenBorder,The following statement contains a magic number: g.FillRectangle (normal' r.Right - 2' r.Top + 2' 1' r.Height - 3);  
Magic Number,Alsing.Drawing,DrawingTools,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Drawing\DrawingTools.cs,DrawSunkenBorder,The following statement contains a magic number: g.FillRectangle (normal' r.Right - 2' r.Top + 2' 1' r.Height - 3);  
Magic Number,Alsing.Drawing,DrawingTools,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Drawing\DrawingTools.cs,DrawSunkenBorder,The following statement contains a magic number: g.FillRectangle (normal' r.Right - 2' r.Top + 2' 1' r.Height - 3);  
Magic Number,Alsing.Drawing,DrawingTools,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Drawing\DrawingTools.cs,DrawSunkenBorder,The following statement contains a magic number: g.FillRectangle (normal' r.Left + 2' r.Bottom - 2' r.Width - 3' 1);  
Magic Number,Alsing.Drawing,DrawingTools,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Drawing\DrawingTools.cs,DrawSunkenBorder,The following statement contains a magic number: g.FillRectangle (normal' r.Left + 2' r.Bottom - 2' r.Width - 3' 1);  
Magic Number,Alsing.Drawing,DrawingTools,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Drawing\DrawingTools.cs,DrawSunkenBorder,The following statement contains a magic number: g.FillRectangle (normal' r.Left + 2' r.Bottom - 2' r.Width - 3' 1);  
Magic Number,Alsing.Drawing,DrawingTools,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Drawing\DrawingTools.cs,GetLightBrush,The following statement contains a magic number: return BorderColor.GetBrightness () > 0.6 ? new SolidBrush (MixColors (BorderColor' Color.White' 1)) : new SolidBrush (MixColors (BorderColor' Color.White' 0.5));  
Magic Number,Alsing.Drawing,DrawingTools,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Drawing\DrawingTools.cs,GetLightBrush,The following statement contains a magic number: return BorderColor.GetBrightness () > 0.6 ? new SolidBrush (MixColors (BorderColor' Color.White' 1)) : new SolidBrush (MixColors (BorderColor' Color.White' 0.5));  
Magic Number,Alsing.Drawing,DrawingTools,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Drawing\DrawingTools.cs,DrawBorder,The following statement contains a magic number: switch (Style) {  case BorderStyle2.Dotted: {  	r.Width--;  	r.Height--;  	g.DrawRectangle (new Pen (SystemColors.Control)' r);  	var p = new Pen (BorderColor) {  		DashStyle = DashStyle.Dot  	};  	g.DrawRectangle (p' r);  	break;  }  case BorderStyle2.Dashed: {  	r.Width--;  	r.Height--;  	g.DrawRectangle (new Pen (SystemColors.Control)' r);  	var p = new Pen (BorderColor) {  		DashStyle = DashStyle.Dash  	};  	g.DrawRectangle (p' r);  	break;  }  case BorderStyle2.Sunken: {  	if (BorderColor == Color.Black)  		BorderColor = SystemColors.Control;  	//System.Windows.Forms.ControlPaint.DrawBorder3D (g'r'Border3DStyle.Sunken);  	DrawBorder (Border3DStyle.Sunken' BorderColor' g' r);  	break;  }  case BorderStyle2.FixedSingle: {  	r.Width--;  	r.Height--;  	g.DrawRectangle (new Pen (BorderColor)' r);  	break;  }  case BorderStyle2.FixedDouble: {  	g.DrawRectangle (new Pen (BorderColor)' r.Left' r.Top' r.Width - 1' r.Height - 1);  	g.DrawRectangle (new Pen (BorderColor)' r.Left + 1' r.Top + 1' r.Width - 3' r.Height - 3);  	break;  }  case BorderStyle2.Raised: {  	if (BorderColor == Color.Black)  		BorderColor = SystemColors.Control;  	DrawBorder (Border3DStyle.Raised' BorderColor' g' r);  	//System.Windows.Forms.ControlPaint.DrawBorder3D (g'r'Border3DStyle.Raised);  	break;  }  case BorderStyle2.RaisedThin: {  	if (BorderColor == Color.Black)  		BorderColor = Color.FromArgb (SystemColors.Control.R' SystemColors.Control.G' SystemColors.Control.B);  	DrawBorder (Border3DStyle.RaisedInner' BorderColor' g' r);  	//System.Windows.Forms.ControlPaint.DrawBorder3D (g'r'Border3DStyle.Raised);  	break;  }  case BorderStyle2.SunkenThin: {  	if (BorderColor == Color.Black)  		BorderColor = Color.FromArgb (SystemColors.Control.R' SystemColors.Control.G' SystemColors.Control.B);  	DrawBorder (Border3DStyle.SunkenOuter' BorderColor' g' r);  	//System.Windows.Forms.ControlPaint.DrawBorder3D (g'r'Border3DStyle.Raised);  	break;  }  case BorderStyle2.Etched: {  	ControlPaint.DrawBorder3D (g' r' Border3DStyle.Etched);  	break;  }  case BorderStyle2.Bump: {  	if (BorderColor == Color.Black)  		BorderColor = SystemColors.Control;  	var b = new SolidBrush (BorderColor);  	g.FillRectangle (b' r.Left' r.Top' r.Width' 4);  	g.FillRectangle (b' r.Left' r.Bottom - 4' r.Width' 4);  	g.FillRectangle (b' r.Left' r.Top' 4' r.Height);  	g.FillRectangle (b' r.Right - 4' r.Top' 4' r.Height);  	b.Dispose ();  	DrawBorder (Border3DStyle.Raised' BorderColor' g' r);  	DrawBorder (Border3DStyle.Sunken' BorderColor' g' new Rectangle (r.Left + 4' r.Top + 4' r.Width - 8' r.Height - 8));  	break;  }  case BorderStyle2.Column: {  	var light = new SolidBrush (MixColors (BorderColor' Color.White' 1));  	var dark = new SolidBrush (MixColors (BorderColor' Color.Black' 0.4));  	g.FillRectangle (light' r.Left' r.Top' r.Width' 1);  	g.FillRectangle (light' r.Left' r.Top + 3' 1' r.Height - 1 - 6);  	g.FillRectangle (dark' r.Right - 1' r.Top + 3' 1' r.Height - 6);  	g.FillRectangle (dark' r.Left' r.Bottom - 1' r.Width' 1);  	break;  }  case BorderStyle2.Row: {  	var light = new SolidBrush (MixColors (BorderColor' Color.White' 1));  	var dark = new SolidBrush (MixColors (BorderColor' Color.Black' 0.4));  	g.FillRectangle (light' r.Left + 3' r.Top' r.Width - 6' 1);  	g.FillRectangle (light' r.Left' r.Top' 1' r.Height - 1);  	g.FillRectangle (dark' r.Right - 1' r.Top' 1' r.Height);  	g.FillRectangle (dark' r.Left + 3' r.Bottom - 1' r.Width - 6' 1);  	break;  }  }  
Magic Number,Alsing.Drawing,DrawingTools,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Drawing\DrawingTools.cs,DrawBorder,The following statement contains a magic number: switch (Style) {  case BorderStyle2.Dotted: {  	r.Width--;  	r.Height--;  	g.DrawRectangle (new Pen (SystemColors.Control)' r);  	var p = new Pen (BorderColor) {  		DashStyle = DashStyle.Dot  	};  	g.DrawRectangle (p' r);  	break;  }  case BorderStyle2.Dashed: {  	r.Width--;  	r.Height--;  	g.DrawRectangle (new Pen (SystemColors.Control)' r);  	var p = new Pen (BorderColor) {  		DashStyle = DashStyle.Dash  	};  	g.DrawRectangle (p' r);  	break;  }  case BorderStyle2.Sunken: {  	if (BorderColor == Color.Black)  		BorderColor = SystemColors.Control;  	//System.Windows.Forms.ControlPaint.DrawBorder3D (g'r'Border3DStyle.Sunken);  	DrawBorder (Border3DStyle.Sunken' BorderColor' g' r);  	break;  }  case BorderStyle2.FixedSingle: {  	r.Width--;  	r.Height--;  	g.DrawRectangle (new Pen (BorderColor)' r);  	break;  }  case BorderStyle2.FixedDouble: {  	g.DrawRectangle (new Pen (BorderColor)' r.Left' r.Top' r.Width - 1' r.Height - 1);  	g.DrawRectangle (new Pen (BorderColor)' r.Left + 1' r.Top + 1' r.Width - 3' r.Height - 3);  	break;  }  case BorderStyle2.Raised: {  	if (BorderColor == Color.Black)  		BorderColor = SystemColors.Control;  	DrawBorder (Border3DStyle.Raised' BorderColor' g' r);  	//System.Windows.Forms.ControlPaint.DrawBorder3D (g'r'Border3DStyle.Raised);  	break;  }  case BorderStyle2.RaisedThin: {  	if (BorderColor == Color.Black)  		BorderColor = Color.FromArgb (SystemColors.Control.R' SystemColors.Control.G' SystemColors.Control.B);  	DrawBorder (Border3DStyle.RaisedInner' BorderColor' g' r);  	//System.Windows.Forms.ControlPaint.DrawBorder3D (g'r'Border3DStyle.Raised);  	break;  }  case BorderStyle2.SunkenThin: {  	if (BorderColor == Color.Black)  		BorderColor = Color.FromArgb (SystemColors.Control.R' SystemColors.Control.G' SystemColors.Control.B);  	DrawBorder (Border3DStyle.SunkenOuter' BorderColor' g' r);  	//System.Windows.Forms.ControlPaint.DrawBorder3D (g'r'Border3DStyle.Raised);  	break;  }  case BorderStyle2.Etched: {  	ControlPaint.DrawBorder3D (g' r' Border3DStyle.Etched);  	break;  }  case BorderStyle2.Bump: {  	if (BorderColor == Color.Black)  		BorderColor = SystemColors.Control;  	var b = new SolidBrush (BorderColor);  	g.FillRectangle (b' r.Left' r.Top' r.Width' 4);  	g.FillRectangle (b' r.Left' r.Bottom - 4' r.Width' 4);  	g.FillRectangle (b' r.Left' r.Top' 4' r.Height);  	g.FillRectangle (b' r.Right - 4' r.Top' 4' r.Height);  	b.Dispose ();  	DrawBorder (Border3DStyle.Raised' BorderColor' g' r);  	DrawBorder (Border3DStyle.Sunken' BorderColor' g' new Rectangle (r.Left + 4' r.Top + 4' r.Width - 8' r.Height - 8));  	break;  }  case BorderStyle2.Column: {  	var light = new SolidBrush (MixColors (BorderColor' Color.White' 1));  	var dark = new SolidBrush (MixColors (BorderColor' Color.Black' 0.4));  	g.FillRectangle (light' r.Left' r.Top' r.Width' 1);  	g.FillRectangle (light' r.Left' r.Top + 3' 1' r.Height - 1 - 6);  	g.FillRectangle (dark' r.Right - 1' r.Top + 3' 1' r.Height - 6);  	g.FillRectangle (dark' r.Left' r.Bottom - 1' r.Width' 1);  	break;  }  case BorderStyle2.Row: {  	var light = new SolidBrush (MixColors (BorderColor' Color.White' 1));  	var dark = new SolidBrush (MixColors (BorderColor' Color.Black' 0.4));  	g.FillRectangle (light' r.Left + 3' r.Top' r.Width - 6' 1);  	g.FillRectangle (light' r.Left' r.Top' 1' r.Height - 1);  	g.FillRectangle (dark' r.Right - 1' r.Top' 1' r.Height);  	g.FillRectangle (dark' r.Left + 3' r.Bottom - 1' r.Width - 6' 1);  	break;  }  }  
Magic Number,Alsing.Drawing,DrawingTools,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Drawing\DrawingTools.cs,DrawBorder,The following statement contains a magic number: switch (Style) {  case BorderStyle2.Dotted: {  	r.Width--;  	r.Height--;  	g.DrawRectangle (new Pen (SystemColors.Control)' r);  	var p = new Pen (BorderColor) {  		DashStyle = DashStyle.Dot  	};  	g.DrawRectangle (p' r);  	break;  }  case BorderStyle2.Dashed: {  	r.Width--;  	r.Height--;  	g.DrawRectangle (new Pen (SystemColors.Control)' r);  	var p = new Pen (BorderColor) {  		DashStyle = DashStyle.Dash  	};  	g.DrawRectangle (p' r);  	break;  }  case BorderStyle2.Sunken: {  	if (BorderColor == Color.Black)  		BorderColor = SystemColors.Control;  	//System.Windows.Forms.ControlPaint.DrawBorder3D (g'r'Border3DStyle.Sunken);  	DrawBorder (Border3DStyle.Sunken' BorderColor' g' r);  	break;  }  case BorderStyle2.FixedSingle: {  	r.Width--;  	r.Height--;  	g.DrawRectangle (new Pen (BorderColor)' r);  	break;  }  case BorderStyle2.FixedDouble: {  	g.DrawRectangle (new Pen (BorderColor)' r.Left' r.Top' r.Width - 1' r.Height - 1);  	g.DrawRectangle (new Pen (BorderColor)' r.Left + 1' r.Top + 1' r.Width - 3' r.Height - 3);  	break;  }  case BorderStyle2.Raised: {  	if (BorderColor == Color.Black)  		BorderColor = SystemColors.Control;  	DrawBorder (Border3DStyle.Raised' BorderColor' g' r);  	//System.Windows.Forms.ControlPaint.DrawBorder3D (g'r'Border3DStyle.Raised);  	break;  }  case BorderStyle2.RaisedThin: {  	if (BorderColor == Color.Black)  		BorderColor = Color.FromArgb (SystemColors.Control.R' SystemColors.Control.G' SystemColors.Control.B);  	DrawBorder (Border3DStyle.RaisedInner' BorderColor' g' r);  	//System.Windows.Forms.ControlPaint.DrawBorder3D (g'r'Border3DStyle.Raised);  	break;  }  case BorderStyle2.SunkenThin: {  	if (BorderColor == Color.Black)  		BorderColor = Color.FromArgb (SystemColors.Control.R' SystemColors.Control.G' SystemColors.Control.B);  	DrawBorder (Border3DStyle.SunkenOuter' BorderColor' g' r);  	//System.Windows.Forms.ControlPaint.DrawBorder3D (g'r'Border3DStyle.Raised);  	break;  }  case BorderStyle2.Etched: {  	ControlPaint.DrawBorder3D (g' r' Border3DStyle.Etched);  	break;  }  case BorderStyle2.Bump: {  	if (BorderColor == Color.Black)  		BorderColor = SystemColors.Control;  	var b = new SolidBrush (BorderColor);  	g.FillRectangle (b' r.Left' r.Top' r.Width' 4);  	g.FillRectangle (b' r.Left' r.Bottom - 4' r.Width' 4);  	g.FillRectangle (b' r.Left' r.Top' 4' r.Height);  	g.FillRectangle (b' r.Right - 4' r.Top' 4' r.Height);  	b.Dispose ();  	DrawBorder (Border3DStyle.Raised' BorderColor' g' r);  	DrawBorder (Border3DStyle.Sunken' BorderColor' g' new Rectangle (r.Left + 4' r.Top + 4' r.Width - 8' r.Height - 8));  	break;  }  case BorderStyle2.Column: {  	var light = new SolidBrush (MixColors (BorderColor' Color.White' 1));  	var dark = new SolidBrush (MixColors (BorderColor' Color.Black' 0.4));  	g.FillRectangle (light' r.Left' r.Top' r.Width' 1);  	g.FillRectangle (light' r.Left' r.Top + 3' 1' r.Height - 1 - 6);  	g.FillRectangle (dark' r.Right - 1' r.Top + 3' 1' r.Height - 6);  	g.FillRectangle (dark' r.Left' r.Bottom - 1' r.Width' 1);  	break;  }  case BorderStyle2.Row: {  	var light = new SolidBrush (MixColors (BorderColor' Color.White' 1));  	var dark = new SolidBrush (MixColors (BorderColor' Color.Black' 0.4));  	g.FillRectangle (light' r.Left + 3' r.Top' r.Width - 6' 1);  	g.FillRectangle (light' r.Left' r.Top' 1' r.Height - 1);  	g.FillRectangle (dark' r.Right - 1' r.Top' 1' r.Height);  	g.FillRectangle (dark' r.Left + 3' r.Bottom - 1' r.Width - 6' 1);  	break;  }  }  
Magic Number,Alsing.Drawing,DrawingTools,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Drawing\DrawingTools.cs,DrawBorder,The following statement contains a magic number: switch (Style) {  case BorderStyle2.Dotted: {  	r.Width--;  	r.Height--;  	g.DrawRectangle (new Pen (SystemColors.Control)' r);  	var p = new Pen (BorderColor) {  		DashStyle = DashStyle.Dot  	};  	g.DrawRectangle (p' r);  	break;  }  case BorderStyle2.Dashed: {  	r.Width--;  	r.Height--;  	g.DrawRectangle (new Pen (SystemColors.Control)' r);  	var p = new Pen (BorderColor) {  		DashStyle = DashStyle.Dash  	};  	g.DrawRectangle (p' r);  	break;  }  case BorderStyle2.Sunken: {  	if (BorderColor == Color.Black)  		BorderColor = SystemColors.Control;  	//System.Windows.Forms.ControlPaint.DrawBorder3D (g'r'Border3DStyle.Sunken);  	DrawBorder (Border3DStyle.Sunken' BorderColor' g' r);  	break;  }  case BorderStyle2.FixedSingle: {  	r.Width--;  	r.Height--;  	g.DrawRectangle (new Pen (BorderColor)' r);  	break;  }  case BorderStyle2.FixedDouble: {  	g.DrawRectangle (new Pen (BorderColor)' r.Left' r.Top' r.Width - 1' r.Height - 1);  	g.DrawRectangle (new Pen (BorderColor)' r.Left + 1' r.Top + 1' r.Width - 3' r.Height - 3);  	break;  }  case BorderStyle2.Raised: {  	if (BorderColor == Color.Black)  		BorderColor = SystemColors.Control;  	DrawBorder (Border3DStyle.Raised' BorderColor' g' r);  	//System.Windows.Forms.ControlPaint.DrawBorder3D (g'r'Border3DStyle.Raised);  	break;  }  case BorderStyle2.RaisedThin: {  	if (BorderColor == Color.Black)  		BorderColor = Color.FromArgb (SystemColors.Control.R' SystemColors.Control.G' SystemColors.Control.B);  	DrawBorder (Border3DStyle.RaisedInner' BorderColor' g' r);  	//System.Windows.Forms.ControlPaint.DrawBorder3D (g'r'Border3DStyle.Raised);  	break;  }  case BorderStyle2.SunkenThin: {  	if (BorderColor == Color.Black)  		BorderColor = Color.FromArgb (SystemColors.Control.R' SystemColors.Control.G' SystemColors.Control.B);  	DrawBorder (Border3DStyle.SunkenOuter' BorderColor' g' r);  	//System.Windows.Forms.ControlPaint.DrawBorder3D (g'r'Border3DStyle.Raised);  	break;  }  case BorderStyle2.Etched: {  	ControlPaint.DrawBorder3D (g' r' Border3DStyle.Etched);  	break;  }  case BorderStyle2.Bump: {  	if (BorderColor == Color.Black)  		BorderColor = SystemColors.Control;  	var b = new SolidBrush (BorderColor);  	g.FillRectangle (b' r.Left' r.Top' r.Width' 4);  	g.FillRectangle (b' r.Left' r.Bottom - 4' r.Width' 4);  	g.FillRectangle (b' r.Left' r.Top' 4' r.Height);  	g.FillRectangle (b' r.Right - 4' r.Top' 4' r.Height);  	b.Dispose ();  	DrawBorder (Border3DStyle.Raised' BorderColor' g' r);  	DrawBorder (Border3DStyle.Sunken' BorderColor' g' new Rectangle (r.Left + 4' r.Top + 4' r.Width - 8' r.Height - 8));  	break;  }  case BorderStyle2.Column: {  	var light = new SolidBrush (MixColors (BorderColor' Color.White' 1));  	var dark = new SolidBrush (MixColors (BorderColor' Color.Black' 0.4));  	g.FillRectangle (light' r.Left' r.Top' r.Width' 1);  	g.FillRectangle (light' r.Left' r.Top + 3' 1' r.Height - 1 - 6);  	g.FillRectangle (dark' r.Right - 1' r.Top + 3' 1' r.Height - 6);  	g.FillRectangle (dark' r.Left' r.Bottom - 1' r.Width' 1);  	break;  }  case BorderStyle2.Row: {  	var light = new SolidBrush (MixColors (BorderColor' Color.White' 1));  	var dark = new SolidBrush (MixColors (BorderColor' Color.Black' 0.4));  	g.FillRectangle (light' r.Left + 3' r.Top' r.Width - 6' 1);  	g.FillRectangle (light' r.Left' r.Top' 1' r.Height - 1);  	g.FillRectangle (dark' r.Right - 1' r.Top' 1' r.Height);  	g.FillRectangle (dark' r.Left + 3' r.Bottom - 1' r.Width - 6' 1);  	break;  }  }  
Magic Number,Alsing.Drawing,DrawingTools,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Drawing\DrawingTools.cs,DrawBorder,The following statement contains a magic number: switch (Style) {  case BorderStyle2.Dotted: {  	r.Width--;  	r.Height--;  	g.DrawRectangle (new Pen (SystemColors.Control)' r);  	var p = new Pen (BorderColor) {  		DashStyle = DashStyle.Dot  	};  	g.DrawRectangle (p' r);  	break;  }  case BorderStyle2.Dashed: {  	r.Width--;  	r.Height--;  	g.DrawRectangle (new Pen (SystemColors.Control)' r);  	var p = new Pen (BorderColor) {  		DashStyle = DashStyle.Dash  	};  	g.DrawRectangle (p' r);  	break;  }  case BorderStyle2.Sunken: {  	if (BorderColor == Color.Black)  		BorderColor = SystemColors.Control;  	//System.Windows.Forms.ControlPaint.DrawBorder3D (g'r'Border3DStyle.Sunken);  	DrawBorder (Border3DStyle.Sunken' BorderColor' g' r);  	break;  }  case BorderStyle2.FixedSingle: {  	r.Width--;  	r.Height--;  	g.DrawRectangle (new Pen (BorderColor)' r);  	break;  }  case BorderStyle2.FixedDouble: {  	g.DrawRectangle (new Pen (BorderColor)' r.Left' r.Top' r.Width - 1' r.Height - 1);  	g.DrawRectangle (new Pen (BorderColor)' r.Left + 1' r.Top + 1' r.Width - 3' r.Height - 3);  	break;  }  case BorderStyle2.Raised: {  	if (BorderColor == Color.Black)  		BorderColor = SystemColors.Control;  	DrawBorder (Border3DStyle.Raised' BorderColor' g' r);  	//System.Windows.Forms.ControlPaint.DrawBorder3D (g'r'Border3DStyle.Raised);  	break;  }  case BorderStyle2.RaisedThin: {  	if (BorderColor == Color.Black)  		BorderColor = Color.FromArgb (SystemColors.Control.R' SystemColors.Control.G' SystemColors.Control.B);  	DrawBorder (Border3DStyle.RaisedInner' BorderColor' g' r);  	//System.Windows.Forms.ControlPaint.DrawBorder3D (g'r'Border3DStyle.Raised);  	break;  }  case BorderStyle2.SunkenThin: {  	if (BorderColor == Color.Black)  		BorderColor = Color.FromArgb (SystemColors.Control.R' SystemColors.Control.G' SystemColors.Control.B);  	DrawBorder (Border3DStyle.SunkenOuter' BorderColor' g' r);  	//System.Windows.Forms.ControlPaint.DrawBorder3D (g'r'Border3DStyle.Raised);  	break;  }  case BorderStyle2.Etched: {  	ControlPaint.DrawBorder3D (g' r' Border3DStyle.Etched);  	break;  }  case BorderStyle2.Bump: {  	if (BorderColor == Color.Black)  		BorderColor = SystemColors.Control;  	var b = new SolidBrush (BorderColor);  	g.FillRectangle (b' r.Left' r.Top' r.Width' 4);  	g.FillRectangle (b' r.Left' r.Bottom - 4' r.Width' 4);  	g.FillRectangle (b' r.Left' r.Top' 4' r.Height);  	g.FillRectangle (b' r.Right - 4' r.Top' 4' r.Height);  	b.Dispose ();  	DrawBorder (Border3DStyle.Raised' BorderColor' g' r);  	DrawBorder (Border3DStyle.Sunken' BorderColor' g' new Rectangle (r.Left + 4' r.Top + 4' r.Width - 8' r.Height - 8));  	break;  }  case BorderStyle2.Column: {  	var light = new SolidBrush (MixColors (BorderColor' Color.White' 1));  	var dark = new SolidBrush (MixColors (BorderColor' Color.Black' 0.4));  	g.FillRectangle (light' r.Left' r.Top' r.Width' 1);  	g.FillRectangle (light' r.Left' r.Top + 3' 1' r.Height - 1 - 6);  	g.FillRectangle (dark' r.Right - 1' r.Top + 3' 1' r.Height - 6);  	g.FillRectangle (dark' r.Left' r.Bottom - 1' r.Width' 1);  	break;  }  case BorderStyle2.Row: {  	var light = new SolidBrush (MixColors (BorderColor' Color.White' 1));  	var dark = new SolidBrush (MixColors (BorderColor' Color.Black' 0.4));  	g.FillRectangle (light' r.Left + 3' r.Top' r.Width - 6' 1);  	g.FillRectangle (light' r.Left' r.Top' 1' r.Height - 1);  	g.FillRectangle (dark' r.Right - 1' r.Top' 1' r.Height);  	g.FillRectangle (dark' r.Left + 3' r.Bottom - 1' r.Width - 6' 1);  	break;  }  }  
Magic Number,Alsing.Drawing,DrawingTools,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Drawing\DrawingTools.cs,DrawBorder,The following statement contains a magic number: switch (Style) {  case BorderStyle2.Dotted: {  	r.Width--;  	r.Height--;  	g.DrawRectangle (new Pen (SystemColors.Control)' r);  	var p = new Pen (BorderColor) {  		DashStyle = DashStyle.Dot  	};  	g.DrawRectangle (p' r);  	break;  }  case BorderStyle2.Dashed: {  	r.Width--;  	r.Height--;  	g.DrawRectangle (new Pen (SystemColors.Control)' r);  	var p = new Pen (BorderColor) {  		DashStyle = DashStyle.Dash  	};  	g.DrawRectangle (p' r);  	break;  }  case BorderStyle2.Sunken: {  	if (BorderColor == Color.Black)  		BorderColor = SystemColors.Control;  	//System.Windows.Forms.ControlPaint.DrawBorder3D (g'r'Border3DStyle.Sunken);  	DrawBorder (Border3DStyle.Sunken' BorderColor' g' r);  	break;  }  case BorderStyle2.FixedSingle: {  	r.Width--;  	r.Height--;  	g.DrawRectangle (new Pen (BorderColor)' r);  	break;  }  case BorderStyle2.FixedDouble: {  	g.DrawRectangle (new Pen (BorderColor)' r.Left' r.Top' r.Width - 1' r.Height - 1);  	g.DrawRectangle (new Pen (BorderColor)' r.Left + 1' r.Top + 1' r.Width - 3' r.Height - 3);  	break;  }  case BorderStyle2.Raised: {  	if (BorderColor == Color.Black)  		BorderColor = SystemColors.Control;  	DrawBorder (Border3DStyle.Raised' BorderColor' g' r);  	//System.Windows.Forms.ControlPaint.DrawBorder3D (g'r'Border3DStyle.Raised);  	break;  }  case BorderStyle2.RaisedThin: {  	if (BorderColor == Color.Black)  		BorderColor = Color.FromArgb (SystemColors.Control.R' SystemColors.Control.G' SystemColors.Control.B);  	DrawBorder (Border3DStyle.RaisedInner' BorderColor' g' r);  	//System.Windows.Forms.ControlPaint.DrawBorder3D (g'r'Border3DStyle.Raised);  	break;  }  case BorderStyle2.SunkenThin: {  	if (BorderColor == Color.Black)  		BorderColor = Color.FromArgb (SystemColors.Control.R' SystemColors.Control.G' SystemColors.Control.B);  	DrawBorder (Border3DStyle.SunkenOuter' BorderColor' g' r);  	//System.Windows.Forms.ControlPaint.DrawBorder3D (g'r'Border3DStyle.Raised);  	break;  }  case BorderStyle2.Etched: {  	ControlPaint.DrawBorder3D (g' r' Border3DStyle.Etched);  	break;  }  case BorderStyle2.Bump: {  	if (BorderColor == Color.Black)  		BorderColor = SystemColors.Control;  	var b = new SolidBrush (BorderColor);  	g.FillRectangle (b' r.Left' r.Top' r.Width' 4);  	g.FillRectangle (b' r.Left' r.Bottom - 4' r.Width' 4);  	g.FillRectangle (b' r.Left' r.Top' 4' r.Height);  	g.FillRectangle (b' r.Right - 4' r.Top' 4' r.Height);  	b.Dispose ();  	DrawBorder (Border3DStyle.Raised' BorderColor' g' r);  	DrawBorder (Border3DStyle.Sunken' BorderColor' g' new Rectangle (r.Left + 4' r.Top + 4' r.Width - 8' r.Height - 8));  	break;  }  case BorderStyle2.Column: {  	var light = new SolidBrush (MixColors (BorderColor' Color.White' 1));  	var dark = new SolidBrush (MixColors (BorderColor' Color.Black' 0.4));  	g.FillRectangle (light' r.Left' r.Top' r.Width' 1);  	g.FillRectangle (light' r.Left' r.Top + 3' 1' r.Height - 1 - 6);  	g.FillRectangle (dark' r.Right - 1' r.Top + 3' 1' r.Height - 6);  	g.FillRectangle (dark' r.Left' r.Bottom - 1' r.Width' 1);  	break;  }  case BorderStyle2.Row: {  	var light = new SolidBrush (MixColors (BorderColor' Color.White' 1));  	var dark = new SolidBrush (MixColors (BorderColor' Color.Black' 0.4));  	g.FillRectangle (light' r.Left + 3' r.Top' r.Width - 6' 1);  	g.FillRectangle (light' r.Left' r.Top' 1' r.Height - 1);  	g.FillRectangle (dark' r.Right - 1' r.Top' 1' r.Height);  	g.FillRectangle (dark' r.Left + 3' r.Bottom - 1' r.Width - 6' 1);  	break;  }  }  
Magic Number,Alsing.Drawing,DrawingTools,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Drawing\DrawingTools.cs,DrawBorder,The following statement contains a magic number: switch (Style) {  case BorderStyle2.Dotted: {  	r.Width--;  	r.Height--;  	g.DrawRectangle (new Pen (SystemColors.Control)' r);  	var p = new Pen (BorderColor) {  		DashStyle = DashStyle.Dot  	};  	g.DrawRectangle (p' r);  	break;  }  case BorderStyle2.Dashed: {  	r.Width--;  	r.Height--;  	g.DrawRectangle (new Pen (SystemColors.Control)' r);  	var p = new Pen (BorderColor) {  		DashStyle = DashStyle.Dash  	};  	g.DrawRectangle (p' r);  	break;  }  case BorderStyle2.Sunken: {  	if (BorderColor == Color.Black)  		BorderColor = SystemColors.Control;  	//System.Windows.Forms.ControlPaint.DrawBorder3D (g'r'Border3DStyle.Sunken);  	DrawBorder (Border3DStyle.Sunken' BorderColor' g' r);  	break;  }  case BorderStyle2.FixedSingle: {  	r.Width--;  	r.Height--;  	g.DrawRectangle (new Pen (BorderColor)' r);  	break;  }  case BorderStyle2.FixedDouble: {  	g.DrawRectangle (new Pen (BorderColor)' r.Left' r.Top' r.Width - 1' r.Height - 1);  	g.DrawRectangle (new Pen (BorderColor)' r.Left + 1' r.Top + 1' r.Width - 3' r.Height - 3);  	break;  }  case BorderStyle2.Raised: {  	if (BorderColor == Color.Black)  		BorderColor = SystemColors.Control;  	DrawBorder (Border3DStyle.Raised' BorderColor' g' r);  	//System.Windows.Forms.ControlPaint.DrawBorder3D (g'r'Border3DStyle.Raised);  	break;  }  case BorderStyle2.RaisedThin: {  	if (BorderColor == Color.Black)  		BorderColor = Color.FromArgb (SystemColors.Control.R' SystemColors.Control.G' SystemColors.Control.B);  	DrawBorder (Border3DStyle.RaisedInner' BorderColor' g' r);  	//System.Windows.Forms.ControlPaint.DrawBorder3D (g'r'Border3DStyle.Raised);  	break;  }  case BorderStyle2.SunkenThin: {  	if (BorderColor == Color.Black)  		BorderColor = Color.FromArgb (SystemColors.Control.R' SystemColors.Control.G' SystemColors.Control.B);  	DrawBorder (Border3DStyle.SunkenOuter' BorderColor' g' r);  	//System.Windows.Forms.ControlPaint.DrawBorder3D (g'r'Border3DStyle.Raised);  	break;  }  case BorderStyle2.Etched: {  	ControlPaint.DrawBorder3D (g' r' Border3DStyle.Etched);  	break;  }  case BorderStyle2.Bump: {  	if (BorderColor == Color.Black)  		BorderColor = SystemColors.Control;  	var b = new SolidBrush (BorderColor);  	g.FillRectangle (b' r.Left' r.Top' r.Width' 4);  	g.FillRectangle (b' r.Left' r.Bottom - 4' r.Width' 4);  	g.FillRectangle (b' r.Left' r.Top' 4' r.Height);  	g.FillRectangle (b' r.Right - 4' r.Top' 4' r.Height);  	b.Dispose ();  	DrawBorder (Border3DStyle.Raised' BorderColor' g' r);  	DrawBorder (Border3DStyle.Sunken' BorderColor' g' new Rectangle (r.Left + 4' r.Top + 4' r.Width - 8' r.Height - 8));  	break;  }  case BorderStyle2.Column: {  	var light = new SolidBrush (MixColors (BorderColor' Color.White' 1));  	var dark = new SolidBrush (MixColors (BorderColor' Color.Black' 0.4));  	g.FillRectangle (light' r.Left' r.Top' r.Width' 1);  	g.FillRectangle (light' r.Left' r.Top + 3' 1' r.Height - 1 - 6);  	g.FillRectangle (dark' r.Right - 1' r.Top + 3' 1' r.Height - 6);  	g.FillRectangle (dark' r.Left' r.Bottom - 1' r.Width' 1);  	break;  }  case BorderStyle2.Row: {  	var light = new SolidBrush (MixColors (BorderColor' Color.White' 1));  	var dark = new SolidBrush (MixColors (BorderColor' Color.Black' 0.4));  	g.FillRectangle (light' r.Left + 3' r.Top' r.Width - 6' 1);  	g.FillRectangle (light' r.Left' r.Top' 1' r.Height - 1);  	g.FillRectangle (dark' r.Right - 1' r.Top' 1' r.Height);  	g.FillRectangle (dark' r.Left + 3' r.Bottom - 1' r.Width - 6' 1);  	break;  }  }  
Magic Number,Alsing.Drawing,DrawingTools,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Drawing\DrawingTools.cs,DrawBorder,The following statement contains a magic number: switch (Style) {  case BorderStyle2.Dotted: {  	r.Width--;  	r.Height--;  	g.DrawRectangle (new Pen (SystemColors.Control)' r);  	var p = new Pen (BorderColor) {  		DashStyle = DashStyle.Dot  	};  	g.DrawRectangle (p' r);  	break;  }  case BorderStyle2.Dashed: {  	r.Width--;  	r.Height--;  	g.DrawRectangle (new Pen (SystemColors.Control)' r);  	var p = new Pen (BorderColor) {  		DashStyle = DashStyle.Dash  	};  	g.DrawRectangle (p' r);  	break;  }  case BorderStyle2.Sunken: {  	if (BorderColor == Color.Black)  		BorderColor = SystemColors.Control;  	//System.Windows.Forms.ControlPaint.DrawBorder3D (g'r'Border3DStyle.Sunken);  	DrawBorder (Border3DStyle.Sunken' BorderColor' g' r);  	break;  }  case BorderStyle2.FixedSingle: {  	r.Width--;  	r.Height--;  	g.DrawRectangle (new Pen (BorderColor)' r);  	break;  }  case BorderStyle2.FixedDouble: {  	g.DrawRectangle (new Pen (BorderColor)' r.Left' r.Top' r.Width - 1' r.Height - 1);  	g.DrawRectangle (new Pen (BorderColor)' r.Left + 1' r.Top + 1' r.Width - 3' r.Height - 3);  	break;  }  case BorderStyle2.Raised: {  	if (BorderColor == Color.Black)  		BorderColor = SystemColors.Control;  	DrawBorder (Border3DStyle.Raised' BorderColor' g' r);  	//System.Windows.Forms.ControlPaint.DrawBorder3D (g'r'Border3DStyle.Raised);  	break;  }  case BorderStyle2.RaisedThin: {  	if (BorderColor == Color.Black)  		BorderColor = Color.FromArgb (SystemColors.Control.R' SystemColors.Control.G' SystemColors.Control.B);  	DrawBorder (Border3DStyle.RaisedInner' BorderColor' g' r);  	//System.Windows.Forms.ControlPaint.DrawBorder3D (g'r'Border3DStyle.Raised);  	break;  }  case BorderStyle2.SunkenThin: {  	if (BorderColor == Color.Black)  		BorderColor = Color.FromArgb (SystemColors.Control.R' SystemColors.Control.G' SystemColors.Control.B);  	DrawBorder (Border3DStyle.SunkenOuter' BorderColor' g' r);  	//System.Windows.Forms.ControlPaint.DrawBorder3D (g'r'Border3DStyle.Raised);  	break;  }  case BorderStyle2.Etched: {  	ControlPaint.DrawBorder3D (g' r' Border3DStyle.Etched);  	break;  }  case BorderStyle2.Bump: {  	if (BorderColor == Color.Black)  		BorderColor = SystemColors.Control;  	var b = new SolidBrush (BorderColor);  	g.FillRectangle (b' r.Left' r.Top' r.Width' 4);  	g.FillRectangle (b' r.Left' r.Bottom - 4' r.Width' 4);  	g.FillRectangle (b' r.Left' r.Top' 4' r.Height);  	g.FillRectangle (b' r.Right - 4' r.Top' 4' r.Height);  	b.Dispose ();  	DrawBorder (Border3DStyle.Raised' BorderColor' g' r);  	DrawBorder (Border3DStyle.Sunken' BorderColor' g' new Rectangle (r.Left + 4' r.Top + 4' r.Width - 8' r.Height - 8));  	break;  }  case BorderStyle2.Column: {  	var light = new SolidBrush (MixColors (BorderColor' Color.White' 1));  	var dark = new SolidBrush (MixColors (BorderColor' Color.Black' 0.4));  	g.FillRectangle (light' r.Left' r.Top' r.Width' 1);  	g.FillRectangle (light' r.Left' r.Top + 3' 1' r.Height - 1 - 6);  	g.FillRectangle (dark' r.Right - 1' r.Top + 3' 1' r.Height - 6);  	g.FillRectangle (dark' r.Left' r.Bottom - 1' r.Width' 1);  	break;  }  case BorderStyle2.Row: {  	var light = new SolidBrush (MixColors (BorderColor' Color.White' 1));  	var dark = new SolidBrush (MixColors (BorderColor' Color.Black' 0.4));  	g.FillRectangle (light' r.Left + 3' r.Top' r.Width - 6' 1);  	g.FillRectangle (light' r.Left' r.Top' 1' r.Height - 1);  	g.FillRectangle (dark' r.Right - 1' r.Top' 1' r.Height);  	g.FillRectangle (dark' r.Left + 3' r.Bottom - 1' r.Width - 6' 1);  	break;  }  }  
Magic Number,Alsing.Drawing,DrawingTools,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Drawing\DrawingTools.cs,DrawBorder,The following statement contains a magic number: switch (Style) {  case BorderStyle2.Dotted: {  	r.Width--;  	r.Height--;  	g.DrawRectangle (new Pen (SystemColors.Control)' r);  	var p = new Pen (BorderColor) {  		DashStyle = DashStyle.Dot  	};  	g.DrawRectangle (p' r);  	break;  }  case BorderStyle2.Dashed: {  	r.Width--;  	r.Height--;  	g.DrawRectangle (new Pen (SystemColors.Control)' r);  	var p = new Pen (BorderColor) {  		DashStyle = DashStyle.Dash  	};  	g.DrawRectangle (p' r);  	break;  }  case BorderStyle2.Sunken: {  	if (BorderColor == Color.Black)  		BorderColor = SystemColors.Control;  	//System.Windows.Forms.ControlPaint.DrawBorder3D (g'r'Border3DStyle.Sunken);  	DrawBorder (Border3DStyle.Sunken' BorderColor' g' r);  	break;  }  case BorderStyle2.FixedSingle: {  	r.Width--;  	r.Height--;  	g.DrawRectangle (new Pen (BorderColor)' r);  	break;  }  case BorderStyle2.FixedDouble: {  	g.DrawRectangle (new Pen (BorderColor)' r.Left' r.Top' r.Width - 1' r.Height - 1);  	g.DrawRectangle (new Pen (BorderColor)' r.Left + 1' r.Top + 1' r.Width - 3' r.Height - 3);  	break;  }  case BorderStyle2.Raised: {  	if (BorderColor == Color.Black)  		BorderColor = SystemColors.Control;  	DrawBorder (Border3DStyle.Raised' BorderColor' g' r);  	//System.Windows.Forms.ControlPaint.DrawBorder3D (g'r'Border3DStyle.Raised);  	break;  }  case BorderStyle2.RaisedThin: {  	if (BorderColor == Color.Black)  		BorderColor = Color.FromArgb (SystemColors.Control.R' SystemColors.Control.G' SystemColors.Control.B);  	DrawBorder (Border3DStyle.RaisedInner' BorderColor' g' r);  	//System.Windows.Forms.ControlPaint.DrawBorder3D (g'r'Border3DStyle.Raised);  	break;  }  case BorderStyle2.SunkenThin: {  	if (BorderColor == Color.Black)  		BorderColor = Color.FromArgb (SystemColors.Control.R' SystemColors.Control.G' SystemColors.Control.B);  	DrawBorder (Border3DStyle.SunkenOuter' BorderColor' g' r);  	//System.Windows.Forms.ControlPaint.DrawBorder3D (g'r'Border3DStyle.Raised);  	break;  }  case BorderStyle2.Etched: {  	ControlPaint.DrawBorder3D (g' r' Border3DStyle.Etched);  	break;  }  case BorderStyle2.Bump: {  	if (BorderColor == Color.Black)  		BorderColor = SystemColors.Control;  	var b = new SolidBrush (BorderColor);  	g.FillRectangle (b' r.Left' r.Top' r.Width' 4);  	g.FillRectangle (b' r.Left' r.Bottom - 4' r.Width' 4);  	g.FillRectangle (b' r.Left' r.Top' 4' r.Height);  	g.FillRectangle (b' r.Right - 4' r.Top' 4' r.Height);  	b.Dispose ();  	DrawBorder (Border3DStyle.Raised' BorderColor' g' r);  	DrawBorder (Border3DStyle.Sunken' BorderColor' g' new Rectangle (r.Left + 4' r.Top + 4' r.Width - 8' r.Height - 8));  	break;  }  case BorderStyle2.Column: {  	var light = new SolidBrush (MixColors (BorderColor' Color.White' 1));  	var dark = new SolidBrush (MixColors (BorderColor' Color.Black' 0.4));  	g.FillRectangle (light' r.Left' r.Top' r.Width' 1);  	g.FillRectangle (light' r.Left' r.Top + 3' 1' r.Height - 1 - 6);  	g.FillRectangle (dark' r.Right - 1' r.Top + 3' 1' r.Height - 6);  	g.FillRectangle (dark' r.Left' r.Bottom - 1' r.Width' 1);  	break;  }  case BorderStyle2.Row: {  	var light = new SolidBrush (MixColors (BorderColor' Color.White' 1));  	var dark = new SolidBrush (MixColors (BorderColor' Color.Black' 0.4));  	g.FillRectangle (light' r.Left + 3' r.Top' r.Width - 6' 1);  	g.FillRectangle (light' r.Left' r.Top' 1' r.Height - 1);  	g.FillRectangle (dark' r.Right - 1' r.Top' 1' r.Height);  	g.FillRectangle (dark' r.Left + 3' r.Bottom - 1' r.Width - 6' 1);  	break;  }  }  
Magic Number,Alsing.Drawing,DrawingTools,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Drawing\DrawingTools.cs,DrawBorder,The following statement contains a magic number: switch (Style) {  case BorderStyle2.Dotted: {  	r.Width--;  	r.Height--;  	g.DrawRectangle (new Pen (SystemColors.Control)' r);  	var p = new Pen (BorderColor) {  		DashStyle = DashStyle.Dot  	};  	g.DrawRectangle (p' r);  	break;  }  case BorderStyle2.Dashed: {  	r.Width--;  	r.Height--;  	g.DrawRectangle (new Pen (SystemColors.Control)' r);  	var p = new Pen (BorderColor) {  		DashStyle = DashStyle.Dash  	};  	g.DrawRectangle (p' r);  	break;  }  case BorderStyle2.Sunken: {  	if (BorderColor == Color.Black)  		BorderColor = SystemColors.Control;  	//System.Windows.Forms.ControlPaint.DrawBorder3D (g'r'Border3DStyle.Sunken);  	DrawBorder (Border3DStyle.Sunken' BorderColor' g' r);  	break;  }  case BorderStyle2.FixedSingle: {  	r.Width--;  	r.Height--;  	g.DrawRectangle (new Pen (BorderColor)' r);  	break;  }  case BorderStyle2.FixedDouble: {  	g.DrawRectangle (new Pen (BorderColor)' r.Left' r.Top' r.Width - 1' r.Height - 1);  	g.DrawRectangle (new Pen (BorderColor)' r.Left + 1' r.Top + 1' r.Width - 3' r.Height - 3);  	break;  }  case BorderStyle2.Raised: {  	if (BorderColor == Color.Black)  		BorderColor = SystemColors.Control;  	DrawBorder (Border3DStyle.Raised' BorderColor' g' r);  	//System.Windows.Forms.ControlPaint.DrawBorder3D (g'r'Border3DStyle.Raised);  	break;  }  case BorderStyle2.RaisedThin: {  	if (BorderColor == Color.Black)  		BorderColor = Color.FromArgb (SystemColors.Control.R' SystemColors.Control.G' SystemColors.Control.B);  	DrawBorder (Border3DStyle.RaisedInner' BorderColor' g' r);  	//System.Windows.Forms.ControlPaint.DrawBorder3D (g'r'Border3DStyle.Raised);  	break;  }  case BorderStyle2.SunkenThin: {  	if (BorderColor == Color.Black)  		BorderColor = Color.FromArgb (SystemColors.Control.R' SystemColors.Control.G' SystemColors.Control.B);  	DrawBorder (Border3DStyle.SunkenOuter' BorderColor' g' r);  	//System.Windows.Forms.ControlPaint.DrawBorder3D (g'r'Border3DStyle.Raised);  	break;  }  case BorderStyle2.Etched: {  	ControlPaint.DrawBorder3D (g' r' Border3DStyle.Etched);  	break;  }  case BorderStyle2.Bump: {  	if (BorderColor == Color.Black)  		BorderColor = SystemColors.Control;  	var b = new SolidBrush (BorderColor);  	g.FillRectangle (b' r.Left' r.Top' r.Width' 4);  	g.FillRectangle (b' r.Left' r.Bottom - 4' r.Width' 4);  	g.FillRectangle (b' r.Left' r.Top' 4' r.Height);  	g.FillRectangle (b' r.Right - 4' r.Top' 4' r.Height);  	b.Dispose ();  	DrawBorder (Border3DStyle.Raised' BorderColor' g' r);  	DrawBorder (Border3DStyle.Sunken' BorderColor' g' new Rectangle (r.Left + 4' r.Top + 4' r.Width - 8' r.Height - 8));  	break;  }  case BorderStyle2.Column: {  	var light = new SolidBrush (MixColors (BorderColor' Color.White' 1));  	var dark = new SolidBrush (MixColors (BorderColor' Color.Black' 0.4));  	g.FillRectangle (light' r.Left' r.Top' r.Width' 1);  	g.FillRectangle (light' r.Left' r.Top + 3' 1' r.Height - 1 - 6);  	g.FillRectangle (dark' r.Right - 1' r.Top + 3' 1' r.Height - 6);  	g.FillRectangle (dark' r.Left' r.Bottom - 1' r.Width' 1);  	break;  }  case BorderStyle2.Row: {  	var light = new SolidBrush (MixColors (BorderColor' Color.White' 1));  	var dark = new SolidBrush (MixColors (BorderColor' Color.Black' 0.4));  	g.FillRectangle (light' r.Left + 3' r.Top' r.Width - 6' 1);  	g.FillRectangle (light' r.Left' r.Top' 1' r.Height - 1);  	g.FillRectangle (dark' r.Right - 1' r.Top' 1' r.Height);  	g.FillRectangle (dark' r.Left + 3' r.Bottom - 1' r.Width - 6' 1);  	break;  }  }  
Magic Number,Alsing.Drawing,DrawingTools,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Drawing\DrawingTools.cs,DrawBorder,The following statement contains a magic number: switch (Style) {  case BorderStyle2.Dotted: {  	r.Width--;  	r.Height--;  	g.DrawRectangle (new Pen (SystemColors.Control)' r);  	var p = new Pen (BorderColor) {  		DashStyle = DashStyle.Dot  	};  	g.DrawRectangle (p' r);  	break;  }  case BorderStyle2.Dashed: {  	r.Width--;  	r.Height--;  	g.DrawRectangle (new Pen (SystemColors.Control)' r);  	var p = new Pen (BorderColor) {  		DashStyle = DashStyle.Dash  	};  	g.DrawRectangle (p' r);  	break;  }  case BorderStyle2.Sunken: {  	if (BorderColor == Color.Black)  		BorderColor = SystemColors.Control;  	//System.Windows.Forms.ControlPaint.DrawBorder3D (g'r'Border3DStyle.Sunken);  	DrawBorder (Border3DStyle.Sunken' BorderColor' g' r);  	break;  }  case BorderStyle2.FixedSingle: {  	r.Width--;  	r.Height--;  	g.DrawRectangle (new Pen (BorderColor)' r);  	break;  }  case BorderStyle2.FixedDouble: {  	g.DrawRectangle (new Pen (BorderColor)' r.Left' r.Top' r.Width - 1' r.Height - 1);  	g.DrawRectangle (new Pen (BorderColor)' r.Left + 1' r.Top + 1' r.Width - 3' r.Height - 3);  	break;  }  case BorderStyle2.Raised: {  	if (BorderColor == Color.Black)  		BorderColor = SystemColors.Control;  	DrawBorder (Border3DStyle.Raised' BorderColor' g' r);  	//System.Windows.Forms.ControlPaint.DrawBorder3D (g'r'Border3DStyle.Raised);  	break;  }  case BorderStyle2.RaisedThin: {  	if (BorderColor == Color.Black)  		BorderColor = Color.FromArgb (SystemColors.Control.R' SystemColors.Control.G' SystemColors.Control.B);  	DrawBorder (Border3DStyle.RaisedInner' BorderColor' g' r);  	//System.Windows.Forms.ControlPaint.DrawBorder3D (g'r'Border3DStyle.Raised);  	break;  }  case BorderStyle2.SunkenThin: {  	if (BorderColor == Color.Black)  		BorderColor = Color.FromArgb (SystemColors.Control.R' SystemColors.Control.G' SystemColors.Control.B);  	DrawBorder (Border3DStyle.SunkenOuter' BorderColor' g' r);  	//System.Windows.Forms.ControlPaint.DrawBorder3D (g'r'Border3DStyle.Raised);  	break;  }  case BorderStyle2.Etched: {  	ControlPaint.DrawBorder3D (g' r' Border3DStyle.Etched);  	break;  }  case BorderStyle2.Bump: {  	if (BorderColor == Color.Black)  		BorderColor = SystemColors.Control;  	var b = new SolidBrush (BorderColor);  	g.FillRectangle (b' r.Left' r.Top' r.Width' 4);  	g.FillRectangle (b' r.Left' r.Bottom - 4' r.Width' 4);  	g.FillRectangle (b' r.Left' r.Top' 4' r.Height);  	g.FillRectangle (b' r.Right - 4' r.Top' 4' r.Height);  	b.Dispose ();  	DrawBorder (Border3DStyle.Raised' BorderColor' g' r);  	DrawBorder (Border3DStyle.Sunken' BorderColor' g' new Rectangle (r.Left + 4' r.Top + 4' r.Width - 8' r.Height - 8));  	break;  }  case BorderStyle2.Column: {  	var light = new SolidBrush (MixColors (BorderColor' Color.White' 1));  	var dark = new SolidBrush (MixColors (BorderColor' Color.Black' 0.4));  	g.FillRectangle (light' r.Left' r.Top' r.Width' 1);  	g.FillRectangle (light' r.Left' r.Top + 3' 1' r.Height - 1 - 6);  	g.FillRectangle (dark' r.Right - 1' r.Top + 3' 1' r.Height - 6);  	g.FillRectangle (dark' r.Left' r.Bottom - 1' r.Width' 1);  	break;  }  case BorderStyle2.Row: {  	var light = new SolidBrush (MixColors (BorderColor' Color.White' 1));  	var dark = new SolidBrush (MixColors (BorderColor' Color.Black' 0.4));  	g.FillRectangle (light' r.Left + 3' r.Top' r.Width - 6' 1);  	g.FillRectangle (light' r.Left' r.Top' 1' r.Height - 1);  	g.FillRectangle (dark' r.Right - 1' r.Top' 1' r.Height);  	g.FillRectangle (dark' r.Left + 3' r.Bottom - 1' r.Width - 6' 1);  	break;  }  }  
Magic Number,Alsing.Drawing,DrawingTools,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Drawing\DrawingTools.cs,DrawBorder,The following statement contains a magic number: switch (Style) {  case BorderStyle2.Dotted: {  	r.Width--;  	r.Height--;  	g.DrawRectangle (new Pen (SystemColors.Control)' r);  	var p = new Pen (BorderColor) {  		DashStyle = DashStyle.Dot  	};  	g.DrawRectangle (p' r);  	break;  }  case BorderStyle2.Dashed: {  	r.Width--;  	r.Height--;  	g.DrawRectangle (new Pen (SystemColors.Control)' r);  	var p = new Pen (BorderColor) {  		DashStyle = DashStyle.Dash  	};  	g.DrawRectangle (p' r);  	break;  }  case BorderStyle2.Sunken: {  	if (BorderColor == Color.Black)  		BorderColor = SystemColors.Control;  	//System.Windows.Forms.ControlPaint.DrawBorder3D (g'r'Border3DStyle.Sunken);  	DrawBorder (Border3DStyle.Sunken' BorderColor' g' r);  	break;  }  case BorderStyle2.FixedSingle: {  	r.Width--;  	r.Height--;  	g.DrawRectangle (new Pen (BorderColor)' r);  	break;  }  case BorderStyle2.FixedDouble: {  	g.DrawRectangle (new Pen (BorderColor)' r.Left' r.Top' r.Width - 1' r.Height - 1);  	g.DrawRectangle (new Pen (BorderColor)' r.Left + 1' r.Top + 1' r.Width - 3' r.Height - 3);  	break;  }  case BorderStyle2.Raised: {  	if (BorderColor == Color.Black)  		BorderColor = SystemColors.Control;  	DrawBorder (Border3DStyle.Raised' BorderColor' g' r);  	//System.Windows.Forms.ControlPaint.DrawBorder3D (g'r'Border3DStyle.Raised);  	break;  }  case BorderStyle2.RaisedThin: {  	if (BorderColor == Color.Black)  		BorderColor = Color.FromArgb (SystemColors.Control.R' SystemColors.Control.G' SystemColors.Control.B);  	DrawBorder (Border3DStyle.RaisedInner' BorderColor' g' r);  	//System.Windows.Forms.ControlPaint.DrawBorder3D (g'r'Border3DStyle.Raised);  	break;  }  case BorderStyle2.SunkenThin: {  	if (BorderColor == Color.Black)  		BorderColor = Color.FromArgb (SystemColors.Control.R' SystemColors.Control.G' SystemColors.Control.B);  	DrawBorder (Border3DStyle.SunkenOuter' BorderColor' g' r);  	//System.Windows.Forms.ControlPaint.DrawBorder3D (g'r'Border3DStyle.Raised);  	break;  }  case BorderStyle2.Etched: {  	ControlPaint.DrawBorder3D (g' r' Border3DStyle.Etched);  	break;  }  case BorderStyle2.Bump: {  	if (BorderColor == Color.Black)  		BorderColor = SystemColors.Control;  	var b = new SolidBrush (BorderColor);  	g.FillRectangle (b' r.Left' r.Top' r.Width' 4);  	g.FillRectangle (b' r.Left' r.Bottom - 4' r.Width' 4);  	g.FillRectangle (b' r.Left' r.Top' 4' r.Height);  	g.FillRectangle (b' r.Right - 4' r.Top' 4' r.Height);  	b.Dispose ();  	DrawBorder (Border3DStyle.Raised' BorderColor' g' r);  	DrawBorder (Border3DStyle.Sunken' BorderColor' g' new Rectangle (r.Left + 4' r.Top + 4' r.Width - 8' r.Height - 8));  	break;  }  case BorderStyle2.Column: {  	var light = new SolidBrush (MixColors (BorderColor' Color.White' 1));  	var dark = new SolidBrush (MixColors (BorderColor' Color.Black' 0.4));  	g.FillRectangle (light' r.Left' r.Top' r.Width' 1);  	g.FillRectangle (light' r.Left' r.Top + 3' 1' r.Height - 1 - 6);  	g.FillRectangle (dark' r.Right - 1' r.Top + 3' 1' r.Height - 6);  	g.FillRectangle (dark' r.Left' r.Bottom - 1' r.Width' 1);  	break;  }  case BorderStyle2.Row: {  	var light = new SolidBrush (MixColors (BorderColor' Color.White' 1));  	var dark = new SolidBrush (MixColors (BorderColor' Color.Black' 0.4));  	g.FillRectangle (light' r.Left + 3' r.Top' r.Width - 6' 1);  	g.FillRectangle (light' r.Left' r.Top' 1' r.Height - 1);  	g.FillRectangle (dark' r.Right - 1' r.Top' 1' r.Height);  	g.FillRectangle (dark' r.Left + 3' r.Bottom - 1' r.Width - 6' 1);  	break;  }  }  
Magic Number,Alsing.Drawing,DrawingTools,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Drawing\DrawingTools.cs,DrawBorder,The following statement contains a magic number: switch (Style) {  case BorderStyle2.Dotted: {  	r.Width--;  	r.Height--;  	g.DrawRectangle (new Pen (SystemColors.Control)' r);  	var p = new Pen (BorderColor) {  		DashStyle = DashStyle.Dot  	};  	g.DrawRectangle (p' r);  	break;  }  case BorderStyle2.Dashed: {  	r.Width--;  	r.Height--;  	g.DrawRectangle (new Pen (SystemColors.Control)' r);  	var p = new Pen (BorderColor) {  		DashStyle = DashStyle.Dash  	};  	g.DrawRectangle (p' r);  	break;  }  case BorderStyle2.Sunken: {  	if (BorderColor == Color.Black)  		BorderColor = SystemColors.Control;  	//System.Windows.Forms.ControlPaint.DrawBorder3D (g'r'Border3DStyle.Sunken);  	DrawBorder (Border3DStyle.Sunken' BorderColor' g' r);  	break;  }  case BorderStyle2.FixedSingle: {  	r.Width--;  	r.Height--;  	g.DrawRectangle (new Pen (BorderColor)' r);  	break;  }  case BorderStyle2.FixedDouble: {  	g.DrawRectangle (new Pen (BorderColor)' r.Left' r.Top' r.Width - 1' r.Height - 1);  	g.DrawRectangle (new Pen (BorderColor)' r.Left + 1' r.Top + 1' r.Width - 3' r.Height - 3);  	break;  }  case BorderStyle2.Raised: {  	if (BorderColor == Color.Black)  		BorderColor = SystemColors.Control;  	DrawBorder (Border3DStyle.Raised' BorderColor' g' r);  	//System.Windows.Forms.ControlPaint.DrawBorder3D (g'r'Border3DStyle.Raised);  	break;  }  case BorderStyle2.RaisedThin: {  	if (BorderColor == Color.Black)  		BorderColor = Color.FromArgb (SystemColors.Control.R' SystemColors.Control.G' SystemColors.Control.B);  	DrawBorder (Border3DStyle.RaisedInner' BorderColor' g' r);  	//System.Windows.Forms.ControlPaint.DrawBorder3D (g'r'Border3DStyle.Raised);  	break;  }  case BorderStyle2.SunkenThin: {  	if (BorderColor == Color.Black)  		BorderColor = Color.FromArgb (SystemColors.Control.R' SystemColors.Control.G' SystemColors.Control.B);  	DrawBorder (Border3DStyle.SunkenOuter' BorderColor' g' r);  	//System.Windows.Forms.ControlPaint.DrawBorder3D (g'r'Border3DStyle.Raised);  	break;  }  case BorderStyle2.Etched: {  	ControlPaint.DrawBorder3D (g' r' Border3DStyle.Etched);  	break;  }  case BorderStyle2.Bump: {  	if (BorderColor == Color.Black)  		BorderColor = SystemColors.Control;  	var b = new SolidBrush (BorderColor);  	g.FillRectangle (b' r.Left' r.Top' r.Width' 4);  	g.FillRectangle (b' r.Left' r.Bottom - 4' r.Width' 4);  	g.FillRectangle (b' r.Left' r.Top' 4' r.Height);  	g.FillRectangle (b' r.Right - 4' r.Top' 4' r.Height);  	b.Dispose ();  	DrawBorder (Border3DStyle.Raised' BorderColor' g' r);  	DrawBorder (Border3DStyle.Sunken' BorderColor' g' new Rectangle (r.Left + 4' r.Top + 4' r.Width - 8' r.Height - 8));  	break;  }  case BorderStyle2.Column: {  	var light = new SolidBrush (MixColors (BorderColor' Color.White' 1));  	var dark = new SolidBrush (MixColors (BorderColor' Color.Black' 0.4));  	g.FillRectangle (light' r.Left' r.Top' r.Width' 1);  	g.FillRectangle (light' r.Left' r.Top + 3' 1' r.Height - 1 - 6);  	g.FillRectangle (dark' r.Right - 1' r.Top + 3' 1' r.Height - 6);  	g.FillRectangle (dark' r.Left' r.Bottom - 1' r.Width' 1);  	break;  }  case BorderStyle2.Row: {  	var light = new SolidBrush (MixColors (BorderColor' Color.White' 1));  	var dark = new SolidBrush (MixColors (BorderColor' Color.Black' 0.4));  	g.FillRectangle (light' r.Left + 3' r.Top' r.Width - 6' 1);  	g.FillRectangle (light' r.Left' r.Top' 1' r.Height - 1);  	g.FillRectangle (dark' r.Right - 1' r.Top' 1' r.Height);  	g.FillRectangle (dark' r.Left + 3' r.Bottom - 1' r.Width - 6' 1);  	break;  }  }  
Magic Number,Alsing.Drawing,DrawingTools,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Drawing\DrawingTools.cs,DrawBorder,The following statement contains a magic number: switch (Style) {  case BorderStyle2.Dotted: {  	r.Width--;  	r.Height--;  	g.DrawRectangle (new Pen (SystemColors.Control)' r);  	var p = new Pen (BorderColor) {  		DashStyle = DashStyle.Dot  	};  	g.DrawRectangle (p' r);  	break;  }  case BorderStyle2.Dashed: {  	r.Width--;  	r.Height--;  	g.DrawRectangle (new Pen (SystemColors.Control)' r);  	var p = new Pen (BorderColor) {  		DashStyle = DashStyle.Dash  	};  	g.DrawRectangle (p' r);  	break;  }  case BorderStyle2.Sunken: {  	if (BorderColor == Color.Black)  		BorderColor = SystemColors.Control;  	//System.Windows.Forms.ControlPaint.DrawBorder3D (g'r'Border3DStyle.Sunken);  	DrawBorder (Border3DStyle.Sunken' BorderColor' g' r);  	break;  }  case BorderStyle2.FixedSingle: {  	r.Width--;  	r.Height--;  	g.DrawRectangle (new Pen (BorderColor)' r);  	break;  }  case BorderStyle2.FixedDouble: {  	g.DrawRectangle (new Pen (BorderColor)' r.Left' r.Top' r.Width - 1' r.Height - 1);  	g.DrawRectangle (new Pen (BorderColor)' r.Left + 1' r.Top + 1' r.Width - 3' r.Height - 3);  	break;  }  case BorderStyle2.Raised: {  	if (BorderColor == Color.Black)  		BorderColor = SystemColors.Control;  	DrawBorder (Border3DStyle.Raised' BorderColor' g' r);  	//System.Windows.Forms.ControlPaint.DrawBorder3D (g'r'Border3DStyle.Raised);  	break;  }  case BorderStyle2.RaisedThin: {  	if (BorderColor == Color.Black)  		BorderColor = Color.FromArgb (SystemColors.Control.R' SystemColors.Control.G' SystemColors.Control.B);  	DrawBorder (Border3DStyle.RaisedInner' BorderColor' g' r);  	//System.Windows.Forms.ControlPaint.DrawBorder3D (g'r'Border3DStyle.Raised);  	break;  }  case BorderStyle2.SunkenThin: {  	if (BorderColor == Color.Black)  		BorderColor = Color.FromArgb (SystemColors.Control.R' SystemColors.Control.G' SystemColors.Control.B);  	DrawBorder (Border3DStyle.SunkenOuter' BorderColor' g' r);  	//System.Windows.Forms.ControlPaint.DrawBorder3D (g'r'Border3DStyle.Raised);  	break;  }  case BorderStyle2.Etched: {  	ControlPaint.DrawBorder3D (g' r' Border3DStyle.Etched);  	break;  }  case BorderStyle2.Bump: {  	if (BorderColor == Color.Black)  		BorderColor = SystemColors.Control;  	var b = new SolidBrush (BorderColor);  	g.FillRectangle (b' r.Left' r.Top' r.Width' 4);  	g.FillRectangle (b' r.Left' r.Bottom - 4' r.Width' 4);  	g.FillRectangle (b' r.Left' r.Top' 4' r.Height);  	g.FillRectangle (b' r.Right - 4' r.Top' 4' r.Height);  	b.Dispose ();  	DrawBorder (Border3DStyle.Raised' BorderColor' g' r);  	DrawBorder (Border3DStyle.Sunken' BorderColor' g' new Rectangle (r.Left + 4' r.Top + 4' r.Width - 8' r.Height - 8));  	break;  }  case BorderStyle2.Column: {  	var light = new SolidBrush (MixColors (BorderColor' Color.White' 1));  	var dark = new SolidBrush (MixColors (BorderColor' Color.Black' 0.4));  	g.FillRectangle (light' r.Left' r.Top' r.Width' 1);  	g.FillRectangle (light' r.Left' r.Top + 3' 1' r.Height - 1 - 6);  	g.FillRectangle (dark' r.Right - 1' r.Top + 3' 1' r.Height - 6);  	g.FillRectangle (dark' r.Left' r.Bottom - 1' r.Width' 1);  	break;  }  case BorderStyle2.Row: {  	var light = new SolidBrush (MixColors (BorderColor' Color.White' 1));  	var dark = new SolidBrush (MixColors (BorderColor' Color.Black' 0.4));  	g.FillRectangle (light' r.Left + 3' r.Top' r.Width - 6' 1);  	g.FillRectangle (light' r.Left' r.Top' 1' r.Height - 1);  	g.FillRectangle (dark' r.Right - 1' r.Top' 1' r.Height);  	g.FillRectangle (dark' r.Left + 3' r.Bottom - 1' r.Width - 6' 1);  	break;  }  }  
Magic Number,Alsing.Drawing,DrawingTools,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Drawing\DrawingTools.cs,DrawBorder,The following statement contains a magic number: switch (Style) {  case BorderStyle2.Dotted: {  	r.Width--;  	r.Height--;  	g.DrawRectangle (new Pen (SystemColors.Control)' r);  	var p = new Pen (BorderColor) {  		DashStyle = DashStyle.Dot  	};  	g.DrawRectangle (p' r);  	break;  }  case BorderStyle2.Dashed: {  	r.Width--;  	r.Height--;  	g.DrawRectangle (new Pen (SystemColors.Control)' r);  	var p = new Pen (BorderColor) {  		DashStyle = DashStyle.Dash  	};  	g.DrawRectangle (p' r);  	break;  }  case BorderStyle2.Sunken: {  	if (BorderColor == Color.Black)  		BorderColor = SystemColors.Control;  	//System.Windows.Forms.ControlPaint.DrawBorder3D (g'r'Border3DStyle.Sunken);  	DrawBorder (Border3DStyle.Sunken' BorderColor' g' r);  	break;  }  case BorderStyle2.FixedSingle: {  	r.Width--;  	r.Height--;  	g.DrawRectangle (new Pen (BorderColor)' r);  	break;  }  case BorderStyle2.FixedDouble: {  	g.DrawRectangle (new Pen (BorderColor)' r.Left' r.Top' r.Width - 1' r.Height - 1);  	g.DrawRectangle (new Pen (BorderColor)' r.Left + 1' r.Top + 1' r.Width - 3' r.Height - 3);  	break;  }  case BorderStyle2.Raised: {  	if (BorderColor == Color.Black)  		BorderColor = SystemColors.Control;  	DrawBorder (Border3DStyle.Raised' BorderColor' g' r);  	//System.Windows.Forms.ControlPaint.DrawBorder3D (g'r'Border3DStyle.Raised);  	break;  }  case BorderStyle2.RaisedThin: {  	if (BorderColor == Color.Black)  		BorderColor = Color.FromArgb (SystemColors.Control.R' SystemColors.Control.G' SystemColors.Control.B);  	DrawBorder (Border3DStyle.RaisedInner' BorderColor' g' r);  	//System.Windows.Forms.ControlPaint.DrawBorder3D (g'r'Border3DStyle.Raised);  	break;  }  case BorderStyle2.SunkenThin: {  	if (BorderColor == Color.Black)  		BorderColor = Color.FromArgb (SystemColors.Control.R' SystemColors.Control.G' SystemColors.Control.B);  	DrawBorder (Border3DStyle.SunkenOuter' BorderColor' g' r);  	//System.Windows.Forms.ControlPaint.DrawBorder3D (g'r'Border3DStyle.Raised);  	break;  }  case BorderStyle2.Etched: {  	ControlPaint.DrawBorder3D (g' r' Border3DStyle.Etched);  	break;  }  case BorderStyle2.Bump: {  	if (BorderColor == Color.Black)  		BorderColor = SystemColors.Control;  	var b = new SolidBrush (BorderColor);  	g.FillRectangle (b' r.Left' r.Top' r.Width' 4);  	g.FillRectangle (b' r.Left' r.Bottom - 4' r.Width' 4);  	g.FillRectangle (b' r.Left' r.Top' 4' r.Height);  	g.FillRectangle (b' r.Right - 4' r.Top' 4' r.Height);  	b.Dispose ();  	DrawBorder (Border3DStyle.Raised' BorderColor' g' r);  	DrawBorder (Border3DStyle.Sunken' BorderColor' g' new Rectangle (r.Left + 4' r.Top + 4' r.Width - 8' r.Height - 8));  	break;  }  case BorderStyle2.Column: {  	var light = new SolidBrush (MixColors (BorderColor' Color.White' 1));  	var dark = new SolidBrush (MixColors (BorderColor' Color.Black' 0.4));  	g.FillRectangle (light' r.Left' r.Top' r.Width' 1);  	g.FillRectangle (light' r.Left' r.Top + 3' 1' r.Height - 1 - 6);  	g.FillRectangle (dark' r.Right - 1' r.Top + 3' 1' r.Height - 6);  	g.FillRectangle (dark' r.Left' r.Bottom - 1' r.Width' 1);  	break;  }  case BorderStyle2.Row: {  	var light = new SolidBrush (MixColors (BorderColor' Color.White' 1));  	var dark = new SolidBrush (MixColors (BorderColor' Color.Black' 0.4));  	g.FillRectangle (light' r.Left + 3' r.Top' r.Width - 6' 1);  	g.FillRectangle (light' r.Left' r.Top' 1' r.Height - 1);  	g.FillRectangle (dark' r.Right - 1' r.Top' 1' r.Height);  	g.FillRectangle (dark' r.Left + 3' r.Bottom - 1' r.Width - 6' 1);  	break;  }  }  
Magic Number,Alsing.Drawing,DrawingTools,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Drawing\DrawingTools.cs,DrawBorder,The following statement contains a magic number: switch (Style) {  case BorderStyle2.Dotted: {  	r.Width--;  	r.Height--;  	g.DrawRectangle (new Pen (SystemColors.Control)' r);  	var p = new Pen (BorderColor) {  		DashStyle = DashStyle.Dot  	};  	g.DrawRectangle (p' r);  	break;  }  case BorderStyle2.Dashed: {  	r.Width--;  	r.Height--;  	g.DrawRectangle (new Pen (SystemColors.Control)' r);  	var p = new Pen (BorderColor) {  		DashStyle = DashStyle.Dash  	};  	g.DrawRectangle (p' r);  	break;  }  case BorderStyle2.Sunken: {  	if (BorderColor == Color.Black)  		BorderColor = SystemColors.Control;  	//System.Windows.Forms.ControlPaint.DrawBorder3D (g'r'Border3DStyle.Sunken);  	DrawBorder (Border3DStyle.Sunken' BorderColor' g' r);  	break;  }  case BorderStyle2.FixedSingle: {  	r.Width--;  	r.Height--;  	g.DrawRectangle (new Pen (BorderColor)' r);  	break;  }  case BorderStyle2.FixedDouble: {  	g.DrawRectangle (new Pen (BorderColor)' r.Left' r.Top' r.Width - 1' r.Height - 1);  	g.DrawRectangle (new Pen (BorderColor)' r.Left + 1' r.Top + 1' r.Width - 3' r.Height - 3);  	break;  }  case BorderStyle2.Raised: {  	if (BorderColor == Color.Black)  		BorderColor = SystemColors.Control;  	DrawBorder (Border3DStyle.Raised' BorderColor' g' r);  	//System.Windows.Forms.ControlPaint.DrawBorder3D (g'r'Border3DStyle.Raised);  	break;  }  case BorderStyle2.RaisedThin: {  	if (BorderColor == Color.Black)  		BorderColor = Color.FromArgb (SystemColors.Control.R' SystemColors.Control.G' SystemColors.Control.B);  	DrawBorder (Border3DStyle.RaisedInner' BorderColor' g' r);  	//System.Windows.Forms.ControlPaint.DrawBorder3D (g'r'Border3DStyle.Raised);  	break;  }  case BorderStyle2.SunkenThin: {  	if (BorderColor == Color.Black)  		BorderColor = Color.FromArgb (SystemColors.Control.R' SystemColors.Control.G' SystemColors.Control.B);  	DrawBorder (Border3DStyle.SunkenOuter' BorderColor' g' r);  	//System.Windows.Forms.ControlPaint.DrawBorder3D (g'r'Border3DStyle.Raised);  	break;  }  case BorderStyle2.Etched: {  	ControlPaint.DrawBorder3D (g' r' Border3DStyle.Etched);  	break;  }  case BorderStyle2.Bump: {  	if (BorderColor == Color.Black)  		BorderColor = SystemColors.Control;  	var b = new SolidBrush (BorderColor);  	g.FillRectangle (b' r.Left' r.Top' r.Width' 4);  	g.FillRectangle (b' r.Left' r.Bottom - 4' r.Width' 4);  	g.FillRectangle (b' r.Left' r.Top' 4' r.Height);  	g.FillRectangle (b' r.Right - 4' r.Top' 4' r.Height);  	b.Dispose ();  	DrawBorder (Border3DStyle.Raised' BorderColor' g' r);  	DrawBorder (Border3DStyle.Sunken' BorderColor' g' new Rectangle (r.Left + 4' r.Top + 4' r.Width - 8' r.Height - 8));  	break;  }  case BorderStyle2.Column: {  	var light = new SolidBrush (MixColors (BorderColor' Color.White' 1));  	var dark = new SolidBrush (MixColors (BorderColor' Color.Black' 0.4));  	g.FillRectangle (light' r.Left' r.Top' r.Width' 1);  	g.FillRectangle (light' r.Left' r.Top + 3' 1' r.Height - 1 - 6);  	g.FillRectangle (dark' r.Right - 1' r.Top + 3' 1' r.Height - 6);  	g.FillRectangle (dark' r.Left' r.Bottom - 1' r.Width' 1);  	break;  }  case BorderStyle2.Row: {  	var light = new SolidBrush (MixColors (BorderColor' Color.White' 1));  	var dark = new SolidBrush (MixColors (BorderColor' Color.Black' 0.4));  	g.FillRectangle (light' r.Left + 3' r.Top' r.Width - 6' 1);  	g.FillRectangle (light' r.Left' r.Top' 1' r.Height - 1);  	g.FillRectangle (dark' r.Right - 1' r.Top' 1' r.Height);  	g.FillRectangle (dark' r.Left + 3' r.Bottom - 1' r.Width - 6' 1);  	break;  }  }  
Magic Number,Alsing.Drawing,DrawingTools,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Drawing\DrawingTools.cs,DrawBorder,The following statement contains a magic number: switch (Style) {  case BorderStyle2.Dotted: {  	r.Width--;  	r.Height--;  	g.DrawRectangle (new Pen (SystemColors.Control)' r);  	var p = new Pen (BorderColor) {  		DashStyle = DashStyle.Dot  	};  	g.DrawRectangle (p' r);  	break;  }  case BorderStyle2.Dashed: {  	r.Width--;  	r.Height--;  	g.DrawRectangle (new Pen (SystemColors.Control)' r);  	var p = new Pen (BorderColor) {  		DashStyle = DashStyle.Dash  	};  	g.DrawRectangle (p' r);  	break;  }  case BorderStyle2.Sunken: {  	if (BorderColor == Color.Black)  		BorderColor = SystemColors.Control;  	//System.Windows.Forms.ControlPaint.DrawBorder3D (g'r'Border3DStyle.Sunken);  	DrawBorder (Border3DStyle.Sunken' BorderColor' g' r);  	break;  }  case BorderStyle2.FixedSingle: {  	r.Width--;  	r.Height--;  	g.DrawRectangle (new Pen (BorderColor)' r);  	break;  }  case BorderStyle2.FixedDouble: {  	g.DrawRectangle (new Pen (BorderColor)' r.Left' r.Top' r.Width - 1' r.Height - 1);  	g.DrawRectangle (new Pen (BorderColor)' r.Left + 1' r.Top + 1' r.Width - 3' r.Height - 3);  	break;  }  case BorderStyle2.Raised: {  	if (BorderColor == Color.Black)  		BorderColor = SystemColors.Control;  	DrawBorder (Border3DStyle.Raised' BorderColor' g' r);  	//System.Windows.Forms.ControlPaint.DrawBorder3D (g'r'Border3DStyle.Raised);  	break;  }  case BorderStyle2.RaisedThin: {  	if (BorderColor == Color.Black)  		BorderColor = Color.FromArgb (SystemColors.Control.R' SystemColors.Control.G' SystemColors.Control.B);  	DrawBorder (Border3DStyle.RaisedInner' BorderColor' g' r);  	//System.Windows.Forms.ControlPaint.DrawBorder3D (g'r'Border3DStyle.Raised);  	break;  }  case BorderStyle2.SunkenThin: {  	if (BorderColor == Color.Black)  		BorderColor = Color.FromArgb (SystemColors.Control.R' SystemColors.Control.G' SystemColors.Control.B);  	DrawBorder (Border3DStyle.SunkenOuter' BorderColor' g' r);  	//System.Windows.Forms.ControlPaint.DrawBorder3D (g'r'Border3DStyle.Raised);  	break;  }  case BorderStyle2.Etched: {  	ControlPaint.DrawBorder3D (g' r' Border3DStyle.Etched);  	break;  }  case BorderStyle2.Bump: {  	if (BorderColor == Color.Black)  		BorderColor = SystemColors.Control;  	var b = new SolidBrush (BorderColor);  	g.FillRectangle (b' r.Left' r.Top' r.Width' 4);  	g.FillRectangle (b' r.Left' r.Bottom - 4' r.Width' 4);  	g.FillRectangle (b' r.Left' r.Top' 4' r.Height);  	g.FillRectangle (b' r.Right - 4' r.Top' 4' r.Height);  	b.Dispose ();  	DrawBorder (Border3DStyle.Raised' BorderColor' g' r);  	DrawBorder (Border3DStyle.Sunken' BorderColor' g' new Rectangle (r.Left + 4' r.Top + 4' r.Width - 8' r.Height - 8));  	break;  }  case BorderStyle2.Column: {  	var light = new SolidBrush (MixColors (BorderColor' Color.White' 1));  	var dark = new SolidBrush (MixColors (BorderColor' Color.Black' 0.4));  	g.FillRectangle (light' r.Left' r.Top' r.Width' 1);  	g.FillRectangle (light' r.Left' r.Top + 3' 1' r.Height - 1 - 6);  	g.FillRectangle (dark' r.Right - 1' r.Top + 3' 1' r.Height - 6);  	g.FillRectangle (dark' r.Left' r.Bottom - 1' r.Width' 1);  	break;  }  case BorderStyle2.Row: {  	var light = new SolidBrush (MixColors (BorderColor' Color.White' 1));  	var dark = new SolidBrush (MixColors (BorderColor' Color.Black' 0.4));  	g.FillRectangle (light' r.Left + 3' r.Top' r.Width - 6' 1);  	g.FillRectangle (light' r.Left' r.Top' 1' r.Height - 1);  	g.FillRectangle (dark' r.Right - 1' r.Top' 1' r.Height);  	g.FillRectangle (dark' r.Left + 3' r.Bottom - 1' r.Width - 6' 1);  	break;  }  }  
Magic Number,Alsing.Drawing,DrawingTools,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Drawing\DrawingTools.cs,DrawBorder,The following statement contains a magic number: switch (Style) {  case BorderStyle2.Dotted: {  	r.Width--;  	r.Height--;  	g.DrawRectangle (new Pen (SystemColors.Control)' r);  	var p = new Pen (BorderColor) {  		DashStyle = DashStyle.Dot  	};  	g.DrawRectangle (p' r);  	break;  }  case BorderStyle2.Dashed: {  	r.Width--;  	r.Height--;  	g.DrawRectangle (new Pen (SystemColors.Control)' r);  	var p = new Pen (BorderColor) {  		DashStyle = DashStyle.Dash  	};  	g.DrawRectangle (p' r);  	break;  }  case BorderStyle2.Sunken: {  	if (BorderColor == Color.Black)  		BorderColor = SystemColors.Control;  	//System.Windows.Forms.ControlPaint.DrawBorder3D (g'r'Border3DStyle.Sunken);  	DrawBorder (Border3DStyle.Sunken' BorderColor' g' r);  	break;  }  case BorderStyle2.FixedSingle: {  	r.Width--;  	r.Height--;  	g.DrawRectangle (new Pen (BorderColor)' r);  	break;  }  case BorderStyle2.FixedDouble: {  	g.DrawRectangle (new Pen (BorderColor)' r.Left' r.Top' r.Width - 1' r.Height - 1);  	g.DrawRectangle (new Pen (BorderColor)' r.Left + 1' r.Top + 1' r.Width - 3' r.Height - 3);  	break;  }  case BorderStyle2.Raised: {  	if (BorderColor == Color.Black)  		BorderColor = SystemColors.Control;  	DrawBorder (Border3DStyle.Raised' BorderColor' g' r);  	//System.Windows.Forms.ControlPaint.DrawBorder3D (g'r'Border3DStyle.Raised);  	break;  }  case BorderStyle2.RaisedThin: {  	if (BorderColor == Color.Black)  		BorderColor = Color.FromArgb (SystemColors.Control.R' SystemColors.Control.G' SystemColors.Control.B);  	DrawBorder (Border3DStyle.RaisedInner' BorderColor' g' r);  	//System.Windows.Forms.ControlPaint.DrawBorder3D (g'r'Border3DStyle.Raised);  	break;  }  case BorderStyle2.SunkenThin: {  	if (BorderColor == Color.Black)  		BorderColor = Color.FromArgb (SystemColors.Control.R' SystemColors.Control.G' SystemColors.Control.B);  	DrawBorder (Border3DStyle.SunkenOuter' BorderColor' g' r);  	//System.Windows.Forms.ControlPaint.DrawBorder3D (g'r'Border3DStyle.Raised);  	break;  }  case BorderStyle2.Etched: {  	ControlPaint.DrawBorder3D (g' r' Border3DStyle.Etched);  	break;  }  case BorderStyle2.Bump: {  	if (BorderColor == Color.Black)  		BorderColor = SystemColors.Control;  	var b = new SolidBrush (BorderColor);  	g.FillRectangle (b' r.Left' r.Top' r.Width' 4);  	g.FillRectangle (b' r.Left' r.Bottom - 4' r.Width' 4);  	g.FillRectangle (b' r.Left' r.Top' 4' r.Height);  	g.FillRectangle (b' r.Right - 4' r.Top' 4' r.Height);  	b.Dispose ();  	DrawBorder (Border3DStyle.Raised' BorderColor' g' r);  	DrawBorder (Border3DStyle.Sunken' BorderColor' g' new Rectangle (r.Left + 4' r.Top + 4' r.Width - 8' r.Height - 8));  	break;  }  case BorderStyle2.Column: {  	var light = new SolidBrush (MixColors (BorderColor' Color.White' 1));  	var dark = new SolidBrush (MixColors (BorderColor' Color.Black' 0.4));  	g.FillRectangle (light' r.Left' r.Top' r.Width' 1);  	g.FillRectangle (light' r.Left' r.Top + 3' 1' r.Height - 1 - 6);  	g.FillRectangle (dark' r.Right - 1' r.Top + 3' 1' r.Height - 6);  	g.FillRectangle (dark' r.Left' r.Bottom - 1' r.Width' 1);  	break;  }  case BorderStyle2.Row: {  	var light = new SolidBrush (MixColors (BorderColor' Color.White' 1));  	var dark = new SolidBrush (MixColors (BorderColor' Color.Black' 0.4));  	g.FillRectangle (light' r.Left + 3' r.Top' r.Width - 6' 1);  	g.FillRectangle (light' r.Left' r.Top' 1' r.Height - 1);  	g.FillRectangle (dark' r.Right - 1' r.Top' 1' r.Height);  	g.FillRectangle (dark' r.Left + 3' r.Bottom - 1' r.Width - 6' 1);  	break;  }  }  
Magic Number,Alsing.Drawing,DrawingTools,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Drawing\DrawingTools.cs,DrawBorder,The following statement contains a magic number: switch (Style) {  case BorderStyle2.Dotted: {  	r.Width--;  	r.Height--;  	g.DrawRectangle (new Pen (SystemColors.Control)' r);  	var p = new Pen (BorderColor) {  		DashStyle = DashStyle.Dot  	};  	g.DrawRectangle (p' r);  	break;  }  case BorderStyle2.Dashed: {  	r.Width--;  	r.Height--;  	g.DrawRectangle (new Pen (SystemColors.Control)' r);  	var p = new Pen (BorderColor) {  		DashStyle = DashStyle.Dash  	};  	g.DrawRectangle (p' r);  	break;  }  case BorderStyle2.Sunken: {  	if (BorderColor == Color.Black)  		BorderColor = SystemColors.Control;  	//System.Windows.Forms.ControlPaint.DrawBorder3D (g'r'Border3DStyle.Sunken);  	DrawBorder (Border3DStyle.Sunken' BorderColor' g' r);  	break;  }  case BorderStyle2.FixedSingle: {  	r.Width--;  	r.Height--;  	g.DrawRectangle (new Pen (BorderColor)' r);  	break;  }  case BorderStyle2.FixedDouble: {  	g.DrawRectangle (new Pen (BorderColor)' r.Left' r.Top' r.Width - 1' r.Height - 1);  	g.DrawRectangle (new Pen (BorderColor)' r.Left + 1' r.Top + 1' r.Width - 3' r.Height - 3);  	break;  }  case BorderStyle2.Raised: {  	if (BorderColor == Color.Black)  		BorderColor = SystemColors.Control;  	DrawBorder (Border3DStyle.Raised' BorderColor' g' r);  	//System.Windows.Forms.ControlPaint.DrawBorder3D (g'r'Border3DStyle.Raised);  	break;  }  case BorderStyle2.RaisedThin: {  	if (BorderColor == Color.Black)  		BorderColor = Color.FromArgb (SystemColors.Control.R' SystemColors.Control.G' SystemColors.Control.B);  	DrawBorder (Border3DStyle.RaisedInner' BorderColor' g' r);  	//System.Windows.Forms.ControlPaint.DrawBorder3D (g'r'Border3DStyle.Raised);  	break;  }  case BorderStyle2.SunkenThin: {  	if (BorderColor == Color.Black)  		BorderColor = Color.FromArgb (SystemColors.Control.R' SystemColors.Control.G' SystemColors.Control.B);  	DrawBorder (Border3DStyle.SunkenOuter' BorderColor' g' r);  	//System.Windows.Forms.ControlPaint.DrawBorder3D (g'r'Border3DStyle.Raised);  	break;  }  case BorderStyle2.Etched: {  	ControlPaint.DrawBorder3D (g' r' Border3DStyle.Etched);  	break;  }  case BorderStyle2.Bump: {  	if (BorderColor == Color.Black)  		BorderColor = SystemColors.Control;  	var b = new SolidBrush (BorderColor);  	g.FillRectangle (b' r.Left' r.Top' r.Width' 4);  	g.FillRectangle (b' r.Left' r.Bottom - 4' r.Width' 4);  	g.FillRectangle (b' r.Left' r.Top' 4' r.Height);  	g.FillRectangle (b' r.Right - 4' r.Top' 4' r.Height);  	b.Dispose ();  	DrawBorder (Border3DStyle.Raised' BorderColor' g' r);  	DrawBorder (Border3DStyle.Sunken' BorderColor' g' new Rectangle (r.Left + 4' r.Top + 4' r.Width - 8' r.Height - 8));  	break;  }  case BorderStyle2.Column: {  	var light = new SolidBrush (MixColors (BorderColor' Color.White' 1));  	var dark = new SolidBrush (MixColors (BorderColor' Color.Black' 0.4));  	g.FillRectangle (light' r.Left' r.Top' r.Width' 1);  	g.FillRectangle (light' r.Left' r.Top + 3' 1' r.Height - 1 - 6);  	g.FillRectangle (dark' r.Right - 1' r.Top + 3' 1' r.Height - 6);  	g.FillRectangle (dark' r.Left' r.Bottom - 1' r.Width' 1);  	break;  }  case BorderStyle2.Row: {  	var light = new SolidBrush (MixColors (BorderColor' Color.White' 1));  	var dark = new SolidBrush (MixColors (BorderColor' Color.Black' 0.4));  	g.FillRectangle (light' r.Left + 3' r.Top' r.Width - 6' 1);  	g.FillRectangle (light' r.Left' r.Top' 1' r.Height - 1);  	g.FillRectangle (dark' r.Right - 1' r.Top' 1' r.Height);  	g.FillRectangle (dark' r.Left + 3' r.Bottom - 1' r.Width - 6' 1);  	break;  }  }  
Magic Number,Alsing.Drawing,DrawingTools,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Drawing\DrawingTools.cs,DrawBorder,The following statement contains a magic number: switch (Style) {  case BorderStyle2.Dotted: {  	r.Width--;  	r.Height--;  	g.DrawRectangle (new Pen (SystemColors.Control)' r);  	var p = new Pen (BorderColor) {  		DashStyle = DashStyle.Dot  	};  	g.DrawRectangle (p' r);  	break;  }  case BorderStyle2.Dashed: {  	r.Width--;  	r.Height--;  	g.DrawRectangle (new Pen (SystemColors.Control)' r);  	var p = new Pen (BorderColor) {  		DashStyle = DashStyle.Dash  	};  	g.DrawRectangle (p' r);  	break;  }  case BorderStyle2.Sunken: {  	if (BorderColor == Color.Black)  		BorderColor = SystemColors.Control;  	//System.Windows.Forms.ControlPaint.DrawBorder3D (g'r'Border3DStyle.Sunken);  	DrawBorder (Border3DStyle.Sunken' BorderColor' g' r);  	break;  }  case BorderStyle2.FixedSingle: {  	r.Width--;  	r.Height--;  	g.DrawRectangle (new Pen (BorderColor)' r);  	break;  }  case BorderStyle2.FixedDouble: {  	g.DrawRectangle (new Pen (BorderColor)' r.Left' r.Top' r.Width - 1' r.Height - 1);  	g.DrawRectangle (new Pen (BorderColor)' r.Left + 1' r.Top + 1' r.Width - 3' r.Height - 3);  	break;  }  case BorderStyle2.Raised: {  	if (BorderColor == Color.Black)  		BorderColor = SystemColors.Control;  	DrawBorder (Border3DStyle.Raised' BorderColor' g' r);  	//System.Windows.Forms.ControlPaint.DrawBorder3D (g'r'Border3DStyle.Raised);  	break;  }  case BorderStyle2.RaisedThin: {  	if (BorderColor == Color.Black)  		BorderColor = Color.FromArgb (SystemColors.Control.R' SystemColors.Control.G' SystemColors.Control.B);  	DrawBorder (Border3DStyle.RaisedInner' BorderColor' g' r);  	//System.Windows.Forms.ControlPaint.DrawBorder3D (g'r'Border3DStyle.Raised);  	break;  }  case BorderStyle2.SunkenThin: {  	if (BorderColor == Color.Black)  		BorderColor = Color.FromArgb (SystemColors.Control.R' SystemColors.Control.G' SystemColors.Control.B);  	DrawBorder (Border3DStyle.SunkenOuter' BorderColor' g' r);  	//System.Windows.Forms.ControlPaint.DrawBorder3D (g'r'Border3DStyle.Raised);  	break;  }  case BorderStyle2.Etched: {  	ControlPaint.DrawBorder3D (g' r' Border3DStyle.Etched);  	break;  }  case BorderStyle2.Bump: {  	if (BorderColor == Color.Black)  		BorderColor = SystemColors.Control;  	var b = new SolidBrush (BorderColor);  	g.FillRectangle (b' r.Left' r.Top' r.Width' 4);  	g.FillRectangle (b' r.Left' r.Bottom - 4' r.Width' 4);  	g.FillRectangle (b' r.Left' r.Top' 4' r.Height);  	g.FillRectangle (b' r.Right - 4' r.Top' 4' r.Height);  	b.Dispose ();  	DrawBorder (Border3DStyle.Raised' BorderColor' g' r);  	DrawBorder (Border3DStyle.Sunken' BorderColor' g' new Rectangle (r.Left + 4' r.Top + 4' r.Width - 8' r.Height - 8));  	break;  }  case BorderStyle2.Column: {  	var light = new SolidBrush (MixColors (BorderColor' Color.White' 1));  	var dark = new SolidBrush (MixColors (BorderColor' Color.Black' 0.4));  	g.FillRectangle (light' r.Left' r.Top' r.Width' 1);  	g.FillRectangle (light' r.Left' r.Top + 3' 1' r.Height - 1 - 6);  	g.FillRectangle (dark' r.Right - 1' r.Top + 3' 1' r.Height - 6);  	g.FillRectangle (dark' r.Left' r.Bottom - 1' r.Width' 1);  	break;  }  case BorderStyle2.Row: {  	var light = new SolidBrush (MixColors (BorderColor' Color.White' 1));  	var dark = new SolidBrush (MixColors (BorderColor' Color.Black' 0.4));  	g.FillRectangle (light' r.Left + 3' r.Top' r.Width - 6' 1);  	g.FillRectangle (light' r.Left' r.Top' 1' r.Height - 1);  	g.FillRectangle (dark' r.Right - 1' r.Top' 1' r.Height);  	g.FillRectangle (dark' r.Left + 3' r.Bottom - 1' r.Width - 6' 1);  	break;  }  }  
Magic Number,Alsing.Drawing,DrawingTools,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Drawing\DrawingTools.cs,DrawBorder,The following statement contains a magic number: switch (Style) {  case BorderStyle2.Dotted: {  	r.Width--;  	r.Height--;  	g.DrawRectangle (new Pen (SystemColors.Control)' r);  	var p = new Pen (BorderColor) {  		DashStyle = DashStyle.Dot  	};  	g.DrawRectangle (p' r);  	break;  }  case BorderStyle2.Dashed: {  	r.Width--;  	r.Height--;  	g.DrawRectangle (new Pen (SystemColors.Control)' r);  	var p = new Pen (BorderColor) {  		DashStyle = DashStyle.Dash  	};  	g.DrawRectangle (p' r);  	break;  }  case BorderStyle2.Sunken: {  	if (BorderColor == Color.Black)  		BorderColor = SystemColors.Control;  	//System.Windows.Forms.ControlPaint.DrawBorder3D (g'r'Border3DStyle.Sunken);  	DrawBorder (Border3DStyle.Sunken' BorderColor' g' r);  	break;  }  case BorderStyle2.FixedSingle: {  	r.Width--;  	r.Height--;  	g.DrawRectangle (new Pen (BorderColor)' r);  	break;  }  case BorderStyle2.FixedDouble: {  	g.DrawRectangle (new Pen (BorderColor)' r.Left' r.Top' r.Width - 1' r.Height - 1);  	g.DrawRectangle (new Pen (BorderColor)' r.Left + 1' r.Top + 1' r.Width - 3' r.Height - 3);  	break;  }  case BorderStyle2.Raised: {  	if (BorderColor == Color.Black)  		BorderColor = SystemColors.Control;  	DrawBorder (Border3DStyle.Raised' BorderColor' g' r);  	//System.Windows.Forms.ControlPaint.DrawBorder3D (g'r'Border3DStyle.Raised);  	break;  }  case BorderStyle2.RaisedThin: {  	if (BorderColor == Color.Black)  		BorderColor = Color.FromArgb (SystemColors.Control.R' SystemColors.Control.G' SystemColors.Control.B);  	DrawBorder (Border3DStyle.RaisedInner' BorderColor' g' r);  	//System.Windows.Forms.ControlPaint.DrawBorder3D (g'r'Border3DStyle.Raised);  	break;  }  case BorderStyle2.SunkenThin: {  	if (BorderColor == Color.Black)  		BorderColor = Color.FromArgb (SystemColors.Control.R' SystemColors.Control.G' SystemColors.Control.B);  	DrawBorder (Border3DStyle.SunkenOuter' BorderColor' g' r);  	//System.Windows.Forms.ControlPaint.DrawBorder3D (g'r'Border3DStyle.Raised);  	break;  }  case BorderStyle2.Etched: {  	ControlPaint.DrawBorder3D (g' r' Border3DStyle.Etched);  	break;  }  case BorderStyle2.Bump: {  	if (BorderColor == Color.Black)  		BorderColor = SystemColors.Control;  	var b = new SolidBrush (BorderColor);  	g.FillRectangle (b' r.Left' r.Top' r.Width' 4);  	g.FillRectangle (b' r.Left' r.Bottom - 4' r.Width' 4);  	g.FillRectangle (b' r.Left' r.Top' 4' r.Height);  	g.FillRectangle (b' r.Right - 4' r.Top' 4' r.Height);  	b.Dispose ();  	DrawBorder (Border3DStyle.Raised' BorderColor' g' r);  	DrawBorder (Border3DStyle.Sunken' BorderColor' g' new Rectangle (r.Left + 4' r.Top + 4' r.Width - 8' r.Height - 8));  	break;  }  case BorderStyle2.Column: {  	var light = new SolidBrush (MixColors (BorderColor' Color.White' 1));  	var dark = new SolidBrush (MixColors (BorderColor' Color.Black' 0.4));  	g.FillRectangle (light' r.Left' r.Top' r.Width' 1);  	g.FillRectangle (light' r.Left' r.Top + 3' 1' r.Height - 1 - 6);  	g.FillRectangle (dark' r.Right - 1' r.Top + 3' 1' r.Height - 6);  	g.FillRectangle (dark' r.Left' r.Bottom - 1' r.Width' 1);  	break;  }  case BorderStyle2.Row: {  	var light = new SolidBrush (MixColors (BorderColor' Color.White' 1));  	var dark = new SolidBrush (MixColors (BorderColor' Color.Black' 0.4));  	g.FillRectangle (light' r.Left + 3' r.Top' r.Width - 6' 1);  	g.FillRectangle (light' r.Left' r.Top' 1' r.Height - 1);  	g.FillRectangle (dark' r.Right - 1' r.Top' 1' r.Height);  	g.FillRectangle (dark' r.Left + 3' r.Bottom - 1' r.Width - 6' 1);  	break;  }  }  
Magic Number,Alsing.Drawing,DrawingTools,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Drawing\DrawingTools.cs,DrawBorder,The following statement contains a magic number: switch (Style) {  case BorderStyle2.Dotted: {  	r.Width--;  	r.Height--;  	g.DrawRectangle (new Pen (SystemColors.Control)' r);  	var p = new Pen (BorderColor) {  		DashStyle = DashStyle.Dot  	};  	g.DrawRectangle (p' r);  	break;  }  case BorderStyle2.Dashed: {  	r.Width--;  	r.Height--;  	g.DrawRectangle (new Pen (SystemColors.Control)' r);  	var p = new Pen (BorderColor) {  		DashStyle = DashStyle.Dash  	};  	g.DrawRectangle (p' r);  	break;  }  case BorderStyle2.Sunken: {  	if (BorderColor == Color.Black)  		BorderColor = SystemColors.Control;  	//System.Windows.Forms.ControlPaint.DrawBorder3D (g'r'Border3DStyle.Sunken);  	DrawBorder (Border3DStyle.Sunken' BorderColor' g' r);  	break;  }  case BorderStyle2.FixedSingle: {  	r.Width--;  	r.Height--;  	g.DrawRectangle (new Pen (BorderColor)' r);  	break;  }  case BorderStyle2.FixedDouble: {  	g.DrawRectangle (new Pen (BorderColor)' r.Left' r.Top' r.Width - 1' r.Height - 1);  	g.DrawRectangle (new Pen (BorderColor)' r.Left + 1' r.Top + 1' r.Width - 3' r.Height - 3);  	break;  }  case BorderStyle2.Raised: {  	if (BorderColor == Color.Black)  		BorderColor = SystemColors.Control;  	DrawBorder (Border3DStyle.Raised' BorderColor' g' r);  	//System.Windows.Forms.ControlPaint.DrawBorder3D (g'r'Border3DStyle.Raised);  	break;  }  case BorderStyle2.RaisedThin: {  	if (BorderColor == Color.Black)  		BorderColor = Color.FromArgb (SystemColors.Control.R' SystemColors.Control.G' SystemColors.Control.B);  	DrawBorder (Border3DStyle.RaisedInner' BorderColor' g' r);  	//System.Windows.Forms.ControlPaint.DrawBorder3D (g'r'Border3DStyle.Raised);  	break;  }  case BorderStyle2.SunkenThin: {  	if (BorderColor == Color.Black)  		BorderColor = Color.FromArgb (SystemColors.Control.R' SystemColors.Control.G' SystemColors.Control.B);  	DrawBorder (Border3DStyle.SunkenOuter' BorderColor' g' r);  	//System.Windows.Forms.ControlPaint.DrawBorder3D (g'r'Border3DStyle.Raised);  	break;  }  case BorderStyle2.Etched: {  	ControlPaint.DrawBorder3D (g' r' Border3DStyle.Etched);  	break;  }  case BorderStyle2.Bump: {  	if (BorderColor == Color.Black)  		BorderColor = SystemColors.Control;  	var b = new SolidBrush (BorderColor);  	g.FillRectangle (b' r.Left' r.Top' r.Width' 4);  	g.FillRectangle (b' r.Left' r.Bottom - 4' r.Width' 4);  	g.FillRectangle (b' r.Left' r.Top' 4' r.Height);  	g.FillRectangle (b' r.Right - 4' r.Top' 4' r.Height);  	b.Dispose ();  	DrawBorder (Border3DStyle.Raised' BorderColor' g' r);  	DrawBorder (Border3DStyle.Sunken' BorderColor' g' new Rectangle (r.Left + 4' r.Top + 4' r.Width - 8' r.Height - 8));  	break;  }  case BorderStyle2.Column: {  	var light = new SolidBrush (MixColors (BorderColor' Color.White' 1));  	var dark = new SolidBrush (MixColors (BorderColor' Color.Black' 0.4));  	g.FillRectangle (light' r.Left' r.Top' r.Width' 1);  	g.FillRectangle (light' r.Left' r.Top + 3' 1' r.Height - 1 - 6);  	g.FillRectangle (dark' r.Right - 1' r.Top + 3' 1' r.Height - 6);  	g.FillRectangle (dark' r.Left' r.Bottom - 1' r.Width' 1);  	break;  }  case BorderStyle2.Row: {  	var light = new SolidBrush (MixColors (BorderColor' Color.White' 1));  	var dark = new SolidBrush (MixColors (BorderColor' Color.Black' 0.4));  	g.FillRectangle (light' r.Left + 3' r.Top' r.Width - 6' 1);  	g.FillRectangle (light' r.Left' r.Top' 1' r.Height - 1);  	g.FillRectangle (dark' r.Right - 1' r.Top' 1' r.Height);  	g.FillRectangle (dark' r.Left + 3' r.Bottom - 1' r.Width - 6' 1);  	break;  }  }  
Magic Number,Alsing.Drawing,DrawingTools,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Drawing\DrawingTools.cs,DrawBorder,The following statement contains a magic number: g.DrawRectangle (new Pen (BorderColor)' r.Left + 1' r.Top + 1' r.Width - 3' r.Height - 3);  
Magic Number,Alsing.Drawing,DrawingTools,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Drawing\DrawingTools.cs,DrawBorder,The following statement contains a magic number: g.DrawRectangle (new Pen (BorderColor)' r.Left + 1' r.Top + 1' r.Width - 3' r.Height - 3);  
Magic Number,Alsing.Drawing,DrawingTools,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Drawing\DrawingTools.cs,DrawBorder,The following statement contains a magic number: g.FillRectangle (b' r.Left' r.Top' r.Width' 4);  
Magic Number,Alsing.Drawing,DrawingTools,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Drawing\DrawingTools.cs,DrawBorder,The following statement contains a magic number: g.FillRectangle (b' r.Left' r.Bottom - 4' r.Width' 4);  
Magic Number,Alsing.Drawing,DrawingTools,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Drawing\DrawingTools.cs,DrawBorder,The following statement contains a magic number: g.FillRectangle (b' r.Left' r.Bottom - 4' r.Width' 4);  
Magic Number,Alsing.Drawing,DrawingTools,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Drawing\DrawingTools.cs,DrawBorder,The following statement contains a magic number: g.FillRectangle (b' r.Left' r.Top' 4' r.Height);  
Magic Number,Alsing.Drawing,DrawingTools,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Drawing\DrawingTools.cs,DrawBorder,The following statement contains a magic number: g.FillRectangle (b' r.Right - 4' r.Top' 4' r.Height);  
Magic Number,Alsing.Drawing,DrawingTools,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Drawing\DrawingTools.cs,DrawBorder,The following statement contains a magic number: g.FillRectangle (b' r.Right - 4' r.Top' 4' r.Height);  
Magic Number,Alsing.Drawing,DrawingTools,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Drawing\DrawingTools.cs,DrawBorder,The following statement contains a magic number: DrawBorder (Border3DStyle.Sunken' BorderColor' g' new Rectangle (r.Left + 4' r.Top + 4' r.Width - 8' r.Height - 8));  
Magic Number,Alsing.Drawing,DrawingTools,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Drawing\DrawingTools.cs,DrawBorder,The following statement contains a magic number: DrawBorder (Border3DStyle.Sunken' BorderColor' g' new Rectangle (r.Left + 4' r.Top + 4' r.Width - 8' r.Height - 8));  
Magic Number,Alsing.Drawing,DrawingTools,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Drawing\DrawingTools.cs,DrawBorder,The following statement contains a magic number: DrawBorder (Border3DStyle.Sunken' BorderColor' g' new Rectangle (r.Left + 4' r.Top + 4' r.Width - 8' r.Height - 8));  
Magic Number,Alsing.Drawing,DrawingTools,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Drawing\DrawingTools.cs,DrawBorder,The following statement contains a magic number: DrawBorder (Border3DStyle.Sunken' BorderColor' g' new Rectangle (r.Left + 4' r.Top + 4' r.Width - 8' r.Height - 8));  
Magic Number,Alsing.Drawing,DrawingTools,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Drawing\DrawingTools.cs,DrawBorder,The following statement contains a magic number: g.FillRectangle (light' r.Left' r.Top + 3' 1' r.Height - 1 - 6);  
Magic Number,Alsing.Drawing,DrawingTools,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Drawing\DrawingTools.cs,DrawBorder,The following statement contains a magic number: g.FillRectangle (light' r.Left' r.Top + 3' 1' r.Height - 1 - 6);  
Magic Number,Alsing.Drawing,DrawingTools,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Drawing\DrawingTools.cs,DrawBorder,The following statement contains a magic number: g.FillRectangle (dark' r.Right - 1' r.Top + 3' 1' r.Height - 6);  
Magic Number,Alsing.Drawing,DrawingTools,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Drawing\DrawingTools.cs,DrawBorder,The following statement contains a magic number: g.FillRectangle (dark' r.Right - 1' r.Top + 3' 1' r.Height - 6);  
Magic Number,Alsing.Drawing,DrawingTools,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Drawing\DrawingTools.cs,DrawBorder,The following statement contains a magic number: g.FillRectangle (light' r.Left + 3' r.Top' r.Width - 6' 1);  
Magic Number,Alsing.Drawing,DrawingTools,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Drawing\DrawingTools.cs,DrawBorder,The following statement contains a magic number: g.FillRectangle (light' r.Left + 3' r.Top' r.Width - 6' 1);  
Magic Number,Alsing.Drawing,DrawingTools,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Drawing\DrawingTools.cs,DrawBorder,The following statement contains a magic number: g.FillRectangle (dark' r.Left + 3' r.Bottom - 1' r.Width - 6' 1);  
Magic Number,Alsing.Drawing,DrawingTools,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Drawing\DrawingTools.cs,DrawBorder,The following statement contains a magic number: g.FillRectangle (dark' r.Left + 3' r.Bottom - 1' r.Width - 6' 1);  
Magic Number,Alsing.Drawing,DrawingTools,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Drawing\DrawingTools.cs,DrawInsertIndicatorH,The following statement contains a magic number: y -= 3;  
Magic Number,Alsing.Drawing,DrawingTools,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Drawing\DrawingTools.cs,DrawInsertIndicatorH,The following statement contains a magic number: x -= 2;  
Magic Number,Alsing.Drawing,DrawingTools,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Drawing\DrawingTools.cs,DrawInsertIndicatorH,The following statement contains a magic number: ControlPaint.FillReversibleRectangle (new Rectangle (x' y' 2' 7)' c);  
Magic Number,Alsing.Drawing,DrawingTools,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Drawing\DrawingTools.cs,DrawInsertIndicatorH,The following statement contains a magic number: ControlPaint.FillReversibleRectangle (new Rectangle (x' y' 2' 7)' c);  
Magic Number,Alsing.Drawing,DrawingTools,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Drawing\DrawingTools.cs,DrawInsertIndicatorH,The following statement contains a magic number: ControlPaint.FillReversibleRectangle (new Rectangle (x + 2' y + 1' width' 5)' c);  
Magic Number,Alsing.Drawing,DrawingTools,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Drawing\DrawingTools.cs,DrawInsertIndicatorH,The following statement contains a magic number: ControlPaint.FillReversibleRectangle (new Rectangle (x + 2' y + 1' width' 5)' c);  
Magic Number,Alsing.Drawing,DrawingTools,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Drawing\DrawingTools.cs,DrawInsertIndicatorH,The following statement contains a magic number: ControlPaint.FillReversibleRectangle (new Rectangle (width + 2 + x' y' 2' 7)' c);  
Magic Number,Alsing.Drawing,DrawingTools,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Drawing\DrawingTools.cs,DrawInsertIndicatorH,The following statement contains a magic number: ControlPaint.FillReversibleRectangle (new Rectangle (width + 2 + x' y' 2' 7)' c);  
Magic Number,Alsing.Drawing,DrawingTools,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Drawing\DrawingTools.cs,DrawInsertIndicatorH,The following statement contains a magic number: ControlPaint.FillReversibleRectangle (new Rectangle (width + 2 + x' y' 2' 7)' c);  
Magic Number,Alsing.Drawing,DrawingTools,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Drawing\DrawingTools.cs,DrawInsertIndicatorV,The following statement contains a magic number: x -= 3;  
Magic Number,Alsing.Drawing,DrawingTools,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Drawing\DrawingTools.cs,DrawInsertIndicatorV,The following statement contains a magic number: y -= 2;  
Magic Number,Alsing.Drawing,DrawingTools,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Drawing\DrawingTools.cs,DrawInsertIndicatorV,The following statement contains a magic number: ControlPaint.FillReversibleRectangle (new Rectangle (x' y' 7' 2)' c);  
Magic Number,Alsing.Drawing,DrawingTools,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Drawing\DrawingTools.cs,DrawInsertIndicatorV,The following statement contains a magic number: ControlPaint.FillReversibleRectangle (new Rectangle (x' y' 7' 2)' c);  
Magic Number,Alsing.Drawing,DrawingTools,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Drawing\DrawingTools.cs,DrawInsertIndicatorV,The following statement contains a magic number: ControlPaint.FillReversibleRectangle (new Rectangle (x + 1' y + 2' 5' height)' c);  
Magic Number,Alsing.Drawing,DrawingTools,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Drawing\DrawingTools.cs,DrawInsertIndicatorV,The following statement contains a magic number: ControlPaint.FillReversibleRectangle (new Rectangle (x + 1' y + 2' 5' height)' c);  
Magic Number,Alsing.Drawing,DrawingTools,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Drawing\DrawingTools.cs,DrawInsertIndicatorV,The following statement contains a magic number: ControlPaint.FillReversibleRectangle (new Rectangle (x' height + 2 + y' 7' 2)' c);  
Magic Number,Alsing.Drawing,DrawingTools,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Drawing\DrawingTools.cs,DrawInsertIndicatorV,The following statement contains a magic number: ControlPaint.FillReversibleRectangle (new Rectangle (x' height + 2 + y' 7' 2)' c);  
Magic Number,Alsing.Drawing,DrawingTools,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Drawing\DrawingTools.cs,DrawInsertIndicatorV,The following statement contains a magic number: ControlPaint.FillReversibleRectangle (new Rectangle (x' height + 2 + y' 7' 2)' c);  
Magic Number,Alsing.Drawing,DrawingTools,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Drawing\DrawingTools.cs,DrawSortArrow,The following statement contains a magic number: if (Ascending) {  	g.DrawLine (p1' x' y + 6' x + 7' y + 6);  	g.DrawLine (p2' x + 3' y' x' y + 6);  	g.DrawLine (p1' x + 4' y' x + 7' y + 6);  }  else {  	g.DrawLine (p2' x' y' x + 7' y);  	g.DrawLine (p2' x' y' x + 3' y + 6);  	g.DrawLine (p1' x + 7' y' x + 4' y + 6);  }  
Magic Number,Alsing.Drawing,DrawingTools,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Drawing\DrawingTools.cs,DrawSortArrow,The following statement contains a magic number: if (Ascending) {  	g.DrawLine (p1' x' y + 6' x + 7' y + 6);  	g.DrawLine (p2' x + 3' y' x' y + 6);  	g.DrawLine (p1' x + 4' y' x + 7' y + 6);  }  else {  	g.DrawLine (p2' x' y' x + 7' y);  	g.DrawLine (p2' x' y' x + 3' y + 6);  	g.DrawLine (p1' x + 7' y' x + 4' y + 6);  }  
Magic Number,Alsing.Drawing,DrawingTools,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Drawing\DrawingTools.cs,DrawSortArrow,The following statement contains a magic number: if (Ascending) {  	g.DrawLine (p1' x' y + 6' x + 7' y + 6);  	g.DrawLine (p2' x + 3' y' x' y + 6);  	g.DrawLine (p1' x + 4' y' x + 7' y + 6);  }  else {  	g.DrawLine (p2' x' y' x + 7' y);  	g.DrawLine (p2' x' y' x + 3' y + 6);  	g.DrawLine (p1' x + 7' y' x + 4' y + 6);  }  
Magic Number,Alsing.Drawing,DrawingTools,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Drawing\DrawingTools.cs,DrawSortArrow,The following statement contains a magic number: if (Ascending) {  	g.DrawLine (p1' x' y + 6' x + 7' y + 6);  	g.DrawLine (p2' x + 3' y' x' y + 6);  	g.DrawLine (p1' x + 4' y' x + 7' y + 6);  }  else {  	g.DrawLine (p2' x' y' x + 7' y);  	g.DrawLine (p2' x' y' x + 3' y + 6);  	g.DrawLine (p1' x + 7' y' x + 4' y + 6);  }  
Magic Number,Alsing.Drawing,DrawingTools,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Drawing\DrawingTools.cs,DrawSortArrow,The following statement contains a magic number: if (Ascending) {  	g.DrawLine (p1' x' y + 6' x + 7' y + 6);  	g.DrawLine (p2' x + 3' y' x' y + 6);  	g.DrawLine (p1' x + 4' y' x + 7' y + 6);  }  else {  	g.DrawLine (p2' x' y' x + 7' y);  	g.DrawLine (p2' x' y' x + 3' y + 6);  	g.DrawLine (p1' x + 7' y' x + 4' y + 6);  }  
Magic Number,Alsing.Drawing,DrawingTools,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Drawing\DrawingTools.cs,DrawSortArrow,The following statement contains a magic number: if (Ascending) {  	g.DrawLine (p1' x' y + 6' x + 7' y + 6);  	g.DrawLine (p2' x + 3' y' x' y + 6);  	g.DrawLine (p1' x + 4' y' x + 7' y + 6);  }  else {  	g.DrawLine (p2' x' y' x + 7' y);  	g.DrawLine (p2' x' y' x + 3' y + 6);  	g.DrawLine (p1' x + 7' y' x + 4' y + 6);  }  
Magic Number,Alsing.Drawing,DrawingTools,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Drawing\DrawingTools.cs,DrawSortArrow,The following statement contains a magic number: if (Ascending) {  	g.DrawLine (p1' x' y + 6' x + 7' y + 6);  	g.DrawLine (p2' x + 3' y' x' y + 6);  	g.DrawLine (p1' x + 4' y' x + 7' y + 6);  }  else {  	g.DrawLine (p2' x' y' x + 7' y);  	g.DrawLine (p2' x' y' x + 3' y + 6);  	g.DrawLine (p1' x + 7' y' x + 4' y + 6);  }  
Magic Number,Alsing.Drawing,DrawingTools,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Drawing\DrawingTools.cs,DrawSortArrow,The following statement contains a magic number: if (Ascending) {  	g.DrawLine (p1' x' y + 6' x + 7' y + 6);  	g.DrawLine (p2' x + 3' y' x' y + 6);  	g.DrawLine (p1' x + 4' y' x + 7' y + 6);  }  else {  	g.DrawLine (p2' x' y' x + 7' y);  	g.DrawLine (p2' x' y' x + 3' y + 6);  	g.DrawLine (p1' x + 7' y' x + 4' y + 6);  }  
Magic Number,Alsing.Drawing,DrawingTools,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Drawing\DrawingTools.cs,DrawSortArrow,The following statement contains a magic number: if (Ascending) {  	g.DrawLine (p1' x' y + 6' x + 7' y + 6);  	g.DrawLine (p2' x + 3' y' x' y + 6);  	g.DrawLine (p1' x + 4' y' x + 7' y + 6);  }  else {  	g.DrawLine (p2' x' y' x + 7' y);  	g.DrawLine (p2' x' y' x + 3' y + 6);  	g.DrawLine (p1' x + 7' y' x + 4' y + 6);  }  
Magic Number,Alsing.Drawing,DrawingTools,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Drawing\DrawingTools.cs,DrawSortArrow,The following statement contains a magic number: if (Ascending) {  	g.DrawLine (p1' x' y + 6' x + 7' y + 6);  	g.DrawLine (p2' x + 3' y' x' y + 6);  	g.DrawLine (p1' x + 4' y' x + 7' y + 6);  }  else {  	g.DrawLine (p2' x' y' x + 7' y);  	g.DrawLine (p2' x' y' x + 3' y + 6);  	g.DrawLine (p1' x + 7' y' x + 4' y + 6);  }  
Magic Number,Alsing.Drawing,DrawingTools,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Drawing\DrawingTools.cs,DrawSortArrow,The following statement contains a magic number: if (Ascending) {  	g.DrawLine (p1' x' y + 6' x + 7' y + 6);  	g.DrawLine (p2' x + 3' y' x' y + 6);  	g.DrawLine (p1' x + 4' y' x + 7' y + 6);  }  else {  	g.DrawLine (p2' x' y' x + 7' y);  	g.DrawLine (p2' x' y' x + 3' y + 6);  	g.DrawLine (p1' x + 7' y' x + 4' y + 6);  }  
Magic Number,Alsing.Drawing,DrawingTools,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Drawing\DrawingTools.cs,DrawSortArrow,The following statement contains a magic number: if (Ascending) {  	g.DrawLine (p1' x' y + 6' x + 7' y + 6);  	g.DrawLine (p2' x + 3' y' x' y + 6);  	g.DrawLine (p1' x + 4' y' x + 7' y + 6);  }  else {  	g.DrawLine (p2' x' y' x + 7' y);  	g.DrawLine (p2' x' y' x + 3' y + 6);  	g.DrawLine (p1' x + 7' y' x + 4' y + 6);  }  
Magic Number,Alsing.Drawing,DrawingTools,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Drawing\DrawingTools.cs,DrawSortArrow,The following statement contains a magic number: if (Ascending) {  	g.DrawLine (p1' x' y + 6' x + 7' y + 6);  	g.DrawLine (p2' x + 3' y' x' y + 6);  	g.DrawLine (p1' x + 4' y' x + 7' y + 6);  }  else {  	g.DrawLine (p2' x' y' x + 7' y);  	g.DrawLine (p2' x' y' x + 3' y + 6);  	g.DrawLine (p1' x + 7' y' x + 4' y + 6);  }  
Magic Number,Alsing.Drawing,DrawingTools,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Drawing\DrawingTools.cs,DrawSortArrow,The following statement contains a magic number: if (Ascending) {  	g.DrawLine (p1' x' y + 6' x + 7' y + 6);  	g.DrawLine (p2' x + 3' y' x' y + 6);  	g.DrawLine (p1' x + 4' y' x + 7' y + 6);  }  else {  	g.DrawLine (p2' x' y' x + 7' y);  	g.DrawLine (p2' x' y' x + 3' y + 6);  	g.DrawLine (p1' x + 7' y' x + 4' y + 6);  }  
Magic Number,Alsing.Drawing,DrawingTools,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Drawing\DrawingTools.cs,DrawSortArrow,The following statement contains a magic number: g.DrawLine (p1' x' y + 6' x + 7' y + 6);  
Magic Number,Alsing.Drawing,DrawingTools,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Drawing\DrawingTools.cs,DrawSortArrow,The following statement contains a magic number: g.DrawLine (p1' x' y + 6' x + 7' y + 6);  
Magic Number,Alsing.Drawing,DrawingTools,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Drawing\DrawingTools.cs,DrawSortArrow,The following statement contains a magic number: g.DrawLine (p1' x' y + 6' x + 7' y + 6);  
Magic Number,Alsing.Drawing,DrawingTools,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Drawing\DrawingTools.cs,DrawSortArrow,The following statement contains a magic number: g.DrawLine (p2' x + 3' y' x' y + 6);  
Magic Number,Alsing.Drawing,DrawingTools,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Drawing\DrawingTools.cs,DrawSortArrow,The following statement contains a magic number: g.DrawLine (p2' x + 3' y' x' y + 6);  
Magic Number,Alsing.Drawing,DrawingTools,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Drawing\DrawingTools.cs,DrawSortArrow,The following statement contains a magic number: g.DrawLine (p1' x + 4' y' x + 7' y + 6);  
Magic Number,Alsing.Drawing,DrawingTools,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Drawing\DrawingTools.cs,DrawSortArrow,The following statement contains a magic number: g.DrawLine (p1' x + 4' y' x + 7' y + 6);  
Magic Number,Alsing.Drawing,DrawingTools,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Drawing\DrawingTools.cs,DrawSortArrow,The following statement contains a magic number: g.DrawLine (p1' x + 4' y' x + 7' y + 6);  
Magic Number,Alsing.Drawing,DrawingTools,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Drawing\DrawingTools.cs,DrawSortArrow,The following statement contains a magic number: g.DrawLine (p2' x' y' x + 7' y);  
Magic Number,Alsing.Drawing,DrawingTools,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Drawing\DrawingTools.cs,DrawSortArrow,The following statement contains a magic number: g.DrawLine (p2' x' y' x + 3' y + 6);  
Magic Number,Alsing.Drawing,DrawingTools,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Drawing\DrawingTools.cs,DrawSortArrow,The following statement contains a magic number: g.DrawLine (p2' x' y' x + 3' y + 6);  
Magic Number,Alsing.Drawing,DrawingTools,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Drawing\DrawingTools.cs,DrawSortArrow,The following statement contains a magic number: g.DrawLine (p1' x + 7' y' x + 4' y + 6);  
Magic Number,Alsing.Drawing,DrawingTools,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Drawing\DrawingTools.cs,DrawSortArrow,The following statement contains a magic number: g.DrawLine (p1' x + 7' y' x + 4' y + 6);  
Magic Number,Alsing.Drawing,DrawingTools,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Drawing\DrawingTools.cs,DrawSortArrow,The following statement contains a magic number: g.DrawLine (p1' x + 7' y' x + 4' y + 6);  
Magic Number,Alsing.Drawing.GDI,FontList,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Drawing\GDI32\FontEnum.cs,LB_DrawItem,The following statement contains a magic number: if (selected) {  	const int ofs = 37;  	e.Graphics.FillRectangle (SystemBrushes.Window' new Rectangle (ofs' e.Bounds.Top' e.Bounds.Width - ofs' FontListbox.ItemHeight));  	e.Graphics.FillRectangle (SystemBrushes.Highlight' new Rectangle (ofs + 1' e.Bounds.Top + 1' e.Bounds.Width - ofs - 2' FontListbox.ItemHeight - 2));  	ControlPaint.DrawFocusRectangle (e.Graphics' new Rectangle (ofs' e.Bounds.Top' e.Bounds.Width - ofs' FontListbox.ItemHeight));  }  else {  	e.Graphics.FillRectangle (SystemBrushes.Window' 0' e.Bounds.Top' e.Bounds.Width' FontListbox.ItemHeight);  }  
Magic Number,Alsing.Drawing.GDI,FontList,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Drawing\GDI32\FontEnum.cs,LB_DrawItem,The following statement contains a magic number: if (selected) {  	const int ofs = 37;  	e.Graphics.FillRectangle (SystemBrushes.Window' new Rectangle (ofs' e.Bounds.Top' e.Bounds.Width - ofs' FontListbox.ItemHeight));  	e.Graphics.FillRectangle (SystemBrushes.Highlight' new Rectangle (ofs + 1' e.Bounds.Top + 1' e.Bounds.Width - ofs - 2' FontListbox.ItemHeight - 2));  	ControlPaint.DrawFocusRectangle (e.Graphics' new Rectangle (ofs' e.Bounds.Top' e.Bounds.Width - ofs' FontListbox.ItemHeight));  }  else {  	e.Graphics.FillRectangle (SystemBrushes.Window' 0' e.Bounds.Top' e.Bounds.Width' FontListbox.ItemHeight);  }  
Magic Number,Alsing.Drawing.GDI,FontList,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Drawing\GDI32\FontEnum.cs,LB_DrawItem,The following statement contains a magic number: if (selected) {  	const int ofs = 37;  	e.Graphics.FillRectangle (SystemBrushes.Window' new Rectangle (ofs' e.Bounds.Top' e.Bounds.Width - ofs' FontListbox.ItemHeight));  	e.Graphics.FillRectangle (SystemBrushes.Highlight' new Rectangle (ofs + 1' e.Bounds.Top + 1' e.Bounds.Width - ofs - 2' FontListbox.ItemHeight - 2));  	ControlPaint.DrawFocusRectangle (e.Graphics' new Rectangle (ofs' e.Bounds.Top' e.Bounds.Width - ofs' FontListbox.ItemHeight));  }  else {  	e.Graphics.FillRectangle (SystemBrushes.Window' 0' e.Bounds.Top' e.Bounds.Width' FontListbox.ItemHeight);  }  
Magic Number,Alsing.Drawing.GDI,FontList,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Drawing\GDI32\FontEnum.cs,LB_DrawItem,The following statement contains a magic number: e.Graphics.FillRectangle (SystemBrushes.Highlight' new Rectangle (ofs + 1' e.Bounds.Top + 1' e.Bounds.Width - ofs - 2' FontListbox.ItemHeight - 2));  
Magic Number,Alsing.Drawing.GDI,FontList,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Drawing\GDI32\FontEnum.cs,LB_DrawItem,The following statement contains a magic number: e.Graphics.FillRectangle (SystemBrushes.Highlight' new Rectangle (ofs + 1' e.Bounds.Top + 1' e.Bounds.Width - ofs - 2' FontListbox.ItemHeight - 2));  
Magic Number,Alsing.Drawing.GDI,FontList,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Drawing\GDI32\FontEnum.cs,LB_DrawItem,The following statement contains a magic number: e.Graphics.DrawString (text' e.Font' fg' 38' e.Bounds.Top + 4);  
Magic Number,Alsing.Drawing.GDI,FontList,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Drawing\GDI32\FontEnum.cs,LB_DrawItem,The following statement contains a magic number: e.Graphics.DrawString (text' e.Font' fg' 38' e.Bounds.Top + 4);  
Magic Number,Alsing.Drawing.GDI,FontList,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Drawing\GDI32\FontEnum.cs,LB_DrawItem,The following statement contains a magic number: e.Graphics.SetClip (new Rectangle (1' e.Bounds.Top + 2' 34' FontListbox.ItemHeight - 4));  
Magic Number,Alsing.Drawing.GDI,FontList,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Drawing\GDI32\FontEnum.cs,LB_DrawItem,The following statement contains a magic number: e.Graphics.SetClip (new Rectangle (1' e.Bounds.Top + 2' 34' FontListbox.ItemHeight - 4));  
Magic Number,Alsing.Drawing.GDI,FontList,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Drawing\GDI32\FontEnum.cs,LB_DrawItem,The following statement contains a magic number: e.Graphics.SetClip (new Rectangle (1' e.Bounds.Top + 2' 34' FontListbox.ItemHeight - 4));  
Magic Number,Alsing.Drawing.GDI,FontList,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Drawing\GDI32\FontEnum.cs,LB_DrawItem,The following statement contains a magic number: e.Graphics.FillRectangle (SystemBrushes.Highlight' new Rectangle (1' e.Bounds.Top + 2' 34' FontListbox.ItemHeight - 4));  
Magic Number,Alsing.Drawing.GDI,FontList,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Drawing\GDI32\FontEnum.cs,LB_DrawItem,The following statement contains a magic number: e.Graphics.FillRectangle (SystemBrushes.Highlight' new Rectangle (1' e.Bounds.Top + 2' 34' FontListbox.ItemHeight - 4));  
Magic Number,Alsing.Drawing.GDI,FontList,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Drawing\GDI32\FontEnum.cs,LB_DrawItem,The following statement contains a magic number: e.Graphics.FillRectangle (SystemBrushes.Highlight' new Rectangle (1' e.Bounds.Top + 2' 34' FontListbox.ItemHeight - 4));  
Magic Number,Alsing.Drawing.GDI,FontList,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Drawing\GDI32\FontEnum.cs,LB_DrawItem,The following statement contains a magic number: NativeMethods.TabbedTextOut (hdc' 3' e.Bounds.Top + 5' "abc"' 3' 0' ref a' 0);  
Magic Number,Alsing.Drawing.GDI,FontList,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Drawing\GDI32\FontEnum.cs,LB_DrawItem,The following statement contains a magic number: NativeMethods.TabbedTextOut (hdc' 3' e.Bounds.Top + 5' "abc"' 3' 0' ref a' 0);  
Magic Number,Alsing.Drawing.GDI,FontList,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Drawing\GDI32\FontEnum.cs,LB_DrawItem,The following statement contains a magic number: NativeMethods.TabbedTextOut (hdc' 3' e.Bounds.Top + 5' "abc"' 3' 0' ref a' 0);  
Magic Number,Alsing.Drawing.GDI,FontList,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Drawing\GDI32\FontEnum.cs,LB_DrawItem,The following statement contains a magic number: e.Graphics.DrawRectangle (Pens.Black' new Rectangle (1' e.Bounds.Top + 2' 34' FontListbox.ItemHeight - 4));  
Magic Number,Alsing.Drawing.GDI,FontList,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Drawing\GDI32\FontEnum.cs,LB_DrawItem,The following statement contains a magic number: e.Graphics.DrawRectangle (Pens.Black' new Rectangle (1' e.Bounds.Top + 2' 34' FontListbox.ItemHeight - 4));  
Magic Number,Alsing.Drawing.GDI,FontList,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Drawing\GDI32\FontEnum.cs,LB_DrawItem,The following statement contains a magic number: e.Graphics.DrawRectangle (Pens.Black' new Rectangle (1' e.Bounds.Top + 2' 34' FontListbox.ItemHeight - 4));  
Magic Number,Alsing.Drawing.GDI,FontList,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Drawing\GDI32\FontEnum.cs,EditValue,The following statement contains a magic number: if (context != null && context.Instance != null && provider != null) {  	edSvc = (IWindowsFormsEditorService)provider.GetService (typeof(IWindowsFormsEditorService));  	if (edSvc != null) {  		// Create a CheckedListBox and populate it with all the enum values  		FontListbox = new ListBox {  			DrawMode = DrawMode.OwnerDrawFixed'  			BorderStyle = BorderStyle.None'  			Sorted = true  		};  		FontListbox.MouseDown += OnMouseDown;  		FontListbox.DoubleClick += ValueChanged;  		FontListbox.DrawItem += LB_DrawItem;  		FontListbox.ItemHeight = 20;  		FontListbox.Height = 200;  		FontListbox.Width = 180;  		ICollection fonts = new FontEnum ().EnumFonts ();  		foreach (string font in fonts) {  			FontListbox.Items.Add (font);  		}  		edSvc.DropDownControl (FontListbox);  		if (FontListbox.SelectedItem != null)  			return FontListbox.SelectedItem.ToString ();  	}  }  
Magic Number,Alsing.Drawing.GDI,FontList,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Drawing\GDI32\FontEnum.cs,EditValue,The following statement contains a magic number: if (context != null && context.Instance != null && provider != null) {  	edSvc = (IWindowsFormsEditorService)provider.GetService (typeof(IWindowsFormsEditorService));  	if (edSvc != null) {  		// Create a CheckedListBox and populate it with all the enum values  		FontListbox = new ListBox {  			DrawMode = DrawMode.OwnerDrawFixed'  			BorderStyle = BorderStyle.None'  			Sorted = true  		};  		FontListbox.MouseDown += OnMouseDown;  		FontListbox.DoubleClick += ValueChanged;  		FontListbox.DrawItem += LB_DrawItem;  		FontListbox.ItemHeight = 20;  		FontListbox.Height = 200;  		FontListbox.Width = 180;  		ICollection fonts = new FontEnum ().EnumFonts ();  		foreach (string font in fonts) {  			FontListbox.Items.Add (font);  		}  		edSvc.DropDownControl (FontListbox);  		if (FontListbox.SelectedItem != null)  			return FontListbox.SelectedItem.ToString ();  	}  }  
Magic Number,Alsing.Drawing.GDI,FontList,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Drawing\GDI32\FontEnum.cs,EditValue,The following statement contains a magic number: if (context != null && context.Instance != null && provider != null) {  	edSvc = (IWindowsFormsEditorService)provider.GetService (typeof(IWindowsFormsEditorService));  	if (edSvc != null) {  		// Create a CheckedListBox and populate it with all the enum values  		FontListbox = new ListBox {  			DrawMode = DrawMode.OwnerDrawFixed'  			BorderStyle = BorderStyle.None'  			Sorted = true  		};  		FontListbox.MouseDown += OnMouseDown;  		FontListbox.DoubleClick += ValueChanged;  		FontListbox.DrawItem += LB_DrawItem;  		FontListbox.ItemHeight = 20;  		FontListbox.Height = 200;  		FontListbox.Width = 180;  		ICollection fonts = new FontEnum ().EnumFonts ();  		foreach (string font in fonts) {  			FontListbox.Items.Add (font);  		}  		edSvc.DropDownControl (FontListbox);  		if (FontListbox.SelectedItem != null)  			return FontListbox.SelectedItem.ToString ();  	}  }  
Magic Number,Alsing.Drawing.GDI,FontList,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Drawing\GDI32\FontEnum.cs,EditValue,The following statement contains a magic number: if (edSvc != null) {  	// Create a CheckedListBox and populate it with all the enum values  	FontListbox = new ListBox {  		DrawMode = DrawMode.OwnerDrawFixed'  		BorderStyle = BorderStyle.None'  		Sorted = true  	};  	FontListbox.MouseDown += OnMouseDown;  	FontListbox.DoubleClick += ValueChanged;  	FontListbox.DrawItem += LB_DrawItem;  	FontListbox.ItemHeight = 20;  	FontListbox.Height = 200;  	FontListbox.Width = 180;  	ICollection fonts = new FontEnum ().EnumFonts ();  	foreach (string font in fonts) {  		FontListbox.Items.Add (font);  	}  	edSvc.DropDownControl (FontListbox);  	if (FontListbox.SelectedItem != null)  		return FontListbox.SelectedItem.ToString ();  }  
Magic Number,Alsing.Drawing.GDI,FontList,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Drawing\GDI32\FontEnum.cs,EditValue,The following statement contains a magic number: if (edSvc != null) {  	// Create a CheckedListBox and populate it with all the enum values  	FontListbox = new ListBox {  		DrawMode = DrawMode.OwnerDrawFixed'  		BorderStyle = BorderStyle.None'  		Sorted = true  	};  	FontListbox.MouseDown += OnMouseDown;  	FontListbox.DoubleClick += ValueChanged;  	FontListbox.DrawItem += LB_DrawItem;  	FontListbox.ItemHeight = 20;  	FontListbox.Height = 200;  	FontListbox.Width = 180;  	ICollection fonts = new FontEnum ().EnumFonts ();  	foreach (string font in fonts) {  		FontListbox.Items.Add (font);  	}  	edSvc.DropDownControl (FontListbox);  	if (FontListbox.SelectedItem != null)  		return FontListbox.SelectedItem.ToString ();  }  
Magic Number,Alsing.Drawing.GDI,FontList,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Drawing\GDI32\FontEnum.cs,EditValue,The following statement contains a magic number: if (edSvc != null) {  	// Create a CheckedListBox and populate it with all the enum values  	FontListbox = new ListBox {  		DrawMode = DrawMode.OwnerDrawFixed'  		BorderStyle = BorderStyle.None'  		Sorted = true  	};  	FontListbox.MouseDown += OnMouseDown;  	FontListbox.DoubleClick += ValueChanged;  	FontListbox.DrawItem += LB_DrawItem;  	FontListbox.ItemHeight = 20;  	FontListbox.Height = 200;  	FontListbox.Width = 180;  	ICollection fonts = new FontEnum ().EnumFonts ();  	foreach (string font in fonts) {  		FontListbox.Items.Add (font);  	}  	edSvc.DropDownControl (FontListbox);  	if (FontListbox.SelectedItem != null)  		return FontListbox.SelectedItem.ToString ();  }  
Magic Number,Alsing.Drawing.GDI,FontList,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Drawing\GDI32\FontEnum.cs,EditValue,The following statement contains a magic number: FontListbox.ItemHeight = 20;  
Magic Number,Alsing.Drawing.GDI,FontList,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Drawing\GDI32\FontEnum.cs,EditValue,The following statement contains a magic number: FontListbox.Height = 200;  
Magic Number,Alsing.Drawing.GDI,FontList,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Drawing\GDI32\FontEnum.cs,EditValue,The following statement contains a magic number: FontListbox.Width = 180;  
Magic Number,Alsing.Drawing.GDI,FontList,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Drawing\GDI32\FontEnum.cs,PaintValue,The following statement contains a magic number: NativeMethods.TabbedTextOut (hdc' 1' 1' "abc"' 3' 0' ref a' 0);  
Magic Number,Alsing.Drawing.GDI,GDISurface,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Drawing\GDI32\GDISurface.cs,MeasureTabbedString,The following statement contains a magic number: return new Size (ret & 0xFFFF' (ret >> 16) & 0xFFFF);  
Magic Number,Alsing.Drawing.GDI,GDISurface,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Drawing\GDI32\GDISurface.cs,DrawTabbedString,The following statement contains a magic number: return new Size (ret & 0xFFFF' (ret >> 16) & 0xFFFF);  
Magic Number,Alsing.Text,TokenTreeNode,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Text\Tokenizer\TokenTreeNode.cs,TokenTreeNode,The following statement contains a magic number: ChildNodes = new TokenTreeNode[256];  
Magic Number,Alsing.Windows,NativeMethods,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Win32\NativeMethods.cs,IsKeyPressed,The following statement contains a magic number: s = (s & 0x8000) >> 15;  
Magic Number,Alsing.Windows,NativeMethods,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Win32\NativeMethods.cs,ColorToInt,The following statement contains a magic number: return (color.B << 16 | color.G << 8 | color.R);  
Magic Number,Alsing.Windows,NativeMethods,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Win32\NativeMethods.cs,ColorToInt,The following statement contains a magic number: return (color.B << 16 | color.G << 8 | color.R);  
Duplicate Code,Alsing.SourceCode,SyntaxDefinitionLoader,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Document\SyntaxDefinition\SyntaxDefinitionLoader.cs,ParseBlock,The method contains a code clone-set at the following line numbers (starting from the method definition): ((185' 204)' (252' 271))
Missing Default,Alsing.SourceCode,SyntaxDefinitionLoader,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Document\SyntaxDefinition\SyntaxDefinitionLoader.cs,ParseBlock,The following switch statement is missing a default case: switch (att.Name.ToLowerInvariant ()) {  case "start":  	Start = att.Value;  	break;  case "end":  	End = att.Value;  	break;  case "style":  	style = att.Value;  	break;  case "endisseparator":  	if (att.Name.ToLowerInvariant () == "startisseparator")  		if (att.Name.ToLowerInvariant () == "startiskeyword")  			StartIsKeyword = att.Value;  	break;  case "startiscomplex":  	StartIsComplex = att.Value;  	break;  case "endiscomplex":  	EndIsComplex = att.Value;  	break;  case "endiskeyword":  	EndIsKeyword = att.Value;  	break;  case "ismultiline":  	IsMultiLineB = att.Value;  	break;  }  
Missing Default,Alsing.SourceCode,SyntaxDefinitionLoader,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Document\SyntaxDefinition\SyntaxDefinitionLoader.cs,ParseBlock,The following switch statement is missing a default case: switch (att.Name.ToLowerInvariant ()) {  case "style":  	pl.Style = GetStyle (att.Value);  	break;  case "name":  	pl.Name = att.Value;  	break;  case "normalizecase":  	pl.NormalizeCase = bool.Parse (att.Value);  	break;  case "casesensitive":  	pl.CaseSensitive = bool.Parse (att.Value);  	break;  }  
Missing Default,Alsing.SourceCode,SyntaxDefinitionLoader,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Document\SyntaxDefinition\SyntaxDefinitionLoader.cs,ParseBlock,The following switch statement is missing a default case: switch (att.Name.ToLowerInvariant ()) {  case "text":  	Pattern = att.Value;  	break;  case "iscomplex":  	IsComplex = bool.Parse (att.Value);  	break;  case "isseparator":  	IsSeparator = bool.Parse (att.Value);  	break;  case "category":  	Category = (att.Value);  	break;  }  
Missing Default,Alsing.SourceCode,SyntaxDefinitionLoader,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Document\SyntaxDefinition\SyntaxDefinitionLoader.cs,ParseBlock,The following switch statement is missing a default case: switch (att.Name.ToLowerInvariant ()) {  case "style":  	pl.Style = GetStyle (att.Value);  	break;  case "name":  	pl.Name = att.Value;  	break;  case "normalizecase":  	pl.NormalizeCase = bool.Parse (att.Value);  	break;  case "casesensitive":  	pl.CaseSensitive = bool.Parse (att.Value);  	break;  }  
Missing Default,Alsing.SourceCode,SyntaxDefinitionLoader,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Document\SyntaxDefinition\SyntaxDefinitionLoader.cs,ParseBlock,The following switch statement is missing a default case: switch (att.Name.ToLowerInvariant ()) {  case "text":  	Pattern = att.Value;  	break;  case "iscomplex":  	IsComplex = bool.Parse (att.Value);  	break;  case "isseparator":  	IsSeparator = bool.Parse (att.Value);  	break;  case "category":  	Category = (att.Value);  	break;  }  
Missing Default,Alsing.SourceCode,SyntaxDefinitionLoader,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Document\SyntaxDefinition\SyntaxDefinitionLoader.cs,ParseStyle,The following switch statement is missing a default case: switch (att.Name.ToLowerInvariant ()) {  case "name":  	Name = att.Value;  	break;  case "forecolor":  	ForeColor = att.Value;  	break;  case "backcolor":  	BackColor = att.Value;  	break;  case "bold":  	Bold = bool.Parse (att.Value);  	break;  case "italic":  	Italic = bool.Parse (att.Value);  	break;  case "underline":  	Underline = bool.Parse (att.Value);  	break;  }  
Missing Default,Alsing.Windows.Forms.SyntaxBox,EditViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\EditView\EditViewControl.cs,InsertEnter,The following switch statement is missing a default case: switch (Indent) {  case IndentStyle.None: {  	Document.InsertText ("\n"' Caret.Position.X' Caret.Position.Y);  	//depends on what sort of indention we are using....  	Caret.CurrentRow.Parse ();  	Caret.MoveDown (false);  	Caret.CurrentRow.Parse (false);  	Caret.CurrentRow.Parse (true);  	Caret.Position.X = 0;  	Caret.SetPos (Caret.Position);  	break;  }  case IndentStyle.LastRow: {  	Row xtr = Caret.CurrentRow;  	string indent = xtr.GetLeadingWhitespace ();  	int Max = Math.Min (indent.Length' Caret.Position.X);  	string split = "\n" + indent.Substring (0' Max);  	Document.InsertText (split' Caret.Position.X' Caret.Position.Y);  	Document.ResetVisibleRows ();  	Caret.CurrentRow.Parse (false);  	Caret.CurrentRow.Parse (true);  	Caret.MoveDown (false);  	Caret.CurrentRow.Parse (false);  	Caret.CurrentRow.Parse (true);  	Caret.Position.X = indent.Length;  	Caret.SetPos (Caret.Position);  	xtr.Parse (false);  	xtr.Parse (true);  	xtr.NextRow.Parse (false);  	xtr.NextRow.Parse (true);  	break;  }  case IndentStyle.Scope: {  	Row xtr = Caret.CurrentRow;  	xtr.Parse (true);  	if (xtr.ShouldOutdent) {  		OutdentEndRow ();  	}  	Document.InsertText ("\n"' Caret.Position.X' Caret.Position.Y);  	//depends on what sort of indention we are using....  	Caret.CurrentRow.Parse ();  	Caret.MoveDown (false);  	Caret.CurrentRow.Parse (false);  	var indent = new String ('\t'' Caret.CurrentRow.Depth);  	Document.InsertText (indent' 0' Caret.Position.Y);  	Caret.CurrentRow.Parse (false);  	Caret.CurrentRow.Parse (true);  	Caret.Position.X = indent.Length;  	Caret.SetPos (Caret.Position);  	Caret.CropPosition ();  	Selection.ClearSelection ();  	xtr.Parse (false);  	xtr.Parse (true);  	xtr.NextRow.Parse (false);  	xtr.NextRow.Parse (true);  	break;  }  case IndentStyle.Smart: {  	Row xtr = Caret.CurrentRow;  	if (xtr.ShouldOutdent) {  		OutdentEndRow ();  	}  	Document.InsertText ("\n"' Caret.Position.X' Caret.Position.Y);  	Caret.MoveDown (false);  	Caret.CurrentRow.Parse (false);  	Caret.CurrentRow.Parse (true);  	Caret.CurrentRow.startSpan.StartRow.Parse (false);  	Caret.CurrentRow.startSpan.StartRow.Parse (true);  	string prev = "\t" + Caret.CurrentRow.startSpan.StartRow.GetVirtualLeadingWhitespace ();  	string indent = Caret.CurrentRow.PrevRow.GetLeadingWhitespace ();  	if (indent.Length < prev.Length)  		indent = prev;  	string ts = "\t" + new String (' '' TabSize);  	while (indent.IndexOf (ts) >= 0) {  		indent = indent.Replace (ts' "\t\t");  	}  	Document.InsertText (indent' 0' Caret.Position.Y);  	Caret.CurrentRow.Parse (false);  	Caret.CurrentRow.Parse (true);  	Caret.Position.X = indent.Length;  	Caret.SetPos (Caret.Position);  	Caret.CropPosition ();  	Selection.ClearSelection ();  	xtr.Parse (false);  	xtr.Parse (true);  	xtr.NextRow.Parse (false);  	xtr.NextRow.Parse (true);  	break;  }  }  
Missing Default,Alsing.Windows.Forms.SyntaxBox,EditViewControl,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Controls\EditView\EditViewControl.cs,IsInputKey,The following switch statement is missing a default case: switch (key) {  case Keys.Up:  case Keys.Down:  case Keys.Right:  case Keys.Left:  case Keys.Tab:  case Keys.PageDown:  case Keys.PageUp:  case Keys.Enter:  	return true;  }  
Missing Default,Alsing.Drawing,DrawingTools,C:\repos\bdb-opensource_SyntaxBox\Alsing.SyntaxBox\Drawing\DrawingTools.cs,DrawBorder,The following switch statement is missing a default case: switch (Style) {  case BorderStyle2.Dotted: {  	r.Width--;  	r.Height--;  	g.DrawRectangle (new Pen (SystemColors.Control)' r);  	var p = new Pen (BorderColor) {  		DashStyle = DashStyle.Dot  	};  	g.DrawRectangle (p' r);  	break;  }  case BorderStyle2.Dashed: {  	r.Width--;  	r.Height--;  	g.DrawRectangle (new Pen (SystemColors.Control)' r);  	var p = new Pen (BorderColor) {  		DashStyle = DashStyle.Dash  	};  	g.DrawRectangle (p' r);  	break;  }  case BorderStyle2.Sunken: {  	if (BorderColor == Color.Black)  		BorderColor = SystemColors.Control;  	//System.Windows.Forms.ControlPaint.DrawBorder3D (g'r'Border3DStyle.Sunken);  	DrawBorder (Border3DStyle.Sunken' BorderColor' g' r);  	break;  }  case BorderStyle2.FixedSingle: {  	r.Width--;  	r.Height--;  	g.DrawRectangle (new Pen (BorderColor)' r);  	break;  }  case BorderStyle2.FixedDouble: {  	g.DrawRectangle (new Pen (BorderColor)' r.Left' r.Top' r.Width - 1' r.Height - 1);  	g.DrawRectangle (new Pen (BorderColor)' r.Left + 1' r.Top + 1' r.Width - 3' r.Height - 3);  	break;  }  case BorderStyle2.Raised: {  	if (BorderColor == Color.Black)  		BorderColor = SystemColors.Control;  	DrawBorder (Border3DStyle.Raised' BorderColor' g' r);  	//System.Windows.Forms.ControlPaint.DrawBorder3D (g'r'Border3DStyle.Raised);  	break;  }  case BorderStyle2.RaisedThin: {  	if (BorderColor == Color.Black)  		BorderColor = Color.FromArgb (SystemColors.Control.R' SystemColors.Control.G' SystemColors.Control.B);  	DrawBorder (Border3DStyle.RaisedInner' BorderColor' g' r);  	//System.Windows.Forms.ControlPaint.DrawBorder3D (g'r'Border3DStyle.Raised);  	break;  }  case BorderStyle2.SunkenThin: {  	if (BorderColor == Color.Black)  		BorderColor = Color.FromArgb (SystemColors.Control.R' SystemColors.Control.G' SystemColors.Control.B);  	DrawBorder (Border3DStyle.SunkenOuter' BorderColor' g' r);  	//System.Windows.Forms.ControlPaint.DrawBorder3D (g'r'Border3DStyle.Raised);  	break;  }  case BorderStyle2.Etched: {  	ControlPaint.DrawBorder3D (g' r' Border3DStyle.Etched);  	break;  }  case BorderStyle2.Bump: {  	if (BorderColor == Color.Black)  		BorderColor = SystemColors.Control;  	var b = new SolidBrush (BorderColor);  	g.FillRectangle (b' r.Left' r.Top' r.Width' 4);  	g.FillRectangle (b' r.Left' r.Bottom - 4' r.Width' 4);  	g.FillRectangle (b' r.Left' r.Top' 4' r.Height);  	g.FillRectangle (b' r.Right - 4' r.Top' 4' r.Height);  	b.Dispose ();  	DrawBorder (Border3DStyle.Raised' BorderColor' g' r);  	DrawBorder (Border3DStyle.Sunken' BorderColor' g' new Rectangle (r.Left + 4' r.Top + 4' r.Width - 8' r.Height - 8));  	break;  }  case BorderStyle2.Column: {  	var light = new SolidBrush (MixColors (BorderColor' Color.White' 1));  	var dark = new SolidBrush (MixColors (BorderColor' Color.Black' 0.4));  	g.FillRectangle (light' r.Left' r.Top' r.Width' 1);  	g.FillRectangle (light' r.Left' r.Top + 3' 1' r.Height - 1 - 6);  	g.FillRectangle (dark' r.Right - 1' r.Top + 3' 1' r.Height - 6);  	g.FillRectangle (dark' r.Left' r.Bottom - 1' r.Width' 1);  	break;  }  case BorderStyle2.Row: {  	var light = new SolidBrush (MixColors (BorderColor' Color.White' 1));  	var dark = new SolidBrush (MixColors (BorderColor' Color.Black' 0.4));  	g.FillRectangle (light' r.Left + 3' r.Top' r.Width - 6' 1);  	g.FillRectangle (light' r.Left' r.Top' 1' r.Height - 1);  	g.FillRectangle (dark' r.Right - 1' r.Top' 1' r.Height);  	g.FillRectangle (dark' r.Left + 3' r.Bottom - 1' r.Width - 6' 1);  	break;  }  }  
