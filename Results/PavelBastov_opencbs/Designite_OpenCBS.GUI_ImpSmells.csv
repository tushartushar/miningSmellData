Implementation smell,Namespace,Class,File,Method,Description
Long Method,OpenCBS.GUI,ProjectFollowUp,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ProjectFollowUp.cs,InitializeComponent,The method has 188 lines of code.
Long Method,OpenCBS.GUI,FrmInstallmentTypes,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Configuration\FrmInstallmentType.cs,InitializeComponent,The method has 141 lines of code.
Long Method,OpenCBS.GUI,AddGuarantorForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\AddGuarantorForm.cs,InitializeComponent,The method has 115 lines of code.
Long Method,OpenCBS.GUI,CashPrevisionForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\CashPrevisionForm.cs,InitializeComponent,The method has 138 lines of code.
Long Method,OpenCBS.GUI,EventCancelConfirmationForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\EventCancelConfirmationForm.cs,InitializeComponent,The method has 175 lines of code.
Long Method,OpenCBS.GUI,SearchCreditContractForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Search\SearchCreditContractForm.cs,InitializeComponent,The method has 218 lines of code.
Long Method,OpenCBS.GUI,DashboardForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\DashboardForm.cs,InitializeComponent,The method has 242 lines of code.
Long Method,OpenCBS.GUI,MainView,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\MainView.Designer.cs,InitializeComponent,The method has 719 lines of code.
Long Method,OpenCBS.GUI,FrmFundingLine,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Configuration\FrmFundingLine.cs,InitializeComponent,The method has 497 lines of code.
Long Method,OpenCBS.GUI,SearchClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Search\SearchClientForm.cs,InitializeComponent,The method has 269 lines of code.
Long Method,OpenCBS.GUI,AddressUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\AddressUserControl.cs,InitializeComponent,The method has 167 lines of code.
Long Method,OpenCBS.GUI.Accounting,AccountingClosureForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\AccountingClosureForm.cs,InitializeComponent,The method has 175 lines of code.
Long Method,OpenCBS.GUI.Accounting,AccountingJournals,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\AccountingJournals.cs,InitializeComponent,The method has 352 lines of code.
Long Method,OpenCBS.GUI.Accounting,AccountView,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\AccountView.cs,InitializeComponent,The method has 250 lines of code.
Long Method,OpenCBS.GUI.Accounting,AddBooking,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\AddBooking.cs,InitializeComponent,The method has 174 lines of code.
Long Method,OpenCBS.GUI.Accounting,AddStandardBooking,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\AddStandardBooking.cs,InitializeComponent,The method has 107 lines of code.
Long Method,OpenCBS.GUI.Accounting,ChartOfAccountsForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\ChartOfAccountsForm.cs,InitializeComponent,The method has 175 lines of code.
Long Method,OpenCBS.GUI.Accounting,ClosureBookings,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\ClosureBookings.cs,InitializeComponent,The method has 115 lines of code.
Long Method,OpenCBS.GUI.Accounting,FiscalYear,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\FiscalYear.cs,InitializeComponent,The method has 166 lines of code.
Long Method,OpenCBS.GUI.Accounting,FrmAccount,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\FrmAccount.cs,InitializeComponent,The method has 174 lines of code.
Long Method,OpenCBS.GUI.Accounting,FrmAccountingRules,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\FrmAccountingRules.cs,InitializeComponent,The method has 263 lines of code.
Long Method,OpenCBS.GUI.Accounting,ExchangeRateForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\ExchangeRateForm.cs,InitializeComponent,The method has 157 lines of code.
Long Method,OpenCBS.GUI.Accounting,ExportBookingsForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\ExportBookingsForm.cs,InitializeComponent,The method has 208 lines of code.
Long Method,OpenCBS.GUI.Accounting,ExportBookingsForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\ExportBookingsForm.cs,BwExportToFile_DoWork,The method has 109 lines of code.
Long Method,OpenCBS.GUI.Accounting,FrmAddContractAccountingRule,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\FrmAddContractAccountingRule.cs,InitializeComponent,The method has 270 lines of code.
Long Method,OpenCBS.GUI.Accounting,ManualEntries,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\ManualEntries.cs,InitializeComponent,The method has 176 lines of code.
Long Method,OpenCBS.GUI.Accounting,StandardBooking,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\StandardBooking.cs,InitializeComponent,The method has 117 lines of code.
Long Method,OpenCBS.GUI.Accounting,AccountTrialBalance,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\AccountTrialBalance.cs,InitializeComponent,The method has 188 lines of code.
Long Method,OpenCBS.GUI.AuditTrail,AuditTrailForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\AuditTrail\AuditTrailForm.cs,InitializeComponent,The method has 307 lines of code.
Long Method,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The method has 3724 lines of code.
Long Method,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,DisplaySavingProduct,The method has 359 lines of code.
Long Method,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializePackageNonRepaymentPenalties,The method has 115 lines of code.
Long Method,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializePackageNumberOfInstallments,The method has 106 lines of code.
Long Method,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeAmount,The method has 109 lines of code.
Long Method,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,SaveContract,The method has 153 lines of code.
Long Method,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,DisplayLoanEvents,The method has 249 lines of code.
Long Method,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,SaveLoanApproval,The method has 112 lines of code.
Long Method,OpenCBS.GUI.Clients,LoanSharesForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\LoanSharesForm.cs,InitializeComponent,The method has 106 lines of code.
Long Method,OpenCBS.GUI.Clients,NonSolidaryGroupForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\NonSolidaryGroupForm.cs,InitializeComponent,The method has 756 lines of code.
Long Method,OpenCBS.GUI.Configuration,AddBranchForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Configuration\AddBranchForm.cs,InitializeComponent,The method has 181 lines of code.
Long Method,OpenCBS.GUI.Configuration,BranchesForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Configuration\BranchesForm.cs,InitializeComponent,The method has 107 lines of code.
Long Method,OpenCBS.GUI.Configuration,AddTellerForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Configuration\AddTellerForm.cs,InitializeComponent,The method has 256 lines of code.
Long Method,OpenCBS.GUI.Configuration,TellersForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Configuration\TellersForm.cs,InitializeComponent,The method has 171 lines of code.
Long Method,OpenCBS.GUI.Configuration,EditUserForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Configuration\EditUserForm.cs,InitializeComponent,The method has 127 lines of code.
Long Method,OpenCBS.GUI.Configuration,FrmCurrencyType,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Configuration\FrmCurrencyType.cs,InitializeComponent,The method has 231 lines of code.
Long Method,OpenCBS.GUI.Configuration,FrmFundingLineEvent,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Configuration\FrmFundingLineEvent.cs,InitializeComponent,The method has 154 lines of code.
Long Method,OpenCBS.GUI.Configuration,FrmRoles,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Configuration\FrmRoles.cs,InitializeComponent,The method has 291 lines of code.
Long Method,OpenCBS.GUI.Configuration,UserForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Configuration\UserForm.Designer.cs,InitializeComponent,The method has 301 lines of code.
Long Method,OpenCBS.GUI.Configuration,ContractCodeForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Configuration\ContractCodeForm.cs,InitializeComponent,The method has 134 lines of code.
Long Method,OpenCBS.GUI.Configuration,FrmAddSavingBookProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddSavingBookProduct.cs,InitializeControls,The method has 102 lines of code.
Long Method,OpenCBS.GUI.Configuration,FrmAddSavingBookProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddSavingBookProduct.cs,InitializeComponent,The method has 1430 lines of code.
Long Method,OpenCBS.GUI.Configuration,FrmGeneralSettings,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Configuration\FrmGeneralSettings.cs,InitializeComponent,The method has 703 lines of code.
Long Method,OpenCBS.GUI.Contracts,AddTrancheForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\AddTrancheForm.cs,InitializeComponent,The method has 184 lines of code.
Long Method,OpenCBS.GUI.Contracts,ReschedulingForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\ReschedulingForm.cs,InitializeComponent,The method has 157 lines of code.
Long Method,OpenCBS.GUI.Contracts,FastDepositForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\FastDepositForm.cs,InitializeComponent,The method has 100 lines of code.
Long Method,OpenCBS.GUI.Contracts,ManualScheduleForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\ManualScheduleForm.cs,InitializeComponent,The method has 164 lines of code.
Long Method,OpenCBS.GUI.Contracts,VillageAddSavingsForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\VillageAddSavingsForm.cs,InitializeControls,The method has 207 lines of code.
Long Method,OpenCBS.GUI.Contracts,VillageAddSavingsForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\VillageAddSavingsForm.cs,lvMembers_ItemChecked,The method has 100 lines of code.
Long Method,OpenCBS.GUI.Contracts,VillageAddSavingsForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\VillageAddSavingsForm.cs,lvMembers_SubItemClicked,The method has 118 lines of code.
Long Method,OpenCBS.GUI.Contracts,VillageAddSavingsForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\VillageAddSavingsForm.cs,InitializeComponent,The method has 299 lines of code.
Long Method,OpenCBS.GUI.Contracts,CreditContractRepayForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\CreditContractRepayForm.Designer.cs,InitializeComponent,The method has 545 lines of code.
Long Method,OpenCBS.GUI.Contracts,CreditContractRepayForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\CreditContractRepayForm.Designer.cs,buttonSave_Click,The method has 103 lines of code.
Long Method,OpenCBS.GUI.Contracts,CloseSavingsForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\CloseSavingsForm.cs,InitializeComponent,The method has 194 lines of code.
Long Method,OpenCBS.GUI.Contracts,LoanDisbursementForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\LoanDisbursementForm.Designer.cs,InitializeComponent,The method has 213 lines of code.
Long Method,OpenCBS.GUI.Contracts,OpenSavingsForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\OpenSavingsForm.cs,InitializeComponent,The method has 166 lines of code.
Long Method,OpenCBS.GUI.Contracts,VillageCreditCommitteeForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\VillageCreditCommitteeForm.cs,InitializeComponent,The method has 210 lines of code.
Long Method,OpenCBS.GUI.Contracts,FastRepaymentForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\FastRepaymentForm.cs,LoadContracts,The method has 105 lines of code.
Long Method,OpenCBS.GUI.Contracts,FastRepaymentForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\FastRepaymentForm.cs,InitializeComponent,The method has 146 lines of code.
Long Method,OpenCBS.GUI.Contracts,SavingsOperationForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\SavingsOperationForm.cs,Initialize,The method has 149 lines of code.
Long Method,OpenCBS.GUI.Contracts,SavingsOperationForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\SavingsOperationForm.cs,InitializeComponent,The method has 295 lines of code.
Long Method,OpenCBS.GUI.Contracts,VillageAddLoanForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\VillageAddLoanForm.cs,InitializeControls,The method has 123 lines of code.
Long Method,OpenCBS.GUI.Contracts,VillageAddLoanForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\VillageAddLoanForm.cs,lvMembers_ItemChecked,The method has 200 lines of code.
Long Method,OpenCBS.GUI.Contracts,VillageAddLoanForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\VillageAddLoanForm.cs,lvMembers_SubItemEndEditing,The method has 138 lines of code.
Long Method,OpenCBS.GUI.Contracts,VillageAddLoanForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\VillageAddLoanForm.cs,btnSave_Click,The method has 175 lines of code.
Long Method,OpenCBS.GUI.Contracts,VillageAddLoanForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\VillageAddLoanForm.cs,InitializeComponent,The method has 227 lines of code.
Long Method,OpenCBS.GUI.Contracts,VillageDisburseLoanForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\VillageDisburseLoanForm.cs,btnSave_Click,The method has 109 lines of code.
Long Method,OpenCBS.GUI.Contracts,VillageDisburseLoanForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\VillageDisburseLoanForm.cs,InitializeComponent,The method has 186 lines of code.
Long Method,OpenCBS.GUI.Contracts,ReassignContractsForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\ReassignContractsForm.cs,InitializeComponent,The method has 243 lines of code.
Long Method,OpenCBS.GUI.Database,FrmDatabaseSettings,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Database\FrmDatabaseSettings.cs,InitializeComponent,The method has 467 lines of code.
Long Method,OpenCBS.GUI.Export,CustomizableImportForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Export\CustomizableImportForm.cs,InitializeComponent,The method has 210 lines of code.
Long Method,OpenCBS.GUI.Export,CustomizableExportConfigurationForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Export\CustomizableExportConfigurationForm.cs,InitializeComponent,The method has 196 lines of code.
Long Method,OpenCBS.GUI.Export,CustomizableExportForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Export\CustomizableExportForm.cs,InitializeComponent,The method has 299 lines of code.
Long Method,OpenCBS.GUI.Export,FieldListUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Export\FieldListUserControl.cs,InitializeComponent,The method has 204 lines of code.
Long Method,OpenCBS.GUI.Report_Browser,RepaymentCollectionSheetForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Report Browser\RepaymentCollectionSheetForm.cs,InitializeComponent,The method has 141 lines of code.
Long Method,OpenCBS.GUI.TellerManagement,FrmTellerOperation,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\TellerManagement\FrmTellerOperation.cs,InitializeComponent,The method has 112 lines of code.
Long Method,OpenCBS.GUI.Tools,FrmSaveFile,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Tools\frmSaveFile.cs,InitializeComponent,The method has 101 lines of code.
Long Method,OpenCBS.GUI.Tools,ShowPictureForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Tools\ShowPictureForm.cs,ShowPicture,The method has 120 lines of code.
Long Method,OpenCBS.GUI.Tools,ShowPictureForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Tools\ShowPictureForm.cs,ProcessImage,The method has 118 lines of code.
Long Method,OpenCBS.GUI.Tools,ShowPictureForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Tools\ShowPictureForm.cs,InitializeComponent,The method has 123 lines of code.
Long Method,OpenCBS.GUI.UserControl,CollapsibleSplitter,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CollapsibleSplitter.cs,animationTimerTick,The method has 113 lines of code.
Long Method,OpenCBS.GUI.UserControl,CollapsibleSplitter,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CollapsibleSplitter.cs,OnPaint,The method has 218 lines of code.
Long Method,OpenCBS.GUI.UserControl,CorporateUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CorporateUserControl.cs,InitializeComponent,The method has 368 lines of code.
Long Method,OpenCBS.GUI.UserControl,ElemMvtUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\ElemMvtUserControl.cs,InitializeComponent,The method has 113 lines of code.
Long Method,OpenCBS.GUI.UserControl,GroupUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\GroupUserControl.cs,InitializeComponent,The method has 617 lines of code.
Long Method,OpenCBS.GUI.UserControl,ListViewSorter,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\ListViewSorter.cs,Compare,The method has 127 lines of code.
Long Method,OpenCBS.GUI.UserControl,PersonUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\PersonUserControl.cs,InitializeComponent,The method has 1043 lines of code.
Long Method,OpenCBS.GUI.UserControl,SavingsListUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\SavingsListUserControl.cs,InitializeComponent,The method has 111 lines of code.
Long Method,OpenCBS.GUI.UserControl,SplitButton,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\SplitButton.cs,InitDefaultSplitImages,The method has 114 lines of code.
Long Method,OpenCBS.GUI.UserControl,SplitButton,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\SplitButton.cs,GetImageRect,The method has 117 lines of code.
Long Method,OpenCBS.GUI.Products,FrmAddCollateralProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddCollateralProduct.cs,InitializeComponent,The method has 205 lines of code.
Long Method,OpenCBS.GUI.Products,FrmAvailableSavingProducts,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAvailableSavingProducts.Designer.cs,InitializeComponent,The method has 122 lines of code.
Long Method,OpenCBS.GUI.Products,FrmAvalaibleLoanProducts,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAvalaibleLoanProducts.Designer.cs,InitializeComponent,The method has 104 lines of code.
Long Method,OpenCBS.GUI.Products,FrmAddLoanProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddLoanProduct.Designer.cs,InitializeComponent,The method has 2288 lines of code.
Long Method,OpenCBS.GUI.Products,FrmAddLoanProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddLoanProduct.Designer.cs,InitializePackageValues,The method has 220 lines of code.
Long Method,OpenCBS.GUI.Projets,SearchProjectForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Search\SearchProjectForm.cs,InitializeComponent,The method has 203 lines of code.
Complex Method,OpenCBS.GUI,FrmSplash,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\FrmSplash.cs,CheckConfiguration,Cyclomatic complexity of the method is 10
Complex Method,OpenCBS.GUI,SearchClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Search\SearchClientForm.cs,HandleTierSelect,Cyclomatic complexity of the method is 10
Complex Method,OpenCBS.GUI.Accounting,AccountView,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\AccountView.cs,_InitializeListViewBookings,Cyclomatic complexity of the method is 9
Complex Method,OpenCBS.GUI.Accounting,ExchangeRateForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\ExchangeRateForm.cs,InitializeListViewExchangeRate,Cyclomatic complexity of the method is 9
Complex Method,OpenCBS.GUI.Accounting,ExportBookingsForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\ExportBookingsForm.cs,BwExportToFile_DoWork,Cyclomatic complexity of the method is 16
Complex Method,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,DisplaySavingProduct,Cyclomatic complexity of the method is 17
Complex Method,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,AddProject,Cyclomatic complexity of the method is 8
Complex Method,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,DisplayContracts,Cyclomatic complexity of the method is 9
Complex Method,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,ViewContract,Cyclomatic complexity of the method is 10
Complex Method,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializePackageNonRepaymentPenalties,Cyclomatic complexity of the method is 9
Complex Method,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,buttonLoanSave_Click,Cyclomatic complexity of the method is 12
Complex Method,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,SaveContract,Cyclomatic complexity of the method is 17
Complex Method,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,buttonLoanDisbursment_Click,Cyclomatic complexity of the method is 14
Complex Method,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,Disburse,Cyclomatic complexity of the method is 10
Complex Method,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,Repay,Cyclomatic complexity of the method is 12
Complex Method,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,DisplayLoanEvents,Cyclomatic complexity of the method is 14
Complex Method,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,DeleteEvent,Cyclomatic complexity of the method is 18
Complex Method,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,SaveLoanApproval,Cyclomatic complexity of the method is 16
Complex Method,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,btCancelLastSavingEvent_Click,Cyclomatic complexity of the method is 10
Complex Method,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,buttonCloseSaving_Click,Cyclomatic complexity of the method is 13
Complex Method,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,GetFirstInstallmentDate,Cyclomatic complexity of the method is 10
Complex Method,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,DisplayCollateral,Cyclomatic complexity of the method is 8
Complex Method,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,nudLoanAmount_ValueChanged,Cyclomatic complexity of the method is 10
Complex Method,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,LoadLoanDetailsExtensions,Cyclomatic complexity of the method is 8
Complex Method,OpenCBS.GUI.Clients,NonSolidaryGroupForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\NonSolidaryGroupForm.cs,InitializeControls,Cyclomatic complexity of the method is 9
Complex Method,OpenCBS.GUI.Configuration,ContractCodeForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Configuration\ContractCodeForm.cs,GenerateCode,Cyclomatic complexity of the method is 8
Complex Method,OpenCBS.GUI.Configuration,FrmAddSavingBookProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddSavingBookProduct.cs,InitializeControls,Cyclomatic complexity of the method is 32
Complex Method,OpenCBS.GUI.Configuration,FrmGeneralSettings,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Configuration\FrmGeneralSettings.cs,InitializeListViewGeneralParameters,Cyclomatic complexity of the method is 9
Complex Method,OpenCBS.GUI.Configuration,FrmSettingsImportExport,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Configuration\frmSettingsImportExport.cs,BindTreeView,Cyclomatic complexity of the method is 8
Complex Method,OpenCBS.GUI.Contracts,ManualScheduleForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\ManualScheduleForm.cs,HandleCellEditFinishing,Cyclomatic complexity of the method is 12
Complex Method,OpenCBS.GUI.Contracts,VillageAddSavingsForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\VillageAddSavingsForm.cs,InitializeControls,Cyclomatic complexity of the method is 22
Complex Method,OpenCBS.GUI.Contracts,VillageAddSavingsForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\VillageAddSavingsForm.cs,lvMembers_ItemChecked,Cyclomatic complexity of the method is 20
Complex Method,OpenCBS.GUI.Contracts,VillageAddSavingsForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\VillageAddSavingsForm.cs,btnSave_Click,Cyclomatic complexity of the method is 10
Complex Method,OpenCBS.GUI.Contracts,CreditContractRepayForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\CreditContractRepayForm.Designer.cs,buttonSave_Click,Cyclomatic complexity of the method is 10
Complex Method,OpenCBS.GUI.Contracts,CreditContractRepayForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\CreditContractRepayForm.Designer.cs,SetRepaymentExplanation,Cyclomatic complexity of the method is 10
Complex Method,OpenCBS.GUI.Contracts,VillageCreditCommitteeForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\VillageCreditCommitteeForm.cs,lvMembers_ItemChecked,Cyclomatic complexity of the method is 16
Complex Method,OpenCBS.GUI.Contracts,VillageCreditCommitteeForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\VillageCreditCommitteeForm.cs,btnSave_Click,Cyclomatic complexity of the method is 10
Complex Method,OpenCBS.GUI.Contracts,FastRepaymentForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\FastRepaymentForm.cs,LoadContracts,Cyclomatic complexity of the method is 9
Complex Method,OpenCBS.GUI.Contracts,FastRepaymentForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\FastRepaymentForm.cs,lvContracts_SubItemEndEditing,Cyclomatic complexity of the method is 15
Complex Method,OpenCBS.GUI.Contracts,FastRepaymentForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\FastRepaymentForm.cs,BtnOkClick,Cyclomatic complexity of the method is 12
Complex Method,OpenCBS.GUI.Contracts,VillageAddLoanForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\VillageAddLoanForm.cs,InitializeControls,Cyclomatic complexity of the method is 14
Complex Method,OpenCBS.GUI.Contracts,VillageAddLoanForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\VillageAddLoanForm.cs,lvMembers_ItemChecked,Cyclomatic complexity of the method is 29
Complex Method,OpenCBS.GUI.Contracts,VillageAddLoanForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\VillageAddLoanForm.cs,btnSave_Click,Cyclomatic complexity of the method is 20
Complex Method,OpenCBS.GUI.Contracts,VillageDisburseLoanForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\VillageDisburseLoanForm.cs,btnSave_Click,Cyclomatic complexity of the method is 19
Complex Method,OpenCBS.GUI.Database,SQLInfoEnumerator,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Database\SQLInfoEnumerator.cs,RetrieveInformation,Cyclomatic complexity of the method is 8
Complex Method,OpenCBS.GUI.Tools,OMonthCalendar,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Tools\OMonthCalendar.cs,OnPaint,Cyclomatic complexity of the method is 10
Complex Method,OpenCBS.GUI.UserControl,GroupUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\GroupUserControl.cs,AddMembers,Cyclomatic complexity of the method is 8
Complex Method,OpenCBS.GUI.UserControl,SplitButton,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\SplitButton.cs,InitDefaultSplitImages,Cyclomatic complexity of the method is 11
Complex Method,OpenCBS.GUI.UserControl,SplitButton,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\SplitButton.cs,GetImageRect,Cyclomatic complexity of the method is 8
Complex Method,OpenCBS.GUI.Products,FrmAddLoanProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddLoanProduct.Designer.cs,InitializePackageValues,Cyclomatic complexity of the method is 26
Long Parameter List,OpenCBS.GUI,AddGuarantorForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\AddGuarantorForm.cs,AddGuarantorForm,The method has 5 parameters. Parameters: guarantor' pMdiParent' isView' tcode' applicationController
Long Parameter List,OpenCBS.GUI,AddressUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\AddressUserControl.cs,_SetValue,The method has 8 parameters. Parameters: pDistrict' pCity' pComments' pHomePhone' pPersonalPhone' pZipCode' pEmail' pHomeType
Long Parameter List,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,ClientForm,The method has 5 parameters. Parameters: pClient' pContractId' pMdiParent' selectedTab' applicationController
Long Parameter List,OpenCBS.GUI.Contracts,FastRepaymentForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\FastRepaymentForm.cs,CalculatePrincipalAndInterest,The method has 5 parameters. Parameters: loan' amount' disableFees' manualFees' paymentOption
Long Parameter List,OpenCBS.GUI.Database,SQLInfoEnumerator,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Database\SQLInfoEnumerator.cs,SQLBrowseConnect,The method has 6 parameters. Parameters: handleConnection' inConnection' stringLength' outConnection' bufferLength' stringLength2Ptr
Long Parameter List,OpenCBS.GUI.Tools,OMonthCalendar,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Tools\OMonthCalendar.cs,DrawCell,The method has 7 parameters. Parameters: graphics' dayBoxWidth' dayBoxHeight' firstWeekPosition' calendarRange' brushWarning' visDate
Long Identifier,OpenCBS.GUI,SearchCreditContractForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Search\SearchCreditContractForm.cs,,The length of the parameter _isSearchSavingContractForTransfer is 34.
Long Identifier,OpenCBS.GUI,SearchCreditContractForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Search\SearchCreditContractForm.cs,,The length of the parameter _isSearchLoanContractForCompulsory is 34.
Long Identifier,OpenCBS.GUI,MainView,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\MainView.Designer.cs,,The length of the parameter toolStripMenuItemInstallmentTypes is 33.
Long Identifier,OpenCBS.GUI,MainView,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\MainView.Designer.cs,,The length of the parameter accountingRulesToolStripMenuItem is 32.
Long Identifier,OpenCBS.GUI,MainView,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\MainView.Designer.cs,,The length of the parameter manualEntriesToolStripMenuItem is 30.
Long Identifier,OpenCBS.GUI,MainView,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\MainView.Designer.cs,,The length of the parameter savingProductsToolStripMenuItem is 31.
Long Identifier,OpenCBS.GUI,MainView,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\MainView.Designer.cs,,The length of the parameter changePasswordToolStripMenuItem is 31.
Long Identifier,OpenCBS.GUI,MainView,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\MainView.Designer.cs,,The length of the parameter getHelpFromForumToolStripMenuItem is 33.
Long Identifier,OpenCBS.GUI,MainView,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\MainView.Designer.cs,,The length of the parameter visitOpenCBScomToolStripMenuItem is 32.
Long Identifier,OpenCBS.GUI,MainView,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\MainView.Designer.cs,,The length of the parameter collateralProductsToolStripMenuItem is 35.
Long Identifier,OpenCBS.GUI,FrmFundingLine,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Configuration\FrmFundingLine.cs,,The length of the parameter columnHeaderBodyCorporateSecondaryHomePhone is 43.
Long Identifier,OpenCBS.GUI,FrmFundingLine,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Configuration\FrmFundingLine.cs,,The length of the parameter dateTimePickerFundingLineEndDate is 32.
Long Identifier,OpenCBS.GUI,FrmFundingLine,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Configuration\FrmFundingLine.cs,,The length of the parameter labelAnticipatedRemainingAmount is 31.
Long Identifier,OpenCBS.GUI,FrmFundingLine,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Configuration\FrmFundingLine.cs,,The length of the parameter dateTimePickerFundingLineBeginDate is 34.
Long Identifier,OpenCBS.GUI,FrmFundingLine,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Configuration\FrmFundingLine.cs,,The length of the parameter columnHeaderCorporateResidualAMount is 35.
Long Identifier,OpenCBS.GUI.Accounting,ExchangeRateForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\ExchangeRateForm.cs,,The length of the parameter zedGraphControlExchangeRateEvolution is 36.
Long Identifier,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,,The length of the parameter dateTimePickerProjectBeginDate is 30.
Long Identifier,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,,The length of the parameter lProjectFinancialPlanTotalAmount is 32.
Long Identifier,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,,The length of the parameter columnHeaderprojectPersonalSituation is 36.
Long Identifier,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,,The length of the parameter savingDepositToolStripMenuItem is 30.
Long Identifier,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,,The length of the parameter savingWithdrawToolStripMenuItem is 31.
Long Identifier,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,,The length of the parameter savingTransferToolStripMenuItem is 31.
Long Identifier,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,,The length of the parameter labelLoanNbOfInstallmentsMinMax is 31.
Long Identifier,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,,The length of the parameter toolStripMenuItemCancelPending is 30.
Long Identifier,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,,The length of the parameter toolStripMenuItemConfirmPending is 31.
Long Identifier,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,,The length of the parameter labelLoanLateFeesOnAmountMinMax is 31.
Long Identifier,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,,The length of the parameter lblLoanAnticipatedPartialFeesMinMax is 35.
Long Identifier,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,,The length of the parameter labelLoanAnticipatedTotalFeesMinMax is 35.
Long Identifier,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,,The length of the parameter textBoxLoanAnticipatedTotalFees is 31.
Long Identifier,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,,The length of the parameter groupBoxAnticipatedRepaymentPenalties is 37.
Long Identifier,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,,The length of the parameter menuItemCancelPendingSavingEvent is 32.
Long Identifier,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,,The length of the parameter menuItemConfirmPendingSavingEvent is 33.
Long Identifier,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,,The length of the parameter labelLoanLateFeesOnOverduePrincipalMinMax is 41.
Long Identifier,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,,The length of the parameter textBoxLoanLateFeesOnOverduePrincipal is 37.
Long Identifier,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,,The length of the parameter labelLoanLateFeesOnOverduePrincipal is 35.
Long Identifier,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,,The length of the parameter labelLoanLateFeesOnOverdueInterest is 34.
Long Identifier,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,,The length of the parameter textBoxLoanLateFeesOnOverdueInterest is 36.
Long Identifier,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,,The length of the parameter labelLoanLateFeesOnOverdueInterestMinMax is 40.
Long Identifier,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,,The length of the parameter specialOperationToolStripMenuItem is 33.
Long Identifier,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,,The length of the parameter columnHeaderLoanInstallmentTotal is 32.
Long Identifier,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,,The length of the parameter _anticipatedTotalFeesValueRange is 31.
Long Identifier,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,,The length of the parameter _anticipatedPartialFeesValueRange is 33.
Long Identifier,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,,The length of the parameter _lateFeesOnOverdueInterestRangeValue is 36.
Long Identifier,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,,The length of the parameter _lateFeesOnOverduePrincipalRangeValue is 37.
Long Identifier,OpenCBS.GUI.Configuration,FrmGeneralSettings,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Configuration\FrmGeneralSettings.cs,,The length of the parameter textBoxPublicHolidayDescription is 31.
Long Identifier,OpenCBS.GUI.Contracts,ReschedulingForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\ReschedulingForm.cs,,The length of the parameter chargeInterestDuringGracePeriodCheckBox is 39.
Long Identifier,OpenCBS.GUI.Contracts,LoanDisbursementForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\LoanDisbursementForm.Designer.cs,,The length of the parameter _alignInstallmentsDatesOnRealDisbursmentDate is 44.
Long Identifier,OpenCBS.GUI.Contracts,OpenSavingsForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\OpenSavingsForm.cs,,The length of the parameter gbModifyInitialAmountEntryFees is 30.
Long Identifier,OpenCBS.GUI.Database,FrmDatabaseSettings,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Database\FrmDatabaseSettings.cs,,The length of the parameter tableLayoutPanelDatabaseSettings is 32.
Long Identifier,OpenCBS.GUI.Database,FrmDatabaseSettings,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Database\FrmDatabaseSettings.cs,,The length of the parameter btnSQLDatabaseSettingsChangeName is 32.
Long Identifier,OpenCBS.GUI.Database,FrmDatabaseSettings,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Database\FrmDatabaseSettings.cs,,The length of the parameter btnSQLServerSettingsShowDetails is 31.
Long Identifier,OpenCBS.GUI.Database,FrmDatabaseSettings,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Database\FrmDatabaseSettings.cs,,The length of the parameter tBDatabaseSettingsSchemaResult is 30.
Long Identifier,OpenCBS.GUI.Database,FrmDatabaseSettings,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Database\FrmDatabaseSettings.cs,,The length of the parameter tableLayoutPanelServerSettings is 30.
Long Identifier,OpenCBS.GUI.Export,CustomizableImportForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Export\CustomizableImportForm.cs,,The length of the parameter columnHeaderInstallmentContractCode is 35.
Long Identifier,OpenCBS.GUI.Export,CustomizableExportForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Export\CustomizableExportForm.cs,,The length of the parameter dateTimePickerEndDateInstallments is 33.
Long Identifier,OpenCBS.GUI.Export,CustomizableExportForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Export\CustomizableExportForm.cs,,The length of the parameter dateTimePickerBeginDateInstallments is 35.
Long Identifier,OpenCBS.GUI.Export,CustomizableExportForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Export\CustomizableExportForm.cs,,The length of the parameter columnHeaderInstallmentContractCode is 35.
Long Identifier,OpenCBS.GUI.Export,CustomizableExportForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Export\CustomizableExportForm.cs,,The length of the parameter columnHeaderInstallmentClientName is 33.
Long Identifier,OpenCBS.GUI.Export,CustomizableExportForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Export\CustomizableExportForm.cs,,The length of the parameter tagInstallmentsAsPendingToolStripMenuItem is 41.
Long Identifier,OpenCBS.GUI.UserControl,GroupUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\GroupUserControl.cs,,The length of the parameter addressUserControlSecondaryAddress is 34.
Long Identifier,OpenCBS.GUI.UserControl,GroupUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\GroupUserControl.cs,,The length of the parameter dateTimePickerDateOfEstablishment is 33.
Long Identifier,OpenCBS.GUI.UserControl,ListViewEx,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\ListViewEx.cs,,The length of the parameter contextMenuStripCopyToClipBoard is 31.
Long Identifier,OpenCBS.GUI.UserControl,PersonUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\PersonUserControl.cs,,The length of the parameter addressUserControlSecondaryAddress is 34.
Long Identifier,OpenCBS.GUI.UserControl,SavingsListUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\SavingsListUserControl.cs,,The length of the parameter columnHeaderSavingCreationDate is 30.
Long Identifier,OpenCBS.GUI.UserControl,SavingsListUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\SavingsListUserControl.cs,,The length of the parameter columnHeaderSavingLastActionDate is 32.
Long Identifier,OpenCBS.GUI.Products,FrmAvailableSavingProducts,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAvailableSavingProducts.Designer.cs,,The length of the parameter savingBookProductToolStripMenuItem is 34.
Long Identifier,OpenCBS.GUI.Products,FrmAddLoanProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddLoanProduct.Designer.cs,,The length of the parameter checkBoxUseExceptionalInstallmen is 32.
Long Identifier,OpenCBS.GUI.Products,FrmAddLoanProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddLoanProduct.Designer.cs,,The length of the parameter groupBoxChargeInterestWithinGracePeriod is 39.
Long Identifier,OpenCBS.GUI.Products,FrmAddLoanProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddLoanProduct.Designer.cs,,The length of the parameter groupBoxDetailsOptionalParameters is 33.
Long Identifier,OpenCBS.GUI.Products,FrmAddLoanProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddLoanProduct.Designer.cs,,The length of the parameter groupBoxExoticInstallmentProperties is 35.
Long Identifier,OpenCBS.GUI.Products,FrmAddLoanProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddLoanProduct.Designer.cs,,The length of the parameter textBoxExoticInstallmentInterest is 32.
Long Identifier,OpenCBS.GUI.Products,FrmAddLoanProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddLoanProduct.Designer.cs,,The length of the parameter textBoxExoticInstallmentPrincipal is 33.
Long Identifier,OpenCBS.GUI.Products,FrmAddLoanProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddLoanProduct.Designer.cs,,The length of the parameter panelExoticProductNavigationButtons is 35.
Long Identifier,OpenCBS.GUI.Products,FrmAddLoanProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddLoanProduct.Designer.cs,,The length of the parameter buttonDecreaseExoticInstallment is 31.
Long Identifier,OpenCBS.GUI.Products,FrmAddLoanProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddLoanProduct.Designer.cs,,The length of the parameter buttonIncreaseExoticInstallment is 31.
Long Identifier,OpenCBS.GUI.Products,FrmAddLoanProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddLoanProduct.Designer.cs,,The length of the parameter groupBoxTotalAnticipatedRepaymentBase is 37.
Long Identifier,OpenCBS.GUI.Products,FrmAddLoanProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddLoanProduct.Designer.cs,,The length of the parameter textBoxAnticipatedRepaymentPenaltiesMax is 39.
Long Identifier,OpenCBS.GUI.Products,FrmAddLoanProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddLoanProduct.Designer.cs,,The length of the parameter textBoxAnticipatedRepaymentPenalties is 36.
Long Identifier,OpenCBS.GUI.Products,FrmAddLoanProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddLoanProduct.Designer.cs,,The length of the parameter textBoxAnticipatedRepaymentPenaltiesMin is 39.
Long Identifier,OpenCBS.GUI.Products,FrmAddLoanProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddLoanProduct.Designer.cs,,The length of the parameter textBoxAnticipatedPartialRepaimentMax is 37.
Long Identifier,OpenCBS.GUI.Products,FrmAddLoanProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddLoanProduct.Designer.cs,,The length of the parameter textBoxAnticipatedPartialRepaiment is 34.
Long Identifier,OpenCBS.GUI.Products,FrmAddLoanProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddLoanProduct.Designer.cs,,The length of the parameter textBoxAnticipatedPartialRepaimentMin is 37.
Long Identifier,OpenCBS.GUI.Products,FrmAddLoanProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddLoanProduct.Designer.cs,,The length of the parameter groupBoxPartialAnticipatedRepaymentBase is 39.
Long Statement,OpenCBS.GUI,AboutForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\AboutForm.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(AboutForm)); " is 129.
Long Statement,OpenCBS.GUI,ProjectFollowUp,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ProjectFollowUp.cs,comboBoxPersonalSituation_DropDown,The length of the statement  "            List<string> list = ServicesProvider.GetInstance().GetClientServices().FindAllSetUpFields(OSetUpFieldTypes.PersonalSituation); " is 126.
Long Statement,OpenCBS.GUI,ProjectFollowUp,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ProjectFollowUp.cs,comboBoxActivity_DropDown,The length of the statement  "            List<string> list = ServicesProvider.GetInstance().GetClientServices().FindAllSetUpFields(OSetUpFieldTypes.ActivityState); " is 122.
Long Statement,OpenCBS.GUI,ProjectFollowUp,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ProjectFollowUp.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(ProjectFollowUp)); " is 135.
Long Statement,OpenCBS.GUI,MultiLanguageForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\MultiLanguageForm.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(MultiLanguageForm)); " is 137.
Long Statement,OpenCBS.GUI,OpenCBSProgressBar,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\OpenCBSProgressBar.cs,DrawProgressBar,The length of the statement  "            g.FillRectangle(brush' ClientRectangle.Left + 2' ClientRectangle.Top + 2' (int)((ClientRectangle.Width - 4) * percent)' ClientRectangle.Height - 4); " is 148.
Long Statement,OpenCBS.GUI,FrmLocations,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Configuration\FrmLocations.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(FrmLocations)); " is 132.
Long Statement,OpenCBS.GUI,FrmLocations,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Configuration\FrmLocations.cs,InitializeComponent,The length of the statement  "            this.treeViewLocations.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(81))))' ((int)(((byte)(152))))); " is 134.
Long Statement,OpenCBS.GUI,FrmLocations,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Configuration\FrmLocations.cs,InitializeComponent,The length of the statement  "            this.treeViewLocations.AfterSelect += new System.Windows.Forms.TreeViewEventHandler(this.treeViewLocations_AfterSelect); " is 120.
Long Statement,OpenCBS.GUI,FrmProjectPurposesR,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Configuration\FrmProjectsPurposeR.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(FrmProjectPurposesR)); " is 139.
Long Statement,OpenCBS.GUI,FrmProjectObjectsCUD,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Configuration\FrmProjectObjectsCUD.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(FrmProjectObjectsCUD)); " is 140.
Long Statement,OpenCBS.GUI,FrmProjectObjectsCUD,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Configuration\FrmProjectObjectsCUD.cs,InitializeComponent,The length of the statement  "            this.buttonAdd.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56))))); " is 125.
Long Statement,OpenCBS.GUI,FrmProjectObjectsCUD,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Configuration\FrmProjectObjectsCUD.cs,InitializeComponent,The length of the statement  "            this.buttonExit.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56))))); " is 126.
Long Statement,OpenCBS.GUI,FrmInstallmentTypes,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Configuration\FrmInstallmentType.cs,buttonEdit_Click,The length of the statement  "                    InstallmentType type = new InstallmentType(((InstallmentType)listViewInstallmentTypes.SelectedItems[0].Tag).Id' _name' _nbOfDays' _nbOfMonths); " is 143.
Long Statement,OpenCBS.GUI,FrmInstallmentTypes,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Configuration\FrmInstallmentType.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(FrmInstallmentTypes)); " is 139.
Long Statement,OpenCBS.GUI,AddGuarantorForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\AddGuarantorForm.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(AddGuarantorForm)); " is 136.
Long Statement,OpenCBS.GUI,CashPrevisionForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\CashPrevisionForm.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(CashPrevisionForm)); " is 137.
Long Statement,OpenCBS.GUI,CashPrevisionForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\CashPrevisionForm.cs,InitializeComponent,The length of the statement  "            this.buttonRepaymentExit.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56))))); " is 135.
Long Statement,OpenCBS.GUI,CashPrevisionForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\CashPrevisionForm.cs,InitializeComponent,The length of the statement  "            this.buttonPreview.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56))))); " is 129.
Long Statement,OpenCBS.GUI,CashPrevisionForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\CashPrevisionForm.cs,InitializeComponent,The length of the statement  "            this.buttonNext.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56))))); " is 126.
Long Statement,OpenCBS.GUI,CashPrevisionForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\CashPrevisionForm.cs,InitializeComponent,The length of the statement  "            this.comboBoxForecastDays.SelectionChangeCommitted += new System.EventHandler(this.comboBoxForecastDays_SelectionChangeCommitted); " is 130.
Long Statement,OpenCBS.GUI,CashPrevisionForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\CashPrevisionForm.cs,DrawZedGraphForCashPrevision,The length of the statement  "              y = ServicesProvider.GetInstance().GetGraphServices().CalculateChartForFundingLine(_cashForFundingLine' date' forecastDays' includeDeleted); " is 140.
Long Statement,OpenCBS.GUI,CashPrevisionForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\CashPrevisionForm.cs,DrawZedGraphForCashPrevision,The length of the statement  "           LineItem myCurve = myPane.AddCurve(MultiLanguageStrings.GetString(Ressource.CashPrevisionForm' "graphCashAtHandCurve.Text")' " is 124.
Long Statement,OpenCBS.GUI,FrmDeleteEventComment,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\FrmDeleteEventComment.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(FrmDeleteEventComment)); " is 141.
Long Statement,OpenCBS.GUI,EventCancelConfirmationForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\EventCancelConfirmationForm.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(EventCancelConfirmationForm)); " is 147.
Long Statement,OpenCBS.GUI,SearchCreditContractForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Search\SearchCreditContractForm.cs,DisplayContracts,The length of the statement  "                    List<SavingSearchResult> savingResult = ServicesProvider.GetInstance().GetSavingServices().FindContracts(_currentPageNumber' " is 124.
Long Statement,OpenCBS.GUI,SearchCreditContractForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Search\SearchCreditContractForm.cs,DisplayContracts,The length of the statement  "                lblTitle.Text = string.Format("{0} ({1})"' MultiLanguageStrings.GetString(Ressource.SearchCreditContractForm' "result.Text")' _numberOfRecords); " is 144.
Long Statement,OpenCBS.GUI,SearchCreditContractForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Search\SearchCreditContractForm.cs,DisplayContracts,The length of the statement  "                textBoxCurrentlyPage.Text = string.Format("{0}{1} / {2}"' MultiLanguageStrings.GetString(Ressource.SearchCreditContractForm' "page.Text")' _currentPageNumber' _numbersTotalPage); " is 178.
Long Statement,OpenCBS.GUI,SearchCreditContractForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Search\SearchCreditContractForm.cs,InitializeListViewContract,The length of the statement  "                    result.ContractType == "B" ? "SavingsBook.Text" : result.ContractType == "T" ? "SavingsDeposit.Text" : "CompulsorySavings.Text")); " is 130.
Long Statement,OpenCBS.GUI,SearchCreditContractForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Search\SearchCreditContractForm.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(SearchCreditContractForm)); " is 144.
Long Statement,OpenCBS.GUI,SearchCreditContractForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Search\SearchCreditContractForm.cs,InitializeComponent,The length of the statement  "            this.textBoxQuery.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56))))); " is 128.
Long Statement,OpenCBS.GUI,SearchCreditContractForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Search\SearchCreditContractForm.cs,InitializeComponent,The length of the statement  "            this.lblTitle.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(81))))' ((int)(((byte)(152))))); " is 125.
Long Statement,OpenCBS.GUI,SearchCreditContractForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Search\SearchCreditContractForm.cs,InitializeComponent,The length of the statement  "            this.textBoxCurrentlyPage.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56))))); " is 136.
Long Statement,OpenCBS.GUI,SearchCreditContractForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Search\SearchCreditContractForm.cs,InitializeComponent,The length of the statement  "            this.listViewContracts.ColumnClick += new System.Windows.Forms.ColumnClickEventHandler(this.listViewContracts_ColumnClick); " is 123.
Long Statement,OpenCBS.GUI,SearchCreditContractForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Search\SearchCreditContractForm.cs,InitializeComponent,The length of the statement  "            this.imageListSort.ImageStream = ((System.Windows.Forms.ImageListStreamer)(resources.GetObject("imageListSort.ImageStream"))); " is 126.
Long Statement,OpenCBS.GUI,SearchCreditContractForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Search\SearchCreditContractForm.cs,InitializeComponent,The length of the statement  "            this.imageListClient.ImageStream = ((System.Windows.Forms.ImageListStreamer)(resources.GetObject("imageListClient.ImageStream"))); " is 130.
Long Statement,OpenCBS.GUI,DashboardForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\DashboardForm.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(DashboardForm)); " is 133.
Long Statement,OpenCBS.GUI,DashboardForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\DashboardForm.cs,InitializeComponent,The length of the statement  "            this.label2.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(45))))' ((int)(((byte)(45))))' ((int)(((byte)(48))))); " is 123.
Long Statement,OpenCBS.GUI,DashboardForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\DashboardForm.cs,InitializeComponent,The length of the statement  "            this.label1.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(45))))' ((int)(((byte)(45))))' ((int)(((byte)(48))))); " is 123.
Long Statement,OpenCBS.GUI,frmShowError,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\frmShowError.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(frmShowError)); " is 132.
Long Statement,OpenCBS.GUI,frmShowError,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\frmShowError.cs,InitializeComponent,The length of the statement  "            this.richTextBoxExceptionDetail.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(64))))' ((int)(((byte)(0))))); " is 141.
Long Statement,OpenCBS.GUI,InputBox,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\InputBox.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(InputBox)); " is 128.
Long Statement,OpenCBS.GUI,InputBox,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\InputBox.cs,InitializeComponent,The length of the statement  "            this.buttonCancel.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56))))); " is 128.
Long Statement,OpenCBS.GUI,InputBox,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\InputBox.cs,InitializeComponent,The length of the statement  "            this.buttonOK.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56))))); " is 124.
Long Statement,OpenCBS.GUI,MainView,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\MainView.Designer.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(MainView)); " is 128.
Long Statement,OpenCBS.GUI,MainView,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\MainView.Designer.cs,InitializeComponent,The length of the statement  "            this.toolBarLblVersion.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(100))))' ((int)(((byte)(180))))' ((int)(((byte)(156))))); " is 137.
Long Statement,OpenCBS.GUI,MainView,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\MainView.Designer.cs,InitializeComponent,The length of the statement  "            this.collateralProductsToolStripMenuItem.Click += new System.EventHandler(this.collateralProductsToolStripMenuItem_Click); " is 122.
Long Statement,OpenCBS.GUI,MainView,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\MainView.Designer.cs,InitializeComponent,The length of the statement  "            this.mainStatusBarLblUserName.BorderSides = ((System.Windows.Forms.ToolStripStatusLabelBorderSides)((((System.Windows.Forms.ToolStripStatusLabelBorderSides.Left | System.Windows.Forms.ToolStripStatusLabelBorderSides.Top)  " is 220.
Long Statement,OpenCBS.GUI,MainView,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\MainView.Designer.cs,InitializeComponent,The length of the statement  "            this.mainStatusBarLblDate.BorderSides = ((System.Windows.Forms.ToolStripStatusLabelBorderSides)((((System.Windows.Forms.ToolStripStatusLabelBorderSides.Left | System.Windows.Forms.ToolStripStatusLabelBorderSides.Top)  " is 216.
Long Statement,OpenCBS.GUI,MainView,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\MainView.Designer.cs,InitializeComponent,The length of the statement  "            this.toolStripStatusLblBranchCode.BorderSides = ((System.Windows.Forms.ToolStripStatusLabelBorderSides)((((System.Windows.Forms.ToolStripStatusLabelBorderSides.Left | System.Windows.Forms.ToolStripStatusLabelBorderSides.Top)  " is 224.
Long Statement,OpenCBS.GUI,MainView,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\MainView.Designer.cs,InitializeComponent,The length of the statement  "            this.toolStripStatusLblDB.BorderSides = ((System.Windows.Forms.ToolStripStatusLabelBorderSides)((((System.Windows.Forms.ToolStripStatusLabelBorderSides.Left | System.Windows.Forms.ToolStripStatusLabelBorderSides.Top)  " is 216.
Long Statement,OpenCBS.GUI,MainView,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\MainView.Designer.cs,InitializeCorporateForm,The length of the statement  "            ClientForm corporateForm = new ClientForm(OClientTypes.Corporate' this' false' _applicationController) { MdiParent = this }; " is 124.
Long Statement,OpenCBS.GUI,MainView,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\MainView.Designer.cs,InitializeSavingContractForm,The length of the statement  "                            Text = string.Format("{0} [{1}]"' MultiLanguageStrings.GetString(Ressource.ClientForm' "Group.Text")' ((Group)client).Name) " is 123.
Long Statement,OpenCBS.GUI,MainView,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\MainView.Designer.cs,menuItemBackupData_Click,The length of the statement  "            FrmDatabaseSettings frmDatabaseSettings = new FrmDatabaseSettings(FrmDatabaseSettingsEnum.SqlServerSettings' false' true); " is 122.
Long Statement,OpenCBS.GUI,MainView,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\MainView.Designer.cs,miContractCode_Click,The length of the statement  "                ServicesProvider.GetInstance().GetApplicationSettingsServices().UpdateSelectedParameter(OGeneralSettings.CONTRACT_CODE_TEMPLATE' frm.code); " is 139.
Long Statement,OpenCBS.GUI,MainView,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\MainView.Designer.cs,InitializeMainMenu,The length of the statement  "                if (extensionItem.GetItem().Name == "mnuAccountancy" && !ServicesProvider.GetInstance().GetGeneralSettings().UseExternalAccounting) " is 131.
Long Statement,OpenCBS.GUI,FrmFundingLine,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Configuration\FrmFundingLine.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(FrmFundingLine)); " is 134.
Long Statement,OpenCBS.GUI,FrmFundingLine,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Configuration\FrmFundingLine.cs,InitializeComponent,The length of the statement  "            this.columnHeaderBodyCorporateSecondaryHomePhone = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader())); " is 130.
Long Statement,OpenCBS.GUI,FrmFundingLine,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Configuration\FrmFundingLine.cs,InitializeComponent,The length of the statement  "            this.columnHeaderCorporateResidualAMount = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader())); " is 122.
Long Statement,OpenCBS.GUI,FrmSplash,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\FrmSplash.cs,_CheckApplicationSettings,The length of the statement  "            bWSeventToEight.ReportProgress(8' MultiLanguageStrings.GetString(Ressource.FrmSplash' "CheckApplicationSettings.Text")); " is 120.
Long Statement,OpenCBS.GUI,FrmSplash,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\FrmSplash.cs,_CheckDatabaseSchema,The length of the statement  "            if (!string.IsNullOrEmpty(ServicesProvider.GetInstance().GetDatabaseServices().CheckSQLDatabaseSchema(TechnicalSettings.DatabaseName))) " is 135.
Long Statement,OpenCBS.GUI,FrmSplash,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\FrmSplash.cs,_CheckDatabaseVersion,The length of the statement  "            if (!ServicesProvider.GetInstance().GetDatabaseServices().CheckSQLDatabaseVersion(TechnicalSettings.SoftwareVersion' TechnicalSettings.DatabaseName)) " is 149.
Long Statement,OpenCBS.GUI,FrmSplash,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\FrmSplash.cs,_CheckDatabaseVersion,The length of the statement  "                    bWOneToSeven.ReportProgress(4' MultiLanguageStrings.GetString(Ressource.FrmSplash' "Backup.Text") + " Path: " + UserSettings.BackupPath); " is 137.
Long Statement,OpenCBS.GUI,FrmSplash,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\FrmSplash.cs,_DatabaseUpdateScript,The length of the statement  "            databaseServices.UpdateDatabase(TechnicalSettings.SoftwareVersion' TechnicalSettings.DatabaseName' UserSettings.GetUpdatePath); " is 127.
Long Statement,OpenCBS.GUI,FrmSplash,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\FrmSplash.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(FrmSplash)); " is 129.
Long Statement,OpenCBS.GUI,FrmSplash,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\FrmSplash.cs,InitializeComponent,The length of the statement  "            this.bWOneToSeven.ProgressChanged += new System.ComponentModel.ProgressChangedEventHandler(this.backgroundWorker_ProgressChanged); " is 130.
Long Statement,OpenCBS.GUI,FrmSplash,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\FrmSplash.cs,InitializeComponent,The length of the statement  "            this.bWOneToSeven.RunWorkerCompleted += new System.ComponentModel.RunWorkerCompletedEventHandler(this.backgroundWorker_RunWorkerCompleted); " is 139.
Long Statement,OpenCBS.GUI,FrmSplash,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\FrmSplash.cs,InitializeComponent,The length of the statement  "            this.bWSeventToEight.ProgressChanged += new System.ComponentModel.ProgressChangedEventHandler(this.bWSeventToEight_ProgressChanged); " is 132.
Long Statement,OpenCBS.GUI,FrmSplash,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\FrmSplash.cs,InitializeComponent,The length of the statement  "            this.bWSeventToEight.RunWorkerCompleted += new System.ComponentModel.RunWorkerCompletedEventHandler(this.bWSeventToEight_RunWorkerCompleted); " is 141.
Long Statement,OpenCBS.GUI,frmActivity,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Configuration\frmActivity.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(frmActivity)); " is 131.
Long Statement,OpenCBS.GUI,CityForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Configuration\CityForm.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(CityForm)); " is 128.
Long Statement,OpenCBS.GUI,SearchClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Search\SearchClientForm.cs,DisplayTiers,The length of the statement  "                    string.Format("{0} ({1})"' MultiLanguageStrings.GetString(Ressource.SearchClientForm' "result.Text")' _numberOfRecords); " is 120.
Long Statement,OpenCBS.GUI,SearchClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Search\SearchClientForm.cs,DisplayTiers,The length of the statement  "                    MultiLanguageStrings.GetString(Ressource.SearchClientForm' "nbOfPages.Text") + _currentPageNumber + " / " + _numbersTotalPage; " is 126.
Long Statement,OpenCBS.GUI,SearchClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Search\SearchClientForm.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(SearchClientForm)); " is 136.
Long Statement,OpenCBS.GUI,SearchClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Search\SearchClientForm.cs,InitializeComponent,The length of the statement  "            this.labelTitleResult.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(81))))' ((int)(((byte)(152))))); " is 133.
Long Statement,OpenCBS.GUI,SearchClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Search\SearchClientForm.cs,InitializeComponent,The length of the statement  "            this.textBoxQuery.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56))))); " is 128.
Long Statement,OpenCBS.GUI,SearchClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Search\SearchClientForm.cs,InitializeComponent,The length of the statement  "            this.buttonCancel.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56))))); " is 128.
Long Statement,OpenCBS.GUI,SearchClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Search\SearchClientForm.cs,InitializeComponent,The length of the statement  "            this.imageListSort.ImageStream = ((System.Windows.Forms.ImageListStreamer)(resources.GetObject("imageListSort.ImageStream"))); " is 126.
Long Statement,OpenCBS.GUI,SearchClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Search\SearchClientForm.cs,radioButtonPerson_CheckedChanged,The length of the statement  "            listViewClient.Columns[3].Text = MultiLanguageStrings.GetString(Ressource.SearchClientForm' "PassportNumber.Text");// "Passeport's Number"; " is 139.
Long Statement,OpenCBS.GUI,ApplicationDate,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Configuration\ApplicationDate.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(ApplicationDate)); " is 135.
Long Statement,OpenCBS.GUI,ApplicationDate,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Configuration\ApplicationDate.cs,InitializeComponent,The length of the statement  "            this.mcalCurrentDate.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(224))))' ((int)(((byte)(224))))' ((int)(((byte)(224))))); " is 135.
Long Statement,OpenCBS.GUI,AddressUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\AddressUserControl.cs,_InitializeHomeType,The length of the statement  "            List<string> list = ServicesProvider.GetInstance().GetClientServices().FindAllSetUpFields(OSetUpFieldTypes.HousingLocation); " is 124.
Long Statement,OpenCBS.GUI,AddressUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\AddressUserControl.cs,_InitializeDistricts,The length of the statement  "            District selectDistrict = new District{Name = MultiLanguageStrings.GetString(Ressource.AddressUserControl'"selectDistrict.Text")}; " is 130.
Long Statement,OpenCBS.GUI,AddressUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\AddressUserControl.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(AddressUserControl)); " is 138.
Long Statement,OpenCBS.GUI,AddressUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\AddressUserControl.cs,InitializeComponent,The length of the statement  "            this.comboBoxDistrict.SelectionChangeCommitted += new System.EventHandler(this.comboBoxDistrict_SelectionChangeCommitted); " is 122.
Long Statement,OpenCBS.GUI,AddressUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\AddressUserControl.cs,InitializeComponent,The length of the statement  "            this.comboBoxProvince.SelectionChangeCommitted += new System.EventHandler(this.comboBoxProvince_SelectionChangeCommitted); " is 122.
Long Statement,OpenCBS.GUI,AddressUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\AddressUserControl.cs,InitializeComponent,The length of the statement  "            this.comboBoxHomeType.SelectionChangeCommitted += new System.EventHandler(this.comboBoxHomeType_SelectionChangeCommitted); " is 122.
Long Statement,OpenCBS.GUI,DateTimeUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\DateTimeUserControl.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(DateTimeUserControl)); " is 139.
Long Statement,OpenCBS.GUI,DateTimeUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\DateTimeUserControl.cs,InitializeComponent,The length of the statement  "            this.dateTimePickerDate.CalendarForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56))))); " is 142.
Long Statement,OpenCBS.GUI.Accounting,AccountingClosureForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\AccountingClosureForm.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(AccountingClosureForm)); " is 141.
Long Statement,OpenCBS.GUI.Accounting,AccountingClosureForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\AccountingClosureForm.cs,InitializeComponent,The length of the statement  "            this.olvClosures.FormatRow += new System.EventHandler<BrightIdeasSoftware.FormatRowEventArgs>(this.olvClosures_FormatRow); " is 122.
Long Statement,OpenCBS.GUI.Accounting,AccountingClosureForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\AccountingClosureForm.cs,InitializeComponent,The length of the statement  "            this.imageListSort.ImageStream = ((System.Windows.Forms.ImageListStreamer)(resources.GetObject("imageListSort.ImageStream"))); " is 126.
Long Statement,OpenCBS.GUI.Accounting,AccountingClosureForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\AccountingClosureForm.cs,InitializeComponent,The length of the statement  "            this.lblTitle.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(81))))' ((int)(((byte)(152))))); " is 125.
Long Statement,OpenCBS.GUI.Accounting,AccountingJournals,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\AccountingJournals.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(AccountingJournals)); " is 138.
Long Statement,OpenCBS.GUI.Accounting,AccountingJournals,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\AccountingJournals.cs,InitializeComponent,The length of the statement  "            this.bwRun.RunWorkerCompleted += new System.ComponentModel.RunWorkerCompletedEventHandler(this.BwRunRunWorkerCompleted); " is 120.
Long Statement,OpenCBS.GUI.Accounting,AccountingJournals,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\AccountingJournals.cs,InitializeComponent,The length of the statement  "            this.bwPostEvents.RunWorkerCompleted += new System.ComponentModel.RunWorkerCompletedEventHandler(this.BwPostEventsRunWorkerCompleted); " is 134.
Long Statement,OpenCBS.GUI.Accounting,AccountingJournals,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\AccountingJournals.cs,InitializeComponent,The length of the statement  "            this.bwPostBookings.RunWorkerCompleted += new System.ComponentModel.RunWorkerCompletedEventHandler(this.BwPostBookingsRunWorkerCompleted); " is 138.
Long Statement,OpenCBS.GUI.Accounting,AccountView,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\AccountView.cs,_InitializeComboBoxCurrencies,The length of the statement  "                columnHeaderCredit.Text = MultiLanguageStrings.GetString(Ressource.AccountView' "CreditColumn.Text") + @" " + _pivotCurrency.Name; " is 130.
Long Statement,OpenCBS.GUI.Accounting,AccountView,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\AccountView.cs,_InitializeComboBoxCurrencies,The length of the statement  "                columnHeaderDebit.Text = MultiLanguageStrings.GetString(Ressource.AccountView' "DebitColumn.Text") + @" " + _pivotCurrency.Name; " is 128.
Long Statement,OpenCBS.GUI.Accounting,AccountView,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\AccountView.cs,_InitializeComboBoxCurrencies,The length of the statement  "                columnHeaderDebit.Text = MultiLanguageStrings.GetString(Ressource.AccountView' "DebitColumn.Text") + @" " + ((Currency) cmbCurrencies.SelectedItem).Name; " is 153.
Long Statement,OpenCBS.GUI.Accounting,AccountView,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\AccountView.cs,_InitializeComboBoxCurrencies,The length of the statement  "                columnHeaderAmountEC.Text = MultiLanguageStrings.GetString(Ressource.AccountView' "AmountColumn.Text") + @" " + _pivotCurrency.Name; " is 132.
Long Statement,OpenCBS.GUI.Accounting,AccountView,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\AccountView.cs,_InitializeListViewBookings,The length of the statement  "                _bookingsStock = ServicesProvider.GetInstance().GetAccountingServices().FindAllBookings(pAccount' pBeginDate' pEndDate' ((Currency) (cmbCurrencies.SelectedItem)).Id ' pBookingType' ((Branch) cmbBranches.SelectedItem).Id); " is 221.
Long Statement,OpenCBS.GUI.Accounting,AccountView,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\AccountView.cs,comboBoxCurrencies_SelectedIndexChanged,The length of the statement  "            columnHeaderCredit.Text = MultiLanguageStrings.GetString(Ressource.AccountView' @"CreditColumn.Text") + @" " + ((Currency) cmbCurrencies.SelectedItem).Name; " is 156.
Long Statement,OpenCBS.GUI.Accounting,AccountView,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\AccountView.cs,comboBoxCurrencies_SelectedIndexChanged,The length of the statement  "            columnHeaderDebit.Text = MultiLanguageStrings.GetString(Ressource.AccountView' @"DebitColumn.Text") + @" " + (cmbCurrencies.SelectedItem as Currency).Name; " is 155.
Long Statement,OpenCBS.GUI.Accounting,AccountView,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\AccountView.cs,comboBoxCurrencies_SelectedIndexChanged,The length of the statement  "            if(columnHeaderAmountEC!=null) columnHeaderAmountEC.Text = MultiLanguageStrings.GetString(Ressource.AccountView' "AmountColumn.Text") + @" " + _pivotCurrency.Name; " is 163.
Long Statement,OpenCBS.GUI.Accounting,AccountView,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\AccountView.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(AccountView)); " is 131.
Long Statement,OpenCBS.GUI.Accounting,AccountView,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\AccountView.cs,InitializeComponent,The length of the statement  "            this.lblTitle.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(81))))' ((int)(((byte)(152))))); " is 125.
Long Statement,OpenCBS.GUI.Accounting,AccountView,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\AccountView.cs,InitializeComponent,The length of the statement  "            this.cbAccounts.SelectionChangeCommitted += new System.EventHandler(this.comboBoxSelectAccount_SelectionChangeCommitted); " is 121.
Long Statement,OpenCBS.GUI.Accounting,AddBooking,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\AddBooking.cs,buttonSave_Click,The length of the statement  "                    ServicesProvider.GetInstance().GetEventProcessorServices().LogUser(OUserEvents.UserStandardBookingEvent' textBoxDescription.Text' User.CurrentUser.Id); " is 151.
Long Statement,OpenCBS.GUI.Accounting,AddBooking,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\AddBooking.cs,buttonSave_Click,The length of the statement  "                    if (MessageBox.Show(MultiLanguageStrings.GetString(Ressource.ElemMvtUserControl' "AccountSaved.Text")' ""' MessageBoxButtons.YesNo' " is 131.
Long Statement,OpenCBS.GUI.Accounting,AddBooking,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\AddBooking.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(AddBooking)); " is 130.
Long Statement,OpenCBS.GUI.Accounting,AddStandardBooking,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\AddStandardBooking.cs,SetStandardBooking,The length of the statement  "            comboBoxCredit.SelectedItem = comboBoxCredit.Items.OfType<Account>().FirstOrDefault(item => item.Number == pBooking.CreditAccount.Number); " is 138.
Long Statement,OpenCBS.GUI.Accounting,AddStandardBooking,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\AddStandardBooking.cs,SetStandardBooking,The length of the statement  "            comboBoxDebit.SelectedItem = comboBoxDebit.Items.OfType<Account>().FirstOrDefault(item => item.Number == pBooking.DebitAccount.Number); " is 135.
Long Statement,OpenCBS.GUI.Accounting,AddStandardBooking,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\AddStandardBooking.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(AddStandardBooking)); " is 138.
Long Statement,OpenCBS.GUI.Accounting,ChartOfAccountsForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\ChartOfAccountsForm.cs,IntializeTreeViewChartOfAccounts,The length of the statement  "            List<AccountCategory> accountCategories = ServicesProvider.GetInstance().GetChartOfAccountsServices().SelectAccountCategories(); " is 128.
Long Statement,OpenCBS.GUI.Accounting,ChartOfAccountsForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\ChartOfAccountsForm.cs,DeleteAccount,The length of the statement  "                        MessageBox.Show(MultiLanguageStrings.GetString(Ressource.ChartOfAccountsForm' "AccountDeletedSuccessfully.Text")' ""' MessageBoxButtons.OK' MessageBoxIcon.Information); " is 168.
Long Statement,OpenCBS.GUI.Accounting,ChartOfAccountsForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\ChartOfAccountsForm.cs,DeleteAccount,The length of the statement  "                        MessageBox.Show(MultiLanguageStrings.GetString(Ressource.ChartOfAccountsForm' "AccountDeletedSuccessfully.Text")' ""' MessageBoxButtons.OK' MessageBoxIcon.Information); " is 168.
Long Statement,OpenCBS.GUI.Accounting,ChartOfAccountsForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\ChartOfAccountsForm.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(ChartOfAccountsForm)); " is 139.
Long Statement,OpenCBS.GUI.Accounting,ChartOfAccountsForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\ChartOfAccountsForm.cs,InitializeComponent,The length of the statement  "            this._labelTitle.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(81))))' ((int)(((byte)(152))))); " is 128.
Long Statement,OpenCBS.GUI.Accounting,ChartOfAccountsForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\ChartOfAccountsForm.cs,ImportAccounts,The length of the statement  "                    bool deleteRelated = Confirm(MultiLanguageStrings.GetString(Ressource.ChartOfAccountsForm' "ToDeleteTheChartOfAccounts.Text")); " is 127.
Long Statement,OpenCBS.GUI.Accounting,ClosureBookings,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\ClosureBookings.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(ClosureBookings)); " is 135.
Long Statement,OpenCBS.GUI.Accounting,EditFiscalYear,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\EditFiscalYear.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(EditFiscalYear)); " is 134.
Long Statement,OpenCBS.GUI.Accounting,FiscalYear,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\FiscalYear.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(FiscalYear)); " is 130.
Long Statement,OpenCBS.GUI.Accounting,FiscalYear,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\FiscalYear.cs,InitializeComponent,The length of the statement  "            this.imageListSort.ImageStream = ((System.Windows.Forms.ImageListStreamer)(resources.GetObject("imageListSort.ImageStream"))); " is 126.
Long Statement,OpenCBS.GUI.Accounting,FiscalYear,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\FiscalYear.cs,InitializeComponent,The length of the statement  "            this.lblTitle.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(81))))' ((int)(((byte)(152))))); " is 125.
Long Statement,OpenCBS.GUI.Accounting,FrmAccount,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\FrmAccount.cs,Initialize,The length of the statement  "            List<AccountCategory> accountCategories = ServicesProvider.GetInstance().GetChartOfAccountsServices().SelectAccountCategories(); " is 128.
Long Statement,OpenCBS.GUI.Accounting,FrmAccount,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\FrmAccount.cs,Initialize,The length of the statement  "                foreach (Account account in accounts.Where(item => item.AccountCategory == accountCat.AccountCategory && !item.ParentAccountId.HasValue)) " is 137.
Long Statement,OpenCBS.GUI.Accounting,FrmAccount,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\FrmAccount.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(FrmAccount)); " is 130.
Long Statement,OpenCBS.GUI.Accounting,FrmAccountingRules,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\FrmAccountingRules.cs,Initialize,The length of the statement  "            string eventType = cbEventTypes.SelectedItem.ToString() == "All" ? "" : ((EventType) cbEventTypes.SelectedItem).EventCode; " is 122.
Long Statement,OpenCBS.GUI.Accounting,FrmAccountingRules,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\FrmAccountingRules.cs,Initialize,The length of the statement  "            AccountingRuleCollection rules = ServicesProvider.GetInstance().GetAccountingRuleServices().SelectAllByEventType(eventType); " is 124.
Long Statement,OpenCBS.GUI.Accounting,FrmAccountingRules,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\FrmAccountingRules.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(FrmAccountingRules)); " is 138.
Long Statement,OpenCBS.GUI.Accounting,FrmAccountingRules,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\FrmAccountingRules.cs,InitializeComponent,The length of the statement  "            this.listViewContractsRules.ColumnClick += new System.Windows.Forms.ColumnClickEventHandler(this.ListViewContractsRulesColumnClick); " is 132.
Long Statement,OpenCBS.GUI.Accounting,FrmAccountingRules,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\FrmAccountingRules.cs,InitializeComponent,The length of the statement  "            this.imageListSort.ImageStream = ((System.Windows.Forms.ImageListStreamer)(resources.GetObject("imageListSort.ImageStream"))); " is 126.
Long Statement,OpenCBS.GUI.Accounting,FrmAccountingRules,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\FrmAccountingRules.cs,InitializeComponent,The length of the statement  "            this.lblTitle.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(81))))' ((int)(((byte)(152))))); " is 125.
Long Statement,OpenCBS.GUI.Accounting,ExchangeRateForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\ExchangeRateForm.cs,_Initialization,The length of the statement  "                List<double[]> ordonnees = ServicesProvider.GetInstance().GetExchangeRateServices().CalculateCurve(_date.Month' _date.Year); " is 124.
Long Statement,OpenCBS.GUI.Accounting,ExchangeRateForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\ExchangeRateForm.cs,InitializeValuesForRatesList,The length of the statement  "            lbRateDetails.Text = string.Format("{0} ( {1} {2} )"' MultiLanguageStrings.GetString(Ressource.ExchangeRateForm' "existingRate.text")' month' _date.Year); " is 154.
Long Statement,OpenCBS.GUI.Accounting,ExchangeRateForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\ExchangeRateForm.cs,InitializeValuesForRatesList,The length of the statement  "            lbRateEvolution.Text = string.Format("{0} ( {1} {2} )"' MultiLanguageStrings.GetString(Ressource.ExchangeRateForm' "rateEvolution.Text")' month' _date.Year); " is 157.
Long Statement,OpenCBS.GUI.Accounting,ExchangeRateForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\ExchangeRateForm.cs,InitializeGraphRateEvolution,The length of the statement  "                LineItem myCurve = myPane.AddCurve(_currencies.ToArray()[i].ToString()' null' ordonnee' _colors[i%_colors.Length]' SymbolType.Circle); " is 134.
Long Statement,OpenCBS.GUI.Accounting,ExchangeRateForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\ExchangeRateForm.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(ExchangeRateForm)); " is 136.
Long Statement,OpenCBS.GUI.Accounting,ExportBookingsForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\ExportBookingsForm.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(ExportBookingsForm)); " is 138.
Long Statement,OpenCBS.GUI.Accounting,ExportBookingsForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\ExportBookingsForm.cs,InitializeComponent,The length of the statement  "            this.listViewTransactionsList.ItemCheck += new System.Windows.Forms.ItemCheckEventHandler(this.listViewTransactionsList_ItemCheck); " is 131.
Long Statement,OpenCBS.GUI.Accounting,ExportBookingsForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\ExportBookingsForm.cs,InitializeComponent,The length of the statement  "            this.listViewTransactionsList.ItemChecked += new System.Windows.Forms.ItemCheckedEventHandler(this.listViewTransactionsList_ItemChecked); " is 137.
Long Statement,OpenCBS.GUI.Accounting,ExportBookingsForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\ExportBookingsForm.cs,BwExportToFile_WorkCompleted,The length of the statement  "                MessageBox.Show(MultiLanguageStrings.GetString(Ressource.ExportBookingsForm' "ExportCancelled.Text") + @"   " + args.Error); " is 124.
Long Statement,OpenCBS.GUI.Accounting,ExportBookingsForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\ExportBookingsForm.cs,buttonPrepareExport_Click,The length of the statement  "                    ServicesProvider.GetInstance().GetAccountingServices().SelectExportAccountingProcParams("ExportAccounting_" + cbProcNames.Text); " is 128.
Long Statement,OpenCBS.GUI.Accounting,FrmAddContractAccountingRule,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\FrmAddContractAccountingRule.cs,Initialize,The length of the statement  "            List<EventType> eventTypes = ServicesProvider.GetInstance().GetEventProcessorServices().SelectEventTypesForAccounting(); " is 120.
Long Statement,OpenCBS.GUI.Accounting,FrmAddContractAccountingRule,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\FrmAddContractAccountingRule.cs,Initialize,The length of the statement  "            cmbDebitAccount.DataSource = ServicesProvider.GetInstance().GetChartOfAccountsServices().FindAllAccounts().OrderBy(item => item.Number).ToList(); " is 145.
Long Statement,OpenCBS.GUI.Accounting,FrmAddContractAccountingRule,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\FrmAddContractAccountingRule.cs,Initialize,The length of the statement  "            cmbCreditAccount.DataSource = ServicesProvider.GetInstance().GetChartOfAccountsServices().FindAllAccounts().OrderBy(item => item.Number).ToList(); " is 146.
Long Statement,OpenCBS.GUI.Accounting,FrmAddContractAccountingRule,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\FrmAddContractAccountingRule.cs,SetAccountingRule,The length of the statement  "                var selectedItem = cmbEconomicActivity.Items.OfType<EconomicActivity>().FirstOrDefault(item => item.Id == rule.EconomicActivity.Id); " is 132.
Long Statement,OpenCBS.GUI.Accounting,FrmAddContractAccountingRule,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\FrmAddContractAccountingRule.cs,IntializeComboboxProduct,The length of the statement  "                    foreach(LoanProduct product in ServicesProvider.GetInstance().GetProductServices().FindAllPackages(false' OClientTypes.All)) " is 124.
Long Statement,OpenCBS.GUI.Accounting,FrmAddContractAccountingRule,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\FrmAddContractAccountingRule.cs,IntializeComboboxProduct,The length of the statement  "                    foreach (ISavingProduct product in ServicesProvider.GetInstance().GetSavingProductServices().FindAllSavingsProducts(false' OClientTypes.All)) " is 141.
Long Statement,OpenCBS.GUI.Accounting,FrmAddContractAccountingRule,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\FrmAddContractAccountingRule.cs,InitializeComboboxActivity,The length of the statement  "                foreach (EconomicActivity activity in ServicesProvider.GetInstance().GetEconomicActivityServices().FindAllEconomicActivities()) " is 127.
Long Statement,OpenCBS.GUI.Accounting,FrmAddContractAccountingRule,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\FrmAddContractAccountingRule.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(FrmAddContractAccountingRule)); " is 148.
Long Statement,OpenCBS.GUI.Accounting,ManualEntries,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\ManualEntries.cs,InititaliseEntries,The length of the statement  "            List<CoreDomain.Accounting.FiscalYear> fiscalYears = ServicesProvider.GetInstance().GetChartOfAccountsServices().SelectFiscalYears(); " is 133.
Long Statement,OpenCBS.GUI.Accounting,ManualEntries,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\ManualEntries.cs,InititaliseEntries,The length of the statement  "            List<Booking> bookings = ServicesProvider.GetInstance().GetAccountingServices().SelectMovements(true' null' fiscalYears); " is 121.
Long Statement,OpenCBS.GUI.Accounting,ManualEntries,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\ManualEntries.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(ManualEntries)); " is 133.
Long Statement,OpenCBS.GUI.Accounting,ManualEntries,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\ManualEntries.cs,InitializeComponent,The length of the statement  "            this.imageListSort.ImageStream = ((System.Windows.Forms.ImageListStreamer)(resources.GetObject("imageListSort.ImageStream"))); " is 126.
Long Statement,OpenCBS.GUI.Accounting,ManualEntries,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\ManualEntries.cs,InitializeComponent,The length of the statement  "            this.lblTitle.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(81))))' ((int)(((byte)(152))))); " is 125.
Long Statement,OpenCBS.GUI.Accounting,StandardBooking,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\StandardBooking.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(StandardBooking)); " is 135.
Long Statement,OpenCBS.GUI.Accounting,StandardBooking,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\StandardBooking.cs,InitializeComponent,The length of the statement  "            this.listBookings.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56))))); " is 128.
Long Statement,OpenCBS.GUI.Accounting,StandardBooking,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\StandardBooking.cs,InitializeComponent,The length of the statement  "            this.lblCaption.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(81))))' ((int)(((byte)(152))))); " is 127.
Long Statement,OpenCBS.GUI.Accounting,StandardBooking,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\StandardBooking.cs,InitializeComponent,The length of the statement  "            this.tableLayoutPanel2.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(81))))' ((int)(((byte)(152))))); " is 134.
Long Statement,OpenCBS.GUI.Accounting,AccountTrialBalance,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\AccountTrialBalance.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(AccountTrialBalance)); " is 139.
Long Statement,OpenCBS.GUI.Accounting,AccountTrialBalance,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\AccountTrialBalance.cs,InitializeComponent,The length of the statement  "            this.lblTitle.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(81))))' ((int)(((byte)(152))))); " is 125.
Long Statement,OpenCBS.GUI.Accounting,TrialBalancePreview,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\TrialBalancePreview.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(TrialBalancePreview)); " is 139.
Long Statement,OpenCBS.GUI.AuditTrail,AuditTrailForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\AuditTrail\AuditTrailForm.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(AuditTrailForm)); " is 134.
Long Statement,OpenCBS.GUI.AuditTrail,AuditTrailForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\AuditTrail\AuditTrailForm.cs,InitializeComponent,The length of the statement  "            this.lblTitle.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(64))))' ((int)(((byte)(0))))); " is 123.
Long Statement,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(ClientForm)); " is 130.
Long Statement,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The length of the statement  "            this.columnHeaderprojectPersonalSituation = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader())); " is 123.
Long Statement,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The length of the statement  "            this.listViewGuarantors.DrawColumnHeader += new System.Windows.Forms.DrawListViewColumnHeaderEventHandler(this.listViewGuarantors_DrawColumnHeader); " is 148.
Long Statement,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The length of the statement  "            this.listViewGuarantors.DrawSubItem += new System.Windows.Forms.DrawListViewSubItemEventHandler(this.listViewGuarantors_DrawSubItem); " is 133.
Long Statement,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The length of the statement  "            this.lblGuarantorsList.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(81))))' ((int)(((byte)(152))))); " is 134.
Long Statement,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The length of the statement  "            this.lblCollaterals.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(81))))' ((int)(((byte)(152))))); " is 131.
Long Statement,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The length of the statement  "            this.labelLoansContracts.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(81))))' ((int)(((byte)(152))))); " is 136.
Long Statement,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The length of the statement  "            this.labelSavingsContracts.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(81))))' ((int)(((byte)(152))))); " is 138.
Long Statement,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The length of the statement  "            this.numericUpDownLoanGracePeriod.ValueChanged += new System.EventHandler(this.numericUpDownLoanGracePeriod_ValueChanged); " is 122.
Long Statement,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The length of the statement  "            this._loanOfficerComboBox.SelectedIndexChanged += new System.EventHandler(this.comboBoxLoanOfficer_SelectedIndexChanged); " is 121.
Long Statement,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The length of the statement  "            this.comboBoxLoanFundingLine.SelectedIndexChanged += new System.EventHandler(this.comboBoxLoanFundingLine_SelectedIndexChanged); " is 128.
Long Statement,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The length of the statement  "            this.tbLoanAnticipatedPartialFees.TextChanged += new System.EventHandler(this.textBoxLoanAnticipatedPartialFees_TextChanged); " is 125.
Long Statement,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The length of the statement  "            this.tbLoanAnticipatedPartialFees.KeyPress += new System.Windows.Forms.KeyPressEventHandler(this.textBoxLocAmount_KeyPress); " is 124.
Long Statement,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The length of the statement  "            this.textBoxLoanAnticipatedTotalFees.TextChanged += new System.EventHandler(this.textBoxLoanAnticipatedTotalFees_TextChanged); " is 126.
Long Statement,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The length of the statement  "            this.textBoxLoanAnticipatedTotalFees.KeyPress += new System.Windows.Forms.KeyPressEventHandler(this.textBoxLocAmount_KeyPress); " is 127.
Long Statement,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The length of the statement  "            this.textBoxLoanLateFeesOnAmount.KeyPress += new System.Windows.Forms.KeyPressEventHandler(this.textBoxLocAmount_KeyPress); " is 123.
Long Statement,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The length of the statement  "            this.textBoxLoanLateFeesOnOverduePrincipal.EnabledChanged += new System.EventHandler(this.nudLoanAmount_EnabledChanged); " is 120.
Long Statement,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The length of the statement  "            this.textBoxLoanLateFeesOnOverduePrincipal.TextChanged += new System.EventHandler(this.textBoxLoanLateFeesOnOverduePrincipal_TextChanged); " is 138.
Long Statement,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The length of the statement  "            this.textBoxLoanLateFeesOnOverduePrincipal.KeyPress += new System.Windows.Forms.KeyPressEventHandler(this.textBoxLocAmount_KeyPress); " is 133.
Long Statement,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The length of the statement  "            this.textBoxLoanLateFeesOnOverduePrincipal.Leave += new System.EventHandler(this.textBoxLoanLateFeesOnOverduePrincipal_Leave); " is 126.
Long Statement,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The length of the statement  "            this.textBoxLoanLateFeesOnOLB.KeyPress += new System.Windows.Forms.KeyPressEventHandler(this.textBoxLocAmount_KeyPress); " is 120.
Long Statement,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The length of the statement  "            this.textBoxLoanLateFeesOnOverdueInterest.TextChanged += new System.EventHandler(this.textBoxLoanLateFeesOnOverdueInterest_TextChanged); " is 136.
Long Statement,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The length of the statement  "            this.textBoxLoanLateFeesOnOverdueInterest.KeyPress += new System.Windows.Forms.KeyPressEventHandler(this.textBoxLocAmount_KeyPress); " is 132.
Long Statement,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The length of the statement  "            this.textBoxLoanLateFeesOnOverdueInterest.Leave += new System.EventHandler(this.textBoxLoanLateFeesOnOverdueInterest_Leave); " is 124.
Long Statement,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The length of the statement  "            this.lvEntryFees.SubItemEndEditing += new OpenCBS.GUI.UserControl.SubItemEndEditingEventHandler(this.lvEntryFees_SubItemEndEditing); " is 132.
Long Statement,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The length of the statement  "            this.cmbCompulsorySaving.SelectedIndexChanged += new System.EventHandler(this.cmbCompulsorySaving_SelectedIndexChanged); " is 120.
Long Statement,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The length of the statement  "            this.linkCompulsorySavings.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56))))); " is 137.
Long Statement,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The length of the statement  "            this.linkCompulsorySavings.LinkColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56))))); " is 137.
Long Statement,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The length of the statement  "            this.linkCompulsorySavings.LinkClicked += new System.Windows.Forms.LinkLabelLinkClickedEventHandler(this.linkCompulsorySavings_LinkClicked); " is 140.
Long Statement,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The length of the statement  "            this.tableLayoutPanel9.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56))))); " is 133.
Long Statement,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The length of the statement  "            this.imageListTab.ImageStream = ((System.Windows.Forms.ImageListStreamer)(resources.GetObject("imageListTab.ImageStream"))); " is 124.
Long Statement,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The length of the statement  "            this.richTextBoxStatus.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56))))); " is 133.
Long Statement,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The length of the statement  "            this.olvLoans.SelectedColumnTint = System.Drawing.Color.FromArgb(((int)(((byte)(15))))' ((int)(((byte)(0))))' ((int)(((byte)(0))))' ((int)(((byte)(192))))); " is 156.
Long Statement,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The length of the statement  "            this.btSearchContract2.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56))))); " is 133.
Long Statement,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The length of the statement  "            this.savingDepositToolStripMenuItem.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56))))); " is 146.
Long Statement,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The length of the statement  "            this.savingWithdrawToolStripMenuItem.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56))))); " is 147.
Long Statement,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The length of the statement  "            this.savingTransferToolStripMenuItem.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56))))); " is 147.
Long Statement,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The length of the statement  "            this.specialOperationToolStripMenuItem.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56))))); " is 149.
Long Statement,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The length of the statement  "            this.buttonPrintSchedule.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56))))); " is 135.
Long Statement,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The length of the statement  "            this.buttonReschedule.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56))))); " is 132.
Long Statement,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The length of the statement  "            this.buttonRepay.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56))))); " is 127.
Long Statement,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeTitle,The length of the statement  "                Text = string.IsNullOrEmpty(title) ? MultiLanguageStrings.GetString(Ressource.ClientForm' "Group.Text") : title + " - (" + _group.LoanCycle + ")"; " is 146.
Long Statement,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,DisplaySavingProduct,The length of the statement  "            lbBalanceMinValue.Text = string.Format("{0} {1}"' product.BalanceMin.GetFormatedValue(product.Currency.UseCents)' product.Currency.Code); " is 137.
Long Statement,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,DisplaySavingProduct,The length of the statement  "            lbBalanceMaxValue.Text = string.Format("{0} {1}"' product.BalanceMax.GetFormatedValue(product.Currency.UseCents)' product.Currency.Code); " is 137.
Long Statement,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,DisplaySavingProduct,The length of the statement  "            lbWithdrawMinValue.Text = string.Format("{0} {1}"' product.WithdrawingMin.GetFormatedValue(product.Currency.UseCents)' product.Currency.Code); " is 142.
Long Statement,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,DisplaySavingProduct,The length of the statement  "            lbWithdrawMaxValue.Text = string.Format("{0} {1}"' product.WithdrawingMax.GetFormatedValue(product.Currency.UseCents)' product.Currency.Code); " is 142.
Long Statement,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,DisplaySavingProduct,The length of the statement  "            lbDepositMinValue.Text = string.Format("{0} {1}"' product.DepositMin.GetFormatedValue(product.Currency.UseCents)' product.Currency.Code); " is 137.
Long Statement,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,DisplaySavingProduct,The length of the statement  "            lbDepositMaxValue.Text = string.Format("{0} {1}"' product.DepositMax.GetFormatedValue(product.Currency.UseCents)' product.Currency.Code); " is 137.
Long Statement,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,DisplaySavingProduct,The length of the statement  "            labelSavingTransferMinValue.Text = string.Format("{0} {1}"' product.TransferMin.GetFormatedValue(product.Currency.UseCents)' product.Currency.Code); " is 148.
Long Statement,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,DisplaySavingProduct,The length of the statement  "            labelSavingTransferMaxValue.Text = string.Format("{0} {1}"' product.TransferMax.GetFormatedValue(product.Currency.UseCents)' product.Currency.Code); " is 148.
Long Statement,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,DisplaySavingProduct,The length of the statement  "                lbInterestAccrualValue.Text = MultiLanguageStrings.GetString(Ressource.FrmAddSavingProduct' ((SavingsBookProduct)product).InterestBase + ".Text"); " is 146.
Long Statement,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,DisplaySavingProduct,The length of the statement  "                lbInterestPostingValue.Text = MultiLanguageStrings.GetString(Ressource.FrmAddSavingProduct' ((SavingsBookProduct)product).InterestFrequency + ".Text"); " is 151.
Long Statement,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,DisplaySavingProduct,The length of the statement  "                lbInterestBasedOnValue.Text = ((SavingsBookProduct)product).CalculAmountBase.HasValue ? MultiLanguageStrings.GetString(Ressource.FrmAddSavingProduct' ((SavingsBookProduct)product).CalculAmountBase + ".Text") : "------"; " is 219.
Long Statement,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,DisplaySavingProduct,The length of the statement  "                    lbEntryFeesMinMax.Text = string.Format("{0} {1}"' ((SavingsBookProduct)product).EntryFees.GetFormatedValue(product.Currency.UseCents)' product.Currency.Code); " is 158.
Long Statement,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,DisplaySavingProduct,The length of the statement  "                        lbWithdrawFeesMinMax.Text = string.Format("{0} {1}"' ((SavingsBookProduct)product).FlatWithdrawFees.GetFormatedValue(product.Currency.UseCents)' product.Currency.Code); " is 168.
Long Statement,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,DisplaySavingProduct,The length of the statement  "                        lbTransferFeesMinMax.Text = string.Format("{0} {1}"' ((SavingsBookProduct)product).FlatTransferFees.GetFormatedValue(product.Currency.UseCents)' product.Currency.Code); " is 168.
Long Statement,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,DisplaySelectedProject,The length of the statement  "            buttonProjectSave.Text = pProject.Id != 0 ? MultiLanguageStrings.GetString(Ressource.ClientForm' "UpdateProject.Text") : MultiLanguageStrings.GetString(Ressource.ClientForm' "SaveProject.Text"); " is 194.
Long Statement,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,DisplaySelectedProject,The length of the statement  "            tabPageProject.Text = pProject.Id != 0 ? string.Format(MultiLanguageStrings.GetString(Ressource.ClientForm' "Project.Text") + " - [{0}]"' _project.Name) : MultiLanguageStrings.GetString(Ressource.ClientForm' "Project.Text"); " is 224.
Long Statement,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,DisplaySelectedProject,The length of the statement  "            tBProjectFinancialPlanAmount.Text = pProject.CorporateFinancialPlanAmount.HasValue ? pProject.CorporateFinancialPlanAmount.GetFormatedValue(true) : ""; " is 151.
Long Statement,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,DisplaySelectedProject,The length of the statement  "            tBProjectFinancialPlanTotal.Text = pProject.CorporateFinancialPlanTotalAmount.HasValue ? pProject.CorporateFinancialPlanTotalAmount.GetFormatedValue(true) : ""; " is 160.
Long Statement,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,DisplayContracts,The length of the statement  "                //In case' if there are contracts in different currencies' total values of OLB and Credit amounts are displayed in pivot currency " is 129.
Long Statement,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,DisplayContracts,The length of the statement  "                //For OLB' we must use current exchange rate to calculate in single currency.But for credit amounts' we must use exchange rates " is 127.
Long Statement,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeTabPageLoansDetails,The length of the statement  "                lblEarlyTotalRepaimentBase.Text = MultiLanguageStrings.GetString(Ressource.ClientForm' "lblEarlyRepaimentBaseOLB.Text"); " is 120.
Long Statement,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeTabPageLoansDetails,The length of the statement  "                lblEarlyTotalRepaimentBase.Text = MultiLanguageStrings.GetString(Ressource.ClientForm' "lblEarlyRepaimentBaseInterest.Text"); " is 125.
Long Statement,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeTabPageLoansDetails,The length of the statement  "                lblEarlyPartialRepaimentBase.Text = MultiLanguageStrings.GetString(Ressource.ClientForm' "lblEarlyRepaimentBaseOLB.Text"); " is 122.
Long Statement,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeTabPageLoansDetails,The length of the statement  "            else if (pCredit.Product.AnticipatedPartialRepaymentPenaltiesBase == OAnticipatedRepaymentPenaltiesBases.RemainingInterest) " is 123.
Long Statement,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeTabPageLoansDetails,The length of the statement  "                lblEarlyPartialRepaimentBase.Text = MultiLanguageStrings.GetString(Ressource.ClientForm' "lblEarlyRepaimentBaseInterest.Text"); " is 127.
Long Statement,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeTabPageLoansDetails,The length of the statement  "            else if (pCredit.Product.AnticipatedPartialRepaymentPenaltiesBase == OAnticipatedRepaymentPenaltiesBases.PrepaidPrincipal) " is 122.
Long Statement,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeTabPageLoansDetails,The length of the statement  "                lblEarlyPartialRepaimentBase.Text = MultiLanguageStrings.GetString(Ressource.ClientForm' "lblEarlyRepaimentBasePrincipal.Text"); " is 128.
Long Statement,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeTabPageLoansDetails,The length of the statement  "            groupBoxLoanLateFees.Text = MultiLanguageStrings.GetString(Ressource.ClientForm' "LateFeesGracePeriod.Text") + @" (" + pCredit.GracePeriodOfLateFees + @")"; " is 156.
Long Statement,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeTabPageLoansDetails,The length of the statement  "            lblCreditCurrency.Text = MultiLanguageStrings.GetString(Ressource.ClientForm' "Currency.Text") + _credit.Product.Currency.Name; " is 127.
Long Statement,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeEntryFees,The length of the statement  "                _credit.LoanEntryFeesList = ServicesProvider.GetInstance().GetContractServices().GetDefaultLoanEntryFees(_credit' _client); " is 123.
Long Statement,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeTabPageLoansDetails,The length of the statement  "            lblCreditCurrency.Text = MultiLanguageStrings.GetString(Ressource.ClientForm' "Currency.Text") + pPackage.Currency.Name; " is 120.
Long Statement,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,SetPackageValuesForLoanDetails,The length of the statement  "            gbxLoanDetails.Text = MultiLanguageStrings.GetString(Ressource.CreditContractForm' "LoanType.Text") + pLoan.Product.Name; " is 121.
Long Statement,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,SetPackageValuesForLoanDetails,The length of the statement  "            InitializePackageFundingLineAndCorporate(pLoan.Product.FundingLine' _credit.FundingLine' pForCreation' comboBoxLoanFundingLine); " is 128.
Long Statement,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializePackageNonRepaymentPenalties,The length of the statement  "            groupBoxLoanLateFees.Text = MultiLanguageStrings.GetString(Ressource.ClientForm' "LateFeesGracePeriod.Text") + " (" + pPackage.GracePeriodOfLateFees + ")"; " is 155.
Long Statement,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializePackageNonRepaymentPenalties,The length of the statement  "                _lateFeesOnAmountRangeValue = new DoubleValueRange(pPackage.NonRepaymentPenaltiesMin.InitialAmount' pPackage.NonRepaymentPenaltiesMax.InitialAmount); " is 149.
Long Statement,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializePackageNonRepaymentPenalties,The length of the statement  "                textBoxLoanLateFeesOnAmount.Text = pForCreation ? ServicesHelper.ConvertNullableDoubleToString(_lateFeesOnAmountRangeValue.Min' true) : ServicesHelper.ConvertNullableDoubleToString(_credit.NonRepaymentPenalties.InitialAmount' true); " is 232.
Long Statement,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializePackageNonRepaymentPenalties,The length of the statement  "                textBoxLoanLateFeesOnAmount.Text = pForCreation ? ServicesHelper.ConvertNullableDoubleToString(pPackage.NonRepaymentPenalties.InitialAmount' true) : ServicesHelper.ConvertNullableDoubleToString(_credit.NonRepaymentPenalties.InitialAmount' true); " is 245.
Long Statement,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializePackageNonRepaymentPenalties,The length of the statement  "                _lateFeesOnOLBRangeValue = new DoubleValueRange(pPackage.NonRepaymentPenaltiesMin.OLB' pPackage.NonRepaymentPenaltiesMax.OLB); " is 126.
Long Statement,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializePackageNonRepaymentPenalties,The length of the statement  "                textBoxLoanLateFeesOnOLB.Text = pForCreation ? ServicesHelper.ConvertNullableDoubleToString(_lateFeesOnOLBRangeValue.Min' true) : ServicesHelper.ConvertNullableDoubleToString(_credit.NonRepaymentPenalties.OLB' true); " is 216.
Long Statement,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializePackageNonRepaymentPenalties,The length of the statement  "                _lateFeesOnOverdueInterestRangeValue = new DoubleValueRange(pPackage.NonRepaymentPenaltiesMin.OverDueInterest' pPackage.NonRepaymentPenaltiesMax.OverDueInterest); " is 162.
Long Statement,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializePackageNonRepaymentPenalties,The length of the statement  "                    textBoxLoanLateFeesOnOverdueInterest.Text = ServicesHelper.ConvertNullableDoubleToString(_lateFeesOnOverdueInterestRangeValue.Min' true); " is 137.
Long Statement,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializePackageNonRepaymentPenalties,The length of the statement  "                    textBoxLoanLateFeesOnOverdueInterest.Text = ServicesHelper.ConvertNullableDoubleToString(_credit.NonRepaymentPenalties.OverDueInterest' true); " is 142.
Long Statement,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializePackageNonRepaymentPenalties,The length of the statement  "                    textBoxLoanLateFeesOnOverdueInterest.Text = ServicesHelper.ConvertNullableDoubleToString(pPackage.NonRepaymentPenalties.OverDueInterest' true); " is 143.
Long Statement,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializePackageNonRepaymentPenalties,The length of the statement  "                    textBoxLoanLateFeesOnOverdueInterest.Text = ServicesHelper.ConvertNullableDoubleToString(_credit.NonRepaymentPenalties.OverDueInterest' true); " is 142.
Long Statement,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializePackageNonRepaymentPenalties,The length of the statement  "                _lateFeesOnOverduePrincipalRangeValue = new DoubleValueRange(pPackage.NonRepaymentPenaltiesMin.OverDuePrincipal' pPackage.NonRepaymentPenaltiesMax.OverDuePrincipal); " is 165.
Long Statement,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializePackageNonRepaymentPenalties,The length of the statement  "                    textBoxLoanLateFeesOnOverduePrincipal.Text = ServicesHelper.ConvertNullableDoubleToString(_lateFeesOnOverduePrincipalRangeValue.Min' true); " is 139.
Long Statement,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializePackageNonRepaymentPenalties,The length of the statement  "                    textBoxLoanLateFeesOnOverduePrincipal.Text = ServicesHelper.ConvertNullableDoubleToString(_credit.NonRepaymentPenalties.OverDuePrincipal' true); " is 144.
Long Statement,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializePackageNonRepaymentPenalties,The length of the statement  "                    textBoxLoanLateFeesOnOverduePrincipal.Text = ServicesHelper.ConvertNullableDoubleToString(pPackage.NonRepaymentPenalties.OverDuePrincipal' true); " is 145.
Long Statement,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializePackageNonRepaymentPenalties,The length of the statement  "                    textBoxLoanLateFeesOnOverduePrincipal.Text = ServicesHelper.ConvertNullableDoubleToString(_credit.NonRepaymentPenalties.OverDuePrincipal' true); " is 144.
Long Statement,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializePackageNonRepaymentPenalties,The length of the statement  "                lblEarlyTotalRepaimentBase.Text = MultiLanguageStrings.GetString(Ressource.ClientForm' "lblEarlyRepaimentBaseOLB.Text"); " is 120.
Long Statement,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializePackageNonRepaymentPenalties,The length of the statement  "                lblEarlyTotalRepaimentBase.Text = MultiLanguageStrings.GetString(Ressource.ClientForm' "lblEarlyRepaimentBaseInterest.Text"); " is 125.
Long Statement,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializePackageNonRepaymentPenalties,The length of the statement  "                lblEarlyPartialRepaimentBase.Text = MultiLanguageStrings.GetString(Ressource.ClientForm' "lblEarlyRepaimentBaseOLB.Text"); " is 122.
Long Statement,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializePackageNonRepaymentPenalties,The length of the statement  "                lblEarlyPartialRepaimentBase.Text = MultiLanguageStrings.GetString(Ressource.ClientForm' "lblEarlyRepaimentBaseInterest.Text"); " is 127.
Long Statement,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializePackageAnticipatedTotalRepaymentsPenalties,The length of the statement  "                _anticipatedTotalFeesValueRange = new DoubleValueRange(pPackage.AnticipatedTotalRepaymentPenaltiesMin' pPackage.AnticipatedTotalRepaymentPenaltiesMax); " is 151.
Long Statement,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializePackageAnticipatedTotalRepaymentsPenalties,The length of the statement  "                textBoxLoanAnticipatedTotalFees.Text = pForCreation ? ServicesHelper.ConvertNullableDoubleToString(_anticipatedTotalFeesValueRange.Min' true) : ServicesHelper.ConvertNullableDoubleToString(_credit.AnticipatedTotalRepaymentPenalties' true); " is 239.
Long Statement,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializePackageAnticipatedTotalRepaymentsPenalties,The length of the statement  "                textBoxLoanAnticipatedTotalFees.Text = pForCreation ? ServicesHelper.ConvertNullableDoubleToString(pPackage.AnticipatedTotalRepaymentPenalties' true) : ServicesHelper.ConvertNullableDoubleToString(_credit.AnticipatedTotalRepaymentPenalties' true); " is 247.
Long Statement,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializePackageAnticipatedPartialRepaymentsPenalties,The length of the statement  "                _anticipatedPartialFeesValueRange = new DoubleValueRange(pPackage.AnticipatedPartialRepaymentPenaltiesMin' pPackage.AnticipatedPartialRepaymentPenaltiesMax); " is 157.
Long Statement,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializePackageAnticipatedPartialRepaymentsPenalties,The length of the statement  "                tbLoanAnticipatedPartialFees.Text = pForCreation ? ServicesHelper.ConvertNullableDoubleToString(_anticipatedPartialFeesValueRange.Min' true) : ServicesHelper.ConvertNullableDoubleToString(_credit.AnticipatedPartialRepaymentPenalties' true); " is 240.
Long Statement,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializePackageAnticipatedPartialRepaymentsPenalties,The length of the statement  "                tbLoanAnticipatedPartialFees.Text = pForCreation ? ServicesHelper.ConvertNullableDoubleToString(pPackage.AnticipatedPartialRepaymentPenalties' true) : ServicesHelper.ConvertNullableDoubleToString(_credit.AnticipatedPartialRepaymentPenalties' true); " is 248.
Long Statement,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeAmount,The length of the statement  "                if (credit.LoanCycle == null && !credit.AmountMin.HasValue && !credit.AmountMax.HasValue)//if contract doesn't use any loan cycles " is 130.
Long Statement,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,SaveProject,The length of the statement  "                        newProject.CorporateJuridicStatus = cBProjectJuridicStatus.SelectedItem == null ? "-" : cBProjectJuridicStatus.SelectedItem.ToString(); " is 135.
Long Statement,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,SaveProject,The length of the statement  "                        newProject.CorporateFiscalStatus = cBProjectFiscalStatus.SelectedItem == null ? "-" : cBProjectFiscalStatus.SelectedItem.ToString(); " is 132.
Long Statement,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,SaveProject,The length of the statement  "                        newProject.CorporateFinancialPlanType = cBProjectFinancialPlanType.SelectedItem == null ? "-" : cBProjectFinancialPlanType.SelectedItem.ToString(); " is 147.
Long Statement,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,SaveProject,The length of the statement  "                        newProject.CorporateFinancialPlanAmount = ServicesHelper.ConvertStringToNullableDecimal(tBProjectFinancialPlanAmount.Text' -1); " is 127.
Long Statement,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,SaveProject,The length of the statement  "                        newProject.CorporateFinancialPlanTotalAmount = ServicesHelper.ConvertStringToNullableDecimal(tBProjectFinancialPlanTotal.Text' -1); " is 131.
Long Statement,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,SaveProject,The length of the statement  "                        _project.CorporateJuridicStatus = cBProjectJuridicStatus.SelectedItem == null ? "-" : cBProjectJuridicStatus.SelectedItem.ToString(); " is 133.
Long Statement,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,SaveProject,The length of the statement  "                        _project.CorporateFiscalStatus = cBProjectFiscalStatus.SelectedItem == null ? "-" : cBProjectFiscalStatus.SelectedItem.ToString(); " is 130.
Long Statement,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,SaveProject,The length of the statement  "                        _project.CorporateFinancialPlanType = cBProjectFinancialPlanType.SelectedItem == null ? "-" : cBProjectFinancialPlanType.SelectedItem.ToString(); " is 145.
Long Statement,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,SaveProject,The length of the statement  "                        _project.CorporateFinancialPlanAmount = ServicesHelper.ConvertStringToNullableDecimal(tBProjectFinancialPlanAmount.Text' -1); " is 125.
Long Statement,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,SaveProject,The length of the statement  "                        _project.CorporateFinancialPlanTotalAmount = ServicesHelper.ConvertStringToNullableDecimal(tBProjectFinancialPlanTotal.Text' -1); " is 129.
Long Statement,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,CheckLateFeesOnAmount,The length of the statement  "                if (!ServicesHelper.CheckIfValueBetweenMinAndMax(_lateFeesOnAmountRangeValue.Min' _lateFeesOnAmountRangeValue.Max' lateFees)) " is 125.
Long Statement,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,CheckLateFeesOnOverduePrincipal,The length of the statement  "                if (!ServicesHelper.CheckIfValueBetweenMinAndMax(_lateFeesOnOverduePrincipalRangeValue.Min' _lateFeesOnOverduePrincipalRangeValue.Max' lateFees)) " is 145.
Long Statement,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,CheckLateFeesOnOverdueInterest,The length of the statement  "                if (!ServicesHelper.CheckIfValueBetweenMinAndMax(_lateFeesOnOverdueInterestRangeValue.Min' _lateFeesOnOverdueInterestRangeValue.Max' lateFees)) " is 143.
Long Statement,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,CreateLoan,The length of the statement  "            credit.AnticipatedTotalRepaymentPenalties = ServicesHelper.ConvertStringToNullableDouble(textBoxLoanAnticipatedTotalFees.Text' true' -1).Value; " is 143.
Long Statement,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,CreateLoan,The length of the statement  "            credit.AnticipatedPartialRepaymentPenalties = ServicesHelper.ConvertStringToNullableDouble(tbLoanAnticipatedPartialFees.Text' true' -1).Value; " is 142.
Long Statement,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,CreateLoan,The length of the statement  "            credit.NonRepaymentPenalties.InitialAmount = ServicesHelper.ConvertStringToNullableDouble(textBoxLoanLateFeesOnAmount.Text' true' -1).Value; " is 140.
Long Statement,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,CreateLoan,The length of the statement  "            credit.NonRepaymentPenalties.OLB = ServicesHelper.ConvertStringToNullableDouble(textBoxLoanLateFeesOnOLB.Text' true' -1).Value; " is 127.
Long Statement,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,CreateLoan,The length of the statement  "            credit.NonRepaymentPenalties.OverDueInterest = ServicesHelper.ConvertStringToNullableDouble(textBoxLoanLateFeesOnOverdueInterest.Text' true' -1).Value; " is 151.
Long Statement,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,CreateLoan,The length of the statement  "            credit.NonRepaymentPenalties.OverDuePrincipal = ServicesHelper.ConvertStringToNullableDouble(textBoxLoanLateFeesOnOverduePrincipal.Text' true' -1).Value; " is 153.
Long Statement,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,CreateAndSetContract,The length of the statement  "                _credit.AnticipatedTotalRepaymentPenalties = ServicesHelper.ConvertStringToNullableDouble(textBoxLoanAnticipatedTotalFees.Text' true' -1).Value; " is 144.
Long Statement,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,CreateAndSetContract,The length of the statement  "                _credit.AnticipatedPartialRepaymentPenalties = ServicesHelper.ConvertStringToNullableDouble(tbLoanAnticipatedPartialFees.Text' true' -1).Value; " is 143.
Long Statement,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,CreateAndSetContract,The length of the statement  "                _credit.NonRepaymentPenalties.InitialAmount = ServicesHelper.ConvertStringToNullableDouble(textBoxLoanLateFeesOnAmount.Text' true' -1).Value; " is 141.
Long Statement,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,CreateAndSetContract,The length of the statement  "                _credit.NonRepaymentPenalties.OLB = ServicesHelper.ConvertStringToNullableDouble(textBoxLoanLateFeesOnOLB.Text' true' -1).Value; " is 128.
Long Statement,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,CreateAndSetContract,The length of the statement  "                _credit.NonRepaymentPenalties.OverDueInterest = ServicesHelper.ConvertStringToNullableDouble(textBoxLoanLateFeesOnOverdueInterest.Text' true' -1).Value; " is 152.
Long Statement,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,CreateAndSetContract,The length of the statement  "                _credit.NonRepaymentPenalties.OverDuePrincipal = ServicesHelper.ConvertStringToNullableDouble(textBoxLoanLateFeesOnOverduePrincipal.Text' true' -1).Value; " is 154.
Long Statement,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,DisplayInstallments,The length of the statement  "                    listViewItem.SubItems.Add(string.Format("{0}/{1}/{2}"' targetCalendar.GetDayOfMonth(dt)' targetCalendar.GetMonth(dt)' targetCalendar.GetYear(dt))); " is 147.
Long Statement,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,SaveContract,The length of the statement  "                        _corporateUserControl.Corporate = ServicesProvider.GetInstance().GetClientServices().FindTiers(client.Id' _oClientType) as Corporate; " is 133.
Long Statement,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,SaveContract,The length of the statement  "                        _personUserControl.Person = ServicesProvider.GetInstance().GetClientServices().FindTiers(client.Id' _oClientType) as Person; " is 124.
Long Statement,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,SaveContract,The length of the statement  "                        _groupUserControl.Group = ServicesProvider.GetInstance().GetClientServices().FindTiers(client.Id' _oClientType) as Group; " is 121.
Long Statement,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,DisplayLoanEvents,The length of the statement  "                    displayEvent is LoanInterestAccrualEvent || displayEvent is LoanTransitionEvent || displayEvent is CreditInsuranceEvent || " is 122.
Long Statement,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,DeleteEvent,The length of the statement  "                var fiscalYear = coaServices.SelectFiscalYears().Find(y => y.OpenDate <= foundEvent.Date && (y.CloseDate >= foundEvent.Date || y.CloseDate == null)); " is 149.
Long Statement,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,buttonModifyAGarantors_Click,The length of the statement  "                    AddGuarantorForm modifyGuarantor = new AddGuarantorForm((Guarantor)listViewGuarantors.SelectedItems[0].Tag' MdiParent' false' _credit.Product.Currency' _applicationController); " is 176.
Long Statement,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComboboxProjectJuridicStatus,The length of the statement  "            List<string> list = ServicesProvider.GetInstance().GetClientServices().FindAllSetUpFields(OSetUpFieldTypes.LegalStatus); " is 120.
Long Statement,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComboboxProjectFiscalStatus,The length of the statement  "            List<string> list = ServicesProvider.GetInstance().GetClientServices().FindAllSetUpFields(OSetUpFieldTypes.FiscalStatus); " is 121.
Long Statement,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComboboxProjectFinancialPlanType,The length of the statement  "            List<string> list = ServicesProvider.GetInstance().GetClientServices().FindAllSetUpFields(OSetUpFieldTypes.BusinessPlan); " is 121.
Long Statement,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeTabPageSavingDetails,The length of the statement  "                _saving.GenerateSavingCode(_client' numbersOfSavings' ServicesProvider.GetInstance().GetGeneralSettings().SavingsCodeTemplate' " is 126.
Long Statement,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,DisplaySavingEvent,The length of the statement  "                nudDownInterestRate.Value = nudDownInterestRate.Minimum = nudDownInterestRate.Maximum = (decimal)pSaving.InterestRate * 100; " is 124.
Long Statement,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,DisplaySavingEvent,The length of the statement  "                nudDepositFees.Value = nudDepositFees.Minimum = nudDepositFees.Maximum = ((SavingBookContract)pSaving).DepositFees.Value; " is 121.
Long Statement,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,DisplaySavingEvent,The length of the statement  "                nudChequeDepositFees.Value = nudChequeDepositFees.Minimum = nudChequeDepositFees.Maximum = ((SavingBookContract)pSaving).ChequeDepositFees.Value; " is 145.
Long Statement,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,DisplaySavingEvent,The length of the statement  "                nudManagementFees.Value = nudManagementFees.Minimum = nudManagementFees.Maximum = ((SavingBookContract)pSaving).ManagementFees.Value; " is 133.
Long Statement,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,DisplaySavingEvent,The length of the statement  "                nudOverdraftFees.Value = nudOverdraftFees.Minimum = nudOverdraftFees.Maximum = ((SavingBookContract)pSaving).OverdraftFees.Value; " is 129.
Long Statement,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,DisplaySavingEvent,The length of the statement  "                nudAgioFees.Value = nudAgioFees.Minimum = nudAgioFees.Maximum = (decimal)((SavingBookContract)pSaving).AgioFees.Value * 100; " is 124.
Long Statement,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,buttonModifyCollateral_Click,The length of the statement  "                    CollateralProduct product = ServicesProvider.GetInstance().GetCollateralProductServices().SelectCollateralProduct(collateralProduct.Id); " is 136.
Long Statement,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,buttonModifyCollateral_Click,The length of the statement  "                    ContractCollateralForm collateralForm = new ContractCollateralForm(product' contractCollateral' false' _applicationController); " is 127.
Long Statement,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,btnLoanShares_Click,The length of the statement  "                oldAmount = ServicesHelper.ConvertStringToDecimal(nudLoanAmount.Text' null == _credit ? false : _credit.Product.UseCents); " is 122.
Long Statement,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,CheckDataInOpenFiscalYear,The length of the statement  "                    coaServices.SelectFiscalYears().Find(y => y.OpenDate <= TimeProvider.Now && (y.CloseDate >= TimeProvider.Now || y.CloseDate == null)); " is 134.
Long Statement,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,toolStripMenuItemEditComment_Click,The length of the statement  "            //    ServicesProvider.GetInstance().GetContractServices().UpdateInstallmentComment(editCommentDialog.Comment' _credit.Id' installment.Number); " is 143.
Long Statement,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,toolStripMenuItemEditComment_Click,The length of the statement  "            //    _credit.InstallmentList.FirstOrDefault(item => item.Number == installment.Number).Comment = editCommentDialog.Comment; " is 124.
Long Statement,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,textBoxLoanLateFeesOnOverduePrincipal_TextChanged,The length of the statement  "                if (!ServicesHelper.CheckIfValueBetweenMinAndMax(_lateFeesOnOverduePrincipalRangeValue.Min' _lateFeesOnOverduePrincipalRangeValue.Max' lateFees)) " is 145.
Long Statement,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,textBoxLoanLateFeesOnOverdueInterest_TextChanged,The length of the statement  "                if (!ServicesHelper.CheckIfValueBetweenMinAndMax(_lateFeesOnOverdueInterestRangeValue.Min' _lateFeesOnOverdueInterestRangeValue.Max' lateFees)) " is 143.
Long Statement,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,LoadClientSavings,The length of the statement  "            //Debug.Assert(_product != null' "Saving are loaded only if loan is initialized' if loan exist then product should too"); " is 121.
Long Statement,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,menuCollateralProductsItem_Click,The length of the statement  "            CollateralProduct product = ServicesProvider.GetInstance().GetCollateralProductServices().SelectCollateralProduct(productId); " is 125.
Long Statement,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,DisplayCollateral,The length of the statement  "                    ServicesProvider.GetInstance().GetCollateralProductServices().SelectCollateralProductByPropertyId(selectedCollateral.PropertyValues[0].Property.Id); " is 148.
Long Statement,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,DisplayCollateral,The length of the statement  "                        propertyValue.Property.Name.Equals("Montant") || propertyValue.Property.Name.Equals("Сумма") || propertyValue.Property.Name.Equals("Amount")) " is 141.
Long Statement,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,menuItemConfirmPendingSavingEvent_Click,The length of the statement  "                    savEvent.Amount' savEvent.Description' User.CurrentUser' false' (OSavingsMethods)savEvent.SavingsMethod' new PaymentMethod()' savEvent.Id' Teller.CurrentTeller); " is 161.
Long Statement,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,buttonReopenSaving_Click,The length of the statement  "                    var openSavingsForm = new OpenSavingsForm(_saving.Product.InitialAmountMin' nudReopenFees.Value' _saving.Product' true); " is 120.
Long Statement,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,ShowTotalFeesInListView,The length of the statement  "            item.SubItems[3].Text = total.GetFormatedValue(_credit.Product.Currency.UseCents) + @" " + _credit.Product.Currency.Code; " is 121.
Long Statement,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,buttonViewCollateral_Click,The length of the statement  "                    CollateralProduct product = ServicesProvider.GetInstance().GetCollateralProductServices().SelectCollateralProduct(collateralProduct.Id); " is 136.
Long Statement,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,buttonViewCollateral_Click,The length of the statement  "                    ContractCollateralForm collateralForm = new ContractCollateralForm(product' contractCollateral' true' _applicationController); " is 126.
Long Statement,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,buttonViewAGarantors_Click,The length of the statement  "                    AddGuarantorForm modifyGuarantor = new AddGuarantorForm((Guarantor)listViewGuarantors.SelectedItems[0].Tag' MdiParent' true' _credit.Product.Currency' _applicationController); " is 175.
Long Statement,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,nudLoanAmount_Leave,The length of the statement  "            nud.Text = ServicesHelper.ConvertStringToDecimal(nud.Text' null == _credit ? false : _credit.Product.UseCents).ToString(); " is 122.
Long Statement,OpenCBS.GUI.Clients,LoanSharesForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\LoanSharesForm.cs,InitializeControls,The length of the statement  "                ListViewItem.ListViewSubItem subItem = new ListViewItem.ListViewSubItem{Text = ls.Amount.GetFormatedValue(_loan.UseCents)' Tag = ls.Amount}; " is 140.
Long Statement,OpenCBS.GUI.Clients,LoanSharesForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\LoanSharesForm.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(LoanSharesForm)); " is 134.
Long Statement,OpenCBS.GUI.Clients,LoanSharesForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\LoanSharesForm.cs,InitializeComponent,The length of the statement  "            this.lvLoanShares.SubItemEndEditing += new OpenCBS.GUI.UserControl.SubItemEndEditingEventHandler(this.lvLoanShares_SubItemEndEditing); " is 134.
Long Statement,OpenCBS.GUI.Clients,MembersOfGroup,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\MembersOfGroup.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(MembersOfGroup)); " is 134.
Long Statement,OpenCBS.GUI.Clients,MembersOfGroup,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\MembersOfGroup.cs,InitializeComponent,The length of the statement  "            this.listViewMembers.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56))))); " is 131.
Long Statement,OpenCBS.GUI.Clients,MembersOfGroup,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\MembersOfGroup.cs,InitializeComponent,The length of the statement  "            this.listViewMembers.MouseDoubleClick += new System.Windows.Forms.MouseEventHandler(this.listViewMembers_MouseDoubleClick); " is 123.
Long Statement,OpenCBS.GUI.Clients,NonSolidaryGroupForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\NonSolidaryGroupForm.cs,btnSearch_Click,The length of the statement  "                    var member = new VillageMember { Tiers = client' JoinedDate = TimeProvider.Now' CurrentlyIn = true' IsLeader = false' IsSaved = false }; " is 136.
Long Statement,OpenCBS.GUI.Clients,NonSolidaryGroupForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\NonSolidaryGroupForm.cs,DisplaySavings,The length of the statement  "                    List<ISavingsContract> savings = ServicesProvider.GetInstance().GetSavingServices().GetSavingsByClientId(member.Tiers.Id); " is 122.
Long Statement,OpenCBS.GUI.Clients,NonSolidaryGroupForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\NonSolidaryGroupForm.cs,btnAdd_Click,The length of the statement  "                    var member = new VillageMember { Tiers = person' JoinedDate = TimeProvider.Now' CurrentlyIn = true' IsLeader = false' IsSaved = false }; " is 136.
Long Statement,OpenCBS.GUI.Clients,NonSolidaryGroupForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\NonSolidaryGroupForm.cs,listViewLoans_DoubleClick,The length of the statement  "                foreach (var credit in client.Projects.Where(project => project.Credits != null).SelectMany(project => project.Credits)) " is 120.
Long Statement,OpenCBS.GUI.Clients,NonSolidaryGroupForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\NonSolidaryGroupForm.cs,comboBoxMeetingDates_SelectedValueChanged,The length of the statement  "                ServicesProvider.GetInstance().GetContractServices().FindMeetingAttendees(_village.Id' ((DateTime)comboBoxMeetingDates.SelectedValue).Date); " is 140.
Long Statement,OpenCBS.GUI.Clients,NonSolidaryGroupForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\NonSolidaryGroupForm.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(NonSolidaryGroupForm)); " is 140.
Long Statement,OpenCBS.GUI.Clients,NonSolidaryGroupForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\NonSolidaryGroupForm.cs,InitializeComponent,The length of the statement  "            this.linkLabelChangePhoto2.LinkClicked += new System.Windows.Forms.LinkLabelLinkClickedEventHandler(this.changePhotoLinkLbl_LinkClicked); " is 137.
Long Statement,OpenCBS.GUI.Clients,NonSolidaryGroupForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\NonSolidaryGroupForm.cs,InitializeComponent,The length of the statement  "            this.linkLabelChangePhoto.LinkClicked += new System.Windows.Forms.LinkLabelLinkClickedEventHandler(this.changePhotoLinkLbl_LinkClicked); " is 136.
Long Statement,OpenCBS.GUI.Clients,NonSolidaryGroupForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\NonSolidaryGroupForm.cs,InitializeComponent,The length of the statement  "            this.pictureBox2.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(224))))' ((int)(((byte)(224))))' ((int)(((byte)(224))))); " is 131.
Long Statement,OpenCBS.GUI.Clients,NonSolidaryGroupForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\NonSolidaryGroupForm.cs,InitializeComponent,The length of the statement  "            this.pictureBox1.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(224))))' ((int)(((byte)(224))))' ((int)(((byte)(224))))); " is 131.
Long Statement,OpenCBS.GUI.Clients,NonSolidaryGroupForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\NonSolidaryGroupForm.cs,InitializeComponent,The length of the statement  "            this.lvMembers.ItemSelectionChanged += new System.Windows.Forms.ListViewItemSelectionChangedEventHandler(this.lvMembers_ItemSelectionChanged); " is 142.
Long Statement,OpenCBS.GUI.Clients,NonSolidaryGroupForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\NonSolidaryGroupForm.cs,InitializeComponent,The length of the statement  "            this.olvAttendees.SelectedColumnTint = System.Drawing.Color.FromArgb(((int)(((byte)(15))))' ((int)(((byte)(0))))' ((int)(((byte)(0))))' ((int)(((byte)(192))))); " is 160.
Long Statement,OpenCBS.GUI.Clients,NonSolidaryGroupForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\NonSolidaryGroupForm.cs,InitializeComponent,The length of the statement  "            this.comboBoxMeetingDates.SelectedValueChanged += new System.EventHandler(this.comboBoxMeetingDates_SelectedValueChanged); " is 122.
Long Statement,OpenCBS.GUI.Configuration,AddBranchForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Configuration\AddBranchForm.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(AddBranchForm)); " is 133.
Long Statement,OpenCBS.GUI.Configuration,AddPaymentMethodForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Configuration\AddPaymentMethodForm.cs,Initialize,The length of the statement  "            cmbAccount.DataSource = ServicesProvider.GetInstance().GetChartOfAccountsServices().FindAllAccounts().OrderBy(item => item.Number).ToList(); " is 140.
Long Statement,OpenCBS.GUI.Configuration,AddPaymentMethodForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Configuration\AddPaymentMethodForm.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(AddPaymentMethodForm)); " is 140.
Long Statement,OpenCBS.GUI.Configuration,BranchesForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Configuration\BranchesForm.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(BranchesForm)); " is 132.
Long Statement,OpenCBS.GUI.Configuration,AddTellerForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Configuration\AddTellerForm.cs,InitializeAccount,The length of the statement  "            cmbAccount.DataSource = ServicesProvider.GetInstance().GetChartOfAccountsServices().FindAllAccountsWithoutTeller(accountId).OrderBy(item => item.Number).ToList(); " is 162.
Long Statement,OpenCBS.GUI.Configuration,AddTellerForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Configuration\AddTellerForm.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(AddTellerForm)); " is 133.
Long Statement,OpenCBS.GUI.Configuration,TellersForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Configuration\TellersForm.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(TellersForm)); " is 131.
Long Statement,OpenCBS.GUI.Configuration,EditUserForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Configuration\EditUserForm.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(EditUserForm)); " is 132.
Long Statement,OpenCBS.GUI.Configuration,FrmCurrencyType,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Configuration\FrmCurrencyType.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(FrmCurrencyType)); " is 135.
Long Statement,OpenCBS.GUI.Configuration,FrmCurrencyType,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Configuration\FrmCurrencyType.cs,InitializeComponent,The length of the statement  "            this.listViewCurrencies.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56))))); " is 134.
Long Statement,OpenCBS.GUI.Configuration,FrmEconomicActivity,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Configuration\FrmEconomicActivity.Designer.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(FrmEconomicActivity)); " is 139.
Long Statement,OpenCBS.GUI.Configuration,FrmEconomicActivity,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Configuration\FrmEconomicActivity.Designer.cs,InitializeComponent,The length of the statement  "            this.tvEconomicActivity.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(81))))' ((int)(((byte)(152))))); " is 135.
Long Statement,OpenCBS.GUI.Configuration,FrmEconomicActivity,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Configuration\FrmEconomicActivity.Designer.cs,buttonEdit_Click,The length of the statement  "                    else MessageBox.Show(GetString("messageBoxNoSelectionLoanPurpose.Text")' ""' MessageBoxButtons.OK' MessageBoxIcon.Error); " is 121.
Long Statement,OpenCBS.GUI.Configuration,FrmEconomicActivity,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Configuration\FrmEconomicActivity.Designer.cs,EditDomain,The length of the statement  "                                if (ServicesProvider.GetInstance().GetEconomicActivityServices().ChangeDomainOfApplicationName(_economicActivity' textBoxName.Text' _isLoanPurpose)) " is 148.
Long Statement,OpenCBS.GUI.Configuration,FrmEconomicActivity,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Configuration\FrmEconomicActivity.Designer.cs,EditDomain,The length of the statement  "                                if (ServicesProvider.GetInstance().GetEconomicActivityServices().ChangeDomainOfApplicationName(_economicActivity' textBoxName.Text)) " is 132.
Long Statement,OpenCBS.GUI.Configuration,FrmFundingLineEvent,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Configuration\FrmFundingLineEvent.cs,buttonSave_Click,The length of the statement  "                //    ExchangeRateForm _xrForm = new ExchangeRateForm(new DateTime(_fundingLineEvent.CreationDate.Year' _fundingLineEvent.CreationDate.Month' _fundingLineEvent.CreationDate.Day)' _fundingLineEvent.FundingLine.Currency); " is 219.
Long Statement,OpenCBS.GUI.Configuration,FrmFundingLineEvent,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Configuration\FrmFundingLineEvent.cs,SetExchangeRate,The length of the statement  "               _exchangeRate = ServicesProvider.GetInstance().GetAccountingServices().FindExchangeRate(_date.Date' _FundingLine.Currency); " is 123.
Long Statement,OpenCBS.GUI.Configuration,FrmFundingLineEvent,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Configuration\FrmFundingLineEvent.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(FrmFundingLineEvent)); " is 139.
Long Statement,OpenCBS.GUI.Configuration,FrmRoles,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Configuration\FrmRoles.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(FrmRoles)); " is 128.
Long Statement,OpenCBS.GUI.Configuration,FrmRoles,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Configuration\FrmRoles.cs,InitializeComponent,The length of the statement  "            this.listViewRoles.ItemSelectionChanged += new System.Windows.Forms.ListViewItemSelectionChangedEventHandler(this.ListViewRolesItemSelectionChanged1); " is 150.
Long Statement,OpenCBS.GUI.Configuration,FrmRoles,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Configuration\FrmRoles.cs,InitializeComponent,The length of the statement  "            this.defaultWindowComboBox.SelectedIndexChanged += new System.EventHandler(this.defaultWindowComboBox_SelectedIndexChanged); " is 124.
Long Statement,OpenCBS.GUI.Configuration,FrmRoles,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Configuration\FrmRoles.cs,InitializeComponent,The length of the statement  "            this.labelRoles.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(64))))' ((int)(((byte)(0))))); " is 125.
Long Statement,OpenCBS.GUI.Configuration,FrmRoles,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Configuration\FrmRoles.cs,InitializeComponent,The length of the statement  "            this.lblRoles.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(81))))' ((int)(((byte)(152))))); " is 125.
Long Statement,OpenCBS.GUI.Configuration,PublicHolidaysWaitingForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Configuration\PublicHolidaysWaitingForm.Designer.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(PublicHolidaysWaitingForm)); " is 145.
Long Statement,OpenCBS.GUI.Configuration,UserForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Configuration\UserForm.Designer.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(UserForm)); " is 128.
Long Statement,OpenCBS.GUI.Configuration,UserForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Configuration\UserForm.Designer.cs,InitializeComponent,The length of the statement  "            this.cmbRoles.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56))))); " is 124.
Long Statement,OpenCBS.GUI.Configuration,ContractCodeForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Configuration\ContractCodeForm.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(ContractCodeForm)); " is 136.
Long Statement,OpenCBS.GUI.Configuration,FrmAddSavingBookProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddSavingBookProduct.cs,InitializeControls,The length of the statement  "            if (_savingsProduct.InterestRateMax.HasValue) tbInterestRateMax.Text = (_savingsProduct.InterestRateMax.Value * 100).ToString(); " is 128.
Long Statement,OpenCBS.GUI.Configuration,FrmAddSavingBookProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddSavingBookProduct.cs,InitializeControls,The length of the statement  "            if (_savingsProduct.InterestRateMin.HasValue) tbInterestRateMin.Text = (_savingsProduct.InterestRateMin.Value * 100).ToString(); " is 128.
Long Statement,OpenCBS.GUI.Configuration,FrmAddSavingBookProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddSavingBookProduct.cs,InitializeControls,The length of the statement  "            if (_savingsProduct.InterestRate.HasValue) tbInterestRateValue.Text = (_savingsProduct.InterestRate.Value * 100).ToString(); " is 124.
Long Statement,OpenCBS.GUI.Configuration,FrmAddSavingBookProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddSavingBookProduct.cs,InitializeControls,The length of the statement  "            if (_savingsProduct.EntryFees.HasValue) tbEntryFeesValue.Text = _savingsProduct.EntryFees.GetFormatedValue(_savingsProduct.UseCents); " is 133.
Long Statement,OpenCBS.GUI.Configuration,FrmAddSavingBookProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddSavingBookProduct.cs,InitializeControls,The length of the statement  "            if (_savingsProduct.EntryFeesMin.HasValue) tbEntryFeesMin.Text = _savingsProduct.EntryFeesMin.GetFormatedValue(_savingsProduct.UseCents); " is 137.
Long Statement,OpenCBS.GUI.Configuration,FrmAddSavingBookProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddSavingBookProduct.cs,InitializeControls,The length of the statement  "            if (_savingsProduct.EntryFeesMax.HasValue) tbEntryFeesMax.Text = _savingsProduct.EntryFeesMax.GetFormatedValue(_savingsProduct.UseCents); " is 137.
Long Statement,OpenCBS.GUI.Configuration,FrmAddSavingBookProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddSavingBookProduct.cs,InitializeControls,The length of the statement  "            if (_savingsProduct.ReopenFees.HasValue) tbReopenFeesValue.Text = _savingsProduct.ReopenFees.GetFormatedValue(_savingsProduct.UseCents); " is 136.
Long Statement,OpenCBS.GUI.Configuration,FrmAddSavingBookProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddSavingBookProduct.cs,InitializeControls,The length of the statement  "            if (_savingsProduct.ReopenFeesMin.HasValue) tbReopenFeesMin.Text = _savingsProduct.ReopenFeesMin.GetFormatedValue(_savingsProduct.UseCents); " is 140.
Long Statement,OpenCBS.GUI.Configuration,FrmAddSavingBookProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddSavingBookProduct.cs,InitializeControls,The length of the statement  "            if (_savingsProduct.ReopenFeesMax.HasValue) tbReopenFeesMax.Text = _savingsProduct.ReopenFeesMax.GetFormatedValue(_savingsProduct.UseCents); " is 140.
Long Statement,OpenCBS.GUI.Configuration,FrmAddSavingBookProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddSavingBookProduct.cs,InitializeClientTypes,The length of the statement  "            ServicesProvider.GetInstance().GetSavingProductServices().GetProductAssignedClientTypes(_savingsProduct.ProductClientTypes' _savingsProduct.Id); " is 144.
Long Statement,OpenCBS.GUI.Configuration,FrmAddSavingBookProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddSavingBookProduct.cs,InitializeComboBoxCurrencies,The length of the statement  "            Currency line = new Currency { Name = MultiLanguageStrings.GetString(Ressource.FrmAddLoanProduct' "Currency.Text")' Id = 0 }; " is 125.
Long Statement,OpenCBS.GUI.Configuration,FrmAddSavingBookProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddSavingBookProduct.cs,btSavingProduct_Click,The length of the statement  "            _savingsProduct.InterestBase = (OSavingInterestBase)Enum.Parse(typeof(OSavingInterestBase)' cbAccrual.SelectedValue.ToString()); " is 128.
Long Statement,OpenCBS.GUI.Configuration,FrmAddSavingBookProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddSavingBookProduct.cs,btSavingProduct_Click,The length of the statement  "            _savingsProduct.InterestFrequency = (OSavingInterestFrequency)Enum.Parse(typeof(OSavingInterestFrequency)' cbPosting.SelectedValue.ToString()); " is 143.
Long Statement,OpenCBS.GUI.Configuration,FrmAddSavingBookProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddSavingBookProduct.cs,btSavingProduct_Click,The length of the statement  "            if (_savingsProduct.InterestBase == OSavingInterestBase.Monthly || _savingsProduct.InterestBase == OSavingInterestBase.Weekly) " is 126.
Long Statement,OpenCBS.GUI.Configuration,FrmAddSavingBookProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddSavingBookProduct.cs,btSavingProduct_Click,The length of the statement  "                _savingsProduct.CalculAmountBase = (OSavingCalculAmountBase)Enum.Parse(typeof(OSavingCalculAmountBase)' cbCalculAmount.SelectedValue.ToString()); " is 145.
Long Statement,OpenCBS.GUI.Configuration,FrmAddSavingBookProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddSavingBookProduct.cs,btSavingProduct_Click,The length of the statement  "                   if (DialogResult.Yes == MessageBox.Show(MultiLanguageStrings.GetString(Ressource.FrmAddSavingProduct' "messageUpdate.Text")' " is 124.
Long Statement,OpenCBS.GUI.Configuration,FrmAddSavingBookProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddSavingBookProduct.cs,btSavingProduct_Click,The length of the statement  "                                MultiLanguageStrings.GetString(Ressource.FrmAddSavingProduct' "title.Text")' MessageBoxButtons.YesNo' MessageBoxIcon.Question)) " is 127.
Long Statement,OpenCBS.GUI.Configuration,FrmAddSavingBookProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddSavingBookProduct.cs,cbTransactionIn_SelectedIndexChanged,The length of the statement  "                tbDepositFeesMin.Text = _savingsProduct.ChequeDepositFeesMin.HasValue ? _savingsProduct.ChequeDepositFeesMin.GetFormatedValue(_savingsProduct.UseCents) : null; " is 159.
Long Statement,OpenCBS.GUI.Configuration,FrmAddSavingBookProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddSavingBookProduct.cs,cbTransactionIn_SelectedIndexChanged,The length of the statement  "                tbDepositFeesMax.Text = _savingsProduct.ChequeDepositFeesMax.HasValue ? _savingsProduct.ChequeDepositFeesMax.GetFormatedValue(_savingsProduct.UseCents) : null; " is 159.
Long Statement,OpenCBS.GUI.Configuration,FrmAddSavingBookProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddSavingBookProduct.cs,cbTransactionIn_SelectedIndexChanged,The length of the statement  "                tbDepositFees.Text = _savingsProduct.ChequeDepositFees.HasValue ? _savingsProduct.ChequeDepositFees.GetFormatedValue(_savingsProduct.UseCents) : null; " is 150.
Long Statement,OpenCBS.GUI.Configuration,FrmAddSavingBookProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddSavingBookProduct.cs,cbTransactionIn_SelectedIndexChanged,The length of the statement  "                tbDepositFees.Text = _savingsProduct.DepositFees.HasValue ? _savingsProduct.DepositFees.GetFormatedValue(_savingsProduct.UseCents) : null; " is 138.
Long Statement,OpenCBS.GUI.Configuration,FrmAddSavingBookProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddSavingBookProduct.cs,cbTransactionIn_SelectedIndexChanged,The length of the statement  "                tbDepositFeesMin.Text = _savingsProduct.DepositFeesMin.HasValue ? _savingsProduct.DepositFeesMin.GetFormatedValue(_savingsProduct.UseCents) : null; " is 147.
Long Statement,OpenCBS.GUI.Configuration,FrmAddSavingBookProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddSavingBookProduct.cs,cbTransactionIn_SelectedIndexChanged,The length of the statement  "                tbDepositFeesMax.Text = _savingsProduct.DepositFeesMax.HasValue ? _savingsProduct.DepositFeesMax.GetFormatedValue(_savingsProduct.UseCents) : null; " is 147.
Long Statement,OpenCBS.GUI.Configuration,FrmAddSavingBookProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddSavingBookProduct.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(FrmAddSavingBookProduct)); " is 143.
Long Statement,OpenCBS.GUI.Configuration,FrmAddSavingBookProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddSavingBookProduct.cs,InitializeComponent,The length of the statement  "            this.cbxPostingfrequency.SelectedIndexChanged += new System.EventHandler(this.cbxPostingfrequency_SelectedIndexChanged); " is 120.
Long Statement,OpenCBS.GUI.Configuration,frmUserSelection,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Configuration\frmUserSelection.cs,_InitializeLoanOfficer,The length of the statement  "            _users = ServicesProvider.GetInstance().GetUserServices().FindAll(false).OrderBy(item => item.FirstName).ThenBy(item => item.LastName).ToList(); " is 144.
Long Statement,OpenCBS.GUI.Configuration,frmUserSelection,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Configuration\frmUserSelection.cs,btnAssing_Click,The length of the statement  "                ServicesProvider.GetInstance().GetContractServices().ReassignContract(contract.LoanId' GetLoanOfficerId(cbUsers.Text)' _userId); " is 128.
Long Statement,OpenCBS.GUI.Configuration,frmUserSelection,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Configuration\frmUserSelection.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(frmUserSelection)); " is 136.
Long Statement,OpenCBS.GUI.Configuration,FrmGeneralSettings,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Configuration\FrmGeneralSettings.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(FrmGeneralSettings)); " is 138.
Long Statement,OpenCBS.GUI.Configuration,FrmGeneralSettings,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Configuration\FrmGeneralSettings.cs,InitializeComponent,The length of the statement  "            this.comboBoxSavings.SelectionChangeCommitted += new System.EventHandler(this.comboBoxSavings_SelectionChangeCommitted); " is 120.
Long Statement,OpenCBS.GUI.Configuration,FrmGeneralSettings,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Configuration\FrmGeneralSettings.cs,InitializeComponent,The length of the statement  "            this.textBoxGeneralParameterValue.TextChanged += new System.EventHandler(this.textBoxGeneralParameterValue_TextChanged); " is 120.
Long Statement,OpenCBS.GUI.Configuration,FrmGeneralSettings,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Configuration\FrmGeneralSettings.cs,InitializeComponent,The length of the statement  "            this.textBoxProvisioningPenalty.KeyPress += new System.Windows.Forms.KeyPressEventHandler(this.textBoxProvisioningInterest_KeyPress); " is 133.
Long Statement,OpenCBS.GUI.Configuration,FrmGeneralSettings,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Configuration\FrmGeneralSettings.cs,InitializeComponent,The length of the statement  "            this.textBoxProvisioningInterest.KeyPress += new System.Windows.Forms.KeyPressEventHandler(this.textBoxProvisioningInterest_KeyPress); " is 134.
Long Statement,OpenCBS.GUI.Configuration,FrmGeneralSettings,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Configuration\FrmGeneralSettings.cs,InitializeComponent,The length of the statement  "            this.textBoxProvisioningOlb.KeyPress += new System.Windows.Forms.KeyPressEventHandler(this.textBoxProvisioning_KeyPress); " is 121.
Long Statement,OpenCBS.GUI.Configuration,FrmGeneralSettings,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Configuration\FrmGeneralSettings.cs,InitializeComponent,The length of the statement  "            this.dateTimePickerPublicHoliday.ValueChanged += new System.EventHandler(this.dateTimePickerPublicHoliday_ValueChanged); " is 120.
Long Statement,OpenCBS.GUI.Configuration,FrmGeneralSettings,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Configuration\FrmGeneralSettings.cs,InitializeComponent,The length of the statement  "            this.textBoxPublicHolidayDescription.TextChanged += new System.EventHandler(this.textBoxPublicHolidayDescription_TextChanged); " is 126.
Long Statement,OpenCBS.GUI.Configuration,FrmGeneralSettings,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Configuration\FrmGeneralSettings.cs,buttonUpdate_Click,The length of the statement  "            ServicesProvider.GetInstance().GetApplicationSettingsServices().UpdateSelectedParameter(entry.Key.ToString()' entry.Value); " is 123.
Long Statement,OpenCBS.GUI.Configuration,FrmGeneralSettings,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Configuration\FrmGeneralSettings.cs,buttonPublicHolidayDelete_Click,The length of the statement  "                        waitingForm.UpdateInstallmentsDate((DateTime)entry.Key' ServicesProvider.GetInstance().GetContractServices().GetListOfInstallmentsOnDate((DateTime)entry.Key)); " is 159.
Long Statement,OpenCBS.GUI.Configuration,FrmGeneralSettings,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Configuration\FrmGeneralSettings.cs,buttonPublicHolidayDelete_Click,The length of the statement  "                MessageBox.Show(MultiLanguageStrings.GetString(Ressource.GeneralSettings' "selectADate.Text")' ""' MessageBoxButtons.OK' MessageBoxIcon.Information); " is 149.
Long Statement,OpenCBS.GUI.Configuration,FrmSettingsImportExport,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Configuration\frmSettingsImportExport.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(FrmSettingsImportExport)); " is 143.
Long Statement,OpenCBS.GUI.Configuration,FrmSettingsImportExport,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Configuration\frmSettingsImportExport.cs,InitializeComponent,The length of the statement  "            this.imagesSettings.ImageStream = ((System.Windows.Forms.ImageListStreamer)(resources.GetObject("imagesSettings.ImageStream"))); " is 128.
Long Statement,OpenCBS.GUI.Contracts,AddTrancheForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\AddTrancheForm.cs,Setup,The length of the statement  "            interestRateNumericUpDown.KeyDown += (sender' args) => { if(args.KeyCode == Keys.Return) RecalculateTrancheAndRefreshSchedule(); }; " is 131.
Long Statement,OpenCBS.GUI.Contracts,AddTrancheForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\AddTrancheForm.cs,Setup,The length of the statement  "            gracePeriodNumericUpDown.KeyDown += (sender' args) => { if (args.KeyCode == Keys.Return) RecalculateTrancheAndRefreshSchedule(); }; " is 131.
Long Statement,OpenCBS.GUI.Contracts,AddTrancheForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\AddTrancheForm.cs,Setup,The length of the statement  "            amountTextbox.KeyDown += (sender' args) => { if (args.KeyCode == Keys.Return) RecalculateTrancheAndRefreshSchedule(); }; " is 120.
Long Statement,OpenCBS.GUI.Contracts,AddTrancheForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\AddTrancheForm.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(AddTrancheForm)); " is 134.
Long Statement,OpenCBS.GUI.Contracts,AddTrancheForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\AddTrancheForm.cs,InitializeComponent,The length of the statement  "            this.startDateTimePicker.CustomFormat = ((OpenCBS.Shared.Settings.ApplicationSettings)(resources.GetObject("resource1"))).SHORT_DATE_FORMAT; " is 140.
Long Statement,OpenCBS.GUI.Contracts,ContractCollateralForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\ContractCollateralForm.cs,FillCollateralPropertyValues,The length of the statement  "                        Person client = (Person)ServicesProvider.GetInstance().GetClientServices().FindTiers(int.Parse(propertyValue.Value)' OClientTypes.Person); " is 138.
Long Statement,OpenCBS.GUI.Contracts,ContractCollateralForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\ContractCollateralForm.cs,FillCollateralPropertyValues,The length of the statement  "                        myProp = new CustomProperty(propertyValue.Property.Name' propertyValue.Property.Description' client' typeof(Person)' false' true); " is 130.
Long Statement,OpenCBS.GUI.Contracts,ContractCollateralForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\ContractCollateralForm.cs,FillCollateralPropertyValues,The length of the statement  "                        myProp = new CustomProperty(propertyValue.Property.Name' propertyValue.Property.Description' string.Empty' typeof(Person)' false' true); " is 136.
Long Statement,OpenCBS.GUI.Contracts,ContractCollateralForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\ContractCollateralForm.cs,buttonSave_Click,The length of the statement  "                    //if ((string)myProperties.GetPropertyValueByName(collateralProperty.Name) == string.Empty) MessageBox.Show("String is empty!"); " is 128.
Long Statement,OpenCBS.GUI.Contracts,ContractCollateralForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\ContractCollateralForm.cs,buttonSave_Click,The length of the statement  "                    //if ((string)myProperties.GetPropertyValueByName(collateralProperty.Name) == null) MessageBox.Show("collection is null!"); " is 123.
Long Statement,OpenCBS.GUI.Contracts,ContractCollateralForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\ContractCollateralForm.cs,buttonSave_Click,The length of the statement  "                    int index = collections.GetItemIndexByName(collateralProperty.Name' (string)myProperties.GetPropertyValueByName(collateralProperty.Name)); " is 138.
Long Statement,OpenCBS.GUI.Contracts,ContractCollateralForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\ContractCollateralForm.cs,buttonSave_Click,The length of the statement  "                        contractCollateralProperty.Value = ((Person)myProperties.GetPropertyValueByName(collateralProperty.Name)).Id.ToString(); " is 120.
Long Statement,OpenCBS.GUI.Contracts,ContractCollateralForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\ContractCollateralForm.cs,AddOwner,The length of the statement  "                //textBoxName.Text = ServicesProvider.GetInstance().GetClientServices().ClientIsAPerson(client) ? client.Name : String.Empty; " is 125.
Long Statement,OpenCBS.GUI.Contracts,ContractCollateralForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\ContractCollateralForm.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(ContractCollateralForm)); " is 142.
Long Statement,OpenCBS.GUI.Contracts,ContractCollateralForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\ContractCollateralForm.cs,InitializeComponent,The length of the statement  "            this.propertyGrid.SelectedGridItemChanged += new System.Windows.Forms.SelectedGridItemChangedEventHandler(this.propertyGrid_SelectedGridItemChanged); " is 149.
Long Statement,OpenCBS.GUI.Contracts,LoanEntryFeesForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\LoanEntryFeesForm.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(LoanEntryFeesForm)); " is 137.
Long Statement,OpenCBS.GUI.Contracts,ReschedulingForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\ReschedulingForm.cs,Reschedule,The length of the statement  "                _contract.InterestRate = _interestRateTextBox.Amount.HasValue ? _interestRateTextBox.Amount.Value : Contract.InterestRate * 100; " is 128.
Long Statement,OpenCBS.GUI.Contracts,ReschedulingForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\ReschedulingForm.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(ReschedulingForm)); " is 136.
Long Statement,OpenCBS.GUI.Contracts,FastDepositForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\FastDepositForm.cs,LoadSavings,The length of the statement  "                List<ISavingsContract> savings = ServicesProvider.GetInstance().GetSavingServices().GetSavingsByClientId(member.Tiers.Id); " is 122.
Long Statement,OpenCBS.GUI.Contracts,FastDepositForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\FastDepositForm.cs,UpdateTotal,The length of the statement  "            _itemTotal.SubItems[idxAmount].Text = total.GetFormatedValue(ServicesProvider.GetInstance().GetCurrencyServices().GetPivot().UseCents); " is 135.
Long Statement,OpenCBS.GUI.Contracts,FastDepositForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\FastDepositForm.cs,lvContracts_SubItemEndEditing,The length of the statement  "                temp = temp < ((ISavingsContract)e.Item.Tag).Product.DepositMin ? ((ISavingsContract)e.Item.Tag).Product.DepositMin : temp; " is 123.
Long Statement,OpenCBS.GUI.Contracts,FastDepositForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\FastDepositForm.cs,lvContracts_SubItemEndEditing,The length of the statement  "                temp = temp > ((ISavingsContract)e.Item.Tag).Product.DepositMax ? ((ISavingsContract)e.Item.Tag).Product.DepositMax : temp; " is 123.
Long Statement,OpenCBS.GUI.Contracts,FastDepositForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\FastDepositForm.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(FastDepositForm)); " is 135.
Long Statement,OpenCBS.GUI.Contracts,FastDepositForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\FastDepositForm.cs,InitializeComponent,The length of the statement  "            this.lvContracts.SubItemEndEditing += new OpenCBS.GUI.UserControl.SubItemEndEditingEventHandler(this.lvContracts_SubItemEndEditing); " is 132.
Long Statement,OpenCBS.GUI.Contracts,ManualScheduleForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\ManualScheduleForm.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(ManualScheduleForm)); " is 138.
Long Statement,OpenCBS.GUI.Contracts,VillageAddSavingsForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\VillageAddSavingsForm.cs,InitializeControls,The length of the statement  "                item.SubItems.Add(new ListViewItem.ListViewSubItem(item' ""' _product.InterestRate.HasValue ? dfc : fc' bc' item.Font)); " is 120.
Long Statement,OpenCBS.GUI.Contracts,VillageAddSavingsForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\VillageAddSavingsForm.cs,InitializeControls,The length of the statement  "                    item.SubItems.Add(new ListViewItem.ListViewSubItem(item' ""' sbp.ChequeDepositFees.HasValue ? dfc : fc' bc' item.Font)); " is 120.
Long Statement,OpenCBS.GUI.Contracts,VillageAddSavingsForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\VillageAddSavingsForm.cs,UpdateTotal,The length of the statement  "                _itemTotal.SubItems[idxInitialAmount].Text = total.GetFormatedValue(ServicesProvider.GetInstance().GetCurrencyServices().GetPivot().UseCents); " is 142.
Long Statement,OpenCBS.GUI.Contracts,VillageAddSavingsForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\VillageAddSavingsForm.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(VillageAddSavingsForm)); " is 141.
Long Statement,OpenCBS.GUI.Contracts,CreditContractRepayForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\CreditContractRepayForm.Designer.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(CreditContractRepayForm)); " is 143.
Long Statement,OpenCBS.GUI.Contracts,CreditContractRepayForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\CreditContractRepayForm.Designer.cs,SetUp,The length of the statement  "            nudICAmount.Value = _loan.CalculateAmountToRepaySpecifiedInstallment(_instalmentNumber' TimeProvider.Today' _disableFees'  " is 121.
Long Statement,OpenCBS.GUI.Contracts,CreditContractRepayForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\CreditContractRepayForm.Designer.cs,SetExchangeRate,The length of the statement  "                    ExchangeRateForm _xrForm = new ExchangeRateForm(new DateTime(_date.Year' _date.Month' _date.Day' TimeProvider.Now.Hour' TimeProvider.Now.Minute' TimeProvider.Now.Second' TimeProvider.Now.Millisecond)' _loan.Product.Currency); " is 225.
Long Statement,OpenCBS.GUI.Contracts,CreditContractRepayForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\CreditContractRepayForm.Designer.cs,SetExchangeRate,The length of the statement  "                _exchangeRate = ServicesProvider.GetInstance().GetAccountingServices().FindExchangeRate(_date.Date' _loan.Product.Currency); " is 124.
Long Statement,OpenCBS.GUI.Contracts,CreditContractRepayForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\CreditContractRepayForm.Designer.cs,SetExchangeRate,The length of the statement  "                     panelEC.Visible = ServicesProvider.GetInstance().GetCurrencyServices().FindAllCurrencies().Count > 1 && !_loan.Product.Currency.IsPivot; " is 136.
Long Statement,OpenCBS.GUI.Contracts,CreditContractRepayForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\CreditContractRepayForm.Designer.cs,SetExchangeRate,The length of the statement  "                    nudICAmount.Value = _loan.CalculateAmountToRepaySpecifiedInstallment(_instalmentNumber' _date.Date' _disableFees' _manualPenalties'  " is 131.
Long Statement,OpenCBS.GUI.Contracts,CreditContractRepayForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\CreditContractRepayForm.Designer.cs,DisplayAmountLabel,The length of the statement  "            _maximumAmount = _loan.CalculateMaximumAmountAuthorizedToRepay(_instalmentNumber' _date.Date' _disableFees' _manualPenalties' _manualCommission' " is 144.
Long Statement,OpenCBS.GUI.Contracts,CreditContractRepayForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\CreditContractRepayForm.Designer.cs,DisplayAmountLabel,The length of the statement  "            _regradingAmount = _loan.CalculateMaximumAmountToRegradingLoan(_instalmentNumber' _date.Date' _disableFees' _manualPenalties' _manualCommission' " is 144.
Long Statement,OpenCBS.GUI.Contracts,CreditContractRepayForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\CreditContractRepayForm.Designer.cs,DisplayAmountLabel,The length of the statement  "                                     MultiLanguageStrings.GetString(Ressource.CreditContractRepayForm' "max.Text")' _maximumAmount.GetFormatedValue(_loan.UseCents)); " is 128.
Long Statement,OpenCBS.GUI.Contracts,CreditContractRepayForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\CreditContractRepayForm.Designer.cs,DisplayAmountLabel,The length of the statement  "                MultiLanguageStrings.GetString(Ressource.CreditContractRepayForm' "amountToGoNormal.Text")'_regradingAmount.GetFormatedValue(_loan.UseCents)); " is 142.
Long Statement,OpenCBS.GUI.Contracts,CreditContractRepayForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\CreditContractRepayForm.Designer.cs,SetEvent,The length of the statement  "            _lbICPrincipal.Text = string.Format("{0} {1}"' pEvent.Principal.GetFormatedValue(_loan.UseCents)' _loan.Product.Currency.Code); " is 127.
Long Statement,OpenCBS.GUI.Contracts,CreditContractRepayForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\CreditContractRepayForm.Designer.cs,SetEvent,The length of the statement  "            lbInterest.Text = string.Format("{0} {1}"' pEvent.Interests.GetFormatedValue(_loan.UseCents)' _loan.Product.Currency.Code); " is 123.
Long Statement,OpenCBS.GUI.Contracts,CreditContractRepayForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\CreditContractRepayForm.Designer.cs,SetEvent,The length of the statement  "            _lbICFees.Text = string.Format("{0} {1}"' pEvent.Penalties.GetFormatedValue(_loan.UseCents)' _loan.Product.Currency.Code); " is 122.
Long Statement,OpenCBS.GUI.Contracts,CreditContractRepayForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\CreditContractRepayForm.Designer.cs,SetEvent,The length of the statement  "            _lbICCommisions.Text = string.Format("{0} {1}"' pEvent.Commissions.GetFormatedValue(_loan.UseCents)' _loan.Product.Currency.Code); " is 130.
Long Statement,OpenCBS.GUI.Contracts,CreditContractRepayForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\CreditContractRepayForm.Designer.cs,DateChanged,The length of the statement  "                _date = new DateTime(dtpRepaymentDate.Value.Year' dtpRepaymentDate.Value.Month' dtpRepaymentDate.Value.Day' TimeProvider.Now.Hour' TimeProvider.Now.Minute' TimeProvider.Now.Second' TimeProvider.Now.Millisecond); " is 211.
Long Statement,OpenCBS.GUI.Contracts,CreditContractRepayForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\CreditContractRepayForm.Designer.cs,nudICAmount_ValueChanged,The length of the statement  "                nudICAmount.Value = _loan.CalculateAmountToRepaySpecifiedInstallment(_instalmentNumber' TimeProvider.Today' _disableFees' _manualPenalties'  " is 139.
Long Statement,OpenCBS.GUI.Contracts,CreditContractRepayForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\CreditContractRepayForm.Designer.cs,nudECAmount_ValueChanged,The length of the statement  "                nudICAmount.Value = _loan.CalculateAmountToRepaySpecifiedInstallment(_instalmentNumber' TimeProvider.Today' _disableFees' _manualPenalties'  " is 139.
Long Statement,OpenCBS.GUI.Contracts,CloseSavingsForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\CloseSavingsForm.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(CloseSavingsForm)); " is 136.
Long Statement,OpenCBS.GUI.Contracts,CloseSavingsForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\CloseSavingsForm.cs,InitializeComponent,The length of the statement  "            this.tableLayoutAmount.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(64))))' ((int)(((byte)(0))))); " is 132.
Long Statement,OpenCBS.GUI.Contracts,LoanDisbursementForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\LoanDisbursementForm.Designer.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(LoanDisbursementForm)); " is 140.
Long Statement,OpenCBS.GUI.Contracts,OpenSavingsForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\OpenSavingsForm.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(OpenSavingsForm)); " is 135.
Long Statement,OpenCBS.GUI.Contracts,OpenSavingsForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\OpenSavingsForm.cs,InitializeComponent,The length of the statement  "            this.tableLayoutPanel2.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(64))))' ((int)(((byte)(0))))); " is 132.
Long Statement,OpenCBS.GUI.Contracts,InstallmentCommentDialog,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\InstallmentCommentDialog.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(InstallmentCommentDialog)); " is 144.
Long Statement,OpenCBS.GUI.Contracts,InstallmentCommentDialog,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\InstallmentCommentDialog.cs,InitializeComponent,The length of the statement  "            this.buttonCancel.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56))))); " is 128.
Long Statement,OpenCBS.GUI.Contracts,InstallmentCommentDialog,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\InstallmentCommentDialog.cs,InitializeComponent,The length of the statement  "            this.buttonOK.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56))))); " is 124.
Long Statement,OpenCBS.GUI.Contracts,VillageCreditCommitteeForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\VillageCreditCommitteeForm.cs,lvMembers_ItemChecked,The length of the statement  "                        item.SubItems[IdxCreditCommitteeDate].Text = TimeProvider.Today.ToString(ApplicationSettings.GetInstance("").SHORT_DATE_FORMAT); " is 128.
Long Statement,OpenCBS.GUI.Contracts,VillageCreditCommitteeForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\VillageCreditCommitteeForm.cs,lvMembers_ItemChecked,The length of the statement  "                        item.SubItems[IdxCreditCommitteeDate].Tag = TimeProvider.Today.ToString(ApplicationSettings.GetInstance("").SHORT_DATE_FORMAT); " is 127.
Long Statement,OpenCBS.GUI.Contracts,VillageCreditCommitteeForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\VillageCreditCommitteeForm.cs,lvMembers_ItemChecked,The length of the statement  "                        item.SubItems[IdxCreditCommitteeDate].Text = loan.CreditCommiteeDate.Value.ToString(ApplicationSettings.GetInstance("").SHORT_DATE_FORMAT); " is 139.
Long Statement,OpenCBS.GUI.Contracts,VillageCreditCommitteeForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\VillageCreditCommitteeForm.cs,lvMembers_ItemChecked,The length of the statement  "                        item.SubItems[IdxCreditCommitteeDate].Tag = loan.CreditCommiteeDate.Value.ToString(ApplicationSettings.GetInstance("").SHORT_DATE_FORMAT); " is 138.
Long Statement,OpenCBS.GUI.Contracts,VillageCreditCommitteeForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\VillageCreditCommitteeForm.cs,lvMembers_ItemChecked,The length of the statement  "                    item.SubItems[IdxDisbursementDate].Text = loan.StartDate.ToString(ApplicationSettings.GetInstance("").SHORT_DATE_FORMAT); " is 121.
Long Statement,OpenCBS.GUI.Contracts,VillageCreditCommitteeForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\VillageCreditCommitteeForm.cs,lvMembers_ItemChecked,The length of the statement  "                    item.SubItems[IdxDisbursementDate].Tag = loan.StartDate.ToString(ApplicationSettings.GetInstance("").SHORT_DATE_FORMAT); " is 120.
Long Statement,OpenCBS.GUI.Contracts,VillageCreditCommitteeForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\VillageCreditCommitteeForm.cs,lvMembers_ItemChecked,The length of the statement  "                    item.SubItems[IdxFirstInstallmentDate].Text = loan.FirstInstallmentDate.ToString(ApplicationSettings.GetInstance("").SHORT_DATE_FORMAT); " is 136.
Long Statement,OpenCBS.GUI.Contracts,VillageCreditCommitteeForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\VillageCreditCommitteeForm.cs,lvMembers_ItemChecked,The length of the statement  "                    item.SubItems[IdxFirstInstallmentDate].Tag = loan.FirstInstallmentDate.ToString(ApplicationSettings.GetInstance("").SHORT_DATE_FORMAT); " is 135.
Long Statement,OpenCBS.GUI.Contracts,VillageCreditCommitteeForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\VillageCreditCommitteeForm.cs,btnSave_Click,The length of the statement  "                    loan = ServicesProvider.GetInstance().GetContractServices().UpdateContractStatus(loan' project' client' currentStatus == OContractStatus.Validated); " is 148.
Long Statement,OpenCBS.GUI.Contracts,VillageCreditCommitteeForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\VillageCreditCommitteeForm.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(VillageCreditCommitteeForm)); " is 146.
Long Statement,OpenCBS.GUI.Contracts,FastRepaymentForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\FastRepaymentForm.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(FastRepaymentForm)); " is 137.
Long Statement,OpenCBS.GUI.Contracts,FastRepaymentForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\FastRepaymentForm.cs,InitializeComponent,The length of the statement  "            this.lvContracts.SubItemEndEditing += new OpenCBS.GUI.UserControl.SubItemEndEditingEventHandler(this.lvContracts_SubItemEndEditing); " is 132.
Long Statement,OpenCBS.GUI.Contracts,SavingsOperationForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\SavingsOperationForm.cs,BSaveClick,The length of the statement  "                if ((_flatFees.HasValue && updAmountFees.Value != _flatFees) || (_rateFees.HasValue && updAmountFees.Value != (decimal)(_rateFees * 100))) " is 138.
Long Statement,OpenCBS.GUI.Contracts,SavingsOperationForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\SavingsOperationForm.cs,comboBoxSavingsMethod_SelectedIndexChanged,The length of the statement  "                            updAmountFees.Text = ((SavingBookContract)_saving).ChequeDepositFees.GetFormatedValue(_saving.Product.Currency.UseCents); " is 121.
Long Statement,OpenCBS.GUI.Contracts,SavingsOperationForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\SavingsOperationForm.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(SavingsOperationForm)); " is 140.
Long Statement,OpenCBS.GUI.Contracts,VillageAddLoanForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\VillageAddLoanForm.cs,InitializeControls,The length of the statement  "                    item.SubItems.Add(new ListViewItem.ListViewSubItem(item' ""' member.Product.Amount.HasValue ? dfc : fc' bc' item.Font)); " is 120.
Long Statement,OpenCBS.GUI.Contracts,VillageAddLoanForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\VillageAddLoanForm.cs,InitializeControls,The length of the statement  "                    item.SubItems.Add(new ListViewItem.ListViewSubItem(item' ""' member.Product.InterestRate.HasValue ? dfc : fc' bc' item.Font)); " is 126.
Long Statement,OpenCBS.GUI.Contracts,VillageAddLoanForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\VillageAddLoanForm.cs,InitializeControls,The length of the statement  "                    item.SubItems.Add(new ListViewItem.ListViewSubItem(item' ""' member.Product.GracePeriod.HasValue ? dfc : fc' bc' item.Font)); " is 125.
Long Statement,OpenCBS.GUI.Contracts,VillageAddLoanForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\VillageAddLoanForm.cs,InitializeControls,The length of the statement  "                    item.SubItems.Add(new ListViewItem.ListViewSubItem(item' ""' member.Product.NbOfInstallments.HasValue ? dfc : fc' bc' item.Font)); " is 130.
Long Statement,OpenCBS.GUI.Contracts,VillageAddLoanForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\VillageAddLoanForm.cs,InitializeControls,The length of the statement  "                    item.SubItems.Add(new ListViewItem.ListViewSubItem(item' ""' member.Product.Amount.HasValue ? dfc : fc' bc' item.Font)); " is 120.
Long Statement,OpenCBS.GUI.Contracts,VillageAddLoanForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\VillageAddLoanForm.cs,InitializeControls,The length of the statement  "                    item.SubItems.Add(new ListViewItem.ListViewSubItem(item' ""' _product.InterestRate.HasValue ? dfc : fc' bc' item.Font)); " is 120.
Long Statement,OpenCBS.GUI.Contracts,VillageAddLoanForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\VillageAddLoanForm.cs,InitializeControls,The length of the statement  "                    item.SubItems.Add(new ListViewItem.ListViewSubItem(item' ""' _product.NbOfInstallments.HasValue ? dfc : fc' bc' item.Font)); " is 124.
Long Statement,OpenCBS.GUI.Contracts,VillageAddLoanForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\VillageAddLoanForm.cs,InitializeControls,The length of the statement  "                        item.SubItems.Add(new ListViewItem.ListViewSubItem(item' ""' _product.CompulsoryAmount.HasValue ? dfc : fc' bc' item.Font)); " is 124.
Long Statement,OpenCBS.GUI.Contracts,VillageAddLoanForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\VillageAddLoanForm.cs,UpdateTotal,The length of the statement  "            _itemTotal.SubItems[IdxAmount].Text = total.GetFormatedValue(ServicesProvider.GetInstance().GetCurrencyServices().GetPivot().UseCents); " is 135.
Long Statement,OpenCBS.GUI.Contracts,VillageAddLoanForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\VillageAddLoanForm.cs,lvMembers_ItemChecked,The length of the statement  "                        item.SubItems[IdxAmount].Text = ((VillageMember)item.Tag).Product.AmountMin.GetFormatedValue(_product.Currency.UseCents); " is 121.
Long Statement,OpenCBS.GUI.Contracts,VillageAddLoanForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\VillageAddLoanForm.cs,lvMembers_ItemChecked,The length of the statement  "                        item.SubItems[IdxInterest].Text = Math.Round(((VillageMember)item.Tag).Product.InterestRateMin.Value * 100' decimalPlaces).ToString(); " is 134.
Long Statement,OpenCBS.GUI.Contracts,VillageAddLoanForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\VillageAddLoanForm.cs,lvMembers_ItemChecked,The length of the statement  "                    item.SubItems[IdxCreationDate].Text = TimeProvider.Today.ToString(ApplicationSettings.GetInstance("").SHORT_DATE_FORMAT); " is 121.
Long Statement,OpenCBS.GUI.Contracts,VillageAddLoanForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\VillageAddLoanForm.cs,lvMembers_ItemChecked,The length of the statement  "                    item.SubItems[IdxCreationDate].Tag = TimeProvider.Today.ToString(ApplicationSettings.GetInstance("").SHORT_DATE_FORMAT); " is 120.
Long Statement,OpenCBS.GUI.Contracts,VillageAddLoanForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\VillageAddLoanForm.cs,lvMembers_ItemChecked,The length of the statement  "                    List<ISavingsContract> savings = ServicesProvider.GetInstance().GetSavingServices().GetSavingsByClientId(((VillageMember)e.Item.Tag).Tiers.Id); " is 143.
Long Statement,OpenCBS.GUI.Contracts,VillageAddLoanForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\VillageAddLoanForm.cs,btnSave_Click,The length of the statement  "                    string text = string.Format(@"The loan of client '{0}' requires a compulsory savings account!"' ((VillageMember)item.Tag).Tiers.Name); " is 134.
Long Statement,OpenCBS.GUI.Contracts,VillageAddLoanForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\VillageAddLoanForm.cs,btnSave_Click,The length of the statement  "                        string text = string.Format(@"The loan of client '{0}' requires a compulsory savings account!"' ((VillageMember)item.Tag).Tiers.Name); " is 134.
Long Statement,OpenCBS.GUI.Contracts,VillageAddLoanForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\VillageAddLoanForm.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(VillageAddLoanForm)); " is 138.
Long Statement,OpenCBS.GUI.Contracts,VillageDisburseLoanForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\VillageDisburseLoanForm.cs,UpdateTotal,The length of the statement  "                total += customExchangeRate.Rate == 0 ? 0 : (OCurrency)Convert.ToDecimal(item.SubItems[IdxAmount].Tag) / customExchangeRate.Rate; " is 129.
Long Statement,OpenCBS.GUI.Contracts,VillageDisburseLoanForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\VillageDisburseLoanForm.cs,UpdateTotal,The length of the statement  "                _itemTotal.SubItems[IdxAmount].Text = total.GetFormatedValue(ServicesProvider.GetInstance().GetCurrencyServices().GetPivot().UseCents); " is 135.
Long Statement,OpenCBS.GUI.Contracts,VillageDisburseLoanForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\VillageDisburseLoanForm.cs,btnSave_Click,The length of the statement  "                                string text = string.Format("The loan with the code {0} requires a compulsory savings account to be disbursed!"' loan.Code); " is 124.
Long Statement,OpenCBS.GUI.Contracts,VillageDisburseLoanForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\VillageDisburseLoanForm.cs,btnSave_Click,The length of the statement  "                                        "The balance on savings account {2} of {0} is not enough to cover total loans amount percentage of {1}.\nClient name: {3}"' " is 123.
Long Statement,OpenCBS.GUI.Contracts,VillageDisburseLoanForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\VillageDisburseLoanForm.cs,btnSave_Click,The length of the statement  "                    if (item.SubItems[IdxPaymentMethod].Tag != null && item.SubItems[IdxPaymentMethod].Tag.ToString() == OPaymentMethods.Savings.ToString()) " is 136.
Long Statement,OpenCBS.GUI.Contracts,VillageDisburseLoanForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\VillageDisburseLoanForm.cs,btnSave_Click,The length of the statement  "                            string text = string.Format(@"The loan of client '{0}' requires a compulsory savings account!"' ((VillageMember)item.Tag).Tiers.Name); " is 134.
Long Statement,OpenCBS.GUI.Contracts,VillageDisburseLoanForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\VillageDisburseLoanForm.cs,btnSave_Click,The length of the statement  "                    activeMember.ActiveLoans[index] = ServicesProvider.GetInstance().GetContractServices().Disburse(loan' date' true' false' method); " is 129.
Long Statement,OpenCBS.GUI.Contracts,VillageDisburseLoanForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\VillageDisburseLoanForm.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(VillageDisburseLoanForm)); " is 143.
Long Statement,OpenCBS.GUI.Contracts,VillageDisburseLoanForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\VillageDisburseLoanForm.cs,InitializeComponent,The length of the statement  "            this.toolStripStatusLabel1.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56))))); " is 137.
Long Statement,OpenCBS.GUI.Contracts,VillageDisburseLoanForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\VillageDisburseLoanForm.cs,InitializeComponent,The length of the statement  "            this.lvMembers.SubItemEndEditing += new OpenCBS.GUI.UserControl.SubItemEndEditingEventHandler(this.lvMembers_SubItemEndEditing); " is 128.
Long Statement,OpenCBS.GUI.Contracts,ReassignContractsForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\ReassignContractsForm.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(ReassignContractsForm)); " is 141.
Long Statement,OpenCBS.GUI.Database,FrmDatabaseName,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Database\FrmDatabaseName.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(FrmDatabaseName)); " is 135.
Long Statement,OpenCBS.GUI.Database,FrmDatabaseSettings,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Database\FrmDatabaseSettings.cs,btnDatabaseConnection_Click,The length of the statement  "                MessageBox.Show(MultiLanguageStrings.GetString(Ressource.FrmDatabaseSettings' "CorrectLabels.Text")'@"Error"' MessageBoxButtons.OK' " is 131.
Long Statement,OpenCBS.GUI.Database,FrmDatabaseSettings,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Database\FrmDatabaseSettings.cs,InitializeTabPageSqlDatabaseSettings,The length of the statement  "            lblSQLDatabaseSettingsVersion.Text = string.Format("{0}:  {1}"'  MultiLanguageStrings.GetString(Ressource.FrmDatabaseSettings' "Version.Text")' pSqlDatabaseSettings.Version); " is 174.
Long Statement,OpenCBS.GUI.Database,FrmDatabaseSettings,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Database\FrmDatabaseSettings.cs,buttonSetAsDefault_Click,The length of the statement  "                lblResultMessage.Text = string.Format(MultiLanguageStrings.GetString(Ressource.FrmDatabaseSettings' "SelectInList.Text"));  " is 122.
Long Statement,OpenCBS.GUI.Database,FrmDatabaseSettings,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Database\FrmDatabaseSettings.cs,buttonSetAsDefault_Click,The length of the statement  "            lblResultMessage.Text = string.Format("{0} {1}"' TechnicalSettings.DatabaseName' MultiLanguageStrings.GetString(Ressource.FrmDatabaseSettings' "DefaultDatabase.Text")); " is 168.
Long Statement,OpenCBS.GUI.Database,FrmDatabaseSettings,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Database\FrmDatabaseSettings.cs,buttonSave_Click,The length of the statement  "                MessageBox.Show(MultiLanguageStrings.GetString(Ressource.FrmDatabaseSettings' "NoSelectBase.Text")' @"Error"' MessageBoxButtons.OK' " is 131.
Long Statement,OpenCBS.GUI.Database,FrmDatabaseSettings,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Database\FrmDatabaseSettings.cs,buttonRestore_Click,The length of the statement  "                lblResultMessage.Text = string.Format(MultiLanguageStrings.GetString(Ressource.FrmDatabaseSettings' "SelectInList.Text")); " is 122.
Long Statement,OpenCBS.GUI.Database,FrmDatabaseSettings,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Database\FrmDatabaseSettings.cs,_ShowDatabaseDetails,The length of the statement  "                lblResultMessage.Text = string.Format(MultiLanguageStrings.GetString(Ressource.FrmDatabaseSettings' "SelectInList.Text")); " is 122.
Long Statement,OpenCBS.GUI.Database,FrmDatabaseSettings,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Database\FrmDatabaseSettings.cs,FrmDatabaseSettings_UpdateDatabaseEvent,The length of the statement  "                string st = string.Format("{0} {1} {2} {3}"' MultiLanguageStrings.GetString(Ressource.FrmDatabaseSettings' "UpdateDBFrom.Text")' pCurrentDatabase' " is 146.
Long Statement,OpenCBS.GUI.Database,FrmDatabaseSettings,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Database\FrmDatabaseSettings.cs,buttonSQLDatabaseSettingsUpgrade_Click,The length of the statement  "            lblResultMessage.Text = MultiLanguageStrings.GetString(Ressource.FrmDatabaseSettings' "UpgradeDatabaseInProgress.Text"); " is 120.
Long Statement,OpenCBS.GUI.Database,FrmDatabaseSettings,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Database\FrmDatabaseSettings.cs,backgroundWorkerDetectDatabases_RunWorkerCompleted,The length of the statement  "            if (_sqlDatabases != null && _sqlDatabases.Any() && !_sqlDatabases.Select(i => i.Name).Contains(TechnicalSettings.DatabaseName)) " is 128.
Long Statement,OpenCBS.GUI.Database,FrmDatabaseSettings,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Database\FrmDatabaseSettings.cs,bWDatabaseCreation_RunWorkerCompleted,The length of the statement  "                lblResultMessage.Text = MultiLanguageStrings.GetString(Ressource.FrmDatabaseSettings' "DatabaseCreationCancelled.Text"); " is 120.
Long Statement,OpenCBS.GUI.Database,FrmDatabaseSettings,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Database\FrmDatabaseSettings.cs,bWDatabaseCreation_RunWorkerCompleted,The length of the statement  "                lblResultMessage.Text = string.Format("{0} {1} {2}"' MultiLanguageStrings.GetString(Ressource.FrmDatabaseSettings' "Database.Text")' TechnicalSettings.DatabaseName' MultiLanguageStrings.GetString(Ressource.FrmDatabaseSettings' "Created.Text")); " is 244.
Long Statement,OpenCBS.GUI.Database,FrmDatabaseSettings,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Database\FrmDatabaseSettings.cs,bWDatabaseCreation_DoWork,The length of the statement  "            _sqlDatabases.Add(new SqlDatabaseSettings { Name = TechnicalSettings.DatabaseName' Version = TechnicalSettings.SoftwareVersion' Size = "-" }); " is 142.
Long Statement,OpenCBS.GUI.Database,FrmDatabaseSettings,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Database\FrmDatabaseSettings.cs,bWDatabaseBackup_RunWorkerCompleted,The length of the statement  "                lblResultMessage.Text = string.Format(MultiLanguageStrings.GetString(Ressource.FrmDatabaseSettings' "FileBackedUp.Text")' e.Result); " is 132.
Long Statement,OpenCBS.GUI.Database,FrmDatabaseSettings,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Database\FrmDatabaseSettings.cs,bWDatabaseRestore_RunWorkerCompleted,The length of the statement  "                lblResultMessage.Text = string.Format(" {0} {1} {2}"' MultiLanguageStrings.GetString(Ressource.FrmDatabaseSettings' "RestoreDatabase.Text")' sqlDatabase.Name' MultiLanguageStrings.GetString(Ressource.FrmDatabaseSettings' "Successful.Text")); " is 241.
Long Statement,OpenCBS.GUI.Database,FrmDatabaseSettings,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Database\FrmDatabaseSettings.cs,bWDatabaseUpdate_DoWork,The length of the statement  "            databaseServices.UpdateDatabaseEvent += new DatabaseServices.ExecuteUpgradeSqlDatabaseFile(FrmDatabaseSettings_UpdateDatabaseEvent); " is 132.
Long Statement,OpenCBS.GUI.Database,FrmDatabaseSettings,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Database\FrmDatabaseSettings.cs,bWDatabaseUpdate_DoWork,The length of the statement  "            e.Result = databaseServices.UpdateDatabase(TechnicalSettings.SoftwareVersion' sqlDatabaseSettings.Name' UserSettings.GetUpdatePath); " is 132.
Long Statement,OpenCBS.GUI.Database,FrmDatabaseSettings,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Database\FrmDatabaseSettings.cs,bWDatabaseUpdate_RunWorkerCompleted,The length of the statement  "                lblResultMessage.Text = string.Format("{0} {1} {2}"' MultiLanguageStrings.GetString(Ressource.FrmDatabaseSettings' "UpgradeDatabase.Text")' sqlDatabaseSettings.Name' MultiLanguageStrings.GetString(Ressource.FrmDatabaseSettings' "Successful.Text")); " is 248.
Long Statement,OpenCBS.GUI.Database,FrmDatabaseSettings,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Database\FrmDatabaseSettings.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(FrmDatabaseSettings)); " is 139.
Long Statement,OpenCBS.GUI.Database,FrmDatabaseSettings,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Database\FrmDatabaseSettings.cs,InitializeComponent,The length of the statement  "            this.tBDatabaseSettingsSchemaResult.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56))))); " is 146.
Long Statement,OpenCBS.GUI.Database,FrmDatabaseSettings,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Database\FrmDatabaseSettings.cs,InitializeComponent,The length of the statement  "            this.bWDatabasesDetection.DoWork += new System.ComponentModel.DoWorkEventHandler(this.backgroundWorkerDetectDatabases_DoWork); " is 126.
Long Statement,OpenCBS.GUI.Database,FrmDatabaseSettings,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Database\FrmDatabaseSettings.cs,InitializeComponent,The length of the statement  "            this.bWDatabasesDetection.RunWorkerCompleted += new System.ComponentModel.RunWorkerCompletedEventHandler(this.backgroundWorkerDetectDatabases_RunWorkerCompleted); " is 162.
Long Statement,OpenCBS.GUI.Database,FrmDatabaseSettings,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Database\FrmDatabaseSettings.cs,InitializeComponent,The length of the statement  "            this.bWDatabaseCreation.RunWorkerCompleted += new System.ComponentModel.RunWorkerCompletedEventHandler(this.bWDatabaseCreation_RunWorkerCompleted); " is 147.
Long Statement,OpenCBS.GUI.Database,FrmDatabaseSettings,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Database\FrmDatabaseSettings.cs,InitializeComponent,The length of the statement  "            this.bWDatabaseBackup.RunWorkerCompleted += new System.ComponentModel.RunWorkerCompletedEventHandler(this.bWDatabaseBackup_RunWorkerCompleted); " is 143.
Long Statement,OpenCBS.GUI.Database,FrmDatabaseSettings,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Database\FrmDatabaseSettings.cs,InitializeComponent,The length of the statement  "            this.bWDatabaseRestore.RunWorkerCompleted += new System.ComponentModel.RunWorkerCompletedEventHandler(this.bWDatabaseRestore_RunWorkerCompleted); " is 145.
Long Statement,OpenCBS.GUI.Database,FrmDatabaseSettings,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Database\FrmDatabaseSettings.cs,InitializeComponent,The length of the statement  "            this.bWDatabaseUpdate.ProgressChanged += new System.ComponentModel.ProgressChangedEventHandler(this.bWDatabaseUpdate_ProgressChanged); " is 134.
Long Statement,OpenCBS.GUI.Database,FrmDatabaseSettings,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Database\FrmDatabaseSettings.cs,InitializeComponent,The length of the statement  "            this.bWDatabaseUpdate.RunWorkerCompleted += new System.ComponentModel.RunWorkerCompletedEventHandler(this.bWDatabaseUpdate_RunWorkerCompleted); " is 143.
Long Statement,OpenCBS.GUI.Database,SQLInfoEnumerator,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Database\SQLInfoEnumerator.cs,RetrieveInformation,The length of the statement  "							if (SQL_NEED_DATA == SQLBrowseConnect(m_connectionHandle' inConnection' stringLength' outConnection' DEFAULT_RESULT_SIZE' out stringLength2Ptr)) " is 144.
Long Statement,OpenCBS.GUI.Database,SQLInfoEnumerator,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Database\SQLInfoEnumerator.cs,RetrieveInformation,The length of the statement  "								if (SQL_NEED_DATA != SQLBrowseConnect(m_connectionHandle' inConnection' stringLength' outConnection' DEFAULT_RESULT_SIZE' out stringLength2Ptr)) " is 144.
Long Statement,OpenCBS.GUI.Export,ComplexFieldPropertiesForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Export\ComplexFieldPropertiesForm.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(ComplexFieldPropertiesForm)); " is 146.
Long Statement,OpenCBS.GUI.Export,CreateCustomizableFileForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Export\CreateCustomizableFileForm.cs,_initializeExportFileList,The length of the statement  "            comboBoxFile.DataSource = new[] { new { Display = MultiLanguageStrings.GetString(Ressource.CustomizableExport' "InstallmentFile.Text")' Value = (IFile)new InstallmentExportFile() }}; " is 182.
Long Statement,OpenCBS.GUI.Export,CreateCustomizableFileForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Export\CreateCustomizableFileForm.cs,_initializeImportFileList,The length of the statement  "            comboBoxFile.DataSource = new[] { new { Display = MultiLanguageStrings.GetString(Ressource.CustomizableExport' "ReimbursementFile.Text")' Value = (IFile)new ReimbursementImportFile() }}; " is 186.
Long Statement,OpenCBS.GUI.Export,CreateCustomizableFileForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Export\CreateCustomizableFileForm.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(CreateCustomizableFileForm)); " is 146.
Long Statement,OpenCBS.GUI.Export,CustomizableImportForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Export\CustomizableImportForm.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(CustomizableImportForm)); " is 142.
Long Statement,OpenCBS.GUI.Export,CustomizableImportForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Export\CustomizableImportForm.cs,InitializeComponent,The length of the statement  "            this.columnHeaderInstallmentContractCode = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader())); " is 122.
Long Statement,OpenCBS.GUI.Export,CustomizableImportForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Export\CustomizableImportForm.cs,InitializeComponent,The length of the statement  "            this._buttonExit.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56))))); " is 127.
Long Statement,OpenCBS.GUI.Export,CustomizableImportForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Export\CustomizableImportForm.cs,InitializeComponent,The length of the statement  "            this.buttonOpenData.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56))))); " is 130.
Long Statement,OpenCBS.GUI.Export,CustomizableImportForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Export\CustomizableImportForm.cs,InitializeComponent,The length of the statement  "            this.buttonExportAccountTiers.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56))))); " is 140.
Long Statement,OpenCBS.GUI.Export,CustomizableImportForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Export\CustomizableImportForm.cs,InitializeComponent,The length of the statement  "            this.btnSelectAllInstallments.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56))))); " is 140.
Long Statement,OpenCBS.GUI.Export,CustomizableImportForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Export\CustomizableImportForm.cs,InitializeComponent,The length of the statement  "            this.btnDeselectAllInstallments.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56))))); " is 142.
Long Statement,OpenCBS.GUI.Export,CustomizableImportForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Export\CustomizableImportForm.cs,InitializeComponent,The length of the statement  "            this.listViewInstallments.ItemChecked += new System.Windows.Forms.ItemCheckedEventHandler(this.listViewInstallments_ItemChecked); " is 129.
Long Statement,OpenCBS.GUI.Export,CustomizableExportConfigurationForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Export\CustomizableExportConfigurationForm.cs,_initializeDefaultFields,The length of the statement  "            pDefaultList.ForEach(item => item.DisplayName = MultiLanguageStrings.GetString(Ressource.CustomizableExport' item.Name + ".Text")); " is 131.
Long Statement,OpenCBS.GUI.Export,CustomizableExportConfigurationForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Export\CustomizableExportConfigurationForm.cs,_initializeDefaultFields,The length of the statement  "                pDefaultList.OfType<Field>().Where(item => item.IsRequired).ToList().ForEach(item => item.DisplayName = "* " + item.DisplayName); " is 129.
Long Statement,OpenCBS.GUI.Export,CustomizableExportConfigurationForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Export\CustomizableExportConfigurationForm.cs,GetFile,The length of the statement  "//                    installmentExportFile.PaymentMethod = (OPaymentMethods)Enum.Parse(typeof(OPaymentMethods)' comboBoxPaymentMethods.SelectedValue.ToString()); " is 162.
Long Statement,OpenCBS.GUI.Export,CustomizableExportConfigurationForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Export\CustomizableExportConfigurationForm.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(CustomizableExportConfigurationForm)); " is 155.
Long Statement,OpenCBS.GUI.Export,CustomizableExportForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Export\CustomizableExportForm.cs,_initializeDates,The length of the statement  "            dateTimePickerEndDateInstallments.Value = new DateTime(TimeProvider.Today.Year' TimeProvider.Today.Month' DateTime.DaysInMonth(TimeProvider.Today.Year' TimeProvider.Today.Month)); " is 179.
Long Statement,OpenCBS.GUI.Export,CustomizableExportForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Export\CustomizableExportForm.cs,_displayInstallments,The length of the statement  "            List<Installment> listInstallment = ServicesProvider.GetInstance().GetExportServices().GetInstallmentData(dateTimePickerBeginDateInstallments.Value' dateTimePickerEndDateInstallments.Value); " is 190.
Long Statement,OpenCBS.GUI.Export,CustomizableExportForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Export\CustomizableExportForm.cs,_exportInstallments,The length of the statement  "                            if (MessageBox.Show(MultiLanguageStrings.GetString(Ressource.CustomizableExport' "SetInstallmentAsPending.Text")' ""' MessageBoxButtons.YesNo) == DialogResult.Yes) " is 163.
Long Statement,OpenCBS.GUI.Export,CustomizableExportForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Export\CustomizableExportForm.cs,_setInstallmentAsPending,The length of the statement  "            RunPendingInstallmentForm run = new RunPendingInstallmentForm(_getSelectedInstallments()' _installmentFile.PaymentMethod); " is 122.
Long Statement,OpenCBS.GUI.Export,CustomizableExportForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Export\CustomizableExportForm.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(CustomizableExportForm)); " is 142.
Long Statement,OpenCBS.GUI.Export,CustomizableExportForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Export\CustomizableExportForm.cs,InitializeComponent,The length of the statement  "            this.columnHeaderInstallmentContractCode = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader())); " is 122.
Long Statement,OpenCBS.GUI.Export,CustomizableExportForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Export\CustomizableExportForm.cs,InitializeComponent,The length of the statement  "            this.columnHeaderInstallmentClientName = ((System.Windows.Forms.ColumnHeader)(new System.Windows.Forms.ColumnHeader())); " is 120.
Long Statement,OpenCBS.GUI.Export,CustomizableExportForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Export\CustomizableExportForm.cs,InitializeComponent,The length of the statement  "            this._buttonExit.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56))))); " is 127.
Long Statement,OpenCBS.GUI.Export,CustomizableExportForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Export\CustomizableExportForm.cs,InitializeComponent,The length of the statement  "            this.buttonRefreshInstallments.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56))))); " is 141.
Long Statement,OpenCBS.GUI.Export,CustomizableExportForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Export\CustomizableExportForm.cs,InitializeComponent,The length of the statement  "            this.listViewFormatedInstallments.ItemSelectionChanged += new System.Windows.Forms.ListViewItemSelectionChangedEventHandler(this.listViewFormatedInstallments_ItemSelectionChanged); " is 180.
Long Statement,OpenCBS.GUI.Export,CustomizableExportForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Export\CustomizableExportForm.cs,InitializeComponent,The length of the statement  "            this.btnSelectAllInstallments.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56))))); " is 140.
Long Statement,OpenCBS.GUI.Export,CustomizableExportForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Export\CustomizableExportForm.cs,InitializeComponent,The length of the statement  "            this.btnDeselectAllInstallments.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56))))); " is 142.
Long Statement,OpenCBS.GUI.Export,CustomizableExportForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Export\CustomizableExportForm.cs,InitializeComponent,The length of the statement  "            this.buttonExportAccountTiers.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56))))); " is 140.
Long Statement,OpenCBS.GUI.Export,CustomizableExportForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Export\CustomizableExportForm.cs,InitializeComponent,The length of the statement  "            this.listViewInstallments.ItemChecked += new System.Windows.Forms.ItemCheckedEventHandler(this.listViewInstallments_ItemChecked); " is 129.
Long Statement,OpenCBS.GUI.Export,CustomizableExportForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Export\CustomizableExportForm.cs,InitializeComponent,The length of the statement  "            this.listViewInstallments.ItemSelectionChanged += new System.Windows.Forms.ListViewItemSelectionChangedEventHandler(this.listViewInstallments_ItemSelectionChanged); " is 164.
Long Statement,OpenCBS.GUI.Export,CustomizableExportForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Export\CustomizableExportForm.cs,InitializeComponent,The length of the statement  "            this.tagInstallmentsAsPendingToolStripMenuItem.Click += new System.EventHandler(this.tagInstallmentsAsPendingToolStripMenuItem_Click); " is 134.
Long Statement,OpenCBS.GUI.Export,DateFieldPropertiesForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Export\DateFieldPropertiesForm.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(DateFieldPropertiesForm)); " is 143.
Long Statement,OpenCBS.GUI.Export,DateFieldPropertiesForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Export\DateFieldPropertiesForm.cs,InitializeComponent,The length of the statement  "            this.linkLabelDocumentation.LinkClicked += new System.Windows.Forms.LinkLabelLinkClickedEventHandler(this.linkLabelDocumentation_LinkClicked); " is 142.
Long Statement,OpenCBS.GUI.Export,DecimalFieldPropertiesForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Export\DecimalFieldPropertiesForm.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(DecimalFieldPropertiesForm)); " is 146.
Long Statement,OpenCBS.GUI.Export,FieldListUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Export\FieldListUserControl.cs,buttonProperties_Click,The length of the statement  "                        StringFieldPropertiesForm frm = new StringFieldPropertiesForm { StringFieldType = ((Field)selectedField).FieldType as StringFieldType }; " is 136.
Long Statement,OpenCBS.GUI.Export,FieldListUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Export\FieldListUserControl.cs,buttonProperties_Click,The length of the statement  "                        DateFieldPropertiesForm frm = new DateFieldPropertiesForm { DateFieldType = ((Field)selectedField).FieldType as DateFieldType }; " is 128.
Long Statement,OpenCBS.GUI.Export,FieldListUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Export\FieldListUserControl.cs,buttonProperties_Click,The length of the statement  "                        DecimalFieldPropertiesForm frm = new DecimalFieldPropertiesForm { DecimalFieldType = ((Field)selectedField).FieldType as DecimalFieldType }; " is 140.
Long Statement,OpenCBS.GUI.Export,FieldListUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Export\FieldListUserControl.cs,buttonProperties_Click,The length of the statement  "                        IntegerFieldPropertiesForm frm = new IntegerFieldPropertiesForm { IntegerFieldType = ((Field)selectedField).FieldType as IntegerFieldType }; " is 140.
Long Statement,OpenCBS.GUI.Export,FieldListUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Export\FieldListUserControl.cs,listViewSelectedFields_SelectedIndexChanged,The length of the statement  "                    : (((Field)olvSelectedFields.SelectedObject).FieldType is DateFieldType || ((Field)olvSelectedFields.SelectedObject).FieldType is DecimalFieldType); " is 148.
Long Statement,OpenCBS.GUI.Export,FieldListUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Export\FieldListUserControl.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(FieldListUserControl)); " is 140.
Long Statement,OpenCBS.GUI.Export,FieldListUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Export\FieldListUserControl.cs,InitializeComponent,The length of the statement  "            this.comboBoxDefaultFields.SelectedIndexChanged += new System.EventHandler(this.comboBoxDefaultFields_SelectedIndexChanged); " is 124.
Long Statement,OpenCBS.GUI.Export,FieldListUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Export\FieldListUserControl.cs,InitializeComponent,The length of the statement  "            this.olvSelectedFields.CellEditStarting += new BrightIdeasSoftware.CellEditEventHandler(this.olvSelectedFields_CellEditStarting); " is 129.
Long Statement,OpenCBS.GUI.Export,FieldListUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Export\FieldListUserControl.cs,InitializeComponent,The length of the statement  "            this.olvSelectedFields.SelectedIndexChanged += new System.EventHandler(this.listViewSelectedFields_SelectedIndexChanged); " is 121.
Long Statement,OpenCBS.GUI.Export,IntegerFieldPropertiesForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Export\IntegerFieldPropertiesForm.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(IntegerFieldPropertiesForm)); " is 146.
Long Statement,OpenCBS.GUI.Export,RunPendingInstallmentForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Export\RunPendingInstallmentForm.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(RunPendingInstallmentForm)); " is 145.
Long Statement,OpenCBS.GUI.Export,RunPendingInstallmentForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Export\RunPendingInstallmentForm.cs,InitializeComponent,The length of the statement  "            this.backgroundWorker1.RunWorkerCompleted += new System.ComponentModel.RunWorkerCompletedEventHandler(this.backgroundWorker1_RunWorkerCompleted); " is 145.
Long Statement,OpenCBS.GUI.Export,RunPendingInstallmentForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Export\RunPendingInstallmentForm.cs,InitializeComponent,The length of the statement  "            this.labelTitle.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(64))))' ((int)(((byte)(0))))); " is 125.
Long Statement,OpenCBS.GUI.Export,RunPendingInstallmentForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Export\RunPendingInstallmentForm.cs,InitializeComponent,The length of the statement  "            this.buttonCancel.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56))))); " is 128.
Long Statement,OpenCBS.GUI.Export,RunPendingInstallmentForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Export\RunPendingInstallmentForm.cs,InitializeComponent,The length of the statement  "            this.buttonRun.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56))))); " is 125.
Long Statement,OpenCBS.GUI.Export,StringFieldPropertiesForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Export\StringFieldPropertiesForm.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(StringFieldPropertiesForm)); " is 145.
Long Statement,OpenCBS.GUI.Export,StringFieldPropertiesForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Export\StringFieldPropertiesForm.cs,InitializeComponent,The length of the statement  "            this.dgvReplacementList.ColumnHeadersHeightSizeMode = System.Windows.Forms.DataGridViewColumnHeadersHeightSizeMode.AutoSize; " is 124.
Long Statement,OpenCBS.GUI.Login,LoginForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Login\LoginForm.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(LoginForm)); " is 129.
Long Statement,OpenCBS.GUI.Report_Browser,ReportLoadingProgressForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Report Browser\ReportLoadingProgressForm.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(ReportLoadingProgressForm)); " is 145.
Long Statement,OpenCBS.GUI.Report_Browser,RepaymentCollectionSheetForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Report Browser\RepaymentCollectionSheetForm.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(RepaymentCollectionSheetForm)); " is 148.
Long Statement,OpenCBS.GUI.Report_Browser,RepaymentCollectionSheetForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Report Browser\RepaymentCollectionSheetForm.cs,InitializeComponent,The length of the statement  "            this.dtTo.CustomFormat = ((OpenCBS.Shared.Settings.ApplicationSettings)(resources.GetObject("resource1"))).SHORT_DATE_FORMAT; " is 125.
Long Statement,OpenCBS.GUI.TellerManagement,FrmOpenCloseTeller,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\TellerManagement\FrmOpenCloseTeller.cs,btnConfirm_Click,The length of the statement  "                    foreach (Teller teller in ServicesProvider.GetInstance().GetTellerServices().FindAllNonDeletedTellersOfUser(User.CurrentUser)) " is 126.
Long Statement,OpenCBS.GUI.TellerManagement,FrmOpenCloseTeller,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\TellerManagement\FrmOpenCloseTeller.cs,cmbTellers_SelectedValueChanged,The length of the statement  "                foreach (Teller teller in ServicesProvider.GetInstance().GetTellerServices().FindAllNonDeletedTellersOfUser(User.CurrentUser)) " is 126.
Long Statement,OpenCBS.GUI.TellerManagement,FrmOpenCloseTeller,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\TellerManagement\FrmOpenCloseTeller.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(FrmOpenCloseTeller)); " is 138.
Long Statement,OpenCBS.GUI.TellerManagement,FrmTellerOperation,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\TellerManagement\FrmTellerOperation.cs,InitializeTeller,The length of the statement  "            List<Teller> tellers = ServicesProvider.GetInstance().GetTellerServices().FindAllNonDeletedTellersOfBranch(cmbBranch.SelectedItem as Branch); " is 141.
Long Statement,OpenCBS.GUI.TellerManagement,FrmTellerOperation,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\TellerManagement\FrmTellerOperation.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(FrmTellerOperation)); " is 138.
Long Statement,OpenCBS.GUI.Tools,PasswordForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Tools\PasswordForm.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(PasswordForm)); " is 132.
Long Statement,OpenCBS.GUI.Tools,frmProgress,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Tools\frmProgress.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(frmProgress)); " is 131.
Long Statement,OpenCBS.GUI.Tools,frmProgress,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Tools\frmProgress.cs,InitializeComponent,The length of the statement  "            this.progressBar1.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(64))))' ((int)(((byte)(0))))); " is 127.
Long Statement,OpenCBS.GUI.Tools,frmProgress,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Tools\frmProgress.cs,InitializeComponent,The length of the statement  "            this.backgroundWorker.RunWorkerCompleted += new System.ComponentModel.RunWorkerCompletedEventHandler(this.backgroundWorker_RunWorkerCompleted); " is 143.
Long Statement,OpenCBS.GUI.Tools,FrmSaveFile,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Tools\frmSaveFile.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(FrmSaveFile)); " is 131.
Long Statement,OpenCBS.GUI.Tools,ShowPictureForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Tools\ShowPictureForm.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(ShowPictureForm)); " is 135.
Long Statement,OpenCBS.GUI.Tools,ShowPictureForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Tools\ShowPictureForm.cs,InitializeComponent,The length of the statement  "            this.tableLayoutPanel1.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(81))))' ((int)(((byte)(152))))); " is 134.
Long Statement,OpenCBS.GUI.Tools,OMonthCalendar,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Tools\OMonthCalendar.cs,OnPaint,The length of the statement  "                    while ((HitTest(25' lastWeekPosition).HitArea != HitArea.NextMonthDate && HitTest(25' lastWeekPosition).HitArea != HitArea.Date) && lastWeekPosition >= 0) " is 154.
Long Statement,OpenCBS.GUI.Tools,OMonthCalendar,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Tools\OMonthCalendar.cs,DrawCell,The length of the statement  "                TextRenderer.DrawText(graphics' visDate.Day.ToString()' textFont' fillRect' Color.FromArgb(255' 128' 0' 0)' TextFormatFlags.HorizontalCenter | TextFormatFlags.VerticalCenter); " is 175.
Long Statement,OpenCBS.GUI.UserControl,EconomicActivityControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\EconomicActivityControl.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(EconomicActivityControl)); " is 143.
Long Statement,OpenCBS.GUI.UserControl,PrintButton,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\PrintButton.cs,LoadReports,The length of the statement  "                ToolStripMenuItem item = new ToolStripMenuItem(MultiLanguageStrings.GetString(OpenCBS.MultiLanguageRessources.Ressource.PrintButton' "noAvailableReportsCaption.Text")); " is 168.
Long Statement,OpenCBS.GUI.UserControl,SweetBaseForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\SweetBaseForm.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(SweetBaseForm)); " is 133.
Long Statement,OpenCBS.GUI.UserControl,CorporateUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CorporateUserControl.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(CorporateUserControl)); " is 140.
Long Statement,OpenCBS.GUI.UserControl,CorporateUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CorporateUserControl.cs,InitializeComponent,The length of the statement  "            this.savingsListUserControl1.AddSelectedSaving += new System.EventHandler(this.SavingsListUserControl1AddSelectedSaving); " is 121.
Long Statement,OpenCBS.GUI.UserControl,CorporateUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CorporateUserControl.cs,InitializeComponent,The length of the statement  "            this.savingsListUserControl1.ViewSelectedSaving += new System.EventHandler(this.SavingsListUserControl1ViewSelectedSaving); " is 123.
Long Statement,OpenCBS.GUI.UserControl,CorporateUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CorporateUserControl.cs,InitializeComponent,The length of the statement  "            this.eacCorporate.EconomicActivityChange += new System.EventHandler<OpenCBS.GUI.UserControl.EconomicActivtyEventArgs>(this.EacCorporateEconomicActivityChange); " is 159.
Long Statement,OpenCBS.GUI.UserControl,CorporateUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CorporateUserControl.cs,InitializeComponent,The length of the statement  "            this.pictureBox2.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(224))))' ((int)(((byte)(224))))' ((int)(((byte)(224))))); " is 131.
Long Statement,OpenCBS.GUI.UserControl,CorporateUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CorporateUserControl.cs,InitializeComponent,The length of the statement  "            this.pictureBox1.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(224))))' ((int)(((byte)(224))))' ((int)(((byte)(224))))); " is 131.
Long Statement,OpenCBS.GUI.UserControl,ElemMvtUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\ElemMvtUserControl.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(ElemMvtUserControl)); " is 138.
Long Statement,OpenCBS.GUI.UserControl,ElemMvtUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\ElemMvtUserControl.cs,InitializeComponent,The length of the statement  "            this.cbCurrencies.SelectionChangeCommitted += new System.EventHandler(this.comboBoxCurrencies_SelectionChangeCommitted); " is 120.
Long Statement,OpenCBS.GUI.UserControl,ElemMvtUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\ElemMvtUserControl.cs,Save,The length of the statement  "                ServicesProvider.GetInstance().GetEventProcessorServices().LogUser(OUserEvents.UserManualEntryEvent' txbDescription.Text' User.CurrentUser.Id); " is 143.
Long Statement,OpenCBS.GUI.UserControl,GroupUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\GroupUserControl.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(GroupUserControl)); " is 136.
Long Statement,OpenCBS.GUI.UserControl,GroupUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\GroupUserControl.cs,InitializeComponent,The length of the statement  "            this.tabControlGroupInfo.SelectedIndexChanged += new System.EventHandler(this.tabControlGroupInfo_SelectedIndexChanged); " is 120.
Long Statement,OpenCBS.GUI.UserControl,GroupUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\GroupUserControl.cs,InitializeComponent,The length of the statement  "            this.savingsListUserControl1.AddSelectedSaving += new System.EventHandler(this.savingsListUserControl1_AddSelectedSaving); " is 122.
Long Statement,OpenCBS.GUI.UserControl,GroupUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\GroupUserControl.cs,InitializeComponent,The length of the statement  "            this.savingsListUserControl1.ViewSelectedSaving += new System.EventHandler(this.savingsListUserControl1_ViewSelectedSaving); " is 124.
Long Statement,OpenCBS.GUI.UserControl,GroupUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\GroupUserControl.cs,InitializeComponent,The length of the statement  "            this.imageListTab.ImageStream = ((System.Windows.Forms.ImageListStreamer)(resources.GetObject("imageListTab.ImageStream"))); " is 124.
Long Statement,OpenCBS.GUI.UserControl,GroupUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\GroupUserControl.cs,InitializeComponent,The length of the statement  "            this.dateTimePickerDateOfEstablishment.ValueChanged += new System.EventHandler(this.dateTimePickerDateOfEstablishment_ValueChanged); " is 132.
Long Statement,OpenCBS.GUI.UserControl,GroupUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\GroupUserControl.cs,InitializeComponent,The length of the statement  "            this.pictureBox2.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(224))))' ((int)(((byte)(224))))' ((int)(((byte)(224))))); " is 131.
Long Statement,OpenCBS.GUI.UserControl,GroupUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\GroupUserControl.cs,InitializeComponent,The length of the statement  "            this.pictureBox1.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(224))))' ((int)(((byte)(224))))' ((int)(((byte)(224))))); " is 131.
Long Statement,OpenCBS.GUI.UserControl,GroupUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\GroupUserControl.cs,UpdateMembersShareAmount,The length of the statement  "                OCurrency amount = ServicesProvider.GetInstance().GetClientServices().CalculateLoanShareAmount(group.GetNumberOfMembers' loanAmount); " is 133.
Long Statement,OpenCBS.GUI.UserControl,ListViewEx,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\ListViewEx.cs,InitializeComponent,The length of the statement  "           System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(ListViewEx)); " is 130.
Long Statement,OpenCBS.GUI.UserControl,PersonUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\PersonUserControl.cs,InitializeUserControlsAddress,The length of the statement  "            addressUserControlFirst.TextBoxHomePhoneText = MultiLanguageStrings.GetString(Ressource.PersonUserControl' "Homephone.Text"); " is 125.
Long Statement,OpenCBS.GUI.UserControl,PersonUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\PersonUserControl.cs,InitializeUserControlsAddress,The length of the statement  "            addressUserControlFirst.TextBoxPersonalPhoneText = MultiLanguageStrings.GetString(Ressource.PersonUserControl' "Personalphone.Text"); " is 133.
Long Statement,OpenCBS.GUI.UserControl,PersonUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\PersonUserControl.cs,dateTimePickerDateOfBirth_ValueChanged,The length of the statement  "            if ((DateTime.Now.Month - dateTimePickerDateOfBirth.Value.Month == 0 && DateTime.Now.Day - dateTimePickerDateOfBirth.Value.Day < 0) " is 131.
Long Statement,OpenCBS.GUI.UserControl,PersonUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\PersonUserControl.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(PersonUserControl)); " is 137.
Long Statement,OpenCBS.GUI.UserControl,PersonUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\PersonUserControl.cs,InitializeComponent,The length of the statement  "            this.buttonProjectAddGuarantee.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56))))); " is 141.
Long Statement,OpenCBS.GUI.UserControl,PersonUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\PersonUserControl.cs,InitializeComponent,The length of the statement  "            this.buttonProjectViewContract.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56))))); " is 141.
Long Statement,OpenCBS.GUI.UserControl,PersonUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\PersonUserControl.cs,InitializeComponent,The length of the statement  "            this.buttonProjectAddContract.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56))))); " is 140.
Long Statement,OpenCBS.GUI.UserControl,PersonUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\PersonUserControl.cs,InitializeComponent,The length of the statement  "            this.imageListEconomicInfo.ImageStream = ((System.Windows.Forms.ImageListStreamer)(resources.GetObject("imageListEconomicInfo.ImageStream"))); " is 142.
Long Statement,OpenCBS.GUI.UserControl,PersonUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\PersonUserControl.cs,InitializeComponent,The length of the statement  "            this.button1.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56))))); " is 123.
Long Statement,OpenCBS.GUI.UserControl,PersonUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\PersonUserControl.cs,InitializeComponent,The length of the statement  "            this.button2.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56))))); " is 123.
Long Statement,OpenCBS.GUI.UserControl,PersonUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\PersonUserControl.cs,InitializeComponent,The length of the statement  "            this.button3.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56))))); " is 123.
Long Statement,OpenCBS.GUI.UserControl,PersonUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\PersonUserControl.cs,InitializeComponent,The length of the statement  "            this.button4.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56))))); " is 123.
Long Statement,OpenCBS.GUI.UserControl,PersonUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\PersonUserControl.cs,InitializeComponent,The length of the statement  "            this.button5.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56))))); " is 123.
Long Statement,OpenCBS.GUI.UserControl,PersonUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\PersonUserControl.cs,InitializeComponent,The length of the statement  "            this.button6.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56))))); " is 123.
Long Statement,OpenCBS.GUI.UserControl,PersonUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\PersonUserControl.cs,InitializeComponent,The length of the statement  "            this.button7.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56))))); " is 123.
Long Statement,OpenCBS.GUI.UserControl,PersonUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\PersonUserControl.cs,InitializeComponent,The length of the statement  "            this.button8.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56))))); " is 123.
Long Statement,OpenCBS.GUI.UserControl,PersonUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\PersonUserControl.cs,InitializeComponent,The length of the statement  "            this.button9.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56))))); " is 123.
Long Statement,OpenCBS.GUI.UserControl,PersonUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\PersonUserControl.cs,InitializeComponent,The length of the statement  "            this.button10.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56))))); " is 124.
Long Statement,OpenCBS.GUI.UserControl,PersonUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\PersonUserControl.cs,InitializeComponent,The length of the statement  "            this.button11.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56))))); " is 124.
Long Statement,OpenCBS.GUI.UserControl,PersonUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\PersonUserControl.cs,InitializeComponent,The length of the statement  "            this.button12.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56))))); " is 124.
Long Statement,OpenCBS.GUI.UserControl,PersonUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\PersonUserControl.cs,InitializeComponent,The length of the statement  "            this.button13.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56))))); " is 124.
Long Statement,OpenCBS.GUI.UserControl,PersonUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\PersonUserControl.cs,InitializeComponent,The length of the statement  "            this.tabControlEconomicInfo.SelectedIndexChanged += new System.EventHandler(this.tabControlEconomicInfo_SelectedIndexChanged); " is 126.
Long Statement,OpenCBS.GUI.UserControl,PersonUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\PersonUserControl.cs,InitializeComponent,The length of the statement  "            this.eacPerson.EconomicActivityChange += new System.EventHandler<OpenCBS.GUI.UserControl.EconomicActivtyEventArgs>(this.EacPersonActivityChange); " is 145.
Long Statement,OpenCBS.GUI.UserControl,PersonUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\PersonUserControl.cs,InitializeComponent,The length of the statement  "            this.changePhotoLinkLabel2.LinkClicked += new System.Windows.Forms.LinkLabelLinkClickedEventHandler(this.linkLabel1_LinkClicked); " is 129.
Long Statement,OpenCBS.GUI.UserControl,PersonUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\PersonUserControl.cs,InitializeComponent,The length of the statement  "            this.changePhotoLinkLabel.LinkClicked += new System.Windows.Forms.LinkLabelLinkClickedEventHandler(this.linkLabel1_LinkClicked); " is 128.
Long Statement,OpenCBS.GUI.UserControl,PersonUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\PersonUserControl.cs,InitializeComponent,The length of the statement  "            this.pictureBox2.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(224))))' ((int)(((byte)(224))))' ((int)(((byte)(224))))); " is 131.
Long Statement,OpenCBS.GUI.UserControl,PersonUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\PersonUserControl.cs,InitializeComponent,The length of the statement  "            this.pictureBox.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(224))))' ((int)(((byte)(224))))' ((int)(((byte)(224))))); " is 130.
Long Statement,OpenCBS.GUI.UserControl,SavingsListUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\SavingsListUserControl.cs,DisplaySavings,The length of the statement  "                totalItem.SubItems.Add(totalBalanceInPivot.GetFormatedValue(ServicesProvider.GetInstance().GetCurrencyServices().GetPivot().UseCents && usedCents)); " is 148.
Long Statement,OpenCBS.GUI.UserControl,SavingsListUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\SavingsListUserControl.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(SavingsListUserControl)); " is 142.
Long Statement,OpenCBS.GUI.UserControl,SimilarIDForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\SimilarIDForm.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(SimilarIDForm)); " is 133.
Long Statement,OpenCBS.GUI.UserControl,SimilarIDForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\SimilarIDForm.cs,InitializeComponent,The length of the statement  "            this.label1.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(64))))' ((int)(((byte)(0))))); " is 121.
Long Statement,OpenCBS.GUI.UserControl,SweetForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\SweetForm.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(SweetForm)); " is 129.
Long Statement,OpenCBS.GUI.UserControl,SweetForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\SweetForm.cs,InitializeComponent,The length of the statement  "            this.tabHeader.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(81))))' ((int)(((byte)(152))))); " is 126.
Long Statement,OpenCBS.GUI.UserControl,SweetForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\SweetForm.cs,InitializeComponent,The length of the statement  "            this.lblTitle.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(81))))' ((int)(((byte)(152))))); " is 125.
Long Statement,OpenCBS.GUI.UserControl,SweetOkCancelForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\SweetOkCancelForm.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(SweetOkCancelForm)); " is 137.
Long Statement,OpenCBS.GUI.UserControl,TextDecimalNumericUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\TextDecimalNumericUserControl.cs,textBoxNumeric_KeyPress,The length of the statement  "                ((char)Keys.C | (char)Keys.ControlKey)) || (e.KeyChar.ToString() == NumberFormatInfo.CurrentInfo.NumberDecimalSeparator)) " is 121.
Long Statement,OpenCBS.GUI.UserControl,WriteOffOkCancelForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\WriteOffOkCancelForm.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(WriteOffOkCancelForm)); " is 140.
Long Statement,OpenCBS.GUI.Products,FrmAddCollateralProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddCollateralProduct.cs,SetAddNewProductMode,The length of the statement  "                CustomProperty propertyDesc = new CustomProperty(GetString("propertyDescription")' GetString("propertyDescriptionDescription")' " is 127.
Long Statement,OpenCBS.GUI.Products,FrmAddCollateralProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddCollateralProduct.cs,InitializeProductValues,The length of the statement  "                    myProp = new CustomProperty(property.Name' property.Description' property.Collection' typeof(List<string>)' true' true); " is 120.
Long Statement,OpenCBS.GUI.Products,FrmAddCollateralProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddCollateralProduct.cs,InitializeProductValues,The length of the statement  "                    myProp = new CustomProperty(property.Name' property.Description' GetString("type"+property.Type)' typeof(string)' true' true); " is 126.
Long Statement,OpenCBS.GUI.Products,FrmAddCollateralProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddCollateralProduct.cs,buttonDeleteProperty_Click,The length of the statement  "                //if (propertyGrid.SelectedGridItem.Label.Equals("Amount") || propertyGrid.SelectedGridItem.Label.Equals("Description")) " is 120.
Long Statement,OpenCBS.GUI.Products,FrmAddCollateralProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddCollateralProduct.cs,buttonAddProperty_Click,The length of the statement  "                var type = (OCollateralPropertyTypes) Enum.Parse(typeof(OCollateralPropertyTypes)' GetString(comboBoxPropertyTypes.Text)' true); " is 128.
Long Statement,OpenCBS.GUI.Products,FrmAddCollateralProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddCollateralProduct.cs,buttonAddProperty_Click,The length of the statement  "                    myProp = new CustomProperty(textBoxPropertyName.Text' textBoxPropertyDesc.Text' list' typeof(List<string>)' true' true); " is 120.
Long Statement,OpenCBS.GUI.Products,FrmAddCollateralProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddCollateralProduct.cs,buttonAddProperty_Click,The length of the statement  "                    myProp = new CustomProperty(textBoxPropertyName.Text' textBoxPropertyDesc.Text' GetString("type"+type)' typeof(string)' true' true); " is 132.
Long Statement,OpenCBS.GUI.Products,FrmAddCollateralProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddCollateralProduct.cs,buttonAddProperty_Click,The length of the statement  "                        property.Type = (OCollateralPropertyTypes)Enum.Parse(typeof(OCollateralPropertyTypes)' GetString(comboBoxPropertyTypes.Text)' true); " is 132.
Long Statement,OpenCBS.GUI.Products,FrmAddCollateralProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddCollateralProduct.cs,buttonSave_Click,The length of the statement  "                            //collateralProperty.Type = (OCollateralPropertyTypes) Enum.Parse(typeof(OCollateralPropertyTypes)' property.Value.ToString()' true); " is 133.
Long Statement,OpenCBS.GUI.Products,FrmAddCollateralProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddCollateralProduct.cs,comboBoxPropertyTypes_SelectedValueChanged,The length of the statement  "            groupBoxCollectionDetails.Enabled = GetString(comboBoxPropertyTypes.Text) == OCollateralPropertyTypes.Collection.ToString(); " is 124.
Long Statement,OpenCBS.GUI.Products,FrmAddCollateralProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddCollateralProduct.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(FrmAddCollateralProduct)); " is 143.
Long Statement,OpenCBS.GUI.Products,FrmAddCollateralProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddCollateralProduct.cs,InitializeComponent,The length of the statement  "            this.comboBoxPropertyTypes.SelectedValueChanged += new System.EventHandler(this.comboBoxPropertyTypes_SelectedValueChanged); " is 124.
Long Statement,OpenCBS.GUI.Products,FrmAvalaibleCollateralProducts,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAvalaibleCollateralProducts.cs,InitializePackages,The length of the statement  "            List<CollateralProduct> productList = ServicesProvider.GetInstance().GetCollateralProductServices().SelectAllCollateralProducts(_showDeletedPackage); " is 149.
Long Statement,OpenCBS.GUI.Products,FrmAvalaibleCollateralProducts,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAvalaibleCollateralProducts.cs,buttonEditProduct_Click,The length of the statement  "                    MultiLanguageStrings.GetString(Ressource.PackagesForm' "title.Text")' MessageBoxButtons.OK' MessageBoxIcon.Information); " is 120.
Long Statement,OpenCBS.GUI.Products,FrmAvalaibleCollateralProducts,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAvalaibleCollateralProducts.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(FrmAvalaibleCollateralProducts)); " is 150.
Long Statement,OpenCBS.GUI.Products,FrmAvalaibleCollateralProducts,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAvalaibleCollateralProducts.cs,InitializeComponent,The length of the statement  "            this.checkBoxShowDeletedProduct.CheckedChanged += new System.EventHandler(this.checkBoxShowDeletedProduct_CheckedChanged); " is 122.
Long Statement,OpenCBS.GUI.Products,FrmAvailableSavingProducts,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAvailableSavingProducts.Designer.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(FrmAvailableSavingProducts)); " is 146.
Long Statement,OpenCBS.GUI.Products,FrmAvailableSavingProducts,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAvailableSavingProducts.Designer.cs,InitializeComponent,The length of the statement  "            this.checkBoxShowDeletedProduct.CheckedChanged += new System.EventHandler(this.checkBoxShowDeletedProduct_CheckedChanged); " is 122.
Long Statement,OpenCBS.GUI.Products,FrmAvailableSavingProducts,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAvailableSavingProducts.Designer.cs,InitializeComponent,The length of the statement  "            this.savingBookProductToolStripMenuItem.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56))))); " is 150.
Long Statement,OpenCBS.GUI.Products,FrmAvailableSavingProducts,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAvailableSavingProducts.Designer.cs,InitializePackages,The length of the statement  "                lvi.SubItems.Add(s.InterestRate == null ? String.Format("{0:N2}% - {1:N2}%"' s.InterestRateMin * 100' s.InterestRateMax * 100) : String.Format("{0:N2}%"' s.InterestRate * 100)); " is 177.
Long Statement,OpenCBS.GUI.Products,FrmAvailableSavingProducts,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAvailableSavingProducts.Designer.cs,buttonDeletePackage_Click,The length of the statement  "                                MultiLanguageStrings.GetString(Ressource.PackagesForm' "title.Text")' MessageBoxButtons.OK' MessageBoxIcon.Information); " is 120.
Long Statement,OpenCBS.GUI.Products,FrmAvailableSavingProducts,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAvailableSavingProducts.Designer.cs,EditProduct,The length of the statement  "                                MultiLanguageStrings.GetString(Ressource.PackagesForm' "title.Text")' MessageBoxButtons.OK' MessageBoxIcon.Information); " is 120.
Long Statement,OpenCBS.GUI.Products,FrmAvalaibleLoanProducts,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAvalaibleLoanProducts.Designer.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(FrmAvalaibleLoanProducts)); " is 144.
Long Statement,OpenCBS.GUI.Products,FrmAvalaibleLoanProducts,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAvalaibleLoanProducts.Designer.cs,InitializeComponent,The length of the statement  "            this.checkBoxShowDeletedProduct.CheckedChanged += new System.EventHandler(this.checkBoxShowDeletedProduct_CheckedChanged); " is 122.
Long Statement,OpenCBS.GUI.Products,FrmAvalaibleLoanProducts,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAvalaibleLoanProducts.Designer.cs,InitializePackages,The length of the statement  "            List<LoanProduct> packageList = ServicesProvider.GetInstance().GetProductServices().FindAllPackages(_showDeletedPackage' OClientTypes.All); " is 139.
Long Statement,OpenCBS.GUI.Products,FrmAvalaibleLoanProducts,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAvalaibleLoanProducts.Designer.cs,InitializePackages,The length of the statement  "                lvi.SubItems.Add(p.InterestRate == null ? String.Format("{0:N2}% - {1:N2}%"' p.InterestRateMin * 100' p.InterestRateMax * 100) : String.Format("{0:N2}%"' p.InterestRate * 100)); " is 177.
Long Statement,OpenCBS.GUI.Products,FrmAddLoanProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddLoanProduct.Designer.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(FrmAddLoanProduct)); " is 137.
Long Statement,OpenCBS.GUI.Products,FrmAddLoanProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddLoanProduct.Designer.cs,InitializeComponent,The length of the statement  "            this.comboBoxLoanCyclesName.SelectedIndexChanged += new System.EventHandler(this.comboBoxLoanCyclesName_SelectedIndexChanged); " is 126.
Long Statement,OpenCBS.GUI.Products,FrmAddLoanProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddLoanProduct.Designer.cs,InitializeComponent,The length of the statement  "            this.comboBoxFundingLine.SelectedIndexChanged += new System.EventHandler(this.comboBoxFundingLine_SelectedIndexChanged); " is 120.
Long Statement,OpenCBS.GUI.Products,FrmAddLoanProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddLoanProduct.Designer.cs,InitializeComponent,The length of the statement  "            this.radioButtonChargeInterestNo.CheckedChanged += new System.EventHandler(this.radioButtonChargeInterestNo_CheckedChanged); " is 124.
Long Statement,OpenCBS.GUI.Products,FrmAddLoanProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddLoanProduct.Designer.cs,InitializeComponent,The length of the statement  "            this.radioButtonChargeInterestYes.CheckedChanged += new System.EventHandler(this.radioButtonChargeInterestYes_CheckedChanged); " is 126.
Long Statement,OpenCBS.GUI.Products,FrmAddLoanProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddLoanProduct.Designer.cs,InitializeComponent,The length of the statement  "            this.cmbInterestRateType.SelectedIndexChanged += new System.EventHandler(this.cmbInterestRateType_SelectedIndexChanged); " is 120.
Long Statement,OpenCBS.GUI.Products,FrmAddLoanProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddLoanProduct.Designer.cs,InitializeComponent,The length of the statement  "            this.cmbInterestRateType.SelectionChangeCommitted += new System.EventHandler(this.comboBoxInstallmentType_SelectionChangeCommitted); " is 132.
Long Statement,OpenCBS.GUI.Products,FrmAddLoanProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddLoanProduct.Designer.cs,InitializeComponent,The length of the statement  "            this.textBoxGracePeriodMax.KeyPress += new System.Windows.Forms.KeyPressEventHandler(this.textBoxGracePeriodMin_KeyPress); " is 122.
Long Statement,OpenCBS.GUI.Products,FrmAddLoanProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddLoanProduct.Designer.cs,InitializeComponent,The length of the statement  "            this.textBoxGracePeriodMin.KeyPress += new System.Windows.Forms.KeyPressEventHandler(this.textBoxGracePeriodMin_KeyPress); " is 122.
Long Statement,OpenCBS.GUI.Products,FrmAddLoanProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddLoanProduct.Designer.cs,InitializeComponent,The length of the statement  "            this.comboBoxInstallmentType.SelectionChangeCommitted += new System.EventHandler(this.comboBoxInstallmentType_SelectionChangeCommitted); " is 136.
Long Statement,OpenCBS.GUI.Products,FrmAddLoanProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddLoanProduct.Designer.cs,InitializeComponent,The length of the statement  "            this.textBoxAnticipatedPartialRepaimentMax.TextChanged += new System.EventHandler(this.textBoxBoxAnticipatedPartialRepaimentMax_TextChanged); " is 141.
Long Statement,OpenCBS.GUI.Products,FrmAddLoanProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddLoanProduct.Designer.cs,InitializeComponent,The length of the statement  "            this.textBoxAnticipatedPartialRepaiment.TextChanged += new System.EventHandler(this.textBoxAnticipatedPartialRepaiment_TextChanged); " is 132.
Long Statement,OpenCBS.GUI.Products,FrmAddLoanProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddLoanProduct.Designer.cs,InitializeComponent,The length of the statement  "            this.textBoxAnticipatedPartialRepaimentMin.TextChanged += new System.EventHandler(this.textBoxAnticipatedPartialRepaimentMin_TextChanged); " is 138.
Long Statement,OpenCBS.GUI.Products,FrmAddLoanProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddLoanProduct.Designer.cs,InitializeComponent,The length of the statement  "            this.rbPartialRemainingOLB.CheckedChanged += new System.EventHandler(this.radioButtonPartialRemainingOLB_CheckedChanged); " is 121.
Long Statement,OpenCBS.GUI.Products,FrmAddLoanProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddLoanProduct.Designer.cs,InitializeComponent,The length of the statement  "            this.rbPartialRemainingInterest.CheckedChanged += new System.EventHandler(this.radioButtonPartialRemainingInterest_TextChanged); " is 128.
Long Statement,OpenCBS.GUI.Products,FrmAddLoanProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddLoanProduct.Designer.cs,InitializeComponent,The length of the statement  "            this.rbPartialRemainingInterest.TextChanged += new System.EventHandler(this.radioButtonPartialRemainingInterest_TextChanged); " is 125.
Long Statement,OpenCBS.GUI.Products,FrmAddLoanProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddLoanProduct.Designer.cs,InitializeComponent,The length of the statement  "            this.textBoxAnticipatedRepaymentPenaltiesMax.TextChanged += new System.EventHandler(this.textBoxAnticipatedRepaymentPenaltiesMax_TextChanged); " is 142.
Long Statement,OpenCBS.GUI.Products,FrmAddLoanProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddLoanProduct.Designer.cs,InitializeComponent,The length of the statement  "            this.textBoxAnticipatedRepaymentPenalties.TextChanged += new System.EventHandler(this.textBoxAnticipatedRepaymentPenalties_TextChanged); " is 136.
Long Statement,OpenCBS.GUI.Products,FrmAddLoanProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddLoanProduct.Designer.cs,InitializeComponent,The length of the statement  "            this.textBoxAnticipatedRepaymentPenaltiesMin.TextChanged += new System.EventHandler(this.textBoxAnticipatedRepaymentPenaltiesMin_TextChanged); " is 142.
Long Statement,OpenCBS.GUI.Products,FrmAddLoanProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddLoanProduct.Designer.cs,InitializeComponent,The length of the statement  "            this.lvEntryFees.SubItemEndEditing += new OpenCBS.GUI.UserControl.SubItemEndEditingEventHandler(this.lvEntryFees_SubItemEndEditing); " is 132.
Long Statement,OpenCBS.GUI.Products,FrmAddLoanProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddLoanProduct.Designer.cs,InitializeComponent,The length of the statement  "            this.textBoxExoticInstallmentInterest.TextChanged += new System.EventHandler(this.textBoxExoticInstallmentInterest_TextChanged); " is 128.
Long Statement,OpenCBS.GUI.Products,FrmAddLoanProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddLoanProduct.Designer.cs,InitializeComponent,The length of the statement  "            this.textBoxExoticInstallmentPrincipal.TextChanged += new System.EventHandler(this.textBoxExoticInstallmentPrincipal_TextChanged); " is 130.
Long Statement,OpenCBS.GUI.Products,FrmAddLoanProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddLoanProduct.Designer.cs,InitializeComponent,The length of the statement  "            this.listViewExoticInstallments.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(80))))' ((int)(((byte)(56))))); " is 142.
Long Statement,OpenCBS.GUI.Products,FrmAddLoanProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddLoanProduct.Designer.cs,InitializeComponent,The length of the statement  "            this.listViewExoticInstallments.SelectedIndexChanged += new System.EventHandler(this.listViewExoticInstallments_SelectedIndexChanged); " is 134.
Long Statement,OpenCBS.GUI.Products,FrmAddLoanProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddLoanProduct.Designer.cs,InitializeComponent,The length of the statement  "            this.comboBoxExoticProduct.SelectedIndexChanged += new System.EventHandler(this.comboBoxExoticProduct_SelectedIndexChanged); " is 124.
Long Statement,OpenCBS.GUI.Products,FrmAddLoanProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddLoanProduct.Designer.cs,InitializeComponent,The length of the statement  "            this.checkBoxUseExceptionalInstallmen.CheckedChanged += new System.EventHandler(this.checkBoxUseExceptionalInstallmen_CheckedChanged); " is 134.
Long Statement,OpenCBS.GUI.Products,FrmAddLoanProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddLoanProduct.Designer.cs,InitializeComponent,The length of the statement  "            this.textBoxNumOfDrawings.KeyPress += new System.Windows.Forms.KeyPressEventHandler(this.textBoxNumOfDrawings_KeyPress); " is 120.
Long Statement,OpenCBS.GUI.Products,FrmAddLoanProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddLoanProduct.Designer.cs,InitializeComponent,The length of the statement  "            this.cbUseCompulsorySavings.CheckedChanged += new System.EventHandler(this.checkBoxUseCompulsorySavings_CheckedChanged); " is 120.
Long Statement,OpenCBS.GUI.Products,FrmAddLoanProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddLoanProduct.Designer.cs,InitializeComponent,The length of the statement  "            this.tbCreditInsuranceMax.KeyPress += new System.Windows.Forms.KeyPressEventHandler(this.textBoxGracePeriodMin_KeyPress); " is 121.
Long Statement,OpenCBS.GUI.Products,FrmAddLoanProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddLoanProduct.Designer.cs,InitializeComponent,The length of the statement  "            this.tbCreditInsuranceMin.KeyPress += new System.Windows.Forms.KeyPressEventHandler(this.textBoxGracePeriodMin_KeyPress); " is 121.
Long Statement,OpenCBS.GUI.Products,FrmAddLoanProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddLoanProduct.Designer.cs,InitializeComboBoxExoticProduct,The length of the statement  "            List<ExoticInstallmentsTable> exoticProductList = ServicesProvider.GetInstance().GetProductServices().FindAllExoticProducts(); " is 126.
Long Statement,OpenCBS.GUI.Products,FrmAddLoanProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddLoanProduct.Designer.cs,InitializeComboBoxFundingLine,The length of the statement  "            FundingLine line = new FundingLine { Name = MultiLanguageStrings.GetString(Ressource.FrmAddLoanProduct' "Fundingline.Text")' Id = 0 }; " is 134.
Long Statement,OpenCBS.GUI.Products,FrmAddLoanProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddLoanProduct.Designer.cs,InitializeComboBoxCurrencies,The length of the statement  "            Currency line = new Currency { Name = MultiLanguageStrings.GetString(Ressource.FrmAddLoanProduct' "Currency.Text")' Id = 0 }; " is 125.
Long Statement,OpenCBS.GUI.Products,FrmAddLoanProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddLoanProduct.Designer.cs,buttonSave_Click,The length of the statement  "                        ServicesProvider.GetInstance().GetProductServices().ParseFieldsAndCheckErrors(_product' _useExoticProduct' _checkBoxCounter); " is 125.
Long Statement,OpenCBS.GUI.Products,FrmAddLoanProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddLoanProduct.Designer.cs,buttonSave_Click,The length of the statement  "                        ServicesProvider.GetInstance().GetProductServices().ParseFieldsAndCheckErrors(_product' _useExoticProduct' _checkBoxCounter); " is 125.
Long Statement,OpenCBS.GUI.Products,FrmAddLoanProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddLoanProduct.Designer.cs,_CancelAmountCycles,The length of the statement  "            comboBoxLoanCyclesName.Text = MultiLanguageStrings.GetString(Ressource.FrmAddLoanProduct' "messageSelectAmountCycles.Text"); " is 124.
Long Statement,OpenCBS.GUI.Products,FrmAddLoanProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddLoanProduct.Designer.cs,_InitializeListViewExoticInstallments,The length of the statement  "            labelTotalInterest.Text = _product.IsDeclining ? " - " : string.Format("{0} %"' pExoticProduct.SumOfInterestCoeff * 100); " is 121.
Long Statement,OpenCBS.GUI.Products,FrmAddLoanProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddLoanProduct.Designer.cs,comboBoxExoticProduct_SelectedIndexChanged,The length of the statement  "            groupBoxExoticInstallmentProperties.Text = MultiLanguageStrings.GetString(Ressource.FrmAddLoanProduct' "messageExoticInstallment.Text"); " is 136.
Long Statement,OpenCBS.GUI.Products,FrmAddLoanProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddLoanProduct.Designer.cs,listViewExoticInstallments_SelectedIndexChanged,The length of the statement  "                groupBoxExoticInstallmentProperties.Text = string.Format(MultiLanguageStrings.GetString(Ressource.FrmAddLoanProduct' "exoticInstallmentProperties.Text")' ((ExoticInstallment)listViewExoticInstallments.SelectedItems[0].Tag).Number); " is 231.
Long Statement,OpenCBS.GUI.Products,FrmAddLoanProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddLoanProduct.Designer.cs,buttonNewExoticProduct_Click,The length of the statement  "            groupBoxExoticInstallmentProperties.Text = MultiLanguageStrings.GetString(Ressource.FrmAddLoanProduct' "messageExoticInstallment.Text"); " is 136.
Long Statement,OpenCBS.GUI.Products,FrmAddLoanProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddLoanProduct.Designer.cs,tBInitialAmountMin_TextChanged,The length of the statement  "            _product.NonRepaymentPenaltiesMin.InitialAmount = ServicesHelper.ConvertStringToNullableDouble(tBInitialAmountMin.Text' true); " is 126.
Long Statement,OpenCBS.GUI.Products,FrmAddLoanProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddLoanProduct.Designer.cs,tBInitialAmountMax_TextChanged,The length of the statement  "            _product.NonRepaymentPenaltiesMax.InitialAmount = ServicesHelper.ConvertStringToNullableDouble(tBInitialAmountMax.Text' true); " is 126.
Long Statement,OpenCBS.GUI.Products,FrmAddLoanProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddLoanProduct.Designer.cs,tBInitialAmountValue_TextChanged,The length of the statement  "            _product.NonRepaymentPenalties.InitialAmount = ServicesHelper.ConvertStringToNullableDouble(tBInitialAmountValue.Text' true); " is 125.
Long Statement,OpenCBS.GUI.Products,FrmAddLoanProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddLoanProduct.Designer.cs,tBOverduePrincipalMin_TextChanged,The length of the statement  "            _product.NonRepaymentPenaltiesMin.OverDuePrincipal = ServicesHelper.ConvertStringToNullableDouble(tBOverduePrincipalMin.Text' true); " is 132.
Long Statement,OpenCBS.GUI.Products,FrmAddLoanProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddLoanProduct.Designer.cs,tBOverduePrincipalMax_TextChanged,The length of the statement  "            _product.NonRepaymentPenaltiesMax.OverDuePrincipal = ServicesHelper.ConvertStringToNullableDouble(tBOverduePrincipalMax.Text' true); " is 132.
Long Statement,OpenCBS.GUI.Products,FrmAddLoanProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddLoanProduct.Designer.cs,tBOverduePrincipalValue_TextChanged,The length of the statement  "            _product.NonRepaymentPenalties.OverDuePrincipal = ServicesHelper.ConvertStringToNullableDouble(tBOverduePrincipalValue.Text' true); " is 131.
Long Statement,OpenCBS.GUI.Products,FrmAddLoanProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddLoanProduct.Designer.cs,tBOverdueInterestMin_TextChanged,The length of the statement  "            _product.NonRepaymentPenaltiesMin.OverDueInterest = ServicesHelper.ConvertStringToNullableDouble(tBOverdueInterestMin.Text' true); " is 130.
Long Statement,OpenCBS.GUI.Products,FrmAddLoanProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddLoanProduct.Designer.cs,tBOverdueInterestMax_TextChanged,The length of the statement  "            _product.NonRepaymentPenaltiesMax.OverDueInterest = ServicesHelper.ConvertStringToNullableDouble(tBOverdueInterestMax.Text' true); " is 130.
Long Statement,OpenCBS.GUI.Products,FrmAddLoanProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddLoanProduct.Designer.cs,tBOverdueInterestValue_TextChanged,The length of the statement  "            _product.NonRepaymentPenalties.OverDueInterest = ServicesHelper.ConvertStringToNullableDouble(tBOverdueInterestValue.Text' true); " is 129.
Long Statement,OpenCBS.GUI.Products,FrmAddLoanProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddLoanProduct.Designer.cs,textBoxNumOfDrawings_KeyPress,The length of the statement  "                ((char)Keys.C | (char)Keys.ControlKey)) || (e.KeyChar.ToString() == NumberFormatInfo.CurrentInfo.NumberDecimalSeparator)) " is 121.
Long Statement,OpenCBS.GUI.Products,FrmAddLoanProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddLoanProduct.Designer.cs,GetEntryFeeFromListView,The length of the statement  "            decimal? min = string.IsNullOrEmpty(item.SubItems[IdxMin].Text) ? null : (decimal?)Convert.ToDecimal(item.SubItems[IdxMin].Text); " is 129.
Long Statement,OpenCBS.GUI.Products,FrmAddLoanProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddLoanProduct.Designer.cs,GetEntryFeeFromListView,The length of the statement  "            decimal? max = string.IsNullOrEmpty(item.SubItems[IdxMax].Text) ? null : (decimal?)Convert.ToDecimal(item.SubItems[IdxMax].Text); " is 129.
Long Statement,OpenCBS.GUI.Products,FrmAddLoanProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddLoanProduct.Designer.cs,GetEntryFeeFromListView,The length of the statement  "            decimal? v = string.IsNullOrEmpty(item.SubItems[IdxValue].Text) ? null : (decimal?)Convert.ToDecimal(item.SubItems[IdxValue].Text); " is 131.
Long Statement,OpenCBS.GUI.Products,FrmAddLoanProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddLoanProduct.Designer.cs,GetEntryFeeFromListView,The length of the statement  "            int? cycleId = string.IsNullOrEmpty(item.SubItems[IdxCycleId].Text) ? null : (int?)Convert.ToInt32(item.SubItems[IdxCycleId].Text); " is 131.
Long Statement,OpenCBS.GUI.Products,FrmAddLoanProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddLoanProduct.Designer.cs,lvEntryFees_SubItemEndEditing,The length of the statement  "            if (Convert.ToInt32(e.Item.SubItems[IdxIndex].Text) == lvEntryFees.Items.Count - 1 && e.SubItem != IdxIsRate && !string.IsNullOrEmpty(subItems[e.SubItem].Text)) " is 160.
Long Statement,OpenCBS.GUI.Products,FrmAddLoanProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddLoanProduct.Designer.cs,CheckListViewCorrectness,The length of the statement  "            decimal? min = string.IsNullOrEmpty(item.SubItems[IdxMin].Text) ? null : (decimal?)Convert.ToDecimal(item.SubItems[IdxMin].Text); " is 129.
Long Statement,OpenCBS.GUI.Products,FrmAddLoanProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddLoanProduct.Designer.cs,CheckListViewCorrectness,The length of the statement  "            decimal? max = string.IsNullOrEmpty(item.SubItems[IdxMax].Text) ? null : (decimal?)Convert.ToDecimal(item.SubItems[IdxMax].Text); " is 129.
Long Statement,OpenCBS.GUI.Products,FrmAddLoanProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddLoanProduct.Designer.cs,CheckListViewCorrectness,The length of the statement  "            decimal? v = string.IsNullOrEmpty(item.SubItems[IdxValue].Text) ? null : (decimal?)Convert.ToDecimal(item.SubItems[IdxValue].Text); " is 131.
Long Statement,OpenCBS.GUI.Products,FrmAddLoanProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddLoanProduct.Designer.cs,UpdateEntryFee,The length of the statement  "            int? cycleId = string.IsNullOrEmpty(lvEntryFees.Items[0].SubItems[IdxCycleId].Text) ? null : (int?)Convert.ToDecimal(lvEntryFees.Items[0].SubItems[IdxCycleId].Text); " is 165.
Long Statement,OpenCBS.GUI.Products,FrmAddLoanProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddLoanProduct.Designer.cs,swbtnEntryFeesAddCycle_Click,The length of the statement  "                ServicesProvider.GetInstance().GetProductServices().CheckIfEntryFeeCycleExists(_product' (int)nudEntryFeescycleFrom.Value); " is 123.
Long Statement,OpenCBS.GUI.MFI,frmMFI,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\MFI\frmMFI.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(frmMFI)); " is 126.
Long Statement,OpenCBS.GUI.Projets,SearchProjectForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Search\SearchProjectForm.cs,_DisplayTiers,The length of the statement  "                List<ProjetSearchResult> result = ServicesProvider.GetInstance().GetProjectServices().FindProjectByCriteres(_currentPageNumber' out _numbersTotalPage' out _numberOfRecords' _query); " is 181.
Long Statement,OpenCBS.GUI.Projets,SearchProjectForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Search\SearchProjectForm.cs,_DisplayTiers,The length of the statement  "                labelTitleResult.Text = string.Format("{0} ({1})"' MultiLanguageStrings.GetString(Ressource.SearchClientForm' "result.Text")' _numberOfRecords); " is 144.
Long Statement,OpenCBS.GUI.Projets,SearchProjectForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Search\SearchProjectForm.cs,_DisplayTiers,The length of the statement  "                textBoxCurrentlyPage.Text = MultiLanguageStrings.GetString(Ressource.SearchClientForm' "nbOfPages.Text") + _currentPageNumber + " / " + _numbersTotalPage; " is 154.
Long Statement,OpenCBS.GUI.Projets,SearchProjectForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Search\SearchProjectForm.cs,InitializeComponent,The length of the statement  "            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(SearchProjectForm)); " is 137.
Long Statement,OpenCBS.GUI.Projets,SearchProjectForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Search\SearchProjectForm.cs,InitializeComponent,The length of the statement  "            this.textBoxCurrentlyPage.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56))))); " is 136.
Long Statement,OpenCBS.GUI.Projets,SearchProjectForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Search\SearchProjectForm.cs,InitializeComponent,The length of the statement  "            this.buttonPreview.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56))))); " is 129.
Long Statement,OpenCBS.GUI.Projets,SearchProjectForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Search\SearchProjectForm.cs,InitializeComponent,The length of the statement  "            this.buttonNext.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56))))); " is 126.
Long Statement,OpenCBS.GUI.Projets,SearchProjectForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Search\SearchProjectForm.cs,InitializeComponent,The length of the statement  "            this.buttonCancel.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56))))); " is 128.
Long Statement,OpenCBS.GUI.Projets,SearchProjectForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Search\SearchProjectForm.cs,InitializeComponent,The length of the statement  "            this.imageListSort.ImageStream = ((System.Windows.Forms.ImageListStreamer)(resources.GetObject("imageListSort.ImageStream"))); " is 126.
Long Statement,OpenCBS.GUI.Projets,SearchProjectForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Search\SearchProjectForm.cs,InitializeComponent,The length of the statement  "            this.btnSearch.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56))))); " is 125.
Long Statement,OpenCBS.GUI.Projets,SearchProjectForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Search\SearchProjectForm.cs,InitializeComponent,The length of the statement  "            this.buttonPrintReport.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56))))); " is 133.
Long Statement,OpenCBS.GUI.Projets,SearchProjectForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Search\SearchProjectForm.cs,InitializeComponent,The length of the statement  "            this.textBoxQuery.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56))))); " is 128.
Long Statement,OpenCBS.GUI.Projets,SearchProjectForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Search\SearchProjectForm.cs,InitializeComponent,The length of the statement  "            this.buttonSearch.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56))))); " is 128.
Long Statement,OpenCBS.GUI.Projets,SearchProjectForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Search\SearchProjectForm.cs,InitializeComponent,The length of the statement  "            this.labelTitleResult.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56))))); " is 132.
Complex Conditional,OpenCBS.GUI.Accounting,AccountingJournals,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\AccountingJournals.cs,GenerateEvents,The conditional expression  "options.DoOverdue || options.DoProvision || options.DoAccrued || options.DoLoanClosure"  is complex.
Complex Conditional,OpenCBS.GUI.Accounting,AddBooking,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\AddBooking.cs,textBoxAmount_KeyPress,The conditional expression  "(keyCode >= 48 && keyCode <= 57)                   || (keyCode == 8)                   || (Char.IsControl(e.KeyChar)                   && e.KeyChar                  != ((char)Keys.V | (char)Keys.ControlKey))                   || (Char.IsControl(e.KeyChar) && e.KeyChar                   != ((char)Keys.C | (char)Keys.ControlKey))                   || (e.KeyChar.ToString() == System.Globalization.NumberFormatInfo.CurrentInfo.NumberDecimalSeparator)"  is complex.
Complex Conditional,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,EnableLocAmountTextBox,The conditional expression  "(credit.PendingOrPostponed() || credit.ContractStatus == 0 || credit.Disbursed                  || credit.ContractStatus == OContractStatus.Validated) &&                  (credit.Product.AmountUnderLocMin.HasValue && credit.Product.AmountUnderLocMax.HasValue)"  is complex.
Complex Conditional,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,DisplayLoanEvents,The conditional expression  "(e is RepaymentEvent)                      || (e is LoanDisbursmentEvent)                      || (e is LoanValidationEvent)                      || e is AccruedInterestEvent                      || e is RescheduleLoanEvent                      || e is TrancheEvent                      || e is OverdueEvent                      || e is ProvisionEvent                      || e is LoanCloseEvent                      || e is ManualScheduleChangeEvent                      || e is LoanPenaltyAccrualEvent                      || e is LoanInterestAccrualEvent                      || e is LoanTransitionEvent"  is complex.
Complex Conditional,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,DisplayLoanEvents,The conditional expression  "!chxSystemEvents.Checked && (displayEvent is AccruedInterestEvent || displayEvent is LoanPenaltyAccrualEvent ||                      displayEvent is LoanInterestAccrualEvent || displayEvent is LoanTransitionEvent || displayEvent is CreditInsuranceEvent ||                      displayEvent is LoanValidationEvent || displayEvent is LoanCloseEvent)"  is complex.
Complex Conditional,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,DisplayLoanEvents,The conditional expression  "displayEvent is RegEvent                           || displayEvent is WriteOffEvent                           || displayEvent is LoanValidationEvent                           || displayEvent is LoanCloseEvent                           || displayEvent is ManualScheduleChangeEvent"  is complex.
Complex Conditional,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,SaveLoanApproval,The conditional expression  "OContractStatus.Refused == newStatus                          || OContractStatus.Abandoned == newStatus                          || OContractStatus.Closed == newStatus                          || OContractStatus.Deleted == newStatus"  is complex.
Complex Conditional,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,textBoxLocAmount_KeyPress,The conditional expression  "(keyCode >= 48 && keyCode <= 57) || (keyCode == 8) || (Char.IsControl(e.KeyChar) && e.KeyChar                  != ((char)Keys.V | (char)Keys.ControlKey)) || (Char.IsControl(e.KeyChar) && e.KeyChar !=                  ((char)Keys.C | (char)Keys.ControlKey))                  || (e.KeyChar.ToString() == NumberFormatInfo.CurrentInfo.NumberDecimalSeparator)"  is complex.
Complex Conditional,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,DisplayCollateral,The conditional expression  "propertyValue.Property.Name.Equals(GetString("FrmAddCollateralProduct"' "propertyAmount")) ||                          propertyValue.Property.Name.Equals("Montant") || propertyValue.Property.Name.Equals("Сумма") || propertyValue.Property.Name.Equals("Amount")"  is complex.
Complex Conditional,OpenCBS.GUI.Configuration,FrmFundingLineEvent,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Configuration\FrmFundingLineEvent.cs,textBoxAmount_KeyPress,The conditional expression  "(keyCode >= 48 && keyCode <= 57) || (keyCode == 8) || (Char.IsControl(e.KeyChar) && e.KeyChar                != ((char)Keys.V | (char)Keys.ControlKey)) || (Char.IsControl(e.KeyChar) && e.KeyChar !=                ((char)Keys.C | (char)Keys.ControlKey)) || (e.KeyChar.ToString() ==                System.Globalization.NumberFormatInfo.CurrentInfo.NumberDecimalSeparator)"  is complex.
Complex Conditional,OpenCBS.GUI.Configuration,FrmGeneralSettings,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Configuration\FrmGeneralSettings.cs,InitializeListViewGeneralParameters,The conditional expression  "val.Key.ToString() == OGeneralSettings.ACCOUNTINGPROCESS ||                      val.Key.ToString() == OGeneralSettings.BAD_LOAN_DAYS ||                      val.Key.ToString() == OGeneralSettings.CEASE_LAIE_DAYS ||                      val.Key.ToString() == OGeneralSettings.CLIENT_AGE_MAX ||                      val.Key.ToString() == OGeneralSettings.CLIENT_AGE_MIN ||                      val.Key.ToString() == OGeneralSettings.CONTRACT_CODE_TEMPLATE ||                      val.Key.ToString() == OGeneralSettings.COUNTRY ||                      val.Key.ToString() == OGeneralSettings.ENFORCE_ID_PATTERN ||                      val.Key.ToString() == OGeneralSettings.INCREMENTALDURINGDAYOFF ||                      val.Key.ToString() == OGeneralSettings.LATEDAYSAFTERACCRUALCEASES ||                      val.Key.ToString() == OGeneralSettings.MAX_GUARANTOR_AMOUNT ||                      val.Key.ToString() == OGeneralSettings.MAX_LOANS_COVERED ||                      val.Key.ToString() == OGeneralSettings.MAX_NUMBER_INSTALLMENT ||                      val.Key.ToString() == OGeneralSettings.MODIFY_ENTRY_FEE ||                      val.Key.ToString() == OGeneralSettings.PAYFIRSTINSTALLMENTREALVALUE ||                      val.Key.ToString() == OGeneralSettings.SAVINGS_CODE_TEMPLATE ||                      val.Key.ToString() == OGeneralSettings.STANDARD_CITY_PHONE_FORMAT ||                      val.Key.ToString() == OGeneralSettings.STANDARD_MOBILE_PHONE_FORMAT ||                      val.Key.ToString() == OGeneralSettings.STANDARD_ZIP_CODE ||                      val.Key.ToString() == OGeneralSettings.STOP_WRITEOFF_PENALTY ||                      val.Key.ToString() == OGeneralSettings.USE_EXTERNAL_ACCOUNTING ||                      val.Key.ToString() == OGeneralSettings.USE_MANDATORY_SAVING_ACCOUNT ||                      val.Key.ToString() == OGeneralSettings.VAT_RATE"  is complex.
Complex Conditional,OpenCBS.GUI.Configuration,FrmGeneralSettings,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Configuration\FrmGeneralSettings.cs,InitializeListViewGeneralParameters,The conditional expression  "val.Key.ToString() == OGeneralSettings.PAYFIRSTINSTALLMENTREALVALUE ||                          val.Key.ToString() == OGeneralSettings.ALLOWSMULTIPLELOANS ||                          val.Key.ToString() == OGeneralSettings.ALLOWSMULTIPLEGROUPS ||                          val.Key.ToString() == OGeneralSettings.OLBBEFOREREPAYMENT ||                          val.Key.ToString() == OGeneralSettings.CALCULATIONLATEFEESDURINGPUBLICHOLIDAYS ||                          val.Key.ToString() == OGeneralSettings.DONOTSKIPWEEKENDSININSTALLMENTSDATE ||                          val.Key.ToString() == OGeneralSettings.ENFORCE_ID_PATTERN ||                          val.Key.ToString() == OGeneralSettings.INCREMENTALDURINGDAYOFF ||                          val.Key.ToString() == OGeneralSettings.INTERESTS_ALSO_CREDITED_IN_FL ||                          val.Key.ToString() == OGeneralSettings.AUTOMATIC_ID ||                          val.Key.ToString() == OGeneralSettings.STOP_WRITEOFF_PENALTY ||                          val.Key.ToString() == OGeneralSettings.MODIFY_ENTRY_FEE ||                          val.Key.ToString() == OGeneralSettings.USE_MANDATORY_SAVING_ACCOUNT ||                          val.Key.ToString() == OGeneralSettings.USE_DAILY_ACCRUAL_OF_PENALTY ||                          val.Key.ToString() == OGeneralSettings.USE_EXTERNAL_ACCOUNTING ||                          val.Key.ToString() == OGeneralSettings.SHOW_EXTRA_INTEREST_COLUMN"  is complex.
Complex Conditional,OpenCBS.GUI.Configuration,FrmGeneralSettings,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Configuration\FrmGeneralSettings.cs,InitializeControls,The conditional expression  "entry.Key.ToString() == OGeneralSettings.PAYFIRSTINSTALLMENTREALVALUE ||                  entry.Key.ToString() == OGeneralSettings.ALLOWSMULTIPLELOANS ||                  entry.Key.ToString() == OGeneralSettings.ALLOWSMULTIPLEGROUPS ||                  entry.Key.ToString() == OGeneralSettings.OLBBEFOREREPAYMENT ||                  entry.Key.ToString() == OGeneralSettings.CALCULATIONLATEFEESDURINGPUBLICHOLIDAYS ||                  entry.Key.ToString() == OGeneralSettings.DONOTSKIPWEEKENDSININSTALLMENTSDATE ||                  entry.Key.ToString() == OGeneralSettings.ENFORCE_ID_PATTERN ||                  entry.Key.ToString() == OGeneralSettings.INCREMENTALDURINGDAYOFF ||                  entry.Key.ToString() == OGeneralSettings.INTERESTS_ALSO_CREDITED_IN_FL ||                  entry.Key.ToString() == OGeneralSettings.AUTOMATIC_ID ||                  entry.Key.ToString() == OGeneralSettings.STOP_WRITEOFF_PENALTY ||                  entry.Key.ToString() == OGeneralSettings.MODIFY_ENTRY_FEE ||                  entry.Key.ToString() == OGeneralSettings.USE_MANDATORY_SAVING_ACCOUNT ||                  entry.Key.ToString() == OGeneralSettings.USE_DAILY_ACCRUAL_OF_PENALTY ||                  entry.Key.ToString() == OGeneralSettings.USE_EXTERNAL_ACCOUNTING ||                  entry.Key.ToString() == OGeneralSettings.SHOW_EXTRA_INTEREST_COLUMN"  is complex.
Complex Conditional,OpenCBS.GUI.Configuration,FrmGeneralSettings,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Configuration\FrmGeneralSettings.cs,InitializeGeneralParameterValue,The conditional expression  "entry.Key.ToString() == OGeneralSettings.PAYFIRSTINSTALLMENTREALVALUE ||                       entry.Key.ToString() == OGeneralSettings.ALLOWSMULTIPLELOANS ||                       entry.Key.ToString() == OGeneralSettings.ALLOWSMULTIPLEGROUPS ||                       entry.Key.ToString() == OGeneralSettings.OLBBEFOREREPAYMENT ||                       entry.Key.ToString() == OGeneralSettings.CALCULATIONLATEFEESDURINGPUBLICHOLIDAYS ||                       entry.Key.ToString() == OGeneralSettings.DONOTSKIPWEEKENDSININSTALLMENTSDATE ||                       entry.Key.ToString() == OGeneralSettings.ENFORCE_ID_PATTERN ||                       entry.Key.ToString() == OGeneralSettings.INCREMENTALDURINGDAYOFF ||                       entry.Key.ToString() == OGeneralSettings.INTERESTS_ALSO_CREDITED_IN_FL ||                       entry.Key.ToString() == OGeneralSettings.AUTOMATIC_ID ||                       entry.Key.ToString() == OGeneralSettings.STOP_WRITEOFF_PENALTY ||                       entry.Key.ToString() == OGeneralSettings.MODIFY_ENTRY_FEE ||                       entry.Key.ToString() == OGeneralSettings.USE_MANDATORY_SAVING_ACCOUNT ||                       entry.Key.ToString() == OGeneralSettings.USE_DAILY_ACCRUAL_OF_PENALTY ||                       entry.Key.ToString() == OGeneralSettings.USE_EXTERNAL_ACCOUNTING ||                       entry.Key.ToString() == OGeneralSettings.SHOW_EXTRA_INTEREST_COLUMN"  is complex.
Complex Conditional,OpenCBS.GUI.Configuration,FrmGeneralSettings,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Configuration\FrmGeneralSettings.cs,textBoxGeneralParameterValue_TextChanged,The conditional expression  "entryKey == OGeneralSettings.GROUPMINMEMBERS ||                           entryKey == OGeneralSettings.GROUPMAXMEMBERS ||                           entryKey == OGeneralSettings.VILLAGEMINMEMBERS ||                           entryKey == OGeneralSettings.VILLAGEMAXMEMBERS ||                           entryKey == OGeneralSettings.CEASE_LAIE_DAYS ||                           entryKey == OGeneralSettings.CLIENT_AGE_MIN ||                           entryKey == OGeneralSettings.CLIENT_AGE_MAX ||                           entryKey == OGeneralSettings.MAX_LOANS_COVERED ||                           entryKey == OGeneralSettings.MAX_GUARANTOR_AMOUNT ||                           entryKey == OGeneralSettings.INTEREST_RATE_DECIMAL_PLACES"  is complex.
Complex Conditional,OpenCBS.GUI.Contracts,AddTrancheForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\AddTrancheForm.cs,tbDateOffset_KeyDown,The conditional expression  "e.Control && (c == Keys.X || c == Keys.C || c == Keys.V || c == Keys.Z)"  is complex.
Complex Conditional,OpenCBS.GUI.Contracts,AddTrancheForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\AddTrancheForm.cs,tbDateOffset_KeyDown,The conditional expression  "c == Keys.Left || c == Keys.Right || c == Keys.Up || c == Keys.Down"  is complex.
Complex Conditional,OpenCBS.GUI.Contracts,LoanDisbursementForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\LoanDisbursementForm.Designer.cs,TbEntryFeeValueKeyPress,The conditional expression  "(keyCode >= 48 && keyCode <= 57) || (keyCode == 8) || (Char.IsControl(e.KeyChar) && e.KeyChar                                                                         != ((char) Keys.V | (char) Keys.ControlKey)) ||                  (Char.IsControl(e.KeyChar) && e.KeyChar !=                   ((char) Keys.C | (char) Keys.ControlKey)) ||                  (e.KeyChar.ToString() == NumberFormatInfo.CurrentInfo.NumberDecimalSeparator)"  is complex.
Complex Conditional,OpenCBS.GUI.Contracts,FastRepaymentForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\FastRepaymentForm.cs,lvContracts_SubItemEndEditing,The conditional expression  "4 == e.SubItem || 5 == e.SubItem || 9 == e.SubItem && e.Item.Tag != null"  is complex.
Complex Conditional,OpenCBS.GUI.Contracts,SavingsOperationForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\SavingsOperationForm.cs,BSaveClick,The conditional expression  "(_flatFees.HasValue && updAmountFees.Value != _flatFees) || (_rateFees.HasValue && updAmountFees.Value != (decimal)(_rateFees * 100))"  is complex.
Complex Conditional,OpenCBS.GUI.Contracts,VillageDisburseLoanForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\VillageDisburseLoanForm.cs,btnSave_Click,The conditional expression  "assosiatedLoan.ContractStatus != OContractStatus.Closed &&                                      assosiatedLoan.ContractStatus !=OContractStatus.Abandoned &&                                      assosiatedLoan.ContractStatus != OContractStatus.Postponed &&                                      assosiatedLoan.CompulsorySavingsPercentage != null"  is complex.
Complex Conditional,OpenCBS.GUI.Database,FrmDatabaseSettings,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Database\FrmDatabaseSettings.cs,btnDatabaseConnection_Click,The conditional expression  "(_badLoginName || _badPasswordName || _badServerName) && !useLocalDb"  is complex.
Complex Conditional,OpenCBS.GUI.TellerManagement,FrmOpenCloseTeller,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\TellerManagement\FrmOpenCloseTeller.cs,tbAmount_KeyPress,The conditional expression  "(keyCode >= 48 && keyCode <= 57) ||                  (keyCode == 8) ||                  (Char.IsControl(e.KeyChar) && e.KeyChar != ((char)Keys.V | (char)Keys.ControlKey))                  ||                  (Char.IsControl(e.KeyChar) && e.KeyChar != ((char)Keys.C | (char)Keys.ControlKey))                  ||                  (e.KeyChar.ToString() == NumberFormatInfo.CurrentInfo.NumberDecimalSeparator)"  is complex.
Complex Conditional,OpenCBS.GUI.TellerManagement,FrmTellerOperation,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\TellerManagement\FrmTellerOperation.cs,tbxAmount_KeyPress,The conditional expression  "(keyCode >= 48 && keyCode <= 57) || (keyCode == 8) || (Char.IsControl(e.KeyChar) && e.KeyChar                                                                         != ((char)Keys.V | (char)Keys.ControlKey)) ||                  (Char.IsControl(e.KeyChar) && e.KeyChar !=                   ((char)Keys.C | (char)Keys.ControlKey)) ||                  (e.KeyChar.ToString() == NumberFormatInfo.CurrentInfo.NumberDecimalSeparator)"  is complex.
Complex Conditional,OpenCBS.GUI.UserControl,CollapsibleSplitter,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CollapsibleSplitter.cs,OnMouseMove,The conditional expression  "e.X >= rr.X && e.X <= rr.X + rr.Width && e.Y >= rr.Y && e.Y <= rr.Y + rr.Height"  is complex.
Complex Conditional,OpenCBS.GUI.UserControl,CollapsibleSplitter,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CollapsibleSplitter.cs,OnClick,The conditional expression  "controlToHide!= null && hot &&   				currentState != SplitterState.Collapsing &&   				currentState != SplitterState.Expanding"  is complex.
Complex Conditional,OpenCBS.GUI.UserControl,CollapsibleSplitter,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CollapsibleSplitter.cs,ArrowPointArray,The conditional expression  "(this.Dock == DockStyle.Right && controlToHide.Visible)   					|| (this.Dock == DockStyle.Left && !controlToHide.Visible)"  is complex.
Complex Conditional,OpenCBS.GUI.UserControl,CollapsibleSplitter,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CollapsibleSplitter.cs,ArrowPointArray,The conditional expression  "(this.Dock == DockStyle.Right && !controlToHide.Visible)   					|| (this.Dock == DockStyle.Left && controlToHide.Visible)"  is complex.
Complex Conditional,OpenCBS.GUI.UserControl,CollapsibleSplitter,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CollapsibleSplitter.cs,ArrowPointArray,The conditional expression  "(this.Dock == DockStyle.Top && controlToHide.Visible)   					|| (this.Dock == DockStyle.Bottom && !controlToHide.Visible)"  is complex.
Complex Conditional,OpenCBS.GUI.UserControl,CollapsibleSplitter,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CollapsibleSplitter.cs,ArrowPointArray,The conditional expression  "(this.Dock == DockStyle.Top && !controlToHide.Visible)   					|| (this.Dock == DockStyle.Bottom && controlToHide.Visible)"  is complex.
Complex Conditional,OpenCBS.GUI.UserControl,ElemMvtUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\ElemMvtUserControl.cs,txbAmount_KeyPress,The conditional expression  "(keyCode >= 48 && keyCode <= 57) || (keyCode == 8) || (Char.IsControl(e.KeyChar) && e.KeyChar                  != ((char)Keys.V | (char)Keys.ControlKey)) || (Char.IsControl(e.KeyChar) && e.KeyChar !=                  ((char)Keys.C | (char)Keys.ControlKey)) || (e.KeyChar.ToString() ==                  System.Globalization.NumberFormatInfo.CurrentInfo.NumberDecimalSeparator)"  is complex.
Complex Conditional,OpenCBS.GUI.UserControl,TextDecimalNumericUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\TextDecimalNumericUserControl.cs,textBoxNumeric_KeyPress,The conditional expression  "(keyCode >= 48 && keyCode <= 57) || (keyCode == 8) || (Char.IsControl(e.KeyChar) && e.KeyChar                  != ((char)Keys.V | (char)Keys.ControlKey)) || (Char.IsControl(e.KeyChar) && e.KeyChar !=                  ((char)Keys.C | (char)Keys.ControlKey)) || (e.KeyChar.ToString() == NumberFormatInfo.CurrentInfo.NumberDecimalSeparator)"  is complex.
Complex Conditional,OpenCBS.GUI.Products,FrmAddLoanProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddLoanProduct.Designer.cs,InitializeComboBoxExoticProduct,The conditional expression  "(_product.IsDeclining && e.IsExoticProductForDecliningRatePackage) ||                      (!_product.IsDeclining && e.IsExoticProductForFlatRatePackage)"  is complex.
Complex Conditional,OpenCBS.GUI.Products,FrmAddLoanProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddLoanProduct.Designer.cs,InitializePackageValues,The conditional expression  "pack.DrawingsNumber.HasValue || pack.AmountUnderLoc.HasValue || pack.AmountUnderLocMin.HasValue ||                  pack.AmountUnderLocMax.HasValue || pack.MaturityLoc.HasValue || pack.MaturityLocMin.HasValue ||                  pack.MaturityLocMax.HasValue"  is complex.
Complex Conditional,OpenCBS.GUI.Products,FrmAddLoanProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddLoanProduct.Designer.cs,textBoxNumOfDrawings_KeyPress,The conditional expression  "(keyCode >= 48 && keyCode <= 57) || (keyCode == 8) || (Char.IsControl(e.KeyChar) && e.KeyChar                  != ((char)Keys.V | (char)Keys.ControlKey)) || (Char.IsControl(e.KeyChar) && e.KeyChar !=                  ((char)Keys.C | (char)Keys.ControlKey)) || (e.KeyChar.ToString() == NumberFormatInfo.CurrentInfo.NumberDecimalSeparator)"  is complex.
Complex Conditional,OpenCBS.GUI.Products,FrmAddLoanProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddLoanProduct.Designer.cs,textBoxGracePeriodMin_KeyPress,The conditional expression  "(keyCode >= 48 && keyCode <= 57) ||                   (keyCode == 8) ||                   (Char.IsControl(e.KeyChar) && e.KeyChar != ((char)Keys.V | (char)Keys.ControlKey))                   ||                   (Char.IsControl(e.KeyChar) && e.KeyChar != ((char)Keys.C | (char)Keys.ControlKey))                   ||                   (e.KeyChar.ToString() == NumberFormatInfo.CurrentInfo.NumberDecimalSeparator)"  is complex.
Complex Conditional,OpenCBS.GUI.Products,FrmAddLoanProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddLoanProduct.Designer.cs,CheckListViewCorrectness,The conditional expression  "(min != null && max != null && max > min) || v != null"  is complex.
Empty Catch Block,OpenCBS.GUI,MainView,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\MainView.Designer.cs,Ping,The method has an empty catch block.
Empty Catch Block,OpenCBS.GUI,MainView,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\MainView.Designer.cs,OpenUrl,The method has an empty catch block.
Empty Catch Block,OpenCBS.GUI,MainView,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\MainView.Designer.cs,LotrasmicMainWindowForm_FormClosing,The method has an empty catch block.
Empty Catch Block,OpenCBS.GUI,MainView,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\MainView.Designer.cs,contactMenuItem_Click,The method has an empty catch block.
Empty Catch Block,OpenCBS.GUI,MainView,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\MainView.Designer.cs,OpenUserGuid,The method has an empty catch block.
Empty Catch Block,OpenCBS.GUI,MainView,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\MainView.Designer.cs,getHelpFromForumToolStripMenuItem_Click,The method has an empty catch block.
Empty Catch Block,OpenCBS.GUI,MainView,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\MainView.Designer.cs,visitOpenCBScomToolStripMenuItem_Click,The method has an empty catch block.
Empty Catch Block,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,buttonSaveSaving_Click,The method has an empty catch block.
Empty Catch Block,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,btSavingsUpdate_Click,The method has an empty catch block.
Empty Catch Block,OpenCBS.GUI.Export,DecimalFieldPropertiesForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Export\DecimalFieldPropertiesForm.cs,_refreshSample,The method has an empty catch block.
Empty Catch Block,OpenCBS.GUI.UserControl,CorporateUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CorporateUserControl.cs,SaveCorporate,The method has an empty catch block.
Empty Catch Block,OpenCBS.GUI.UserControl,GroupUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\GroupUserControl.cs,SaveGroup,The method has an empty catch block.
Empty Catch Block,OpenCBS.GUI.UserControl,PersonUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\PersonUserControl.cs,SavePerson,The method has an empty catch block.
Empty Catch Block,OpenCBS.GUI.UserControl,SplitButton,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\SplitButton.cs,InitDefaultSplitImages,The method has an empty catch block.
Empty Catch Block,OpenCBS.GUI.Products,FrmAddLoanProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddLoanProduct.Designer.cs,listViewLoanCycles_Click,The method has an empty catch block.
Magic Number,OpenCBS.GUI,ProjectFollowUp,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ProjectFollowUp.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownYear.Maximum = new decimal(new int[] {              5'              0'              0'              0});
Magic Number,OpenCBS.GUI,MultiLanguageForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\MultiLanguageForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(284' 262);
Magic Number,OpenCBS.GUI,MultiLanguageForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\MultiLanguageForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(284' 262);
Magic Number,OpenCBS.GUI,OpenCBSProgressBar,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\OpenCBSProgressBar.cs,DrawProgressBar,The following statement contains a magic number: SolidBrush brush = new SolidBrush(Color.FromArgb(0'81'152));
Magic Number,OpenCBS.GUI,OpenCBSProgressBar,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\OpenCBSProgressBar.cs,DrawProgressBar,The following statement contains a magic number: SolidBrush brush = new SolidBrush(Color.FromArgb(0'81'152));
Magic Number,OpenCBS.GUI,OpenCBSProgressBar,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\OpenCBSProgressBar.cs,DrawProgressBar,The following statement contains a magic number: g.FillRectangle(brush' ClientRectangle.Left + 2' ClientRectangle.Top + 2' (int)((ClientRectangle.Width - 4) * percent)' ClientRectangle.Height - 4);
Magic Number,OpenCBS.GUI,OpenCBSProgressBar,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\OpenCBSProgressBar.cs,DrawProgressBar,The following statement contains a magic number: g.FillRectangle(brush' ClientRectangle.Left + 2' ClientRectangle.Top + 2' (int)((ClientRectangle.Width - 4) * percent)' ClientRectangle.Height - 4);
Magic Number,OpenCBS.GUI,OpenCBSProgressBar,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\OpenCBSProgressBar.cs,DrawProgressBar,The following statement contains a magic number: g.FillRectangle(brush' ClientRectangle.Left + 2' ClientRectangle.Top + 2' (int)((ClientRectangle.Width - 4) * percent)' ClientRectangle.Height - 4);
Magic Number,OpenCBS.GUI,OpenCBSProgressBar,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\OpenCBSProgressBar.cs,DrawProgressBar,The following statement contains a magic number: g.FillRectangle(brush' ClientRectangle.Left + 2' ClientRectangle.Top + 2' (int)((ClientRectangle.Width - 4) * percent)' ClientRectangle.Height - 4);
Magic Number,OpenCBS.GUI,OpenCBSProgressBar,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\OpenCBSProgressBar.cs,DrawPrgressBarBorder,The following statement contains a magic number: ControlPaint.DrawBorder(g' ClientRectangle' Color.FromArgb(0' 81'152)' ButtonBorderStyle.Solid);
Magic Number,OpenCBS.GUI,OpenCBSProgressBar,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\OpenCBSProgressBar.cs,DrawPrgressBarBorder,The following statement contains a magic number: ControlPaint.DrawBorder(g' ClientRectangle' Color.FromArgb(0' 81'152)' ButtonBorderStyle.Solid);
Magic Number,OpenCBS.GUI,FrmLocations,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Configuration\FrmLocations.cs,InitializeComponent,The following statement contains a magic number: this.treeViewLocations.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(81))))' ((int)(((byte)(152)))));
Magic Number,OpenCBS.GUI,FrmLocations,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Configuration\FrmLocations.cs,InitializeComponent,The following statement contains a magic number: this.treeViewLocations.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(81))))' ((int)(((byte)(152)))));
Magic Number,OpenCBS.GUI,FrmProjectObjectsCUD,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Configuration\FrmProjectObjectsCUD.cs,InitializeComponent,The following statement contains a magic number: this.buttonAdd.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56)))));
Magic Number,OpenCBS.GUI,FrmProjectObjectsCUD,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Configuration\FrmProjectObjectsCUD.cs,InitializeComponent,The following statement contains a magic number: this.buttonAdd.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56)))));
Magic Number,OpenCBS.GUI,FrmProjectObjectsCUD,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Configuration\FrmProjectObjectsCUD.cs,InitializeComponent,The following statement contains a magic number: this.buttonExit.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56)))));
Magic Number,OpenCBS.GUI,FrmProjectObjectsCUD,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Configuration\FrmProjectObjectsCUD.cs,InitializeComponent,The following statement contains a magic number: this.buttonExit.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56)))));
Magic Number,OpenCBS.GUI,CashPrevisionForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\CashPrevisionForm.cs,CashPrevisionForm,The following statement contains a magic number: forecastDays = 5;
Magic Number,OpenCBS.GUI,CashPrevisionForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\CashPrevisionForm.cs,CashPrevisionForm,The following statement contains a magic number: forecastDays = 5;
Magic Number,OpenCBS.GUI,CashPrevisionForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\CashPrevisionForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonRepaymentExit.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56)))));
Magic Number,OpenCBS.GUI,CashPrevisionForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\CashPrevisionForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonRepaymentExit.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56)))));
Magic Number,OpenCBS.GUI,CashPrevisionForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\CashPrevisionForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonPreview.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56)))));
Magic Number,OpenCBS.GUI,CashPrevisionForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\CashPrevisionForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonPreview.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56)))));
Magic Number,OpenCBS.GUI,CashPrevisionForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\CashPrevisionForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonNext.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56)))));
Magic Number,OpenCBS.GUI,CashPrevisionForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\CashPrevisionForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonNext.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56)))));
Magic Number,OpenCBS.GUI,CashPrevisionForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\CashPrevisionForm.cs,DrawZedGraphForCashPrevision,The following statement contains a magic number: myPane.FontSpec.FontColor = Color.FromArgb(0' 88' 56);
Magic Number,OpenCBS.GUI,CashPrevisionForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\CashPrevisionForm.cs,DrawZedGraphForCashPrevision,The following statement contains a magic number: myPane.FontSpec.FontColor = Color.FromArgb(0' 88' 56);
Magic Number,OpenCBS.GUI,CashPrevisionForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\CashPrevisionForm.cs,DrawZedGraphForCashPrevision,The following statement contains a magic number: myCurve.Line.Fill = new Fill(Color.White' Color.FromArgb(0' 88' 56)' -45F);
Magic Number,OpenCBS.GUI,CashPrevisionForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\CashPrevisionForm.cs,DrawZedGraphForCashPrevision,The following statement contains a magic number: myCurve.Line.Fill = new Fill(Color.White' Color.FromArgb(0' 88' 56)' -45F);
Magic Number,OpenCBS.GUI,CashPrevisionForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\CashPrevisionForm.cs,DrawZedGraphForCashPrevision,The following statement contains a magic number: myPane.AxisFill = new Fill(Color.White' Color.FromArgb(255' 255' 166)' 90F);
Magic Number,OpenCBS.GUI,CashPrevisionForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\CashPrevisionForm.cs,DrawZedGraphForCashPrevision,The following statement contains a magic number: myPane.AxisFill = new Fill(Color.White' Color.FromArgb(255' 255' 166)' 90F);
Magic Number,OpenCBS.GUI,CashPrevisionForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\CashPrevisionForm.cs,DrawZedGraphForCashPrevision,The following statement contains a magic number: myPane.AxisFill = new Fill(Color.White' Color.FromArgb(255' 255' 166)' 90F);
Magic Number,OpenCBS.GUI,CashPrevisionForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\CashPrevisionForm.cs,DrawZedGraphForCashPrevision,The following statement contains a magic number: myPane.XAxis.ScaleFontSpec.Angle = 40;
Magic Number,OpenCBS.GUI,EventCancelConfirmationForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\EventCancelConfirmationForm.cs,DisplayEvent,The following statement contains a magic number: if (_event.Deleted)              {                  listViewItem.BackColor = Color.FromArgb(188' 209' 199);                  listViewItem.ForeColor = Color.White;              }
Magic Number,OpenCBS.GUI,EventCancelConfirmationForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\EventCancelConfirmationForm.cs,DisplayEvent,The following statement contains a magic number: if (_event.Deleted)              {                  listViewItem.BackColor = Color.FromArgb(188' 209' 199);                  listViewItem.ForeColor = Color.White;              }
Magic Number,OpenCBS.GUI,EventCancelConfirmationForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\EventCancelConfirmationForm.cs,DisplayEvent,The following statement contains a magic number: if (_event.Deleted)              {                  listViewItem.BackColor = Color.FromArgb(188' 209' 199);                  listViewItem.ForeColor = Color.White;              }
Magic Number,OpenCBS.GUI,EventCancelConfirmationForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\EventCancelConfirmationForm.cs,DisplayInstallmentsForRepaymentsStatus,The following statement contains a magic number: foreach (IInstallment installment in installments)              {                  ListViewItem listViewItem = new ListViewItem(installment.Number.ToString());                  if (installment.IsRepaid)                  {                      listViewItem.BackColor = Color.FromArgb(0' 88' 56);                      listViewItem.ForeColor = Color.White;                  }                   listViewItem.SubItems.Add(installment.ExpectedDate.ToShortDateString());                  listViewItem.SubItems.Add(installment.InterestsRepayment.GetFormatedValue(_contract.UseCents));                  listViewItem.SubItems.Add(installment.CapitalRepayment.GetFormatedValue(_contract.UseCents));                    if (installment.PaidInterests == 0)                      listViewItem.SubItems.Add("-");                  else                      listViewItem.SubItems.Add(installment.PaidInterests.GetFormatedValue(_contract.UseCents));                    if (installment.PaidCapital == 0)                      listViewItem.SubItems.Add("-");                  else                      listViewItem.SubItems.Add(installment.PaidCapital.GetFormatedValue(_contract.UseCents));                    if (installment.PaidDate.HasValue)                      listViewItem.SubItems.Add(installment.PaidDate.Value.ToShortDateString());                  else                      listViewItem.SubItems.Add("-");                  listViewRepayments.Items.Add(listViewItem);              }
Magic Number,OpenCBS.GUI,EventCancelConfirmationForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\EventCancelConfirmationForm.cs,DisplayInstallmentsForRepaymentsStatus,The following statement contains a magic number: foreach (IInstallment installment in installments)              {                  ListViewItem listViewItem = new ListViewItem(installment.Number.ToString());                  if (installment.IsRepaid)                  {                      listViewItem.BackColor = Color.FromArgb(0' 88' 56);                      listViewItem.ForeColor = Color.White;                  }                   listViewItem.SubItems.Add(installment.ExpectedDate.ToShortDateString());                  listViewItem.SubItems.Add(installment.InterestsRepayment.GetFormatedValue(_contract.UseCents));                  listViewItem.SubItems.Add(installment.CapitalRepayment.GetFormatedValue(_contract.UseCents));                    if (installment.PaidInterests == 0)                      listViewItem.SubItems.Add("-");                  else                      listViewItem.SubItems.Add(installment.PaidInterests.GetFormatedValue(_contract.UseCents));                    if (installment.PaidCapital == 0)                      listViewItem.SubItems.Add("-");                  else                      listViewItem.SubItems.Add(installment.PaidCapital.GetFormatedValue(_contract.UseCents));                    if (installment.PaidDate.HasValue)                      listViewItem.SubItems.Add(installment.PaidDate.Value.ToShortDateString());                  else                      listViewItem.SubItems.Add("-");                  listViewRepayments.Items.Add(listViewItem);              }
Magic Number,OpenCBS.GUI,SearchCreditContractForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Search\SearchCreditContractForm.cs,InitializeComponent,The following statement contains a magic number: this.textBoxQuery.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56)))));
Magic Number,OpenCBS.GUI,SearchCreditContractForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Search\SearchCreditContractForm.cs,InitializeComponent,The following statement contains a magic number: this.textBoxQuery.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56)))));
Magic Number,OpenCBS.GUI,SearchCreditContractForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Search\SearchCreditContractForm.cs,InitializeComponent,The following statement contains a magic number: this.lblTitle.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(81))))' ((int)(((byte)(152)))));
Magic Number,OpenCBS.GUI,SearchCreditContractForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Search\SearchCreditContractForm.cs,InitializeComponent,The following statement contains a magic number: this.lblTitle.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(81))))' ((int)(((byte)(152)))));
Magic Number,OpenCBS.GUI,SearchCreditContractForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Search\SearchCreditContractForm.cs,InitializeComponent,The following statement contains a magic number: this.textBoxCurrentlyPage.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56)))));
Magic Number,OpenCBS.GUI,SearchCreditContractForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Search\SearchCreditContractForm.cs,InitializeComponent,The following statement contains a magic number: this.textBoxCurrentlyPage.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56)))));
Magic Number,OpenCBS.GUI,SearchCreditContractForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Search\SearchCreditContractForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Controls.Add(this.groupBoxButtonBottom' 0' 3);
Magic Number,OpenCBS.GUI,SearchCreditContractForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Search\SearchCreditContractForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Controls.Add(this.listViewContracts' 0' 2);
Magic Number,OpenCBS.GUI,SearchCreditContractForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Search\SearchCreditContractForm.cs,InitializeComponent,The following statement contains a magic number: this.imageListSort.Images.SetKeyName(2' "theme1.1_bouton_down_small.png");
Magic Number,OpenCBS.GUI,SearchCreditContractForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Search\SearchCreditContractForm.cs,InitializeComponent,The following statement contains a magic number: this.imageListSort.Images.SetKeyName(3' "theme1.1_bouton_up_small.png");
Magic Number,OpenCBS.GUI,SearchCreditContractForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Search\SearchCreditContractForm.cs,listViewContracts_ColumnClick,The following statement contains a magic number: if (listViewContracts.Items.Count > 0)                  listViewContracts.Columns[Sorter.ByColumn].ImageIndex = listViewContracts.Sorting == SortOrder.Ascending ? 2 : 3;
Magic Number,OpenCBS.GUI,SearchCreditContractForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Search\SearchCreditContractForm.cs,listViewContracts_ColumnClick,The following statement contains a magic number: if (listViewContracts.Items.Count > 0)                  listViewContracts.Columns[Sorter.ByColumn].ImageIndex = listViewContracts.Sorting == SortOrder.Ascending ? 2 : 3;
Magic Number,OpenCBS.GUI,SearchCreditContractForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Search\SearchCreditContractForm.cs,initialContractsDisplay,The following statement contains a magic number: Sorter.ByColumn = 2;
Magic Number,OpenCBS.GUI,DashboardForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\DashboardForm.cs,RefreshPortfolioPieChart,The following statement contains a magic number: var parPercentage = 0 == dashboard.Olb ? 0 : Math.Round(100 * dashboard.Par / dashboard.Olb' 1);
Magic Number,OpenCBS.GUI,DashboardForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\DashboardForm.cs,RefreshPortfolioPieChart,The following statement contains a magic number: var performingPercentage = 100 - parPercentage;
Magic Number,OpenCBS.GUI,DashboardForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\DashboardForm.cs,RefreshPortfolioPieChart,The following statement contains a magic number: point.Color = Color.FromArgb(72' 234' 28);
Magic Number,OpenCBS.GUI,DashboardForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\DashboardForm.cs,RefreshPortfolioPieChart,The following statement contains a magic number: point.Color = Color.FromArgb(72' 234' 28);
Magic Number,OpenCBS.GUI,DashboardForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\DashboardForm.cs,RefreshPortfolioPieChart,The following statement contains a magic number: point.Color = Color.FromArgb(72' 234' 28);
Magic Number,OpenCBS.GUI,DashboardForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\DashboardForm.cs,RefreshPortfolioPieChart,The following statement contains a magic number: point.Color = Color.FromArgb(234' 28' 28);
Magic Number,OpenCBS.GUI,DashboardForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\DashboardForm.cs,RefreshPortfolioPieChart,The following statement contains a magic number: point.Color = Color.FromArgb(234' 28' 28);
Magic Number,OpenCBS.GUI,DashboardForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\DashboardForm.cs,RefreshPortfolioPieChart,The following statement contains a magic number: point.Color = Color.FromArgb(234' 28' 28);
Magic Number,OpenCBS.GUI,DashboardForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\DashboardForm.cs,RefreshParPieChart,The following statement contains a magic number: for (var i = 0; i < legends.Length; i++)              {                  var value = Math.Round(0 == dashboard.Par ? 0 : 100 * values[i] / dashboard.Par' 1);                  var point = series.Points.Add(Convert.ToDouble(value));                  var numberFormat = Math.Round(value) == value ? "N0" : "N1";                  point.LegendText = string.Format("{0}: {1}%"' legends[i]' value.ToString(numberFormat));                  point.Color = colors[i];              }
Magic Number,OpenCBS.GUI,DashboardForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\DashboardForm.cs,RefreshDisbursementsChart,The following statement contains a magic number: foreach (var actionStat in dashboard.ActionStats)              {                  var point = series.Points.Add(actionStat.NumberDisbursed);                  point.AxisLabel = actionStat.Date.ToString("dd.MM");                  point.Color = Color.FromArgb(28' 151' 234);              }
Magic Number,OpenCBS.GUI,DashboardForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\DashboardForm.cs,RefreshDisbursementsChart,The following statement contains a magic number: foreach (var actionStat in dashboard.ActionStats)              {                  var point = series.Points.Add(actionStat.NumberDisbursed);                  point.AxisLabel = actionStat.Date.ToString("dd.MM");                  point.Color = Color.FromArgb(28' 151' 234);              }
Magic Number,OpenCBS.GUI,DashboardForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\DashboardForm.cs,RefreshDisbursementsChart,The following statement contains a magic number: foreach (var actionStat in dashboard.ActionStats)              {                  var point = series.Points.Add(actionStat.NumberDisbursed);                  point.AxisLabel = actionStat.Date.ToString("dd.MM");                  point.Color = Color.FromArgb(28' 151' 234);              }
Magic Number,OpenCBS.GUI,DashboardForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\DashboardForm.cs,RefreshOlbTrendChart,The following statement contains a magic number: series.BorderWidth = 3;
Magic Number,OpenCBS.GUI,DashboardForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\DashboardForm.cs,AddTitle,The following statement contains a magic number: var title = new Title              {                  Text = text'                  Font = new Font("Arial"' 7f' FontStyle.Bold)'                  ForeColor = Color.FromArgb(45' 45' 48)'                  Docking = Docking.Bottom'              };
Magic Number,OpenCBS.GUI,DashboardForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\DashboardForm.cs,AddTitle,The following statement contains a magic number: var title = new Title              {                  Text = text'                  Font = new Font("Arial"' 7f' FontStyle.Bold)'                  ForeColor = Color.FromArgb(45' 45' 48)'                  Docking = Docking.Bottom'              };
Magic Number,OpenCBS.GUI,DashboardForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\DashboardForm.cs,AddTitle,The following statement contains a magic number: var title = new Title              {                  Text = text'                  Font = new Font("Arial"' 7f' FontStyle.Bold)'                  ForeColor = Color.FromArgb(45' 45' 48)'                  Docking = Docking.Bottom'              };
Magic Number,OpenCBS.GUI,DashboardForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\DashboardForm.cs,InitializeComponent,The following statement contains a magic number: this.label2.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(45))))' ((int)(((byte)(45))))' ((int)(((byte)(48)))));
Magic Number,OpenCBS.GUI,DashboardForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\DashboardForm.cs,InitializeComponent,The following statement contains a magic number: this.label2.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(45))))' ((int)(((byte)(45))))' ((int)(((byte)(48)))));
Magic Number,OpenCBS.GUI,DashboardForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\DashboardForm.cs,InitializeComponent,The following statement contains a magic number: this.label2.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(45))))' ((int)(((byte)(45))))' ((int)(((byte)(48)))));
Magic Number,OpenCBS.GUI,DashboardForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\DashboardForm.cs,InitializeComponent,The following statement contains a magic number: this.label1.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(45))))' ((int)(((byte)(45))))' ((int)(((byte)(48)))));
Magic Number,OpenCBS.GUI,DashboardForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\DashboardForm.cs,InitializeComponent,The following statement contains a magic number: this.label1.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(45))))' ((int)(((byte)(45))))' ((int)(((byte)(48)))));
Magic Number,OpenCBS.GUI,DashboardForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\DashboardForm.cs,InitializeComponent,The following statement contains a magic number: this.label1.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(45))))' ((int)(((byte)(45))))' ((int)(((byte)(48)))));
Magic Number,OpenCBS.GUI,frmShowError,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\frmShowError.cs,InitializeComponent,The following statement contains a magic number: this.richTextBoxExceptionDetail.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(64))))' ((int)(((byte)(0)))));
Magic Number,OpenCBS.GUI,frmShowError,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\frmShowError.cs,buttonShowDetail_Click,The following statement contains a magic number: if (!(bool) buttonShowDetail.Tag)  			{  				Size = new Size(700' 400);  				buttonShowDetail.Tag = true;  			}  			else  			{  				Size = new Size(700' 137);  				buttonShowDetail.Tag = false;  			}
Magic Number,OpenCBS.GUI,frmShowError,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\frmShowError.cs,buttonShowDetail_Click,The following statement contains a magic number: if (!(bool) buttonShowDetail.Tag)  			{  				Size = new Size(700' 400);  				buttonShowDetail.Tag = true;  			}  			else  			{  				Size = new Size(700' 137);  				buttonShowDetail.Tag = false;  			}
Magic Number,OpenCBS.GUI,frmShowError,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\frmShowError.cs,buttonShowDetail_Click,The following statement contains a magic number: if (!(bool) buttonShowDetail.Tag)  			{  				Size = new Size(700' 400);  				buttonShowDetail.Tag = true;  			}  			else  			{  				Size = new Size(700' 137);  				buttonShowDetail.Tag = false;  			}
Magic Number,OpenCBS.GUI,frmShowError,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\frmShowError.cs,buttonShowDetail_Click,The following statement contains a magic number: if (!(bool) buttonShowDetail.Tag)  			{  				Size = new Size(700' 400);  				buttonShowDetail.Tag = true;  			}  			else  			{  				Size = new Size(700' 137);  				buttonShowDetail.Tag = false;  			}
Magic Number,OpenCBS.GUI,frmShowError,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\frmShowError.cs,frmShowError_Load,The following statement contains a magic number: Size = new Size(700' 137);
Magic Number,OpenCBS.GUI,frmShowError,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\frmShowError.cs,frmShowError_Load,The following statement contains a magic number: Size = new Size(700' 137);
Magic Number,OpenCBS.GUI,InputBox,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\InputBox.cs,InitializeComponent,The following statement contains a magic number: this.buttonCancel.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56)))));
Magic Number,OpenCBS.GUI,InputBox,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\InputBox.cs,InitializeComponent,The following statement contains a magic number: this.buttonCancel.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56)))));
Magic Number,OpenCBS.GUI,InputBox,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\InputBox.cs,InitializeComponent,The following statement contains a magic number: this.buttonOK.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56)))));
Magic Number,OpenCBS.GUI,InputBox,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\InputBox.cs,InitializeComponent,The following statement contains a magic number: this.buttonOK.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56)))));
Magic Number,OpenCBS.GUI,MainView,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\MainView.Designer.cs,InitializeComponent,The following statement contains a magic number: this.timer.Interval = 1000;
Magic Number,OpenCBS.GUI,MainView,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\MainView.Designer.cs,InitializeComponent,The following statement contains a magic number: this.toolBarLblVersion.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(100))))' ((int)(((byte)(180))))' ((int)(((byte)(156)))));
Magic Number,OpenCBS.GUI,MainView,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\MainView.Designer.cs,InitializeComponent,The following statement contains a magic number: this.toolBarLblVersion.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(100))))' ((int)(((byte)(180))))' ((int)(((byte)(156)))));
Magic Number,OpenCBS.GUI,MainView,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\MainView.Designer.cs,InitializeComponent,The following statement contains a magic number: this.toolBarLblVersion.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(100))))' ((int)(((byte)(180))))' ((int)(((byte)(156)))));
Magic Number,OpenCBS.GUI,MainView,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\MainView.Designer.cs,Ping,The following statement contains a magic number: worker.DoWork += (sender' args) =>              {                  var mfiService = ServicesProvider.GetInstance().GetMFIServices();                  var pingInfo = mfiService.GetPingInfo();                  var appSettingsService = ServicesProvider.GetInstance().GetApplicationSettingsServices();                  var guid = appSettingsService.GetGuid();                  if (guid == null)                  {                      guid = Guid.NewGuid();                      appSettingsService.SetGuid(guid.Value);                  }                  var collection = new Dictionary<string' string>                  {                      { "Guid"' guid.ToString() }'                      { "Username"' User.CurrentUser.UserName }'                      { "Version"' TechnicalSettings.GetDisplayVersion() }'                      { "Olb"' pingInfo.Olb.ToString("0") }'                      { "NumberOfIndividualClients"' pingInfo.NumberOfIndividualClients.ToString("0") }'                      { "NumberOfSolidarityGroups"' pingInfo.NumberOfSolidarityGroups.ToString("0") }'                      { "NumberOfNonSolidarityGroups"' pingInfo.NumberOfNonSolidarityGroups.ToString("0") }'                      { "NumberOfCompanies"' pingInfo.NumberOfCompanies.ToString("0") }                  };                  var parameters = string.Join("&"' collection.Select(x => string.Format("{0}={1}"' x.Key' x.Value)).ToArray());                  var data = Encoding.UTF8.GetBytes(parameters);                  var request = (HttpWebRequest)WebRequest.Create("http://opencbsping.apphb.com/Ping");                  request.Method = "POST";                  request.ContentType = "application/x-www-form-urlencoded";                  request.ContentLength = data.Length;                  request.UserAgent = "OpenCBS";                  request.Timeout = 5000;                  try                  {                      using (var stream = request.GetRequestStream())                      {                          stream.Write(data' 0' data.Length);                      }                  }                  catch                  {                    }              };
Magic Number,OpenCBS.GUI,MainView,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\MainView.Designer.cs,activeLoansToolStripMenuItem_Click,The following statement contains a magic number: try              {                  var reportName = (sender as ToolStripMenuItem).Tag.ToString();                  var report = ReportService.GetInstance().GetReportByName(reportName);                  var reportParamsForm = new ReportParamsForm(report.Params' report.Title);                    if (reportParamsForm.ShowDialog() != DialogResult.OK) return;                    var progressForm = new ReportLoadingProgressForm();                  progressForm.Show();                    var bw = new BackgroundWorker                  {                      WorkerReportsProgress = true'                      WorkerSupportsCancellation = true'                  };                  bw.DoWork += (obj' args) =>                  {                      ReportService.GetInstance().LoadReport(report);                      bw.ReportProgress(100);                  };                  bw.RunWorkerCompleted += (obj' args) =>                  {                      progressForm.Close();                      if (args.Error != null)                      {                          Fail(args.Error.Message);                          return;                      }                      if (args.Cancelled) return;                        report.OpenCount++;                      report.SaveOpenCount();                      var reportViewer = new ReportViewerForm(report);                      reportViewer.Show();                  };                  bw.RunWorkerAsync(report);              }              catch (Exception ex)              {                  Fail(ex.Message);              }
Magic Number,OpenCBS.GUI,FrmFundingLine,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Configuration\FrmFundingLine.cs,DrawCashPrevisionGraph,The following statement contains a magic number: int numDays = 5;
Magic Number,OpenCBS.GUI,FrmFundingLine,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Configuration\FrmFundingLine.cs,DrawCashPrevisionGraph,The following statement contains a magic number: myPane.FontSpec.FontColor = Color.FromArgb(0' 88' 56);
Magic Number,OpenCBS.GUI,FrmFundingLine,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Configuration\FrmFundingLine.cs,DrawCashPrevisionGraph,The following statement contains a magic number: myPane.FontSpec.FontColor = Color.FromArgb(0' 88' 56);
Magic Number,OpenCBS.GUI,FrmFundingLine,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Configuration\FrmFundingLine.cs,DrawCashPrevisionGraph,The following statement contains a magic number: myCurve.Line.Fill = new Fill(Color.White' Color.FromArgb(0' 88' 56)' -45F);
Magic Number,OpenCBS.GUI,FrmFundingLine,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Configuration\FrmFundingLine.cs,DrawCashPrevisionGraph,The following statement contains a magic number: myCurve.Line.Fill = new Fill(Color.White' Color.FromArgb(0' 88' 56)' -45F);
Magic Number,OpenCBS.GUI,FrmFundingLine,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Configuration\FrmFundingLine.cs,DrawCashPrevisionGraph,The following statement contains a magic number: myPane.AxisFill = new Fill(Color.White' Color.FromArgb(255' 255' 166)' 90F);
Magic Number,OpenCBS.GUI,FrmFundingLine,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Configuration\FrmFundingLine.cs,DrawCashPrevisionGraph,The following statement contains a magic number: myPane.AxisFill = new Fill(Color.White' Color.FromArgb(255' 255' 166)' 90F);
Magic Number,OpenCBS.GUI,FrmFundingLine,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Configuration\FrmFundingLine.cs,DrawCashPrevisionGraph,The following statement contains a magic number: myPane.AxisFill = new Fill(Color.White' Color.FromArgb(255' 255' 166)' 90F);
Magic Number,OpenCBS.GUI,FrmFundingLine,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Configuration\FrmFundingLine.cs,DrawCashPrevisionGraph,The following statement contains a magic number: myPane.XAxis.ScaleFontSpec.Angle = 40;
Magic Number,OpenCBS.GUI,FrmFundingLine,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Configuration\FrmFundingLine.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Controls.Add(this.splitContainer2' 0' 2);
Magic Number,OpenCBS.GUI,FrmSplash,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\FrmSplash.cs,_CheckApplicationSettings,The following statement contains a magic number: bWSeventToEight.ReportProgress(8' MultiLanguageStrings.GetString(Ressource.FrmSplash' "CheckApplicationSettings.Text"));
Magic Number,OpenCBS.GUI,FrmSplash,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\FrmSplash.cs,_CheckGeneralSettings,The following statement contains a magic number: bWSeventToEight.ReportProgress(9' MultiLanguageStrings.GetString(Ressource.FrmSplash' "CheckAccountingSettings.Text"));
Magic Number,OpenCBS.GUI,FrmSplash,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\FrmSplash.cs,_CheckEnvironnement,The following statement contains a magic number: bWOneToSeven.ReportProgress(7' MultiLanguageStrings.GetString(Ressource.FrmSplash' "CheckRunningEnvironnement.Text"));
Magic Number,OpenCBS.GUI,FrmSplash,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\FrmSplash.cs,_CheckCrystalReports,The following statement contains a magic number: bWOneToSeven.ReportProgress(6' MultiLanguageStrings.GetString(Ressource.FrmSplash' "CheckCrystalReportInstall.Text"));
Magic Number,OpenCBS.GUI,FrmSplash,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\FrmSplash.cs,_CheckDatabaseSchema,The following statement contains a magic number: bWOneToSeven.ReportProgress(5' MultiLanguageStrings.GetString(Ressource.FrmSplash' "CheckDatabaseSchema.Text"));
Magic Number,OpenCBS.GUI,FrmSplash,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\FrmSplash.cs,_CheckDatabaseVersion,The following statement contains a magic number: if (!ServicesProvider.GetInstance().GetDatabaseServices().CheckSQLDatabaseVersion(TechnicalSettings.SoftwareVersion' TechnicalSettings.DatabaseName))              {                  // Automatic backup of database                                    if (Confirm("BackupProcess.Text"))                  {                      bWOneToSeven.ReportProgress(4' MultiLanguageStrings.GetString(Ressource.FrmSplash' "Backup.Text") + " Path: " + UserSettings.BackupPath);                      ServicesProvider.GetInstance()                          .GetDatabaseServices()                          .RawBackup(TechnicalSettings.DatabaseName'                                  TechnicalSettings.SoftwareVersion                                  ' "Upgrade"                                  ' UserSettings.BackupPath                          );                  }                    bWOneToSeven.ReportProgress(4' MultiLanguageStrings.GetString(Ressource.FrmSplash' "CheckDatabaseVersion.Text"));                  _DatabaseUpdateScript();              }
Magic Number,OpenCBS.GUI,FrmSplash,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\FrmSplash.cs,_CheckDatabaseVersion,The following statement contains a magic number: if (!ServicesProvider.GetInstance().GetDatabaseServices().CheckSQLDatabaseVersion(TechnicalSettings.SoftwareVersion' TechnicalSettings.DatabaseName))              {                  // Automatic backup of database                                    if (Confirm("BackupProcess.Text"))                  {                      bWOneToSeven.ReportProgress(4' MultiLanguageStrings.GetString(Ressource.FrmSplash' "Backup.Text") + " Path: " + UserSettings.BackupPath);                      ServicesProvider.GetInstance()                          .GetDatabaseServices()                          .RawBackup(TechnicalSettings.DatabaseName'                                  TechnicalSettings.SoftwareVersion                                  ' "Upgrade"                                  ' UserSettings.BackupPath                          );                  }                    bWOneToSeven.ReportProgress(4' MultiLanguageStrings.GetString(Ressource.FrmSplash' "CheckDatabaseVersion.Text"));                  _DatabaseUpdateScript();              }
Magic Number,OpenCBS.GUI,FrmSplash,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\FrmSplash.cs,_CheckSQLDatabaseConnection,The following statement contains a magic number: bWOneToSeven.ReportProgress(3' MultiLanguageStrings.GetString(Ressource.FrmSplash' "CheckDatabaseConnection.Text"));
Magic Number,OpenCBS.GUI,FrmSplash,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\FrmSplash.cs,_CheckSQLServerConnection,The following statement contains a magic number: bWOneToSeven.ReportProgress(2' MultiLanguageStrings.GetString(Ressource.FrmSplash' "CheckSQLServerConnection.Text"));
Magic Number,OpenCBS.GUI,FrmSplash,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\FrmSplash.cs,_DatabaseUpdateScript,The following statement contains a magic number: oPBMacroProgression.Step = 10;
Magic Number,OpenCBS.GUI,FrmSplash,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\FrmSplash.cs,FrmSplash_UpdateDatabaseEvent,The following statement contains a magic number: bWOneToSeven.ReportProgress(24' updateText);
Magic Number,OpenCBS.GUI,FrmSplash,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\FrmSplash.cs,backgroundWorker_ProgressChanged,The following statement contains a magic number: if(e.ProgressPercentage == 24)              {                  oPBarMicroProgression.Text = e.UserState.ToString();                  oPBarMicroProgression.PerformStep();              }              else              {                  oPBMacroProgression.Text = string.Format("{0} / 9"' e.ProgressPercentage);                  labelConfigurationValue.Text = e.UserState.ToString();                  oPBMacroProgression.PerformStep();              }
Magic Number,OpenCBS.GUI,FrmSplash,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\FrmSplash.cs,InitializeComponent,The following statement contains a magic number: this.oPBMacroProgression.Step = 13;
Magic Number,OpenCBS.GUI,FrmSplash,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\FrmSplash.cs,InitializeComponent,The following statement contains a magic number: this.oPBarMicroProgression.Step = 10;
Magic Number,OpenCBS.GUI,SearchClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Search\SearchClientForm.cs,SearchClientForm,The following statement contains a magic number: test = 2;
Magic Number,OpenCBS.GUI,SearchClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Search\SearchClientForm.cs,DisplayTiers,The following statement contains a magic number: try              {                  Cursor = Cursors.WaitCursor;                    //not active = 0' active = 1' both - 2' none - 3                  int onlyActive = 2;                  if (checkBoxActive.Checked && !checkBoxNotactive.Checked) onlyActive = 1;                  else if (checkBoxNotactive.Checked && !checkBoxActive.Checked) onlyActive = 0;                  else if (!checkBoxNotactive.Checked && !checkBoxActive.Checked) onlyActive = 3;                    if (radioButtonPerson.Checked)                  {                      List<ClientSearchResult> results;                      if (OClientTypes.Village == _clientType)                      {                          results = ServicesProvider.GetInstance().GetClientServices().FindInactivePersons(_currentPageNumber'                              out _numbersTotalPage' out _numberOfRecords' _query);                      }                      else                      {                          results = ServicesProvider.GetInstance().GetClientServices().FindTiers(out _numbersTotalPage' out _numberOfRecords'                              _query' onlyActive' _currentPageNumber' Convert.ToInt32(checkBoxPersons.Checked)'                               Convert.ToInt32(checkBoxGroups.Checked)' Convert.ToInt32(checkBoxVillages.Checked));                      }                      InitializeListViewClientPerson(results);                  }                  else                  {                      List<ClientSearchResult> result = ServicesProvider.GetInstance().GetClientServices().                          FindTiersCorporates(onlyActive' _currentPageNumber' out _numbersTotalPage' out _numberOfRecords' _query);                      InitializeListViewClientCorporate(result);                  }                    labelTitleResult.Text =                       string.Format("{0} ({1})"' MultiLanguageStrings.GetString(Ressource.SearchClientForm' "result.Text")' _numberOfRecords);                  textBoxCurrentlyPage.Text =                       MultiLanguageStrings.GetString(Ressource.SearchClientForm' "nbOfPages.Text") + _currentPageNumber + " / " + _numbersTotalPage;              }              catch (Exception ex)              {                  new frmShowError(CustomExceptionHandler.ShowExceptionText(ex)).ShowDialog();              }              finally              {                  Cursor = Cursors.Default;              }
Magic Number,OpenCBS.GUI,SearchClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Search\SearchClientForm.cs,DisplayTiers,The following statement contains a magic number: try              {                  Cursor = Cursors.WaitCursor;                    //not active = 0' active = 1' both - 2' none - 3                  int onlyActive = 2;                  if (checkBoxActive.Checked && !checkBoxNotactive.Checked) onlyActive = 1;                  else if (checkBoxNotactive.Checked && !checkBoxActive.Checked) onlyActive = 0;                  else if (!checkBoxNotactive.Checked && !checkBoxActive.Checked) onlyActive = 3;                    if (radioButtonPerson.Checked)                  {                      List<ClientSearchResult> results;                      if (OClientTypes.Village == _clientType)                      {                          results = ServicesProvider.GetInstance().GetClientServices().FindInactivePersons(_currentPageNumber'                              out _numbersTotalPage' out _numberOfRecords' _query);                      }                      else                      {                          results = ServicesProvider.GetInstance().GetClientServices().FindTiers(out _numbersTotalPage' out _numberOfRecords'                              _query' onlyActive' _currentPageNumber' Convert.ToInt32(checkBoxPersons.Checked)'                               Convert.ToInt32(checkBoxGroups.Checked)' Convert.ToInt32(checkBoxVillages.Checked));                      }                      InitializeListViewClientPerson(results);                  }                  else                  {                      List<ClientSearchResult> result = ServicesProvider.GetInstance().GetClientServices().                          FindTiersCorporates(onlyActive' _currentPageNumber' out _numbersTotalPage' out _numberOfRecords' _query);                      InitializeListViewClientCorporate(result);                  }                    labelTitleResult.Text =                       string.Format("{0} ({1})"' MultiLanguageStrings.GetString(Ressource.SearchClientForm' "result.Text")' _numberOfRecords);                  textBoxCurrentlyPage.Text =                       MultiLanguageStrings.GetString(Ressource.SearchClientForm' "nbOfPages.Text") + _currentPageNumber + " / " + _numbersTotalPage;              }              catch (Exception ex)              {                  new frmShowError(CustomExceptionHandler.ShowExceptionText(ex)).ShowDialog();              }              finally              {                  Cursor = Cursors.Default;              }
Magic Number,OpenCBS.GUI,SearchClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Search\SearchClientForm.cs,InitializeListViewClientPerson,The following statement contains a magic number: foreach (ClientSearchResult result in pResult)              {                  var item = new ListViewItem();                  item.ImageIndex = result.Type == OClientTypes.Person ? 4 : 5;                  item.Tag = result;                  item.SubItems.Add(result.Name);                  item.SubItems.Add(GetString(result.Active.ToString()));                  item.SubItems.Add(result.PassportNumber);                  item.SubItems.Add(result.Type == OClientTypes.Village ? "-" : result.LoanCycle.ToString());                  item.SubItems.Add(result.District);                  item.SubItems.Add(result.City);                  item.SubItems.Add(result.MemberOf);                  if (result.BadClient) item.BackColor = Color.Red;                  listViewClient.Items.Add(item);              }
Magic Number,OpenCBS.GUI,SearchClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Search\SearchClientForm.cs,InitializeListViewClientPerson,The following statement contains a magic number: foreach (ClientSearchResult result in pResult)              {                  var item = new ListViewItem();                  item.ImageIndex = result.Type == OClientTypes.Person ? 4 : 5;                  item.Tag = result;                  item.SubItems.Add(result.Name);                  item.SubItems.Add(GetString(result.Active.ToString()));                  item.SubItems.Add(result.PassportNumber);                  item.SubItems.Add(result.Type == OClientTypes.Village ? "-" : result.LoanCycle.ToString());                  item.SubItems.Add(result.District);                  item.SubItems.Add(result.City);                  item.SubItems.Add(result.MemberOf);                  if (result.BadClient) item.BackColor = Color.Red;                  listViewClient.Items.Add(item);              }
Magic Number,OpenCBS.GUI,SearchClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Search\SearchClientForm.cs,InitializeListViewClientCorporate,The following statement contains a magic number: foreach (ClientSearchResult result in pResult)              {                  var item = new ListViewItem();                  item.ImageIndex = result.Type == OClientTypes.Person ? 4 : 5;                  item.Tag = result;                  item.SubItems.Add(result.Name);                  item.SubItems.Add(result.Active.ToString());                  item.SubItems.Add(result.Siret);                  item.SubItems.Add(Convert.ToString(result.LoanCycle));                  item.SubItems.Add(result.District);                  item.SubItems.Add(result.City);                  if (result.BadClient) item.BackColor = Color.Red;                  listViewClient.Items.Add(item);              }
Magic Number,OpenCBS.GUI,SearchClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Search\SearchClientForm.cs,InitializeListViewClientCorporate,The following statement contains a magic number: foreach (ClientSearchResult result in pResult)              {                  var item = new ListViewItem();                  item.ImageIndex = result.Type == OClientTypes.Person ? 4 : 5;                  item.Tag = result;                  item.SubItems.Add(result.Name);                  item.SubItems.Add(result.Active.ToString());                  item.SubItems.Add(result.Siret);                  item.SubItems.Add(Convert.ToString(result.LoanCycle));                  item.SubItems.Add(result.District);                  item.SubItems.Add(result.City);                  if (result.BadClient) item.BackColor = Color.Red;                  listViewClient.Items.Add(item);              }
Magic Number,OpenCBS.GUI,SearchClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Search\SearchClientForm.cs,Dispose,The following statement contains a magic number: if (test == 2) _theUniqueInstance3 = null;
Magic Number,OpenCBS.GUI,SearchClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Search\SearchClientForm.cs,InitializeComponent,The following statement contains a magic number: this.labelTitleResult.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(81))))' ((int)(((byte)(152)))));
Magic Number,OpenCBS.GUI,SearchClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Search\SearchClientForm.cs,InitializeComponent,The following statement contains a magic number: this.labelTitleResult.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(81))))' ((int)(((byte)(152)))));
Magic Number,OpenCBS.GUI,SearchClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Search\SearchClientForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Controls.Add(this.groupBoxButtonBottom' 0' 3);
Magic Number,OpenCBS.GUI,SearchClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Search\SearchClientForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Controls.Add(this.listViewClient' 0' 2);
Magic Number,OpenCBS.GUI,SearchClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Search\SearchClientForm.cs,InitializeComponent,The following statement contains a magic number: this.textBoxQuery.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56)))));
Magic Number,OpenCBS.GUI,SearchClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Search\SearchClientForm.cs,InitializeComponent,The following statement contains a magic number: this.textBoxQuery.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56)))));
Magic Number,OpenCBS.GUI,SearchClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Search\SearchClientForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonCancel.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56)))));
Magic Number,OpenCBS.GUI,SearchClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Search\SearchClientForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonCancel.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56)))));
Magic Number,OpenCBS.GUI,SearchClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Search\SearchClientForm.cs,InitializeComponent,The following statement contains a magic number: this.imageListSort.Images.SetKeyName(2' "theme1.1_bouton_down_small.png");
Magic Number,OpenCBS.GUI,SearchClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Search\SearchClientForm.cs,InitializeComponent,The following statement contains a magic number: this.imageListSort.Images.SetKeyName(3' "theme1.1_bouton_up_small.png");
Magic Number,OpenCBS.GUI,SearchClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Search\SearchClientForm.cs,InitializeComponent,The following statement contains a magic number: this.imageListSort.Images.SetKeyName(4' "new_client.png");
Magic Number,OpenCBS.GUI,SearchClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Search\SearchClientForm.cs,InitializeComponent,The following statement contains a magic number: this.imageListSort.Images.SetKeyName(5' "new_group.png");
Magic Number,OpenCBS.GUI,SearchClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Search\SearchClientForm.cs,HandleTierSelect,The following statement contains a magic number: try              {                  _client = ServicesProvider.GetInstance().GetClientServices().FindTiers(pClient.Id' pClient.Type);                    /*                   * This code is for loading compulsory savings. Compulsory savings are being                    * loaded here because in LoanManager class SavingsManager trigers problems.                   * Ruslan Kazakov                   */                  if (_client.Projects != null)                      foreach (Project project in _client.Projects)                          if (project.Credits != null)                              foreach (Loan loan in project.Credits)                                  loan.CompulsorySavings = ServicesProvider.GetInstance().GetSavingServices().GetSavingForLoan(loan.Id' true);                    if (test != 2)                  {                      var mainForm = (MainView) Application.OpenForms[0];                      if (pClient.Type == OClientTypes.Person)                          mainForm.InitializePersonForm((Person)_client' null);                      if (pClient.Type == OClientTypes.Group)                          mainForm.InitializeGroupForm((Group)_client' null);                      if (pClient.Type == OClientTypes.Corporate)                          mainForm.InitializeCorporateForm((Corporate)_client' null);                      if (OClientTypes.Village == pClient.Type)                          mainForm.InitializeVillageForm((Village)_client);                  }                  else DialogResult = DialogResult.OK;                  Close();              }              catch (Exception ex)              {                  new frmShowError(CustomExceptionHandler.ShowExceptionText(ex)).ShowDialog();              }
Magic Number,OpenCBS.GUI,SearchClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Search\SearchClientForm.cs,radioButtonPerson_CheckedChanged,The following statement contains a magic number: listViewClient.Columns[3].Name = "PassportNumber";
Magic Number,OpenCBS.GUI,SearchClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Search\SearchClientForm.cs,radioButtonPerson_CheckedChanged,The following statement contains a magic number: listViewClient.Columns[3].Text = MultiLanguageStrings.GetString(Ressource.SearchClientForm' "PassportNumber.Text");
Magic Number,OpenCBS.GUI,SearchClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Search\SearchClientForm.cs,radioButtonCorporate_CheckedChanged,The following statement contains a magic number: listViewClient.Columns[3].Name = "Siret";
Magic Number,OpenCBS.GUI,SearchClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Search\SearchClientForm.cs,radioButtonCorporate_CheckedChanged,The following statement contains a magic number: listViewClient.Columns[3].Text = "Siret";
Magic Number,OpenCBS.GUI,SearchClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Search\SearchClientForm.cs,listViewClient_ColumnClick,The following statement contains a magic number: if (listViewClient.Items.Count > 0)                  listViewClient.Columns[Sorter.ByColumn].ImageIndex = listViewClient.Sorting == SortOrder.Ascending ? 2 : 3;
Magic Number,OpenCBS.GUI,SearchClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Search\SearchClientForm.cs,listViewClient_ColumnClick,The following statement contains a magic number: if (listViewClient.Items.Count > 0)                  listViewClient.Columns[Sorter.ByColumn].ImageIndex = listViewClient.Sorting == SortOrder.Ascending ? 2 : 3;
Magic Number,OpenCBS.GUI,ApplicationDate,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Configuration\ApplicationDate.cs,InitializeComponent,The following statement contains a magic number: this.mcalCurrentDate.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(224))))' ((int)(((byte)(224))))' ((int)(((byte)(224)))));
Magic Number,OpenCBS.GUI,ApplicationDate,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Configuration\ApplicationDate.cs,InitializeComponent,The following statement contains a magic number: this.mcalCurrentDate.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(224))))' ((int)(((byte)(224))))' ((int)(((byte)(224)))));
Magic Number,OpenCBS.GUI,ApplicationDate,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Configuration\ApplicationDate.cs,InitializeComponent,The following statement contains a magic number: this.mcalCurrentDate.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(224))))' ((int)(((byte)(224))))' ((int)(((byte)(224)))));
Magic Number,OpenCBS.GUI,DateTimeUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\DateTimeUserControl.cs,InitializeComponent,The following statement contains a magic number: this.dateTimePickerDate.CalendarForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56)))));
Magic Number,OpenCBS.GUI,DateTimeUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\DateTimeUserControl.cs,InitializeComponent,The following statement contains a magic number: this.dateTimePickerDate.CalendarForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56)))));
Magic Number,OpenCBS.GUI.Accounting,AccountingClosureForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\AccountingClosureForm.cs,InitializeComponent,The following statement contains a magic number: this.lblTitle.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(81))))' ((int)(((byte)(152)))));
Magic Number,OpenCBS.GUI.Accounting,AccountingClosureForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\AccountingClosureForm.cs,InitializeComponent,The following statement contains a magic number: this.lblTitle.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(81))))' ((int)(((byte)(152)))));
Magic Number,OpenCBS.GUI.Accounting,AccountingJournals,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\AccountingJournals.cs,InitializeClosureOptions,The following statement contains a magic number: if (_mode == 1)              {                  _closureItems.Items.Add(new ClosureOption { Name = GetString("CreditAccruedInterests.Text")' Id = 0 });                  _closureItems.Items.Add(new ClosureOption { Name = GetString("CreditOverdueProcessing.Text")' Id = 1 });                  _closureItems.Items.Add(new ClosureOption { Name = GetString("CreditLoanLossProvision.Text")' Id = 2 });                  _closureItems.Items.Add(new ClosureOption { Name = GetString("SavingsEventsGeneration.Text")' Id = 3 });                  btnView.Visible = false;              }
Magic Number,OpenCBS.GUI.Accounting,AccountingJournals,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\AccountingJournals.cs,InitializeClosureOptions,The following statement contains a magic number: if (_mode == 1)              {                  _closureItems.Items.Add(new ClosureOption { Name = GetString("CreditAccruedInterests.Text")' Id = 0 });                  _closureItems.Items.Add(new ClosureOption { Name = GetString("CreditOverdueProcessing.Text")' Id = 1 });                  _closureItems.Items.Add(new ClosureOption { Name = GetString("CreditLoanLossProvision.Text")' Id = 2 });                  _closureItems.Items.Add(new ClosureOption { Name = GetString("SavingsEventsGeneration.Text")' Id = 3 });                  btnView.Visible = false;              }
Magic Number,OpenCBS.GUI.Accounting,AccountingJournals,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\AccountingJournals.cs,InitializeClosureOptions,The following statement contains a magic number: if (_mode == 0)              {                  _closureItems.Items.Add(new ClosureOption { Name = GetString("CreditSavingsCancelledTransaction.Text")' Id = 0 });                  _closureItems.Items.Add(new ClosureOption { Name = GetString("CreditAccountingClosure.Text")' Id = 1 });                  _closureItems.Items.Add(new ClosureOption { Name = GetString("SavingsAccountingClosure.Text")' Id = 2 });                  _closureItems.Items.Add(new ClosureOption { Name = GetString("ManualEntries.Text")' Id = 3 });                  _closureItems.Items.Add(new ClosureOption { Name = GetString("TellerManagement.Text")' Id = 4 });              }
Magic Number,OpenCBS.GUI.Accounting,AccountingJournals,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\AccountingJournals.cs,InitializeClosureOptions,The following statement contains a magic number: if (_mode == 0)              {                  _closureItems.Items.Add(new ClosureOption { Name = GetString("CreditSavingsCancelledTransaction.Text")' Id = 0 });                  _closureItems.Items.Add(new ClosureOption { Name = GetString("CreditAccountingClosure.Text")' Id = 1 });                  _closureItems.Items.Add(new ClosureOption { Name = GetString("SavingsAccountingClosure.Text")' Id = 2 });                  _closureItems.Items.Add(new ClosureOption { Name = GetString("ManualEntries.Text")' Id = 3 });                  _closureItems.Items.Add(new ClosureOption { Name = GetString("TellerManagement.Text")' Id = 4 });              }
Magic Number,OpenCBS.GUI.Accounting,AccountingJournals,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\AccountingJournals.cs,InitializeClosureOptions,The following statement contains a magic number: if (_mode == 0)              {                  _closureItems.Items.Add(new ClosureOption { Name = GetString("CreditSavingsCancelledTransaction.Text")' Id = 0 });                  _closureItems.Items.Add(new ClosureOption { Name = GetString("CreditAccountingClosure.Text")' Id = 1 });                  _closureItems.Items.Add(new ClosureOption { Name = GetString("SavingsAccountingClosure.Text")' Id = 2 });                  _closureItems.Items.Add(new ClosureOption { Name = GetString("ManualEntries.Text")' Id = 3 });                  _closureItems.Items.Add(new ClosureOption { Name = GetString("TellerManagement.Text")' Id = 4 });              }
Magic Number,OpenCBS.GUI.Accounting,AccountingJournals,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\AccountingJournals.cs,BtnRunClick,The following statement contains a magic number: if (_mode == 0)              {                  _closureOptions = new ClosureOptions                                        {                                            DoAccrued = false'                                            DoOverdue = false'                                            DoProvision = false'                                            DoSavingEvents = false'                                            DoReversalTransactions =                                                clbxFields.CheckedItems.Contains(_closureItems.Items[0])'                                            DoLoanClosure = clbxFields.CheckedItems.Contains(_closureItems.Items[1])'                                            DoSavingClosure = clbxFields.CheckedItems.Contains(_closureItems.Items[2])'                                            DoManualEntries = clbxFields.CheckedItems.Contains(_closureItems.Items[3])'                                            DoTellerManagementClosure = clbxFields.CheckedItems.Contains(_closureItems.Items[4])                                        };              }
Magic Number,OpenCBS.GUI.Accounting,AccountingJournals,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\AccountingJournals.cs,BtnRunClick,The following statement contains a magic number: if (_mode == 0)              {                  _closureOptions = new ClosureOptions                                        {                                            DoAccrued = false'                                            DoOverdue = false'                                            DoProvision = false'                                            DoSavingEvents = false'                                            DoReversalTransactions =                                                clbxFields.CheckedItems.Contains(_closureItems.Items[0])'                                            DoLoanClosure = clbxFields.CheckedItems.Contains(_closureItems.Items[1])'                                            DoSavingClosure = clbxFields.CheckedItems.Contains(_closureItems.Items[2])'                                            DoManualEntries = clbxFields.CheckedItems.Contains(_closureItems.Items[3])'                                            DoTellerManagementClosure = clbxFields.CheckedItems.Contains(_closureItems.Items[4])                                        };              }
Magic Number,OpenCBS.GUI.Accounting,AccountingJournals,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\AccountingJournals.cs,BtnRunClick,The following statement contains a magic number: if (_mode == 0)              {                  _closureOptions = new ClosureOptions                                        {                                            DoAccrued = false'                                            DoOverdue = false'                                            DoProvision = false'                                            DoSavingEvents = false'                                            DoReversalTransactions =                                                clbxFields.CheckedItems.Contains(_closureItems.Items[0])'                                            DoLoanClosure = clbxFields.CheckedItems.Contains(_closureItems.Items[1])'                                            DoSavingClosure = clbxFields.CheckedItems.Contains(_closureItems.Items[2])'                                            DoManualEntries = clbxFields.CheckedItems.Contains(_closureItems.Items[3])'                                            DoTellerManagementClosure = clbxFields.CheckedItems.Contains(_closureItems.Items[4])                                        };              }
Magic Number,OpenCBS.GUI.Accounting,AccountingJournals,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\AccountingJournals.cs,BtnRunClick,The following statement contains a magic number: if (_mode == 1)              {                  //generaion of events                  _closureOptions = new ClosureOptions                                        {                                            DoAccrued = clbxFields.CheckedItems.Contains(_closureItems.Items[0])'                                            DoOverdue = clbxFields.CheckedItems.Contains(_closureItems.Items[1])'                                            DoProvision = clbxFields.CheckedItems.Contains(_closureItems.Items[2])'                                            DoSavingEvents = clbxFields.CheckedItems.Contains(_closureItems.Items[3])'                                            DoReversalTransactions = false'                                            DoLoanClosure = false'                                            DoSavingClosure = false'                                            DoManualEntries = false                                        };              }
Magic Number,OpenCBS.GUI.Accounting,AccountingJournals,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\AccountingJournals.cs,BtnRunClick,The following statement contains a magic number: if (_mode == 1)              {                  //generaion of events                  _closureOptions = new ClosureOptions                                        {                                            DoAccrued = clbxFields.CheckedItems.Contains(_closureItems.Items[0])'                                            DoOverdue = clbxFields.CheckedItems.Contains(_closureItems.Items[1])'                                            DoProvision = clbxFields.CheckedItems.Contains(_closureItems.Items[2])'                                            DoSavingEvents = clbxFields.CheckedItems.Contains(_closureItems.Items[3])'                                            DoReversalTransactions = false'                                            DoLoanClosure = false'                                            DoSavingClosure = false'                                            DoManualEntries = false                                        };              }
Magic Number,OpenCBS.GUI.Accounting,AccountingJournals,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\AccountingJournals.cs,InitializeComponent,The following statement contains a magic number: this.timerClosure.Interval = 5;
Magic Number,OpenCBS.GUI.Accounting,AccountView,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\AccountView.cs,_InitializeComboBoxCurrencies,The following statement contains a magic number: if (currencies.Count < 2)              {                  lblCurrency.Visible = false;                  cmbCurrencies.Visible = false;                                    lvBooking.Columns.Remove(columnHeaderAmountEC);                  lvBooking.Columns.Remove(columnHeaderRate);                  _pivotCurrency = currencies[0];                  columnHeaderCredit.Text = MultiLanguageStrings.GetString(Ressource.AccountView' "CreditColumn.Text") + @" " + _pivotCurrency.Name;                  columnHeaderDebit.Text = MultiLanguageStrings.GetString(Ressource.AccountView' "DebitColumn.Text") + @" " + _pivotCurrency.Name;                  _InitializeComboBoxCurrencies(currencies);              }              else              {                  _InitializeComboBoxCurrencies(currencies);                  columnHeaderDebit.Text = MultiLanguageStrings.GetString(Ressource.AccountView' "DebitColumn.Text") + @" " + ((Currency) cmbCurrencies.SelectedItem).Name;                  columnHeaderAmountEC.Text = MultiLanguageStrings.GetString(Ressource.AccountView' "AmountColumn.Text") + @" " + _pivotCurrency.Name;              }
Magic Number,OpenCBS.GUI.Accounting,AccountView,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\AccountView.cs,InitializeComponent,The following statement contains a magic number: this.lblTitle.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(81))))' ((int)(((byte)(152)))));
Magic Number,OpenCBS.GUI.Accounting,AccountView,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\AccountView.cs,InitializeComponent,The following statement contains a magic number: this.lblTitle.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(81))))' ((int)(((byte)(152)))));
Magic Number,OpenCBS.GUI.Accounting,AddBooking,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\AddBooking.cs,textBoxAmount_KeyPress,The following statement contains a magic number: if ((keyCode >= 48 && keyCode <= 57)                   || (keyCode == 8)                   || (Char.IsControl(e.KeyChar)                   && e.KeyChar                  != ((char)Keys.V | (char)Keys.ControlKey))                   || (Char.IsControl(e.KeyChar) && e.KeyChar                   != ((char)Keys.C | (char)Keys.ControlKey))                   || (e.KeyChar.ToString() == System.Globalization.NumberFormatInfo.CurrentInfo.NumberDecimalSeparator))              {                  e.Handled = false;              }              else                  e.Handled = true;
Magic Number,OpenCBS.GUI.Accounting,AddBooking,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\AddBooking.cs,textBoxAmount_KeyPress,The following statement contains a magic number: if ((keyCode >= 48 && keyCode <= 57)                   || (keyCode == 8)                   || (Char.IsControl(e.KeyChar)                   && e.KeyChar                  != ((char)Keys.V | (char)Keys.ControlKey))                   || (Char.IsControl(e.KeyChar) && e.KeyChar                   != ((char)Keys.C | (char)Keys.ControlKey))                   || (e.KeyChar.ToString() == System.Globalization.NumberFormatInfo.CurrentInfo.NumberDecimalSeparator))              {                  e.Handled = false;              }              else                  e.Handled = true;
Magic Number,OpenCBS.GUI.Accounting,AddBooking,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\AddBooking.cs,textBoxAmount_KeyPress,The following statement contains a magic number: if ((keyCode >= 48 && keyCode <= 57)                   || (keyCode == 8)                   || (Char.IsControl(e.KeyChar)                   && e.KeyChar                  != ((char)Keys.V | (char)Keys.ControlKey))                   || (Char.IsControl(e.KeyChar) && e.KeyChar                   != ((char)Keys.C | (char)Keys.ControlKey))                   || (e.KeyChar.ToString() == System.Globalization.NumberFormatInfo.CurrentInfo.NumberDecimalSeparator))              {                  e.Handled = false;              }              else                  e.Handled = true;
Magic Number,OpenCBS.GUI.Accounting,AddBooking,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\AddBooking.cs,InitializeComponent,The following statement contains a magic number: this.cbBookings.DropDownWidth = 480;
Magic Number,OpenCBS.GUI.Accounting,ChartOfAccountsForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\ChartOfAccountsForm.cs,IntializeTreeViewChartOfAccounts,The following statement contains a magic number: tlvAccounts.RowFormatter = delegate(OLVListItem o)              {                  Account account = (Account)o.RowObject;                  if (account.Id == -1)                  {                      o.ForeColor = Color.FromArgb(0' 88' 56);                      o.Font = new Font("Arial"' 9);                  }              };
Magic Number,OpenCBS.GUI.Accounting,ChartOfAccountsForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\ChartOfAccountsForm.cs,IntializeTreeViewChartOfAccounts,The following statement contains a magic number: tlvAccounts.RowFormatter = delegate(OLVListItem o)              {                  Account account = (Account)o.RowObject;                  if (account.Id == -1)                  {                      o.ForeColor = Color.FromArgb(0' 88' 56);                      o.Font = new Font("Arial"' 9);                  }              };
Magic Number,OpenCBS.GUI.Accounting,ChartOfAccountsForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\ChartOfAccountsForm.cs,IntializeTreeViewChartOfAccounts,The following statement contains a magic number: tlvAccounts.RowFormatter = delegate(OLVListItem o)              {                  Account account = (Account)o.RowObject;                  if (account.Id == -1)                  {                      o.ForeColor = Color.FromArgb(0' 88' 56);                      o.Font = new Font("Arial"' 9);                  }              };
Magic Number,OpenCBS.GUI.Accounting,ChartOfAccountsForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\ChartOfAccountsForm.cs,InitializeComponent,The following statement contains a magic number: this._labelTitle.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(81))))' ((int)(((byte)(152)))));
Magic Number,OpenCBS.GUI.Accounting,ChartOfAccountsForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\ChartOfAccountsForm.cs,InitializeComponent,The following statement contains a magic number: this._labelTitle.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(81))))' ((int)(((byte)(152)))));
Magic Number,OpenCBS.GUI.Accounting,ChartOfAccountsForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\ChartOfAccountsForm.cs,ImportAccounts,The following statement contains a magic number: if (fileDialog.ShowDialog() == DialogResult.OK)              {                  try                  {                      bool deleteRelated = Confirm(MultiLanguageStrings.GetString(Ressource.ChartOfAccountsForm' "ToDeleteTheChartOfAccounts.Text"));                        CsvImportExport importer = new CsvImportExport();                      string filePath = fileDialog.FileName;                      List<Account> accounts = new List<Account>();                      ChartOfAccountsServices coaServices = ServicesProvider.GetInstance().GetChartOfAccountsServices();                      if(deleteRelated)                      {                          IEnumerable<string> relatedDatas = coaServices.HasRelatedDatas();                          if(relatedDatas != null && relatedDatas.Any())                          {                              string[] domainObjects =                                  relatedDatas                                      .Select(                                          r => GetString(string.Format("RelatedData.{0}"' r))                                      ).Distinct().ToArray();                                string message =                                  string.Format(                                      GetString("RelatedDataExists.Text")'                                      string.Join("'"' domainObjects));                              if(!Confirm(message)) return;                          }                      }                      importer.Import(filePath' items =>                                                    {                                                        Account account = new Account                                                        {                                                            Id = Convert.ToInt32(items[0])'                                                            Number = items[1]'                                                            Label = items[2]'                                                            DebitPlus = Convert.ToBoolean(items[3])'                                                            TypeCode = items[4]'                                                            AccountCategory = (OAccountCategories)(Convert.ToInt32(items[5]))'                                                            Type = Convert.ToBoolean(items[6])'                                                            ParentAccountId = items[5].ToUpper() == "0" ? null : (int?)Convert.ToInt32(items[7])'                                                            Left = Convert.ToInt32(items[8])'                                                            Right = Convert.ToInt32(items[9])                                                        };                                                        accounts.Add(account);                                                    });                                            coaServices.InsertCoa(accounts.ToArray()' deleteRelated);                      IntializeTreeViewChartOfAccounts();                  }                  catch (Exception ex)                  {                      new frmShowError(CustomExceptionHandler.ShowExceptionText(ex)).ShowDialog();                  }              }
Magic Number,OpenCBS.GUI.Accounting,ChartOfAccountsForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\ChartOfAccountsForm.cs,ImportAccounts,The following statement contains a magic number: if (fileDialog.ShowDialog() == DialogResult.OK)              {                  try                  {                      bool deleteRelated = Confirm(MultiLanguageStrings.GetString(Ressource.ChartOfAccountsForm' "ToDeleteTheChartOfAccounts.Text"));                        CsvImportExport importer = new CsvImportExport();                      string filePath = fileDialog.FileName;                      List<Account> accounts = new List<Account>();                      ChartOfAccountsServices coaServices = ServicesProvider.GetInstance().GetChartOfAccountsServices();                      if(deleteRelated)                      {                          IEnumerable<string> relatedDatas = coaServices.HasRelatedDatas();                          if(relatedDatas != null && relatedDatas.Any())                          {                              string[] domainObjects =                                  relatedDatas                                      .Select(                                          r => GetString(string.Format("RelatedData.{0}"' r))                                      ).Distinct().ToArray();                                string message =                                  string.Format(                                      GetString("RelatedDataExists.Text")'                                      string.Join("'"' domainObjects));                              if(!Confirm(message)) return;                          }                      }                      importer.Import(filePath' items =>                                                    {                                                        Account account = new Account                                                        {                                                            Id = Convert.ToInt32(items[0])'                                                            Number = items[1]'                                                            Label = items[2]'                                                            DebitPlus = Convert.ToBoolean(items[3])'                                                            TypeCode = items[4]'                                                            AccountCategory = (OAccountCategories)(Convert.ToInt32(items[5]))'                                                            Type = Convert.ToBoolean(items[6])'                                                            ParentAccountId = items[5].ToUpper() == "0" ? null : (int?)Convert.ToInt32(items[7])'                                                            Left = Convert.ToInt32(items[8])'                                                            Right = Convert.ToInt32(items[9])                                                        };                                                        accounts.Add(account);                                                    });                                            coaServices.InsertCoa(accounts.ToArray()' deleteRelated);                      IntializeTreeViewChartOfAccounts();                  }                  catch (Exception ex)                  {                      new frmShowError(CustomExceptionHandler.ShowExceptionText(ex)).ShowDialog();                  }              }
Magic Number,OpenCBS.GUI.Accounting,ChartOfAccountsForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\ChartOfAccountsForm.cs,ImportAccounts,The following statement contains a magic number: if (fileDialog.ShowDialog() == DialogResult.OK)              {                  try                  {                      bool deleteRelated = Confirm(MultiLanguageStrings.GetString(Ressource.ChartOfAccountsForm' "ToDeleteTheChartOfAccounts.Text"));                        CsvImportExport importer = new CsvImportExport();                      string filePath = fileDialog.FileName;                      List<Account> accounts = new List<Account>();                      ChartOfAccountsServices coaServices = ServicesProvider.GetInstance().GetChartOfAccountsServices();                      if(deleteRelated)                      {                          IEnumerable<string> relatedDatas = coaServices.HasRelatedDatas();                          if(relatedDatas != null && relatedDatas.Any())                          {                              string[] domainObjects =                                  relatedDatas                                      .Select(                                          r => GetString(string.Format("RelatedData.{0}"' r))                                      ).Distinct().ToArray();                                string message =                                  string.Format(                                      GetString("RelatedDataExists.Text")'                                      string.Join("'"' domainObjects));                              if(!Confirm(message)) return;                          }                      }                      importer.Import(filePath' items =>                                                    {                                                        Account account = new Account                                                        {                                                            Id = Convert.ToInt32(items[0])'                                                            Number = items[1]'                                                            Label = items[2]'                                                            DebitPlus = Convert.ToBoolean(items[3])'                                                            TypeCode = items[4]'                                                            AccountCategory = (OAccountCategories)(Convert.ToInt32(items[5]))'                                                            Type = Convert.ToBoolean(items[6])'                                                            ParentAccountId = items[5].ToUpper() == "0" ? null : (int?)Convert.ToInt32(items[7])'                                                            Left = Convert.ToInt32(items[8])'                                                            Right = Convert.ToInt32(items[9])                                                        };                                                        accounts.Add(account);                                                    });                                            coaServices.InsertCoa(accounts.ToArray()' deleteRelated);                      IntializeTreeViewChartOfAccounts();                  }                  catch (Exception ex)                  {                      new frmShowError(CustomExceptionHandler.ShowExceptionText(ex)).ShowDialog();                  }              }
Magic Number,OpenCBS.GUI.Accounting,ChartOfAccountsForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\ChartOfAccountsForm.cs,ImportAccounts,The following statement contains a magic number: if (fileDialog.ShowDialog() == DialogResult.OK)              {                  try                  {                      bool deleteRelated = Confirm(MultiLanguageStrings.GetString(Ressource.ChartOfAccountsForm' "ToDeleteTheChartOfAccounts.Text"));                        CsvImportExport importer = new CsvImportExport();                      string filePath = fileDialog.FileName;                      List<Account> accounts = new List<Account>();                      ChartOfAccountsServices coaServices = ServicesProvider.GetInstance().GetChartOfAccountsServices();                      if(deleteRelated)                      {                          IEnumerable<string> relatedDatas = coaServices.HasRelatedDatas();                          if(relatedDatas != null && relatedDatas.Any())                          {                              string[] domainObjects =                                  relatedDatas                                      .Select(                                          r => GetString(string.Format("RelatedData.{0}"' r))                                      ).Distinct().ToArray();                                string message =                                  string.Format(                                      GetString("RelatedDataExists.Text")'                                      string.Join("'"' domainObjects));                              if(!Confirm(message)) return;                          }                      }                      importer.Import(filePath' items =>                                                    {                                                        Account account = new Account                                                        {                                                            Id = Convert.ToInt32(items[0])'                                                            Number = items[1]'                                                            Label = items[2]'                                                            DebitPlus = Convert.ToBoolean(items[3])'                                                            TypeCode = items[4]'                                                            AccountCategory = (OAccountCategories)(Convert.ToInt32(items[5]))'                                                            Type = Convert.ToBoolean(items[6])'                                                            ParentAccountId = items[5].ToUpper() == "0" ? null : (int?)Convert.ToInt32(items[7])'                                                            Left = Convert.ToInt32(items[8])'                                                            Right = Convert.ToInt32(items[9])                                                        };                                                        accounts.Add(account);                                                    });                                            coaServices.InsertCoa(accounts.ToArray()' deleteRelated);                      IntializeTreeViewChartOfAccounts();                  }                  catch (Exception ex)                  {                      new frmShowError(CustomExceptionHandler.ShowExceptionText(ex)).ShowDialog();                  }              }
Magic Number,OpenCBS.GUI.Accounting,ChartOfAccountsForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\ChartOfAccountsForm.cs,ImportAccounts,The following statement contains a magic number: if (fileDialog.ShowDialog() == DialogResult.OK)              {                  try                  {                      bool deleteRelated = Confirm(MultiLanguageStrings.GetString(Ressource.ChartOfAccountsForm' "ToDeleteTheChartOfAccounts.Text"));                        CsvImportExport importer = new CsvImportExport();                      string filePath = fileDialog.FileName;                      List<Account> accounts = new List<Account>();                      ChartOfAccountsServices coaServices = ServicesProvider.GetInstance().GetChartOfAccountsServices();                      if(deleteRelated)                      {                          IEnumerable<string> relatedDatas = coaServices.HasRelatedDatas();                          if(relatedDatas != null && relatedDatas.Any())                          {                              string[] domainObjects =                                  relatedDatas                                      .Select(                                          r => GetString(string.Format("RelatedData.{0}"' r))                                      ).Distinct().ToArray();                                string message =                                  string.Format(                                      GetString("RelatedDataExists.Text")'                                      string.Join("'"' domainObjects));                              if(!Confirm(message)) return;                          }                      }                      importer.Import(filePath' items =>                                                    {                                                        Account account = new Account                                                        {                                                            Id = Convert.ToInt32(items[0])'                                                            Number = items[1]'                                                            Label = items[2]'                                                            DebitPlus = Convert.ToBoolean(items[3])'                                                            TypeCode = items[4]'                                                            AccountCategory = (OAccountCategories)(Convert.ToInt32(items[5]))'                                                            Type = Convert.ToBoolean(items[6])'                                                            ParentAccountId = items[5].ToUpper() == "0" ? null : (int?)Convert.ToInt32(items[7])'                                                            Left = Convert.ToInt32(items[8])'                                                            Right = Convert.ToInt32(items[9])                                                        };                                                        accounts.Add(account);                                                    });                                            coaServices.InsertCoa(accounts.ToArray()' deleteRelated);                      IntializeTreeViewChartOfAccounts();                  }                  catch (Exception ex)                  {                      new frmShowError(CustomExceptionHandler.ShowExceptionText(ex)).ShowDialog();                  }              }
Magic Number,OpenCBS.GUI.Accounting,ChartOfAccountsForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\ChartOfAccountsForm.cs,ImportAccounts,The following statement contains a magic number: if (fileDialog.ShowDialog() == DialogResult.OK)              {                  try                  {                      bool deleteRelated = Confirm(MultiLanguageStrings.GetString(Ressource.ChartOfAccountsForm' "ToDeleteTheChartOfAccounts.Text"));                        CsvImportExport importer = new CsvImportExport();                      string filePath = fileDialog.FileName;                      List<Account> accounts = new List<Account>();                      ChartOfAccountsServices coaServices = ServicesProvider.GetInstance().GetChartOfAccountsServices();                      if(deleteRelated)                      {                          IEnumerable<string> relatedDatas = coaServices.HasRelatedDatas();                          if(relatedDatas != null && relatedDatas.Any())                          {                              string[] domainObjects =                                  relatedDatas                                      .Select(                                          r => GetString(string.Format("RelatedData.{0}"' r))                                      ).Distinct().ToArray();                                string message =                                  string.Format(                                      GetString("RelatedDataExists.Text")'                                      string.Join("'"' domainObjects));                              if(!Confirm(message)) return;                          }                      }                      importer.Import(filePath' items =>                                                    {                                                        Account account = new Account                                                        {                                                            Id = Convert.ToInt32(items[0])'                                                            Number = items[1]'                                                            Label = items[2]'                                                            DebitPlus = Convert.ToBoolean(items[3])'                                                            TypeCode = items[4]'                                                            AccountCategory = (OAccountCategories)(Convert.ToInt32(items[5]))'                                                            Type = Convert.ToBoolean(items[6])'                                                            ParentAccountId = items[5].ToUpper() == "0" ? null : (int?)Convert.ToInt32(items[7])'                                                            Left = Convert.ToInt32(items[8])'                                                            Right = Convert.ToInt32(items[9])                                                        };                                                        accounts.Add(account);                                                    });                                            coaServices.InsertCoa(accounts.ToArray()' deleteRelated);                      IntializeTreeViewChartOfAccounts();                  }                  catch (Exception ex)                  {                      new frmShowError(CustomExceptionHandler.ShowExceptionText(ex)).ShowDialog();                  }              }
Magic Number,OpenCBS.GUI.Accounting,ChartOfAccountsForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\ChartOfAccountsForm.cs,ImportAccounts,The following statement contains a magic number: if (fileDialog.ShowDialog() == DialogResult.OK)              {                  try                  {                      bool deleteRelated = Confirm(MultiLanguageStrings.GetString(Ressource.ChartOfAccountsForm' "ToDeleteTheChartOfAccounts.Text"));                        CsvImportExport importer = new CsvImportExport();                      string filePath = fileDialog.FileName;                      List<Account> accounts = new List<Account>();                      ChartOfAccountsServices coaServices = ServicesProvider.GetInstance().GetChartOfAccountsServices();                      if(deleteRelated)                      {                          IEnumerable<string> relatedDatas = coaServices.HasRelatedDatas();                          if(relatedDatas != null && relatedDatas.Any())                          {                              string[] domainObjects =                                  relatedDatas                                      .Select(                                          r => GetString(string.Format("RelatedData.{0}"' r))                                      ).Distinct().ToArray();                                string message =                                  string.Format(                                      GetString("RelatedDataExists.Text")'                                      string.Join("'"' domainObjects));                              if(!Confirm(message)) return;                          }                      }                      importer.Import(filePath' items =>                                                    {                                                        Account account = new Account                                                        {                                                            Id = Convert.ToInt32(items[0])'                                                            Number = items[1]'                                                            Label = items[2]'                                                            DebitPlus = Convert.ToBoolean(items[3])'                                                            TypeCode = items[4]'                                                            AccountCategory = (OAccountCategories)(Convert.ToInt32(items[5]))'                                                            Type = Convert.ToBoolean(items[6])'                                                            ParentAccountId = items[5].ToUpper() == "0" ? null : (int?)Convert.ToInt32(items[7])'                                                            Left = Convert.ToInt32(items[8])'                                                            Right = Convert.ToInt32(items[9])                                                        };                                                        accounts.Add(account);                                                    });                                            coaServices.InsertCoa(accounts.ToArray()' deleteRelated);                      IntializeTreeViewChartOfAccounts();                  }                  catch (Exception ex)                  {                      new frmShowError(CustomExceptionHandler.ShowExceptionText(ex)).ShowDialog();                  }              }
Magic Number,OpenCBS.GUI.Accounting,ChartOfAccountsForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\ChartOfAccountsForm.cs,ImportAccounts,The following statement contains a magic number: if (fileDialog.ShowDialog() == DialogResult.OK)              {                  try                  {                      bool deleteRelated = Confirm(MultiLanguageStrings.GetString(Ressource.ChartOfAccountsForm' "ToDeleteTheChartOfAccounts.Text"));                        CsvImportExport importer = new CsvImportExport();                      string filePath = fileDialog.FileName;                      List<Account> accounts = new List<Account>();                      ChartOfAccountsServices coaServices = ServicesProvider.GetInstance().GetChartOfAccountsServices();                      if(deleteRelated)                      {                          IEnumerable<string> relatedDatas = coaServices.HasRelatedDatas();                          if(relatedDatas != null && relatedDatas.Any())                          {                              string[] domainObjects =                                  relatedDatas                                      .Select(                                          r => GetString(string.Format("RelatedData.{0}"' r))                                      ).Distinct().ToArray();                                string message =                                  string.Format(                                      GetString("RelatedDataExists.Text")'                                      string.Join("'"' domainObjects));                              if(!Confirm(message)) return;                          }                      }                      importer.Import(filePath' items =>                                                    {                                                        Account account = new Account                                                        {                                                            Id = Convert.ToInt32(items[0])'                                                            Number = items[1]'                                                            Label = items[2]'                                                            DebitPlus = Convert.ToBoolean(items[3])'                                                            TypeCode = items[4]'                                                            AccountCategory = (OAccountCategories)(Convert.ToInt32(items[5]))'                                                            Type = Convert.ToBoolean(items[6])'                                                            ParentAccountId = items[5].ToUpper() == "0" ? null : (int?)Convert.ToInt32(items[7])'                                                            Left = Convert.ToInt32(items[8])'                                                            Right = Convert.ToInt32(items[9])                                                        };                                                        accounts.Add(account);                                                    });                                            coaServices.InsertCoa(accounts.ToArray()' deleteRelated);                      IntializeTreeViewChartOfAccounts();                  }                  catch (Exception ex)                  {                      new frmShowError(CustomExceptionHandler.ShowExceptionText(ex)).ShowDialog();                  }              }
Magic Number,OpenCBS.GUI.Accounting,ChartOfAccountsForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\ChartOfAccountsForm.cs,ImportAccounts,The following statement contains a magic number: if (fileDialog.ShowDialog() == DialogResult.OK)              {                  try                  {                      bool deleteRelated = Confirm(MultiLanguageStrings.GetString(Ressource.ChartOfAccountsForm' "ToDeleteTheChartOfAccounts.Text"));                        CsvImportExport importer = new CsvImportExport();                      string filePath = fileDialog.FileName;                      List<Account> accounts = new List<Account>();                      ChartOfAccountsServices coaServices = ServicesProvider.GetInstance().GetChartOfAccountsServices();                      if(deleteRelated)                      {                          IEnumerable<string> relatedDatas = coaServices.HasRelatedDatas();                          if(relatedDatas != null && relatedDatas.Any())                          {                              string[] domainObjects =                                  relatedDatas                                      .Select(                                          r => GetString(string.Format("RelatedData.{0}"' r))                                      ).Distinct().ToArray();                                string message =                                  string.Format(                                      GetString("RelatedDataExists.Text")'                                      string.Join("'"' domainObjects));                              if(!Confirm(message)) return;                          }                      }                      importer.Import(filePath' items =>                                                    {                                                        Account account = new Account                                                        {                                                            Id = Convert.ToInt32(items[0])'                                                            Number = items[1]'                                                            Label = items[2]'                                                            DebitPlus = Convert.ToBoolean(items[3])'                                                            TypeCode = items[4]'                                                            AccountCategory = (OAccountCategories)(Convert.ToInt32(items[5]))'                                                            Type = Convert.ToBoolean(items[6])'                                                            ParentAccountId = items[5].ToUpper() == "0" ? null : (int?)Convert.ToInt32(items[7])'                                                            Left = Convert.ToInt32(items[8])'                                                            Right = Convert.ToInt32(items[9])                                                        };                                                        accounts.Add(account);                                                    });                                            coaServices.InsertCoa(accounts.ToArray()' deleteRelated);                      IntializeTreeViewChartOfAccounts();                  }                  catch (Exception ex)                  {                      new frmShowError(CustomExceptionHandler.ShowExceptionText(ex)).ShowDialog();                  }              }
Magic Number,OpenCBS.GUI.Accounting,FiscalYear,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\FiscalYear.cs,InitializeComponent,The following statement contains a magic number: this.lblTitle.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(81))))' ((int)(((byte)(152)))));
Magic Number,OpenCBS.GUI.Accounting,FiscalYear,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\FiscalYear.cs,InitializeComponent,The following statement contains a magic number: this.lblTitle.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(81))))' ((int)(((byte)(152)))));
Magic Number,OpenCBS.GUI.Accounting,FrmAccountingRules,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\FrmAccountingRules.cs,Initialize,The following statement contains a magic number: _sorter.ByColumn = 4;
Magic Number,OpenCBS.GUI.Accounting,FrmAccountingRules,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\FrmAccountingRules.cs,Import,The following statement contains a magic number: if (fileDialog.ShowDialog() == DialogResult.OK)              {                  try                  {                      ServicesProvider.GetInstance().GetAccountingRuleServices().DeleteAllAccountingRules();                      listViewContractsRules.Items.Clear();                        using (StreamReader sr = new StreamReader(fileDialog.FileName' Encoding.Unicode))                      {                          string line;                          while ((line = sr.ReadLine()) != null)                          {                              string[] columns = line.Trim().Split(''');                                ContractAccountingRule rule = new ContractAccountingRule                                                                {                                                                    EventType = new EventType(columns[0])'                                                                    EventAttribute =                                                                        new EventAttribute                                                                            {Id = Convert.ToInt32(columns[1])}'                                                                    Order = Convert.ToInt32(columns[4])'                                                                    Description = columns[5]'                                                                    ProductType =                                                                        (OProductTypes)                                                                        Enum.Parse(typeof (OProductTypes)' columns[6])'                                                                    LoanProduct =                                                                        columns[7].Trim() == ""                                                                            ? null                                                                            : new LoanProduct                                                                                  {Id = Convert.ToInt32(columns[7])}'                                                                    SavingProduct =                                                                        columns[8].Trim() == ""                                                                            ? null                                                                            : new SavingsBookProduct                                                                                  {Id = Convert.ToInt32(columns[8])}'                                                                    ClientType =                                                                        columns[9].Trim() == "-"                                                                            ? OClientTypes.All                                                                            : columns[9].ConvertToClientType()'                                                                    EconomicActivity =                                                                        columns[10].Trim() == ""                                                                            ? null                                                                            : new EconomicActivity                                                                                  {Id = Convert.ToInt32(columns[10])}'                                                                    Currency =                                                                        columns[11].Trim() == ""                                                                            ? null                                                                            : new Currency                                                                                  {Id = Convert.ToInt32(columns[11])}'                                                                    DebitAccount =                                                                        ServicesProvider.GetInstance().                                                                        GetChartOfAccountsServices().SelectAccountById(                                                                            Convert.ToInt32(columns[2]))'                                                                    CreditAccount =                                                                        ServicesProvider.GetInstance().                                                                        GetChartOfAccountsServices().SelectAccountById(                                                                            Convert.ToInt32(columns[3]))'                                                                };                                  int id = ServicesProvider.GetInstance().GetAccountingRuleServices().SaveAccountingRule(rule);                                listViewContractsRules.Items.Add(                                  GetListViewItem(ServicesProvider.GetInstance().GetAccountingRuleServices().Select(id) as                                      ContractAccountingRule));                          }                      }                  }                  catch (Exception ex)                  {                      new frmShowError(CustomExceptionHandler.ShowExceptionText(ex)).ShowDialog();                  }              }
Magic Number,OpenCBS.GUI.Accounting,FrmAccountingRules,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\FrmAccountingRules.cs,Import,The following statement contains a magic number: if (fileDialog.ShowDialog() == DialogResult.OK)              {                  try                  {                      ServicesProvider.GetInstance().GetAccountingRuleServices().DeleteAllAccountingRules();                      listViewContractsRules.Items.Clear();                        using (StreamReader sr = new StreamReader(fileDialog.FileName' Encoding.Unicode))                      {                          string line;                          while ((line = sr.ReadLine()) != null)                          {                              string[] columns = line.Trim().Split(''');                                ContractAccountingRule rule = new ContractAccountingRule                                                                {                                                                    EventType = new EventType(columns[0])'                                                                    EventAttribute =                                                                        new EventAttribute                                                                            {Id = Convert.ToInt32(columns[1])}'                                                                    Order = Convert.ToInt32(columns[4])'                                                                    Description = columns[5]'                                                                    ProductType =                                                                        (OProductTypes)                                                                        Enum.Parse(typeof (OProductTypes)' columns[6])'                                                                    LoanProduct =                                                                        columns[7].Trim() == ""                                                                            ? null                                                                            : new LoanProduct                                                                                  {Id = Convert.ToInt32(columns[7])}'                                                                    SavingProduct =                                                                        columns[8].Trim() == ""                                                                            ? null                                                                            : new SavingsBookProduct                                                                                  {Id = Convert.ToInt32(columns[8])}'                                                                    ClientType =                                                                        columns[9].Trim() == "-"                                                                            ? OClientTypes.All                                                                            : columns[9].ConvertToClientType()'                                                                    EconomicActivity =                                                                        columns[10].Trim() == ""                                                                            ? null                                                                            : new EconomicActivity                                                                                  {Id = Convert.ToInt32(columns[10])}'                                                                    Currency =                                                                        columns[11].Trim() == ""                                                                            ? null                                                                            : new Currency                                                                                  {Id = Convert.ToInt32(columns[11])}'                                                                    DebitAccount =                                                                        ServicesProvider.GetInstance().                                                                        GetChartOfAccountsServices().SelectAccountById(                                                                            Convert.ToInt32(columns[2]))'                                                                    CreditAccount =                                                                        ServicesProvider.GetInstance().                                                                        GetChartOfAccountsServices().SelectAccountById(                                                                            Convert.ToInt32(columns[3]))'                                                                };                                  int id = ServicesProvider.GetInstance().GetAccountingRuleServices().SaveAccountingRule(rule);                                listViewContractsRules.Items.Add(                                  GetListViewItem(ServicesProvider.GetInstance().GetAccountingRuleServices().Select(id) as                                      ContractAccountingRule));                          }                      }                  }                  catch (Exception ex)                  {                      new frmShowError(CustomExceptionHandler.ShowExceptionText(ex)).ShowDialog();                  }              }
Magic Number,OpenCBS.GUI.Accounting,FrmAccountingRules,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\FrmAccountingRules.cs,Import,The following statement contains a magic number: if (fileDialog.ShowDialog() == DialogResult.OK)              {                  try                  {                      ServicesProvider.GetInstance().GetAccountingRuleServices().DeleteAllAccountingRules();                      listViewContractsRules.Items.Clear();                        using (StreamReader sr = new StreamReader(fileDialog.FileName' Encoding.Unicode))                      {                          string line;                          while ((line = sr.ReadLine()) != null)                          {                              string[] columns = line.Trim().Split(''');                                ContractAccountingRule rule = new ContractAccountingRule                                                                {                                                                    EventType = new EventType(columns[0])'                                                                    EventAttribute =                                                                        new EventAttribute                                                                            {Id = Convert.ToInt32(columns[1])}'                                                                    Order = Convert.ToInt32(columns[4])'                                                                    Description = columns[5]'                                                                    ProductType =                                                                        (OProductTypes)                                                                        Enum.Parse(typeof (OProductTypes)' columns[6])'                                                                    LoanProduct =                                                                        columns[7].Trim() == ""                                                                            ? null                                                                            : new LoanProduct                                                                                  {Id = Convert.ToInt32(columns[7])}'                                                                    SavingProduct =                                                                        columns[8].Trim() == ""                                                                            ? null                                                                            : new SavingsBookProduct                                                                                  {Id = Convert.ToInt32(columns[8])}'                                                                    ClientType =                                                                        columns[9].Trim() == "-"                                                                            ? OClientTypes.All                                                                            : columns[9].ConvertToClientType()'                                                                    EconomicActivity =                                                                        columns[10].Trim() == ""                                                                            ? null                                                                            : new EconomicActivity                                                                                  {Id = Convert.ToInt32(columns[10])}'                                                                    Currency =                                                                        columns[11].Trim() == ""                                                                            ? null                                                                            : new Currency                                                                                  {Id = Convert.ToInt32(columns[11])}'                                                                    DebitAccount =                                                                        ServicesProvider.GetInstance().                                                                        GetChartOfAccountsServices().SelectAccountById(                                                                            Convert.ToInt32(columns[2]))'                                                                    CreditAccount =                                                                        ServicesProvider.GetInstance().                                                                        GetChartOfAccountsServices().SelectAccountById(                                                                            Convert.ToInt32(columns[3]))'                                                                };                                  int id = ServicesProvider.GetInstance().GetAccountingRuleServices().SaveAccountingRule(rule);                                listViewContractsRules.Items.Add(                                  GetListViewItem(ServicesProvider.GetInstance().GetAccountingRuleServices().Select(id) as                                      ContractAccountingRule));                          }                      }                  }                  catch (Exception ex)                  {                      new frmShowError(CustomExceptionHandler.ShowExceptionText(ex)).ShowDialog();                  }              }
Magic Number,OpenCBS.GUI.Accounting,FrmAccountingRules,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\FrmAccountingRules.cs,Import,The following statement contains a magic number: if (fileDialog.ShowDialog() == DialogResult.OK)              {                  try                  {                      ServicesProvider.GetInstance().GetAccountingRuleServices().DeleteAllAccountingRules();                      listViewContractsRules.Items.Clear();                        using (StreamReader sr = new StreamReader(fileDialog.FileName' Encoding.Unicode))                      {                          string line;                          while ((line = sr.ReadLine()) != null)                          {                              string[] columns = line.Trim().Split(''');                                ContractAccountingRule rule = new ContractAccountingRule                                                                {                                                                    EventType = new EventType(columns[0])'                                                                    EventAttribute =                                                                        new EventAttribute                                                                            {Id = Convert.ToInt32(columns[1])}'                                                                    Order = Convert.ToInt32(columns[4])'                                                                    Description = columns[5]'                                                                    ProductType =                                                                        (OProductTypes)                                                                        Enum.Parse(typeof (OProductTypes)' columns[6])'                                                                    LoanProduct =                                                                        columns[7].Trim() == ""                                                                            ? null                                                                            : new LoanProduct                                                                                  {Id = Convert.ToInt32(columns[7])}'                                                                    SavingProduct =                                                                        columns[8].Trim() == ""                                                                            ? null                                                                            : new SavingsBookProduct                                                                                  {Id = Convert.ToInt32(columns[8])}'                                                                    ClientType =                                                                        columns[9].Trim() == "-"                                                                            ? OClientTypes.All                                                                            : columns[9].ConvertToClientType()'                                                                    EconomicActivity =                                                                        columns[10].Trim() == ""                                                                            ? null                                                                            : new EconomicActivity                                                                                  {Id = Convert.ToInt32(columns[10])}'                                                                    Currency =                                                                        columns[11].Trim() == ""                                                                            ? null                                                                            : new Currency                                                                                  {Id = Convert.ToInt32(columns[11])}'                                                                    DebitAccount =                                                                        ServicesProvider.GetInstance().                                                                        GetChartOfAccountsServices().SelectAccountById(                                                                            Convert.ToInt32(columns[2]))'                                                                    CreditAccount =                                                                        ServicesProvider.GetInstance().                                                                        GetChartOfAccountsServices().SelectAccountById(                                                                            Convert.ToInt32(columns[3]))'                                                                };                                  int id = ServicesProvider.GetInstance().GetAccountingRuleServices().SaveAccountingRule(rule);                                listViewContractsRules.Items.Add(                                  GetListViewItem(ServicesProvider.GetInstance().GetAccountingRuleServices().Select(id) as                                      ContractAccountingRule));                          }                      }                  }                  catch (Exception ex)                  {                      new frmShowError(CustomExceptionHandler.ShowExceptionText(ex)).ShowDialog();                  }              }
Magic Number,OpenCBS.GUI.Accounting,FrmAccountingRules,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\FrmAccountingRules.cs,Import,The following statement contains a magic number: if (fileDialog.ShowDialog() == DialogResult.OK)              {                  try                  {                      ServicesProvider.GetInstance().GetAccountingRuleServices().DeleteAllAccountingRules();                      listViewContractsRules.Items.Clear();                        using (StreamReader sr = new StreamReader(fileDialog.FileName' Encoding.Unicode))                      {                          string line;                          while ((line = sr.ReadLine()) != null)                          {                              string[] columns = line.Trim().Split(''');                                ContractAccountingRule rule = new ContractAccountingRule                                                                {                                                                    EventType = new EventType(columns[0])'                                                                    EventAttribute =                                                                        new EventAttribute                                                                            {Id = Convert.ToInt32(columns[1])}'                                                                    Order = Convert.ToInt32(columns[4])'                                                                    Description = columns[5]'                                                                    ProductType =                                                                        (OProductTypes)                                                                        Enum.Parse(typeof (OProductTypes)' columns[6])'                                                                    LoanProduct =                                                                        columns[7].Trim() == ""                                                                            ? null                                                                            : new LoanProduct                                                                                  {Id = Convert.ToInt32(columns[7])}'                                                                    SavingProduct =                                                                        columns[8].Trim() == ""                                                                            ? null                                                                            : new SavingsBookProduct                                                                                  {Id = Convert.ToInt32(columns[8])}'                                                                    ClientType =                                                                        columns[9].Trim() == "-"                                                                            ? OClientTypes.All                                                                            : columns[9].ConvertToClientType()'                                                                    EconomicActivity =                                                                        columns[10].Trim() == ""                                                                            ? null                                                                            : new EconomicActivity                                                                                  {Id = Convert.ToInt32(columns[10])}'                                                                    Currency =                                                                        columns[11].Trim() == ""                                                                            ? null                                                                            : new Currency                                                                                  {Id = Convert.ToInt32(columns[11])}'                                                                    DebitAccount =                                                                        ServicesProvider.GetInstance().                                                                        GetChartOfAccountsServices().SelectAccountById(                                                                            Convert.ToInt32(columns[2]))'                                                                    CreditAccount =                                                                        ServicesProvider.GetInstance().                                                                        GetChartOfAccountsServices().SelectAccountById(                                                                            Convert.ToInt32(columns[3]))'                                                                };                                  int id = ServicesProvider.GetInstance().GetAccountingRuleServices().SaveAccountingRule(rule);                                listViewContractsRules.Items.Add(                                  GetListViewItem(ServicesProvider.GetInstance().GetAccountingRuleServices().Select(id) as                                      ContractAccountingRule));                          }                      }                  }                  catch (Exception ex)                  {                      new frmShowError(CustomExceptionHandler.ShowExceptionText(ex)).ShowDialog();                  }              }
Magic Number,OpenCBS.GUI.Accounting,FrmAccountingRules,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\FrmAccountingRules.cs,Import,The following statement contains a magic number: if (fileDialog.ShowDialog() == DialogResult.OK)              {                  try                  {                      ServicesProvider.GetInstance().GetAccountingRuleServices().DeleteAllAccountingRules();                      listViewContractsRules.Items.Clear();                        using (StreamReader sr = new StreamReader(fileDialog.FileName' Encoding.Unicode))                      {                          string line;                          while ((line = sr.ReadLine()) != null)                          {                              string[] columns = line.Trim().Split(''');                                ContractAccountingRule rule = new ContractAccountingRule                                                                {                                                                    EventType = new EventType(columns[0])'                                                                    EventAttribute =                                                                        new EventAttribute                                                                            {Id = Convert.ToInt32(columns[1])}'                                                                    Order = Convert.ToInt32(columns[4])'                                                                    Description = columns[5]'                                                                    ProductType =                                                                        (OProductTypes)                                                                        Enum.Parse(typeof (OProductTypes)' columns[6])'                                                                    LoanProduct =                                                                        columns[7].Trim() == ""                                                                            ? null                                                                            : new LoanProduct                                                                                  {Id = Convert.ToInt32(columns[7])}'                                                                    SavingProduct =                                                                        columns[8].Trim() == ""                                                                            ? null                                                                            : new SavingsBookProduct                                                                                  {Id = Convert.ToInt32(columns[8])}'                                                                    ClientType =                                                                        columns[9].Trim() == "-"                                                                            ? OClientTypes.All                                                                            : columns[9].ConvertToClientType()'                                                                    EconomicActivity =                                                                        columns[10].Trim() == ""                                                                            ? null                                                                            : new EconomicActivity                                                                                  {Id = Convert.ToInt32(columns[10])}'                                                                    Currency =                                                                        columns[11].Trim() == ""                                                                            ? null                                                                            : new Currency                                                                                  {Id = Convert.ToInt32(columns[11])}'                                                                    DebitAccount =                                                                        ServicesProvider.GetInstance().                                                                        GetChartOfAccountsServices().SelectAccountById(                                                                            Convert.ToInt32(columns[2]))'                                                                    CreditAccount =                                                                        ServicesProvider.GetInstance().                                                                        GetChartOfAccountsServices().SelectAccountById(                                                                            Convert.ToInt32(columns[3]))'                                                                };                                  int id = ServicesProvider.GetInstance().GetAccountingRuleServices().SaveAccountingRule(rule);                                listViewContractsRules.Items.Add(                                  GetListViewItem(ServicesProvider.GetInstance().GetAccountingRuleServices().Select(id) as                                      ContractAccountingRule));                          }                      }                  }                  catch (Exception ex)                  {                      new frmShowError(CustomExceptionHandler.ShowExceptionText(ex)).ShowDialog();                  }              }
Magic Number,OpenCBS.GUI.Accounting,FrmAccountingRules,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\FrmAccountingRules.cs,Import,The following statement contains a magic number: if (fileDialog.ShowDialog() == DialogResult.OK)              {                  try                  {                      ServicesProvider.GetInstance().GetAccountingRuleServices().DeleteAllAccountingRules();                      listViewContractsRules.Items.Clear();                        using (StreamReader sr = new StreamReader(fileDialog.FileName' Encoding.Unicode))                      {                          string line;                          while ((line = sr.ReadLine()) != null)                          {                              string[] columns = line.Trim().Split(''');                                ContractAccountingRule rule = new ContractAccountingRule                                                                {                                                                    EventType = new EventType(columns[0])'                                                                    EventAttribute =                                                                        new EventAttribute                                                                            {Id = Convert.ToInt32(columns[1])}'                                                                    Order = Convert.ToInt32(columns[4])'                                                                    Description = columns[5]'                                                                    ProductType =                                                                        (OProductTypes)                                                                        Enum.Parse(typeof (OProductTypes)' columns[6])'                                                                    LoanProduct =                                                                        columns[7].Trim() == ""                                                                            ? null                                                                            : new LoanProduct                                                                                  {Id = Convert.ToInt32(columns[7])}'                                                                    SavingProduct =                                                                        columns[8].Trim() == ""                                                                            ? null                                                                            : new SavingsBookProduct                                                                                  {Id = Convert.ToInt32(columns[8])}'                                                                    ClientType =                                                                        columns[9].Trim() == "-"                                                                            ? OClientTypes.All                                                                            : columns[9].ConvertToClientType()'                                                                    EconomicActivity =                                                                        columns[10].Trim() == ""                                                                            ? null                                                                            : new EconomicActivity                                                                                  {Id = Convert.ToInt32(columns[10])}'                                                                    Currency =                                                                        columns[11].Trim() == ""                                                                            ? null                                                                            : new Currency                                                                                  {Id = Convert.ToInt32(columns[11])}'                                                                    DebitAccount =                                                                        ServicesProvider.GetInstance().                                                                        GetChartOfAccountsServices().SelectAccountById(                                                                            Convert.ToInt32(columns[2]))'                                                                    CreditAccount =                                                                        ServicesProvider.GetInstance().                                                                        GetChartOfAccountsServices().SelectAccountById(                                                                            Convert.ToInt32(columns[3]))'                                                                };                                  int id = ServicesProvider.GetInstance().GetAccountingRuleServices().SaveAccountingRule(rule);                                listViewContractsRules.Items.Add(                                  GetListViewItem(ServicesProvider.GetInstance().GetAccountingRuleServices().Select(id) as                                      ContractAccountingRule));                          }                      }                  }                  catch (Exception ex)                  {                      new frmShowError(CustomExceptionHandler.ShowExceptionText(ex)).ShowDialog();                  }              }
Magic Number,OpenCBS.GUI.Accounting,FrmAccountingRules,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\FrmAccountingRules.cs,Import,The following statement contains a magic number: if (fileDialog.ShowDialog() == DialogResult.OK)              {                  try                  {                      ServicesProvider.GetInstance().GetAccountingRuleServices().DeleteAllAccountingRules();                      listViewContractsRules.Items.Clear();                        using (StreamReader sr = new StreamReader(fileDialog.FileName' Encoding.Unicode))                      {                          string line;                          while ((line = sr.ReadLine()) != null)                          {                              string[] columns = line.Trim().Split(''');                                ContractAccountingRule rule = new ContractAccountingRule                                                                {                                                                    EventType = new EventType(columns[0])'                                                                    EventAttribute =                                                                        new EventAttribute                                                                            {Id = Convert.ToInt32(columns[1])}'                                                                    Order = Convert.ToInt32(columns[4])'                                                                    Description = columns[5]'                                                                    ProductType =                                                                        (OProductTypes)                                                                        Enum.Parse(typeof (OProductTypes)' columns[6])'                                                                    LoanProduct =                                                                        columns[7].Trim() == ""                                                                            ? null                                                                            : new LoanProduct                                                                                  {Id = Convert.ToInt32(columns[7])}'                                                                    SavingProduct =                                                                        columns[8].Trim() == ""                                                                            ? null                                                                            : new SavingsBookProduct                                                                                  {Id = Convert.ToInt32(columns[8])}'                                                                    ClientType =                                                                        columns[9].Trim() == "-"                                                                            ? OClientTypes.All                                                                            : columns[9].ConvertToClientType()'                                                                    EconomicActivity =                                                                        columns[10].Trim() == ""                                                                            ? null                                                                            : new EconomicActivity                                                                                  {Id = Convert.ToInt32(columns[10])}'                                                                    Currency =                                                                        columns[11].Trim() == ""                                                                            ? null                                                                            : new Currency                                                                                  {Id = Convert.ToInt32(columns[11])}'                                                                    DebitAccount =                                                                        ServicesProvider.GetInstance().                                                                        GetChartOfAccountsServices().SelectAccountById(                                                                            Convert.ToInt32(columns[2]))'                                                                    CreditAccount =                                                                        ServicesProvider.GetInstance().                                                                        GetChartOfAccountsServices().SelectAccountById(                                                                            Convert.ToInt32(columns[3]))'                                                                };                                  int id = ServicesProvider.GetInstance().GetAccountingRuleServices().SaveAccountingRule(rule);                                listViewContractsRules.Items.Add(                                  GetListViewItem(ServicesProvider.GetInstance().GetAccountingRuleServices().Select(id) as                                      ContractAccountingRule));                          }                      }                  }                  catch (Exception ex)                  {                      new frmShowError(CustomExceptionHandler.ShowExceptionText(ex)).ShowDialog();                  }              }
Magic Number,OpenCBS.GUI.Accounting,FrmAccountingRules,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\FrmAccountingRules.cs,Import,The following statement contains a magic number: if (fileDialog.ShowDialog() == DialogResult.OK)              {                  try                  {                      ServicesProvider.GetInstance().GetAccountingRuleServices().DeleteAllAccountingRules();                      listViewContractsRules.Items.Clear();                        using (StreamReader sr = new StreamReader(fileDialog.FileName' Encoding.Unicode))                      {                          string line;                          while ((line = sr.ReadLine()) != null)                          {                              string[] columns = line.Trim().Split(''');                                ContractAccountingRule rule = new ContractAccountingRule                                                                {                                                                    EventType = new EventType(columns[0])'                                                                    EventAttribute =                                                                        new EventAttribute                                                                            {Id = Convert.ToInt32(columns[1])}'                                                                    Order = Convert.ToInt32(columns[4])'                                                                    Description = columns[5]'                                                                    ProductType =                                                                        (OProductTypes)                                                                        Enum.Parse(typeof (OProductTypes)' columns[6])'                                                                    LoanProduct =                                                                        columns[7].Trim() == ""                                                                            ? null                                                                            : new LoanProduct                                                                                  {Id = Convert.ToInt32(columns[7])}'                                                                    SavingProduct =                                                                        columns[8].Trim() == ""                                                                            ? null                                                                            : new SavingsBookProduct                                                                                  {Id = Convert.ToInt32(columns[8])}'                                                                    ClientType =                                                                        columns[9].Trim() == "-"                                                                            ? OClientTypes.All                                                                            : columns[9].ConvertToClientType()'                                                                    EconomicActivity =                                                                        columns[10].Trim() == ""                                                                            ? null                                                                            : new EconomicActivity                                                                                  {Id = Convert.ToInt32(columns[10])}'                                                                    Currency =                                                                        columns[11].Trim() == ""                                                                            ? null                                                                            : new Currency                                                                                  {Id = Convert.ToInt32(columns[11])}'                                                                    DebitAccount =                                                                        ServicesProvider.GetInstance().                                                                        GetChartOfAccountsServices().SelectAccountById(                                                                            Convert.ToInt32(columns[2]))'                                                                    CreditAccount =                                                                        ServicesProvider.GetInstance().                                                                        GetChartOfAccountsServices().SelectAccountById(                                                                            Convert.ToInt32(columns[3]))'                                                                };                                  int id = ServicesProvider.GetInstance().GetAccountingRuleServices().SaveAccountingRule(rule);                                listViewContractsRules.Items.Add(                                  GetListViewItem(ServicesProvider.GetInstance().GetAccountingRuleServices().Select(id) as                                      ContractAccountingRule));                          }                      }                  }                  catch (Exception ex)                  {                      new frmShowError(CustomExceptionHandler.ShowExceptionText(ex)).ShowDialog();                  }              }
Magic Number,OpenCBS.GUI.Accounting,FrmAccountingRules,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\FrmAccountingRules.cs,Import,The following statement contains a magic number: if (fileDialog.ShowDialog() == DialogResult.OK)              {                  try                  {                      ServicesProvider.GetInstance().GetAccountingRuleServices().DeleteAllAccountingRules();                      listViewContractsRules.Items.Clear();                        using (StreamReader sr = new StreamReader(fileDialog.FileName' Encoding.Unicode))                      {                          string line;                          while ((line = sr.ReadLine()) != null)                          {                              string[] columns = line.Trim().Split(''');                                ContractAccountingRule rule = new ContractAccountingRule                                                                {                                                                    EventType = new EventType(columns[0])'                                                                    EventAttribute =                                                                        new EventAttribute                                                                            {Id = Convert.ToInt32(columns[1])}'                                                                    Order = Convert.ToInt32(columns[4])'                                                                    Description = columns[5]'                                                                    ProductType =                                                                        (OProductTypes)                                                                        Enum.Parse(typeof (OProductTypes)' columns[6])'                                                                    LoanProduct =                                                                        columns[7].Trim() == ""                                                                            ? null                                                                            : new LoanProduct                                                                                  {Id = Convert.ToInt32(columns[7])}'                                                                    SavingProduct =                                                                        columns[8].Trim() == ""                                                                            ? null                                                                            : new SavingsBookProduct                                                                                  {Id = Convert.ToInt32(columns[8])}'                                                                    ClientType =                                                                        columns[9].Trim() == "-"                                                                            ? OClientTypes.All                                                                            : columns[9].ConvertToClientType()'                                                                    EconomicActivity =                                                                        columns[10].Trim() == ""                                                                            ? null                                                                            : new EconomicActivity                                                                                  {Id = Convert.ToInt32(columns[10])}'                                                                    Currency =                                                                        columns[11].Trim() == ""                                                                            ? null                                                                            : new Currency                                                                                  {Id = Convert.ToInt32(columns[11])}'                                                                    DebitAccount =                                                                        ServicesProvider.GetInstance().                                                                        GetChartOfAccountsServices().SelectAccountById(                                                                            Convert.ToInt32(columns[2]))'                                                                    CreditAccount =                                                                        ServicesProvider.GetInstance().                                                                        GetChartOfAccountsServices().SelectAccountById(                                                                            Convert.ToInt32(columns[3]))'                                                                };                                  int id = ServicesProvider.GetInstance().GetAccountingRuleServices().SaveAccountingRule(rule);                                listViewContractsRules.Items.Add(                                  GetListViewItem(ServicesProvider.GetInstance().GetAccountingRuleServices().Select(id) as                                      ContractAccountingRule));                          }                      }                  }                  catch (Exception ex)                  {                      new frmShowError(CustomExceptionHandler.ShowExceptionText(ex)).ShowDialog();                  }              }
Magic Number,OpenCBS.GUI.Accounting,FrmAccountingRules,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\FrmAccountingRules.cs,Import,The following statement contains a magic number: if (fileDialog.ShowDialog() == DialogResult.OK)              {                  try                  {                      ServicesProvider.GetInstance().GetAccountingRuleServices().DeleteAllAccountingRules();                      listViewContractsRules.Items.Clear();                        using (StreamReader sr = new StreamReader(fileDialog.FileName' Encoding.Unicode))                      {                          string line;                          while ((line = sr.ReadLine()) != null)                          {                              string[] columns = line.Trim().Split(''');                                ContractAccountingRule rule = new ContractAccountingRule                                                                {                                                                    EventType = new EventType(columns[0])'                                                                    EventAttribute =                                                                        new EventAttribute                                                                            {Id = Convert.ToInt32(columns[1])}'                                                                    Order = Convert.ToInt32(columns[4])'                                                                    Description = columns[5]'                                                                    ProductType =                                                                        (OProductTypes)                                                                        Enum.Parse(typeof (OProductTypes)' columns[6])'                                                                    LoanProduct =                                                                        columns[7].Trim() == ""                                                                            ? null                                                                            : new LoanProduct                                                                                  {Id = Convert.ToInt32(columns[7])}'                                                                    SavingProduct =                                                                        columns[8].Trim() == ""                                                                            ? null                                                                            : new SavingsBookProduct                                                                                  {Id = Convert.ToInt32(columns[8])}'                                                                    ClientType =                                                                        columns[9].Trim() == "-"                                                                            ? OClientTypes.All                                                                            : columns[9].ConvertToClientType()'                                                                    EconomicActivity =                                                                        columns[10].Trim() == ""                                                                            ? null                                                                            : new EconomicActivity                                                                                  {Id = Convert.ToInt32(columns[10])}'                                                                    Currency =                                                                        columns[11].Trim() == ""                                                                            ? null                                                                            : new Currency                                                                                  {Id = Convert.ToInt32(columns[11])}'                                                                    DebitAccount =                                                                        ServicesProvider.GetInstance().                                                                        GetChartOfAccountsServices().SelectAccountById(                                                                            Convert.ToInt32(columns[2]))'                                                                    CreditAccount =                                                                        ServicesProvider.GetInstance().                                                                        GetChartOfAccountsServices().SelectAccountById(                                                                            Convert.ToInt32(columns[3]))'                                                                };                                  int id = ServicesProvider.GetInstance().GetAccountingRuleServices().SaveAccountingRule(rule);                                listViewContractsRules.Items.Add(                                  GetListViewItem(ServicesProvider.GetInstance().GetAccountingRuleServices().Select(id) as                                      ContractAccountingRule));                          }                      }                  }                  catch (Exception ex)                  {                      new frmShowError(CustomExceptionHandler.ShowExceptionText(ex)).ShowDialog();                  }              }
Magic Number,OpenCBS.GUI.Accounting,FrmAccountingRules,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\FrmAccountingRules.cs,Import,The following statement contains a magic number: if (fileDialog.ShowDialog() == DialogResult.OK)              {                  try                  {                      ServicesProvider.GetInstance().GetAccountingRuleServices().DeleteAllAccountingRules();                      listViewContractsRules.Items.Clear();                        using (StreamReader sr = new StreamReader(fileDialog.FileName' Encoding.Unicode))                      {                          string line;                          while ((line = sr.ReadLine()) != null)                          {                              string[] columns = line.Trim().Split(''');                                ContractAccountingRule rule = new ContractAccountingRule                                                                {                                                                    EventType = new EventType(columns[0])'                                                                    EventAttribute =                                                                        new EventAttribute                                                                            {Id = Convert.ToInt32(columns[1])}'                                                                    Order = Convert.ToInt32(columns[4])'                                                                    Description = columns[5]'                                                                    ProductType =                                                                        (OProductTypes)                                                                        Enum.Parse(typeof (OProductTypes)' columns[6])'                                                                    LoanProduct =                                                                        columns[7].Trim() == ""                                                                            ? null                                                                            : new LoanProduct                                                                                  {Id = Convert.ToInt32(columns[7])}'                                                                    SavingProduct =                                                                        columns[8].Trim() == ""                                                                            ? null                                                                            : new SavingsBookProduct                                                                                  {Id = Convert.ToInt32(columns[8])}'                                                                    ClientType =                                                                        columns[9].Trim() == "-"                                                                            ? OClientTypes.All                                                                            : columns[9].ConvertToClientType()'                                                                    EconomicActivity =                                                                        columns[10].Trim() == ""                                                                            ? null                                                                            : new EconomicActivity                                                                                  {Id = Convert.ToInt32(columns[10])}'                                                                    Currency =                                                                        columns[11].Trim() == ""                                                                            ? null                                                                            : new Currency                                                                                  {Id = Convert.ToInt32(columns[11])}'                                                                    DebitAccount =                                                                        ServicesProvider.GetInstance().                                                                        GetChartOfAccountsServices().SelectAccountById(                                                                            Convert.ToInt32(columns[2]))'                                                                    CreditAccount =                                                                        ServicesProvider.GetInstance().                                                                        GetChartOfAccountsServices().SelectAccountById(                                                                            Convert.ToInt32(columns[3]))'                                                                };                                  int id = ServicesProvider.GetInstance().GetAccountingRuleServices().SaveAccountingRule(rule);                                listViewContractsRules.Items.Add(                                  GetListViewItem(ServicesProvider.GetInstance().GetAccountingRuleServices().Select(id) as                                      ContractAccountingRule));                          }                      }                  }                  catch (Exception ex)                  {                      new frmShowError(CustomExceptionHandler.ShowExceptionText(ex)).ShowDialog();                  }              }
Magic Number,OpenCBS.GUI.Accounting,FrmAccountingRules,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\FrmAccountingRules.cs,Import,The following statement contains a magic number: if (fileDialog.ShowDialog() == DialogResult.OK)              {                  try                  {                      ServicesProvider.GetInstance().GetAccountingRuleServices().DeleteAllAccountingRules();                      listViewContractsRules.Items.Clear();                        using (StreamReader sr = new StreamReader(fileDialog.FileName' Encoding.Unicode))                      {                          string line;                          while ((line = sr.ReadLine()) != null)                          {                              string[] columns = line.Trim().Split(''');                                ContractAccountingRule rule = new ContractAccountingRule                                                                {                                                                    EventType = new EventType(columns[0])'                                                                    EventAttribute =                                                                        new EventAttribute                                                                            {Id = Convert.ToInt32(columns[1])}'                                                                    Order = Convert.ToInt32(columns[4])'                                                                    Description = columns[5]'                                                                    ProductType =                                                                        (OProductTypes)                                                                        Enum.Parse(typeof (OProductTypes)' columns[6])'                                                                    LoanProduct =                                                                        columns[7].Trim() == ""                                                                            ? null                                                                            : new LoanProduct                                                                                  {Id = Convert.ToInt32(columns[7])}'                                                                    SavingProduct =                                                                        columns[8].Trim() == ""                                                                            ? null                                                                            : new SavingsBookProduct                                                                                  {Id = Convert.ToInt32(columns[8])}'                                                                    ClientType =                                                                        columns[9].Trim() == "-"                                                                            ? OClientTypes.All                                                                            : columns[9].ConvertToClientType()'                                                                    EconomicActivity =                                                                        columns[10].Trim() == ""                                                                            ? null                                                                            : new EconomicActivity                                                                                  {Id = Convert.ToInt32(columns[10])}'                                                                    Currency =                                                                        columns[11].Trim() == ""                                                                            ? null                                                                            : new Currency                                                                                  {Id = Convert.ToInt32(columns[11])}'                                                                    DebitAccount =                                                                        ServicesProvider.GetInstance().                                                                        GetChartOfAccountsServices().SelectAccountById(                                                                            Convert.ToInt32(columns[2]))'                                                                    CreditAccount =                                                                        ServicesProvider.GetInstance().                                                                        GetChartOfAccountsServices().SelectAccountById(                                                                            Convert.ToInt32(columns[3]))'                                                                };                                  int id = ServicesProvider.GetInstance().GetAccountingRuleServices().SaveAccountingRule(rule);                                listViewContractsRules.Items.Add(                                  GetListViewItem(ServicesProvider.GetInstance().GetAccountingRuleServices().Select(id) as                                      ContractAccountingRule));                          }                      }                  }                  catch (Exception ex)                  {                      new frmShowError(CustomExceptionHandler.ShowExceptionText(ex)).ShowDialog();                  }              }
Magic Number,OpenCBS.GUI.Accounting,FrmAccountingRules,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\FrmAccountingRules.cs,Import,The following statement contains a magic number: if (fileDialog.ShowDialog() == DialogResult.OK)              {                  try                  {                      ServicesProvider.GetInstance().GetAccountingRuleServices().DeleteAllAccountingRules();                      listViewContractsRules.Items.Clear();                        using (StreamReader sr = new StreamReader(fileDialog.FileName' Encoding.Unicode))                      {                          string line;                          while ((line = sr.ReadLine()) != null)                          {                              string[] columns = line.Trim().Split(''');                                ContractAccountingRule rule = new ContractAccountingRule                                                                {                                                                    EventType = new EventType(columns[0])'                                                                    EventAttribute =                                                                        new EventAttribute                                                                            {Id = Convert.ToInt32(columns[1])}'                                                                    Order = Convert.ToInt32(columns[4])'                                                                    Description = columns[5]'                                                                    ProductType =                                                                        (OProductTypes)                                                                        Enum.Parse(typeof (OProductTypes)' columns[6])'                                                                    LoanProduct =                                                                        columns[7].Trim() == ""                                                                            ? null                                                                            : new LoanProduct                                                                                  {Id = Convert.ToInt32(columns[7])}'                                                                    SavingProduct =                                                                        columns[8].Trim() == ""                                                                            ? null                                                                            : new SavingsBookProduct                                                                                  {Id = Convert.ToInt32(columns[8])}'                                                                    ClientType =                                                                        columns[9].Trim() == "-"                                                                            ? OClientTypes.All                                                                            : columns[9].ConvertToClientType()'                                                                    EconomicActivity =                                                                        columns[10].Trim() == ""                                                                            ? null                                                                            : new EconomicActivity                                                                                  {Id = Convert.ToInt32(columns[10])}'                                                                    Currency =                                                                        columns[11].Trim() == ""                                                                            ? null                                                                            : new Currency                                                                                  {Id = Convert.ToInt32(columns[11])}'                                                                    DebitAccount =                                                                        ServicesProvider.GetInstance().                                                                        GetChartOfAccountsServices().SelectAccountById(                                                                            Convert.ToInt32(columns[2]))'                                                                    CreditAccount =                                                                        ServicesProvider.GetInstance().                                                                        GetChartOfAccountsServices().SelectAccountById(                                                                            Convert.ToInt32(columns[3]))'                                                                };                                  int id = ServicesProvider.GetInstance().GetAccountingRuleServices().SaveAccountingRule(rule);                                listViewContractsRules.Items.Add(                                  GetListViewItem(ServicesProvider.GetInstance().GetAccountingRuleServices().Select(id) as                                      ContractAccountingRule));                          }                      }                  }                  catch (Exception ex)                  {                      new frmShowError(CustomExceptionHandler.ShowExceptionText(ex)).ShowDialog();                  }              }
Magic Number,OpenCBS.GUI.Accounting,FrmAccountingRules,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\FrmAccountingRules.cs,Import,The following statement contains a magic number: if (fileDialog.ShowDialog() == DialogResult.OK)              {                  try                  {                      ServicesProvider.GetInstance().GetAccountingRuleServices().DeleteAllAccountingRules();                      listViewContractsRules.Items.Clear();                        using (StreamReader sr = new StreamReader(fileDialog.FileName' Encoding.Unicode))                      {                          string line;                          while ((line = sr.ReadLine()) != null)                          {                              string[] columns = line.Trim().Split(''');                                ContractAccountingRule rule = new ContractAccountingRule                                                                {                                                                    EventType = new EventType(columns[0])'                                                                    EventAttribute =                                                                        new EventAttribute                                                                            {Id = Convert.ToInt32(columns[1])}'                                                                    Order = Convert.ToInt32(columns[4])'                                                                    Description = columns[5]'                                                                    ProductType =                                                                        (OProductTypes)                                                                        Enum.Parse(typeof (OProductTypes)' columns[6])'                                                                    LoanProduct =                                                                        columns[7].Trim() == ""                                                                            ? null                                                                            : new LoanProduct                                                                                  {Id = Convert.ToInt32(columns[7])}'                                                                    SavingProduct =                                                                        columns[8].Trim() == ""                                                                            ? null                                                                            : new SavingsBookProduct                                                                                  {Id = Convert.ToInt32(columns[8])}'                                                                    ClientType =                                                                        columns[9].Trim() == "-"                                                                            ? OClientTypes.All                                                                            : columns[9].ConvertToClientType()'                                                                    EconomicActivity =                                                                        columns[10].Trim() == ""                                                                            ? null                                                                            : new EconomicActivity                                                                                  {Id = Convert.ToInt32(columns[10])}'                                                                    Currency =                                                                        columns[11].Trim() == ""                                                                            ? null                                                                            : new Currency                                                                                  {Id = Convert.ToInt32(columns[11])}'                                                                    DebitAccount =                                                                        ServicesProvider.GetInstance().                                                                        GetChartOfAccountsServices().SelectAccountById(                                                                            Convert.ToInt32(columns[2]))'                                                                    CreditAccount =                                                                        ServicesProvider.GetInstance().                                                                        GetChartOfAccountsServices().SelectAccountById(                                                                            Convert.ToInt32(columns[3]))'                                                                };                                  int id = ServicesProvider.GetInstance().GetAccountingRuleServices().SaveAccountingRule(rule);                                listViewContractsRules.Items.Add(                                  GetListViewItem(ServicesProvider.GetInstance().GetAccountingRuleServices().Select(id) as                                      ContractAccountingRule));                          }                      }                  }                  catch (Exception ex)                  {                      new frmShowError(CustomExceptionHandler.ShowExceptionText(ex)).ShowDialog();                  }              }
Magic Number,OpenCBS.GUI.Accounting,FrmAccountingRules,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\FrmAccountingRules.cs,InitializeComponent,The following statement contains a magic number: this.lblTitle.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(81))))' ((int)(((byte)(152)))));
Magic Number,OpenCBS.GUI.Accounting,FrmAccountingRules,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\FrmAccountingRules.cs,InitializeComponent,The following statement contains a magic number: this.lblTitle.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(81))))' ((int)(((byte)(152)))));
Magic Number,OpenCBS.GUI.Accounting,ExchangeRateForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\ExchangeRateForm.cs,InitializeGraphRateEvolution,The following statement contains a magic number: myPane.FontSpec.FontColor = Color.FromArgb(0' 88' 56);
Magic Number,OpenCBS.GUI.Accounting,ExchangeRateForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\ExchangeRateForm.cs,InitializeGraphRateEvolution,The following statement contains a magic number: myPane.FontSpec.FontColor = Color.FromArgb(0' 88' 56);
Magic Number,OpenCBS.GUI.Accounting,ExchangeRateForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\ExchangeRateForm.cs,InitializeGraphRateEvolution,The following statement contains a magic number: myPane.AxisFill = new Fill(Color.White' Color.FromArgb(255' 255' 166)' 90F);
Magic Number,OpenCBS.GUI.Accounting,ExchangeRateForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\ExchangeRateForm.cs,InitializeGraphRateEvolution,The following statement contains a magic number: myPane.AxisFill = new Fill(Color.White' Color.FromArgb(255' 255' 166)' 90F);
Magic Number,OpenCBS.GUI.Accounting,ExchangeRateForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\ExchangeRateForm.cs,InitializeGraphRateEvolution,The following statement contains a magic number: myPane.AxisFill = new Fill(Color.White' Color.FromArgb(255' 255' 166)' 90F);
Magic Number,OpenCBS.GUI.Accounting,ExchangeRateForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\ExchangeRateForm.cs,InitializeGraphRateEvolution,The following statement contains a magic number: myPane.XAxis.ScaleFontSpec.Angle = 40;
Magic Number,OpenCBS.GUI.Accounting,ExchangeRateForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\ExchangeRateForm.cs,ExchangeRateForm_Load,The following statement contains a magic number: comboBoxCurrenciesLocation = new Point(282' 21);
Magic Number,OpenCBS.GUI.Accounting,ExchangeRateForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\ExchangeRateForm.cs,ExchangeRateForm_Load,The following statement contains a magic number: comboBoxCurrenciesLocation = new Point(282' 21);
Magic Number,OpenCBS.GUI.Accounting,ExchangeRateForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\ExchangeRateForm.cs,ExchangeRateForm_Load,The following statement contains a magic number: textBoxRateValueLocation = new Point(343' 59);
Magic Number,OpenCBS.GUI.Accounting,ExchangeRateForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\ExchangeRateForm.cs,ExchangeRateForm_Load,The following statement contains a magic number: textBoxRateValueLocation = new Point(343' 59);
Magic Number,OpenCBS.GUI.Accounting,ExchangeRateForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\ExchangeRateForm.cs,ExchangeRateForm_Load,The following statement contains a magic number: labelInternalCurrencyLocation = new Point(279'63);
Magic Number,OpenCBS.GUI.Accounting,ExchangeRateForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\ExchangeRateForm.cs,ExchangeRateForm_Load,The following statement contains a magic number: labelInternalCurrencyLocation = new Point(279'63);
Magic Number,OpenCBS.GUI.Accounting,ExchangeRateForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\ExchangeRateForm.cs,ExchangeRateForm_Load,The following statement contains a magic number: labelExternalCurrencyLocation = new Point(410' 63);
Magic Number,OpenCBS.GUI.Accounting,ExchangeRateForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\ExchangeRateForm.cs,ExchangeRateForm_Load,The following statement contains a magic number: labelExternalCurrencyLocation = new Point(410' 63);
Magic Number,OpenCBS.GUI.Accounting,ExchangeRateForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\ExchangeRateForm.cs,ExchangeRateForm_Load,The following statement contains a magic number: labelSwappedLocation = new Point(282' 127);
Magic Number,OpenCBS.GUI.Accounting,ExchangeRateForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\ExchangeRateForm.cs,ExchangeRateForm_Load,The following statement contains a magic number: labelSwappedLocation = new Point(282' 127);
Magic Number,OpenCBS.GUI.Accounting,ExchangeRateForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\ExchangeRateForm.cs,ExchangeRateForm_Load,The following statement contains a magic number: buttonOKLocation = new Point(282'160);
Magic Number,OpenCBS.GUI.Accounting,ExchangeRateForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\ExchangeRateForm.cs,ExchangeRateForm_Load,The following statement contains a magic number: buttonOKLocation = new Point(282'160);
Magic Number,OpenCBS.GUI.Accounting,ExportBookingsForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\ExportBookingsForm.cs,Initialization,The following statement contains a magic number: if (names != null && names.Count > 0)                  foreach (string name in names)                      cbProcNames.Items.Add(name.Substring(17' name.Length - 17));
Magic Number,OpenCBS.GUI.Accounting,ExportBookingsForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\ExportBookingsForm.cs,Initialization,The following statement contains a magic number: if (names != null && names.Count > 0)                  foreach (string name in names)                      cbProcNames.Items.Add(name.Substring(17' name.Length - 17));
Magic Number,OpenCBS.GUI.Accounting,ExportBookingsForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\ExportBookingsForm.cs,InitializeListView,The following statement contains a magic number: listViewTransactionsList.Invoke(new MethodInvoker(                  delegate                      {                          listViewTransactionsList.Visible = false;                          if (_dataTable != null)                          {                              listViewTransactionsList.Columns.Add("Sr #"' 60);                                foreach (DataColumn column in _dataTable.Columns)                              {                                  listViewTransactionsList.Columns.Add(column.ColumnName' 120);                                  clbxFields.Items.Add(column.ColumnName' CheckState.Checked);                              }                                for (int i = 0; i <= _dataTable.Rows.Count-1; i++)                              {                                  ListViewItem item = new ListViewItem((i + 1).ToString());                                  item.SubItems.AddRange(Array.ConvertAll(_dataTable.Rows[i].ItemArray' p => p.ToString()));                                  item.Tag = _dataTable.Rows[i];                                  listViewTransactionsList.Items.Add(item);                              }                          }                      }              ));
Magic Number,OpenCBS.GUI.Accounting,ExportBookingsForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\ExportBookingsForm.cs,InitializeListView,The following statement contains a magic number: listViewTransactionsList.Invoke(new MethodInvoker(                  delegate                      {                          listViewTransactionsList.Visible = false;                          if (_dataTable != null)                          {                              listViewTransactionsList.Columns.Add("Sr #"' 60);                                foreach (DataColumn column in _dataTable.Columns)                              {                                  listViewTransactionsList.Columns.Add(column.ColumnName' 120);                                  clbxFields.Items.Add(column.ColumnName' CheckState.Checked);                              }                                for (int i = 0; i <= _dataTable.Rows.Count-1; i++)                              {                                  ListViewItem item = new ListViewItem((i + 1).ToString());                                  item.SubItems.AddRange(Array.ConvertAll(_dataTable.Rows[i].ItemArray' p => p.ToString()));                                  item.Tag = _dataTable.Rows[i];                                  listViewTransactionsList.Items.Add(item);                              }                          }                      }              ));
Magic Number,OpenCBS.GUI.Accounting,ExportBookingsForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\ExportBookingsForm.cs,BwExportToFile_WorkCompleted,The following statement contains a magic number: progressBarExport.Invoke(new MethodInvoker(delegate                                                             {                                                                 progressBarExport.Minimum = 0;                                                                 progressBarExport.Maximum = 100;                                                                 progressBarExport.Value = 5;                                                             }                                           ));
Magic Number,OpenCBS.GUI.Accounting,ExportBookingsForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\ExportBookingsForm.cs,BwExportToFile_WorkCompleted,The following statement contains a magic number: progressBarExport.Invoke(new MethodInvoker(delegate                                                             {                                                                 progressBarExport.Minimum = 0;                                                                 progressBarExport.Maximum = 100;                                                                 progressBarExport.Value = 5;                                                             }                                           ));
Magic Number,OpenCBS.GUI.Accounting,ExportBookingsForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\ExportBookingsForm.cs,BwExportToFile_DoWork,The following statement contains a magic number: progressBarExport.Invoke(new MethodInvoker(delegate                                                             {                                                                 progressBarExport.Minimum = 0;                                                                 progressBarExport.Value = 0;                                                                 progressBarExport.Step = 1;                                                                 progressBarExport.Maximum = 2;                                                             }                                           ));
Magic Number,OpenCBS.GUI.Accounting,ExportBookingsForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\ExportBookingsForm.cs,BwExportToFile_DoWork,The following statement contains a magic number: const int parts = 50;
Magic Number,OpenCBS.GUI.Accounting,ExportBookingsForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\ExportBookingsForm.cs,BwExportToFile_DoWork,The following statement contains a magic number: for (int i = 0; i < items.Count; i++)              {                  bool isChecked = false;                  progressBarExport.Invoke(new MethodInvoker(delegate { progressBarExport.PerformStep(); } ));                  listViewTransactionsList.Invoke(new MethodInvoker(delegate { isChecked = items[i].Checked; }));                    if (isChecked)                  {                      DataRow curRow = null;                      listViewTransactionsList.Invoke(new MethodInvoker(delegate { curRow = (DataRow)items[i].Tag; }));                        string[] arr = new String[clbxFields.CheckedItems.Count];                      int arrIdex = 0;                      for (int j = 0; j < curRow.Table.Columns.Count; j++)                      {                          foreach (int index in arrList)                          {                              if (index - 1 == j)                              {                                  arr[arrIdex] = cbQuoteNonnumeric.Checked                                               ? curRow.ItemArray[j].GetType() == typeof (string)                                                     ? "\"" + curRow.ItemArray[j] + "\""                                                     : curRow.ItemArray[j].ToString()                                               : curRow.ItemArray[j].ToString();                                  arrIdex++;                              }                          }                      }                        writer.WriteLine(string.Join(separator' arr));                                            count++;                      if (_idTable == null)                      {                          switch (curRow.ItemArray[1].ToString())                          {                              case "L": { idSetLoan += "'" + curRow.ItemArray[0]; break; }                              case "S": { idSetSaving += "'" + curRow.ItemArray[0]; break; }                              case "M": { idSetManual += "'" + curRow.ItemArray[0]; break; }                          }                            if (count == parts)                          {                              ServicesProvider.GetInstance().GetAccountingServices().UpdateElementaryMvtExportedValue(idSetLoan' 0);                              ServicesProvider.GetInstance().GetAccountingServices().UpdateElementaryMvtExportedValue(idSetSaving' 1);                              ServicesProvider.GetInstance().GetAccountingServices().UpdateElementaryMvtExportedValue(idSetManual' 2);                              count = 0;                              idSetLoan = "0";                              idSetSaving = "0";                              idSetManual = "0";                          }                      }                  }              }
Magic Number,OpenCBS.GUI.Accounting,ExportBookingsForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\ExportBookingsForm.cs,BwExportToFile_DoWork,The following statement contains a magic number: if (_idTable != null)              {                  count = 0;                  foreach (DataRow idRow in _idTable.Rows)                  {                      switch (idRow.ItemArray[1].ToString())                      {                          case "L": { idSetLoan += "'" + idRow.ItemArray[0]; break; }                          case "S": { idSetSaving += "'" + idRow.ItemArray[0]; break; }                          case "M": { idSetManual += "'" + idRow.ItemArray[0]; break; }                      }                      count++;                      if (count != parts) continue;                        ServicesProvider.GetInstance().GetAccountingServices().UpdateElementaryMvtExportedValue(idSetLoan' 0);                      ServicesProvider.GetInstance().GetAccountingServices().UpdateElementaryMvtExportedValue(idSetSaving' 1);                      ServicesProvider.GetInstance().GetAccountingServices().UpdateElementaryMvtExportedValue(idSetManual' 2);                      count = 0;                      idSetLoan = "0";                      idSetSaving = "0";                      idSetManual = "0";                  }              }
Magic Number,OpenCBS.GUI.Accounting,ExportBookingsForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\ExportBookingsForm.cs,BwExportToFile_DoWork,The following statement contains a magic number: ServicesProvider.GetInstance().GetAccountingServices().UpdateElementaryMvtExportedValue(idSetManual' 2);
Magic Number,OpenCBS.GUI.Accounting,ExportBookingsForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\ExportBookingsForm.cs,ExportBookings_Load,The following statement contains a magic number: progressBarExport.Maximum = 100;
Magic Number,OpenCBS.GUI.Accounting,ExportBookingsForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\ExportBookingsForm.cs,ExportBookings_Load,The following statement contains a magic number: progressBarExport.Value = 5;
Magic Number,OpenCBS.GUI.Accounting,ExportBookingsForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\ExportBookingsForm.cs,BwExportWorker_DoWork,The following statement contains a magic number: Invoke(new MethodInvoker(delegate                                           {                                               labelTotal.Text = _total.ToString();                                               labelSelected.Text = @"0";                                               progressBarExport.Value = 15;                                           }));
Magic Number,OpenCBS.GUI.Accounting,ExportBookingsForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\ExportBookingsForm.cs,BwExportWorker_DoWork,The following statement contains a magic number: _bwExportWorker.ReportProgress(100' e.Result);
Magic Number,OpenCBS.GUI.Accounting,ExportBookingsForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\ExportBookingsForm.cs,BwSelect_DoWork,The following statement contains a magic number: progressBarExport.Invoke(new MethodInvoker(delegate                                                             {                                                                 labelSelected.Text = toSelect                                                                                          ? (_selected / 2).ToString()                                                                                          : "0";                                                             }                                           ));
Magic Number,OpenCBS.GUI.Accounting,ExportBookingsForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\ExportBookingsForm.cs,cmbEncoding_SelectedIndexChanged,The following statement contains a magic number: switch (cmbEncoding.SelectedIndex)              {                  case 0: { _encoding = System.Text.Encoding.Unicode; break;}                       case 1: { _encoding = System.Text.Encoding.GetEncoding(1250); break;}                       case 2: { _encoding = System.Text.Encoding.GetEncoding(1251); break;}                   }
Magic Number,OpenCBS.GUI.Accounting,ExportBookingsForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\ExportBookingsForm.cs,cmbEncoding_SelectedIndexChanged,The following statement contains a magic number: switch (cmbEncoding.SelectedIndex)              {                  case 0: { _encoding = System.Text.Encoding.Unicode; break;}                       case 1: { _encoding = System.Text.Encoding.GetEncoding(1250); break;}                       case 2: { _encoding = System.Text.Encoding.GetEncoding(1251); break;}                   }
Magic Number,OpenCBS.GUI.Accounting,ExportBookingsForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\ExportBookingsForm.cs,cmbEncoding_SelectedIndexChanged,The following statement contains a magic number: switch (cmbEncoding.SelectedIndex)              {                  case 0: { _encoding = System.Text.Encoding.Unicode; break;}                       case 1: { _encoding = System.Text.Encoding.GetEncoding(1250); break;}                       case 2: { _encoding = System.Text.Encoding.GetEncoding(1251); break;}                   }
Magic Number,OpenCBS.GUI.Accounting,ExportBookingsForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\ExportBookingsForm.cs,clbxFields_ItemCheck,The following statement contains a magic number: foreach (ColumnHeader column in listViewTransactionsList.Columns)              {                  if (column.Index == e.Index + 1)                  {                      switch (e.NewValue)                      {                          case CheckState.Unchecked:                              column.Width = 0;                              break;                          case CheckState.Checked:                              column.Width = 120;                              break;                      }                  }              }
Magic Number,OpenCBS.GUI.Accounting,ManualEntries,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\ManualEntries.cs,InitializeComponent,The following statement contains a magic number: this.lblTitle.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(81))))' ((int)(((byte)(152)))));
Magic Number,OpenCBS.GUI.Accounting,ManualEntries,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\ManualEntries.cs,InitializeComponent,The following statement contains a magic number: this.lblTitle.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(81))))' ((int)(((byte)(152)))));
Magic Number,OpenCBS.GUI.Accounting,StandardBooking,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\StandardBooking.cs,InitializeComponent,The following statement contains a magic number: this.listBookings.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56)))));
Magic Number,OpenCBS.GUI.Accounting,StandardBooking,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\StandardBooking.cs,InitializeComponent,The following statement contains a magic number: this.listBookings.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56)))));
Magic Number,OpenCBS.GUI.Accounting,StandardBooking,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\StandardBooking.cs,InitializeComponent,The following statement contains a magic number: this.lblCaption.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(81))))' ((int)(((byte)(152)))));
Magic Number,OpenCBS.GUI.Accounting,StandardBooking,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\StandardBooking.cs,InitializeComponent,The following statement contains a magic number: this.lblCaption.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(81))))' ((int)(((byte)(152)))));
Magic Number,OpenCBS.GUI.Accounting,StandardBooking,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\StandardBooking.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel2.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(81))))' ((int)(((byte)(152)))));
Magic Number,OpenCBS.GUI.Accounting,StandardBooking,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\StandardBooking.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel2.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(81))))' ((int)(((byte)(152)))));
Magic Number,OpenCBS.GUI.Accounting,AccountTrialBalance,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\AccountTrialBalance.cs,IntializeTreeViewChartOfAccounts,The following statement contains a magic number: if (cbBranches.SelectedItem != null && cbCurrencies.SelectedItem != null)              {                    List<Account> accounts = ServicesProvider.GetInstance().GetChartOfAccountsServices().FindAllAccounts();                    foreach (Account account in accounts)                  {                      account.Balance =                          ServicesProvider.GetInstance().GetAccountingServices().GetAccountBalance(account.Id'                                                                                                   ((Currency)                                                                                                    cbCurrencies.                                                                                                        SelectedItem).Id'                                                                                                   _contractId' _mode' 1'                                                                                                   ((Branch)                                                                                                    cbBranches.                                                                                                        SelectedItem).                                                                                                       Id);                        account.CurrencyCode = ((Currency) cbCurrencies.SelectedItem).Code;                  }                    List<AccountCategory> accountCategories =                      ServicesProvider.GetInstance().GetChartOfAccountsServices().SelectAccountCategories();                  /////////////////////////////////////////////////////////////////////////////////////////                    tlvBalances.CanExpandGetter = delegate(object o)                                                    {                                                        Account account = (Account) o;                                                        if (account.Id == -1)                                                            return true;                                                          return                                                            accounts.FirstOrDefault(                                                                item => item.ParentAccountId == account.Id) != null;                                                    };                    tlvBalances.ChildrenGetter = delegate(object o)                                                   {                                                       Account account = (Account) o;                                                       if (account.Id == -1)                                                           return                                                               accounts.Where(                                                                   item =>                                                                   item.AccountCategory == account.AccountCategory &&                                                                   item.ParentAccountId == null);                                                         return accounts.Where(item => item.ParentAccountId == account.Id);                                                   };                    tlvBalances.RowFormatter = delegate(OLVListItem o)                                                 {                                                     Account account = (Account) o.RowObject;                                                     if (account.Id == -1)                                                     {                                                         o.ForeColor = Color.FromArgb(0' 88' 56);                                                         o.Font = new Font("Arial"' 9' FontStyle.Bold);                                                     }                                                 };                    TreeListView.TreeRenderer renderer = tlvBalances.TreeColumnRenderer;                  renderer.LinePen = new Pen(Color.Gray' 0.5f);                  renderer.LinePen.DashStyle = DashStyle.Dot;                    List<Account> list = new List<Account>();                    foreach (AccountCategory accountCategory in accountCategories)                  {                      string name = MultiLanguageStrings.GetString(Ressource.ChartOfAccountsForm'                                                                   accountCategory.Name + ".Text");                      name = name ?? accountCategory.Name;                        Account account = new Account                                            {                                                Number = name'                                                Balance =                                                    ServicesProvider.GetInstance().GetAccountingServices().                                                    GetAccountCategoryBalance(accountCategory.Id'                                                                              ((Currency) cbCurrencies.SelectedItem).Id'                                                                              _contractId' _mode)'                                                AccountCategory = (OAccountCategories) accountCategory.Id'                                                CurrencyCode = ((Currency) cbCurrencies.SelectedItem).Code'                                                Id = -1                                            };                        list.Add(account);                  }                    olvColumnLACBalance.AspectToStringConverter = delegate(object value)                                                                    {                                                                        if (value.ToString().Length > 0)                                                                        {                                                                            OCurrency amount = (OCurrency) value;                                                                            return amount.GetFormatedValue(true);                                                                        }                                                                        return null;                                                                    };                    tlvBalances.Roots = list;                  tlvBalances.ExpandAll();              }
Magic Number,OpenCBS.GUI.Accounting,AccountTrialBalance,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\AccountTrialBalance.cs,IntializeTreeViewChartOfAccounts,The following statement contains a magic number: if (cbBranches.SelectedItem != null && cbCurrencies.SelectedItem != null)              {                    List<Account> accounts = ServicesProvider.GetInstance().GetChartOfAccountsServices().FindAllAccounts();                    foreach (Account account in accounts)                  {                      account.Balance =                          ServicesProvider.GetInstance().GetAccountingServices().GetAccountBalance(account.Id'                                                                                                   ((Currency)                                                                                                    cbCurrencies.                                                                                                        SelectedItem).Id'                                                                                                   _contractId' _mode' 1'                                                                                                   ((Branch)                                                                                                    cbBranches.                                                                                                        SelectedItem).                                                                                                       Id);                        account.CurrencyCode = ((Currency) cbCurrencies.SelectedItem).Code;                  }                    List<AccountCategory> accountCategories =                      ServicesProvider.GetInstance().GetChartOfAccountsServices().SelectAccountCategories();                  /////////////////////////////////////////////////////////////////////////////////////////                    tlvBalances.CanExpandGetter = delegate(object o)                                                    {                                                        Account account = (Account) o;                                                        if (account.Id == -1)                                                            return true;                                                          return                                                            accounts.FirstOrDefault(                                                                item => item.ParentAccountId == account.Id) != null;                                                    };                    tlvBalances.ChildrenGetter = delegate(object o)                                                   {                                                       Account account = (Account) o;                                                       if (account.Id == -1)                                                           return                                                               accounts.Where(                                                                   item =>                                                                   item.AccountCategory == account.AccountCategory &&                                                                   item.ParentAccountId == null);                                                         return accounts.Where(item => item.ParentAccountId == account.Id);                                                   };                    tlvBalances.RowFormatter = delegate(OLVListItem o)                                                 {                                                     Account account = (Account) o.RowObject;                                                     if (account.Id == -1)                                                     {                                                         o.ForeColor = Color.FromArgb(0' 88' 56);                                                         o.Font = new Font("Arial"' 9' FontStyle.Bold);                                                     }                                                 };                    TreeListView.TreeRenderer renderer = tlvBalances.TreeColumnRenderer;                  renderer.LinePen = new Pen(Color.Gray' 0.5f);                  renderer.LinePen.DashStyle = DashStyle.Dot;                    List<Account> list = new List<Account>();                    foreach (AccountCategory accountCategory in accountCategories)                  {                      string name = MultiLanguageStrings.GetString(Ressource.ChartOfAccountsForm'                                                                   accountCategory.Name + ".Text");                      name = name ?? accountCategory.Name;                        Account account = new Account                                            {                                                Number = name'                                                Balance =                                                    ServicesProvider.GetInstance().GetAccountingServices().                                                    GetAccountCategoryBalance(accountCategory.Id'                                                                              ((Currency) cbCurrencies.SelectedItem).Id'                                                                              _contractId' _mode)'                                                AccountCategory = (OAccountCategories) accountCategory.Id'                                                CurrencyCode = ((Currency) cbCurrencies.SelectedItem).Code'                                                Id = -1                                            };                        list.Add(account);                  }                    olvColumnLACBalance.AspectToStringConverter = delegate(object value)                                                                    {                                                                        if (value.ToString().Length > 0)                                                                        {                                                                            OCurrency amount = (OCurrency) value;                                                                            return amount.GetFormatedValue(true);                                                                        }                                                                        return null;                                                                    };                    tlvBalances.Roots = list;                  tlvBalances.ExpandAll();              }
Magic Number,OpenCBS.GUI.Accounting,AccountTrialBalance,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\AccountTrialBalance.cs,IntializeTreeViewChartOfAccounts,The following statement contains a magic number: if (cbBranches.SelectedItem != null && cbCurrencies.SelectedItem != null)              {                    List<Account> accounts = ServicesProvider.GetInstance().GetChartOfAccountsServices().FindAllAccounts();                    foreach (Account account in accounts)                  {                      account.Balance =                          ServicesProvider.GetInstance().GetAccountingServices().GetAccountBalance(account.Id'                                                                                                   ((Currency)                                                                                                    cbCurrencies.                                                                                                        SelectedItem).Id'                                                                                                   _contractId' _mode' 1'                                                                                                   ((Branch)                                                                                                    cbBranches.                                                                                                        SelectedItem).                                                                                                       Id);                        account.CurrencyCode = ((Currency) cbCurrencies.SelectedItem).Code;                  }                    List<AccountCategory> accountCategories =                      ServicesProvider.GetInstance().GetChartOfAccountsServices().SelectAccountCategories();                  /////////////////////////////////////////////////////////////////////////////////////////                    tlvBalances.CanExpandGetter = delegate(object o)                                                    {                                                        Account account = (Account) o;                                                        if (account.Id == -1)                                                            return true;                                                          return                                                            accounts.FirstOrDefault(                                                                item => item.ParentAccountId == account.Id) != null;                                                    };                    tlvBalances.ChildrenGetter = delegate(object o)                                                   {                                                       Account account = (Account) o;                                                       if (account.Id == -1)                                                           return                                                               accounts.Where(                                                                   item =>                                                                   item.AccountCategory == account.AccountCategory &&                                                                   item.ParentAccountId == null);                                                         return accounts.Where(item => item.ParentAccountId == account.Id);                                                   };                    tlvBalances.RowFormatter = delegate(OLVListItem o)                                                 {                                                     Account account = (Account) o.RowObject;                                                     if (account.Id == -1)                                                     {                                                         o.ForeColor = Color.FromArgb(0' 88' 56);                                                         o.Font = new Font("Arial"' 9' FontStyle.Bold);                                                     }                                                 };                    TreeListView.TreeRenderer renderer = tlvBalances.TreeColumnRenderer;                  renderer.LinePen = new Pen(Color.Gray' 0.5f);                  renderer.LinePen.DashStyle = DashStyle.Dot;                    List<Account> list = new List<Account>();                    foreach (AccountCategory accountCategory in accountCategories)                  {                      string name = MultiLanguageStrings.GetString(Ressource.ChartOfAccountsForm'                                                                   accountCategory.Name + ".Text");                      name = name ?? accountCategory.Name;                        Account account = new Account                                            {                                                Number = name'                                                Balance =                                                    ServicesProvider.GetInstance().GetAccountingServices().                                                    GetAccountCategoryBalance(accountCategory.Id'                                                                              ((Currency) cbCurrencies.SelectedItem).Id'                                                                              _contractId' _mode)'                                                AccountCategory = (OAccountCategories) accountCategory.Id'                                                CurrencyCode = ((Currency) cbCurrencies.SelectedItem).Code'                                                Id = -1                                            };                        list.Add(account);                  }                    olvColumnLACBalance.AspectToStringConverter = delegate(object value)                                                                    {                                                                        if (value.ToString().Length > 0)                                                                        {                                                                            OCurrency amount = (OCurrency) value;                                                                            return amount.GetFormatedValue(true);                                                                        }                                                                        return null;                                                                    };                    tlvBalances.Roots = list;                  tlvBalances.ExpandAll();              }
Magic Number,OpenCBS.GUI.Accounting,AccountTrialBalance,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\AccountTrialBalance.cs,InitializeComponent,The following statement contains a magic number: this.lblTitle.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(81))))' ((int)(((byte)(152)))));
Magic Number,OpenCBS.GUI.Accounting,AccountTrialBalance,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\AccountTrialBalance.cs,InitializeComponent,The following statement contains a magic number: this.lblTitle.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(81))))' ((int)(((byte)(152)))));
Magic Number,OpenCBS.GUI.Accounting,TrialBalancePreview,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\TrialBalancePreview.cs,IntializeTreeViewChartOfAccounts,The following statement contains a magic number: if (accounts != null)              {                  foreach (Account account in accounts)                  {                      OCurrency debit =                          bookings.Sum(item => item.DebitAccount.Number == account.Number ? item.Amount.Value : 0);                      OCurrency credit =                          bookings.Sum(item => item.CreditAccount.Number == account.Number ? item.Amount.Value : 0);                      account.CloseBalance = account.DebitPlus                                                 ? account.OpenBalance + debit - credit                                                 : account.OpenBalance + credit - debit;                      account.CurrencyCode = currency.Code;                  }                    List<AccountCategory> accountCategories =                      ServicesProvider.GetInstance().GetChartOfAccountsServices().SelectAccountCategories();                  /////////////////////////////////////////////////////////////////////////////////////////                    tlvBalances.CanExpandGetter = delegate(object o)                                                    {                                                        Account account = (Account) o;                                                        if (account.Id == -1)                                                            return true;                                                          return                                                            accounts.FirstOrDefault(                                                                item => item.ParentAccountId == account.Id) != null;                                                    };                    tlvBalances.ChildrenGetter = delegate(object o)                                                   {                                                       Account account = (Account) o;                                                       if (account.Id == -1)                                                           return                                                               accounts.Where(                                                                   item =>                                                                   item.AccountCategory == account.AccountCategory &&                                                                   item.ParentAccountId == null);                                                         return accounts.Where(item => item.ParentAccountId == account.Id);                                                   };                    tlvBalances.RowFormatter = delegate(OLVListItem o)                                                 {                                                     Account account = (Account) o.RowObject;                                                     if (account.Id == -1)                                                     {                                                         o.ForeColor = Color.FromArgb(0' 88' 56);                                                         o.Font = new Font("Arial"' 9' FontStyle.Bold);                                                     }                                                 };                    TreeListView.TreeRenderer renderer = tlvBalances.TreeColumnRenderer;                  renderer.LinePen = new Pen(Color.Gray' 0.5f) {DashStyle = DashStyle.Dot};                    List<Account> list = new List<Account>();                    foreach (AccountCategory accountCategory in accountCategories)                  {                      string name = MultiLanguageStrings.GetString(Ressource.ChartOfAccountsForm'                                                                   accountCategory.Name + ".Text");                      name = name ?? accountCategory.Name;                        Account account = new Account                                            {                                                Number = name'                                                Balance = 0'                                                AccountCategory = (OAccountCategories) accountCategory.Id'                                                CurrencyCode = ""'                                                Id = -1                                            };                        list.Add(account);                  }                    olvColumn_CloseBalance.AspectToStringConverter = delegate(object value)                                                                       {                                                                           if (value.ToString().Length > 0)                                                                           {                                                                               OCurrency amount = (OCurrency) value;                                                                               return amount.GetFormatedValue(true);                                                                           }                                                                           return null;                                                                       };                  olvColumnLACBalance.AspectToStringConverter = delegate(object value)                                                                    {                                                                        if (value.ToString().Length > 0)                                                                        {                                                                            OCurrency amount = (OCurrency) value;                                                                            return amount.GetFormatedValue(true);                                                                        }                                                                        return null;                                                                    };                    tlvBalances.Roots = list;                  tlvBalances.ExpandAll();              }
Magic Number,OpenCBS.GUI.Accounting,TrialBalancePreview,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\TrialBalancePreview.cs,IntializeTreeViewChartOfAccounts,The following statement contains a magic number: if (accounts != null)              {                  foreach (Account account in accounts)                  {                      OCurrency debit =                          bookings.Sum(item => item.DebitAccount.Number == account.Number ? item.Amount.Value : 0);                      OCurrency credit =                          bookings.Sum(item => item.CreditAccount.Number == account.Number ? item.Amount.Value : 0);                      account.CloseBalance = account.DebitPlus                                                 ? account.OpenBalance + debit - credit                                                 : account.OpenBalance + credit - debit;                      account.CurrencyCode = currency.Code;                  }                    List<AccountCategory> accountCategories =                      ServicesProvider.GetInstance().GetChartOfAccountsServices().SelectAccountCategories();                  /////////////////////////////////////////////////////////////////////////////////////////                    tlvBalances.CanExpandGetter = delegate(object o)                                                    {                                                        Account account = (Account) o;                                                        if (account.Id == -1)                                                            return true;                                                          return                                                            accounts.FirstOrDefault(                                                                item => item.ParentAccountId == account.Id) != null;                                                    };                    tlvBalances.ChildrenGetter = delegate(object o)                                                   {                                                       Account account = (Account) o;                                                       if (account.Id == -1)                                                           return                                                               accounts.Where(                                                                   item =>                                                                   item.AccountCategory == account.AccountCategory &&                                                                   item.ParentAccountId == null);                                                         return accounts.Where(item => item.ParentAccountId == account.Id);                                                   };                    tlvBalances.RowFormatter = delegate(OLVListItem o)                                                 {                                                     Account account = (Account) o.RowObject;                                                     if (account.Id == -1)                                                     {                                                         o.ForeColor = Color.FromArgb(0' 88' 56);                                                         o.Font = new Font("Arial"' 9' FontStyle.Bold);                                                     }                                                 };                    TreeListView.TreeRenderer renderer = tlvBalances.TreeColumnRenderer;                  renderer.LinePen = new Pen(Color.Gray' 0.5f) {DashStyle = DashStyle.Dot};                    List<Account> list = new List<Account>();                    foreach (AccountCategory accountCategory in accountCategories)                  {                      string name = MultiLanguageStrings.GetString(Ressource.ChartOfAccountsForm'                                                                   accountCategory.Name + ".Text");                      name = name ?? accountCategory.Name;                        Account account = new Account                                            {                                                Number = name'                                                Balance = 0'                                                AccountCategory = (OAccountCategories) accountCategory.Id'                                                CurrencyCode = ""'                                                Id = -1                                            };                        list.Add(account);                  }                    olvColumn_CloseBalance.AspectToStringConverter = delegate(object value)                                                                       {                                                                           if (value.ToString().Length > 0)                                                                           {                                                                               OCurrency amount = (OCurrency) value;                                                                               return amount.GetFormatedValue(true);                                                                           }                                                                           return null;                                                                       };                  olvColumnLACBalance.AspectToStringConverter = delegate(object value)                                                                    {                                                                        if (value.ToString().Length > 0)                                                                        {                                                                            OCurrency amount = (OCurrency) value;                                                                            return amount.GetFormatedValue(true);                                                                        }                                                                        return null;                                                                    };                    tlvBalances.Roots = list;                  tlvBalances.ExpandAll();              }
Magic Number,OpenCBS.GUI.Accounting,TrialBalancePreview,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\TrialBalancePreview.cs,IntializeTreeViewChartOfAccounts,The following statement contains a magic number: if (accounts != null)              {                  foreach (Account account in accounts)                  {                      OCurrency debit =                          bookings.Sum(item => item.DebitAccount.Number == account.Number ? item.Amount.Value : 0);                      OCurrency credit =                          bookings.Sum(item => item.CreditAccount.Number == account.Number ? item.Amount.Value : 0);                      account.CloseBalance = account.DebitPlus                                                 ? account.OpenBalance + debit - credit                                                 : account.OpenBalance + credit - debit;                      account.CurrencyCode = currency.Code;                  }                    List<AccountCategory> accountCategories =                      ServicesProvider.GetInstance().GetChartOfAccountsServices().SelectAccountCategories();                  /////////////////////////////////////////////////////////////////////////////////////////                    tlvBalances.CanExpandGetter = delegate(object o)                                                    {                                                        Account account = (Account) o;                                                        if (account.Id == -1)                                                            return true;                                                          return                                                            accounts.FirstOrDefault(                                                                item => item.ParentAccountId == account.Id) != null;                                                    };                    tlvBalances.ChildrenGetter = delegate(object o)                                                   {                                                       Account account = (Account) o;                                                       if (account.Id == -1)                                                           return                                                               accounts.Where(                                                                   item =>                                                                   item.AccountCategory == account.AccountCategory &&                                                                   item.ParentAccountId == null);                                                         return accounts.Where(item => item.ParentAccountId == account.Id);                                                   };                    tlvBalances.RowFormatter = delegate(OLVListItem o)                                                 {                                                     Account account = (Account) o.RowObject;                                                     if (account.Id == -1)                                                     {                                                         o.ForeColor = Color.FromArgb(0' 88' 56);                                                         o.Font = new Font("Arial"' 9' FontStyle.Bold);                                                     }                                                 };                    TreeListView.TreeRenderer renderer = tlvBalances.TreeColumnRenderer;                  renderer.LinePen = new Pen(Color.Gray' 0.5f) {DashStyle = DashStyle.Dot};                    List<Account> list = new List<Account>();                    foreach (AccountCategory accountCategory in accountCategories)                  {                      string name = MultiLanguageStrings.GetString(Ressource.ChartOfAccountsForm'                                                                   accountCategory.Name + ".Text");                      name = name ?? accountCategory.Name;                        Account account = new Account                                            {                                                Number = name'                                                Balance = 0'                                                AccountCategory = (OAccountCategories) accountCategory.Id'                                                CurrencyCode = ""'                                                Id = -1                                            };                        list.Add(account);                  }                    olvColumn_CloseBalance.AspectToStringConverter = delegate(object value)                                                                       {                                                                           if (value.ToString().Length > 0)                                                                           {                                                                               OCurrency amount = (OCurrency) value;                                                                               return amount.GetFormatedValue(true);                                                                           }                                                                           return null;                                                                       };                  olvColumnLACBalance.AspectToStringConverter = delegate(object value)                                                                    {                                                                        if (value.ToString().Length > 0)                                                                        {                                                                            OCurrency amount = (OCurrency) value;                                                                            return amount.GetFormatedValue(true);                                                                        }                                                                        return null;                                                                    };                    tlvBalances.Roots = list;                  tlvBalances.ExpandAll();              }
Magic Number,OpenCBS.GUI.AuditTrail,AuditTrailForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\AuditTrail\AuditTrailForm.cs,InitializeComponent,The following statement contains a magic number: this.tabPeriod.Controls.Add(this.dtTo' 2' 0);
Magic Number,OpenCBS.GUI.AuditTrail,AuditTrailForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\AuditTrail\AuditTrailForm.cs,InitializeComponent,The following statement contains a magic number: this.lblTitle.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(64))))' ((int)(((byte)(0)))));
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.lblGuarantorsList.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(81))))' ((int)(((byte)(152)))));
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.lblGuarantorsList.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(81))))' ((int)(((byte)(152)))));
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.lblCollaterals.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(81))))' ((int)(((byte)(152)))));
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.lblCollaterals.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(81))))' ((int)(((byte)(152)))));
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.labelLoansContracts.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(81))))' ((int)(((byte)(152)))));
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.labelLoansContracts.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(81))))' ((int)(((byte)(152)))));
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.labelSavingsContracts.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(81))))' ((int)(((byte)(152)))));
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.labelSavingsContracts.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(81))))' ((int)(((byte)(152)))));
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Controls.Add(this.tabControlProject' 0' 2);
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel4.Controls.Add(this._scheduleTypeComboBox' 1' 6);
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel4.Controls.Add(this._installmentTypeComboBox' 1' 5);
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel4.Controls.Add(this._installmentTypeLabel' 0' 5);
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel4.Controls.Add(this.lblEconomicActivity' 3' 4);
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel4.Controls.Add(this.lblEconomicActivity' 3' 4);
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel4.Controls.Add(this.labelDateOffirstInstallment' 3' 2);
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel4.Controls.Add(this.labelDateOffirstInstallment' 3' 2);
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel4.Controls.Add(this.labelLoanAmountMinMax' 2' 1);
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel4.Controls.Add(this.labelLoanNbOfInstallmentsMinMax' 2' 4);
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel4.Controls.Add(this.labelLoanNbOfInstallmentsMinMax' 2' 4);
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel4.Controls.Add(this.dtpDateOfFirstInstallment' 4' 2);
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel4.Controls.Add(this.dtpDateOfFirstInstallment' 4' 2);
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel4.Controls.Add(this.labelLoanGracePeriodMinMax' 2' 3);
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel4.Controls.Add(this.labelLoanGracePeriodMinMax' 2' 3);
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel4.Controls.Add(this.labelLoanInterestRate' 0' 2);
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel4.Controls.Add(this.dateLoanStart' 4' 1);
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel4.Controls.Add(this.labelLoanNbOfInstallments' 0' 4);
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel4.Controls.Add(this.labelLoanStartDate' 3' 1);
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel4.Controls.Add(this.lbLoanInterestRateMinMax' 2' 2);
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel4.Controls.Add(this.lbLoanInterestRateMinMax' 2' 2);
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel4.Controls.Add(this.labelLoanGracePeriod' 0' 3);
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel4.Controls.Add(this.numericUpDownLoanGracePeriod' 1' 3);
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel4.Controls.Add(this.nudLoanNbOfInstallments' 1' 4);
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel4.Controls.Add(this.lblDay' 5' 2);
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel4.Controls.Add(this.lblDay' 5' 2);
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel4.Controls.Add(this._loanOfficerComboBox' 4' 0);
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel4.Controls.Add(this.labelLoanLoanOfficer' 3' 0);
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel4.Controls.Add(this.labelLoanFundingLine' 3' 3);
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel4.Controls.Add(this.labelLoanFundingLine' 3' 3);
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel4.Controls.Add(this.comboBoxLoanFundingLine' 4' 3);
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel4.Controls.Add(this.comboBoxLoanFundingLine' 4' 3);
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel4.Controls.Add(this.labelLoanPurpose' 3' 5);
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel4.Controls.Add(this.labelLoanPurpose' 3' 5);
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel4.Controls.Add(this.textBoxLoanPurpose' 4' 5);
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel4.Controls.Add(this.textBoxLoanPurpose' 4' 5);
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel4.Controls.Add(this.nudInterestRate' 1' 2);
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel4.Controls.Add(this.eacLoan' 4' 4);
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel4.Controls.Add(this.eacLoan' 4' 4);
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel4.Controls.Add(this._scheduleTypeLabel' 0' 6);
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel4.SetColumnSpan(this._scheduleTypeComboBox' 2);
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel4.SetColumnSpan(this._installmentTypeComboBox' 2);
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel4.SetColumnSpan(this.textBoxLoanContractCode' 2);
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel4.SetColumnSpan(this._loanOfficerComboBox' 2);
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel4.SetColumnSpan(this.comboBoxLoanFundingLine' 2);
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel4.SetColumnSpan(this.textBoxLoanPurpose' 3);
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel4.SetRowSpan(this.textBoxLoanPurpose' 2);
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.nudInterestRate.DecimalPlaces = 10;
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.nudInterestRate.Increment = new decimal(new int[] {              1'              0'              0'              131072});
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel4.SetColumnSpan(this.eacLoan' 3);
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel6.Controls.Add(this.btnUpdateSettings' 0' 7);
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel6.Controls.Add(this.groupBox2' 0' 5);
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel6.Controls.Add(this.labelComments' 0' 6);
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel6.Controls.Add(this.textBoxComments' 1' 6);
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel6.SetColumnSpan(this.flowLayoutPanel5' 5);
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel7.Controls.Add(this.lblEarlyPartialRepaimentBase' 3' 1);
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel7.Controls.Add(this.lblEarlyTotalRepaimentBase' 3' 0);
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel7.Controls.Add(this.lblLoanAnticipatedPartialFeesMinMax' 2' 1);
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel7.Controls.Add(this.labelLoanAnticipatedTotalFeesMinMax' 2' 0);
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel8.Controls.Add(this.labelLoanLateFeesOnOverduePrincipalMinMax' 2' 1);
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel8.Controls.Add(this.labelLoanLateFeesOnAmountMinMax' 2' 0);
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel8.Controls.Add(this.labelLoanLateFeesOnOLB' 3' 0);
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel8.Controls.Add(this.textBoxLoanLateFeesOnOLB' 4' 0);
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel8.Controls.Add(this.labelLoanLateFeesOnOLBMinMax' 5' 0);
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel8.Controls.Add(this.labelLoanLateFeesOnOverdueInterest' 3' 1);
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel8.Controls.Add(this.textBoxLoanLateFeesOnOverdueInterest' 4' 1);
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel8.Controls.Add(this.labelLoanLateFeesOnOverdueInterestMinMax' 5' 1);
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel6.SetColumnSpan(this.groupBoxEntryFees' 5);
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel6.SetColumnSpan(this.groupBox2' 5);
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel10.Controls.Add(this.linkCompulsorySavings' 2' 1);
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel10.Controls.Add(this.lbCompAmountPercentMinMax' 2' 0);
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.numCompulsoryAmountPercent.Maximum = new decimal(new int[] {              3'              0'              0'              0});
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.linkCompulsorySavings.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56)))));
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.linkCompulsorySavings.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56)))));
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.linkCompulsorySavings.LinkColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56)))));
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.linkCompulsorySavings.LinkColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56)))));
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel6.SetColumnSpan(this.textBoxComments' 3);
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel9.Controls.Add(this.labelLocMin' 2' 0);
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel9.Controls.Add(this.labelLocMax' 2' 1);
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel9.Controls.Add(this.labelLocMinAmount' 3' 0);
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel9.Controls.Add(this.labelLocMaxAmount' 3' 1);
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel9.Controls.Add(this.lblInsuranceMin' 8' 0);
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel9.Controls.Add(this.lblInsuranceMax' 8' 1);
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel9.Controls.Add(this.label5' 7' 1);
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel9.Controls.Add(this.label4' 7' 0);
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel9.Controls.Add(this.tbInsurance' 6' 0);
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel9.Controls.Add(this.lblCreditInsurance' 5' 0);
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel9.Controls.Add(this.label6' 9' 0);
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel9.Controls.Add(this.label7' 9' 1);
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel9.Controls.Add(this.lblLocCurrencyMin' 4' 0);
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel9.Controls.Add(this.lblLocCurrencyMax' 4' 1);
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel9.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56)))));
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel9.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56)))));
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel9.SetRowSpan(this.labelLocAmount' 2);
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel9.SetRowSpan(this.tbLocAmount' 2);
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel9.SetRowSpan(this.tbInsurance' 2);
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel9.SetRowSpan(this.lblCreditInsurance' 2);
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.imageListTab.Images.SetKeyName(2' "edit.ico");
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.imageListTab.Images.SetKeyName(3' "monthly_cash_flow.ico");
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.imageListTab.Images.SetKeyName(4' "repayments.ico");
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.richTextBoxStatus.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56)))));
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.richTextBoxStatus.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56)))));
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel16.Controls.Add(this.lbInterestBasedOnValue' 1' 2);
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel16.Controls.Add(this.lbInterestBasedOn' 0' 2);
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tlpSBDetails.Controls.Add(this.lblIbtFeeMinMax' 2' 7);
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tlpSBDetails.Controls.Add(this.lblIbtFeeMinMax' 2' 7);
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tlpSBDetails.Controls.Add(this.nudIbtFee' 1' 7);
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tlpSBDetails.Controls.Add(this.lbReopenFeesMinMax' 2' 6);
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tlpSBDetails.Controls.Add(this.lbReopenFeesMinMax' 2' 6);
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tlpSBDetails.Controls.Add(this.lbTransferFeesMinMax' 2' 0);
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tlpSBDetails.Controls.Add(this.nudReopenFees' 1' 6);
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tlpSBDetails.Controls.Add(this.lbReopenFees' 0' 6);
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tlpSBDetails.Controls.Add(this.lbDepositFeesMinMax' 2' 1);
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tlpSBDetails.Controls.Add(this.lbAgioFeesMinMax' 2' 5);
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tlpSBDetails.Controls.Add(this.lbAgioFeesMinMax' 2' 5);
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tlpSBDetails.Controls.Add(this.lbChequeDepositFees' 0' 8);
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tlpSBDetails.Controls.Add(this.nudAgioFees' 1' 5);
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tlpSBDetails.Controls.Add(this.nudChequeDepositFees' 1' 8);
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tlpSBDetails.Controls.Add(this.lbAgioFees' 0' 5);
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tlpSBDetails.Controls.Add(this.lbOverdraftFeesMinMax' 2' 4);
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tlpSBDetails.Controls.Add(this.lbOverdraftFeesMinMax' 2' 4);
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tlpSBDetails.Controls.Add(this.lblChequeDepositFeesMinMax' 2' 8);
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tlpSBDetails.Controls.Add(this.lblChequeDepositFeesMinMax' 2' 8);
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tlpSBDetails.Controls.Add(this.lbCloseFees' 0' 2);
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tlpSBDetails.Controls.Add(this.nudOverdraftFees' 1' 4);
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tlpSBDetails.Controls.Add(this.nudCloseFees' 1' 2);
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tlpSBDetails.Controls.Add(this.lbOverdraftFees' 0' 4);
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tlpSBDetails.Controls.Add(this.lbCloseFeesMinMax' 2' 2);
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tlpSBDetails.Controls.Add(this.lbCloseFeesMinMax' 2' 2);
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tlpSBDetails.Controls.Add(this.lbManagementFeesMinMax' 2' 3);
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tlpSBDetails.Controls.Add(this.lbManagementFeesMinMax' 2' 3);
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tlpSBDetails.Controls.Add(this.lbManagementFees' 0' 3);
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tlpSBDetails.Controls.Add(this.nudManagementFees' 1' 3);
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tlpSBDetails.Controls.Add(this.lblInterBranchTransfer' 0' 7);
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.nudIbtFee.Maximum = new decimal(new int[] {              3'              0'              0'              0});
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.nudTransferFees.Maximum = new decimal(new int[] {              3'              0'              0'              0});
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.nudReopenFees.Maximum = new decimal(new int[] {              3'              0'              0'              0});
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.nudAgioFees.Maximum = new decimal(new int[] {              3'              0'              0'              0});
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.nudChequeDepositFees.Maximum = new decimal(new int[] {              3'              0'              0'              0});
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.nudOverdraftFees.Maximum = new decimal(new int[] {              3'              0'              0'              0});
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.nudCloseFees.Maximum = new decimal(new int[] {              3'              0'              0'              0});
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.nudManagementFees.Maximum = new decimal(new int[] {              3'              0'              0'              0});
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.nudDepositFees.Maximum = new decimal(new int[] {              3'              0'              0'              0});
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.olvLoans.SelectedColumnTint = System.Drawing.Color.FromArgb(((int)(((byte)(15))))' ((int)(((byte)(0))))' ((int)(((byte)(0))))' ((int)(((byte)(192)))));
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.olvLoans.SelectedColumnTint = System.Drawing.Color.FromArgb(((int)(((byte)(15))))' ((int)(((byte)(0))))' ((int)(((byte)(0))))' ((int)(((byte)(192)))));
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tlpTermDeposit.Controls.Add(this.lblLimitOfTermDepositPeriod' 2' 0);
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tlpTermDeposit.Controls.Add(this.tbTargetAccount2' 1' 2);
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tlpTermDeposit.Controls.Add(this.btSearchContract2' 2' 2);
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tlpTermDeposit.Controls.Add(this.btSearchContract2' 2' 2);
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tlpTermDeposit.Controls.Add(this.lblTermTransferToAccount' 0' 2);
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.btSearchContract2.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56)))));
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.btSearchContract2.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56)))));
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel5.Controls.Add(this.lbSavingAvBalanceValue' 5' 1);
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel5.Controls.Add(this.lBSavingAvBalance' 4' 1);
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel5.Controls.Add(this.lbEntryFeesMinMax' 2' 2);
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel5.Controls.Add(this.lbEntryFeesMinMax' 2' 2);
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel5.Controls.Add(this.lbInitialAmountMinMax' 2' 1);
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel5.Controls.Add(this.lbEntryFees' 0' 2);
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel5.Controls.Add(this.nudEntryFees' 1' 2);
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel5.Controls.Add(this.label1' 0' 3);
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel5.Controls.Add(this.lbSavingBalanceValue' 5' 0);
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel5.Controls.Add(this.lBSavingBalance' 4' 0);
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel5.Controls.Add(this.cmbSavingsOfficer' 1' 3);
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel5.Controls.Add(this.labelInterestRate' 3' 2);
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel5.Controls.Add(this.labelInterestRate' 3' 2);
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel5.Controls.Add(this.nudDownInterestRate' 4' 2);
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel5.Controls.Add(this.nudDownInterestRate' 4' 2);
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel5.Controls.Add(this.lbWithdrawFees' 3' 3);
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel5.Controls.Add(this.lbWithdrawFees' 3' 3);
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel5.Controls.Add(this.nudWithdrawFees' 4' 3);
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel5.Controls.Add(this.nudWithdrawFees' 4' 3);
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel5.Controls.Add(this.lbInterestRateMinMax' 5' 2);
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel5.Controls.Add(this.lbInterestRateMinMax' 5' 2);
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel5.Controls.Add(this.lbWithdrawFeesMinMax' 5' 3);
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel5.Controls.Add(this.lbWithdrawFeesMinMax' 5' 3);
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.nudEntryFees.Maximum = new decimal(new int[] {              3'              0'              0'              0});
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.nudDownInitialAmount.Maximum = new decimal(new int[] {              3'              0'              0'              0});
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel5.SetColumnSpan(this.tBSavingCode' 2);
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel5.SetColumnSpan(this.cmbSavingsOfficer' 2);
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.nudDownInterestRate.DecimalPlaces = 4;
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.nudDownInterestRate.Increment = new decimal(new int[] {              1'              0'              0'              262144});
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.nudDownInterestRate.Maximum = new decimal(new int[] {              3'              0'              0'              0});
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.nudWithdrawFees.Maximum = new decimal(new int[] {              3'              0'              0'              0});
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.savingDepositToolStripMenuItem.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56)))));
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.savingDepositToolStripMenuItem.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56)))));
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.savingWithdrawToolStripMenuItem.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56)))));
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.savingWithdrawToolStripMenuItem.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56)))));
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.savingTransferToolStripMenuItem.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56)))));
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.savingTransferToolStripMenuItem.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56)))));
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.specialOperationToolStripMenuItem.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56)))));
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.specialOperationToolStripMenuItem.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56)))));
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.buttonPrintSchedule.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56)))));
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.buttonPrintSchedule.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56)))));
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.buttonReschedule.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56)))));
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.buttonReschedule.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56)))));
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.buttonRepay.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56)))));
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.buttonRepay.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56)))));
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeContractStatus,The following statement contains a magic number: if (pCredit.WrittenOff)              {                  lblLoanStatus.Text = MultiLanguageStrings.GetString(Ressource.CreditContractForm' "statusWriteOff.Text");                  lblLoanStatus.ForeColor = Color.FromArgb(0' 0' 0);                  lblLoanStatus.Visible = true;              }              else if (pCredit.Closed)              {                  lblLoanStatus.Text = MultiLanguageStrings.GetString(Ressource.CreditContractForm' "fullyRepaid.Text");                  lblLoanStatus.ForeColor = Color.FromArgb(61' 153' 57);                  lblLoanStatus.Visible = true;              }              else if (pCredit.Rescheduled)              {                  lblLoanStatus.Text = MultiLanguageStrings.GetString(Ressource.CreditContractForm' "statusRescheduled.Text");                  lblLoanStatus.ForeColor = Color.RoyalBlue;                  lblLoanStatus.Visible = true;              }              else if (pCredit.BadLoan)              {                  lblLoanStatus.Text = MultiLanguageStrings.GetString(Ressource.CreditContractForm' "statusBadLoan.Text");                  lblLoanStatus.ForeColor = Color.FromArgb(255' 92' 92);                  lblLoanStatus.Visible = true;              }
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeContractStatus,The following statement contains a magic number: if (pCredit.WrittenOff)              {                  lblLoanStatus.Text = MultiLanguageStrings.GetString(Ressource.CreditContractForm' "statusWriteOff.Text");                  lblLoanStatus.ForeColor = Color.FromArgb(0' 0' 0);                  lblLoanStatus.Visible = true;              }              else if (pCredit.Closed)              {                  lblLoanStatus.Text = MultiLanguageStrings.GetString(Ressource.CreditContractForm' "fullyRepaid.Text");                  lblLoanStatus.ForeColor = Color.FromArgb(61' 153' 57);                  lblLoanStatus.Visible = true;              }              else if (pCredit.Rescheduled)              {                  lblLoanStatus.Text = MultiLanguageStrings.GetString(Ressource.CreditContractForm' "statusRescheduled.Text");                  lblLoanStatus.ForeColor = Color.RoyalBlue;                  lblLoanStatus.Visible = true;              }              else if (pCredit.BadLoan)              {                  lblLoanStatus.Text = MultiLanguageStrings.GetString(Ressource.CreditContractForm' "statusBadLoan.Text");                  lblLoanStatus.ForeColor = Color.FromArgb(255' 92' 92);                  lblLoanStatus.Visible = true;              }
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeContractStatus,The following statement contains a magic number: if (pCredit.WrittenOff)              {                  lblLoanStatus.Text = MultiLanguageStrings.GetString(Ressource.CreditContractForm' "statusWriteOff.Text");                  lblLoanStatus.ForeColor = Color.FromArgb(0' 0' 0);                  lblLoanStatus.Visible = true;              }              else if (pCredit.Closed)              {                  lblLoanStatus.Text = MultiLanguageStrings.GetString(Ressource.CreditContractForm' "fullyRepaid.Text");                  lblLoanStatus.ForeColor = Color.FromArgb(61' 153' 57);                  lblLoanStatus.Visible = true;              }              else if (pCredit.Rescheduled)              {                  lblLoanStatus.Text = MultiLanguageStrings.GetString(Ressource.CreditContractForm' "statusRescheduled.Text");                  lblLoanStatus.ForeColor = Color.RoyalBlue;                  lblLoanStatus.Visible = true;              }              else if (pCredit.BadLoan)              {                  lblLoanStatus.Text = MultiLanguageStrings.GetString(Ressource.CreditContractForm' "statusBadLoan.Text");                  lblLoanStatus.ForeColor = Color.FromArgb(255' 92' 92);                  lblLoanStatus.Visible = true;              }
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeContractStatus,The following statement contains a magic number: if (pCredit.WrittenOff)              {                  lblLoanStatus.Text = MultiLanguageStrings.GetString(Ressource.CreditContractForm' "statusWriteOff.Text");                  lblLoanStatus.ForeColor = Color.FromArgb(0' 0' 0);                  lblLoanStatus.Visible = true;              }              else if (pCredit.Closed)              {                  lblLoanStatus.Text = MultiLanguageStrings.GetString(Ressource.CreditContractForm' "fullyRepaid.Text");                  lblLoanStatus.ForeColor = Color.FromArgb(61' 153' 57);                  lblLoanStatus.Visible = true;              }              else if (pCredit.Rescheduled)              {                  lblLoanStatus.Text = MultiLanguageStrings.GetString(Ressource.CreditContractForm' "statusRescheduled.Text");                  lblLoanStatus.ForeColor = Color.RoyalBlue;                  lblLoanStatus.Visible = true;              }              else if (pCredit.BadLoan)              {                  lblLoanStatus.Text = MultiLanguageStrings.GetString(Ressource.CreditContractForm' "statusBadLoan.Text");                  lblLoanStatus.ForeColor = Color.FromArgb(255' 92' 92);                  lblLoanStatus.Visible = true;              }
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeContractStatus,The following statement contains a magic number: if (pCredit.WrittenOff)              {                  lblLoanStatus.Text = MultiLanguageStrings.GetString(Ressource.CreditContractForm' "statusWriteOff.Text");                  lblLoanStatus.ForeColor = Color.FromArgb(0' 0' 0);                  lblLoanStatus.Visible = true;              }              else if (pCredit.Closed)              {                  lblLoanStatus.Text = MultiLanguageStrings.GetString(Ressource.CreditContractForm' "fullyRepaid.Text");                  lblLoanStatus.ForeColor = Color.FromArgb(61' 153' 57);                  lblLoanStatus.Visible = true;              }              else if (pCredit.Rescheduled)              {                  lblLoanStatus.Text = MultiLanguageStrings.GetString(Ressource.CreditContractForm' "statusRescheduled.Text");                  lblLoanStatus.ForeColor = Color.RoyalBlue;                  lblLoanStatus.Visible = true;              }              else if (pCredit.BadLoan)              {                  lblLoanStatus.Text = MultiLanguageStrings.GetString(Ressource.CreditContractForm' "statusBadLoan.Text");                  lblLoanStatus.ForeColor = Color.FromArgb(255' 92' 92);                  lblLoanStatus.Visible = true;              }
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeContractStatus,The following statement contains a magic number: if (pCredit.WrittenOff)              {                  lblLoanStatus.Text = MultiLanguageStrings.GetString(Ressource.CreditContractForm' "statusWriteOff.Text");                  lblLoanStatus.ForeColor = Color.FromArgb(0' 0' 0);                  lblLoanStatus.Visible = true;              }              else if (pCredit.Closed)              {                  lblLoanStatus.Text = MultiLanguageStrings.GetString(Ressource.CreditContractForm' "fullyRepaid.Text");                  lblLoanStatus.ForeColor = Color.FromArgb(61' 153' 57);                  lblLoanStatus.Visible = true;              }              else if (pCredit.Rescheduled)              {                  lblLoanStatus.Text = MultiLanguageStrings.GetString(Ressource.CreditContractForm' "statusRescheduled.Text");                  lblLoanStatus.ForeColor = Color.RoyalBlue;                  lblLoanStatus.Visible = true;              }              else if (pCredit.BadLoan)              {                  lblLoanStatus.Text = MultiLanguageStrings.GetString(Ressource.CreditContractForm' "statusBadLoan.Text");                  lblLoanStatus.ForeColor = Color.FromArgb(255' 92' 92);                  lblLoanStatus.Visible = true;              }
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeTitle,The following statement contains a magic number: if (_person != null)              {                  Text = string.IsNullOrEmpty(title) ? MultiLanguageStrings.GetString(Ressource.ClientForm' "Person.Text") : title;                  if (_person.BadClient)                  {                      Text += "  " + MultiLanguageStrings.GetString(Ressource.ClientForm' "Bad.Text");                      lblTitle.BackColor = Color.Red;                  }                  else                  {                      lblTitle.BackColor = Color.FromArgb(0' 81' 152);                  }              }              else if (_group != null)              {                  Text = string.IsNullOrEmpty(title) ? MultiLanguageStrings.GetString(Ressource.ClientForm' "Group.Text") : title + " - (" + _group.LoanCycle + ")";                    if (_group.BadClient)                  {                      Text += "  " + MultiLanguageStrings.GetString(Ressource.ClientForm' "Bad.Text");                      lblTitle.BackColor = Color.Red;                  }                  else                  {                      lblTitle.BackColor = Color.FromArgb(0' 81' 152);                  }              }              else              {                  Text = string.IsNullOrEmpty(title) ? MultiLanguageStrings.GetString(Ressource.ClientForm' "Corporate.Text") : title;                  if (_corporate.BadClient)                  {                      Text += "  " + MultiLanguageStrings.GetString(Ressource.ClientForm' "Bad.Text");                      lblTitle.BackColor = Color.Red;                  }                  else                  {                      lblTitle.BackColor = Color.FromArgb(0' 81' 152);                  }              }
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeTitle,The following statement contains a magic number: if (_person != null)              {                  Text = string.IsNullOrEmpty(title) ? MultiLanguageStrings.GetString(Ressource.ClientForm' "Person.Text") : title;                  if (_person.BadClient)                  {                      Text += "  " + MultiLanguageStrings.GetString(Ressource.ClientForm' "Bad.Text");                      lblTitle.BackColor = Color.Red;                  }                  else                  {                      lblTitle.BackColor = Color.FromArgb(0' 81' 152);                  }              }              else if (_group != null)              {                  Text = string.IsNullOrEmpty(title) ? MultiLanguageStrings.GetString(Ressource.ClientForm' "Group.Text") : title + " - (" + _group.LoanCycle + ")";                    if (_group.BadClient)                  {                      Text += "  " + MultiLanguageStrings.GetString(Ressource.ClientForm' "Bad.Text");                      lblTitle.BackColor = Color.Red;                  }                  else                  {                      lblTitle.BackColor = Color.FromArgb(0' 81' 152);                  }              }              else              {                  Text = string.IsNullOrEmpty(title) ? MultiLanguageStrings.GetString(Ressource.ClientForm' "Corporate.Text") : title;                  if (_corporate.BadClient)                  {                      Text += "  " + MultiLanguageStrings.GetString(Ressource.ClientForm' "Bad.Text");                      lblTitle.BackColor = Color.Red;                  }                  else                  {                      lblTitle.BackColor = Color.FromArgb(0' 81' 152);                  }              }
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeTitle,The following statement contains a magic number: if (_person != null)              {                  Text = string.IsNullOrEmpty(title) ? MultiLanguageStrings.GetString(Ressource.ClientForm' "Person.Text") : title;                  if (_person.BadClient)                  {                      Text += "  " + MultiLanguageStrings.GetString(Ressource.ClientForm' "Bad.Text");                      lblTitle.BackColor = Color.Red;                  }                  else                  {                      lblTitle.BackColor = Color.FromArgb(0' 81' 152);                  }              }              else if (_group != null)              {                  Text = string.IsNullOrEmpty(title) ? MultiLanguageStrings.GetString(Ressource.ClientForm' "Group.Text") : title + " - (" + _group.LoanCycle + ")";                    if (_group.BadClient)                  {                      Text += "  " + MultiLanguageStrings.GetString(Ressource.ClientForm' "Bad.Text");                      lblTitle.BackColor = Color.Red;                  }                  else                  {                      lblTitle.BackColor = Color.FromArgb(0' 81' 152);                  }              }              else              {                  Text = string.IsNullOrEmpty(title) ? MultiLanguageStrings.GetString(Ressource.ClientForm' "Corporate.Text") : title;                  if (_corporate.BadClient)                  {                      Text += "  " + MultiLanguageStrings.GetString(Ressource.ClientForm' "Bad.Text");                      lblTitle.BackColor = Color.Red;                  }                  else                  {                      lblTitle.BackColor = Color.FromArgb(0' 81' 152);                  }              }
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeTitle,The following statement contains a magic number: if (_person != null)              {                  Text = string.IsNullOrEmpty(title) ? MultiLanguageStrings.GetString(Ressource.ClientForm' "Person.Text") : title;                  if (_person.BadClient)                  {                      Text += "  " + MultiLanguageStrings.GetString(Ressource.ClientForm' "Bad.Text");                      lblTitle.BackColor = Color.Red;                  }                  else                  {                      lblTitle.BackColor = Color.FromArgb(0' 81' 152);                  }              }              else if (_group != null)              {                  Text = string.IsNullOrEmpty(title) ? MultiLanguageStrings.GetString(Ressource.ClientForm' "Group.Text") : title + " - (" + _group.LoanCycle + ")";                    if (_group.BadClient)                  {                      Text += "  " + MultiLanguageStrings.GetString(Ressource.ClientForm' "Bad.Text");                      lblTitle.BackColor = Color.Red;                  }                  else                  {                      lblTitle.BackColor = Color.FromArgb(0' 81' 152);                  }              }              else              {                  Text = string.IsNullOrEmpty(title) ? MultiLanguageStrings.GetString(Ressource.ClientForm' "Corporate.Text") : title;                  if (_corporate.BadClient)                  {                      Text += "  " + MultiLanguageStrings.GetString(Ressource.ClientForm' "Bad.Text");                      lblTitle.BackColor = Color.Red;                  }                  else                  {                      lblTitle.BackColor = Color.FromArgb(0' 81' 152);                  }              }
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeTitle,The following statement contains a magic number: if (_person != null)              {                  Text = string.IsNullOrEmpty(title) ? MultiLanguageStrings.GetString(Ressource.ClientForm' "Person.Text") : title;                  if (_person.BadClient)                  {                      Text += "  " + MultiLanguageStrings.GetString(Ressource.ClientForm' "Bad.Text");                      lblTitle.BackColor = Color.Red;                  }                  else                  {                      lblTitle.BackColor = Color.FromArgb(0' 81' 152);                  }              }              else if (_group != null)              {                  Text = string.IsNullOrEmpty(title) ? MultiLanguageStrings.GetString(Ressource.ClientForm' "Group.Text") : title + " - (" + _group.LoanCycle + ")";                    if (_group.BadClient)                  {                      Text += "  " + MultiLanguageStrings.GetString(Ressource.ClientForm' "Bad.Text");                      lblTitle.BackColor = Color.Red;                  }                  else                  {                      lblTitle.BackColor = Color.FromArgb(0' 81' 152);                  }              }              else              {                  Text = string.IsNullOrEmpty(title) ? MultiLanguageStrings.GetString(Ressource.ClientForm' "Corporate.Text") : title;                  if (_corporate.BadClient)                  {                      Text += "  " + MultiLanguageStrings.GetString(Ressource.ClientForm' "Bad.Text");                      lblTitle.BackColor = Color.Red;                  }                  else                  {                      lblTitle.BackColor = Color.FromArgb(0' 81' 152);                  }              }
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeTitle,The following statement contains a magic number: if (_person != null)              {                  Text = string.IsNullOrEmpty(title) ? MultiLanguageStrings.GetString(Ressource.ClientForm' "Person.Text") : title;                  if (_person.BadClient)                  {                      Text += "  " + MultiLanguageStrings.GetString(Ressource.ClientForm' "Bad.Text");                      lblTitle.BackColor = Color.Red;                  }                  else                  {                      lblTitle.BackColor = Color.FromArgb(0' 81' 152);                  }              }              else if (_group != null)              {                  Text = string.IsNullOrEmpty(title) ? MultiLanguageStrings.GetString(Ressource.ClientForm' "Group.Text") : title + " - (" + _group.LoanCycle + ")";                    if (_group.BadClient)                  {                      Text += "  " + MultiLanguageStrings.GetString(Ressource.ClientForm' "Bad.Text");                      lblTitle.BackColor = Color.Red;                  }                  else                  {                      lblTitle.BackColor = Color.FromArgb(0' 81' 152);                  }              }              else              {                  Text = string.IsNullOrEmpty(title) ? MultiLanguageStrings.GetString(Ressource.ClientForm' "Corporate.Text") : title;                  if (_corporate.BadClient)                  {                      Text += "  " + MultiLanguageStrings.GetString(Ressource.ClientForm' "Bad.Text");                      lblTitle.BackColor = Color.Red;                  }                  else                  {                      lblTitle.BackColor = Color.FromArgb(0' 81' 152);                  }              }
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,DisplaySavingProduct,The following statement contains a magic number: if (product.InterestRate.HasValue)              {                  nudDownInterestRate.Enabled = false;                  lbInterestRateMinMax.Text = string.Format("{0} %"' product.InterestRate * 100);                  nudDownInterestRate.Maximum = (decimal)product.InterestRate.Value * 100;                  nudDownInterestRate.Minimum = (decimal)product.InterestRate.Value * 100;              }              else              {                  lbInterestRateMinMax.Text = string.Format("{0}{1} %\r\n{2}{3} %"'                      "Min "' product.InterestRateMin.Value * 100'                      "Max "' product.InterestRateMax.Value * 100);                  nudDownInterestRate.Maximum = (decimal)product.InterestRateMax.Value * 100;                  nudDownInterestRate.Minimum = (decimal)product.InterestRateMin.Value * 100;              }
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,DisplaySavingProduct,The following statement contains a magic number: if (product.InterestRate.HasValue)              {                  nudDownInterestRate.Enabled = false;                  lbInterestRateMinMax.Text = string.Format("{0} %"' product.InterestRate * 100);                  nudDownInterestRate.Maximum = (decimal)product.InterestRate.Value * 100;                  nudDownInterestRate.Minimum = (decimal)product.InterestRate.Value * 100;              }              else              {                  lbInterestRateMinMax.Text = string.Format("{0}{1} %\r\n{2}{3} %"'                      "Min "' product.InterestRateMin.Value * 100'                      "Max "' product.InterestRateMax.Value * 100);                  nudDownInterestRate.Maximum = (decimal)product.InterestRateMax.Value * 100;                  nudDownInterestRate.Minimum = (decimal)product.InterestRateMin.Value * 100;              }
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,DisplaySavingProduct,The following statement contains a magic number: if (product.InterestRate.HasValue)              {                  nudDownInterestRate.Enabled = false;                  lbInterestRateMinMax.Text = string.Format("{0} %"' product.InterestRate * 100);                  nudDownInterestRate.Maximum = (decimal)product.InterestRate.Value * 100;                  nudDownInterestRate.Minimum = (decimal)product.InterestRate.Value * 100;              }              else              {                  lbInterestRateMinMax.Text = string.Format("{0}{1} %\r\n{2}{3} %"'                      "Min "' product.InterestRateMin.Value * 100'                      "Max "' product.InterestRateMax.Value * 100);                  nudDownInterestRate.Maximum = (decimal)product.InterestRateMax.Value * 100;                  nudDownInterestRate.Minimum = (decimal)product.InterestRateMin.Value * 100;              }
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,DisplaySavingProduct,The following statement contains a magic number: if (product.InterestRate.HasValue)              {                  nudDownInterestRate.Enabled = false;                  lbInterestRateMinMax.Text = string.Format("{0} %"' product.InterestRate * 100);                  nudDownInterestRate.Maximum = (decimal)product.InterestRate.Value * 100;                  nudDownInterestRate.Minimum = (decimal)product.InterestRate.Value * 100;              }              else              {                  lbInterestRateMinMax.Text = string.Format("{0}{1} %\r\n{2}{3} %"'                      "Min "' product.InterestRateMin.Value * 100'                      "Max "' product.InterestRateMax.Value * 100);                  nudDownInterestRate.Maximum = (decimal)product.InterestRateMax.Value * 100;                  nudDownInterestRate.Minimum = (decimal)product.InterestRateMin.Value * 100;              }
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,DisplaySavingProduct,The following statement contains a magic number: if (product.InterestRate.HasValue)              {                  nudDownInterestRate.Enabled = false;                  lbInterestRateMinMax.Text = string.Format("{0} %"' product.InterestRate * 100);                  nudDownInterestRate.Maximum = (decimal)product.InterestRate.Value * 100;                  nudDownInterestRate.Minimum = (decimal)product.InterestRate.Value * 100;              }              else              {                  lbInterestRateMinMax.Text = string.Format("{0}{1} %\r\n{2}{3} %"'                      "Min "' product.InterestRateMin.Value * 100'                      "Max "' product.InterestRateMax.Value * 100);                  nudDownInterestRate.Maximum = (decimal)product.InterestRateMax.Value * 100;                  nudDownInterestRate.Minimum = (decimal)product.InterestRateMin.Value * 100;              }
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,DisplaySavingProduct,The following statement contains a magic number: if (product.InterestRate.HasValue)              {                  nudDownInterestRate.Enabled = false;                  lbInterestRateMinMax.Text = string.Format("{0} %"' product.InterestRate * 100);                  nudDownInterestRate.Maximum = (decimal)product.InterestRate.Value * 100;                  nudDownInterestRate.Minimum = (decimal)product.InterestRate.Value * 100;              }              else              {                  lbInterestRateMinMax.Text = string.Format("{0}{1} %\r\n{2}{3} %"'                      "Min "' product.InterestRateMin.Value * 100'                      "Max "' product.InterestRateMax.Value * 100);                  nudDownInterestRate.Maximum = (decimal)product.InterestRateMax.Value * 100;                  nudDownInterestRate.Minimum = (decimal)product.InterestRateMin.Value * 100;              }
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,DisplaySavingProduct,The following statement contains a magic number: if (product.InterestRate.HasValue)              {                  nudDownInterestRate.Enabled = false;                  lbInterestRateMinMax.Text = string.Format("{0} %"' product.InterestRate * 100);                  nudDownInterestRate.Maximum = (decimal)product.InterestRate.Value * 100;                  nudDownInterestRate.Minimum = (decimal)product.InterestRate.Value * 100;              }              else              {                  lbInterestRateMinMax.Text = string.Format("{0}{1} %\r\n{2}{3} %"'                      "Min "' product.InterestRateMin.Value * 100'                      "Max "' product.InterestRateMax.Value * 100);                  nudDownInterestRate.Maximum = (decimal)product.InterestRateMax.Value * 100;                  nudDownInterestRate.Minimum = (decimal)product.InterestRateMin.Value * 100;              }
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,DisplaySavingProduct,The following statement contains a magic number: if (product is SavingsBookProduct)              {                  gbDepositInterest.Visible = false;                  gbInterest.Visible = true;                    lbWithdrawFees.Visible = true;                  nudWithdrawFees.Visible = true;                  lbWithdrawFeesMinMax.Visible = true;                    lbEntryFees.Visible = true;                  nudEntryFees.Visible = true;                  lbEntryFeesMinMax.Visible = true;                    lbTransferFees.Visible = true;                  nudTransferFees.Visible = true;                  nudIbtFee.Visible = true;                  lbTransferFeesMinMax.Visible = true;                    lbDepositFees.Visible = true;                  nudDepositFees.Visible = true;                  lbDepositFeesMinMax.Visible = true;                    lbChequeDepositFees.Visible = true;                  nudChequeDepositFees.Visible = true;                  lblChequeDepositFeesMinMax.Visible = true;                    lbCloseFees.Visible = true;                  nudCloseFees.Visible = true;                  lbCloseFeesMinMax.Visible = true;                    lbManagementFees.Visible = true;                  nudManagementFees.Visible = true;                  lbManagementFeesMinMax.Visible = true;                    lbOverdraftFees.Visible = true;                  nudOverdraftFees.Visible = true;                  lbOverdraftFeesMinMax.Visible = true;                    lbAgioFees.Visible = true;                  nudAgioFees.Visible = true;                  lbAgioFeesMinMax.Visible = true;                    lbReopenFees.Visible = true;                  nudReopenFees.Visible = true;                  lbReopenFeesMinMax.Visible = true;                    lbInterestAccrualValue.Text = MultiLanguageStrings.GetString(Ressource.FrmAddSavingProduct' ((SavingsBookProduct)product).InterestBase + ".Text");                  lbInterestPostingValue.Text = MultiLanguageStrings.GetString(Ressource.FrmAddSavingProduct' ((SavingsBookProduct)product).InterestFrequency + ".Text");                  lbInterestBasedOnValue.Text = ((SavingsBookProduct)product).CalculAmountBase.HasValue ? MultiLanguageStrings.GetString(Ressource.FrmAddSavingProduct' ((SavingsBookProduct)product).CalculAmountBase + ".Text") : "------";                    savingDepositToolStripMenuItem.Enabled = true;                  savingWithdrawToolStripMenuItem.Enabled = true;                  savingTransferToolStripMenuItem.Enabled = true;                    // entry fees                  nudEntryFees.DecimalPlaces = 0;                  nudEntryFees.Increment = 1;                  if (((SavingsBookProduct)product).EntryFees.HasValue)                  {                      nudEntryFees.Enabled = false;                      nudEntryFees.Minimum = ((SavingsBookProduct)product).EntryFees.Value;                      nudEntryFees.Maximum = ((SavingsBookProduct)product).EntryFees.Value;                      lbEntryFeesMinMax.Text = string.Format("{0} {1}"' ((SavingsBookProduct)product).EntryFees.GetFormatedValue(product.Currency.UseCents)' product.Currency.Code);                  }                  else                  {                      nudEntryFees.Enabled = true;                      nudEntryFees.Minimum = ((SavingsBookProduct)product).EntryFeesMin.Value;                      nudEntryFees.Maximum = ((SavingsBookProduct)product).EntryFeesMax.Value;                      lbEntryFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                          "Min "' ((SavingsBookProduct)product).EntryFeesMin.GetFormatedValue(product.Currency.UseCents)'                          "Max "' ((SavingsBookProduct)product).EntryFeesMax.GetFormatedValue(product.Currency.UseCents)'                          product.Currency.Code);                  }                    // withdraw fees                  if (((SavingsBookProduct)product).WithdrawFeesType == OSavingsFeesType.Flat)                  {                      nudWithdrawFees.DecimalPlaces = 0;                      nudWithdrawFees.Increment = 1;                      if (((SavingsBookProduct)product).FlatWithdrawFees.HasValue)                      {                          nudWithdrawFees.Enabled = false;                          nudWithdrawFees.Minimum = ((SavingsBookProduct)product).FlatWithdrawFees.Value;                          nudWithdrawFees.Maximum = ((SavingsBookProduct)product).FlatWithdrawFees.Value;                          lbWithdrawFeesMinMax.Text = string.Format("{0} {1}"' ((SavingsBookProduct)product).FlatWithdrawFees.GetFormatedValue(product.Currency.UseCents)' product.Currency.Code);                      }                      else                      {                          nudWithdrawFees.Enabled = true;                          nudWithdrawFees.Minimum = ((SavingsBookProduct)product).FlatWithdrawFeesMin.Value;                          nudWithdrawFees.Maximum = ((SavingsBookProduct)product).FlatWithdrawFeesMax.Value;                          lbWithdrawFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                              "Min "' ((SavingsBookProduct)product).FlatWithdrawFeesMin.GetFormatedValue(product.Currency.UseCents)'                              "Max "' ((SavingsBookProduct)product).FlatWithdrawFeesMax.GetFormatedValue(product.Currency.UseCents)'                              product.Currency.Code);                      }                  }                  else                  {                      nudWithdrawFees.DecimalPlaces = 4;                      nudWithdrawFees.Increment = 0.0001m;                      if (((SavingsBookProduct)product).RateWithdrawFees.HasValue)                      {                          nudWithdrawFees.Enabled = false;                          nudWithdrawFees.Minimum = (decimal)((SavingsBookProduct)product).RateWithdrawFees.Value * 100;                          nudWithdrawFees.Maximum = (decimal)((SavingsBookProduct)product).RateWithdrawFees.Value * 100;                          lbWithdrawFeesMinMax.Text = string.Format("{0} {1}"' (((SavingsBookProduct)product).RateWithdrawFees * 100)' "%");                      }                      else                      {                          nudWithdrawFees.Enabled = true;                          nudWithdrawFees.Minimum = (decimal)((SavingsBookProduct)product).RateWithdrawFeesMin.Value * 100;                          nudWithdrawFees.Maximum = (decimal)((SavingsBookProduct)product).RateWithdrawFeesMax.Value * 100;                          lbWithdrawFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                              "Min "' (((SavingsBookProduct)product).RateWithdrawFeesMin * 100)'                              "Max "' (((SavingsBookProduct)product).RateWithdrawFeesMax * 100)'                              "%");                      }                  }                    // Inter-branch tansfer fee                  SavingsBookProduct p = (SavingsBookProduct)product;                  Fee fee = p.InterBranchTransferFee;                  nudIbtFee.DecimalPlaces = fee.IsFlat ? 0 : 2;                  nudIbtFee.Increment = fee.IsFlat ? 1 : 0.01m;                  nudIbtFee.Enabled = !fee.Value.HasValue;                  nudIbtFee.Minimum = fee.GetMin();                  nudIbtFee.Maximum = fee.GetMax();                  if (fee.IsRange)                  {                      string min = fee.GetMinFormatted(p.Currency);                      string max = fee.GetMaxFormatted(p.Currency);                      const string mask = "Min {0}\r\nMax {1}";                      lblIbtFeeMinMax.Text = string.Format(mask' min' max);                  }                  else                  {                      lblIbtFeeMinMax.Text = fee.GetValueFormatted(p.Currency);                  }                    if (((SavingsBookProduct)product).TransferFeesType == OSavingsFeesType.Flat)                  {                      nudTransferFees.DecimalPlaces = 0;                      nudTransferFees.Increment = 1;                      if (((SavingsBookProduct)product).FlatTransferFees.HasValue)                      {                          nudTransferFees.Enabled = false;                          nudTransferFees.Minimum = ((SavingsBookProduct)product).FlatTransferFees.Value;                          nudTransferFees.Maximum = ((SavingsBookProduct)product).FlatTransferFees.Value;                          lbTransferFeesMinMax.Text = string.Format("{0} {1}"' ((SavingsBookProduct)product).FlatTransferFees.GetFormatedValue(product.Currency.UseCents)' product.Currency.Code);                      }                      else                      {                          nudTransferFees.Enabled = true;                          nudTransferFees.Minimum = ((SavingsBookProduct)product).FlatTransferFeesMin.Value;                          nudTransferFees.Maximum = ((SavingsBookProduct)product).FlatTransferFeesMax.Value;                          lbTransferFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                              "Min "' ((SavingsBookProduct)product).FlatTransferFeesMin.GetFormatedValue(product.Currency.UseCents)'                              "Max "' ((SavingsBookProduct)product).FlatTransferFeesMax.GetFormatedValue(product.Currency.UseCents)'                              product.Currency.Code);                      }                  }                  else                  {                      nudTransferFees.DecimalPlaces = 4;                      nudTransferFees.Increment = 0.0001m;                      if (((SavingsBookProduct)product).RateTransferFees.HasValue)                      {                          nudTransferFees.Enabled = false;                          nudTransferFees.Minimum = (decimal)((SavingsBookProduct)product).RateTransferFees.Value * 100;                          nudTransferFees.Maximum = (decimal)((SavingsBookProduct)product).RateTransferFees.Value * 100;                          lbTransferFeesMinMax.Text = string.Format("{0} {1}"' (((SavingsBookProduct)product).RateTransferFees * 100)' "%");                      }                      else                      {                          nudTransferFees.Enabled = true;                          nudTransferFees.Minimum = (decimal)((SavingsBookProduct)product).RateTransferFeesMin.Value * 100;                          nudTransferFees.Maximum = (decimal)((SavingsBookProduct)product).RateTransferFeesMax.Value * 100;                          lbTransferFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                              "Min "' (((SavingsBookProduct)product).RateTransferFeesMin * 100)'                              "Max "' (((SavingsBookProduct)product).RateTransferFeesMax * 100)'                              "%");                      }                  }                    //Cash Deposit fees                  nudDepositFees.DecimalPlaces = 0;                  nudDepositFees.Increment = 1;                  if (((SavingsBookProduct)product).DepositFees.HasValue)                  {                      nudDepositFees.Enabled = false;                      nudDepositFees.Minimum = ((SavingsBookProduct)product).DepositFees.Value;                      nudDepositFees.Maximum = ((SavingsBookProduct)product).DepositFees.Value;                      lbDepositFeesMinMax.Text = string.Format("{0} {1}"'                                                               ((SavingsBookProduct)product).DepositFees.GetFormatedValue(product.Currency.UseCents)'                                                               product.Currency.Code);                  }                  else                  {                      nudDepositFees.Enabled = true;                      nudDepositFees.Minimum = ((SavingsBookProduct)product).DepositFeesMin.Value;                      nudDepositFees.Maximum = ((SavingsBookProduct)product).DepositFeesMax.Value;                      lbDepositFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                                                               "Min "' ((SavingsBookProduct)product).DepositFeesMin.GetFormatedValue(product.Currency.UseCents)'                                                               "Max "' ((SavingsBookProduct)product).DepositFeesMax.GetFormatedValue(product.Currency.UseCents)'                                                               product.Currency.Code);                  }                    //Cheque Deposit fees                  nudChequeDepositFees.DecimalPlaces = 0;                  nudChequeDepositFees.Increment = 1;                  if (((SavingsBookProduct)product).ChequeDepositFees.HasValue)                  {                      nudChequeDepositFees.Enabled = false;                      nudChequeDepositFees.Maximum = ((SavingsBookProduct)product).ChequeDepositFees.Value;                      nudChequeDepositFees.Minimum = ((SavingsBookProduct)product).ChequeDepositFees.Value;                      lblChequeDepositFeesMinMax.Text = string.Format("{0} {1}"'                                                               ((SavingsBookProduct)product).ChequeDepositFees.GetFormatedValue(product.Currency.UseCents)'                                                               product.Currency.Code);                  }                  else                  {                      nudChequeDepositFees.Enabled = true;                      nudChequeDepositFees.Minimum = ((SavingsBookProduct)product).ChequeDepositFeesMin.Value;                      nudChequeDepositFees.Maximum = ((SavingsBookProduct)product).ChequeDepositFeesMax.Value;                      lblChequeDepositFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                                                               "Min "' ((SavingsBookProduct)product).ChequeDepositFeesMin.GetFormatedValue(product.Currency.UseCents)'                                                               "Max "' ((SavingsBookProduct)product).ChequeDepositFeesMax.GetFormatedValue(product.Currency.UseCents)'                                                               product.Currency.Code);                  }                    // Close fees                  nudCloseFees.DecimalPlaces = 0;                  nudCloseFees.Increment = 1;                  if (((SavingsBookProduct)product).CloseFees.HasValue)                  {                      nudCloseFees.Enabled = false;                      nudCloseFees.Minimum = ((SavingsBookProduct)product).CloseFees.Value;                      nudCloseFees.Maximum = ((SavingsBookProduct)product).CloseFees.Value;                      lbCloseFeesMinMax.Text = string.Format("{0} {1}"'                          ((SavingsBookProduct)product).CloseFees.GetFormatedValue(product.Currency.UseCents)' product.Currency.Code);                  }                  else                  {                      nudCloseFees.Enabled = true;                      nudCloseFees.Minimum = ((SavingsBookProduct)product).CloseFeesMin.Value;                      nudCloseFees.Maximum = ((SavingsBookProduct)product).CloseFeesMax.Value;                      lbCloseFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                          "Min "' ((SavingsBookProduct)product).CloseFeesMin.GetFormatedValue(product.Currency.UseCents)'                          "Max "' ((SavingsBookProduct)product).CloseFeesMax.GetFormatedValue(product.Currency.UseCents)'                          product.Currency.Code);                  }                    // Management fees                  nudManagementFees.DecimalPlaces = 0;                  nudManagementFees.Increment = 1;                  if (((SavingsBookProduct)product).ManagementFees.HasValue)                  {                      nudManagementFees.Enabled = false;                      nudManagementFees.Minimum = ((SavingsBookProduct)product).ManagementFees.Value;                      nudManagementFees.Maximum = ((SavingsBookProduct)product).ManagementFees.Value;                      lbManagementFeesMinMax.Text = string.Format("{0} {1}"'                          ((SavingsBookProduct)product).ManagementFees.GetFormatedValue(product.Currency.UseCents)' product.Currency.Code);                  }                  else                  {                      nudManagementFees.Enabled = true;                      nudManagementFees.Minimum = ((SavingsBookProduct)product).ManagementFeesMin.Value;                      nudManagementFees.Maximum = ((SavingsBookProduct)product).ManagementFeesMax.Value;                      lbManagementFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                          "Min "' ((SavingsBookProduct)product).ManagementFeesMin.GetFormatedValue(product.Currency.UseCents)'                          "Max "' ((SavingsBookProduct)product).ManagementFeesMax.GetFormatedValue(product.Currency.UseCents)'                          product.Currency.Code);                  }                    // Overdraft fees                  nudOverdraftFees.DecimalPlaces = 0;                  nudOverdraftFees.Increment = 1;                  if (((SavingsBookProduct)product).OverdraftFees.HasValue)                  {                      nudOverdraftFees.Enabled = false;                      nudOverdraftFees.Minimum = ((SavingsBookProduct)product).OverdraftFees.Value;                      nudOverdraftFees.Maximum = ((SavingsBookProduct)product).OverdraftFees.Value;                      lbOverdraftFeesMinMax.Text = string.Format("{0} {1}"'                          ((SavingsBookProduct)product).OverdraftFees.GetFormatedValue(product.Currency.UseCents)' product.Currency.Code);                  }                  else                  {                      nudOverdraftFees.Enabled = true;                      nudOverdraftFees.Minimum = ((SavingsBookProduct)product).OverdraftFeesMin.Value;                      nudOverdraftFees.Maximum = ((SavingsBookProduct)product).OverdraftFeesMax.Value;                      lbOverdraftFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                          "Min "' ((SavingsBookProduct)product).OverdraftFeesMin.GetFormatedValue(product.Currency.UseCents)'                          "Max "' ((SavingsBookProduct)product).OverdraftFeesMax.GetFormatedValue(product.Currency.UseCents)'                          product.Currency.Code);                  }                    // Agio fees                  nudAgioFees.DecimalPlaces = 4;                  nudAgioFees.Increment = 0.0001m;                  if (((SavingsBookProduct)product).AgioFees.HasValue)                  {                      nudAgioFees.Enabled = false;                      nudAgioFees.Minimum = (decimal)((SavingsBookProduct)product).AgioFees.Value * 100;                      nudAgioFees.Maximum = (decimal)((SavingsBookProduct)product).AgioFees.Value * 100;                      lbAgioFeesMinMax.Text = string.Format("{0} {1}"' ((SavingsBookProduct)product).AgioFees * 100' "%");                  }                  else                  {                      nudAgioFees.Enabled = true;                      nudAgioFees.Minimum = (decimal)((SavingsBookProduct)product).AgioFeesMin.Value * 100;                      nudAgioFees.Maximum = (decimal)((SavingsBookProduct)product).AgioFeesMax.Value * 100;                      lbAgioFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                          "Min "' ((SavingsBookProduct)product).AgioFeesMin * 100'                          "Max "' ((SavingsBookProduct)product).AgioFeesMax * 100' "%");                  }                    //Reopen fees                  nudReopenFees.DecimalPlaces = 0;                  nudReopenFees.Increment = 1;                    if (((SavingsBookProduct)product).ReopenFees.HasValue)                  {                      nudReopenFees.Enabled = false;                      nudReopenFees.Minimum = ((SavingsBookProduct)product).ReopenFees.Value;                      nudReopenFees.Maximum = ((SavingsBookProduct)product).ReopenFees.Value;                      lbReopenFeesMinMax.Text = string.Format("{0} {1}"'                                                               ((SavingsBookProduct)product).ReopenFees.GetFormatedValue(product.Currency.UseCents)'                                                               product.Currency.Code);                  }                  else                  {                      nudReopenFees.Enabled = true;                      nudReopenFees.Minimum = ((SavingsBookProduct)product).ReopenFeesMin.Value;                      nudReopenFees.Maximum = ((SavingsBookProduct)product).ReopenFeesMax.Value;                      lbReopenFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                                                               "Min "' ((SavingsBookProduct)product).ReopenFeesMin.GetFormatedValue(product.Currency.UseCents)'                                                               "Max "' ((SavingsBookProduct)product).ReopenFeesMax.GetFormatedValue(product.Currency.UseCents)'                                                               product.Currency.Code);                  }                    if (((SavingsBookProduct)product).UseTermDeposit)                  {                      nudNumberOfPeriods.Enabled = true;                      btSearchContract2.Enabled = true;                      cmbRollover2.Enabled = true;                      nudNumberOfPeriods.Minimum = (decimal)((SavingsBookProduct)product).TermDepositPeriodMin;                      nudNumberOfPeriods.Maximum = (decimal)((SavingsBookProduct)product).TermDepositPeriodMax;                      nudNumberOfPeriods.Value = nudNumberOfPeriods.Minimum;                      tbTargetAccount2.ResetText();                  }                }
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,DisplaySavingProduct,The following statement contains a magic number: if (product is SavingsBookProduct)              {                  gbDepositInterest.Visible = false;                  gbInterest.Visible = true;                    lbWithdrawFees.Visible = true;                  nudWithdrawFees.Visible = true;                  lbWithdrawFeesMinMax.Visible = true;                    lbEntryFees.Visible = true;                  nudEntryFees.Visible = true;                  lbEntryFeesMinMax.Visible = true;                    lbTransferFees.Visible = true;                  nudTransferFees.Visible = true;                  nudIbtFee.Visible = true;                  lbTransferFeesMinMax.Visible = true;                    lbDepositFees.Visible = true;                  nudDepositFees.Visible = true;                  lbDepositFeesMinMax.Visible = true;                    lbChequeDepositFees.Visible = true;                  nudChequeDepositFees.Visible = true;                  lblChequeDepositFeesMinMax.Visible = true;                    lbCloseFees.Visible = true;                  nudCloseFees.Visible = true;                  lbCloseFeesMinMax.Visible = true;                    lbManagementFees.Visible = true;                  nudManagementFees.Visible = true;                  lbManagementFeesMinMax.Visible = true;                    lbOverdraftFees.Visible = true;                  nudOverdraftFees.Visible = true;                  lbOverdraftFeesMinMax.Visible = true;                    lbAgioFees.Visible = true;                  nudAgioFees.Visible = true;                  lbAgioFeesMinMax.Visible = true;                    lbReopenFees.Visible = true;                  nudReopenFees.Visible = true;                  lbReopenFeesMinMax.Visible = true;                    lbInterestAccrualValue.Text = MultiLanguageStrings.GetString(Ressource.FrmAddSavingProduct' ((SavingsBookProduct)product).InterestBase + ".Text");                  lbInterestPostingValue.Text = MultiLanguageStrings.GetString(Ressource.FrmAddSavingProduct' ((SavingsBookProduct)product).InterestFrequency + ".Text");                  lbInterestBasedOnValue.Text = ((SavingsBookProduct)product).CalculAmountBase.HasValue ? MultiLanguageStrings.GetString(Ressource.FrmAddSavingProduct' ((SavingsBookProduct)product).CalculAmountBase + ".Text") : "------";                    savingDepositToolStripMenuItem.Enabled = true;                  savingWithdrawToolStripMenuItem.Enabled = true;                  savingTransferToolStripMenuItem.Enabled = true;                    // entry fees                  nudEntryFees.DecimalPlaces = 0;                  nudEntryFees.Increment = 1;                  if (((SavingsBookProduct)product).EntryFees.HasValue)                  {                      nudEntryFees.Enabled = false;                      nudEntryFees.Minimum = ((SavingsBookProduct)product).EntryFees.Value;                      nudEntryFees.Maximum = ((SavingsBookProduct)product).EntryFees.Value;                      lbEntryFeesMinMax.Text = string.Format("{0} {1}"' ((SavingsBookProduct)product).EntryFees.GetFormatedValue(product.Currency.UseCents)' product.Currency.Code);                  }                  else                  {                      nudEntryFees.Enabled = true;                      nudEntryFees.Minimum = ((SavingsBookProduct)product).EntryFeesMin.Value;                      nudEntryFees.Maximum = ((SavingsBookProduct)product).EntryFeesMax.Value;                      lbEntryFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                          "Min "' ((SavingsBookProduct)product).EntryFeesMin.GetFormatedValue(product.Currency.UseCents)'                          "Max "' ((SavingsBookProduct)product).EntryFeesMax.GetFormatedValue(product.Currency.UseCents)'                          product.Currency.Code);                  }                    // withdraw fees                  if (((SavingsBookProduct)product).WithdrawFeesType == OSavingsFeesType.Flat)                  {                      nudWithdrawFees.DecimalPlaces = 0;                      nudWithdrawFees.Increment = 1;                      if (((SavingsBookProduct)product).FlatWithdrawFees.HasValue)                      {                          nudWithdrawFees.Enabled = false;                          nudWithdrawFees.Minimum = ((SavingsBookProduct)product).FlatWithdrawFees.Value;                          nudWithdrawFees.Maximum = ((SavingsBookProduct)product).FlatWithdrawFees.Value;                          lbWithdrawFeesMinMax.Text = string.Format("{0} {1}"' ((SavingsBookProduct)product).FlatWithdrawFees.GetFormatedValue(product.Currency.UseCents)' product.Currency.Code);                      }                      else                      {                          nudWithdrawFees.Enabled = true;                          nudWithdrawFees.Minimum = ((SavingsBookProduct)product).FlatWithdrawFeesMin.Value;                          nudWithdrawFees.Maximum = ((SavingsBookProduct)product).FlatWithdrawFeesMax.Value;                          lbWithdrawFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                              "Min "' ((SavingsBookProduct)product).FlatWithdrawFeesMin.GetFormatedValue(product.Currency.UseCents)'                              "Max "' ((SavingsBookProduct)product).FlatWithdrawFeesMax.GetFormatedValue(product.Currency.UseCents)'                              product.Currency.Code);                      }                  }                  else                  {                      nudWithdrawFees.DecimalPlaces = 4;                      nudWithdrawFees.Increment = 0.0001m;                      if (((SavingsBookProduct)product).RateWithdrawFees.HasValue)                      {                          nudWithdrawFees.Enabled = false;                          nudWithdrawFees.Minimum = (decimal)((SavingsBookProduct)product).RateWithdrawFees.Value * 100;                          nudWithdrawFees.Maximum = (decimal)((SavingsBookProduct)product).RateWithdrawFees.Value * 100;                          lbWithdrawFeesMinMax.Text = string.Format("{0} {1}"' (((SavingsBookProduct)product).RateWithdrawFees * 100)' "%");                      }                      else                      {                          nudWithdrawFees.Enabled = true;                          nudWithdrawFees.Minimum = (decimal)((SavingsBookProduct)product).RateWithdrawFeesMin.Value * 100;                          nudWithdrawFees.Maximum = (decimal)((SavingsBookProduct)product).RateWithdrawFeesMax.Value * 100;                          lbWithdrawFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                              "Min "' (((SavingsBookProduct)product).RateWithdrawFeesMin * 100)'                              "Max "' (((SavingsBookProduct)product).RateWithdrawFeesMax * 100)'                              "%");                      }                  }                    // Inter-branch tansfer fee                  SavingsBookProduct p = (SavingsBookProduct)product;                  Fee fee = p.InterBranchTransferFee;                  nudIbtFee.DecimalPlaces = fee.IsFlat ? 0 : 2;                  nudIbtFee.Increment = fee.IsFlat ? 1 : 0.01m;                  nudIbtFee.Enabled = !fee.Value.HasValue;                  nudIbtFee.Minimum = fee.GetMin();                  nudIbtFee.Maximum = fee.GetMax();                  if (fee.IsRange)                  {                      string min = fee.GetMinFormatted(p.Currency);                      string max = fee.GetMaxFormatted(p.Currency);                      const string mask = "Min {0}\r\nMax {1}";                      lblIbtFeeMinMax.Text = string.Format(mask' min' max);                  }                  else                  {                      lblIbtFeeMinMax.Text = fee.GetValueFormatted(p.Currency);                  }                    if (((SavingsBookProduct)product).TransferFeesType == OSavingsFeesType.Flat)                  {                      nudTransferFees.DecimalPlaces = 0;                      nudTransferFees.Increment = 1;                      if (((SavingsBookProduct)product).FlatTransferFees.HasValue)                      {                          nudTransferFees.Enabled = false;                          nudTransferFees.Minimum = ((SavingsBookProduct)product).FlatTransferFees.Value;                          nudTransferFees.Maximum = ((SavingsBookProduct)product).FlatTransferFees.Value;                          lbTransferFeesMinMax.Text = string.Format("{0} {1}"' ((SavingsBookProduct)product).FlatTransferFees.GetFormatedValue(product.Currency.UseCents)' product.Currency.Code);                      }                      else                      {                          nudTransferFees.Enabled = true;                          nudTransferFees.Minimum = ((SavingsBookProduct)product).FlatTransferFeesMin.Value;                          nudTransferFees.Maximum = ((SavingsBookProduct)product).FlatTransferFeesMax.Value;                          lbTransferFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                              "Min "' ((SavingsBookProduct)product).FlatTransferFeesMin.GetFormatedValue(product.Currency.UseCents)'                              "Max "' ((SavingsBookProduct)product).FlatTransferFeesMax.GetFormatedValue(product.Currency.UseCents)'                              product.Currency.Code);                      }                  }                  else                  {                      nudTransferFees.DecimalPlaces = 4;                      nudTransferFees.Increment = 0.0001m;                      if (((SavingsBookProduct)product).RateTransferFees.HasValue)                      {                          nudTransferFees.Enabled = false;                          nudTransferFees.Minimum = (decimal)((SavingsBookProduct)product).RateTransferFees.Value * 100;                          nudTransferFees.Maximum = (decimal)((SavingsBookProduct)product).RateTransferFees.Value * 100;                          lbTransferFeesMinMax.Text = string.Format("{0} {1}"' (((SavingsBookProduct)product).RateTransferFees * 100)' "%");                      }                      else                      {                          nudTransferFees.Enabled = true;                          nudTransferFees.Minimum = (decimal)((SavingsBookProduct)product).RateTransferFeesMin.Value * 100;                          nudTransferFees.Maximum = (decimal)((SavingsBookProduct)product).RateTransferFeesMax.Value * 100;                          lbTransferFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                              "Min "' (((SavingsBookProduct)product).RateTransferFeesMin * 100)'                              "Max "' (((SavingsBookProduct)product).RateTransferFeesMax * 100)'                              "%");                      }                  }                    //Cash Deposit fees                  nudDepositFees.DecimalPlaces = 0;                  nudDepositFees.Increment = 1;                  if (((SavingsBookProduct)product).DepositFees.HasValue)                  {                      nudDepositFees.Enabled = false;                      nudDepositFees.Minimum = ((SavingsBookProduct)product).DepositFees.Value;                      nudDepositFees.Maximum = ((SavingsBookProduct)product).DepositFees.Value;                      lbDepositFeesMinMax.Text = string.Format("{0} {1}"'                                                               ((SavingsBookProduct)product).DepositFees.GetFormatedValue(product.Currency.UseCents)'                                                               product.Currency.Code);                  }                  else                  {                      nudDepositFees.Enabled = true;                      nudDepositFees.Minimum = ((SavingsBookProduct)product).DepositFeesMin.Value;                      nudDepositFees.Maximum = ((SavingsBookProduct)product).DepositFeesMax.Value;                      lbDepositFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                                                               "Min "' ((SavingsBookProduct)product).DepositFeesMin.GetFormatedValue(product.Currency.UseCents)'                                                               "Max "' ((SavingsBookProduct)product).DepositFeesMax.GetFormatedValue(product.Currency.UseCents)'                                                               product.Currency.Code);                  }                    //Cheque Deposit fees                  nudChequeDepositFees.DecimalPlaces = 0;                  nudChequeDepositFees.Increment = 1;                  if (((SavingsBookProduct)product).ChequeDepositFees.HasValue)                  {                      nudChequeDepositFees.Enabled = false;                      nudChequeDepositFees.Maximum = ((SavingsBookProduct)product).ChequeDepositFees.Value;                      nudChequeDepositFees.Minimum = ((SavingsBookProduct)product).ChequeDepositFees.Value;                      lblChequeDepositFeesMinMax.Text = string.Format("{0} {1}"'                                                               ((SavingsBookProduct)product).ChequeDepositFees.GetFormatedValue(product.Currency.UseCents)'                                                               product.Currency.Code);                  }                  else                  {                      nudChequeDepositFees.Enabled = true;                      nudChequeDepositFees.Minimum = ((SavingsBookProduct)product).ChequeDepositFeesMin.Value;                      nudChequeDepositFees.Maximum = ((SavingsBookProduct)product).ChequeDepositFeesMax.Value;                      lblChequeDepositFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                                                               "Min "' ((SavingsBookProduct)product).ChequeDepositFeesMin.GetFormatedValue(product.Currency.UseCents)'                                                               "Max "' ((SavingsBookProduct)product).ChequeDepositFeesMax.GetFormatedValue(product.Currency.UseCents)'                                                               product.Currency.Code);                  }                    // Close fees                  nudCloseFees.DecimalPlaces = 0;                  nudCloseFees.Increment = 1;                  if (((SavingsBookProduct)product).CloseFees.HasValue)                  {                      nudCloseFees.Enabled = false;                      nudCloseFees.Minimum = ((SavingsBookProduct)product).CloseFees.Value;                      nudCloseFees.Maximum = ((SavingsBookProduct)product).CloseFees.Value;                      lbCloseFeesMinMax.Text = string.Format("{0} {1}"'                          ((SavingsBookProduct)product).CloseFees.GetFormatedValue(product.Currency.UseCents)' product.Currency.Code);                  }                  else                  {                      nudCloseFees.Enabled = true;                      nudCloseFees.Minimum = ((SavingsBookProduct)product).CloseFeesMin.Value;                      nudCloseFees.Maximum = ((SavingsBookProduct)product).CloseFeesMax.Value;                      lbCloseFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                          "Min "' ((SavingsBookProduct)product).CloseFeesMin.GetFormatedValue(product.Currency.UseCents)'                          "Max "' ((SavingsBookProduct)product).CloseFeesMax.GetFormatedValue(product.Currency.UseCents)'                          product.Currency.Code);                  }                    // Management fees                  nudManagementFees.DecimalPlaces = 0;                  nudManagementFees.Increment = 1;                  if (((SavingsBookProduct)product).ManagementFees.HasValue)                  {                      nudManagementFees.Enabled = false;                      nudManagementFees.Minimum = ((SavingsBookProduct)product).ManagementFees.Value;                      nudManagementFees.Maximum = ((SavingsBookProduct)product).ManagementFees.Value;                      lbManagementFeesMinMax.Text = string.Format("{0} {1}"'                          ((SavingsBookProduct)product).ManagementFees.GetFormatedValue(product.Currency.UseCents)' product.Currency.Code);                  }                  else                  {                      nudManagementFees.Enabled = true;                      nudManagementFees.Minimum = ((SavingsBookProduct)product).ManagementFeesMin.Value;                      nudManagementFees.Maximum = ((SavingsBookProduct)product).ManagementFeesMax.Value;                      lbManagementFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                          "Min "' ((SavingsBookProduct)product).ManagementFeesMin.GetFormatedValue(product.Currency.UseCents)'                          "Max "' ((SavingsBookProduct)product).ManagementFeesMax.GetFormatedValue(product.Currency.UseCents)'                          product.Currency.Code);                  }                    // Overdraft fees                  nudOverdraftFees.DecimalPlaces = 0;                  nudOverdraftFees.Increment = 1;                  if (((SavingsBookProduct)product).OverdraftFees.HasValue)                  {                      nudOverdraftFees.Enabled = false;                      nudOverdraftFees.Minimum = ((SavingsBookProduct)product).OverdraftFees.Value;                      nudOverdraftFees.Maximum = ((SavingsBookProduct)product).OverdraftFees.Value;                      lbOverdraftFeesMinMax.Text = string.Format("{0} {1}"'                          ((SavingsBookProduct)product).OverdraftFees.GetFormatedValue(product.Currency.UseCents)' product.Currency.Code);                  }                  else                  {                      nudOverdraftFees.Enabled = true;                      nudOverdraftFees.Minimum = ((SavingsBookProduct)product).OverdraftFeesMin.Value;                      nudOverdraftFees.Maximum = ((SavingsBookProduct)product).OverdraftFeesMax.Value;                      lbOverdraftFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                          "Min "' ((SavingsBookProduct)product).OverdraftFeesMin.GetFormatedValue(product.Currency.UseCents)'                          "Max "' ((SavingsBookProduct)product).OverdraftFeesMax.GetFormatedValue(product.Currency.UseCents)'                          product.Currency.Code);                  }                    // Agio fees                  nudAgioFees.DecimalPlaces = 4;                  nudAgioFees.Increment = 0.0001m;                  if (((SavingsBookProduct)product).AgioFees.HasValue)                  {                      nudAgioFees.Enabled = false;                      nudAgioFees.Minimum = (decimal)((SavingsBookProduct)product).AgioFees.Value * 100;                      nudAgioFees.Maximum = (decimal)((SavingsBookProduct)product).AgioFees.Value * 100;                      lbAgioFeesMinMax.Text = string.Format("{0} {1}"' ((SavingsBookProduct)product).AgioFees * 100' "%");                  }                  else                  {                      nudAgioFees.Enabled = true;                      nudAgioFees.Minimum = (decimal)((SavingsBookProduct)product).AgioFeesMin.Value * 100;                      nudAgioFees.Maximum = (decimal)((SavingsBookProduct)product).AgioFeesMax.Value * 100;                      lbAgioFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                          "Min "' ((SavingsBookProduct)product).AgioFeesMin * 100'                          "Max "' ((SavingsBookProduct)product).AgioFeesMax * 100' "%");                  }                    //Reopen fees                  nudReopenFees.DecimalPlaces = 0;                  nudReopenFees.Increment = 1;                    if (((SavingsBookProduct)product).ReopenFees.HasValue)                  {                      nudReopenFees.Enabled = false;                      nudReopenFees.Minimum = ((SavingsBookProduct)product).ReopenFees.Value;                      nudReopenFees.Maximum = ((SavingsBookProduct)product).ReopenFees.Value;                      lbReopenFeesMinMax.Text = string.Format("{0} {1}"'                                                               ((SavingsBookProduct)product).ReopenFees.GetFormatedValue(product.Currency.UseCents)'                                                               product.Currency.Code);                  }                  else                  {                      nudReopenFees.Enabled = true;                      nudReopenFees.Minimum = ((SavingsBookProduct)product).ReopenFeesMin.Value;                      nudReopenFees.Maximum = ((SavingsBookProduct)product).ReopenFeesMax.Value;                      lbReopenFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                                                               "Min "' ((SavingsBookProduct)product).ReopenFeesMin.GetFormatedValue(product.Currency.UseCents)'                                                               "Max "' ((SavingsBookProduct)product).ReopenFeesMax.GetFormatedValue(product.Currency.UseCents)'                                                               product.Currency.Code);                  }                    if (((SavingsBookProduct)product).UseTermDeposit)                  {                      nudNumberOfPeriods.Enabled = true;                      btSearchContract2.Enabled = true;                      cmbRollover2.Enabled = true;                      nudNumberOfPeriods.Minimum = (decimal)((SavingsBookProduct)product).TermDepositPeriodMin;                      nudNumberOfPeriods.Maximum = (decimal)((SavingsBookProduct)product).TermDepositPeriodMax;                      nudNumberOfPeriods.Value = nudNumberOfPeriods.Minimum;                      tbTargetAccount2.ResetText();                  }                }
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,DisplaySavingProduct,The following statement contains a magic number: if (product is SavingsBookProduct)              {                  gbDepositInterest.Visible = false;                  gbInterest.Visible = true;                    lbWithdrawFees.Visible = true;                  nudWithdrawFees.Visible = true;                  lbWithdrawFeesMinMax.Visible = true;                    lbEntryFees.Visible = true;                  nudEntryFees.Visible = true;                  lbEntryFeesMinMax.Visible = true;                    lbTransferFees.Visible = true;                  nudTransferFees.Visible = true;                  nudIbtFee.Visible = true;                  lbTransferFeesMinMax.Visible = true;                    lbDepositFees.Visible = true;                  nudDepositFees.Visible = true;                  lbDepositFeesMinMax.Visible = true;                    lbChequeDepositFees.Visible = true;                  nudChequeDepositFees.Visible = true;                  lblChequeDepositFeesMinMax.Visible = true;                    lbCloseFees.Visible = true;                  nudCloseFees.Visible = true;                  lbCloseFeesMinMax.Visible = true;                    lbManagementFees.Visible = true;                  nudManagementFees.Visible = true;                  lbManagementFeesMinMax.Visible = true;                    lbOverdraftFees.Visible = true;                  nudOverdraftFees.Visible = true;                  lbOverdraftFeesMinMax.Visible = true;                    lbAgioFees.Visible = true;                  nudAgioFees.Visible = true;                  lbAgioFeesMinMax.Visible = true;                    lbReopenFees.Visible = true;                  nudReopenFees.Visible = true;                  lbReopenFeesMinMax.Visible = true;                    lbInterestAccrualValue.Text = MultiLanguageStrings.GetString(Ressource.FrmAddSavingProduct' ((SavingsBookProduct)product).InterestBase + ".Text");                  lbInterestPostingValue.Text = MultiLanguageStrings.GetString(Ressource.FrmAddSavingProduct' ((SavingsBookProduct)product).InterestFrequency + ".Text");                  lbInterestBasedOnValue.Text = ((SavingsBookProduct)product).CalculAmountBase.HasValue ? MultiLanguageStrings.GetString(Ressource.FrmAddSavingProduct' ((SavingsBookProduct)product).CalculAmountBase + ".Text") : "------";                    savingDepositToolStripMenuItem.Enabled = true;                  savingWithdrawToolStripMenuItem.Enabled = true;                  savingTransferToolStripMenuItem.Enabled = true;                    // entry fees                  nudEntryFees.DecimalPlaces = 0;                  nudEntryFees.Increment = 1;                  if (((SavingsBookProduct)product).EntryFees.HasValue)                  {                      nudEntryFees.Enabled = false;                      nudEntryFees.Minimum = ((SavingsBookProduct)product).EntryFees.Value;                      nudEntryFees.Maximum = ((SavingsBookProduct)product).EntryFees.Value;                      lbEntryFeesMinMax.Text = string.Format("{0} {1}"' ((SavingsBookProduct)product).EntryFees.GetFormatedValue(product.Currency.UseCents)' product.Currency.Code);                  }                  else                  {                      nudEntryFees.Enabled = true;                      nudEntryFees.Minimum = ((SavingsBookProduct)product).EntryFeesMin.Value;                      nudEntryFees.Maximum = ((SavingsBookProduct)product).EntryFeesMax.Value;                      lbEntryFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                          "Min "' ((SavingsBookProduct)product).EntryFeesMin.GetFormatedValue(product.Currency.UseCents)'                          "Max "' ((SavingsBookProduct)product).EntryFeesMax.GetFormatedValue(product.Currency.UseCents)'                          product.Currency.Code);                  }                    // withdraw fees                  if (((SavingsBookProduct)product).WithdrawFeesType == OSavingsFeesType.Flat)                  {                      nudWithdrawFees.DecimalPlaces = 0;                      nudWithdrawFees.Increment = 1;                      if (((SavingsBookProduct)product).FlatWithdrawFees.HasValue)                      {                          nudWithdrawFees.Enabled = false;                          nudWithdrawFees.Minimum = ((SavingsBookProduct)product).FlatWithdrawFees.Value;                          nudWithdrawFees.Maximum = ((SavingsBookProduct)product).FlatWithdrawFees.Value;                          lbWithdrawFeesMinMax.Text = string.Format("{0} {1}"' ((SavingsBookProduct)product).FlatWithdrawFees.GetFormatedValue(product.Currency.UseCents)' product.Currency.Code);                      }                      else                      {                          nudWithdrawFees.Enabled = true;                          nudWithdrawFees.Minimum = ((SavingsBookProduct)product).FlatWithdrawFeesMin.Value;                          nudWithdrawFees.Maximum = ((SavingsBookProduct)product).FlatWithdrawFeesMax.Value;                          lbWithdrawFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                              "Min "' ((SavingsBookProduct)product).FlatWithdrawFeesMin.GetFormatedValue(product.Currency.UseCents)'                              "Max "' ((SavingsBookProduct)product).FlatWithdrawFeesMax.GetFormatedValue(product.Currency.UseCents)'                              product.Currency.Code);                      }                  }                  else                  {                      nudWithdrawFees.DecimalPlaces = 4;                      nudWithdrawFees.Increment = 0.0001m;                      if (((SavingsBookProduct)product).RateWithdrawFees.HasValue)                      {                          nudWithdrawFees.Enabled = false;                          nudWithdrawFees.Minimum = (decimal)((SavingsBookProduct)product).RateWithdrawFees.Value * 100;                          nudWithdrawFees.Maximum = (decimal)((SavingsBookProduct)product).RateWithdrawFees.Value * 100;                          lbWithdrawFeesMinMax.Text = string.Format("{0} {1}"' (((SavingsBookProduct)product).RateWithdrawFees * 100)' "%");                      }                      else                      {                          nudWithdrawFees.Enabled = true;                          nudWithdrawFees.Minimum = (decimal)((SavingsBookProduct)product).RateWithdrawFeesMin.Value * 100;                          nudWithdrawFees.Maximum = (decimal)((SavingsBookProduct)product).RateWithdrawFeesMax.Value * 100;                          lbWithdrawFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                              "Min "' (((SavingsBookProduct)product).RateWithdrawFeesMin * 100)'                              "Max "' (((SavingsBookProduct)product).RateWithdrawFeesMax * 100)'                              "%");                      }                  }                    // Inter-branch tansfer fee                  SavingsBookProduct p = (SavingsBookProduct)product;                  Fee fee = p.InterBranchTransferFee;                  nudIbtFee.DecimalPlaces = fee.IsFlat ? 0 : 2;                  nudIbtFee.Increment = fee.IsFlat ? 1 : 0.01m;                  nudIbtFee.Enabled = !fee.Value.HasValue;                  nudIbtFee.Minimum = fee.GetMin();                  nudIbtFee.Maximum = fee.GetMax();                  if (fee.IsRange)                  {                      string min = fee.GetMinFormatted(p.Currency);                      string max = fee.GetMaxFormatted(p.Currency);                      const string mask = "Min {0}\r\nMax {1}";                      lblIbtFeeMinMax.Text = string.Format(mask' min' max);                  }                  else                  {                      lblIbtFeeMinMax.Text = fee.GetValueFormatted(p.Currency);                  }                    if (((SavingsBookProduct)product).TransferFeesType == OSavingsFeesType.Flat)                  {                      nudTransferFees.DecimalPlaces = 0;                      nudTransferFees.Increment = 1;                      if (((SavingsBookProduct)product).FlatTransferFees.HasValue)                      {                          nudTransferFees.Enabled = false;                          nudTransferFees.Minimum = ((SavingsBookProduct)product).FlatTransferFees.Value;                          nudTransferFees.Maximum = ((SavingsBookProduct)product).FlatTransferFees.Value;                          lbTransferFeesMinMax.Text = string.Format("{0} {1}"' ((SavingsBookProduct)product).FlatTransferFees.GetFormatedValue(product.Currency.UseCents)' product.Currency.Code);                      }                      else                      {                          nudTransferFees.Enabled = true;                          nudTransferFees.Minimum = ((SavingsBookProduct)product).FlatTransferFeesMin.Value;                          nudTransferFees.Maximum = ((SavingsBookProduct)product).FlatTransferFeesMax.Value;                          lbTransferFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                              "Min "' ((SavingsBookProduct)product).FlatTransferFeesMin.GetFormatedValue(product.Currency.UseCents)'                              "Max "' ((SavingsBookProduct)product).FlatTransferFeesMax.GetFormatedValue(product.Currency.UseCents)'                              product.Currency.Code);                      }                  }                  else                  {                      nudTransferFees.DecimalPlaces = 4;                      nudTransferFees.Increment = 0.0001m;                      if (((SavingsBookProduct)product).RateTransferFees.HasValue)                      {                          nudTransferFees.Enabled = false;                          nudTransferFees.Minimum = (decimal)((SavingsBookProduct)product).RateTransferFees.Value * 100;                          nudTransferFees.Maximum = (decimal)((SavingsBookProduct)product).RateTransferFees.Value * 100;                          lbTransferFeesMinMax.Text = string.Format("{0} {1}"' (((SavingsBookProduct)product).RateTransferFees * 100)' "%");                      }                      else                      {                          nudTransferFees.Enabled = true;                          nudTransferFees.Minimum = (decimal)((SavingsBookProduct)product).RateTransferFeesMin.Value * 100;                          nudTransferFees.Maximum = (decimal)((SavingsBookProduct)product).RateTransferFeesMax.Value * 100;                          lbTransferFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                              "Min "' (((SavingsBookProduct)product).RateTransferFeesMin * 100)'                              "Max "' (((SavingsBookProduct)product).RateTransferFeesMax * 100)'                              "%");                      }                  }                    //Cash Deposit fees                  nudDepositFees.DecimalPlaces = 0;                  nudDepositFees.Increment = 1;                  if (((SavingsBookProduct)product).DepositFees.HasValue)                  {                      nudDepositFees.Enabled = false;                      nudDepositFees.Minimum = ((SavingsBookProduct)product).DepositFees.Value;                      nudDepositFees.Maximum = ((SavingsBookProduct)product).DepositFees.Value;                      lbDepositFeesMinMax.Text = string.Format("{0} {1}"'                                                               ((SavingsBookProduct)product).DepositFees.GetFormatedValue(product.Currency.UseCents)'                                                               product.Currency.Code);                  }                  else                  {                      nudDepositFees.Enabled = true;                      nudDepositFees.Minimum = ((SavingsBookProduct)product).DepositFeesMin.Value;                      nudDepositFees.Maximum = ((SavingsBookProduct)product).DepositFeesMax.Value;                      lbDepositFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                                                               "Min "' ((SavingsBookProduct)product).DepositFeesMin.GetFormatedValue(product.Currency.UseCents)'                                                               "Max "' ((SavingsBookProduct)product).DepositFeesMax.GetFormatedValue(product.Currency.UseCents)'                                                               product.Currency.Code);                  }                    //Cheque Deposit fees                  nudChequeDepositFees.DecimalPlaces = 0;                  nudChequeDepositFees.Increment = 1;                  if (((SavingsBookProduct)product).ChequeDepositFees.HasValue)                  {                      nudChequeDepositFees.Enabled = false;                      nudChequeDepositFees.Maximum = ((SavingsBookProduct)product).ChequeDepositFees.Value;                      nudChequeDepositFees.Minimum = ((SavingsBookProduct)product).ChequeDepositFees.Value;                      lblChequeDepositFeesMinMax.Text = string.Format("{0} {1}"'                                                               ((SavingsBookProduct)product).ChequeDepositFees.GetFormatedValue(product.Currency.UseCents)'                                                               product.Currency.Code);                  }                  else                  {                      nudChequeDepositFees.Enabled = true;                      nudChequeDepositFees.Minimum = ((SavingsBookProduct)product).ChequeDepositFeesMin.Value;                      nudChequeDepositFees.Maximum = ((SavingsBookProduct)product).ChequeDepositFeesMax.Value;                      lblChequeDepositFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                                                               "Min "' ((SavingsBookProduct)product).ChequeDepositFeesMin.GetFormatedValue(product.Currency.UseCents)'                                                               "Max "' ((SavingsBookProduct)product).ChequeDepositFeesMax.GetFormatedValue(product.Currency.UseCents)'                                                               product.Currency.Code);                  }                    // Close fees                  nudCloseFees.DecimalPlaces = 0;                  nudCloseFees.Increment = 1;                  if (((SavingsBookProduct)product).CloseFees.HasValue)                  {                      nudCloseFees.Enabled = false;                      nudCloseFees.Minimum = ((SavingsBookProduct)product).CloseFees.Value;                      nudCloseFees.Maximum = ((SavingsBookProduct)product).CloseFees.Value;                      lbCloseFeesMinMax.Text = string.Format("{0} {1}"'                          ((SavingsBookProduct)product).CloseFees.GetFormatedValue(product.Currency.UseCents)' product.Currency.Code);                  }                  else                  {                      nudCloseFees.Enabled = true;                      nudCloseFees.Minimum = ((SavingsBookProduct)product).CloseFeesMin.Value;                      nudCloseFees.Maximum = ((SavingsBookProduct)product).CloseFeesMax.Value;                      lbCloseFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                          "Min "' ((SavingsBookProduct)product).CloseFeesMin.GetFormatedValue(product.Currency.UseCents)'                          "Max "' ((SavingsBookProduct)product).CloseFeesMax.GetFormatedValue(product.Currency.UseCents)'                          product.Currency.Code);                  }                    // Management fees                  nudManagementFees.DecimalPlaces = 0;                  nudManagementFees.Increment = 1;                  if (((SavingsBookProduct)product).ManagementFees.HasValue)                  {                      nudManagementFees.Enabled = false;                      nudManagementFees.Minimum = ((SavingsBookProduct)product).ManagementFees.Value;                      nudManagementFees.Maximum = ((SavingsBookProduct)product).ManagementFees.Value;                      lbManagementFeesMinMax.Text = string.Format("{0} {1}"'                          ((SavingsBookProduct)product).ManagementFees.GetFormatedValue(product.Currency.UseCents)' product.Currency.Code);                  }                  else                  {                      nudManagementFees.Enabled = true;                      nudManagementFees.Minimum = ((SavingsBookProduct)product).ManagementFeesMin.Value;                      nudManagementFees.Maximum = ((SavingsBookProduct)product).ManagementFeesMax.Value;                      lbManagementFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                          "Min "' ((SavingsBookProduct)product).ManagementFeesMin.GetFormatedValue(product.Currency.UseCents)'                          "Max "' ((SavingsBookProduct)product).ManagementFeesMax.GetFormatedValue(product.Currency.UseCents)'                          product.Currency.Code);                  }                    // Overdraft fees                  nudOverdraftFees.DecimalPlaces = 0;                  nudOverdraftFees.Increment = 1;                  if (((SavingsBookProduct)product).OverdraftFees.HasValue)                  {                      nudOverdraftFees.Enabled = false;                      nudOverdraftFees.Minimum = ((SavingsBookProduct)product).OverdraftFees.Value;                      nudOverdraftFees.Maximum = ((SavingsBookProduct)product).OverdraftFees.Value;                      lbOverdraftFeesMinMax.Text = string.Format("{0} {1}"'                          ((SavingsBookProduct)product).OverdraftFees.GetFormatedValue(product.Currency.UseCents)' product.Currency.Code);                  }                  else                  {                      nudOverdraftFees.Enabled = true;                      nudOverdraftFees.Minimum = ((SavingsBookProduct)product).OverdraftFeesMin.Value;                      nudOverdraftFees.Maximum = ((SavingsBookProduct)product).OverdraftFeesMax.Value;                      lbOverdraftFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                          "Min "' ((SavingsBookProduct)product).OverdraftFeesMin.GetFormatedValue(product.Currency.UseCents)'                          "Max "' ((SavingsBookProduct)product).OverdraftFeesMax.GetFormatedValue(product.Currency.UseCents)'                          product.Currency.Code);                  }                    // Agio fees                  nudAgioFees.DecimalPlaces = 4;                  nudAgioFees.Increment = 0.0001m;                  if (((SavingsBookProduct)product).AgioFees.HasValue)                  {                      nudAgioFees.Enabled = false;                      nudAgioFees.Minimum = (decimal)((SavingsBookProduct)product).AgioFees.Value * 100;                      nudAgioFees.Maximum = (decimal)((SavingsBookProduct)product).AgioFees.Value * 100;                      lbAgioFeesMinMax.Text = string.Format("{0} {1}"' ((SavingsBookProduct)product).AgioFees * 100' "%");                  }                  else                  {                      nudAgioFees.Enabled = true;                      nudAgioFees.Minimum = (decimal)((SavingsBookProduct)product).AgioFeesMin.Value * 100;                      nudAgioFees.Maximum = (decimal)((SavingsBookProduct)product).AgioFeesMax.Value * 100;                      lbAgioFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                          "Min "' ((SavingsBookProduct)product).AgioFeesMin * 100'                          "Max "' ((SavingsBookProduct)product).AgioFeesMax * 100' "%");                  }                    //Reopen fees                  nudReopenFees.DecimalPlaces = 0;                  nudReopenFees.Increment = 1;                    if (((SavingsBookProduct)product).ReopenFees.HasValue)                  {                      nudReopenFees.Enabled = false;                      nudReopenFees.Minimum = ((SavingsBookProduct)product).ReopenFees.Value;                      nudReopenFees.Maximum = ((SavingsBookProduct)product).ReopenFees.Value;                      lbReopenFeesMinMax.Text = string.Format("{0} {1}"'                                                               ((SavingsBookProduct)product).ReopenFees.GetFormatedValue(product.Currency.UseCents)'                                                               product.Currency.Code);                  }                  else                  {                      nudReopenFees.Enabled = true;                      nudReopenFees.Minimum = ((SavingsBookProduct)product).ReopenFeesMin.Value;                      nudReopenFees.Maximum = ((SavingsBookProduct)product).ReopenFeesMax.Value;                      lbReopenFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                                                               "Min "' ((SavingsBookProduct)product).ReopenFeesMin.GetFormatedValue(product.Currency.UseCents)'                                                               "Max "' ((SavingsBookProduct)product).ReopenFeesMax.GetFormatedValue(product.Currency.UseCents)'                                                               product.Currency.Code);                  }                    if (((SavingsBookProduct)product).UseTermDeposit)                  {                      nudNumberOfPeriods.Enabled = true;                      btSearchContract2.Enabled = true;                      cmbRollover2.Enabled = true;                      nudNumberOfPeriods.Minimum = (decimal)((SavingsBookProduct)product).TermDepositPeriodMin;                      nudNumberOfPeriods.Maximum = (decimal)((SavingsBookProduct)product).TermDepositPeriodMax;                      nudNumberOfPeriods.Value = nudNumberOfPeriods.Minimum;                      tbTargetAccount2.ResetText();                  }                }
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,DisplaySavingProduct,The following statement contains a magic number: if (product is SavingsBookProduct)              {                  gbDepositInterest.Visible = false;                  gbInterest.Visible = true;                    lbWithdrawFees.Visible = true;                  nudWithdrawFees.Visible = true;                  lbWithdrawFeesMinMax.Visible = true;                    lbEntryFees.Visible = true;                  nudEntryFees.Visible = true;                  lbEntryFeesMinMax.Visible = true;                    lbTransferFees.Visible = true;                  nudTransferFees.Visible = true;                  nudIbtFee.Visible = true;                  lbTransferFeesMinMax.Visible = true;                    lbDepositFees.Visible = true;                  nudDepositFees.Visible = true;                  lbDepositFeesMinMax.Visible = true;                    lbChequeDepositFees.Visible = true;                  nudChequeDepositFees.Visible = true;                  lblChequeDepositFeesMinMax.Visible = true;                    lbCloseFees.Visible = true;                  nudCloseFees.Visible = true;                  lbCloseFeesMinMax.Visible = true;                    lbManagementFees.Visible = true;                  nudManagementFees.Visible = true;                  lbManagementFeesMinMax.Visible = true;                    lbOverdraftFees.Visible = true;                  nudOverdraftFees.Visible = true;                  lbOverdraftFeesMinMax.Visible = true;                    lbAgioFees.Visible = true;                  nudAgioFees.Visible = true;                  lbAgioFeesMinMax.Visible = true;                    lbReopenFees.Visible = true;                  nudReopenFees.Visible = true;                  lbReopenFeesMinMax.Visible = true;                    lbInterestAccrualValue.Text = MultiLanguageStrings.GetString(Ressource.FrmAddSavingProduct' ((SavingsBookProduct)product).InterestBase + ".Text");                  lbInterestPostingValue.Text = MultiLanguageStrings.GetString(Ressource.FrmAddSavingProduct' ((SavingsBookProduct)product).InterestFrequency + ".Text");                  lbInterestBasedOnValue.Text = ((SavingsBookProduct)product).CalculAmountBase.HasValue ? MultiLanguageStrings.GetString(Ressource.FrmAddSavingProduct' ((SavingsBookProduct)product).CalculAmountBase + ".Text") : "------";                    savingDepositToolStripMenuItem.Enabled = true;                  savingWithdrawToolStripMenuItem.Enabled = true;                  savingTransferToolStripMenuItem.Enabled = true;                    // entry fees                  nudEntryFees.DecimalPlaces = 0;                  nudEntryFees.Increment = 1;                  if (((SavingsBookProduct)product).EntryFees.HasValue)                  {                      nudEntryFees.Enabled = false;                      nudEntryFees.Minimum = ((SavingsBookProduct)product).EntryFees.Value;                      nudEntryFees.Maximum = ((SavingsBookProduct)product).EntryFees.Value;                      lbEntryFeesMinMax.Text = string.Format("{0} {1}"' ((SavingsBookProduct)product).EntryFees.GetFormatedValue(product.Currency.UseCents)' product.Currency.Code);                  }                  else                  {                      nudEntryFees.Enabled = true;                      nudEntryFees.Minimum = ((SavingsBookProduct)product).EntryFeesMin.Value;                      nudEntryFees.Maximum = ((SavingsBookProduct)product).EntryFeesMax.Value;                      lbEntryFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                          "Min "' ((SavingsBookProduct)product).EntryFeesMin.GetFormatedValue(product.Currency.UseCents)'                          "Max "' ((SavingsBookProduct)product).EntryFeesMax.GetFormatedValue(product.Currency.UseCents)'                          product.Currency.Code);                  }                    // withdraw fees                  if (((SavingsBookProduct)product).WithdrawFeesType == OSavingsFeesType.Flat)                  {                      nudWithdrawFees.DecimalPlaces = 0;                      nudWithdrawFees.Increment = 1;                      if (((SavingsBookProduct)product).FlatWithdrawFees.HasValue)                      {                          nudWithdrawFees.Enabled = false;                          nudWithdrawFees.Minimum = ((SavingsBookProduct)product).FlatWithdrawFees.Value;                          nudWithdrawFees.Maximum = ((SavingsBookProduct)product).FlatWithdrawFees.Value;                          lbWithdrawFeesMinMax.Text = string.Format("{0} {1}"' ((SavingsBookProduct)product).FlatWithdrawFees.GetFormatedValue(product.Currency.UseCents)' product.Currency.Code);                      }                      else                      {                          nudWithdrawFees.Enabled = true;                          nudWithdrawFees.Minimum = ((SavingsBookProduct)product).FlatWithdrawFeesMin.Value;                          nudWithdrawFees.Maximum = ((SavingsBookProduct)product).FlatWithdrawFeesMax.Value;                          lbWithdrawFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                              "Min "' ((SavingsBookProduct)product).FlatWithdrawFeesMin.GetFormatedValue(product.Currency.UseCents)'                              "Max "' ((SavingsBookProduct)product).FlatWithdrawFeesMax.GetFormatedValue(product.Currency.UseCents)'                              product.Currency.Code);                      }                  }                  else                  {                      nudWithdrawFees.DecimalPlaces = 4;                      nudWithdrawFees.Increment = 0.0001m;                      if (((SavingsBookProduct)product).RateWithdrawFees.HasValue)                      {                          nudWithdrawFees.Enabled = false;                          nudWithdrawFees.Minimum = (decimal)((SavingsBookProduct)product).RateWithdrawFees.Value * 100;                          nudWithdrawFees.Maximum = (decimal)((SavingsBookProduct)product).RateWithdrawFees.Value * 100;                          lbWithdrawFeesMinMax.Text = string.Format("{0} {1}"' (((SavingsBookProduct)product).RateWithdrawFees * 100)' "%");                      }                      else                      {                          nudWithdrawFees.Enabled = true;                          nudWithdrawFees.Minimum = (decimal)((SavingsBookProduct)product).RateWithdrawFeesMin.Value * 100;                          nudWithdrawFees.Maximum = (decimal)((SavingsBookProduct)product).RateWithdrawFeesMax.Value * 100;                          lbWithdrawFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                              "Min "' (((SavingsBookProduct)product).RateWithdrawFeesMin * 100)'                              "Max "' (((SavingsBookProduct)product).RateWithdrawFeesMax * 100)'                              "%");                      }                  }                    // Inter-branch tansfer fee                  SavingsBookProduct p = (SavingsBookProduct)product;                  Fee fee = p.InterBranchTransferFee;                  nudIbtFee.DecimalPlaces = fee.IsFlat ? 0 : 2;                  nudIbtFee.Increment = fee.IsFlat ? 1 : 0.01m;                  nudIbtFee.Enabled = !fee.Value.HasValue;                  nudIbtFee.Minimum = fee.GetMin();                  nudIbtFee.Maximum = fee.GetMax();                  if (fee.IsRange)                  {                      string min = fee.GetMinFormatted(p.Currency);                      string max = fee.GetMaxFormatted(p.Currency);                      const string mask = "Min {0}\r\nMax {1}";                      lblIbtFeeMinMax.Text = string.Format(mask' min' max);                  }                  else                  {                      lblIbtFeeMinMax.Text = fee.GetValueFormatted(p.Currency);                  }                    if (((SavingsBookProduct)product).TransferFeesType == OSavingsFeesType.Flat)                  {                      nudTransferFees.DecimalPlaces = 0;                      nudTransferFees.Increment = 1;                      if (((SavingsBookProduct)product).FlatTransferFees.HasValue)                      {                          nudTransferFees.Enabled = false;                          nudTransferFees.Minimum = ((SavingsBookProduct)product).FlatTransferFees.Value;                          nudTransferFees.Maximum = ((SavingsBookProduct)product).FlatTransferFees.Value;                          lbTransferFeesMinMax.Text = string.Format("{0} {1}"' ((SavingsBookProduct)product).FlatTransferFees.GetFormatedValue(product.Currency.UseCents)' product.Currency.Code);                      }                      else                      {                          nudTransferFees.Enabled = true;                          nudTransferFees.Minimum = ((SavingsBookProduct)product).FlatTransferFeesMin.Value;                          nudTransferFees.Maximum = ((SavingsBookProduct)product).FlatTransferFeesMax.Value;                          lbTransferFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                              "Min "' ((SavingsBookProduct)product).FlatTransferFeesMin.GetFormatedValue(product.Currency.UseCents)'                              "Max "' ((SavingsBookProduct)product).FlatTransferFeesMax.GetFormatedValue(product.Currency.UseCents)'                              product.Currency.Code);                      }                  }                  else                  {                      nudTransferFees.DecimalPlaces = 4;                      nudTransferFees.Increment = 0.0001m;                      if (((SavingsBookProduct)product).RateTransferFees.HasValue)                      {                          nudTransferFees.Enabled = false;                          nudTransferFees.Minimum = (decimal)((SavingsBookProduct)product).RateTransferFees.Value * 100;                          nudTransferFees.Maximum = (decimal)((SavingsBookProduct)product).RateTransferFees.Value * 100;                          lbTransferFeesMinMax.Text = string.Format("{0} {1}"' (((SavingsBookProduct)product).RateTransferFees * 100)' "%");                      }                      else                      {                          nudTransferFees.Enabled = true;                          nudTransferFees.Minimum = (decimal)((SavingsBookProduct)product).RateTransferFeesMin.Value * 100;                          nudTransferFees.Maximum = (decimal)((SavingsBookProduct)product).RateTransferFeesMax.Value * 100;                          lbTransferFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                              "Min "' (((SavingsBookProduct)product).RateTransferFeesMin * 100)'                              "Max "' (((SavingsBookProduct)product).RateTransferFeesMax * 100)'                              "%");                      }                  }                    //Cash Deposit fees                  nudDepositFees.DecimalPlaces = 0;                  nudDepositFees.Increment = 1;                  if (((SavingsBookProduct)product).DepositFees.HasValue)                  {                      nudDepositFees.Enabled = false;                      nudDepositFees.Minimum = ((SavingsBookProduct)product).DepositFees.Value;                      nudDepositFees.Maximum = ((SavingsBookProduct)product).DepositFees.Value;                      lbDepositFeesMinMax.Text = string.Format("{0} {1}"'                                                               ((SavingsBookProduct)product).DepositFees.GetFormatedValue(product.Currency.UseCents)'                                                               product.Currency.Code);                  }                  else                  {                      nudDepositFees.Enabled = true;                      nudDepositFees.Minimum = ((SavingsBookProduct)product).DepositFeesMin.Value;                      nudDepositFees.Maximum = ((SavingsBookProduct)product).DepositFeesMax.Value;                      lbDepositFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                                                               "Min "' ((SavingsBookProduct)product).DepositFeesMin.GetFormatedValue(product.Currency.UseCents)'                                                               "Max "' ((SavingsBookProduct)product).DepositFeesMax.GetFormatedValue(product.Currency.UseCents)'                                                               product.Currency.Code);                  }                    //Cheque Deposit fees                  nudChequeDepositFees.DecimalPlaces = 0;                  nudChequeDepositFees.Increment = 1;                  if (((SavingsBookProduct)product).ChequeDepositFees.HasValue)                  {                      nudChequeDepositFees.Enabled = false;                      nudChequeDepositFees.Maximum = ((SavingsBookProduct)product).ChequeDepositFees.Value;                      nudChequeDepositFees.Minimum = ((SavingsBookProduct)product).ChequeDepositFees.Value;                      lblChequeDepositFeesMinMax.Text = string.Format("{0} {1}"'                                                               ((SavingsBookProduct)product).ChequeDepositFees.GetFormatedValue(product.Currency.UseCents)'                                                               product.Currency.Code);                  }                  else                  {                      nudChequeDepositFees.Enabled = true;                      nudChequeDepositFees.Minimum = ((SavingsBookProduct)product).ChequeDepositFeesMin.Value;                      nudChequeDepositFees.Maximum = ((SavingsBookProduct)product).ChequeDepositFeesMax.Value;                      lblChequeDepositFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                                                               "Min "' ((SavingsBookProduct)product).ChequeDepositFeesMin.GetFormatedValue(product.Currency.UseCents)'                                                               "Max "' ((SavingsBookProduct)product).ChequeDepositFeesMax.GetFormatedValue(product.Currency.UseCents)'                                                               product.Currency.Code);                  }                    // Close fees                  nudCloseFees.DecimalPlaces = 0;                  nudCloseFees.Increment = 1;                  if (((SavingsBookProduct)product).CloseFees.HasValue)                  {                      nudCloseFees.Enabled = false;                      nudCloseFees.Minimum = ((SavingsBookProduct)product).CloseFees.Value;                      nudCloseFees.Maximum = ((SavingsBookProduct)product).CloseFees.Value;                      lbCloseFeesMinMax.Text = string.Format("{0} {1}"'                          ((SavingsBookProduct)product).CloseFees.GetFormatedValue(product.Currency.UseCents)' product.Currency.Code);                  }                  else                  {                      nudCloseFees.Enabled = true;                      nudCloseFees.Minimum = ((SavingsBookProduct)product).CloseFeesMin.Value;                      nudCloseFees.Maximum = ((SavingsBookProduct)product).CloseFeesMax.Value;                      lbCloseFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                          "Min "' ((SavingsBookProduct)product).CloseFeesMin.GetFormatedValue(product.Currency.UseCents)'                          "Max "' ((SavingsBookProduct)product).CloseFeesMax.GetFormatedValue(product.Currency.UseCents)'                          product.Currency.Code);                  }                    // Management fees                  nudManagementFees.DecimalPlaces = 0;                  nudManagementFees.Increment = 1;                  if (((SavingsBookProduct)product).ManagementFees.HasValue)                  {                      nudManagementFees.Enabled = false;                      nudManagementFees.Minimum = ((SavingsBookProduct)product).ManagementFees.Value;                      nudManagementFees.Maximum = ((SavingsBookProduct)product).ManagementFees.Value;                      lbManagementFeesMinMax.Text = string.Format("{0} {1}"'                          ((SavingsBookProduct)product).ManagementFees.GetFormatedValue(product.Currency.UseCents)' product.Currency.Code);                  }                  else                  {                      nudManagementFees.Enabled = true;                      nudManagementFees.Minimum = ((SavingsBookProduct)product).ManagementFeesMin.Value;                      nudManagementFees.Maximum = ((SavingsBookProduct)product).ManagementFeesMax.Value;                      lbManagementFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                          "Min "' ((SavingsBookProduct)product).ManagementFeesMin.GetFormatedValue(product.Currency.UseCents)'                          "Max "' ((SavingsBookProduct)product).ManagementFeesMax.GetFormatedValue(product.Currency.UseCents)'                          product.Currency.Code);                  }                    // Overdraft fees                  nudOverdraftFees.DecimalPlaces = 0;                  nudOverdraftFees.Increment = 1;                  if (((SavingsBookProduct)product).OverdraftFees.HasValue)                  {                      nudOverdraftFees.Enabled = false;                      nudOverdraftFees.Minimum = ((SavingsBookProduct)product).OverdraftFees.Value;                      nudOverdraftFees.Maximum = ((SavingsBookProduct)product).OverdraftFees.Value;                      lbOverdraftFeesMinMax.Text = string.Format("{0} {1}"'                          ((SavingsBookProduct)product).OverdraftFees.GetFormatedValue(product.Currency.UseCents)' product.Currency.Code);                  }                  else                  {                      nudOverdraftFees.Enabled = true;                      nudOverdraftFees.Minimum = ((SavingsBookProduct)product).OverdraftFeesMin.Value;                      nudOverdraftFees.Maximum = ((SavingsBookProduct)product).OverdraftFeesMax.Value;                      lbOverdraftFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                          "Min "' ((SavingsBookProduct)product).OverdraftFeesMin.GetFormatedValue(product.Currency.UseCents)'                          "Max "' ((SavingsBookProduct)product).OverdraftFeesMax.GetFormatedValue(product.Currency.UseCents)'                          product.Currency.Code);                  }                    // Agio fees                  nudAgioFees.DecimalPlaces = 4;                  nudAgioFees.Increment = 0.0001m;                  if (((SavingsBookProduct)product).AgioFees.HasValue)                  {                      nudAgioFees.Enabled = false;                      nudAgioFees.Minimum = (decimal)((SavingsBookProduct)product).AgioFees.Value * 100;                      nudAgioFees.Maximum = (decimal)((SavingsBookProduct)product).AgioFees.Value * 100;                      lbAgioFeesMinMax.Text = string.Format("{0} {1}"' ((SavingsBookProduct)product).AgioFees * 100' "%");                  }                  else                  {                      nudAgioFees.Enabled = true;                      nudAgioFees.Minimum = (decimal)((SavingsBookProduct)product).AgioFeesMin.Value * 100;                      nudAgioFees.Maximum = (decimal)((SavingsBookProduct)product).AgioFeesMax.Value * 100;                      lbAgioFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                          "Min "' ((SavingsBookProduct)product).AgioFeesMin * 100'                          "Max "' ((SavingsBookProduct)product).AgioFeesMax * 100' "%");                  }                    //Reopen fees                  nudReopenFees.DecimalPlaces = 0;                  nudReopenFees.Increment = 1;                    if (((SavingsBookProduct)product).ReopenFees.HasValue)                  {                      nudReopenFees.Enabled = false;                      nudReopenFees.Minimum = ((SavingsBookProduct)product).ReopenFees.Value;                      nudReopenFees.Maximum = ((SavingsBookProduct)product).ReopenFees.Value;                      lbReopenFeesMinMax.Text = string.Format("{0} {1}"'                                                               ((SavingsBookProduct)product).ReopenFees.GetFormatedValue(product.Currency.UseCents)'                                                               product.Currency.Code);                  }                  else                  {                      nudReopenFees.Enabled = true;                      nudReopenFees.Minimum = ((SavingsBookProduct)product).ReopenFeesMin.Value;                      nudReopenFees.Maximum = ((SavingsBookProduct)product).ReopenFeesMax.Value;                      lbReopenFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                                                               "Min "' ((SavingsBookProduct)product).ReopenFeesMin.GetFormatedValue(product.Currency.UseCents)'                                                               "Max "' ((SavingsBookProduct)product).ReopenFeesMax.GetFormatedValue(product.Currency.UseCents)'                                                               product.Currency.Code);                  }                    if (((SavingsBookProduct)product).UseTermDeposit)                  {                      nudNumberOfPeriods.Enabled = true;                      btSearchContract2.Enabled = true;                      cmbRollover2.Enabled = true;                      nudNumberOfPeriods.Minimum = (decimal)((SavingsBookProduct)product).TermDepositPeriodMin;                      nudNumberOfPeriods.Maximum = (decimal)((SavingsBookProduct)product).TermDepositPeriodMax;                      nudNumberOfPeriods.Value = nudNumberOfPeriods.Minimum;                      tbTargetAccount2.ResetText();                  }                }
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,DisplaySavingProduct,The following statement contains a magic number: if (product is SavingsBookProduct)              {                  gbDepositInterest.Visible = false;                  gbInterest.Visible = true;                    lbWithdrawFees.Visible = true;                  nudWithdrawFees.Visible = true;                  lbWithdrawFeesMinMax.Visible = true;                    lbEntryFees.Visible = true;                  nudEntryFees.Visible = true;                  lbEntryFeesMinMax.Visible = true;                    lbTransferFees.Visible = true;                  nudTransferFees.Visible = true;                  nudIbtFee.Visible = true;                  lbTransferFeesMinMax.Visible = true;                    lbDepositFees.Visible = true;                  nudDepositFees.Visible = true;                  lbDepositFeesMinMax.Visible = true;                    lbChequeDepositFees.Visible = true;                  nudChequeDepositFees.Visible = true;                  lblChequeDepositFeesMinMax.Visible = true;                    lbCloseFees.Visible = true;                  nudCloseFees.Visible = true;                  lbCloseFeesMinMax.Visible = true;                    lbManagementFees.Visible = true;                  nudManagementFees.Visible = true;                  lbManagementFeesMinMax.Visible = true;                    lbOverdraftFees.Visible = true;                  nudOverdraftFees.Visible = true;                  lbOverdraftFeesMinMax.Visible = true;                    lbAgioFees.Visible = true;                  nudAgioFees.Visible = true;                  lbAgioFeesMinMax.Visible = true;                    lbReopenFees.Visible = true;                  nudReopenFees.Visible = true;                  lbReopenFeesMinMax.Visible = true;                    lbInterestAccrualValue.Text = MultiLanguageStrings.GetString(Ressource.FrmAddSavingProduct' ((SavingsBookProduct)product).InterestBase + ".Text");                  lbInterestPostingValue.Text = MultiLanguageStrings.GetString(Ressource.FrmAddSavingProduct' ((SavingsBookProduct)product).InterestFrequency + ".Text");                  lbInterestBasedOnValue.Text = ((SavingsBookProduct)product).CalculAmountBase.HasValue ? MultiLanguageStrings.GetString(Ressource.FrmAddSavingProduct' ((SavingsBookProduct)product).CalculAmountBase + ".Text") : "------";                    savingDepositToolStripMenuItem.Enabled = true;                  savingWithdrawToolStripMenuItem.Enabled = true;                  savingTransferToolStripMenuItem.Enabled = true;                    // entry fees                  nudEntryFees.DecimalPlaces = 0;                  nudEntryFees.Increment = 1;                  if (((SavingsBookProduct)product).EntryFees.HasValue)                  {                      nudEntryFees.Enabled = false;                      nudEntryFees.Minimum = ((SavingsBookProduct)product).EntryFees.Value;                      nudEntryFees.Maximum = ((SavingsBookProduct)product).EntryFees.Value;                      lbEntryFeesMinMax.Text = string.Format("{0} {1}"' ((SavingsBookProduct)product).EntryFees.GetFormatedValue(product.Currency.UseCents)' product.Currency.Code);                  }                  else                  {                      nudEntryFees.Enabled = true;                      nudEntryFees.Minimum = ((SavingsBookProduct)product).EntryFeesMin.Value;                      nudEntryFees.Maximum = ((SavingsBookProduct)product).EntryFeesMax.Value;                      lbEntryFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                          "Min "' ((SavingsBookProduct)product).EntryFeesMin.GetFormatedValue(product.Currency.UseCents)'                          "Max "' ((SavingsBookProduct)product).EntryFeesMax.GetFormatedValue(product.Currency.UseCents)'                          product.Currency.Code);                  }                    // withdraw fees                  if (((SavingsBookProduct)product).WithdrawFeesType == OSavingsFeesType.Flat)                  {                      nudWithdrawFees.DecimalPlaces = 0;                      nudWithdrawFees.Increment = 1;                      if (((SavingsBookProduct)product).FlatWithdrawFees.HasValue)                      {                          nudWithdrawFees.Enabled = false;                          nudWithdrawFees.Minimum = ((SavingsBookProduct)product).FlatWithdrawFees.Value;                          nudWithdrawFees.Maximum = ((SavingsBookProduct)product).FlatWithdrawFees.Value;                          lbWithdrawFeesMinMax.Text = string.Format("{0} {1}"' ((SavingsBookProduct)product).FlatWithdrawFees.GetFormatedValue(product.Currency.UseCents)' product.Currency.Code);                      }                      else                      {                          nudWithdrawFees.Enabled = true;                          nudWithdrawFees.Minimum = ((SavingsBookProduct)product).FlatWithdrawFeesMin.Value;                          nudWithdrawFees.Maximum = ((SavingsBookProduct)product).FlatWithdrawFeesMax.Value;                          lbWithdrawFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                              "Min "' ((SavingsBookProduct)product).FlatWithdrawFeesMin.GetFormatedValue(product.Currency.UseCents)'                              "Max "' ((SavingsBookProduct)product).FlatWithdrawFeesMax.GetFormatedValue(product.Currency.UseCents)'                              product.Currency.Code);                      }                  }                  else                  {                      nudWithdrawFees.DecimalPlaces = 4;                      nudWithdrawFees.Increment = 0.0001m;                      if (((SavingsBookProduct)product).RateWithdrawFees.HasValue)                      {                          nudWithdrawFees.Enabled = false;                          nudWithdrawFees.Minimum = (decimal)((SavingsBookProduct)product).RateWithdrawFees.Value * 100;                          nudWithdrawFees.Maximum = (decimal)((SavingsBookProduct)product).RateWithdrawFees.Value * 100;                          lbWithdrawFeesMinMax.Text = string.Format("{0} {1}"' (((SavingsBookProduct)product).RateWithdrawFees * 100)' "%");                      }                      else                      {                          nudWithdrawFees.Enabled = true;                          nudWithdrawFees.Minimum = (decimal)((SavingsBookProduct)product).RateWithdrawFeesMin.Value * 100;                          nudWithdrawFees.Maximum = (decimal)((SavingsBookProduct)product).RateWithdrawFeesMax.Value * 100;                          lbWithdrawFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                              "Min "' (((SavingsBookProduct)product).RateWithdrawFeesMin * 100)'                              "Max "' (((SavingsBookProduct)product).RateWithdrawFeesMax * 100)'                              "%");                      }                  }                    // Inter-branch tansfer fee                  SavingsBookProduct p = (SavingsBookProduct)product;                  Fee fee = p.InterBranchTransferFee;                  nudIbtFee.DecimalPlaces = fee.IsFlat ? 0 : 2;                  nudIbtFee.Increment = fee.IsFlat ? 1 : 0.01m;                  nudIbtFee.Enabled = !fee.Value.HasValue;                  nudIbtFee.Minimum = fee.GetMin();                  nudIbtFee.Maximum = fee.GetMax();                  if (fee.IsRange)                  {                      string min = fee.GetMinFormatted(p.Currency);                      string max = fee.GetMaxFormatted(p.Currency);                      const string mask = "Min {0}\r\nMax {1}";                      lblIbtFeeMinMax.Text = string.Format(mask' min' max);                  }                  else                  {                      lblIbtFeeMinMax.Text = fee.GetValueFormatted(p.Currency);                  }                    if (((SavingsBookProduct)product).TransferFeesType == OSavingsFeesType.Flat)                  {                      nudTransferFees.DecimalPlaces = 0;                      nudTransferFees.Increment = 1;                      if (((SavingsBookProduct)product).FlatTransferFees.HasValue)                      {                          nudTransferFees.Enabled = false;                          nudTransferFees.Minimum = ((SavingsBookProduct)product).FlatTransferFees.Value;                          nudTransferFees.Maximum = ((SavingsBookProduct)product).FlatTransferFees.Value;                          lbTransferFeesMinMax.Text = string.Format("{0} {1}"' ((SavingsBookProduct)product).FlatTransferFees.GetFormatedValue(product.Currency.UseCents)' product.Currency.Code);                      }                      else                      {                          nudTransferFees.Enabled = true;                          nudTransferFees.Minimum = ((SavingsBookProduct)product).FlatTransferFeesMin.Value;                          nudTransferFees.Maximum = ((SavingsBookProduct)product).FlatTransferFeesMax.Value;                          lbTransferFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                              "Min "' ((SavingsBookProduct)product).FlatTransferFeesMin.GetFormatedValue(product.Currency.UseCents)'                              "Max "' ((SavingsBookProduct)product).FlatTransferFeesMax.GetFormatedValue(product.Currency.UseCents)'                              product.Currency.Code);                      }                  }                  else                  {                      nudTransferFees.DecimalPlaces = 4;                      nudTransferFees.Increment = 0.0001m;                      if (((SavingsBookProduct)product).RateTransferFees.HasValue)                      {                          nudTransferFees.Enabled = false;                          nudTransferFees.Minimum = (decimal)((SavingsBookProduct)product).RateTransferFees.Value * 100;                          nudTransferFees.Maximum = (decimal)((SavingsBookProduct)product).RateTransferFees.Value * 100;                          lbTransferFeesMinMax.Text = string.Format("{0} {1}"' (((SavingsBookProduct)product).RateTransferFees * 100)' "%");                      }                      else                      {                          nudTransferFees.Enabled = true;                          nudTransferFees.Minimum = (decimal)((SavingsBookProduct)product).RateTransferFeesMin.Value * 100;                          nudTransferFees.Maximum = (decimal)((SavingsBookProduct)product).RateTransferFeesMax.Value * 100;                          lbTransferFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                              "Min "' (((SavingsBookProduct)product).RateTransferFeesMin * 100)'                              "Max "' (((SavingsBookProduct)product).RateTransferFeesMax * 100)'                              "%");                      }                  }                    //Cash Deposit fees                  nudDepositFees.DecimalPlaces = 0;                  nudDepositFees.Increment = 1;                  if (((SavingsBookProduct)product).DepositFees.HasValue)                  {                      nudDepositFees.Enabled = false;                      nudDepositFees.Minimum = ((SavingsBookProduct)product).DepositFees.Value;                      nudDepositFees.Maximum = ((SavingsBookProduct)product).DepositFees.Value;                      lbDepositFeesMinMax.Text = string.Format("{0} {1}"'                                                               ((SavingsBookProduct)product).DepositFees.GetFormatedValue(product.Currency.UseCents)'                                                               product.Currency.Code);                  }                  else                  {                      nudDepositFees.Enabled = true;                      nudDepositFees.Minimum = ((SavingsBookProduct)product).DepositFeesMin.Value;                      nudDepositFees.Maximum = ((SavingsBookProduct)product).DepositFeesMax.Value;                      lbDepositFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                                                               "Min "' ((SavingsBookProduct)product).DepositFeesMin.GetFormatedValue(product.Currency.UseCents)'                                                               "Max "' ((SavingsBookProduct)product).DepositFeesMax.GetFormatedValue(product.Currency.UseCents)'                                                               product.Currency.Code);                  }                    //Cheque Deposit fees                  nudChequeDepositFees.DecimalPlaces = 0;                  nudChequeDepositFees.Increment = 1;                  if (((SavingsBookProduct)product).ChequeDepositFees.HasValue)                  {                      nudChequeDepositFees.Enabled = false;                      nudChequeDepositFees.Maximum = ((SavingsBookProduct)product).ChequeDepositFees.Value;                      nudChequeDepositFees.Minimum = ((SavingsBookProduct)product).ChequeDepositFees.Value;                      lblChequeDepositFeesMinMax.Text = string.Format("{0} {1}"'                                                               ((SavingsBookProduct)product).ChequeDepositFees.GetFormatedValue(product.Currency.UseCents)'                                                               product.Currency.Code);                  }                  else                  {                      nudChequeDepositFees.Enabled = true;                      nudChequeDepositFees.Minimum = ((SavingsBookProduct)product).ChequeDepositFeesMin.Value;                      nudChequeDepositFees.Maximum = ((SavingsBookProduct)product).ChequeDepositFeesMax.Value;                      lblChequeDepositFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                                                               "Min "' ((SavingsBookProduct)product).ChequeDepositFeesMin.GetFormatedValue(product.Currency.UseCents)'                                                               "Max "' ((SavingsBookProduct)product).ChequeDepositFeesMax.GetFormatedValue(product.Currency.UseCents)'                                                               product.Currency.Code);                  }                    // Close fees                  nudCloseFees.DecimalPlaces = 0;                  nudCloseFees.Increment = 1;                  if (((SavingsBookProduct)product).CloseFees.HasValue)                  {                      nudCloseFees.Enabled = false;                      nudCloseFees.Minimum = ((SavingsBookProduct)product).CloseFees.Value;                      nudCloseFees.Maximum = ((SavingsBookProduct)product).CloseFees.Value;                      lbCloseFeesMinMax.Text = string.Format("{0} {1}"'                          ((SavingsBookProduct)product).CloseFees.GetFormatedValue(product.Currency.UseCents)' product.Currency.Code);                  }                  else                  {                      nudCloseFees.Enabled = true;                      nudCloseFees.Minimum = ((SavingsBookProduct)product).CloseFeesMin.Value;                      nudCloseFees.Maximum = ((SavingsBookProduct)product).CloseFeesMax.Value;                      lbCloseFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                          "Min "' ((SavingsBookProduct)product).CloseFeesMin.GetFormatedValue(product.Currency.UseCents)'                          "Max "' ((SavingsBookProduct)product).CloseFeesMax.GetFormatedValue(product.Currency.UseCents)'                          product.Currency.Code);                  }                    // Management fees                  nudManagementFees.DecimalPlaces = 0;                  nudManagementFees.Increment = 1;                  if (((SavingsBookProduct)product).ManagementFees.HasValue)                  {                      nudManagementFees.Enabled = false;                      nudManagementFees.Minimum = ((SavingsBookProduct)product).ManagementFees.Value;                      nudManagementFees.Maximum = ((SavingsBookProduct)product).ManagementFees.Value;                      lbManagementFeesMinMax.Text = string.Format("{0} {1}"'                          ((SavingsBookProduct)product).ManagementFees.GetFormatedValue(product.Currency.UseCents)' product.Currency.Code);                  }                  else                  {                      nudManagementFees.Enabled = true;                      nudManagementFees.Minimum = ((SavingsBookProduct)product).ManagementFeesMin.Value;                      nudManagementFees.Maximum = ((SavingsBookProduct)product).ManagementFeesMax.Value;                      lbManagementFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                          "Min "' ((SavingsBookProduct)product).ManagementFeesMin.GetFormatedValue(product.Currency.UseCents)'                          "Max "' ((SavingsBookProduct)product).ManagementFeesMax.GetFormatedValue(product.Currency.UseCents)'                          product.Currency.Code);                  }                    // Overdraft fees                  nudOverdraftFees.DecimalPlaces = 0;                  nudOverdraftFees.Increment = 1;                  if (((SavingsBookProduct)product).OverdraftFees.HasValue)                  {                      nudOverdraftFees.Enabled = false;                      nudOverdraftFees.Minimum = ((SavingsBookProduct)product).OverdraftFees.Value;                      nudOverdraftFees.Maximum = ((SavingsBookProduct)product).OverdraftFees.Value;                      lbOverdraftFeesMinMax.Text = string.Format("{0} {1}"'                          ((SavingsBookProduct)product).OverdraftFees.GetFormatedValue(product.Currency.UseCents)' product.Currency.Code);                  }                  else                  {                      nudOverdraftFees.Enabled = true;                      nudOverdraftFees.Minimum = ((SavingsBookProduct)product).OverdraftFeesMin.Value;                      nudOverdraftFees.Maximum = ((SavingsBookProduct)product).OverdraftFeesMax.Value;                      lbOverdraftFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                          "Min "' ((SavingsBookProduct)product).OverdraftFeesMin.GetFormatedValue(product.Currency.UseCents)'                          "Max "' ((SavingsBookProduct)product).OverdraftFeesMax.GetFormatedValue(product.Currency.UseCents)'                          product.Currency.Code);                  }                    // Agio fees                  nudAgioFees.DecimalPlaces = 4;                  nudAgioFees.Increment = 0.0001m;                  if (((SavingsBookProduct)product).AgioFees.HasValue)                  {                      nudAgioFees.Enabled = false;                      nudAgioFees.Minimum = (decimal)((SavingsBookProduct)product).AgioFees.Value * 100;                      nudAgioFees.Maximum = (decimal)((SavingsBookProduct)product).AgioFees.Value * 100;                      lbAgioFeesMinMax.Text = string.Format("{0} {1}"' ((SavingsBookProduct)product).AgioFees * 100' "%");                  }                  else                  {                      nudAgioFees.Enabled = true;                      nudAgioFees.Minimum = (decimal)((SavingsBookProduct)product).AgioFeesMin.Value * 100;                      nudAgioFees.Maximum = (decimal)((SavingsBookProduct)product).AgioFeesMax.Value * 100;                      lbAgioFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                          "Min "' ((SavingsBookProduct)product).AgioFeesMin * 100'                          "Max "' ((SavingsBookProduct)product).AgioFeesMax * 100' "%");                  }                    //Reopen fees                  nudReopenFees.DecimalPlaces = 0;                  nudReopenFees.Increment = 1;                    if (((SavingsBookProduct)product).ReopenFees.HasValue)                  {                      nudReopenFees.Enabled = false;                      nudReopenFees.Minimum = ((SavingsBookProduct)product).ReopenFees.Value;                      nudReopenFees.Maximum = ((SavingsBookProduct)product).ReopenFees.Value;                      lbReopenFeesMinMax.Text = string.Format("{0} {1}"'                                                               ((SavingsBookProduct)product).ReopenFees.GetFormatedValue(product.Currency.UseCents)'                                                               product.Currency.Code);                  }                  else                  {                      nudReopenFees.Enabled = true;                      nudReopenFees.Minimum = ((SavingsBookProduct)product).ReopenFeesMin.Value;                      nudReopenFees.Maximum = ((SavingsBookProduct)product).ReopenFeesMax.Value;                      lbReopenFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                                                               "Min "' ((SavingsBookProduct)product).ReopenFeesMin.GetFormatedValue(product.Currency.UseCents)'                                                               "Max "' ((SavingsBookProduct)product).ReopenFeesMax.GetFormatedValue(product.Currency.UseCents)'                                                               product.Currency.Code);                  }                    if (((SavingsBookProduct)product).UseTermDeposit)                  {                      nudNumberOfPeriods.Enabled = true;                      btSearchContract2.Enabled = true;                      cmbRollover2.Enabled = true;                      nudNumberOfPeriods.Minimum = (decimal)((SavingsBookProduct)product).TermDepositPeriodMin;                      nudNumberOfPeriods.Maximum = (decimal)((SavingsBookProduct)product).TermDepositPeriodMax;                      nudNumberOfPeriods.Value = nudNumberOfPeriods.Minimum;                      tbTargetAccount2.ResetText();                  }                }
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,DisplaySavingProduct,The following statement contains a magic number: if (product is SavingsBookProduct)              {                  gbDepositInterest.Visible = false;                  gbInterest.Visible = true;                    lbWithdrawFees.Visible = true;                  nudWithdrawFees.Visible = true;                  lbWithdrawFeesMinMax.Visible = true;                    lbEntryFees.Visible = true;                  nudEntryFees.Visible = true;                  lbEntryFeesMinMax.Visible = true;                    lbTransferFees.Visible = true;                  nudTransferFees.Visible = true;                  nudIbtFee.Visible = true;                  lbTransferFeesMinMax.Visible = true;                    lbDepositFees.Visible = true;                  nudDepositFees.Visible = true;                  lbDepositFeesMinMax.Visible = true;                    lbChequeDepositFees.Visible = true;                  nudChequeDepositFees.Visible = true;                  lblChequeDepositFeesMinMax.Visible = true;                    lbCloseFees.Visible = true;                  nudCloseFees.Visible = true;                  lbCloseFeesMinMax.Visible = true;                    lbManagementFees.Visible = true;                  nudManagementFees.Visible = true;                  lbManagementFeesMinMax.Visible = true;                    lbOverdraftFees.Visible = true;                  nudOverdraftFees.Visible = true;                  lbOverdraftFeesMinMax.Visible = true;                    lbAgioFees.Visible = true;                  nudAgioFees.Visible = true;                  lbAgioFeesMinMax.Visible = true;                    lbReopenFees.Visible = true;                  nudReopenFees.Visible = true;                  lbReopenFeesMinMax.Visible = true;                    lbInterestAccrualValue.Text = MultiLanguageStrings.GetString(Ressource.FrmAddSavingProduct' ((SavingsBookProduct)product).InterestBase + ".Text");                  lbInterestPostingValue.Text = MultiLanguageStrings.GetString(Ressource.FrmAddSavingProduct' ((SavingsBookProduct)product).InterestFrequency + ".Text");                  lbInterestBasedOnValue.Text = ((SavingsBookProduct)product).CalculAmountBase.HasValue ? MultiLanguageStrings.GetString(Ressource.FrmAddSavingProduct' ((SavingsBookProduct)product).CalculAmountBase + ".Text") : "------";                    savingDepositToolStripMenuItem.Enabled = true;                  savingWithdrawToolStripMenuItem.Enabled = true;                  savingTransferToolStripMenuItem.Enabled = true;                    // entry fees                  nudEntryFees.DecimalPlaces = 0;                  nudEntryFees.Increment = 1;                  if (((SavingsBookProduct)product).EntryFees.HasValue)                  {                      nudEntryFees.Enabled = false;                      nudEntryFees.Minimum = ((SavingsBookProduct)product).EntryFees.Value;                      nudEntryFees.Maximum = ((SavingsBookProduct)product).EntryFees.Value;                      lbEntryFeesMinMax.Text = string.Format("{0} {1}"' ((SavingsBookProduct)product).EntryFees.GetFormatedValue(product.Currency.UseCents)' product.Currency.Code);                  }                  else                  {                      nudEntryFees.Enabled = true;                      nudEntryFees.Minimum = ((SavingsBookProduct)product).EntryFeesMin.Value;                      nudEntryFees.Maximum = ((SavingsBookProduct)product).EntryFeesMax.Value;                      lbEntryFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                          "Min "' ((SavingsBookProduct)product).EntryFeesMin.GetFormatedValue(product.Currency.UseCents)'                          "Max "' ((SavingsBookProduct)product).EntryFeesMax.GetFormatedValue(product.Currency.UseCents)'                          product.Currency.Code);                  }                    // withdraw fees                  if (((SavingsBookProduct)product).WithdrawFeesType == OSavingsFeesType.Flat)                  {                      nudWithdrawFees.DecimalPlaces = 0;                      nudWithdrawFees.Increment = 1;                      if (((SavingsBookProduct)product).FlatWithdrawFees.HasValue)                      {                          nudWithdrawFees.Enabled = false;                          nudWithdrawFees.Minimum = ((SavingsBookProduct)product).FlatWithdrawFees.Value;                          nudWithdrawFees.Maximum = ((SavingsBookProduct)product).FlatWithdrawFees.Value;                          lbWithdrawFeesMinMax.Text = string.Format("{0} {1}"' ((SavingsBookProduct)product).FlatWithdrawFees.GetFormatedValue(product.Currency.UseCents)' product.Currency.Code);                      }                      else                      {                          nudWithdrawFees.Enabled = true;                          nudWithdrawFees.Minimum = ((SavingsBookProduct)product).FlatWithdrawFeesMin.Value;                          nudWithdrawFees.Maximum = ((SavingsBookProduct)product).FlatWithdrawFeesMax.Value;                          lbWithdrawFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                              "Min "' ((SavingsBookProduct)product).FlatWithdrawFeesMin.GetFormatedValue(product.Currency.UseCents)'                              "Max "' ((SavingsBookProduct)product).FlatWithdrawFeesMax.GetFormatedValue(product.Currency.UseCents)'                              product.Currency.Code);                      }                  }                  else                  {                      nudWithdrawFees.DecimalPlaces = 4;                      nudWithdrawFees.Increment = 0.0001m;                      if (((SavingsBookProduct)product).RateWithdrawFees.HasValue)                      {                          nudWithdrawFees.Enabled = false;                          nudWithdrawFees.Minimum = (decimal)((SavingsBookProduct)product).RateWithdrawFees.Value * 100;                          nudWithdrawFees.Maximum = (decimal)((SavingsBookProduct)product).RateWithdrawFees.Value * 100;                          lbWithdrawFeesMinMax.Text = string.Format("{0} {1}"' (((SavingsBookProduct)product).RateWithdrawFees * 100)' "%");                      }                      else                      {                          nudWithdrawFees.Enabled = true;                          nudWithdrawFees.Minimum = (decimal)((SavingsBookProduct)product).RateWithdrawFeesMin.Value * 100;                          nudWithdrawFees.Maximum = (decimal)((SavingsBookProduct)product).RateWithdrawFeesMax.Value * 100;                          lbWithdrawFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                              "Min "' (((SavingsBookProduct)product).RateWithdrawFeesMin * 100)'                              "Max "' (((SavingsBookProduct)product).RateWithdrawFeesMax * 100)'                              "%");                      }                  }                    // Inter-branch tansfer fee                  SavingsBookProduct p = (SavingsBookProduct)product;                  Fee fee = p.InterBranchTransferFee;                  nudIbtFee.DecimalPlaces = fee.IsFlat ? 0 : 2;                  nudIbtFee.Increment = fee.IsFlat ? 1 : 0.01m;                  nudIbtFee.Enabled = !fee.Value.HasValue;                  nudIbtFee.Minimum = fee.GetMin();                  nudIbtFee.Maximum = fee.GetMax();                  if (fee.IsRange)                  {                      string min = fee.GetMinFormatted(p.Currency);                      string max = fee.GetMaxFormatted(p.Currency);                      const string mask = "Min {0}\r\nMax {1}";                      lblIbtFeeMinMax.Text = string.Format(mask' min' max);                  }                  else                  {                      lblIbtFeeMinMax.Text = fee.GetValueFormatted(p.Currency);                  }                    if (((SavingsBookProduct)product).TransferFeesType == OSavingsFeesType.Flat)                  {                      nudTransferFees.DecimalPlaces = 0;                      nudTransferFees.Increment = 1;                      if (((SavingsBookProduct)product).FlatTransferFees.HasValue)                      {                          nudTransferFees.Enabled = false;                          nudTransferFees.Minimum = ((SavingsBookProduct)product).FlatTransferFees.Value;                          nudTransferFees.Maximum = ((SavingsBookProduct)product).FlatTransferFees.Value;                          lbTransferFeesMinMax.Text = string.Format("{0} {1}"' ((SavingsBookProduct)product).FlatTransferFees.GetFormatedValue(product.Currency.UseCents)' product.Currency.Code);                      }                      else                      {                          nudTransferFees.Enabled = true;                          nudTransferFees.Minimum = ((SavingsBookProduct)product).FlatTransferFeesMin.Value;                          nudTransferFees.Maximum = ((SavingsBookProduct)product).FlatTransferFeesMax.Value;                          lbTransferFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                              "Min "' ((SavingsBookProduct)product).FlatTransferFeesMin.GetFormatedValue(product.Currency.UseCents)'                              "Max "' ((SavingsBookProduct)product).FlatTransferFeesMax.GetFormatedValue(product.Currency.UseCents)'                              product.Currency.Code);                      }                  }                  else                  {                      nudTransferFees.DecimalPlaces = 4;                      nudTransferFees.Increment = 0.0001m;                      if (((SavingsBookProduct)product).RateTransferFees.HasValue)                      {                          nudTransferFees.Enabled = false;                          nudTransferFees.Minimum = (decimal)((SavingsBookProduct)product).RateTransferFees.Value * 100;                          nudTransferFees.Maximum = (decimal)((SavingsBookProduct)product).RateTransferFees.Value * 100;                          lbTransferFeesMinMax.Text = string.Format("{0} {1}"' (((SavingsBookProduct)product).RateTransferFees * 100)' "%");                      }                      else                      {                          nudTransferFees.Enabled = true;                          nudTransferFees.Minimum = (decimal)((SavingsBookProduct)product).RateTransferFeesMin.Value * 100;                          nudTransferFees.Maximum = (decimal)((SavingsBookProduct)product).RateTransferFeesMax.Value * 100;                          lbTransferFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                              "Min "' (((SavingsBookProduct)product).RateTransferFeesMin * 100)'                              "Max "' (((SavingsBookProduct)product).RateTransferFeesMax * 100)'                              "%");                      }                  }                    //Cash Deposit fees                  nudDepositFees.DecimalPlaces = 0;                  nudDepositFees.Increment = 1;                  if (((SavingsBookProduct)product).DepositFees.HasValue)                  {                      nudDepositFees.Enabled = false;                      nudDepositFees.Minimum = ((SavingsBookProduct)product).DepositFees.Value;                      nudDepositFees.Maximum = ((SavingsBookProduct)product).DepositFees.Value;                      lbDepositFeesMinMax.Text = string.Format("{0} {1}"'                                                               ((SavingsBookProduct)product).DepositFees.GetFormatedValue(product.Currency.UseCents)'                                                               product.Currency.Code);                  }                  else                  {                      nudDepositFees.Enabled = true;                      nudDepositFees.Minimum = ((SavingsBookProduct)product).DepositFeesMin.Value;                      nudDepositFees.Maximum = ((SavingsBookProduct)product).DepositFeesMax.Value;                      lbDepositFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                                                               "Min "' ((SavingsBookProduct)product).DepositFeesMin.GetFormatedValue(product.Currency.UseCents)'                                                               "Max "' ((SavingsBookProduct)product).DepositFeesMax.GetFormatedValue(product.Currency.UseCents)'                                                               product.Currency.Code);                  }                    //Cheque Deposit fees                  nudChequeDepositFees.DecimalPlaces = 0;                  nudChequeDepositFees.Increment = 1;                  if (((SavingsBookProduct)product).ChequeDepositFees.HasValue)                  {                      nudChequeDepositFees.Enabled = false;                      nudChequeDepositFees.Maximum = ((SavingsBookProduct)product).ChequeDepositFees.Value;                      nudChequeDepositFees.Minimum = ((SavingsBookProduct)product).ChequeDepositFees.Value;                      lblChequeDepositFeesMinMax.Text = string.Format("{0} {1}"'                                                               ((SavingsBookProduct)product).ChequeDepositFees.GetFormatedValue(product.Currency.UseCents)'                                                               product.Currency.Code);                  }                  else                  {                      nudChequeDepositFees.Enabled = true;                      nudChequeDepositFees.Minimum = ((SavingsBookProduct)product).ChequeDepositFeesMin.Value;                      nudChequeDepositFees.Maximum = ((SavingsBookProduct)product).ChequeDepositFeesMax.Value;                      lblChequeDepositFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                                                               "Min "' ((SavingsBookProduct)product).ChequeDepositFeesMin.GetFormatedValue(product.Currency.UseCents)'                                                               "Max "' ((SavingsBookProduct)product).ChequeDepositFeesMax.GetFormatedValue(product.Currency.UseCents)'                                                               product.Currency.Code);                  }                    // Close fees                  nudCloseFees.DecimalPlaces = 0;                  nudCloseFees.Increment = 1;                  if (((SavingsBookProduct)product).CloseFees.HasValue)                  {                      nudCloseFees.Enabled = false;                      nudCloseFees.Minimum = ((SavingsBookProduct)product).CloseFees.Value;                      nudCloseFees.Maximum = ((SavingsBookProduct)product).CloseFees.Value;                      lbCloseFeesMinMax.Text = string.Format("{0} {1}"'                          ((SavingsBookProduct)product).CloseFees.GetFormatedValue(product.Currency.UseCents)' product.Currency.Code);                  }                  else                  {                      nudCloseFees.Enabled = true;                      nudCloseFees.Minimum = ((SavingsBookProduct)product).CloseFeesMin.Value;                      nudCloseFees.Maximum = ((SavingsBookProduct)product).CloseFeesMax.Value;                      lbCloseFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                          "Min "' ((SavingsBookProduct)product).CloseFeesMin.GetFormatedValue(product.Currency.UseCents)'                          "Max "' ((SavingsBookProduct)product).CloseFeesMax.GetFormatedValue(product.Currency.UseCents)'                          product.Currency.Code);                  }                    // Management fees                  nudManagementFees.DecimalPlaces = 0;                  nudManagementFees.Increment = 1;                  if (((SavingsBookProduct)product).ManagementFees.HasValue)                  {                      nudManagementFees.Enabled = false;                      nudManagementFees.Minimum = ((SavingsBookProduct)product).ManagementFees.Value;                      nudManagementFees.Maximum = ((SavingsBookProduct)product).ManagementFees.Value;                      lbManagementFeesMinMax.Text = string.Format("{0} {1}"'                          ((SavingsBookProduct)product).ManagementFees.GetFormatedValue(product.Currency.UseCents)' product.Currency.Code);                  }                  else                  {                      nudManagementFees.Enabled = true;                      nudManagementFees.Minimum = ((SavingsBookProduct)product).ManagementFeesMin.Value;                      nudManagementFees.Maximum = ((SavingsBookProduct)product).ManagementFeesMax.Value;                      lbManagementFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                          "Min "' ((SavingsBookProduct)product).ManagementFeesMin.GetFormatedValue(product.Currency.UseCents)'                          "Max "' ((SavingsBookProduct)product).ManagementFeesMax.GetFormatedValue(product.Currency.UseCents)'                          product.Currency.Code);                  }                    // Overdraft fees                  nudOverdraftFees.DecimalPlaces = 0;                  nudOverdraftFees.Increment = 1;                  if (((SavingsBookProduct)product).OverdraftFees.HasValue)                  {                      nudOverdraftFees.Enabled = false;                      nudOverdraftFees.Minimum = ((SavingsBookProduct)product).OverdraftFees.Value;                      nudOverdraftFees.Maximum = ((SavingsBookProduct)product).OverdraftFees.Value;                      lbOverdraftFeesMinMax.Text = string.Format("{0} {1}"'                          ((SavingsBookProduct)product).OverdraftFees.GetFormatedValue(product.Currency.UseCents)' product.Currency.Code);                  }                  else                  {                      nudOverdraftFees.Enabled = true;                      nudOverdraftFees.Minimum = ((SavingsBookProduct)product).OverdraftFeesMin.Value;                      nudOverdraftFees.Maximum = ((SavingsBookProduct)product).OverdraftFeesMax.Value;                      lbOverdraftFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                          "Min "' ((SavingsBookProduct)product).OverdraftFeesMin.GetFormatedValue(product.Currency.UseCents)'                          "Max "' ((SavingsBookProduct)product).OverdraftFeesMax.GetFormatedValue(product.Currency.UseCents)'                          product.Currency.Code);                  }                    // Agio fees                  nudAgioFees.DecimalPlaces = 4;                  nudAgioFees.Increment = 0.0001m;                  if (((SavingsBookProduct)product).AgioFees.HasValue)                  {                      nudAgioFees.Enabled = false;                      nudAgioFees.Minimum = (decimal)((SavingsBookProduct)product).AgioFees.Value * 100;                      nudAgioFees.Maximum = (decimal)((SavingsBookProduct)product).AgioFees.Value * 100;                      lbAgioFeesMinMax.Text = string.Format("{0} {1}"' ((SavingsBookProduct)product).AgioFees * 100' "%");                  }                  else                  {                      nudAgioFees.Enabled = true;                      nudAgioFees.Minimum = (decimal)((SavingsBookProduct)product).AgioFeesMin.Value * 100;                      nudAgioFees.Maximum = (decimal)((SavingsBookProduct)product).AgioFeesMax.Value * 100;                      lbAgioFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                          "Min "' ((SavingsBookProduct)product).AgioFeesMin * 100'                          "Max "' ((SavingsBookProduct)product).AgioFeesMax * 100' "%");                  }                    //Reopen fees                  nudReopenFees.DecimalPlaces = 0;                  nudReopenFees.Increment = 1;                    if (((SavingsBookProduct)product).ReopenFees.HasValue)                  {                      nudReopenFees.Enabled = false;                      nudReopenFees.Minimum = ((SavingsBookProduct)product).ReopenFees.Value;                      nudReopenFees.Maximum = ((SavingsBookProduct)product).ReopenFees.Value;                      lbReopenFeesMinMax.Text = string.Format("{0} {1}"'                                                               ((SavingsBookProduct)product).ReopenFees.GetFormatedValue(product.Currency.UseCents)'                                                               product.Currency.Code);                  }                  else                  {                      nudReopenFees.Enabled = true;                      nudReopenFees.Minimum = ((SavingsBookProduct)product).ReopenFeesMin.Value;                      nudReopenFees.Maximum = ((SavingsBookProduct)product).ReopenFeesMax.Value;                      lbReopenFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                                                               "Min "' ((SavingsBookProduct)product).ReopenFeesMin.GetFormatedValue(product.Currency.UseCents)'                                                               "Max "' ((SavingsBookProduct)product).ReopenFeesMax.GetFormatedValue(product.Currency.UseCents)'                                                               product.Currency.Code);                  }                    if (((SavingsBookProduct)product).UseTermDeposit)                  {                      nudNumberOfPeriods.Enabled = true;                      btSearchContract2.Enabled = true;                      cmbRollover2.Enabled = true;                      nudNumberOfPeriods.Minimum = (decimal)((SavingsBookProduct)product).TermDepositPeriodMin;                      nudNumberOfPeriods.Maximum = (decimal)((SavingsBookProduct)product).TermDepositPeriodMax;                      nudNumberOfPeriods.Value = nudNumberOfPeriods.Minimum;                      tbTargetAccount2.ResetText();                  }                }
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,DisplaySavingProduct,The following statement contains a magic number: if (product is SavingsBookProduct)              {                  gbDepositInterest.Visible = false;                  gbInterest.Visible = true;                    lbWithdrawFees.Visible = true;                  nudWithdrawFees.Visible = true;                  lbWithdrawFeesMinMax.Visible = true;                    lbEntryFees.Visible = true;                  nudEntryFees.Visible = true;                  lbEntryFeesMinMax.Visible = true;                    lbTransferFees.Visible = true;                  nudTransferFees.Visible = true;                  nudIbtFee.Visible = true;                  lbTransferFeesMinMax.Visible = true;                    lbDepositFees.Visible = true;                  nudDepositFees.Visible = true;                  lbDepositFeesMinMax.Visible = true;                    lbChequeDepositFees.Visible = true;                  nudChequeDepositFees.Visible = true;                  lblChequeDepositFeesMinMax.Visible = true;                    lbCloseFees.Visible = true;                  nudCloseFees.Visible = true;                  lbCloseFeesMinMax.Visible = true;                    lbManagementFees.Visible = true;                  nudManagementFees.Visible = true;                  lbManagementFeesMinMax.Visible = true;                    lbOverdraftFees.Visible = true;                  nudOverdraftFees.Visible = true;                  lbOverdraftFeesMinMax.Visible = true;                    lbAgioFees.Visible = true;                  nudAgioFees.Visible = true;                  lbAgioFeesMinMax.Visible = true;                    lbReopenFees.Visible = true;                  nudReopenFees.Visible = true;                  lbReopenFeesMinMax.Visible = true;                    lbInterestAccrualValue.Text = MultiLanguageStrings.GetString(Ressource.FrmAddSavingProduct' ((SavingsBookProduct)product).InterestBase + ".Text");                  lbInterestPostingValue.Text = MultiLanguageStrings.GetString(Ressource.FrmAddSavingProduct' ((SavingsBookProduct)product).InterestFrequency + ".Text");                  lbInterestBasedOnValue.Text = ((SavingsBookProduct)product).CalculAmountBase.HasValue ? MultiLanguageStrings.GetString(Ressource.FrmAddSavingProduct' ((SavingsBookProduct)product).CalculAmountBase + ".Text") : "------";                    savingDepositToolStripMenuItem.Enabled = true;                  savingWithdrawToolStripMenuItem.Enabled = true;                  savingTransferToolStripMenuItem.Enabled = true;                    // entry fees                  nudEntryFees.DecimalPlaces = 0;                  nudEntryFees.Increment = 1;                  if (((SavingsBookProduct)product).EntryFees.HasValue)                  {                      nudEntryFees.Enabled = false;                      nudEntryFees.Minimum = ((SavingsBookProduct)product).EntryFees.Value;                      nudEntryFees.Maximum = ((SavingsBookProduct)product).EntryFees.Value;                      lbEntryFeesMinMax.Text = string.Format("{0} {1}"' ((SavingsBookProduct)product).EntryFees.GetFormatedValue(product.Currency.UseCents)' product.Currency.Code);                  }                  else                  {                      nudEntryFees.Enabled = true;                      nudEntryFees.Minimum = ((SavingsBookProduct)product).EntryFeesMin.Value;                      nudEntryFees.Maximum = ((SavingsBookProduct)product).EntryFeesMax.Value;                      lbEntryFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                          "Min "' ((SavingsBookProduct)product).EntryFeesMin.GetFormatedValue(product.Currency.UseCents)'                          "Max "' ((SavingsBookProduct)product).EntryFeesMax.GetFormatedValue(product.Currency.UseCents)'                          product.Currency.Code);                  }                    // withdraw fees                  if (((SavingsBookProduct)product).WithdrawFeesType == OSavingsFeesType.Flat)                  {                      nudWithdrawFees.DecimalPlaces = 0;                      nudWithdrawFees.Increment = 1;                      if (((SavingsBookProduct)product).FlatWithdrawFees.HasValue)                      {                          nudWithdrawFees.Enabled = false;                          nudWithdrawFees.Minimum = ((SavingsBookProduct)product).FlatWithdrawFees.Value;                          nudWithdrawFees.Maximum = ((SavingsBookProduct)product).FlatWithdrawFees.Value;                          lbWithdrawFeesMinMax.Text = string.Format("{0} {1}"' ((SavingsBookProduct)product).FlatWithdrawFees.GetFormatedValue(product.Currency.UseCents)' product.Currency.Code);                      }                      else                      {                          nudWithdrawFees.Enabled = true;                          nudWithdrawFees.Minimum = ((SavingsBookProduct)product).FlatWithdrawFeesMin.Value;                          nudWithdrawFees.Maximum = ((SavingsBookProduct)product).FlatWithdrawFeesMax.Value;                          lbWithdrawFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                              "Min "' ((SavingsBookProduct)product).FlatWithdrawFeesMin.GetFormatedValue(product.Currency.UseCents)'                              "Max "' ((SavingsBookProduct)product).FlatWithdrawFeesMax.GetFormatedValue(product.Currency.UseCents)'                              product.Currency.Code);                      }                  }                  else                  {                      nudWithdrawFees.DecimalPlaces = 4;                      nudWithdrawFees.Increment = 0.0001m;                      if (((SavingsBookProduct)product).RateWithdrawFees.HasValue)                      {                          nudWithdrawFees.Enabled = false;                          nudWithdrawFees.Minimum = (decimal)((SavingsBookProduct)product).RateWithdrawFees.Value * 100;                          nudWithdrawFees.Maximum = (decimal)((SavingsBookProduct)product).RateWithdrawFees.Value * 100;                          lbWithdrawFeesMinMax.Text = string.Format("{0} {1}"' (((SavingsBookProduct)product).RateWithdrawFees * 100)' "%");                      }                      else                      {                          nudWithdrawFees.Enabled = true;                          nudWithdrawFees.Minimum = (decimal)((SavingsBookProduct)product).RateWithdrawFeesMin.Value * 100;                          nudWithdrawFees.Maximum = (decimal)((SavingsBookProduct)product).RateWithdrawFeesMax.Value * 100;                          lbWithdrawFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                              "Min "' (((SavingsBookProduct)product).RateWithdrawFeesMin * 100)'                              "Max "' (((SavingsBookProduct)product).RateWithdrawFeesMax * 100)'                              "%");                      }                  }                    // Inter-branch tansfer fee                  SavingsBookProduct p = (SavingsBookProduct)product;                  Fee fee = p.InterBranchTransferFee;                  nudIbtFee.DecimalPlaces = fee.IsFlat ? 0 : 2;                  nudIbtFee.Increment = fee.IsFlat ? 1 : 0.01m;                  nudIbtFee.Enabled = !fee.Value.HasValue;                  nudIbtFee.Minimum = fee.GetMin();                  nudIbtFee.Maximum = fee.GetMax();                  if (fee.IsRange)                  {                      string min = fee.GetMinFormatted(p.Currency);                      string max = fee.GetMaxFormatted(p.Currency);                      const string mask = "Min {0}\r\nMax {1}";                      lblIbtFeeMinMax.Text = string.Format(mask' min' max);                  }                  else                  {                      lblIbtFeeMinMax.Text = fee.GetValueFormatted(p.Currency);                  }                    if (((SavingsBookProduct)product).TransferFeesType == OSavingsFeesType.Flat)                  {                      nudTransferFees.DecimalPlaces = 0;                      nudTransferFees.Increment = 1;                      if (((SavingsBookProduct)product).FlatTransferFees.HasValue)                      {                          nudTransferFees.Enabled = false;                          nudTransferFees.Minimum = ((SavingsBookProduct)product).FlatTransferFees.Value;                          nudTransferFees.Maximum = ((SavingsBookProduct)product).FlatTransferFees.Value;                          lbTransferFeesMinMax.Text = string.Format("{0} {1}"' ((SavingsBookProduct)product).FlatTransferFees.GetFormatedValue(product.Currency.UseCents)' product.Currency.Code);                      }                      else                      {                          nudTransferFees.Enabled = true;                          nudTransferFees.Minimum = ((SavingsBookProduct)product).FlatTransferFeesMin.Value;                          nudTransferFees.Maximum = ((SavingsBookProduct)product).FlatTransferFeesMax.Value;                          lbTransferFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                              "Min "' ((SavingsBookProduct)product).FlatTransferFeesMin.GetFormatedValue(product.Currency.UseCents)'                              "Max "' ((SavingsBookProduct)product).FlatTransferFeesMax.GetFormatedValue(product.Currency.UseCents)'                              product.Currency.Code);                      }                  }                  else                  {                      nudTransferFees.DecimalPlaces = 4;                      nudTransferFees.Increment = 0.0001m;                      if (((SavingsBookProduct)product).RateTransferFees.HasValue)                      {                          nudTransferFees.Enabled = false;                          nudTransferFees.Minimum = (decimal)((SavingsBookProduct)product).RateTransferFees.Value * 100;                          nudTransferFees.Maximum = (decimal)((SavingsBookProduct)product).RateTransferFees.Value * 100;                          lbTransferFeesMinMax.Text = string.Format("{0} {1}"' (((SavingsBookProduct)product).RateTransferFees * 100)' "%");                      }                      else                      {                          nudTransferFees.Enabled = true;                          nudTransferFees.Minimum = (decimal)((SavingsBookProduct)product).RateTransferFeesMin.Value * 100;                          nudTransferFees.Maximum = (decimal)((SavingsBookProduct)product).RateTransferFeesMax.Value * 100;                          lbTransferFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                              "Min "' (((SavingsBookProduct)product).RateTransferFeesMin * 100)'                              "Max "' (((SavingsBookProduct)product).RateTransferFeesMax * 100)'                              "%");                      }                  }                    //Cash Deposit fees                  nudDepositFees.DecimalPlaces = 0;                  nudDepositFees.Increment = 1;                  if (((SavingsBookProduct)product).DepositFees.HasValue)                  {                      nudDepositFees.Enabled = false;                      nudDepositFees.Minimum = ((SavingsBookProduct)product).DepositFees.Value;                      nudDepositFees.Maximum = ((SavingsBookProduct)product).DepositFees.Value;                      lbDepositFeesMinMax.Text = string.Format("{0} {1}"'                                                               ((SavingsBookProduct)product).DepositFees.GetFormatedValue(product.Currency.UseCents)'                                                               product.Currency.Code);                  }                  else                  {                      nudDepositFees.Enabled = true;                      nudDepositFees.Minimum = ((SavingsBookProduct)product).DepositFeesMin.Value;                      nudDepositFees.Maximum = ((SavingsBookProduct)product).DepositFeesMax.Value;                      lbDepositFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                                                               "Min "' ((SavingsBookProduct)product).DepositFeesMin.GetFormatedValue(product.Currency.UseCents)'                                                               "Max "' ((SavingsBookProduct)product).DepositFeesMax.GetFormatedValue(product.Currency.UseCents)'                                                               product.Currency.Code);                  }                    //Cheque Deposit fees                  nudChequeDepositFees.DecimalPlaces = 0;                  nudChequeDepositFees.Increment = 1;                  if (((SavingsBookProduct)product).ChequeDepositFees.HasValue)                  {                      nudChequeDepositFees.Enabled = false;                      nudChequeDepositFees.Maximum = ((SavingsBookProduct)product).ChequeDepositFees.Value;                      nudChequeDepositFees.Minimum = ((SavingsBookProduct)product).ChequeDepositFees.Value;                      lblChequeDepositFeesMinMax.Text = string.Format("{0} {1}"'                                                               ((SavingsBookProduct)product).ChequeDepositFees.GetFormatedValue(product.Currency.UseCents)'                                                               product.Currency.Code);                  }                  else                  {                      nudChequeDepositFees.Enabled = true;                      nudChequeDepositFees.Minimum = ((SavingsBookProduct)product).ChequeDepositFeesMin.Value;                      nudChequeDepositFees.Maximum = ((SavingsBookProduct)product).ChequeDepositFeesMax.Value;                      lblChequeDepositFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                                                               "Min "' ((SavingsBookProduct)product).ChequeDepositFeesMin.GetFormatedValue(product.Currency.UseCents)'                                                               "Max "' ((SavingsBookProduct)product).ChequeDepositFeesMax.GetFormatedValue(product.Currency.UseCents)'                                                               product.Currency.Code);                  }                    // Close fees                  nudCloseFees.DecimalPlaces = 0;                  nudCloseFees.Increment = 1;                  if (((SavingsBookProduct)product).CloseFees.HasValue)                  {                      nudCloseFees.Enabled = false;                      nudCloseFees.Minimum = ((SavingsBookProduct)product).CloseFees.Value;                      nudCloseFees.Maximum = ((SavingsBookProduct)product).CloseFees.Value;                      lbCloseFeesMinMax.Text = string.Format("{0} {1}"'                          ((SavingsBookProduct)product).CloseFees.GetFormatedValue(product.Currency.UseCents)' product.Currency.Code);                  }                  else                  {                      nudCloseFees.Enabled = true;                      nudCloseFees.Minimum = ((SavingsBookProduct)product).CloseFeesMin.Value;                      nudCloseFees.Maximum = ((SavingsBookProduct)product).CloseFeesMax.Value;                      lbCloseFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                          "Min "' ((SavingsBookProduct)product).CloseFeesMin.GetFormatedValue(product.Currency.UseCents)'                          "Max "' ((SavingsBookProduct)product).CloseFeesMax.GetFormatedValue(product.Currency.UseCents)'                          product.Currency.Code);                  }                    // Management fees                  nudManagementFees.DecimalPlaces = 0;                  nudManagementFees.Increment = 1;                  if (((SavingsBookProduct)product).ManagementFees.HasValue)                  {                      nudManagementFees.Enabled = false;                      nudManagementFees.Minimum = ((SavingsBookProduct)product).ManagementFees.Value;                      nudManagementFees.Maximum = ((SavingsBookProduct)product).ManagementFees.Value;                      lbManagementFeesMinMax.Text = string.Format("{0} {1}"'                          ((SavingsBookProduct)product).ManagementFees.GetFormatedValue(product.Currency.UseCents)' product.Currency.Code);                  }                  else                  {                      nudManagementFees.Enabled = true;                      nudManagementFees.Minimum = ((SavingsBookProduct)product).ManagementFeesMin.Value;                      nudManagementFees.Maximum = ((SavingsBookProduct)product).ManagementFeesMax.Value;                      lbManagementFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                          "Min "' ((SavingsBookProduct)product).ManagementFeesMin.GetFormatedValue(product.Currency.UseCents)'                          "Max "' ((SavingsBookProduct)product).ManagementFeesMax.GetFormatedValue(product.Currency.UseCents)'                          product.Currency.Code);                  }                    // Overdraft fees                  nudOverdraftFees.DecimalPlaces = 0;                  nudOverdraftFees.Increment = 1;                  if (((SavingsBookProduct)product).OverdraftFees.HasValue)                  {                      nudOverdraftFees.Enabled = false;                      nudOverdraftFees.Minimum = ((SavingsBookProduct)product).OverdraftFees.Value;                      nudOverdraftFees.Maximum = ((SavingsBookProduct)product).OverdraftFees.Value;                      lbOverdraftFeesMinMax.Text = string.Format("{0} {1}"'                          ((SavingsBookProduct)product).OverdraftFees.GetFormatedValue(product.Currency.UseCents)' product.Currency.Code);                  }                  else                  {                      nudOverdraftFees.Enabled = true;                      nudOverdraftFees.Minimum = ((SavingsBookProduct)product).OverdraftFeesMin.Value;                      nudOverdraftFees.Maximum = ((SavingsBookProduct)product).OverdraftFeesMax.Value;                      lbOverdraftFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                          "Min "' ((SavingsBookProduct)product).OverdraftFeesMin.GetFormatedValue(product.Currency.UseCents)'                          "Max "' ((SavingsBookProduct)product).OverdraftFeesMax.GetFormatedValue(product.Currency.UseCents)'                          product.Currency.Code);                  }                    // Agio fees                  nudAgioFees.DecimalPlaces = 4;                  nudAgioFees.Increment = 0.0001m;                  if (((SavingsBookProduct)product).AgioFees.HasValue)                  {                      nudAgioFees.Enabled = false;                      nudAgioFees.Minimum = (decimal)((SavingsBookProduct)product).AgioFees.Value * 100;                      nudAgioFees.Maximum = (decimal)((SavingsBookProduct)product).AgioFees.Value * 100;                      lbAgioFeesMinMax.Text = string.Format("{0} {1}"' ((SavingsBookProduct)product).AgioFees * 100' "%");                  }                  else                  {                      nudAgioFees.Enabled = true;                      nudAgioFees.Minimum = (decimal)((SavingsBookProduct)product).AgioFeesMin.Value * 100;                      nudAgioFees.Maximum = (decimal)((SavingsBookProduct)product).AgioFeesMax.Value * 100;                      lbAgioFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                          "Min "' ((SavingsBookProduct)product).AgioFeesMin * 100'                          "Max "' ((SavingsBookProduct)product).AgioFeesMax * 100' "%");                  }                    //Reopen fees                  nudReopenFees.DecimalPlaces = 0;                  nudReopenFees.Increment = 1;                    if (((SavingsBookProduct)product).ReopenFees.HasValue)                  {                      nudReopenFees.Enabled = false;                      nudReopenFees.Minimum = ((SavingsBookProduct)product).ReopenFees.Value;                      nudReopenFees.Maximum = ((SavingsBookProduct)product).ReopenFees.Value;                      lbReopenFeesMinMax.Text = string.Format("{0} {1}"'                                                               ((SavingsBookProduct)product).ReopenFees.GetFormatedValue(product.Currency.UseCents)'                                                               product.Currency.Code);                  }                  else                  {                      nudReopenFees.Enabled = true;                      nudReopenFees.Minimum = ((SavingsBookProduct)product).ReopenFeesMin.Value;                      nudReopenFees.Maximum = ((SavingsBookProduct)product).ReopenFeesMax.Value;                      lbReopenFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                                                               "Min "' ((SavingsBookProduct)product).ReopenFeesMin.GetFormatedValue(product.Currency.UseCents)'                                                               "Max "' ((SavingsBookProduct)product).ReopenFeesMax.GetFormatedValue(product.Currency.UseCents)'                                                               product.Currency.Code);                  }                    if (((SavingsBookProduct)product).UseTermDeposit)                  {                      nudNumberOfPeriods.Enabled = true;                      btSearchContract2.Enabled = true;                      cmbRollover2.Enabled = true;                      nudNumberOfPeriods.Minimum = (decimal)((SavingsBookProduct)product).TermDepositPeriodMin;                      nudNumberOfPeriods.Maximum = (decimal)((SavingsBookProduct)product).TermDepositPeriodMax;                      nudNumberOfPeriods.Value = nudNumberOfPeriods.Minimum;                      tbTargetAccount2.ResetText();                  }                }
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,DisplaySavingProduct,The following statement contains a magic number: if (product is SavingsBookProduct)              {                  gbDepositInterest.Visible = false;                  gbInterest.Visible = true;                    lbWithdrawFees.Visible = true;                  nudWithdrawFees.Visible = true;                  lbWithdrawFeesMinMax.Visible = true;                    lbEntryFees.Visible = true;                  nudEntryFees.Visible = true;                  lbEntryFeesMinMax.Visible = true;                    lbTransferFees.Visible = true;                  nudTransferFees.Visible = true;                  nudIbtFee.Visible = true;                  lbTransferFeesMinMax.Visible = true;                    lbDepositFees.Visible = true;                  nudDepositFees.Visible = true;                  lbDepositFeesMinMax.Visible = true;                    lbChequeDepositFees.Visible = true;                  nudChequeDepositFees.Visible = true;                  lblChequeDepositFeesMinMax.Visible = true;                    lbCloseFees.Visible = true;                  nudCloseFees.Visible = true;                  lbCloseFeesMinMax.Visible = true;                    lbManagementFees.Visible = true;                  nudManagementFees.Visible = true;                  lbManagementFeesMinMax.Visible = true;                    lbOverdraftFees.Visible = true;                  nudOverdraftFees.Visible = true;                  lbOverdraftFeesMinMax.Visible = true;                    lbAgioFees.Visible = true;                  nudAgioFees.Visible = true;                  lbAgioFeesMinMax.Visible = true;                    lbReopenFees.Visible = true;                  nudReopenFees.Visible = true;                  lbReopenFeesMinMax.Visible = true;                    lbInterestAccrualValue.Text = MultiLanguageStrings.GetString(Ressource.FrmAddSavingProduct' ((SavingsBookProduct)product).InterestBase + ".Text");                  lbInterestPostingValue.Text = MultiLanguageStrings.GetString(Ressource.FrmAddSavingProduct' ((SavingsBookProduct)product).InterestFrequency + ".Text");                  lbInterestBasedOnValue.Text = ((SavingsBookProduct)product).CalculAmountBase.HasValue ? MultiLanguageStrings.GetString(Ressource.FrmAddSavingProduct' ((SavingsBookProduct)product).CalculAmountBase + ".Text") : "------";                    savingDepositToolStripMenuItem.Enabled = true;                  savingWithdrawToolStripMenuItem.Enabled = true;                  savingTransferToolStripMenuItem.Enabled = true;                    // entry fees                  nudEntryFees.DecimalPlaces = 0;                  nudEntryFees.Increment = 1;                  if (((SavingsBookProduct)product).EntryFees.HasValue)                  {                      nudEntryFees.Enabled = false;                      nudEntryFees.Minimum = ((SavingsBookProduct)product).EntryFees.Value;                      nudEntryFees.Maximum = ((SavingsBookProduct)product).EntryFees.Value;                      lbEntryFeesMinMax.Text = string.Format("{0} {1}"' ((SavingsBookProduct)product).EntryFees.GetFormatedValue(product.Currency.UseCents)' product.Currency.Code);                  }                  else                  {                      nudEntryFees.Enabled = true;                      nudEntryFees.Minimum = ((SavingsBookProduct)product).EntryFeesMin.Value;                      nudEntryFees.Maximum = ((SavingsBookProduct)product).EntryFeesMax.Value;                      lbEntryFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                          "Min "' ((SavingsBookProduct)product).EntryFeesMin.GetFormatedValue(product.Currency.UseCents)'                          "Max "' ((SavingsBookProduct)product).EntryFeesMax.GetFormatedValue(product.Currency.UseCents)'                          product.Currency.Code);                  }                    // withdraw fees                  if (((SavingsBookProduct)product).WithdrawFeesType == OSavingsFeesType.Flat)                  {                      nudWithdrawFees.DecimalPlaces = 0;                      nudWithdrawFees.Increment = 1;                      if (((SavingsBookProduct)product).FlatWithdrawFees.HasValue)                      {                          nudWithdrawFees.Enabled = false;                          nudWithdrawFees.Minimum = ((SavingsBookProduct)product).FlatWithdrawFees.Value;                          nudWithdrawFees.Maximum = ((SavingsBookProduct)product).FlatWithdrawFees.Value;                          lbWithdrawFeesMinMax.Text = string.Format("{0} {1}"' ((SavingsBookProduct)product).FlatWithdrawFees.GetFormatedValue(product.Currency.UseCents)' product.Currency.Code);                      }                      else                      {                          nudWithdrawFees.Enabled = true;                          nudWithdrawFees.Minimum = ((SavingsBookProduct)product).FlatWithdrawFeesMin.Value;                          nudWithdrawFees.Maximum = ((SavingsBookProduct)product).FlatWithdrawFeesMax.Value;                          lbWithdrawFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                              "Min "' ((SavingsBookProduct)product).FlatWithdrawFeesMin.GetFormatedValue(product.Currency.UseCents)'                              "Max "' ((SavingsBookProduct)product).FlatWithdrawFeesMax.GetFormatedValue(product.Currency.UseCents)'                              product.Currency.Code);                      }                  }                  else                  {                      nudWithdrawFees.DecimalPlaces = 4;                      nudWithdrawFees.Increment = 0.0001m;                      if (((SavingsBookProduct)product).RateWithdrawFees.HasValue)                      {                          nudWithdrawFees.Enabled = false;                          nudWithdrawFees.Minimum = (decimal)((SavingsBookProduct)product).RateWithdrawFees.Value * 100;                          nudWithdrawFees.Maximum = (decimal)((SavingsBookProduct)product).RateWithdrawFees.Value * 100;                          lbWithdrawFeesMinMax.Text = string.Format("{0} {1}"' (((SavingsBookProduct)product).RateWithdrawFees * 100)' "%");                      }                      else                      {                          nudWithdrawFees.Enabled = true;                          nudWithdrawFees.Minimum = (decimal)((SavingsBookProduct)product).RateWithdrawFeesMin.Value * 100;                          nudWithdrawFees.Maximum = (decimal)((SavingsBookProduct)product).RateWithdrawFeesMax.Value * 100;                          lbWithdrawFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                              "Min "' (((SavingsBookProduct)product).RateWithdrawFeesMin * 100)'                              "Max "' (((SavingsBookProduct)product).RateWithdrawFeesMax * 100)'                              "%");                      }                  }                    // Inter-branch tansfer fee                  SavingsBookProduct p = (SavingsBookProduct)product;                  Fee fee = p.InterBranchTransferFee;                  nudIbtFee.DecimalPlaces = fee.IsFlat ? 0 : 2;                  nudIbtFee.Increment = fee.IsFlat ? 1 : 0.01m;                  nudIbtFee.Enabled = !fee.Value.HasValue;                  nudIbtFee.Minimum = fee.GetMin();                  nudIbtFee.Maximum = fee.GetMax();                  if (fee.IsRange)                  {                      string min = fee.GetMinFormatted(p.Currency);                      string max = fee.GetMaxFormatted(p.Currency);                      const string mask = "Min {0}\r\nMax {1}";                      lblIbtFeeMinMax.Text = string.Format(mask' min' max);                  }                  else                  {                      lblIbtFeeMinMax.Text = fee.GetValueFormatted(p.Currency);                  }                    if (((SavingsBookProduct)product).TransferFeesType == OSavingsFeesType.Flat)                  {                      nudTransferFees.DecimalPlaces = 0;                      nudTransferFees.Increment = 1;                      if (((SavingsBookProduct)product).FlatTransferFees.HasValue)                      {                          nudTransferFees.Enabled = false;                          nudTransferFees.Minimum = ((SavingsBookProduct)product).FlatTransferFees.Value;                          nudTransferFees.Maximum = ((SavingsBookProduct)product).FlatTransferFees.Value;                          lbTransferFeesMinMax.Text = string.Format("{0} {1}"' ((SavingsBookProduct)product).FlatTransferFees.GetFormatedValue(product.Currency.UseCents)' product.Currency.Code);                      }                      else                      {                          nudTransferFees.Enabled = true;                          nudTransferFees.Minimum = ((SavingsBookProduct)product).FlatTransferFeesMin.Value;                          nudTransferFees.Maximum = ((SavingsBookProduct)product).FlatTransferFeesMax.Value;                          lbTransferFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                              "Min "' ((SavingsBookProduct)product).FlatTransferFeesMin.GetFormatedValue(product.Currency.UseCents)'                              "Max "' ((SavingsBookProduct)product).FlatTransferFeesMax.GetFormatedValue(product.Currency.UseCents)'                              product.Currency.Code);                      }                  }                  else                  {                      nudTransferFees.DecimalPlaces = 4;                      nudTransferFees.Increment = 0.0001m;                      if (((SavingsBookProduct)product).RateTransferFees.HasValue)                      {                          nudTransferFees.Enabled = false;                          nudTransferFees.Minimum = (decimal)((SavingsBookProduct)product).RateTransferFees.Value * 100;                          nudTransferFees.Maximum = (decimal)((SavingsBookProduct)product).RateTransferFees.Value * 100;                          lbTransferFeesMinMax.Text = string.Format("{0} {1}"' (((SavingsBookProduct)product).RateTransferFees * 100)' "%");                      }                      else                      {                          nudTransferFees.Enabled = true;                          nudTransferFees.Minimum = (decimal)((SavingsBookProduct)product).RateTransferFeesMin.Value * 100;                          nudTransferFees.Maximum = (decimal)((SavingsBookProduct)product).RateTransferFeesMax.Value * 100;                          lbTransferFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                              "Min "' (((SavingsBookProduct)product).RateTransferFeesMin * 100)'                              "Max "' (((SavingsBookProduct)product).RateTransferFeesMax * 100)'                              "%");                      }                  }                    //Cash Deposit fees                  nudDepositFees.DecimalPlaces = 0;                  nudDepositFees.Increment = 1;                  if (((SavingsBookProduct)product).DepositFees.HasValue)                  {                      nudDepositFees.Enabled = false;                      nudDepositFees.Minimum = ((SavingsBookProduct)product).DepositFees.Value;                      nudDepositFees.Maximum = ((SavingsBookProduct)product).DepositFees.Value;                      lbDepositFeesMinMax.Text = string.Format("{0} {1}"'                                                               ((SavingsBookProduct)product).DepositFees.GetFormatedValue(product.Currency.UseCents)'                                                               product.Currency.Code);                  }                  else                  {                      nudDepositFees.Enabled = true;                      nudDepositFees.Minimum = ((SavingsBookProduct)product).DepositFeesMin.Value;                      nudDepositFees.Maximum = ((SavingsBookProduct)product).DepositFeesMax.Value;                      lbDepositFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                                                               "Min "' ((SavingsBookProduct)product).DepositFeesMin.GetFormatedValue(product.Currency.UseCents)'                                                               "Max "' ((SavingsBookProduct)product).DepositFeesMax.GetFormatedValue(product.Currency.UseCents)'                                                               product.Currency.Code);                  }                    //Cheque Deposit fees                  nudChequeDepositFees.DecimalPlaces = 0;                  nudChequeDepositFees.Increment = 1;                  if (((SavingsBookProduct)product).ChequeDepositFees.HasValue)                  {                      nudChequeDepositFees.Enabled = false;                      nudChequeDepositFees.Maximum = ((SavingsBookProduct)product).ChequeDepositFees.Value;                      nudChequeDepositFees.Minimum = ((SavingsBookProduct)product).ChequeDepositFees.Value;                      lblChequeDepositFeesMinMax.Text = string.Format("{0} {1}"'                                                               ((SavingsBookProduct)product).ChequeDepositFees.GetFormatedValue(product.Currency.UseCents)'                                                               product.Currency.Code);                  }                  else                  {                      nudChequeDepositFees.Enabled = true;                      nudChequeDepositFees.Minimum = ((SavingsBookProduct)product).ChequeDepositFeesMin.Value;                      nudChequeDepositFees.Maximum = ((SavingsBookProduct)product).ChequeDepositFeesMax.Value;                      lblChequeDepositFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                                                               "Min "' ((SavingsBookProduct)product).ChequeDepositFeesMin.GetFormatedValue(product.Currency.UseCents)'                                                               "Max "' ((SavingsBookProduct)product).ChequeDepositFeesMax.GetFormatedValue(product.Currency.UseCents)'                                                               product.Currency.Code);                  }                    // Close fees                  nudCloseFees.DecimalPlaces = 0;                  nudCloseFees.Increment = 1;                  if (((SavingsBookProduct)product).CloseFees.HasValue)                  {                      nudCloseFees.Enabled = false;                      nudCloseFees.Minimum = ((SavingsBookProduct)product).CloseFees.Value;                      nudCloseFees.Maximum = ((SavingsBookProduct)product).CloseFees.Value;                      lbCloseFeesMinMax.Text = string.Format("{0} {1}"'                          ((SavingsBookProduct)product).CloseFees.GetFormatedValue(product.Currency.UseCents)' product.Currency.Code);                  }                  else                  {                      nudCloseFees.Enabled = true;                      nudCloseFees.Minimum = ((SavingsBookProduct)product).CloseFeesMin.Value;                      nudCloseFees.Maximum = ((SavingsBookProduct)product).CloseFeesMax.Value;                      lbCloseFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                          "Min "' ((SavingsBookProduct)product).CloseFeesMin.GetFormatedValue(product.Currency.UseCents)'                          "Max "' ((SavingsBookProduct)product).CloseFeesMax.GetFormatedValue(product.Currency.UseCents)'                          product.Currency.Code);                  }                    // Management fees                  nudManagementFees.DecimalPlaces = 0;                  nudManagementFees.Increment = 1;                  if (((SavingsBookProduct)product).ManagementFees.HasValue)                  {                      nudManagementFees.Enabled = false;                      nudManagementFees.Minimum = ((SavingsBookProduct)product).ManagementFees.Value;                      nudManagementFees.Maximum = ((SavingsBookProduct)product).ManagementFees.Value;                      lbManagementFeesMinMax.Text = string.Format("{0} {1}"'                          ((SavingsBookProduct)product).ManagementFees.GetFormatedValue(product.Currency.UseCents)' product.Currency.Code);                  }                  else                  {                      nudManagementFees.Enabled = true;                      nudManagementFees.Minimum = ((SavingsBookProduct)product).ManagementFeesMin.Value;                      nudManagementFees.Maximum = ((SavingsBookProduct)product).ManagementFeesMax.Value;                      lbManagementFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                          "Min "' ((SavingsBookProduct)product).ManagementFeesMin.GetFormatedValue(product.Currency.UseCents)'                          "Max "' ((SavingsBookProduct)product).ManagementFeesMax.GetFormatedValue(product.Currency.UseCents)'                          product.Currency.Code);                  }                    // Overdraft fees                  nudOverdraftFees.DecimalPlaces = 0;                  nudOverdraftFees.Increment = 1;                  if (((SavingsBookProduct)product).OverdraftFees.HasValue)                  {                      nudOverdraftFees.Enabled = false;                      nudOverdraftFees.Minimum = ((SavingsBookProduct)product).OverdraftFees.Value;                      nudOverdraftFees.Maximum = ((SavingsBookProduct)product).OverdraftFees.Value;                      lbOverdraftFeesMinMax.Text = string.Format("{0} {1}"'                          ((SavingsBookProduct)product).OverdraftFees.GetFormatedValue(product.Currency.UseCents)' product.Currency.Code);                  }                  else                  {                      nudOverdraftFees.Enabled = true;                      nudOverdraftFees.Minimum = ((SavingsBookProduct)product).OverdraftFeesMin.Value;                      nudOverdraftFees.Maximum = ((SavingsBookProduct)product).OverdraftFeesMax.Value;                      lbOverdraftFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                          "Min "' ((SavingsBookProduct)product).OverdraftFeesMin.GetFormatedValue(product.Currency.UseCents)'                          "Max "' ((SavingsBookProduct)product).OverdraftFeesMax.GetFormatedValue(product.Currency.UseCents)'                          product.Currency.Code);                  }                    // Agio fees                  nudAgioFees.DecimalPlaces = 4;                  nudAgioFees.Increment = 0.0001m;                  if (((SavingsBookProduct)product).AgioFees.HasValue)                  {                      nudAgioFees.Enabled = false;                      nudAgioFees.Minimum = (decimal)((SavingsBookProduct)product).AgioFees.Value * 100;                      nudAgioFees.Maximum = (decimal)((SavingsBookProduct)product).AgioFees.Value * 100;                      lbAgioFeesMinMax.Text = string.Format("{0} {1}"' ((SavingsBookProduct)product).AgioFees * 100' "%");                  }                  else                  {                      nudAgioFees.Enabled = true;                      nudAgioFees.Minimum = (decimal)((SavingsBookProduct)product).AgioFeesMin.Value * 100;                      nudAgioFees.Maximum = (decimal)((SavingsBookProduct)product).AgioFeesMax.Value * 100;                      lbAgioFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                          "Min "' ((SavingsBookProduct)product).AgioFeesMin * 100'                          "Max "' ((SavingsBookProduct)product).AgioFeesMax * 100' "%");                  }                    //Reopen fees                  nudReopenFees.DecimalPlaces = 0;                  nudReopenFees.Increment = 1;                    if (((SavingsBookProduct)product).ReopenFees.HasValue)                  {                      nudReopenFees.Enabled = false;                      nudReopenFees.Minimum = ((SavingsBookProduct)product).ReopenFees.Value;                      nudReopenFees.Maximum = ((SavingsBookProduct)product).ReopenFees.Value;                      lbReopenFeesMinMax.Text = string.Format("{0} {1}"'                                                               ((SavingsBookProduct)product).ReopenFees.GetFormatedValue(product.Currency.UseCents)'                                                               product.Currency.Code);                  }                  else                  {                      nudReopenFees.Enabled = true;                      nudReopenFees.Minimum = ((SavingsBookProduct)product).ReopenFeesMin.Value;                      nudReopenFees.Maximum = ((SavingsBookProduct)product).ReopenFeesMax.Value;                      lbReopenFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                                                               "Min "' ((SavingsBookProduct)product).ReopenFeesMin.GetFormatedValue(product.Currency.UseCents)'                                                               "Max "' ((SavingsBookProduct)product).ReopenFeesMax.GetFormatedValue(product.Currency.UseCents)'                                                               product.Currency.Code);                  }                    if (((SavingsBookProduct)product).UseTermDeposit)                  {                      nudNumberOfPeriods.Enabled = true;                      btSearchContract2.Enabled = true;                      cmbRollover2.Enabled = true;                      nudNumberOfPeriods.Minimum = (decimal)((SavingsBookProduct)product).TermDepositPeriodMin;                      nudNumberOfPeriods.Maximum = (decimal)((SavingsBookProduct)product).TermDepositPeriodMax;                      nudNumberOfPeriods.Value = nudNumberOfPeriods.Minimum;                      tbTargetAccount2.ResetText();                  }                }
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,DisplaySavingProduct,The following statement contains a magic number: if (product is SavingsBookProduct)              {                  gbDepositInterest.Visible = false;                  gbInterest.Visible = true;                    lbWithdrawFees.Visible = true;                  nudWithdrawFees.Visible = true;                  lbWithdrawFeesMinMax.Visible = true;                    lbEntryFees.Visible = true;                  nudEntryFees.Visible = true;                  lbEntryFeesMinMax.Visible = true;                    lbTransferFees.Visible = true;                  nudTransferFees.Visible = true;                  nudIbtFee.Visible = true;                  lbTransferFeesMinMax.Visible = true;                    lbDepositFees.Visible = true;                  nudDepositFees.Visible = true;                  lbDepositFeesMinMax.Visible = true;                    lbChequeDepositFees.Visible = true;                  nudChequeDepositFees.Visible = true;                  lblChequeDepositFeesMinMax.Visible = true;                    lbCloseFees.Visible = true;                  nudCloseFees.Visible = true;                  lbCloseFeesMinMax.Visible = true;                    lbManagementFees.Visible = true;                  nudManagementFees.Visible = true;                  lbManagementFeesMinMax.Visible = true;                    lbOverdraftFees.Visible = true;                  nudOverdraftFees.Visible = true;                  lbOverdraftFeesMinMax.Visible = true;                    lbAgioFees.Visible = true;                  nudAgioFees.Visible = true;                  lbAgioFeesMinMax.Visible = true;                    lbReopenFees.Visible = true;                  nudReopenFees.Visible = true;                  lbReopenFeesMinMax.Visible = true;                    lbInterestAccrualValue.Text = MultiLanguageStrings.GetString(Ressource.FrmAddSavingProduct' ((SavingsBookProduct)product).InterestBase + ".Text");                  lbInterestPostingValue.Text = MultiLanguageStrings.GetString(Ressource.FrmAddSavingProduct' ((SavingsBookProduct)product).InterestFrequency + ".Text");                  lbInterestBasedOnValue.Text = ((SavingsBookProduct)product).CalculAmountBase.HasValue ? MultiLanguageStrings.GetString(Ressource.FrmAddSavingProduct' ((SavingsBookProduct)product).CalculAmountBase + ".Text") : "------";                    savingDepositToolStripMenuItem.Enabled = true;                  savingWithdrawToolStripMenuItem.Enabled = true;                  savingTransferToolStripMenuItem.Enabled = true;                    // entry fees                  nudEntryFees.DecimalPlaces = 0;                  nudEntryFees.Increment = 1;                  if (((SavingsBookProduct)product).EntryFees.HasValue)                  {                      nudEntryFees.Enabled = false;                      nudEntryFees.Minimum = ((SavingsBookProduct)product).EntryFees.Value;                      nudEntryFees.Maximum = ((SavingsBookProduct)product).EntryFees.Value;                      lbEntryFeesMinMax.Text = string.Format("{0} {1}"' ((SavingsBookProduct)product).EntryFees.GetFormatedValue(product.Currency.UseCents)' product.Currency.Code);                  }                  else                  {                      nudEntryFees.Enabled = true;                      nudEntryFees.Minimum = ((SavingsBookProduct)product).EntryFeesMin.Value;                      nudEntryFees.Maximum = ((SavingsBookProduct)product).EntryFeesMax.Value;                      lbEntryFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                          "Min "' ((SavingsBookProduct)product).EntryFeesMin.GetFormatedValue(product.Currency.UseCents)'                          "Max "' ((SavingsBookProduct)product).EntryFeesMax.GetFormatedValue(product.Currency.UseCents)'                          product.Currency.Code);                  }                    // withdraw fees                  if (((SavingsBookProduct)product).WithdrawFeesType == OSavingsFeesType.Flat)                  {                      nudWithdrawFees.DecimalPlaces = 0;                      nudWithdrawFees.Increment = 1;                      if (((SavingsBookProduct)product).FlatWithdrawFees.HasValue)                      {                          nudWithdrawFees.Enabled = false;                          nudWithdrawFees.Minimum = ((SavingsBookProduct)product).FlatWithdrawFees.Value;                          nudWithdrawFees.Maximum = ((SavingsBookProduct)product).FlatWithdrawFees.Value;                          lbWithdrawFeesMinMax.Text = string.Format("{0} {1}"' ((SavingsBookProduct)product).FlatWithdrawFees.GetFormatedValue(product.Currency.UseCents)' product.Currency.Code);                      }                      else                      {                          nudWithdrawFees.Enabled = true;                          nudWithdrawFees.Minimum = ((SavingsBookProduct)product).FlatWithdrawFeesMin.Value;                          nudWithdrawFees.Maximum = ((SavingsBookProduct)product).FlatWithdrawFeesMax.Value;                          lbWithdrawFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                              "Min "' ((SavingsBookProduct)product).FlatWithdrawFeesMin.GetFormatedValue(product.Currency.UseCents)'                              "Max "' ((SavingsBookProduct)product).FlatWithdrawFeesMax.GetFormatedValue(product.Currency.UseCents)'                              product.Currency.Code);                      }                  }                  else                  {                      nudWithdrawFees.DecimalPlaces = 4;                      nudWithdrawFees.Increment = 0.0001m;                      if (((SavingsBookProduct)product).RateWithdrawFees.HasValue)                      {                          nudWithdrawFees.Enabled = false;                          nudWithdrawFees.Minimum = (decimal)((SavingsBookProduct)product).RateWithdrawFees.Value * 100;                          nudWithdrawFees.Maximum = (decimal)((SavingsBookProduct)product).RateWithdrawFees.Value * 100;                          lbWithdrawFeesMinMax.Text = string.Format("{0} {1}"' (((SavingsBookProduct)product).RateWithdrawFees * 100)' "%");                      }                      else                      {                          nudWithdrawFees.Enabled = true;                          nudWithdrawFees.Minimum = (decimal)((SavingsBookProduct)product).RateWithdrawFeesMin.Value * 100;                          nudWithdrawFees.Maximum = (decimal)((SavingsBookProduct)product).RateWithdrawFeesMax.Value * 100;                          lbWithdrawFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                              "Min "' (((SavingsBookProduct)product).RateWithdrawFeesMin * 100)'                              "Max "' (((SavingsBookProduct)product).RateWithdrawFeesMax * 100)'                              "%");                      }                  }                    // Inter-branch tansfer fee                  SavingsBookProduct p = (SavingsBookProduct)product;                  Fee fee = p.InterBranchTransferFee;                  nudIbtFee.DecimalPlaces = fee.IsFlat ? 0 : 2;                  nudIbtFee.Increment = fee.IsFlat ? 1 : 0.01m;                  nudIbtFee.Enabled = !fee.Value.HasValue;                  nudIbtFee.Minimum = fee.GetMin();                  nudIbtFee.Maximum = fee.GetMax();                  if (fee.IsRange)                  {                      string min = fee.GetMinFormatted(p.Currency);                      string max = fee.GetMaxFormatted(p.Currency);                      const string mask = "Min {0}\r\nMax {1}";                      lblIbtFeeMinMax.Text = string.Format(mask' min' max);                  }                  else                  {                      lblIbtFeeMinMax.Text = fee.GetValueFormatted(p.Currency);                  }                    if (((SavingsBookProduct)product).TransferFeesType == OSavingsFeesType.Flat)                  {                      nudTransferFees.DecimalPlaces = 0;                      nudTransferFees.Increment = 1;                      if (((SavingsBookProduct)product).FlatTransferFees.HasValue)                      {                          nudTransferFees.Enabled = false;                          nudTransferFees.Minimum = ((SavingsBookProduct)product).FlatTransferFees.Value;                          nudTransferFees.Maximum = ((SavingsBookProduct)product).FlatTransferFees.Value;                          lbTransferFeesMinMax.Text = string.Format("{0} {1}"' ((SavingsBookProduct)product).FlatTransferFees.GetFormatedValue(product.Currency.UseCents)' product.Currency.Code);                      }                      else                      {                          nudTransferFees.Enabled = true;                          nudTransferFees.Minimum = ((SavingsBookProduct)product).FlatTransferFeesMin.Value;                          nudTransferFees.Maximum = ((SavingsBookProduct)product).FlatTransferFeesMax.Value;                          lbTransferFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                              "Min "' ((SavingsBookProduct)product).FlatTransferFeesMin.GetFormatedValue(product.Currency.UseCents)'                              "Max "' ((SavingsBookProduct)product).FlatTransferFeesMax.GetFormatedValue(product.Currency.UseCents)'                              product.Currency.Code);                      }                  }                  else                  {                      nudTransferFees.DecimalPlaces = 4;                      nudTransferFees.Increment = 0.0001m;                      if (((SavingsBookProduct)product).RateTransferFees.HasValue)                      {                          nudTransferFees.Enabled = false;                          nudTransferFees.Minimum = (decimal)((SavingsBookProduct)product).RateTransferFees.Value * 100;                          nudTransferFees.Maximum = (decimal)((SavingsBookProduct)product).RateTransferFees.Value * 100;                          lbTransferFeesMinMax.Text = string.Format("{0} {1}"' (((SavingsBookProduct)product).RateTransferFees * 100)' "%");                      }                      else                      {                          nudTransferFees.Enabled = true;                          nudTransferFees.Minimum = (decimal)((SavingsBookProduct)product).RateTransferFeesMin.Value * 100;                          nudTransferFees.Maximum = (decimal)((SavingsBookProduct)product).RateTransferFeesMax.Value * 100;                          lbTransferFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                              "Min "' (((SavingsBookProduct)product).RateTransferFeesMin * 100)'                              "Max "' (((SavingsBookProduct)product).RateTransferFeesMax * 100)'                              "%");                      }                  }                    //Cash Deposit fees                  nudDepositFees.DecimalPlaces = 0;                  nudDepositFees.Increment = 1;                  if (((SavingsBookProduct)product).DepositFees.HasValue)                  {                      nudDepositFees.Enabled = false;                      nudDepositFees.Minimum = ((SavingsBookProduct)product).DepositFees.Value;                      nudDepositFees.Maximum = ((SavingsBookProduct)product).DepositFees.Value;                      lbDepositFeesMinMax.Text = string.Format("{0} {1}"'                                                               ((SavingsBookProduct)product).DepositFees.GetFormatedValue(product.Currency.UseCents)'                                                               product.Currency.Code);                  }                  else                  {                      nudDepositFees.Enabled = true;                      nudDepositFees.Minimum = ((SavingsBookProduct)product).DepositFeesMin.Value;                      nudDepositFees.Maximum = ((SavingsBookProduct)product).DepositFeesMax.Value;                      lbDepositFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                                                               "Min "' ((SavingsBookProduct)product).DepositFeesMin.GetFormatedValue(product.Currency.UseCents)'                                                               "Max "' ((SavingsBookProduct)product).DepositFeesMax.GetFormatedValue(product.Currency.UseCents)'                                                               product.Currency.Code);                  }                    //Cheque Deposit fees                  nudChequeDepositFees.DecimalPlaces = 0;                  nudChequeDepositFees.Increment = 1;                  if (((SavingsBookProduct)product).ChequeDepositFees.HasValue)                  {                      nudChequeDepositFees.Enabled = false;                      nudChequeDepositFees.Maximum = ((SavingsBookProduct)product).ChequeDepositFees.Value;                      nudChequeDepositFees.Minimum = ((SavingsBookProduct)product).ChequeDepositFees.Value;                      lblChequeDepositFeesMinMax.Text = string.Format("{0} {1}"'                                                               ((SavingsBookProduct)product).ChequeDepositFees.GetFormatedValue(product.Currency.UseCents)'                                                               product.Currency.Code);                  }                  else                  {                      nudChequeDepositFees.Enabled = true;                      nudChequeDepositFees.Minimum = ((SavingsBookProduct)product).ChequeDepositFeesMin.Value;                      nudChequeDepositFees.Maximum = ((SavingsBookProduct)product).ChequeDepositFeesMax.Value;                      lblChequeDepositFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                                                               "Min "' ((SavingsBookProduct)product).ChequeDepositFeesMin.GetFormatedValue(product.Currency.UseCents)'                                                               "Max "' ((SavingsBookProduct)product).ChequeDepositFeesMax.GetFormatedValue(product.Currency.UseCents)'                                                               product.Currency.Code);                  }                    // Close fees                  nudCloseFees.DecimalPlaces = 0;                  nudCloseFees.Increment = 1;                  if (((SavingsBookProduct)product).CloseFees.HasValue)                  {                      nudCloseFees.Enabled = false;                      nudCloseFees.Minimum = ((SavingsBookProduct)product).CloseFees.Value;                      nudCloseFees.Maximum = ((SavingsBookProduct)product).CloseFees.Value;                      lbCloseFeesMinMax.Text = string.Format("{0} {1}"'                          ((SavingsBookProduct)product).CloseFees.GetFormatedValue(product.Currency.UseCents)' product.Currency.Code);                  }                  else                  {                      nudCloseFees.Enabled = true;                      nudCloseFees.Minimum = ((SavingsBookProduct)product).CloseFeesMin.Value;                      nudCloseFees.Maximum = ((SavingsBookProduct)product).CloseFeesMax.Value;                      lbCloseFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                          "Min "' ((SavingsBookProduct)product).CloseFeesMin.GetFormatedValue(product.Currency.UseCents)'                          "Max "' ((SavingsBookProduct)product).CloseFeesMax.GetFormatedValue(product.Currency.UseCents)'                          product.Currency.Code);                  }                    // Management fees                  nudManagementFees.DecimalPlaces = 0;                  nudManagementFees.Increment = 1;                  if (((SavingsBookProduct)product).ManagementFees.HasValue)                  {                      nudManagementFees.Enabled = false;                      nudManagementFees.Minimum = ((SavingsBookProduct)product).ManagementFees.Value;                      nudManagementFees.Maximum = ((SavingsBookProduct)product).ManagementFees.Value;                      lbManagementFeesMinMax.Text = string.Format("{0} {1}"'                          ((SavingsBookProduct)product).ManagementFees.GetFormatedValue(product.Currency.UseCents)' product.Currency.Code);                  }                  else                  {                      nudManagementFees.Enabled = true;                      nudManagementFees.Minimum = ((SavingsBookProduct)product).ManagementFeesMin.Value;                      nudManagementFees.Maximum = ((SavingsBookProduct)product).ManagementFeesMax.Value;                      lbManagementFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                          "Min "' ((SavingsBookProduct)product).ManagementFeesMin.GetFormatedValue(product.Currency.UseCents)'                          "Max "' ((SavingsBookProduct)product).ManagementFeesMax.GetFormatedValue(product.Currency.UseCents)'                          product.Currency.Code);                  }                    // Overdraft fees                  nudOverdraftFees.DecimalPlaces = 0;                  nudOverdraftFees.Increment = 1;                  if (((SavingsBookProduct)product).OverdraftFees.HasValue)                  {                      nudOverdraftFees.Enabled = false;                      nudOverdraftFees.Minimum = ((SavingsBookProduct)product).OverdraftFees.Value;                      nudOverdraftFees.Maximum = ((SavingsBookProduct)product).OverdraftFees.Value;                      lbOverdraftFeesMinMax.Text = string.Format("{0} {1}"'                          ((SavingsBookProduct)product).OverdraftFees.GetFormatedValue(product.Currency.UseCents)' product.Currency.Code);                  }                  else                  {                      nudOverdraftFees.Enabled = true;                      nudOverdraftFees.Minimum = ((SavingsBookProduct)product).OverdraftFeesMin.Value;                      nudOverdraftFees.Maximum = ((SavingsBookProduct)product).OverdraftFeesMax.Value;                      lbOverdraftFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                          "Min "' ((SavingsBookProduct)product).OverdraftFeesMin.GetFormatedValue(product.Currency.UseCents)'                          "Max "' ((SavingsBookProduct)product).OverdraftFeesMax.GetFormatedValue(product.Currency.UseCents)'                          product.Currency.Code);                  }                    // Agio fees                  nudAgioFees.DecimalPlaces = 4;                  nudAgioFees.Increment = 0.0001m;                  if (((SavingsBookProduct)product).AgioFees.HasValue)                  {                      nudAgioFees.Enabled = false;                      nudAgioFees.Minimum = (decimal)((SavingsBookProduct)product).AgioFees.Value * 100;                      nudAgioFees.Maximum = (decimal)((SavingsBookProduct)product).AgioFees.Value * 100;                      lbAgioFeesMinMax.Text = string.Format("{0} {1}"' ((SavingsBookProduct)product).AgioFees * 100' "%");                  }                  else                  {                      nudAgioFees.Enabled = true;                      nudAgioFees.Minimum = (decimal)((SavingsBookProduct)product).AgioFeesMin.Value * 100;                      nudAgioFees.Maximum = (decimal)((SavingsBookProduct)product).AgioFeesMax.Value * 100;                      lbAgioFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                          "Min "' ((SavingsBookProduct)product).AgioFeesMin * 100'                          "Max "' ((SavingsBookProduct)product).AgioFeesMax * 100' "%");                  }                    //Reopen fees                  nudReopenFees.DecimalPlaces = 0;                  nudReopenFees.Increment = 1;                    if (((SavingsBookProduct)product).ReopenFees.HasValue)                  {                      nudReopenFees.Enabled = false;                      nudReopenFees.Minimum = ((SavingsBookProduct)product).ReopenFees.Value;                      nudReopenFees.Maximum = ((SavingsBookProduct)product).ReopenFees.Value;                      lbReopenFeesMinMax.Text = string.Format("{0} {1}"'                                                               ((SavingsBookProduct)product).ReopenFees.GetFormatedValue(product.Currency.UseCents)'                                                               product.Currency.Code);                  }                  else                  {                      nudReopenFees.Enabled = true;                      nudReopenFees.Minimum = ((SavingsBookProduct)product).ReopenFeesMin.Value;                      nudReopenFees.Maximum = ((SavingsBookProduct)product).ReopenFeesMax.Value;                      lbReopenFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                                                               "Min "' ((SavingsBookProduct)product).ReopenFeesMin.GetFormatedValue(product.Currency.UseCents)'                                                               "Max "' ((SavingsBookProduct)product).ReopenFeesMax.GetFormatedValue(product.Currency.UseCents)'                                                               product.Currency.Code);                  }                    if (((SavingsBookProduct)product).UseTermDeposit)                  {                      nudNumberOfPeriods.Enabled = true;                      btSearchContract2.Enabled = true;                      cmbRollover2.Enabled = true;                      nudNumberOfPeriods.Minimum = (decimal)((SavingsBookProduct)product).TermDepositPeriodMin;                      nudNumberOfPeriods.Maximum = (decimal)((SavingsBookProduct)product).TermDepositPeriodMax;                      nudNumberOfPeriods.Value = nudNumberOfPeriods.Minimum;                      tbTargetAccount2.ResetText();                  }                }
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,DisplaySavingProduct,The following statement contains a magic number: if (product is SavingsBookProduct)              {                  gbDepositInterest.Visible = false;                  gbInterest.Visible = true;                    lbWithdrawFees.Visible = true;                  nudWithdrawFees.Visible = true;                  lbWithdrawFeesMinMax.Visible = true;                    lbEntryFees.Visible = true;                  nudEntryFees.Visible = true;                  lbEntryFeesMinMax.Visible = true;                    lbTransferFees.Visible = true;                  nudTransferFees.Visible = true;                  nudIbtFee.Visible = true;                  lbTransferFeesMinMax.Visible = true;                    lbDepositFees.Visible = true;                  nudDepositFees.Visible = true;                  lbDepositFeesMinMax.Visible = true;                    lbChequeDepositFees.Visible = true;                  nudChequeDepositFees.Visible = true;                  lblChequeDepositFeesMinMax.Visible = true;                    lbCloseFees.Visible = true;                  nudCloseFees.Visible = true;                  lbCloseFeesMinMax.Visible = true;                    lbManagementFees.Visible = true;                  nudManagementFees.Visible = true;                  lbManagementFeesMinMax.Visible = true;                    lbOverdraftFees.Visible = true;                  nudOverdraftFees.Visible = true;                  lbOverdraftFeesMinMax.Visible = true;                    lbAgioFees.Visible = true;                  nudAgioFees.Visible = true;                  lbAgioFeesMinMax.Visible = true;                    lbReopenFees.Visible = true;                  nudReopenFees.Visible = true;                  lbReopenFeesMinMax.Visible = true;                    lbInterestAccrualValue.Text = MultiLanguageStrings.GetString(Ressource.FrmAddSavingProduct' ((SavingsBookProduct)product).InterestBase + ".Text");                  lbInterestPostingValue.Text = MultiLanguageStrings.GetString(Ressource.FrmAddSavingProduct' ((SavingsBookProduct)product).InterestFrequency + ".Text");                  lbInterestBasedOnValue.Text = ((SavingsBookProduct)product).CalculAmountBase.HasValue ? MultiLanguageStrings.GetString(Ressource.FrmAddSavingProduct' ((SavingsBookProduct)product).CalculAmountBase + ".Text") : "------";                    savingDepositToolStripMenuItem.Enabled = true;                  savingWithdrawToolStripMenuItem.Enabled = true;                  savingTransferToolStripMenuItem.Enabled = true;                    // entry fees                  nudEntryFees.DecimalPlaces = 0;                  nudEntryFees.Increment = 1;                  if (((SavingsBookProduct)product).EntryFees.HasValue)                  {                      nudEntryFees.Enabled = false;                      nudEntryFees.Minimum = ((SavingsBookProduct)product).EntryFees.Value;                      nudEntryFees.Maximum = ((SavingsBookProduct)product).EntryFees.Value;                      lbEntryFeesMinMax.Text = string.Format("{0} {1}"' ((SavingsBookProduct)product).EntryFees.GetFormatedValue(product.Currency.UseCents)' product.Currency.Code);                  }                  else                  {                      nudEntryFees.Enabled = true;                      nudEntryFees.Minimum = ((SavingsBookProduct)product).EntryFeesMin.Value;                      nudEntryFees.Maximum = ((SavingsBookProduct)product).EntryFeesMax.Value;                      lbEntryFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                          "Min "' ((SavingsBookProduct)product).EntryFeesMin.GetFormatedValue(product.Currency.UseCents)'                          "Max "' ((SavingsBookProduct)product).EntryFeesMax.GetFormatedValue(product.Currency.UseCents)'                          product.Currency.Code);                  }                    // withdraw fees                  if (((SavingsBookProduct)product).WithdrawFeesType == OSavingsFeesType.Flat)                  {                      nudWithdrawFees.DecimalPlaces = 0;                      nudWithdrawFees.Increment = 1;                      if (((SavingsBookProduct)product).FlatWithdrawFees.HasValue)                      {                          nudWithdrawFees.Enabled = false;                          nudWithdrawFees.Minimum = ((SavingsBookProduct)product).FlatWithdrawFees.Value;                          nudWithdrawFees.Maximum = ((SavingsBookProduct)product).FlatWithdrawFees.Value;                          lbWithdrawFeesMinMax.Text = string.Format("{0} {1}"' ((SavingsBookProduct)product).FlatWithdrawFees.GetFormatedValue(product.Currency.UseCents)' product.Currency.Code);                      }                      else                      {                          nudWithdrawFees.Enabled = true;                          nudWithdrawFees.Minimum = ((SavingsBookProduct)product).FlatWithdrawFeesMin.Value;                          nudWithdrawFees.Maximum = ((SavingsBookProduct)product).FlatWithdrawFeesMax.Value;                          lbWithdrawFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                              "Min "' ((SavingsBookProduct)product).FlatWithdrawFeesMin.GetFormatedValue(product.Currency.UseCents)'                              "Max "' ((SavingsBookProduct)product).FlatWithdrawFeesMax.GetFormatedValue(product.Currency.UseCents)'                              product.Currency.Code);                      }                  }                  else                  {                      nudWithdrawFees.DecimalPlaces = 4;                      nudWithdrawFees.Increment = 0.0001m;                      if (((SavingsBookProduct)product).RateWithdrawFees.HasValue)                      {                          nudWithdrawFees.Enabled = false;                          nudWithdrawFees.Minimum = (decimal)((SavingsBookProduct)product).RateWithdrawFees.Value * 100;                          nudWithdrawFees.Maximum = (decimal)((SavingsBookProduct)product).RateWithdrawFees.Value * 100;                          lbWithdrawFeesMinMax.Text = string.Format("{0} {1}"' (((SavingsBookProduct)product).RateWithdrawFees * 100)' "%");                      }                      else                      {                          nudWithdrawFees.Enabled = true;                          nudWithdrawFees.Minimum = (decimal)((SavingsBookProduct)product).RateWithdrawFeesMin.Value * 100;                          nudWithdrawFees.Maximum = (decimal)((SavingsBookProduct)product).RateWithdrawFeesMax.Value * 100;                          lbWithdrawFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                              "Min "' (((SavingsBookProduct)product).RateWithdrawFeesMin * 100)'                              "Max "' (((SavingsBookProduct)product).RateWithdrawFeesMax * 100)'                              "%");                      }                  }                    // Inter-branch tansfer fee                  SavingsBookProduct p = (SavingsBookProduct)product;                  Fee fee = p.InterBranchTransferFee;                  nudIbtFee.DecimalPlaces = fee.IsFlat ? 0 : 2;                  nudIbtFee.Increment = fee.IsFlat ? 1 : 0.01m;                  nudIbtFee.Enabled = !fee.Value.HasValue;                  nudIbtFee.Minimum = fee.GetMin();                  nudIbtFee.Maximum = fee.GetMax();                  if (fee.IsRange)                  {                      string min = fee.GetMinFormatted(p.Currency);                      string max = fee.GetMaxFormatted(p.Currency);                      const string mask = "Min {0}\r\nMax {1}";                      lblIbtFeeMinMax.Text = string.Format(mask' min' max);                  }                  else                  {                      lblIbtFeeMinMax.Text = fee.GetValueFormatted(p.Currency);                  }                    if (((SavingsBookProduct)product).TransferFeesType == OSavingsFeesType.Flat)                  {                      nudTransferFees.DecimalPlaces = 0;                      nudTransferFees.Increment = 1;                      if (((SavingsBookProduct)product).FlatTransferFees.HasValue)                      {                          nudTransferFees.Enabled = false;                          nudTransferFees.Minimum = ((SavingsBookProduct)product).FlatTransferFees.Value;                          nudTransferFees.Maximum = ((SavingsBookProduct)product).FlatTransferFees.Value;                          lbTransferFeesMinMax.Text = string.Format("{0} {1}"' ((SavingsBookProduct)product).FlatTransferFees.GetFormatedValue(product.Currency.UseCents)' product.Currency.Code);                      }                      else                      {                          nudTransferFees.Enabled = true;                          nudTransferFees.Minimum = ((SavingsBookProduct)product).FlatTransferFeesMin.Value;                          nudTransferFees.Maximum = ((SavingsBookProduct)product).FlatTransferFeesMax.Value;                          lbTransferFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                              "Min "' ((SavingsBookProduct)product).FlatTransferFeesMin.GetFormatedValue(product.Currency.UseCents)'                              "Max "' ((SavingsBookProduct)product).FlatTransferFeesMax.GetFormatedValue(product.Currency.UseCents)'                              product.Currency.Code);                      }                  }                  else                  {                      nudTransferFees.DecimalPlaces = 4;                      nudTransferFees.Increment = 0.0001m;                      if (((SavingsBookProduct)product).RateTransferFees.HasValue)                      {                          nudTransferFees.Enabled = false;                          nudTransferFees.Minimum = (decimal)((SavingsBookProduct)product).RateTransferFees.Value * 100;                          nudTransferFees.Maximum = (decimal)((SavingsBookProduct)product).RateTransferFees.Value * 100;                          lbTransferFeesMinMax.Text = string.Format("{0} {1}"' (((SavingsBookProduct)product).RateTransferFees * 100)' "%");                      }                      else                      {                          nudTransferFees.Enabled = true;                          nudTransferFees.Minimum = (decimal)((SavingsBookProduct)product).RateTransferFeesMin.Value * 100;                          nudTransferFees.Maximum = (decimal)((SavingsBookProduct)product).RateTransferFeesMax.Value * 100;                          lbTransferFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                              "Min "' (((SavingsBookProduct)product).RateTransferFeesMin * 100)'                              "Max "' (((SavingsBookProduct)product).RateTransferFeesMax * 100)'                              "%");                      }                  }                    //Cash Deposit fees                  nudDepositFees.DecimalPlaces = 0;                  nudDepositFees.Increment = 1;                  if (((SavingsBookProduct)product).DepositFees.HasValue)                  {                      nudDepositFees.Enabled = false;                      nudDepositFees.Minimum = ((SavingsBookProduct)product).DepositFees.Value;                      nudDepositFees.Maximum = ((SavingsBookProduct)product).DepositFees.Value;                      lbDepositFeesMinMax.Text = string.Format("{0} {1}"'                                                               ((SavingsBookProduct)product).DepositFees.GetFormatedValue(product.Currency.UseCents)'                                                               product.Currency.Code);                  }                  else                  {                      nudDepositFees.Enabled = true;                      nudDepositFees.Minimum = ((SavingsBookProduct)product).DepositFeesMin.Value;                      nudDepositFees.Maximum = ((SavingsBookProduct)product).DepositFeesMax.Value;                      lbDepositFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                                                               "Min "' ((SavingsBookProduct)product).DepositFeesMin.GetFormatedValue(product.Currency.UseCents)'                                                               "Max "' ((SavingsBookProduct)product).DepositFeesMax.GetFormatedValue(product.Currency.UseCents)'                                                               product.Currency.Code);                  }                    //Cheque Deposit fees                  nudChequeDepositFees.DecimalPlaces = 0;                  nudChequeDepositFees.Increment = 1;                  if (((SavingsBookProduct)product).ChequeDepositFees.HasValue)                  {                      nudChequeDepositFees.Enabled = false;                      nudChequeDepositFees.Maximum = ((SavingsBookProduct)product).ChequeDepositFees.Value;                      nudChequeDepositFees.Minimum = ((SavingsBookProduct)product).ChequeDepositFees.Value;                      lblChequeDepositFeesMinMax.Text = string.Format("{0} {1}"'                                                               ((SavingsBookProduct)product).ChequeDepositFees.GetFormatedValue(product.Currency.UseCents)'                                                               product.Currency.Code);                  }                  else                  {                      nudChequeDepositFees.Enabled = true;                      nudChequeDepositFees.Minimum = ((SavingsBookProduct)product).ChequeDepositFeesMin.Value;                      nudChequeDepositFees.Maximum = ((SavingsBookProduct)product).ChequeDepositFeesMax.Value;                      lblChequeDepositFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                                                               "Min "' ((SavingsBookProduct)product).ChequeDepositFeesMin.GetFormatedValue(product.Currency.UseCents)'                                                               "Max "' ((SavingsBookProduct)product).ChequeDepositFeesMax.GetFormatedValue(product.Currency.UseCents)'                                                               product.Currency.Code);                  }                    // Close fees                  nudCloseFees.DecimalPlaces = 0;                  nudCloseFees.Increment = 1;                  if (((SavingsBookProduct)product).CloseFees.HasValue)                  {                      nudCloseFees.Enabled = false;                      nudCloseFees.Minimum = ((SavingsBookProduct)product).CloseFees.Value;                      nudCloseFees.Maximum = ((SavingsBookProduct)product).CloseFees.Value;                      lbCloseFeesMinMax.Text = string.Format("{0} {1}"'                          ((SavingsBookProduct)product).CloseFees.GetFormatedValue(product.Currency.UseCents)' product.Currency.Code);                  }                  else                  {                      nudCloseFees.Enabled = true;                      nudCloseFees.Minimum = ((SavingsBookProduct)product).CloseFeesMin.Value;                      nudCloseFees.Maximum = ((SavingsBookProduct)product).CloseFeesMax.Value;                      lbCloseFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                          "Min "' ((SavingsBookProduct)product).CloseFeesMin.GetFormatedValue(product.Currency.UseCents)'                          "Max "' ((SavingsBookProduct)product).CloseFeesMax.GetFormatedValue(product.Currency.UseCents)'                          product.Currency.Code);                  }                    // Management fees                  nudManagementFees.DecimalPlaces = 0;                  nudManagementFees.Increment = 1;                  if (((SavingsBookProduct)product).ManagementFees.HasValue)                  {                      nudManagementFees.Enabled = false;                      nudManagementFees.Minimum = ((SavingsBookProduct)product).ManagementFees.Value;                      nudManagementFees.Maximum = ((SavingsBookProduct)product).ManagementFees.Value;                      lbManagementFeesMinMax.Text = string.Format("{0} {1}"'                          ((SavingsBookProduct)product).ManagementFees.GetFormatedValue(product.Currency.UseCents)' product.Currency.Code);                  }                  else                  {                      nudManagementFees.Enabled = true;                      nudManagementFees.Minimum = ((SavingsBookProduct)product).ManagementFeesMin.Value;                      nudManagementFees.Maximum = ((SavingsBookProduct)product).ManagementFeesMax.Value;                      lbManagementFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                          "Min "' ((SavingsBookProduct)product).ManagementFeesMin.GetFormatedValue(product.Currency.UseCents)'                          "Max "' ((SavingsBookProduct)product).ManagementFeesMax.GetFormatedValue(product.Currency.UseCents)'                          product.Currency.Code);                  }                    // Overdraft fees                  nudOverdraftFees.DecimalPlaces = 0;                  nudOverdraftFees.Increment = 1;                  if (((SavingsBookProduct)product).OverdraftFees.HasValue)                  {                      nudOverdraftFees.Enabled = false;                      nudOverdraftFees.Minimum = ((SavingsBookProduct)product).OverdraftFees.Value;                      nudOverdraftFees.Maximum = ((SavingsBookProduct)product).OverdraftFees.Value;                      lbOverdraftFeesMinMax.Text = string.Format("{0} {1}"'                          ((SavingsBookProduct)product).OverdraftFees.GetFormatedValue(product.Currency.UseCents)' product.Currency.Code);                  }                  else                  {                      nudOverdraftFees.Enabled = true;                      nudOverdraftFees.Minimum = ((SavingsBookProduct)product).OverdraftFeesMin.Value;                      nudOverdraftFees.Maximum = ((SavingsBookProduct)product).OverdraftFeesMax.Value;                      lbOverdraftFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                          "Min "' ((SavingsBookProduct)product).OverdraftFeesMin.GetFormatedValue(product.Currency.UseCents)'                          "Max "' ((SavingsBookProduct)product).OverdraftFeesMax.GetFormatedValue(product.Currency.UseCents)'                          product.Currency.Code);                  }                    // Agio fees                  nudAgioFees.DecimalPlaces = 4;                  nudAgioFees.Increment = 0.0001m;                  if (((SavingsBookProduct)product).AgioFees.HasValue)                  {                      nudAgioFees.Enabled = false;                      nudAgioFees.Minimum = (decimal)((SavingsBookProduct)product).AgioFees.Value * 100;                      nudAgioFees.Maximum = (decimal)((SavingsBookProduct)product).AgioFees.Value * 100;                      lbAgioFeesMinMax.Text = string.Format("{0} {1}"' ((SavingsBookProduct)product).AgioFees * 100' "%");                  }                  else                  {                      nudAgioFees.Enabled = true;                      nudAgioFees.Minimum = (decimal)((SavingsBookProduct)product).AgioFeesMin.Value * 100;                      nudAgioFees.Maximum = (decimal)((SavingsBookProduct)product).AgioFeesMax.Value * 100;                      lbAgioFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                          "Min "' ((SavingsBookProduct)product).AgioFeesMin * 100'                          "Max "' ((SavingsBookProduct)product).AgioFeesMax * 100' "%");                  }                    //Reopen fees                  nudReopenFees.DecimalPlaces = 0;                  nudReopenFees.Increment = 1;                    if (((SavingsBookProduct)product).ReopenFees.HasValue)                  {                      nudReopenFees.Enabled = false;                      nudReopenFees.Minimum = ((SavingsBookProduct)product).ReopenFees.Value;                      nudReopenFees.Maximum = ((SavingsBookProduct)product).ReopenFees.Value;                      lbReopenFeesMinMax.Text = string.Format("{0} {1}"'                                                               ((SavingsBookProduct)product).ReopenFees.GetFormatedValue(product.Currency.UseCents)'                                                               product.Currency.Code);                  }                  else                  {                      nudReopenFees.Enabled = true;                      nudReopenFees.Minimum = ((SavingsBookProduct)product).ReopenFeesMin.Value;                      nudReopenFees.Maximum = ((SavingsBookProduct)product).ReopenFeesMax.Value;                      lbReopenFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                                                               "Min "' ((SavingsBookProduct)product).ReopenFeesMin.GetFormatedValue(product.Currency.UseCents)'                                                               "Max "' ((SavingsBookProduct)product).ReopenFeesMax.GetFormatedValue(product.Currency.UseCents)'                                                               product.Currency.Code);                  }                    if (((SavingsBookProduct)product).UseTermDeposit)                  {                      nudNumberOfPeriods.Enabled = true;                      btSearchContract2.Enabled = true;                      cmbRollover2.Enabled = true;                      nudNumberOfPeriods.Minimum = (decimal)((SavingsBookProduct)product).TermDepositPeriodMin;                      nudNumberOfPeriods.Maximum = (decimal)((SavingsBookProduct)product).TermDepositPeriodMax;                      nudNumberOfPeriods.Value = nudNumberOfPeriods.Minimum;                      tbTargetAccount2.ResetText();                  }                }
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,DisplaySavingProduct,The following statement contains a magic number: if (product is SavingsBookProduct)              {                  gbDepositInterest.Visible = false;                  gbInterest.Visible = true;                    lbWithdrawFees.Visible = true;                  nudWithdrawFees.Visible = true;                  lbWithdrawFeesMinMax.Visible = true;                    lbEntryFees.Visible = true;                  nudEntryFees.Visible = true;                  lbEntryFeesMinMax.Visible = true;                    lbTransferFees.Visible = true;                  nudTransferFees.Visible = true;                  nudIbtFee.Visible = true;                  lbTransferFeesMinMax.Visible = true;                    lbDepositFees.Visible = true;                  nudDepositFees.Visible = true;                  lbDepositFeesMinMax.Visible = true;                    lbChequeDepositFees.Visible = true;                  nudChequeDepositFees.Visible = true;                  lblChequeDepositFeesMinMax.Visible = true;                    lbCloseFees.Visible = true;                  nudCloseFees.Visible = true;                  lbCloseFeesMinMax.Visible = true;                    lbManagementFees.Visible = true;                  nudManagementFees.Visible = true;                  lbManagementFeesMinMax.Visible = true;                    lbOverdraftFees.Visible = true;                  nudOverdraftFees.Visible = true;                  lbOverdraftFeesMinMax.Visible = true;                    lbAgioFees.Visible = true;                  nudAgioFees.Visible = true;                  lbAgioFeesMinMax.Visible = true;                    lbReopenFees.Visible = true;                  nudReopenFees.Visible = true;                  lbReopenFeesMinMax.Visible = true;                    lbInterestAccrualValue.Text = MultiLanguageStrings.GetString(Ressource.FrmAddSavingProduct' ((SavingsBookProduct)product).InterestBase + ".Text");                  lbInterestPostingValue.Text = MultiLanguageStrings.GetString(Ressource.FrmAddSavingProduct' ((SavingsBookProduct)product).InterestFrequency + ".Text");                  lbInterestBasedOnValue.Text = ((SavingsBookProduct)product).CalculAmountBase.HasValue ? MultiLanguageStrings.GetString(Ressource.FrmAddSavingProduct' ((SavingsBookProduct)product).CalculAmountBase + ".Text") : "------";                    savingDepositToolStripMenuItem.Enabled = true;                  savingWithdrawToolStripMenuItem.Enabled = true;                  savingTransferToolStripMenuItem.Enabled = true;                    // entry fees                  nudEntryFees.DecimalPlaces = 0;                  nudEntryFees.Increment = 1;                  if (((SavingsBookProduct)product).EntryFees.HasValue)                  {                      nudEntryFees.Enabled = false;                      nudEntryFees.Minimum = ((SavingsBookProduct)product).EntryFees.Value;                      nudEntryFees.Maximum = ((SavingsBookProduct)product).EntryFees.Value;                      lbEntryFeesMinMax.Text = string.Format("{0} {1}"' ((SavingsBookProduct)product).EntryFees.GetFormatedValue(product.Currency.UseCents)' product.Currency.Code);                  }                  else                  {                      nudEntryFees.Enabled = true;                      nudEntryFees.Minimum = ((SavingsBookProduct)product).EntryFeesMin.Value;                      nudEntryFees.Maximum = ((SavingsBookProduct)product).EntryFeesMax.Value;                      lbEntryFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                          "Min "' ((SavingsBookProduct)product).EntryFeesMin.GetFormatedValue(product.Currency.UseCents)'                          "Max "' ((SavingsBookProduct)product).EntryFeesMax.GetFormatedValue(product.Currency.UseCents)'                          product.Currency.Code);                  }                    // withdraw fees                  if (((SavingsBookProduct)product).WithdrawFeesType == OSavingsFeesType.Flat)                  {                      nudWithdrawFees.DecimalPlaces = 0;                      nudWithdrawFees.Increment = 1;                      if (((SavingsBookProduct)product).FlatWithdrawFees.HasValue)                      {                          nudWithdrawFees.Enabled = false;                          nudWithdrawFees.Minimum = ((SavingsBookProduct)product).FlatWithdrawFees.Value;                          nudWithdrawFees.Maximum = ((SavingsBookProduct)product).FlatWithdrawFees.Value;                          lbWithdrawFeesMinMax.Text = string.Format("{0} {1}"' ((SavingsBookProduct)product).FlatWithdrawFees.GetFormatedValue(product.Currency.UseCents)' product.Currency.Code);                      }                      else                      {                          nudWithdrawFees.Enabled = true;                          nudWithdrawFees.Minimum = ((SavingsBookProduct)product).FlatWithdrawFeesMin.Value;                          nudWithdrawFees.Maximum = ((SavingsBookProduct)product).FlatWithdrawFeesMax.Value;                          lbWithdrawFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                              "Min "' ((SavingsBookProduct)product).FlatWithdrawFeesMin.GetFormatedValue(product.Currency.UseCents)'                              "Max "' ((SavingsBookProduct)product).FlatWithdrawFeesMax.GetFormatedValue(product.Currency.UseCents)'                              product.Currency.Code);                      }                  }                  else                  {                      nudWithdrawFees.DecimalPlaces = 4;                      nudWithdrawFees.Increment = 0.0001m;                      if (((SavingsBookProduct)product).RateWithdrawFees.HasValue)                      {                          nudWithdrawFees.Enabled = false;                          nudWithdrawFees.Minimum = (decimal)((SavingsBookProduct)product).RateWithdrawFees.Value * 100;                          nudWithdrawFees.Maximum = (decimal)((SavingsBookProduct)product).RateWithdrawFees.Value * 100;                          lbWithdrawFeesMinMax.Text = string.Format("{0} {1}"' (((SavingsBookProduct)product).RateWithdrawFees * 100)' "%");                      }                      else                      {                          nudWithdrawFees.Enabled = true;                          nudWithdrawFees.Minimum = (decimal)((SavingsBookProduct)product).RateWithdrawFeesMin.Value * 100;                          nudWithdrawFees.Maximum = (decimal)((SavingsBookProduct)product).RateWithdrawFeesMax.Value * 100;                          lbWithdrawFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                              "Min "' (((SavingsBookProduct)product).RateWithdrawFeesMin * 100)'                              "Max "' (((SavingsBookProduct)product).RateWithdrawFeesMax * 100)'                              "%");                      }                  }                    // Inter-branch tansfer fee                  SavingsBookProduct p = (SavingsBookProduct)product;                  Fee fee = p.InterBranchTransferFee;                  nudIbtFee.DecimalPlaces = fee.IsFlat ? 0 : 2;                  nudIbtFee.Increment = fee.IsFlat ? 1 : 0.01m;                  nudIbtFee.Enabled = !fee.Value.HasValue;                  nudIbtFee.Minimum = fee.GetMin();                  nudIbtFee.Maximum = fee.GetMax();                  if (fee.IsRange)                  {                      string min = fee.GetMinFormatted(p.Currency);                      string max = fee.GetMaxFormatted(p.Currency);                      const string mask = "Min {0}\r\nMax {1}";                      lblIbtFeeMinMax.Text = string.Format(mask' min' max);                  }                  else                  {                      lblIbtFeeMinMax.Text = fee.GetValueFormatted(p.Currency);                  }                    if (((SavingsBookProduct)product).TransferFeesType == OSavingsFeesType.Flat)                  {                      nudTransferFees.DecimalPlaces = 0;                      nudTransferFees.Increment = 1;                      if (((SavingsBookProduct)product).FlatTransferFees.HasValue)                      {                          nudTransferFees.Enabled = false;                          nudTransferFees.Minimum = ((SavingsBookProduct)product).FlatTransferFees.Value;                          nudTransferFees.Maximum = ((SavingsBookProduct)product).FlatTransferFees.Value;                          lbTransferFeesMinMax.Text = string.Format("{0} {1}"' ((SavingsBookProduct)product).FlatTransferFees.GetFormatedValue(product.Currency.UseCents)' product.Currency.Code);                      }                      else                      {                          nudTransferFees.Enabled = true;                          nudTransferFees.Minimum = ((SavingsBookProduct)product).FlatTransferFeesMin.Value;                          nudTransferFees.Maximum = ((SavingsBookProduct)product).FlatTransferFeesMax.Value;                          lbTransferFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                              "Min "' ((SavingsBookProduct)product).FlatTransferFeesMin.GetFormatedValue(product.Currency.UseCents)'                              "Max "' ((SavingsBookProduct)product).FlatTransferFeesMax.GetFormatedValue(product.Currency.UseCents)'                              product.Currency.Code);                      }                  }                  else                  {                      nudTransferFees.DecimalPlaces = 4;                      nudTransferFees.Increment = 0.0001m;                      if (((SavingsBookProduct)product).RateTransferFees.HasValue)                      {                          nudTransferFees.Enabled = false;                          nudTransferFees.Minimum = (decimal)((SavingsBookProduct)product).RateTransferFees.Value * 100;                          nudTransferFees.Maximum = (decimal)((SavingsBookProduct)product).RateTransferFees.Value * 100;                          lbTransferFeesMinMax.Text = string.Format("{0} {1}"' (((SavingsBookProduct)product).RateTransferFees * 100)' "%");                      }                      else                      {                          nudTransferFees.Enabled = true;                          nudTransferFees.Minimum = (decimal)((SavingsBookProduct)product).RateTransferFeesMin.Value * 100;                          nudTransferFees.Maximum = (decimal)((SavingsBookProduct)product).RateTransferFeesMax.Value * 100;                          lbTransferFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                              "Min "' (((SavingsBookProduct)product).RateTransferFeesMin * 100)'                              "Max "' (((SavingsBookProduct)product).RateTransferFeesMax * 100)'                              "%");                      }                  }                    //Cash Deposit fees                  nudDepositFees.DecimalPlaces = 0;                  nudDepositFees.Increment = 1;                  if (((SavingsBookProduct)product).DepositFees.HasValue)                  {                      nudDepositFees.Enabled = false;                      nudDepositFees.Minimum = ((SavingsBookProduct)product).DepositFees.Value;                      nudDepositFees.Maximum = ((SavingsBookProduct)product).DepositFees.Value;                      lbDepositFeesMinMax.Text = string.Format("{0} {1}"'                                                               ((SavingsBookProduct)product).DepositFees.GetFormatedValue(product.Currency.UseCents)'                                                               product.Currency.Code);                  }                  else                  {                      nudDepositFees.Enabled = true;                      nudDepositFees.Minimum = ((SavingsBookProduct)product).DepositFeesMin.Value;                      nudDepositFees.Maximum = ((SavingsBookProduct)product).DepositFeesMax.Value;                      lbDepositFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                                                               "Min "' ((SavingsBookProduct)product).DepositFeesMin.GetFormatedValue(product.Currency.UseCents)'                                                               "Max "' ((SavingsBookProduct)product).DepositFeesMax.GetFormatedValue(product.Currency.UseCents)'                                                               product.Currency.Code);                  }                    //Cheque Deposit fees                  nudChequeDepositFees.DecimalPlaces = 0;                  nudChequeDepositFees.Increment = 1;                  if (((SavingsBookProduct)product).ChequeDepositFees.HasValue)                  {                      nudChequeDepositFees.Enabled = false;                      nudChequeDepositFees.Maximum = ((SavingsBookProduct)product).ChequeDepositFees.Value;                      nudChequeDepositFees.Minimum = ((SavingsBookProduct)product).ChequeDepositFees.Value;                      lblChequeDepositFeesMinMax.Text = string.Format("{0} {1}"'                                                               ((SavingsBookProduct)product).ChequeDepositFees.GetFormatedValue(product.Currency.UseCents)'                                                               product.Currency.Code);                  }                  else                  {                      nudChequeDepositFees.Enabled = true;                      nudChequeDepositFees.Minimum = ((SavingsBookProduct)product).ChequeDepositFeesMin.Value;                      nudChequeDepositFees.Maximum = ((SavingsBookProduct)product).ChequeDepositFeesMax.Value;                      lblChequeDepositFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                                                               "Min "' ((SavingsBookProduct)product).ChequeDepositFeesMin.GetFormatedValue(product.Currency.UseCents)'                                                               "Max "' ((SavingsBookProduct)product).ChequeDepositFeesMax.GetFormatedValue(product.Currency.UseCents)'                                                               product.Currency.Code);                  }                    // Close fees                  nudCloseFees.DecimalPlaces = 0;                  nudCloseFees.Increment = 1;                  if (((SavingsBookProduct)product).CloseFees.HasValue)                  {                      nudCloseFees.Enabled = false;                      nudCloseFees.Minimum = ((SavingsBookProduct)product).CloseFees.Value;                      nudCloseFees.Maximum = ((SavingsBookProduct)product).CloseFees.Value;                      lbCloseFeesMinMax.Text = string.Format("{0} {1}"'                          ((SavingsBookProduct)product).CloseFees.GetFormatedValue(product.Currency.UseCents)' product.Currency.Code);                  }                  else                  {                      nudCloseFees.Enabled = true;                      nudCloseFees.Minimum = ((SavingsBookProduct)product).CloseFeesMin.Value;                      nudCloseFees.Maximum = ((SavingsBookProduct)product).CloseFeesMax.Value;                      lbCloseFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                          "Min "' ((SavingsBookProduct)product).CloseFeesMin.GetFormatedValue(product.Currency.UseCents)'                          "Max "' ((SavingsBookProduct)product).CloseFeesMax.GetFormatedValue(product.Currency.UseCents)'                          product.Currency.Code);                  }                    // Management fees                  nudManagementFees.DecimalPlaces = 0;                  nudManagementFees.Increment = 1;                  if (((SavingsBookProduct)product).ManagementFees.HasValue)                  {                      nudManagementFees.Enabled = false;                      nudManagementFees.Minimum = ((SavingsBookProduct)product).ManagementFees.Value;                      nudManagementFees.Maximum = ((SavingsBookProduct)product).ManagementFees.Value;                      lbManagementFeesMinMax.Text = string.Format("{0} {1}"'                          ((SavingsBookProduct)product).ManagementFees.GetFormatedValue(product.Currency.UseCents)' product.Currency.Code);                  }                  else                  {                      nudManagementFees.Enabled = true;                      nudManagementFees.Minimum = ((SavingsBookProduct)product).ManagementFeesMin.Value;                      nudManagementFees.Maximum = ((SavingsBookProduct)product).ManagementFeesMax.Value;                      lbManagementFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                          "Min "' ((SavingsBookProduct)product).ManagementFeesMin.GetFormatedValue(product.Currency.UseCents)'                          "Max "' ((SavingsBookProduct)product).ManagementFeesMax.GetFormatedValue(product.Currency.UseCents)'                          product.Currency.Code);                  }                    // Overdraft fees                  nudOverdraftFees.DecimalPlaces = 0;                  nudOverdraftFees.Increment = 1;                  if (((SavingsBookProduct)product).OverdraftFees.HasValue)                  {                      nudOverdraftFees.Enabled = false;                      nudOverdraftFees.Minimum = ((SavingsBookProduct)product).OverdraftFees.Value;                      nudOverdraftFees.Maximum = ((SavingsBookProduct)product).OverdraftFees.Value;                      lbOverdraftFeesMinMax.Text = string.Format("{0} {1}"'                          ((SavingsBookProduct)product).OverdraftFees.GetFormatedValue(product.Currency.UseCents)' product.Currency.Code);                  }                  else                  {                      nudOverdraftFees.Enabled = true;                      nudOverdraftFees.Minimum = ((SavingsBookProduct)product).OverdraftFeesMin.Value;                      nudOverdraftFees.Maximum = ((SavingsBookProduct)product).OverdraftFeesMax.Value;                      lbOverdraftFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                          "Min "' ((SavingsBookProduct)product).OverdraftFeesMin.GetFormatedValue(product.Currency.UseCents)'                          "Max "' ((SavingsBookProduct)product).OverdraftFeesMax.GetFormatedValue(product.Currency.UseCents)'                          product.Currency.Code);                  }                    // Agio fees                  nudAgioFees.DecimalPlaces = 4;                  nudAgioFees.Increment = 0.0001m;                  if (((SavingsBookProduct)product).AgioFees.HasValue)                  {                      nudAgioFees.Enabled = false;                      nudAgioFees.Minimum = (decimal)((SavingsBookProduct)product).AgioFees.Value * 100;                      nudAgioFees.Maximum = (decimal)((SavingsBookProduct)product).AgioFees.Value * 100;                      lbAgioFeesMinMax.Text = string.Format("{0} {1}"' ((SavingsBookProduct)product).AgioFees * 100' "%");                  }                  else                  {                      nudAgioFees.Enabled = true;                      nudAgioFees.Minimum = (decimal)((SavingsBookProduct)product).AgioFeesMin.Value * 100;                      nudAgioFees.Maximum = (decimal)((SavingsBookProduct)product).AgioFeesMax.Value * 100;                      lbAgioFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                          "Min "' ((SavingsBookProduct)product).AgioFeesMin * 100'                          "Max "' ((SavingsBookProduct)product).AgioFeesMax * 100' "%");                  }                    //Reopen fees                  nudReopenFees.DecimalPlaces = 0;                  nudReopenFees.Increment = 1;                    if (((SavingsBookProduct)product).ReopenFees.HasValue)                  {                      nudReopenFees.Enabled = false;                      nudReopenFees.Minimum = ((SavingsBookProduct)product).ReopenFees.Value;                      nudReopenFees.Maximum = ((SavingsBookProduct)product).ReopenFees.Value;                      lbReopenFeesMinMax.Text = string.Format("{0} {1}"'                                                               ((SavingsBookProduct)product).ReopenFees.GetFormatedValue(product.Currency.UseCents)'                                                               product.Currency.Code);                  }                  else                  {                      nudReopenFees.Enabled = true;                      nudReopenFees.Minimum = ((SavingsBookProduct)product).ReopenFeesMin.Value;                      nudReopenFees.Maximum = ((SavingsBookProduct)product).ReopenFeesMax.Value;                      lbReopenFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                                                               "Min "' ((SavingsBookProduct)product).ReopenFeesMin.GetFormatedValue(product.Currency.UseCents)'                                                               "Max "' ((SavingsBookProduct)product).ReopenFeesMax.GetFormatedValue(product.Currency.UseCents)'                                                               product.Currency.Code);                  }                    if (((SavingsBookProduct)product).UseTermDeposit)                  {                      nudNumberOfPeriods.Enabled = true;                      btSearchContract2.Enabled = true;                      cmbRollover2.Enabled = true;                      nudNumberOfPeriods.Minimum = (decimal)((SavingsBookProduct)product).TermDepositPeriodMin;                      nudNumberOfPeriods.Maximum = (decimal)((SavingsBookProduct)product).TermDepositPeriodMax;                      nudNumberOfPeriods.Value = nudNumberOfPeriods.Minimum;                      tbTargetAccount2.ResetText();                  }                }
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,DisplaySavingProduct,The following statement contains a magic number: if (product is SavingsBookProduct)              {                  gbDepositInterest.Visible = false;                  gbInterest.Visible = true;                    lbWithdrawFees.Visible = true;                  nudWithdrawFees.Visible = true;                  lbWithdrawFeesMinMax.Visible = true;                    lbEntryFees.Visible = true;                  nudEntryFees.Visible = true;                  lbEntryFeesMinMax.Visible = true;                    lbTransferFees.Visible = true;                  nudTransferFees.Visible = true;                  nudIbtFee.Visible = true;                  lbTransferFeesMinMax.Visible = true;                    lbDepositFees.Visible = true;                  nudDepositFees.Visible = true;                  lbDepositFeesMinMax.Visible = true;                    lbChequeDepositFees.Visible = true;                  nudChequeDepositFees.Visible = true;                  lblChequeDepositFeesMinMax.Visible = true;                    lbCloseFees.Visible = true;                  nudCloseFees.Visible = true;                  lbCloseFeesMinMax.Visible = true;                    lbManagementFees.Visible = true;                  nudManagementFees.Visible = true;                  lbManagementFeesMinMax.Visible = true;                    lbOverdraftFees.Visible = true;                  nudOverdraftFees.Visible = true;                  lbOverdraftFeesMinMax.Visible = true;                    lbAgioFees.Visible = true;                  nudAgioFees.Visible = true;                  lbAgioFeesMinMax.Visible = true;                    lbReopenFees.Visible = true;                  nudReopenFees.Visible = true;                  lbReopenFeesMinMax.Visible = true;                    lbInterestAccrualValue.Text = MultiLanguageStrings.GetString(Ressource.FrmAddSavingProduct' ((SavingsBookProduct)product).InterestBase + ".Text");                  lbInterestPostingValue.Text = MultiLanguageStrings.GetString(Ressource.FrmAddSavingProduct' ((SavingsBookProduct)product).InterestFrequency + ".Text");                  lbInterestBasedOnValue.Text = ((SavingsBookProduct)product).CalculAmountBase.HasValue ? MultiLanguageStrings.GetString(Ressource.FrmAddSavingProduct' ((SavingsBookProduct)product).CalculAmountBase + ".Text") : "------";                    savingDepositToolStripMenuItem.Enabled = true;                  savingWithdrawToolStripMenuItem.Enabled = true;                  savingTransferToolStripMenuItem.Enabled = true;                    // entry fees                  nudEntryFees.DecimalPlaces = 0;                  nudEntryFees.Increment = 1;                  if (((SavingsBookProduct)product).EntryFees.HasValue)                  {                      nudEntryFees.Enabled = false;                      nudEntryFees.Minimum = ((SavingsBookProduct)product).EntryFees.Value;                      nudEntryFees.Maximum = ((SavingsBookProduct)product).EntryFees.Value;                      lbEntryFeesMinMax.Text = string.Format("{0} {1}"' ((SavingsBookProduct)product).EntryFees.GetFormatedValue(product.Currency.UseCents)' product.Currency.Code);                  }                  else                  {                      nudEntryFees.Enabled = true;                      nudEntryFees.Minimum = ((SavingsBookProduct)product).EntryFeesMin.Value;                      nudEntryFees.Maximum = ((SavingsBookProduct)product).EntryFeesMax.Value;                      lbEntryFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                          "Min "' ((SavingsBookProduct)product).EntryFeesMin.GetFormatedValue(product.Currency.UseCents)'                          "Max "' ((SavingsBookProduct)product).EntryFeesMax.GetFormatedValue(product.Currency.UseCents)'                          product.Currency.Code);                  }                    // withdraw fees                  if (((SavingsBookProduct)product).WithdrawFeesType == OSavingsFeesType.Flat)                  {                      nudWithdrawFees.DecimalPlaces = 0;                      nudWithdrawFees.Increment = 1;                      if (((SavingsBookProduct)product).FlatWithdrawFees.HasValue)                      {                          nudWithdrawFees.Enabled = false;                          nudWithdrawFees.Minimum = ((SavingsBookProduct)product).FlatWithdrawFees.Value;                          nudWithdrawFees.Maximum = ((SavingsBookProduct)product).FlatWithdrawFees.Value;                          lbWithdrawFeesMinMax.Text = string.Format("{0} {1}"' ((SavingsBookProduct)product).FlatWithdrawFees.GetFormatedValue(product.Currency.UseCents)' product.Currency.Code);                      }                      else                      {                          nudWithdrawFees.Enabled = true;                          nudWithdrawFees.Minimum = ((SavingsBookProduct)product).FlatWithdrawFeesMin.Value;                          nudWithdrawFees.Maximum = ((SavingsBookProduct)product).FlatWithdrawFeesMax.Value;                          lbWithdrawFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                              "Min "' ((SavingsBookProduct)product).FlatWithdrawFeesMin.GetFormatedValue(product.Currency.UseCents)'                              "Max "' ((SavingsBookProduct)product).FlatWithdrawFeesMax.GetFormatedValue(product.Currency.UseCents)'                              product.Currency.Code);                      }                  }                  else                  {                      nudWithdrawFees.DecimalPlaces = 4;                      nudWithdrawFees.Increment = 0.0001m;                      if (((SavingsBookProduct)product).RateWithdrawFees.HasValue)                      {                          nudWithdrawFees.Enabled = false;                          nudWithdrawFees.Minimum = (decimal)((SavingsBookProduct)product).RateWithdrawFees.Value * 100;                          nudWithdrawFees.Maximum = (decimal)((SavingsBookProduct)product).RateWithdrawFees.Value * 100;                          lbWithdrawFeesMinMax.Text = string.Format("{0} {1}"' (((SavingsBookProduct)product).RateWithdrawFees * 100)' "%");                      }                      else                      {                          nudWithdrawFees.Enabled = true;                          nudWithdrawFees.Minimum = (decimal)((SavingsBookProduct)product).RateWithdrawFeesMin.Value * 100;                          nudWithdrawFees.Maximum = (decimal)((SavingsBookProduct)product).RateWithdrawFeesMax.Value * 100;                          lbWithdrawFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                              "Min "' (((SavingsBookProduct)product).RateWithdrawFeesMin * 100)'                              "Max "' (((SavingsBookProduct)product).RateWithdrawFeesMax * 100)'                              "%");                      }                  }                    // Inter-branch tansfer fee                  SavingsBookProduct p = (SavingsBookProduct)product;                  Fee fee = p.InterBranchTransferFee;                  nudIbtFee.DecimalPlaces = fee.IsFlat ? 0 : 2;                  nudIbtFee.Increment = fee.IsFlat ? 1 : 0.01m;                  nudIbtFee.Enabled = !fee.Value.HasValue;                  nudIbtFee.Minimum = fee.GetMin();                  nudIbtFee.Maximum = fee.GetMax();                  if (fee.IsRange)                  {                      string min = fee.GetMinFormatted(p.Currency);                      string max = fee.GetMaxFormatted(p.Currency);                      const string mask = "Min {0}\r\nMax {1}";                      lblIbtFeeMinMax.Text = string.Format(mask' min' max);                  }                  else                  {                      lblIbtFeeMinMax.Text = fee.GetValueFormatted(p.Currency);                  }                    if (((SavingsBookProduct)product).TransferFeesType == OSavingsFeesType.Flat)                  {                      nudTransferFees.DecimalPlaces = 0;                      nudTransferFees.Increment = 1;                      if (((SavingsBookProduct)product).FlatTransferFees.HasValue)                      {                          nudTransferFees.Enabled = false;                          nudTransferFees.Minimum = ((SavingsBookProduct)product).FlatTransferFees.Value;                          nudTransferFees.Maximum = ((SavingsBookProduct)product).FlatTransferFees.Value;                          lbTransferFeesMinMax.Text = string.Format("{0} {1}"' ((SavingsBookProduct)product).FlatTransferFees.GetFormatedValue(product.Currency.UseCents)' product.Currency.Code);                      }                      else                      {                          nudTransferFees.Enabled = true;                          nudTransferFees.Minimum = ((SavingsBookProduct)product).FlatTransferFeesMin.Value;                          nudTransferFees.Maximum = ((SavingsBookProduct)product).FlatTransferFeesMax.Value;                          lbTransferFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                              "Min "' ((SavingsBookProduct)product).FlatTransferFeesMin.GetFormatedValue(product.Currency.UseCents)'                              "Max "' ((SavingsBookProduct)product).FlatTransferFeesMax.GetFormatedValue(product.Currency.UseCents)'                              product.Currency.Code);                      }                  }                  else                  {                      nudTransferFees.DecimalPlaces = 4;                      nudTransferFees.Increment = 0.0001m;                      if (((SavingsBookProduct)product).RateTransferFees.HasValue)                      {                          nudTransferFees.Enabled = false;                          nudTransferFees.Minimum = (decimal)((SavingsBookProduct)product).RateTransferFees.Value * 100;                          nudTransferFees.Maximum = (decimal)((SavingsBookProduct)product).RateTransferFees.Value * 100;                          lbTransferFeesMinMax.Text = string.Format("{0} {1}"' (((SavingsBookProduct)product).RateTransferFees * 100)' "%");                      }                      else                      {                          nudTransferFees.Enabled = true;                          nudTransferFees.Minimum = (decimal)((SavingsBookProduct)product).RateTransferFeesMin.Value * 100;                          nudTransferFees.Maximum = (decimal)((SavingsBookProduct)product).RateTransferFeesMax.Value * 100;                          lbTransferFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                              "Min "' (((SavingsBookProduct)product).RateTransferFeesMin * 100)'                              "Max "' (((SavingsBookProduct)product).RateTransferFeesMax * 100)'                              "%");                      }                  }                    //Cash Deposit fees                  nudDepositFees.DecimalPlaces = 0;                  nudDepositFees.Increment = 1;                  if (((SavingsBookProduct)product).DepositFees.HasValue)                  {                      nudDepositFees.Enabled = false;                      nudDepositFees.Minimum = ((SavingsBookProduct)product).DepositFees.Value;                      nudDepositFees.Maximum = ((SavingsBookProduct)product).DepositFees.Value;                      lbDepositFeesMinMax.Text = string.Format("{0} {1}"'                                                               ((SavingsBookProduct)product).DepositFees.GetFormatedValue(product.Currency.UseCents)'                                                               product.Currency.Code);                  }                  else                  {                      nudDepositFees.Enabled = true;                      nudDepositFees.Minimum = ((SavingsBookProduct)product).DepositFeesMin.Value;                      nudDepositFees.Maximum = ((SavingsBookProduct)product).DepositFeesMax.Value;                      lbDepositFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                                                               "Min "' ((SavingsBookProduct)product).DepositFeesMin.GetFormatedValue(product.Currency.UseCents)'                                                               "Max "' ((SavingsBookProduct)product).DepositFeesMax.GetFormatedValue(product.Currency.UseCents)'                                                               product.Currency.Code);                  }                    //Cheque Deposit fees                  nudChequeDepositFees.DecimalPlaces = 0;                  nudChequeDepositFees.Increment = 1;                  if (((SavingsBookProduct)product).ChequeDepositFees.HasValue)                  {                      nudChequeDepositFees.Enabled = false;                      nudChequeDepositFees.Maximum = ((SavingsBookProduct)product).ChequeDepositFees.Value;                      nudChequeDepositFees.Minimum = ((SavingsBookProduct)product).ChequeDepositFees.Value;                      lblChequeDepositFeesMinMax.Text = string.Format("{0} {1}"'                                                               ((SavingsBookProduct)product).ChequeDepositFees.GetFormatedValue(product.Currency.UseCents)'                                                               product.Currency.Code);                  }                  else                  {                      nudChequeDepositFees.Enabled = true;                      nudChequeDepositFees.Minimum = ((SavingsBookProduct)product).ChequeDepositFeesMin.Value;                      nudChequeDepositFees.Maximum = ((SavingsBookProduct)product).ChequeDepositFeesMax.Value;                      lblChequeDepositFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                                                               "Min "' ((SavingsBookProduct)product).ChequeDepositFeesMin.GetFormatedValue(product.Currency.UseCents)'                                                               "Max "' ((SavingsBookProduct)product).ChequeDepositFeesMax.GetFormatedValue(product.Currency.UseCents)'                                                               product.Currency.Code);                  }                    // Close fees                  nudCloseFees.DecimalPlaces = 0;                  nudCloseFees.Increment = 1;                  if (((SavingsBookProduct)product).CloseFees.HasValue)                  {                      nudCloseFees.Enabled = false;                      nudCloseFees.Minimum = ((SavingsBookProduct)product).CloseFees.Value;                      nudCloseFees.Maximum = ((SavingsBookProduct)product).CloseFees.Value;                      lbCloseFeesMinMax.Text = string.Format("{0} {1}"'                          ((SavingsBookProduct)product).CloseFees.GetFormatedValue(product.Currency.UseCents)' product.Currency.Code);                  }                  else                  {                      nudCloseFees.Enabled = true;                      nudCloseFees.Minimum = ((SavingsBookProduct)product).CloseFeesMin.Value;                      nudCloseFees.Maximum = ((SavingsBookProduct)product).CloseFeesMax.Value;                      lbCloseFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                          "Min "' ((SavingsBookProduct)product).CloseFeesMin.GetFormatedValue(product.Currency.UseCents)'                          "Max "' ((SavingsBookProduct)product).CloseFeesMax.GetFormatedValue(product.Currency.UseCents)'                          product.Currency.Code);                  }                    // Management fees                  nudManagementFees.DecimalPlaces = 0;                  nudManagementFees.Increment = 1;                  if (((SavingsBookProduct)product).ManagementFees.HasValue)                  {                      nudManagementFees.Enabled = false;                      nudManagementFees.Minimum = ((SavingsBookProduct)product).ManagementFees.Value;                      nudManagementFees.Maximum = ((SavingsBookProduct)product).ManagementFees.Value;                      lbManagementFeesMinMax.Text = string.Format("{0} {1}"'                          ((SavingsBookProduct)product).ManagementFees.GetFormatedValue(product.Currency.UseCents)' product.Currency.Code);                  }                  else                  {                      nudManagementFees.Enabled = true;                      nudManagementFees.Minimum = ((SavingsBookProduct)product).ManagementFeesMin.Value;                      nudManagementFees.Maximum = ((SavingsBookProduct)product).ManagementFeesMax.Value;                      lbManagementFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                          "Min "' ((SavingsBookProduct)product).ManagementFeesMin.GetFormatedValue(product.Currency.UseCents)'                          "Max "' ((SavingsBookProduct)product).ManagementFeesMax.GetFormatedValue(product.Currency.UseCents)'                          product.Currency.Code);                  }                    // Overdraft fees                  nudOverdraftFees.DecimalPlaces = 0;                  nudOverdraftFees.Increment = 1;                  if (((SavingsBookProduct)product).OverdraftFees.HasValue)                  {                      nudOverdraftFees.Enabled = false;                      nudOverdraftFees.Minimum = ((SavingsBookProduct)product).OverdraftFees.Value;                      nudOverdraftFees.Maximum = ((SavingsBookProduct)product).OverdraftFees.Value;                      lbOverdraftFeesMinMax.Text = string.Format("{0} {1}"'                          ((SavingsBookProduct)product).OverdraftFees.GetFormatedValue(product.Currency.UseCents)' product.Currency.Code);                  }                  else                  {                      nudOverdraftFees.Enabled = true;                      nudOverdraftFees.Minimum = ((SavingsBookProduct)product).OverdraftFeesMin.Value;                      nudOverdraftFees.Maximum = ((SavingsBookProduct)product).OverdraftFeesMax.Value;                      lbOverdraftFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                          "Min "' ((SavingsBookProduct)product).OverdraftFeesMin.GetFormatedValue(product.Currency.UseCents)'                          "Max "' ((SavingsBookProduct)product).OverdraftFeesMax.GetFormatedValue(product.Currency.UseCents)'                          product.Currency.Code);                  }                    // Agio fees                  nudAgioFees.DecimalPlaces = 4;                  nudAgioFees.Increment = 0.0001m;                  if (((SavingsBookProduct)product).AgioFees.HasValue)                  {                      nudAgioFees.Enabled = false;                      nudAgioFees.Minimum = (decimal)((SavingsBookProduct)product).AgioFees.Value * 100;                      nudAgioFees.Maximum = (decimal)((SavingsBookProduct)product).AgioFees.Value * 100;                      lbAgioFeesMinMax.Text = string.Format("{0} {1}"' ((SavingsBookProduct)product).AgioFees * 100' "%");                  }                  else                  {                      nudAgioFees.Enabled = true;                      nudAgioFees.Minimum = (decimal)((SavingsBookProduct)product).AgioFeesMin.Value * 100;                      nudAgioFees.Maximum = (decimal)((SavingsBookProduct)product).AgioFeesMax.Value * 100;                      lbAgioFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                          "Min "' ((SavingsBookProduct)product).AgioFeesMin * 100'                          "Max "' ((SavingsBookProduct)product).AgioFeesMax * 100' "%");                  }                    //Reopen fees                  nudReopenFees.DecimalPlaces = 0;                  nudReopenFees.Increment = 1;                    if (((SavingsBookProduct)product).ReopenFees.HasValue)                  {                      nudReopenFees.Enabled = false;                      nudReopenFees.Minimum = ((SavingsBookProduct)product).ReopenFees.Value;                      nudReopenFees.Maximum = ((SavingsBookProduct)product).ReopenFees.Value;                      lbReopenFeesMinMax.Text = string.Format("{0} {1}"'                                                               ((SavingsBookProduct)product).ReopenFees.GetFormatedValue(product.Currency.UseCents)'                                                               product.Currency.Code);                  }                  else                  {                      nudReopenFees.Enabled = true;                      nudReopenFees.Minimum = ((SavingsBookProduct)product).ReopenFeesMin.Value;                      nudReopenFees.Maximum = ((SavingsBookProduct)product).ReopenFeesMax.Value;                      lbReopenFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                                                               "Min "' ((SavingsBookProduct)product).ReopenFeesMin.GetFormatedValue(product.Currency.UseCents)'                                                               "Max "' ((SavingsBookProduct)product).ReopenFeesMax.GetFormatedValue(product.Currency.UseCents)'                                                               product.Currency.Code);                  }                    if (((SavingsBookProduct)product).UseTermDeposit)                  {                      nudNumberOfPeriods.Enabled = true;                      btSearchContract2.Enabled = true;                      cmbRollover2.Enabled = true;                      nudNumberOfPeriods.Minimum = (decimal)((SavingsBookProduct)product).TermDepositPeriodMin;                      nudNumberOfPeriods.Maximum = (decimal)((SavingsBookProduct)product).TermDepositPeriodMax;                      nudNumberOfPeriods.Value = nudNumberOfPeriods.Minimum;                      tbTargetAccount2.ResetText();                  }                }
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,DisplaySavingProduct,The following statement contains a magic number: if (product is SavingsBookProduct)              {                  gbDepositInterest.Visible = false;                  gbInterest.Visible = true;                    lbWithdrawFees.Visible = true;                  nudWithdrawFees.Visible = true;                  lbWithdrawFeesMinMax.Visible = true;                    lbEntryFees.Visible = true;                  nudEntryFees.Visible = true;                  lbEntryFeesMinMax.Visible = true;                    lbTransferFees.Visible = true;                  nudTransferFees.Visible = true;                  nudIbtFee.Visible = true;                  lbTransferFeesMinMax.Visible = true;                    lbDepositFees.Visible = true;                  nudDepositFees.Visible = true;                  lbDepositFeesMinMax.Visible = true;                    lbChequeDepositFees.Visible = true;                  nudChequeDepositFees.Visible = true;                  lblChequeDepositFeesMinMax.Visible = true;                    lbCloseFees.Visible = true;                  nudCloseFees.Visible = true;                  lbCloseFeesMinMax.Visible = true;                    lbManagementFees.Visible = true;                  nudManagementFees.Visible = true;                  lbManagementFeesMinMax.Visible = true;                    lbOverdraftFees.Visible = true;                  nudOverdraftFees.Visible = true;                  lbOverdraftFeesMinMax.Visible = true;                    lbAgioFees.Visible = true;                  nudAgioFees.Visible = true;                  lbAgioFeesMinMax.Visible = true;                    lbReopenFees.Visible = true;                  nudReopenFees.Visible = true;                  lbReopenFeesMinMax.Visible = true;                    lbInterestAccrualValue.Text = MultiLanguageStrings.GetString(Ressource.FrmAddSavingProduct' ((SavingsBookProduct)product).InterestBase + ".Text");                  lbInterestPostingValue.Text = MultiLanguageStrings.GetString(Ressource.FrmAddSavingProduct' ((SavingsBookProduct)product).InterestFrequency + ".Text");                  lbInterestBasedOnValue.Text = ((SavingsBookProduct)product).CalculAmountBase.HasValue ? MultiLanguageStrings.GetString(Ressource.FrmAddSavingProduct' ((SavingsBookProduct)product).CalculAmountBase + ".Text") : "------";                    savingDepositToolStripMenuItem.Enabled = true;                  savingWithdrawToolStripMenuItem.Enabled = true;                  savingTransferToolStripMenuItem.Enabled = true;                    // entry fees                  nudEntryFees.DecimalPlaces = 0;                  nudEntryFees.Increment = 1;                  if (((SavingsBookProduct)product).EntryFees.HasValue)                  {                      nudEntryFees.Enabled = false;                      nudEntryFees.Minimum = ((SavingsBookProduct)product).EntryFees.Value;                      nudEntryFees.Maximum = ((SavingsBookProduct)product).EntryFees.Value;                      lbEntryFeesMinMax.Text = string.Format("{0} {1}"' ((SavingsBookProduct)product).EntryFees.GetFormatedValue(product.Currency.UseCents)' product.Currency.Code);                  }                  else                  {                      nudEntryFees.Enabled = true;                      nudEntryFees.Minimum = ((SavingsBookProduct)product).EntryFeesMin.Value;                      nudEntryFees.Maximum = ((SavingsBookProduct)product).EntryFeesMax.Value;                      lbEntryFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                          "Min "' ((SavingsBookProduct)product).EntryFeesMin.GetFormatedValue(product.Currency.UseCents)'                          "Max "' ((SavingsBookProduct)product).EntryFeesMax.GetFormatedValue(product.Currency.UseCents)'                          product.Currency.Code);                  }                    // withdraw fees                  if (((SavingsBookProduct)product).WithdrawFeesType == OSavingsFeesType.Flat)                  {                      nudWithdrawFees.DecimalPlaces = 0;                      nudWithdrawFees.Increment = 1;                      if (((SavingsBookProduct)product).FlatWithdrawFees.HasValue)                      {                          nudWithdrawFees.Enabled = false;                          nudWithdrawFees.Minimum = ((SavingsBookProduct)product).FlatWithdrawFees.Value;                          nudWithdrawFees.Maximum = ((SavingsBookProduct)product).FlatWithdrawFees.Value;                          lbWithdrawFeesMinMax.Text = string.Format("{0} {1}"' ((SavingsBookProduct)product).FlatWithdrawFees.GetFormatedValue(product.Currency.UseCents)' product.Currency.Code);                      }                      else                      {                          nudWithdrawFees.Enabled = true;                          nudWithdrawFees.Minimum = ((SavingsBookProduct)product).FlatWithdrawFeesMin.Value;                          nudWithdrawFees.Maximum = ((SavingsBookProduct)product).FlatWithdrawFeesMax.Value;                          lbWithdrawFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                              "Min "' ((SavingsBookProduct)product).FlatWithdrawFeesMin.GetFormatedValue(product.Currency.UseCents)'                              "Max "' ((SavingsBookProduct)product).FlatWithdrawFeesMax.GetFormatedValue(product.Currency.UseCents)'                              product.Currency.Code);                      }                  }                  else                  {                      nudWithdrawFees.DecimalPlaces = 4;                      nudWithdrawFees.Increment = 0.0001m;                      if (((SavingsBookProduct)product).RateWithdrawFees.HasValue)                      {                          nudWithdrawFees.Enabled = false;                          nudWithdrawFees.Minimum = (decimal)((SavingsBookProduct)product).RateWithdrawFees.Value * 100;                          nudWithdrawFees.Maximum = (decimal)((SavingsBookProduct)product).RateWithdrawFees.Value * 100;                          lbWithdrawFeesMinMax.Text = string.Format("{0} {1}"' (((SavingsBookProduct)product).RateWithdrawFees * 100)' "%");                      }                      else                      {                          nudWithdrawFees.Enabled = true;                          nudWithdrawFees.Minimum = (decimal)((SavingsBookProduct)product).RateWithdrawFeesMin.Value * 100;                          nudWithdrawFees.Maximum = (decimal)((SavingsBookProduct)product).RateWithdrawFeesMax.Value * 100;                          lbWithdrawFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                              "Min "' (((SavingsBookProduct)product).RateWithdrawFeesMin * 100)'                              "Max "' (((SavingsBookProduct)product).RateWithdrawFeesMax * 100)'                              "%");                      }                  }                    // Inter-branch tansfer fee                  SavingsBookProduct p = (SavingsBookProduct)product;                  Fee fee = p.InterBranchTransferFee;                  nudIbtFee.DecimalPlaces = fee.IsFlat ? 0 : 2;                  nudIbtFee.Increment = fee.IsFlat ? 1 : 0.01m;                  nudIbtFee.Enabled = !fee.Value.HasValue;                  nudIbtFee.Minimum = fee.GetMin();                  nudIbtFee.Maximum = fee.GetMax();                  if (fee.IsRange)                  {                      string min = fee.GetMinFormatted(p.Currency);                      string max = fee.GetMaxFormatted(p.Currency);                      const string mask = "Min {0}\r\nMax {1}";                      lblIbtFeeMinMax.Text = string.Format(mask' min' max);                  }                  else                  {                      lblIbtFeeMinMax.Text = fee.GetValueFormatted(p.Currency);                  }                    if (((SavingsBookProduct)product).TransferFeesType == OSavingsFeesType.Flat)                  {                      nudTransferFees.DecimalPlaces = 0;                      nudTransferFees.Increment = 1;                      if (((SavingsBookProduct)product).FlatTransferFees.HasValue)                      {                          nudTransferFees.Enabled = false;                          nudTransferFees.Minimum = ((SavingsBookProduct)product).FlatTransferFees.Value;                          nudTransferFees.Maximum = ((SavingsBookProduct)product).FlatTransferFees.Value;                          lbTransferFeesMinMax.Text = string.Format("{0} {1}"' ((SavingsBookProduct)product).FlatTransferFees.GetFormatedValue(product.Currency.UseCents)' product.Currency.Code);                      }                      else                      {                          nudTransferFees.Enabled = true;                          nudTransferFees.Minimum = ((SavingsBookProduct)product).FlatTransferFeesMin.Value;                          nudTransferFees.Maximum = ((SavingsBookProduct)product).FlatTransferFeesMax.Value;                          lbTransferFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                              "Min "' ((SavingsBookProduct)product).FlatTransferFeesMin.GetFormatedValue(product.Currency.UseCents)'                              "Max "' ((SavingsBookProduct)product).FlatTransferFeesMax.GetFormatedValue(product.Currency.UseCents)'                              product.Currency.Code);                      }                  }                  else                  {                      nudTransferFees.DecimalPlaces = 4;                      nudTransferFees.Increment = 0.0001m;                      if (((SavingsBookProduct)product).RateTransferFees.HasValue)                      {                          nudTransferFees.Enabled = false;                          nudTransferFees.Minimum = (decimal)((SavingsBookProduct)product).RateTransferFees.Value * 100;                          nudTransferFees.Maximum = (decimal)((SavingsBookProduct)product).RateTransferFees.Value * 100;                          lbTransferFeesMinMax.Text = string.Format("{0} {1}"' (((SavingsBookProduct)product).RateTransferFees * 100)' "%");                      }                      else                      {                          nudTransferFees.Enabled = true;                          nudTransferFees.Minimum = (decimal)((SavingsBookProduct)product).RateTransferFeesMin.Value * 100;                          nudTransferFees.Maximum = (decimal)((SavingsBookProduct)product).RateTransferFeesMax.Value * 100;                          lbTransferFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                              "Min "' (((SavingsBookProduct)product).RateTransferFeesMin * 100)'                              "Max "' (((SavingsBookProduct)product).RateTransferFeesMax * 100)'                              "%");                      }                  }                    //Cash Deposit fees                  nudDepositFees.DecimalPlaces = 0;                  nudDepositFees.Increment = 1;                  if (((SavingsBookProduct)product).DepositFees.HasValue)                  {                      nudDepositFees.Enabled = false;                      nudDepositFees.Minimum = ((SavingsBookProduct)product).DepositFees.Value;                      nudDepositFees.Maximum = ((SavingsBookProduct)product).DepositFees.Value;                      lbDepositFeesMinMax.Text = string.Format("{0} {1}"'                                                               ((SavingsBookProduct)product).DepositFees.GetFormatedValue(product.Currency.UseCents)'                                                               product.Currency.Code);                  }                  else                  {                      nudDepositFees.Enabled = true;                      nudDepositFees.Minimum = ((SavingsBookProduct)product).DepositFeesMin.Value;                      nudDepositFees.Maximum = ((SavingsBookProduct)product).DepositFeesMax.Value;                      lbDepositFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                                                               "Min "' ((SavingsBookProduct)product).DepositFeesMin.GetFormatedValue(product.Currency.UseCents)'                                                               "Max "' ((SavingsBookProduct)product).DepositFeesMax.GetFormatedValue(product.Currency.UseCents)'                                                               product.Currency.Code);                  }                    //Cheque Deposit fees                  nudChequeDepositFees.DecimalPlaces = 0;                  nudChequeDepositFees.Increment = 1;                  if (((SavingsBookProduct)product).ChequeDepositFees.HasValue)                  {                      nudChequeDepositFees.Enabled = false;                      nudChequeDepositFees.Maximum = ((SavingsBookProduct)product).ChequeDepositFees.Value;                      nudChequeDepositFees.Minimum = ((SavingsBookProduct)product).ChequeDepositFees.Value;                      lblChequeDepositFeesMinMax.Text = string.Format("{0} {1}"'                                                               ((SavingsBookProduct)product).ChequeDepositFees.GetFormatedValue(product.Currency.UseCents)'                                                               product.Currency.Code);                  }                  else                  {                      nudChequeDepositFees.Enabled = true;                      nudChequeDepositFees.Minimum = ((SavingsBookProduct)product).ChequeDepositFeesMin.Value;                      nudChequeDepositFees.Maximum = ((SavingsBookProduct)product).ChequeDepositFeesMax.Value;                      lblChequeDepositFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                                                               "Min "' ((SavingsBookProduct)product).ChequeDepositFeesMin.GetFormatedValue(product.Currency.UseCents)'                                                               "Max "' ((SavingsBookProduct)product).ChequeDepositFeesMax.GetFormatedValue(product.Currency.UseCents)'                                                               product.Currency.Code);                  }                    // Close fees                  nudCloseFees.DecimalPlaces = 0;                  nudCloseFees.Increment = 1;                  if (((SavingsBookProduct)product).CloseFees.HasValue)                  {                      nudCloseFees.Enabled = false;                      nudCloseFees.Minimum = ((SavingsBookProduct)product).CloseFees.Value;                      nudCloseFees.Maximum = ((SavingsBookProduct)product).CloseFees.Value;                      lbCloseFeesMinMax.Text = string.Format("{0} {1}"'                          ((SavingsBookProduct)product).CloseFees.GetFormatedValue(product.Currency.UseCents)' product.Currency.Code);                  }                  else                  {                      nudCloseFees.Enabled = true;                      nudCloseFees.Minimum = ((SavingsBookProduct)product).CloseFeesMin.Value;                      nudCloseFees.Maximum = ((SavingsBookProduct)product).CloseFeesMax.Value;                      lbCloseFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                          "Min "' ((SavingsBookProduct)product).CloseFeesMin.GetFormatedValue(product.Currency.UseCents)'                          "Max "' ((SavingsBookProduct)product).CloseFeesMax.GetFormatedValue(product.Currency.UseCents)'                          product.Currency.Code);                  }                    // Management fees                  nudManagementFees.DecimalPlaces = 0;                  nudManagementFees.Increment = 1;                  if (((SavingsBookProduct)product).ManagementFees.HasValue)                  {                      nudManagementFees.Enabled = false;                      nudManagementFees.Minimum = ((SavingsBookProduct)product).ManagementFees.Value;                      nudManagementFees.Maximum = ((SavingsBookProduct)product).ManagementFees.Value;                      lbManagementFeesMinMax.Text = string.Format("{0} {1}"'                          ((SavingsBookProduct)product).ManagementFees.GetFormatedValue(product.Currency.UseCents)' product.Currency.Code);                  }                  else                  {                      nudManagementFees.Enabled = true;                      nudManagementFees.Minimum = ((SavingsBookProduct)product).ManagementFeesMin.Value;                      nudManagementFees.Maximum = ((SavingsBookProduct)product).ManagementFeesMax.Value;                      lbManagementFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                          "Min "' ((SavingsBookProduct)product).ManagementFeesMin.GetFormatedValue(product.Currency.UseCents)'                          "Max "' ((SavingsBookProduct)product).ManagementFeesMax.GetFormatedValue(product.Currency.UseCents)'                          product.Currency.Code);                  }                    // Overdraft fees                  nudOverdraftFees.DecimalPlaces = 0;                  nudOverdraftFees.Increment = 1;                  if (((SavingsBookProduct)product).OverdraftFees.HasValue)                  {                      nudOverdraftFees.Enabled = false;                      nudOverdraftFees.Minimum = ((SavingsBookProduct)product).OverdraftFees.Value;                      nudOverdraftFees.Maximum = ((SavingsBookProduct)product).OverdraftFees.Value;                      lbOverdraftFeesMinMax.Text = string.Format("{0} {1}"'                          ((SavingsBookProduct)product).OverdraftFees.GetFormatedValue(product.Currency.UseCents)' product.Currency.Code);                  }                  else                  {                      nudOverdraftFees.Enabled = true;                      nudOverdraftFees.Minimum = ((SavingsBookProduct)product).OverdraftFeesMin.Value;                      nudOverdraftFees.Maximum = ((SavingsBookProduct)product).OverdraftFeesMax.Value;                      lbOverdraftFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                          "Min "' ((SavingsBookProduct)product).OverdraftFeesMin.GetFormatedValue(product.Currency.UseCents)'                          "Max "' ((SavingsBookProduct)product).OverdraftFeesMax.GetFormatedValue(product.Currency.UseCents)'                          product.Currency.Code);                  }                    // Agio fees                  nudAgioFees.DecimalPlaces = 4;                  nudAgioFees.Increment = 0.0001m;                  if (((SavingsBookProduct)product).AgioFees.HasValue)                  {                      nudAgioFees.Enabled = false;                      nudAgioFees.Minimum = (decimal)((SavingsBookProduct)product).AgioFees.Value * 100;                      nudAgioFees.Maximum = (decimal)((SavingsBookProduct)product).AgioFees.Value * 100;                      lbAgioFeesMinMax.Text = string.Format("{0} {1}"' ((SavingsBookProduct)product).AgioFees * 100' "%");                  }                  else                  {                      nudAgioFees.Enabled = true;                      nudAgioFees.Minimum = (decimal)((SavingsBookProduct)product).AgioFeesMin.Value * 100;                      nudAgioFees.Maximum = (decimal)((SavingsBookProduct)product).AgioFeesMax.Value * 100;                      lbAgioFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                          "Min "' ((SavingsBookProduct)product).AgioFeesMin * 100'                          "Max "' ((SavingsBookProduct)product).AgioFeesMax * 100' "%");                  }                    //Reopen fees                  nudReopenFees.DecimalPlaces = 0;                  nudReopenFees.Increment = 1;                    if (((SavingsBookProduct)product).ReopenFees.HasValue)                  {                      nudReopenFees.Enabled = false;                      nudReopenFees.Minimum = ((SavingsBookProduct)product).ReopenFees.Value;                      nudReopenFees.Maximum = ((SavingsBookProduct)product).ReopenFees.Value;                      lbReopenFeesMinMax.Text = string.Format("{0} {1}"'                                                               ((SavingsBookProduct)product).ReopenFees.GetFormatedValue(product.Currency.UseCents)'                                                               product.Currency.Code);                  }                  else                  {                      nudReopenFees.Enabled = true;                      nudReopenFees.Minimum = ((SavingsBookProduct)product).ReopenFeesMin.Value;                      nudReopenFees.Maximum = ((SavingsBookProduct)product).ReopenFeesMax.Value;                      lbReopenFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                                                               "Min "' ((SavingsBookProduct)product).ReopenFeesMin.GetFormatedValue(product.Currency.UseCents)'                                                               "Max "' ((SavingsBookProduct)product).ReopenFeesMax.GetFormatedValue(product.Currency.UseCents)'                                                               product.Currency.Code);                  }                    if (((SavingsBookProduct)product).UseTermDeposit)                  {                      nudNumberOfPeriods.Enabled = true;                      btSearchContract2.Enabled = true;                      cmbRollover2.Enabled = true;                      nudNumberOfPeriods.Minimum = (decimal)((SavingsBookProduct)product).TermDepositPeriodMin;                      nudNumberOfPeriods.Maximum = (decimal)((SavingsBookProduct)product).TermDepositPeriodMax;                      nudNumberOfPeriods.Value = nudNumberOfPeriods.Minimum;                      tbTargetAccount2.ResetText();                  }                }
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,DisplaySavingProduct,The following statement contains a magic number: if (product is SavingsBookProduct)              {                  gbDepositInterest.Visible = false;                  gbInterest.Visible = true;                    lbWithdrawFees.Visible = true;                  nudWithdrawFees.Visible = true;                  lbWithdrawFeesMinMax.Visible = true;                    lbEntryFees.Visible = true;                  nudEntryFees.Visible = true;                  lbEntryFeesMinMax.Visible = true;                    lbTransferFees.Visible = true;                  nudTransferFees.Visible = true;                  nudIbtFee.Visible = true;                  lbTransferFeesMinMax.Visible = true;                    lbDepositFees.Visible = true;                  nudDepositFees.Visible = true;                  lbDepositFeesMinMax.Visible = true;                    lbChequeDepositFees.Visible = true;                  nudChequeDepositFees.Visible = true;                  lblChequeDepositFeesMinMax.Visible = true;                    lbCloseFees.Visible = true;                  nudCloseFees.Visible = true;                  lbCloseFeesMinMax.Visible = true;                    lbManagementFees.Visible = true;                  nudManagementFees.Visible = true;                  lbManagementFeesMinMax.Visible = true;                    lbOverdraftFees.Visible = true;                  nudOverdraftFees.Visible = true;                  lbOverdraftFeesMinMax.Visible = true;                    lbAgioFees.Visible = true;                  nudAgioFees.Visible = true;                  lbAgioFeesMinMax.Visible = true;                    lbReopenFees.Visible = true;                  nudReopenFees.Visible = true;                  lbReopenFeesMinMax.Visible = true;                    lbInterestAccrualValue.Text = MultiLanguageStrings.GetString(Ressource.FrmAddSavingProduct' ((SavingsBookProduct)product).InterestBase + ".Text");                  lbInterestPostingValue.Text = MultiLanguageStrings.GetString(Ressource.FrmAddSavingProduct' ((SavingsBookProduct)product).InterestFrequency + ".Text");                  lbInterestBasedOnValue.Text = ((SavingsBookProduct)product).CalculAmountBase.HasValue ? MultiLanguageStrings.GetString(Ressource.FrmAddSavingProduct' ((SavingsBookProduct)product).CalculAmountBase + ".Text") : "------";                    savingDepositToolStripMenuItem.Enabled = true;                  savingWithdrawToolStripMenuItem.Enabled = true;                  savingTransferToolStripMenuItem.Enabled = true;                    // entry fees                  nudEntryFees.DecimalPlaces = 0;                  nudEntryFees.Increment = 1;                  if (((SavingsBookProduct)product).EntryFees.HasValue)                  {                      nudEntryFees.Enabled = false;                      nudEntryFees.Minimum = ((SavingsBookProduct)product).EntryFees.Value;                      nudEntryFees.Maximum = ((SavingsBookProduct)product).EntryFees.Value;                      lbEntryFeesMinMax.Text = string.Format("{0} {1}"' ((SavingsBookProduct)product).EntryFees.GetFormatedValue(product.Currency.UseCents)' product.Currency.Code);                  }                  else                  {                      nudEntryFees.Enabled = true;                      nudEntryFees.Minimum = ((SavingsBookProduct)product).EntryFeesMin.Value;                      nudEntryFees.Maximum = ((SavingsBookProduct)product).EntryFeesMax.Value;                      lbEntryFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                          "Min "' ((SavingsBookProduct)product).EntryFeesMin.GetFormatedValue(product.Currency.UseCents)'                          "Max "' ((SavingsBookProduct)product).EntryFeesMax.GetFormatedValue(product.Currency.UseCents)'                          product.Currency.Code);                  }                    // withdraw fees                  if (((SavingsBookProduct)product).WithdrawFeesType == OSavingsFeesType.Flat)                  {                      nudWithdrawFees.DecimalPlaces = 0;                      nudWithdrawFees.Increment = 1;                      if (((SavingsBookProduct)product).FlatWithdrawFees.HasValue)                      {                          nudWithdrawFees.Enabled = false;                          nudWithdrawFees.Minimum = ((SavingsBookProduct)product).FlatWithdrawFees.Value;                          nudWithdrawFees.Maximum = ((SavingsBookProduct)product).FlatWithdrawFees.Value;                          lbWithdrawFeesMinMax.Text = string.Format("{0} {1}"' ((SavingsBookProduct)product).FlatWithdrawFees.GetFormatedValue(product.Currency.UseCents)' product.Currency.Code);                      }                      else                      {                          nudWithdrawFees.Enabled = true;                          nudWithdrawFees.Minimum = ((SavingsBookProduct)product).FlatWithdrawFeesMin.Value;                          nudWithdrawFees.Maximum = ((SavingsBookProduct)product).FlatWithdrawFeesMax.Value;                          lbWithdrawFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                              "Min "' ((SavingsBookProduct)product).FlatWithdrawFeesMin.GetFormatedValue(product.Currency.UseCents)'                              "Max "' ((SavingsBookProduct)product).FlatWithdrawFeesMax.GetFormatedValue(product.Currency.UseCents)'                              product.Currency.Code);                      }                  }                  else                  {                      nudWithdrawFees.DecimalPlaces = 4;                      nudWithdrawFees.Increment = 0.0001m;                      if (((SavingsBookProduct)product).RateWithdrawFees.HasValue)                      {                          nudWithdrawFees.Enabled = false;                          nudWithdrawFees.Minimum = (decimal)((SavingsBookProduct)product).RateWithdrawFees.Value * 100;                          nudWithdrawFees.Maximum = (decimal)((SavingsBookProduct)product).RateWithdrawFees.Value * 100;                          lbWithdrawFeesMinMax.Text = string.Format("{0} {1}"' (((SavingsBookProduct)product).RateWithdrawFees * 100)' "%");                      }                      else                      {                          nudWithdrawFees.Enabled = true;                          nudWithdrawFees.Minimum = (decimal)((SavingsBookProduct)product).RateWithdrawFeesMin.Value * 100;                          nudWithdrawFees.Maximum = (decimal)((SavingsBookProduct)product).RateWithdrawFeesMax.Value * 100;                          lbWithdrawFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                              "Min "' (((SavingsBookProduct)product).RateWithdrawFeesMin * 100)'                              "Max "' (((SavingsBookProduct)product).RateWithdrawFeesMax * 100)'                              "%");                      }                  }                    // Inter-branch tansfer fee                  SavingsBookProduct p = (SavingsBookProduct)product;                  Fee fee = p.InterBranchTransferFee;                  nudIbtFee.DecimalPlaces = fee.IsFlat ? 0 : 2;                  nudIbtFee.Increment = fee.IsFlat ? 1 : 0.01m;                  nudIbtFee.Enabled = !fee.Value.HasValue;                  nudIbtFee.Minimum = fee.GetMin();                  nudIbtFee.Maximum = fee.GetMax();                  if (fee.IsRange)                  {                      string min = fee.GetMinFormatted(p.Currency);                      string max = fee.GetMaxFormatted(p.Currency);                      const string mask = "Min {0}\r\nMax {1}";                      lblIbtFeeMinMax.Text = string.Format(mask' min' max);                  }                  else                  {                      lblIbtFeeMinMax.Text = fee.GetValueFormatted(p.Currency);                  }                    if (((SavingsBookProduct)product).TransferFeesType == OSavingsFeesType.Flat)                  {                      nudTransferFees.DecimalPlaces = 0;                      nudTransferFees.Increment = 1;                      if (((SavingsBookProduct)product).FlatTransferFees.HasValue)                      {                          nudTransferFees.Enabled = false;                          nudTransferFees.Minimum = ((SavingsBookProduct)product).FlatTransferFees.Value;                          nudTransferFees.Maximum = ((SavingsBookProduct)product).FlatTransferFees.Value;                          lbTransferFeesMinMax.Text = string.Format("{0} {1}"' ((SavingsBookProduct)product).FlatTransferFees.GetFormatedValue(product.Currency.UseCents)' product.Currency.Code);                      }                      else                      {                          nudTransferFees.Enabled = true;                          nudTransferFees.Minimum = ((SavingsBookProduct)product).FlatTransferFeesMin.Value;                          nudTransferFees.Maximum = ((SavingsBookProduct)product).FlatTransferFeesMax.Value;                          lbTransferFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                              "Min "' ((SavingsBookProduct)product).FlatTransferFeesMin.GetFormatedValue(product.Currency.UseCents)'                              "Max "' ((SavingsBookProduct)product).FlatTransferFeesMax.GetFormatedValue(product.Currency.UseCents)'                              product.Currency.Code);                      }                  }                  else                  {                      nudTransferFees.DecimalPlaces = 4;                      nudTransferFees.Increment = 0.0001m;                      if (((SavingsBookProduct)product).RateTransferFees.HasValue)                      {                          nudTransferFees.Enabled = false;                          nudTransferFees.Minimum = (decimal)((SavingsBookProduct)product).RateTransferFees.Value * 100;                          nudTransferFees.Maximum = (decimal)((SavingsBookProduct)product).RateTransferFees.Value * 100;                          lbTransferFeesMinMax.Text = string.Format("{0} {1}"' (((SavingsBookProduct)product).RateTransferFees * 100)' "%");                      }                      else                      {                          nudTransferFees.Enabled = true;                          nudTransferFees.Minimum = (decimal)((SavingsBookProduct)product).RateTransferFeesMin.Value * 100;                          nudTransferFees.Maximum = (decimal)((SavingsBookProduct)product).RateTransferFeesMax.Value * 100;                          lbTransferFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                              "Min "' (((SavingsBookProduct)product).RateTransferFeesMin * 100)'                              "Max "' (((SavingsBookProduct)product).RateTransferFeesMax * 100)'                              "%");                      }                  }                    //Cash Deposit fees                  nudDepositFees.DecimalPlaces = 0;                  nudDepositFees.Increment = 1;                  if (((SavingsBookProduct)product).DepositFees.HasValue)                  {                      nudDepositFees.Enabled = false;                      nudDepositFees.Minimum = ((SavingsBookProduct)product).DepositFees.Value;                      nudDepositFees.Maximum = ((SavingsBookProduct)product).DepositFees.Value;                      lbDepositFeesMinMax.Text = string.Format("{0} {1}"'                                                               ((SavingsBookProduct)product).DepositFees.GetFormatedValue(product.Currency.UseCents)'                                                               product.Currency.Code);                  }                  else                  {                      nudDepositFees.Enabled = true;                      nudDepositFees.Minimum = ((SavingsBookProduct)product).DepositFeesMin.Value;                      nudDepositFees.Maximum = ((SavingsBookProduct)product).DepositFeesMax.Value;                      lbDepositFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                                                               "Min "' ((SavingsBookProduct)product).DepositFeesMin.GetFormatedValue(product.Currency.UseCents)'                                                               "Max "' ((SavingsBookProduct)product).DepositFeesMax.GetFormatedValue(product.Currency.UseCents)'                                                               product.Currency.Code);                  }                    //Cheque Deposit fees                  nudChequeDepositFees.DecimalPlaces = 0;                  nudChequeDepositFees.Increment = 1;                  if (((SavingsBookProduct)product).ChequeDepositFees.HasValue)                  {                      nudChequeDepositFees.Enabled = false;                      nudChequeDepositFees.Maximum = ((SavingsBookProduct)product).ChequeDepositFees.Value;                      nudChequeDepositFees.Minimum = ((SavingsBookProduct)product).ChequeDepositFees.Value;                      lblChequeDepositFeesMinMax.Text = string.Format("{0} {1}"'                                                               ((SavingsBookProduct)product).ChequeDepositFees.GetFormatedValue(product.Currency.UseCents)'                                                               product.Currency.Code);                  }                  else                  {                      nudChequeDepositFees.Enabled = true;                      nudChequeDepositFees.Minimum = ((SavingsBookProduct)product).ChequeDepositFeesMin.Value;                      nudChequeDepositFees.Maximum = ((SavingsBookProduct)product).ChequeDepositFeesMax.Value;                      lblChequeDepositFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                                                               "Min "' ((SavingsBookProduct)product).ChequeDepositFeesMin.GetFormatedValue(product.Currency.UseCents)'                                                               "Max "' ((SavingsBookProduct)product).ChequeDepositFeesMax.GetFormatedValue(product.Currency.UseCents)'                                                               product.Currency.Code);                  }                    // Close fees                  nudCloseFees.DecimalPlaces = 0;                  nudCloseFees.Increment = 1;                  if (((SavingsBookProduct)product).CloseFees.HasValue)                  {                      nudCloseFees.Enabled = false;                      nudCloseFees.Minimum = ((SavingsBookProduct)product).CloseFees.Value;                      nudCloseFees.Maximum = ((SavingsBookProduct)product).CloseFees.Value;                      lbCloseFeesMinMax.Text = string.Format("{0} {1}"'                          ((SavingsBookProduct)product).CloseFees.GetFormatedValue(product.Currency.UseCents)' product.Currency.Code);                  }                  else                  {                      nudCloseFees.Enabled = true;                      nudCloseFees.Minimum = ((SavingsBookProduct)product).CloseFeesMin.Value;                      nudCloseFees.Maximum = ((SavingsBookProduct)product).CloseFeesMax.Value;                      lbCloseFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                          "Min "' ((SavingsBookProduct)product).CloseFeesMin.GetFormatedValue(product.Currency.UseCents)'                          "Max "' ((SavingsBookProduct)product).CloseFeesMax.GetFormatedValue(product.Currency.UseCents)'                          product.Currency.Code);                  }                    // Management fees                  nudManagementFees.DecimalPlaces = 0;                  nudManagementFees.Increment = 1;                  if (((SavingsBookProduct)product).ManagementFees.HasValue)                  {                      nudManagementFees.Enabled = false;                      nudManagementFees.Minimum = ((SavingsBookProduct)product).ManagementFees.Value;                      nudManagementFees.Maximum = ((SavingsBookProduct)product).ManagementFees.Value;                      lbManagementFeesMinMax.Text = string.Format("{0} {1}"'                          ((SavingsBookProduct)product).ManagementFees.GetFormatedValue(product.Currency.UseCents)' product.Currency.Code);                  }                  else                  {                      nudManagementFees.Enabled = true;                      nudManagementFees.Minimum = ((SavingsBookProduct)product).ManagementFeesMin.Value;                      nudManagementFees.Maximum = ((SavingsBookProduct)product).ManagementFeesMax.Value;                      lbManagementFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                          "Min "' ((SavingsBookProduct)product).ManagementFeesMin.GetFormatedValue(product.Currency.UseCents)'                          "Max "' ((SavingsBookProduct)product).ManagementFeesMax.GetFormatedValue(product.Currency.UseCents)'                          product.Currency.Code);                  }                    // Overdraft fees                  nudOverdraftFees.DecimalPlaces = 0;                  nudOverdraftFees.Increment = 1;                  if (((SavingsBookProduct)product).OverdraftFees.HasValue)                  {                      nudOverdraftFees.Enabled = false;                      nudOverdraftFees.Minimum = ((SavingsBookProduct)product).OverdraftFees.Value;                      nudOverdraftFees.Maximum = ((SavingsBookProduct)product).OverdraftFees.Value;                      lbOverdraftFeesMinMax.Text = string.Format("{0} {1}"'                          ((SavingsBookProduct)product).OverdraftFees.GetFormatedValue(product.Currency.UseCents)' product.Currency.Code);                  }                  else                  {                      nudOverdraftFees.Enabled = true;                      nudOverdraftFees.Minimum = ((SavingsBookProduct)product).OverdraftFeesMin.Value;                      nudOverdraftFees.Maximum = ((SavingsBookProduct)product).OverdraftFeesMax.Value;                      lbOverdraftFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                          "Min "' ((SavingsBookProduct)product).OverdraftFeesMin.GetFormatedValue(product.Currency.UseCents)'                          "Max "' ((SavingsBookProduct)product).OverdraftFeesMax.GetFormatedValue(product.Currency.UseCents)'                          product.Currency.Code);                  }                    // Agio fees                  nudAgioFees.DecimalPlaces = 4;                  nudAgioFees.Increment = 0.0001m;                  if (((SavingsBookProduct)product).AgioFees.HasValue)                  {                      nudAgioFees.Enabled = false;                      nudAgioFees.Minimum = (decimal)((SavingsBookProduct)product).AgioFees.Value * 100;                      nudAgioFees.Maximum = (decimal)((SavingsBookProduct)product).AgioFees.Value * 100;                      lbAgioFeesMinMax.Text = string.Format("{0} {1}"' ((SavingsBookProduct)product).AgioFees * 100' "%");                  }                  else                  {                      nudAgioFees.Enabled = true;                      nudAgioFees.Minimum = (decimal)((SavingsBookProduct)product).AgioFeesMin.Value * 100;                      nudAgioFees.Maximum = (decimal)((SavingsBookProduct)product).AgioFeesMax.Value * 100;                      lbAgioFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                          "Min "' ((SavingsBookProduct)product).AgioFeesMin * 100'                          "Max "' ((SavingsBookProduct)product).AgioFeesMax * 100' "%");                  }                    //Reopen fees                  nudReopenFees.DecimalPlaces = 0;                  nudReopenFees.Increment = 1;                    if (((SavingsBookProduct)product).ReopenFees.HasValue)                  {                      nudReopenFees.Enabled = false;                      nudReopenFees.Minimum = ((SavingsBookProduct)product).ReopenFees.Value;                      nudReopenFees.Maximum = ((SavingsBookProduct)product).ReopenFees.Value;                      lbReopenFeesMinMax.Text = string.Format("{0} {1}"'                                                               ((SavingsBookProduct)product).ReopenFees.GetFormatedValue(product.Currency.UseCents)'                                                               product.Currency.Code);                  }                  else                  {                      nudReopenFees.Enabled = true;                      nudReopenFees.Minimum = ((SavingsBookProduct)product).ReopenFeesMin.Value;                      nudReopenFees.Maximum = ((SavingsBookProduct)product).ReopenFeesMax.Value;                      lbReopenFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                                                               "Min "' ((SavingsBookProduct)product).ReopenFeesMin.GetFormatedValue(product.Currency.UseCents)'                                                               "Max "' ((SavingsBookProduct)product).ReopenFeesMax.GetFormatedValue(product.Currency.UseCents)'                                                               product.Currency.Code);                  }                    if (((SavingsBookProduct)product).UseTermDeposit)                  {                      nudNumberOfPeriods.Enabled = true;                      btSearchContract2.Enabled = true;                      cmbRollover2.Enabled = true;                      nudNumberOfPeriods.Minimum = (decimal)((SavingsBookProduct)product).TermDepositPeriodMin;                      nudNumberOfPeriods.Maximum = (decimal)((SavingsBookProduct)product).TermDepositPeriodMax;                      nudNumberOfPeriods.Value = nudNumberOfPeriods.Minimum;                      tbTargetAccount2.ResetText();                  }                }
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,DisplaySavingProduct,The following statement contains a magic number: if (product is SavingsBookProduct)              {                  gbDepositInterest.Visible = false;                  gbInterest.Visible = true;                    lbWithdrawFees.Visible = true;                  nudWithdrawFees.Visible = true;                  lbWithdrawFeesMinMax.Visible = true;                    lbEntryFees.Visible = true;                  nudEntryFees.Visible = true;                  lbEntryFeesMinMax.Visible = true;                    lbTransferFees.Visible = true;                  nudTransferFees.Visible = true;                  nudIbtFee.Visible = true;                  lbTransferFeesMinMax.Visible = true;                    lbDepositFees.Visible = true;                  nudDepositFees.Visible = true;                  lbDepositFeesMinMax.Visible = true;                    lbChequeDepositFees.Visible = true;                  nudChequeDepositFees.Visible = true;                  lblChequeDepositFeesMinMax.Visible = true;                    lbCloseFees.Visible = true;                  nudCloseFees.Visible = true;                  lbCloseFeesMinMax.Visible = true;                    lbManagementFees.Visible = true;                  nudManagementFees.Visible = true;                  lbManagementFeesMinMax.Visible = true;                    lbOverdraftFees.Visible = true;                  nudOverdraftFees.Visible = true;                  lbOverdraftFeesMinMax.Visible = true;                    lbAgioFees.Visible = true;                  nudAgioFees.Visible = true;                  lbAgioFeesMinMax.Visible = true;                    lbReopenFees.Visible = true;                  nudReopenFees.Visible = true;                  lbReopenFeesMinMax.Visible = true;                    lbInterestAccrualValue.Text = MultiLanguageStrings.GetString(Ressource.FrmAddSavingProduct' ((SavingsBookProduct)product).InterestBase + ".Text");                  lbInterestPostingValue.Text = MultiLanguageStrings.GetString(Ressource.FrmAddSavingProduct' ((SavingsBookProduct)product).InterestFrequency + ".Text");                  lbInterestBasedOnValue.Text = ((SavingsBookProduct)product).CalculAmountBase.HasValue ? MultiLanguageStrings.GetString(Ressource.FrmAddSavingProduct' ((SavingsBookProduct)product).CalculAmountBase + ".Text") : "------";                    savingDepositToolStripMenuItem.Enabled = true;                  savingWithdrawToolStripMenuItem.Enabled = true;                  savingTransferToolStripMenuItem.Enabled = true;                    // entry fees                  nudEntryFees.DecimalPlaces = 0;                  nudEntryFees.Increment = 1;                  if (((SavingsBookProduct)product).EntryFees.HasValue)                  {                      nudEntryFees.Enabled = false;                      nudEntryFees.Minimum = ((SavingsBookProduct)product).EntryFees.Value;                      nudEntryFees.Maximum = ((SavingsBookProduct)product).EntryFees.Value;                      lbEntryFeesMinMax.Text = string.Format("{0} {1}"' ((SavingsBookProduct)product).EntryFees.GetFormatedValue(product.Currency.UseCents)' product.Currency.Code);                  }                  else                  {                      nudEntryFees.Enabled = true;                      nudEntryFees.Minimum = ((SavingsBookProduct)product).EntryFeesMin.Value;                      nudEntryFees.Maximum = ((SavingsBookProduct)product).EntryFeesMax.Value;                      lbEntryFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                          "Min "' ((SavingsBookProduct)product).EntryFeesMin.GetFormatedValue(product.Currency.UseCents)'                          "Max "' ((SavingsBookProduct)product).EntryFeesMax.GetFormatedValue(product.Currency.UseCents)'                          product.Currency.Code);                  }                    // withdraw fees                  if (((SavingsBookProduct)product).WithdrawFeesType == OSavingsFeesType.Flat)                  {                      nudWithdrawFees.DecimalPlaces = 0;                      nudWithdrawFees.Increment = 1;                      if (((SavingsBookProduct)product).FlatWithdrawFees.HasValue)                      {                          nudWithdrawFees.Enabled = false;                          nudWithdrawFees.Minimum = ((SavingsBookProduct)product).FlatWithdrawFees.Value;                          nudWithdrawFees.Maximum = ((SavingsBookProduct)product).FlatWithdrawFees.Value;                          lbWithdrawFeesMinMax.Text = string.Format("{0} {1}"' ((SavingsBookProduct)product).FlatWithdrawFees.GetFormatedValue(product.Currency.UseCents)' product.Currency.Code);                      }                      else                      {                          nudWithdrawFees.Enabled = true;                          nudWithdrawFees.Minimum = ((SavingsBookProduct)product).FlatWithdrawFeesMin.Value;                          nudWithdrawFees.Maximum = ((SavingsBookProduct)product).FlatWithdrawFeesMax.Value;                          lbWithdrawFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                              "Min "' ((SavingsBookProduct)product).FlatWithdrawFeesMin.GetFormatedValue(product.Currency.UseCents)'                              "Max "' ((SavingsBookProduct)product).FlatWithdrawFeesMax.GetFormatedValue(product.Currency.UseCents)'                              product.Currency.Code);                      }                  }                  else                  {                      nudWithdrawFees.DecimalPlaces = 4;                      nudWithdrawFees.Increment = 0.0001m;                      if (((SavingsBookProduct)product).RateWithdrawFees.HasValue)                      {                          nudWithdrawFees.Enabled = false;                          nudWithdrawFees.Minimum = (decimal)((SavingsBookProduct)product).RateWithdrawFees.Value * 100;                          nudWithdrawFees.Maximum = (decimal)((SavingsBookProduct)product).RateWithdrawFees.Value * 100;                          lbWithdrawFeesMinMax.Text = string.Format("{0} {1}"' (((SavingsBookProduct)product).RateWithdrawFees * 100)' "%");                      }                      else                      {                          nudWithdrawFees.Enabled = true;                          nudWithdrawFees.Minimum = (decimal)((SavingsBookProduct)product).RateWithdrawFeesMin.Value * 100;                          nudWithdrawFees.Maximum = (decimal)((SavingsBookProduct)product).RateWithdrawFeesMax.Value * 100;                          lbWithdrawFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                              "Min "' (((SavingsBookProduct)product).RateWithdrawFeesMin * 100)'                              "Max "' (((SavingsBookProduct)product).RateWithdrawFeesMax * 100)'                              "%");                      }                  }                    // Inter-branch tansfer fee                  SavingsBookProduct p = (SavingsBookProduct)product;                  Fee fee = p.InterBranchTransferFee;                  nudIbtFee.DecimalPlaces = fee.IsFlat ? 0 : 2;                  nudIbtFee.Increment = fee.IsFlat ? 1 : 0.01m;                  nudIbtFee.Enabled = !fee.Value.HasValue;                  nudIbtFee.Minimum = fee.GetMin();                  nudIbtFee.Maximum = fee.GetMax();                  if (fee.IsRange)                  {                      string min = fee.GetMinFormatted(p.Currency);                      string max = fee.GetMaxFormatted(p.Currency);                      const string mask = "Min {0}\r\nMax {1}";                      lblIbtFeeMinMax.Text = string.Format(mask' min' max);                  }                  else                  {                      lblIbtFeeMinMax.Text = fee.GetValueFormatted(p.Currency);                  }                    if (((SavingsBookProduct)product).TransferFeesType == OSavingsFeesType.Flat)                  {                      nudTransferFees.DecimalPlaces = 0;                      nudTransferFees.Increment = 1;                      if (((SavingsBookProduct)product).FlatTransferFees.HasValue)                      {                          nudTransferFees.Enabled = false;                          nudTransferFees.Minimum = ((SavingsBookProduct)product).FlatTransferFees.Value;                          nudTransferFees.Maximum = ((SavingsBookProduct)product).FlatTransferFees.Value;                          lbTransferFeesMinMax.Text = string.Format("{0} {1}"' ((SavingsBookProduct)product).FlatTransferFees.GetFormatedValue(product.Currency.UseCents)' product.Currency.Code);                      }                      else                      {                          nudTransferFees.Enabled = true;                          nudTransferFees.Minimum = ((SavingsBookProduct)product).FlatTransferFeesMin.Value;                          nudTransferFees.Maximum = ((SavingsBookProduct)product).FlatTransferFeesMax.Value;                          lbTransferFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                              "Min "' ((SavingsBookProduct)product).FlatTransferFeesMin.GetFormatedValue(product.Currency.UseCents)'                              "Max "' ((SavingsBookProduct)product).FlatTransferFeesMax.GetFormatedValue(product.Currency.UseCents)'                              product.Currency.Code);                      }                  }                  else                  {                      nudTransferFees.DecimalPlaces = 4;                      nudTransferFees.Increment = 0.0001m;                      if (((SavingsBookProduct)product).RateTransferFees.HasValue)                      {                          nudTransferFees.Enabled = false;                          nudTransferFees.Minimum = (decimal)((SavingsBookProduct)product).RateTransferFees.Value * 100;                          nudTransferFees.Maximum = (decimal)((SavingsBookProduct)product).RateTransferFees.Value * 100;                          lbTransferFeesMinMax.Text = string.Format("{0} {1}"' (((SavingsBookProduct)product).RateTransferFees * 100)' "%");                      }                      else                      {                          nudTransferFees.Enabled = true;                          nudTransferFees.Minimum = (decimal)((SavingsBookProduct)product).RateTransferFeesMin.Value * 100;                          nudTransferFees.Maximum = (decimal)((SavingsBookProduct)product).RateTransferFeesMax.Value * 100;                          lbTransferFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                              "Min "' (((SavingsBookProduct)product).RateTransferFeesMin * 100)'                              "Max "' (((SavingsBookProduct)product).RateTransferFeesMax * 100)'                              "%");                      }                  }                    //Cash Deposit fees                  nudDepositFees.DecimalPlaces = 0;                  nudDepositFees.Increment = 1;                  if (((SavingsBookProduct)product).DepositFees.HasValue)                  {                      nudDepositFees.Enabled = false;                      nudDepositFees.Minimum = ((SavingsBookProduct)product).DepositFees.Value;                      nudDepositFees.Maximum = ((SavingsBookProduct)product).DepositFees.Value;                      lbDepositFeesMinMax.Text = string.Format("{0} {1}"'                                                               ((SavingsBookProduct)product).DepositFees.GetFormatedValue(product.Currency.UseCents)'                                                               product.Currency.Code);                  }                  else                  {                      nudDepositFees.Enabled = true;                      nudDepositFees.Minimum = ((SavingsBookProduct)product).DepositFeesMin.Value;                      nudDepositFees.Maximum = ((SavingsBookProduct)product).DepositFeesMax.Value;                      lbDepositFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                                                               "Min "' ((SavingsBookProduct)product).DepositFeesMin.GetFormatedValue(product.Currency.UseCents)'                                                               "Max "' ((SavingsBookProduct)product).DepositFeesMax.GetFormatedValue(product.Currency.UseCents)'                                                               product.Currency.Code);                  }                    //Cheque Deposit fees                  nudChequeDepositFees.DecimalPlaces = 0;                  nudChequeDepositFees.Increment = 1;                  if (((SavingsBookProduct)product).ChequeDepositFees.HasValue)                  {                      nudChequeDepositFees.Enabled = false;                      nudChequeDepositFees.Maximum = ((SavingsBookProduct)product).ChequeDepositFees.Value;                      nudChequeDepositFees.Minimum = ((SavingsBookProduct)product).ChequeDepositFees.Value;                      lblChequeDepositFeesMinMax.Text = string.Format("{0} {1}"'                                                               ((SavingsBookProduct)product).ChequeDepositFees.GetFormatedValue(product.Currency.UseCents)'                                                               product.Currency.Code);                  }                  else                  {                      nudChequeDepositFees.Enabled = true;                      nudChequeDepositFees.Minimum = ((SavingsBookProduct)product).ChequeDepositFeesMin.Value;                      nudChequeDepositFees.Maximum = ((SavingsBookProduct)product).ChequeDepositFeesMax.Value;                      lblChequeDepositFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                                                               "Min "' ((SavingsBookProduct)product).ChequeDepositFeesMin.GetFormatedValue(product.Currency.UseCents)'                                                               "Max "' ((SavingsBookProduct)product).ChequeDepositFeesMax.GetFormatedValue(product.Currency.UseCents)'                                                               product.Currency.Code);                  }                    // Close fees                  nudCloseFees.DecimalPlaces = 0;                  nudCloseFees.Increment = 1;                  if (((SavingsBookProduct)product).CloseFees.HasValue)                  {                      nudCloseFees.Enabled = false;                      nudCloseFees.Minimum = ((SavingsBookProduct)product).CloseFees.Value;                      nudCloseFees.Maximum = ((SavingsBookProduct)product).CloseFees.Value;                      lbCloseFeesMinMax.Text = string.Format("{0} {1}"'                          ((SavingsBookProduct)product).CloseFees.GetFormatedValue(product.Currency.UseCents)' product.Currency.Code);                  }                  else                  {                      nudCloseFees.Enabled = true;                      nudCloseFees.Minimum = ((SavingsBookProduct)product).CloseFeesMin.Value;                      nudCloseFees.Maximum = ((SavingsBookProduct)product).CloseFeesMax.Value;                      lbCloseFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                          "Min "' ((SavingsBookProduct)product).CloseFeesMin.GetFormatedValue(product.Currency.UseCents)'                          "Max "' ((SavingsBookProduct)product).CloseFeesMax.GetFormatedValue(product.Currency.UseCents)'                          product.Currency.Code);                  }                    // Management fees                  nudManagementFees.DecimalPlaces = 0;                  nudManagementFees.Increment = 1;                  if (((SavingsBookProduct)product).ManagementFees.HasValue)                  {                      nudManagementFees.Enabled = false;                      nudManagementFees.Minimum = ((SavingsBookProduct)product).ManagementFees.Value;                      nudManagementFees.Maximum = ((SavingsBookProduct)product).ManagementFees.Value;                      lbManagementFeesMinMax.Text = string.Format("{0} {1}"'                          ((SavingsBookProduct)product).ManagementFees.GetFormatedValue(product.Currency.UseCents)' product.Currency.Code);                  }                  else                  {                      nudManagementFees.Enabled = true;                      nudManagementFees.Minimum = ((SavingsBookProduct)product).ManagementFeesMin.Value;                      nudManagementFees.Maximum = ((SavingsBookProduct)product).ManagementFeesMax.Value;                      lbManagementFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                          "Min "' ((SavingsBookProduct)product).ManagementFeesMin.GetFormatedValue(product.Currency.UseCents)'                          "Max "' ((SavingsBookProduct)product).ManagementFeesMax.GetFormatedValue(product.Currency.UseCents)'                          product.Currency.Code);                  }                    // Overdraft fees                  nudOverdraftFees.DecimalPlaces = 0;                  nudOverdraftFees.Increment = 1;                  if (((SavingsBookProduct)product).OverdraftFees.HasValue)                  {                      nudOverdraftFees.Enabled = false;                      nudOverdraftFees.Minimum = ((SavingsBookProduct)product).OverdraftFees.Value;                      nudOverdraftFees.Maximum = ((SavingsBookProduct)product).OverdraftFees.Value;                      lbOverdraftFeesMinMax.Text = string.Format("{0} {1}"'                          ((SavingsBookProduct)product).OverdraftFees.GetFormatedValue(product.Currency.UseCents)' product.Currency.Code);                  }                  else                  {                      nudOverdraftFees.Enabled = true;                      nudOverdraftFees.Minimum = ((SavingsBookProduct)product).OverdraftFeesMin.Value;                      nudOverdraftFees.Maximum = ((SavingsBookProduct)product).OverdraftFeesMax.Value;                      lbOverdraftFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                          "Min "' ((SavingsBookProduct)product).OverdraftFeesMin.GetFormatedValue(product.Currency.UseCents)'                          "Max "' ((SavingsBookProduct)product).OverdraftFeesMax.GetFormatedValue(product.Currency.UseCents)'                          product.Currency.Code);                  }                    // Agio fees                  nudAgioFees.DecimalPlaces = 4;                  nudAgioFees.Increment = 0.0001m;                  if (((SavingsBookProduct)product).AgioFees.HasValue)                  {                      nudAgioFees.Enabled = false;                      nudAgioFees.Minimum = (decimal)((SavingsBookProduct)product).AgioFees.Value * 100;                      nudAgioFees.Maximum = (decimal)((SavingsBookProduct)product).AgioFees.Value * 100;                      lbAgioFeesMinMax.Text = string.Format("{0} {1}"' ((SavingsBookProduct)product).AgioFees * 100' "%");                  }                  else                  {                      nudAgioFees.Enabled = true;                      nudAgioFees.Minimum = (decimal)((SavingsBookProduct)product).AgioFeesMin.Value * 100;                      nudAgioFees.Maximum = (decimal)((SavingsBookProduct)product).AgioFeesMax.Value * 100;                      lbAgioFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                          "Min "' ((SavingsBookProduct)product).AgioFeesMin * 100'                          "Max "' ((SavingsBookProduct)product).AgioFeesMax * 100' "%");                  }                    //Reopen fees                  nudReopenFees.DecimalPlaces = 0;                  nudReopenFees.Increment = 1;                    if (((SavingsBookProduct)product).ReopenFees.HasValue)                  {                      nudReopenFees.Enabled = false;                      nudReopenFees.Minimum = ((SavingsBookProduct)product).ReopenFees.Value;                      nudReopenFees.Maximum = ((SavingsBookProduct)product).ReopenFees.Value;                      lbReopenFeesMinMax.Text = string.Format("{0} {1}"'                                                               ((SavingsBookProduct)product).ReopenFees.GetFormatedValue(product.Currency.UseCents)'                                                               product.Currency.Code);                  }                  else                  {                      nudReopenFees.Enabled = true;                      nudReopenFees.Minimum = ((SavingsBookProduct)product).ReopenFeesMin.Value;                      nudReopenFees.Maximum = ((SavingsBookProduct)product).ReopenFeesMax.Value;                      lbReopenFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                                                               "Min "' ((SavingsBookProduct)product).ReopenFeesMin.GetFormatedValue(product.Currency.UseCents)'                                                               "Max "' ((SavingsBookProduct)product).ReopenFeesMax.GetFormatedValue(product.Currency.UseCents)'                                                               product.Currency.Code);                  }                    if (((SavingsBookProduct)product).UseTermDeposit)                  {                      nudNumberOfPeriods.Enabled = true;                      btSearchContract2.Enabled = true;                      cmbRollover2.Enabled = true;                      nudNumberOfPeriods.Minimum = (decimal)((SavingsBookProduct)product).TermDepositPeriodMin;                      nudNumberOfPeriods.Maximum = (decimal)((SavingsBookProduct)product).TermDepositPeriodMax;                      nudNumberOfPeriods.Value = nudNumberOfPeriods.Minimum;                      tbTargetAccount2.ResetText();                  }                }
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,DisplaySavingProduct,The following statement contains a magic number: if (product is SavingsBookProduct)              {                  gbDepositInterest.Visible = false;                  gbInterest.Visible = true;                    lbWithdrawFees.Visible = true;                  nudWithdrawFees.Visible = true;                  lbWithdrawFeesMinMax.Visible = true;                    lbEntryFees.Visible = true;                  nudEntryFees.Visible = true;                  lbEntryFeesMinMax.Visible = true;                    lbTransferFees.Visible = true;                  nudTransferFees.Visible = true;                  nudIbtFee.Visible = true;                  lbTransferFeesMinMax.Visible = true;                    lbDepositFees.Visible = true;                  nudDepositFees.Visible = true;                  lbDepositFeesMinMax.Visible = true;                    lbChequeDepositFees.Visible = true;                  nudChequeDepositFees.Visible = true;                  lblChequeDepositFeesMinMax.Visible = true;                    lbCloseFees.Visible = true;                  nudCloseFees.Visible = true;                  lbCloseFeesMinMax.Visible = true;                    lbManagementFees.Visible = true;                  nudManagementFees.Visible = true;                  lbManagementFeesMinMax.Visible = true;                    lbOverdraftFees.Visible = true;                  nudOverdraftFees.Visible = true;                  lbOverdraftFeesMinMax.Visible = true;                    lbAgioFees.Visible = true;                  nudAgioFees.Visible = true;                  lbAgioFeesMinMax.Visible = true;                    lbReopenFees.Visible = true;                  nudReopenFees.Visible = true;                  lbReopenFeesMinMax.Visible = true;                    lbInterestAccrualValue.Text = MultiLanguageStrings.GetString(Ressource.FrmAddSavingProduct' ((SavingsBookProduct)product).InterestBase + ".Text");                  lbInterestPostingValue.Text = MultiLanguageStrings.GetString(Ressource.FrmAddSavingProduct' ((SavingsBookProduct)product).InterestFrequency + ".Text");                  lbInterestBasedOnValue.Text = ((SavingsBookProduct)product).CalculAmountBase.HasValue ? MultiLanguageStrings.GetString(Ressource.FrmAddSavingProduct' ((SavingsBookProduct)product).CalculAmountBase + ".Text") : "------";                    savingDepositToolStripMenuItem.Enabled = true;                  savingWithdrawToolStripMenuItem.Enabled = true;                  savingTransferToolStripMenuItem.Enabled = true;                    // entry fees                  nudEntryFees.DecimalPlaces = 0;                  nudEntryFees.Increment = 1;                  if (((SavingsBookProduct)product).EntryFees.HasValue)                  {                      nudEntryFees.Enabled = false;                      nudEntryFees.Minimum = ((SavingsBookProduct)product).EntryFees.Value;                      nudEntryFees.Maximum = ((SavingsBookProduct)product).EntryFees.Value;                      lbEntryFeesMinMax.Text = string.Format("{0} {1}"' ((SavingsBookProduct)product).EntryFees.GetFormatedValue(product.Currency.UseCents)' product.Currency.Code);                  }                  else                  {                      nudEntryFees.Enabled = true;                      nudEntryFees.Minimum = ((SavingsBookProduct)product).EntryFeesMin.Value;                      nudEntryFees.Maximum = ((SavingsBookProduct)product).EntryFeesMax.Value;                      lbEntryFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                          "Min "' ((SavingsBookProduct)product).EntryFeesMin.GetFormatedValue(product.Currency.UseCents)'                          "Max "' ((SavingsBookProduct)product).EntryFeesMax.GetFormatedValue(product.Currency.UseCents)'                          product.Currency.Code);                  }                    // withdraw fees                  if (((SavingsBookProduct)product).WithdrawFeesType == OSavingsFeesType.Flat)                  {                      nudWithdrawFees.DecimalPlaces = 0;                      nudWithdrawFees.Increment = 1;                      if (((SavingsBookProduct)product).FlatWithdrawFees.HasValue)                      {                          nudWithdrawFees.Enabled = false;                          nudWithdrawFees.Minimum = ((SavingsBookProduct)product).FlatWithdrawFees.Value;                          nudWithdrawFees.Maximum = ((SavingsBookProduct)product).FlatWithdrawFees.Value;                          lbWithdrawFeesMinMax.Text = string.Format("{0} {1}"' ((SavingsBookProduct)product).FlatWithdrawFees.GetFormatedValue(product.Currency.UseCents)' product.Currency.Code);                      }                      else                      {                          nudWithdrawFees.Enabled = true;                          nudWithdrawFees.Minimum = ((SavingsBookProduct)product).FlatWithdrawFeesMin.Value;                          nudWithdrawFees.Maximum = ((SavingsBookProduct)product).FlatWithdrawFeesMax.Value;                          lbWithdrawFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                              "Min "' ((SavingsBookProduct)product).FlatWithdrawFeesMin.GetFormatedValue(product.Currency.UseCents)'                              "Max "' ((SavingsBookProduct)product).FlatWithdrawFeesMax.GetFormatedValue(product.Currency.UseCents)'                              product.Currency.Code);                      }                  }                  else                  {                      nudWithdrawFees.DecimalPlaces = 4;                      nudWithdrawFees.Increment = 0.0001m;                      if (((SavingsBookProduct)product).RateWithdrawFees.HasValue)                      {                          nudWithdrawFees.Enabled = false;                          nudWithdrawFees.Minimum = (decimal)((SavingsBookProduct)product).RateWithdrawFees.Value * 100;                          nudWithdrawFees.Maximum = (decimal)((SavingsBookProduct)product).RateWithdrawFees.Value * 100;                          lbWithdrawFeesMinMax.Text = string.Format("{0} {1}"' (((SavingsBookProduct)product).RateWithdrawFees * 100)' "%");                      }                      else                      {                          nudWithdrawFees.Enabled = true;                          nudWithdrawFees.Minimum = (decimal)((SavingsBookProduct)product).RateWithdrawFeesMin.Value * 100;                          nudWithdrawFees.Maximum = (decimal)((SavingsBookProduct)product).RateWithdrawFeesMax.Value * 100;                          lbWithdrawFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                              "Min "' (((SavingsBookProduct)product).RateWithdrawFeesMin * 100)'                              "Max "' (((SavingsBookProduct)product).RateWithdrawFeesMax * 100)'                              "%");                      }                  }                    // Inter-branch tansfer fee                  SavingsBookProduct p = (SavingsBookProduct)product;                  Fee fee = p.InterBranchTransferFee;                  nudIbtFee.DecimalPlaces = fee.IsFlat ? 0 : 2;                  nudIbtFee.Increment = fee.IsFlat ? 1 : 0.01m;                  nudIbtFee.Enabled = !fee.Value.HasValue;                  nudIbtFee.Minimum = fee.GetMin();                  nudIbtFee.Maximum = fee.GetMax();                  if (fee.IsRange)                  {                      string min = fee.GetMinFormatted(p.Currency);                      string max = fee.GetMaxFormatted(p.Currency);                      const string mask = "Min {0}\r\nMax {1}";                      lblIbtFeeMinMax.Text = string.Format(mask' min' max);                  }                  else                  {                      lblIbtFeeMinMax.Text = fee.GetValueFormatted(p.Currency);                  }                    if (((SavingsBookProduct)product).TransferFeesType == OSavingsFeesType.Flat)                  {                      nudTransferFees.DecimalPlaces = 0;                      nudTransferFees.Increment = 1;                      if (((SavingsBookProduct)product).FlatTransferFees.HasValue)                      {                          nudTransferFees.Enabled = false;                          nudTransferFees.Minimum = ((SavingsBookProduct)product).FlatTransferFees.Value;                          nudTransferFees.Maximum = ((SavingsBookProduct)product).FlatTransferFees.Value;                          lbTransferFeesMinMax.Text = string.Format("{0} {1}"' ((SavingsBookProduct)product).FlatTransferFees.GetFormatedValue(product.Currency.UseCents)' product.Currency.Code);                      }                      else                      {                          nudTransferFees.Enabled = true;                          nudTransferFees.Minimum = ((SavingsBookProduct)product).FlatTransferFeesMin.Value;                          nudTransferFees.Maximum = ((SavingsBookProduct)product).FlatTransferFeesMax.Value;                          lbTransferFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                              "Min "' ((SavingsBookProduct)product).FlatTransferFeesMin.GetFormatedValue(product.Currency.UseCents)'                              "Max "' ((SavingsBookProduct)product).FlatTransferFeesMax.GetFormatedValue(product.Currency.UseCents)'                              product.Currency.Code);                      }                  }                  else                  {                      nudTransferFees.DecimalPlaces = 4;                      nudTransferFees.Increment = 0.0001m;                      if (((SavingsBookProduct)product).RateTransferFees.HasValue)                      {                          nudTransferFees.Enabled = false;                          nudTransferFees.Minimum = (decimal)((SavingsBookProduct)product).RateTransferFees.Value * 100;                          nudTransferFees.Maximum = (decimal)((SavingsBookProduct)product).RateTransferFees.Value * 100;                          lbTransferFeesMinMax.Text = string.Format("{0} {1}"' (((SavingsBookProduct)product).RateTransferFees * 100)' "%");                      }                      else                      {                          nudTransferFees.Enabled = true;                          nudTransferFees.Minimum = (decimal)((SavingsBookProduct)product).RateTransferFeesMin.Value * 100;                          nudTransferFees.Maximum = (decimal)((SavingsBookProduct)product).RateTransferFeesMax.Value * 100;                          lbTransferFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                              "Min "' (((SavingsBookProduct)product).RateTransferFeesMin * 100)'                              "Max "' (((SavingsBookProduct)product).RateTransferFeesMax * 100)'                              "%");                      }                  }                    //Cash Deposit fees                  nudDepositFees.DecimalPlaces = 0;                  nudDepositFees.Increment = 1;                  if (((SavingsBookProduct)product).DepositFees.HasValue)                  {                      nudDepositFees.Enabled = false;                      nudDepositFees.Minimum = ((SavingsBookProduct)product).DepositFees.Value;                      nudDepositFees.Maximum = ((SavingsBookProduct)product).DepositFees.Value;                      lbDepositFeesMinMax.Text = string.Format("{0} {1}"'                                                               ((SavingsBookProduct)product).DepositFees.GetFormatedValue(product.Currency.UseCents)'                                                               product.Currency.Code);                  }                  else                  {                      nudDepositFees.Enabled = true;                      nudDepositFees.Minimum = ((SavingsBookProduct)product).DepositFeesMin.Value;                      nudDepositFees.Maximum = ((SavingsBookProduct)product).DepositFeesMax.Value;                      lbDepositFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                                                               "Min "' ((SavingsBookProduct)product).DepositFeesMin.GetFormatedValue(product.Currency.UseCents)'                                                               "Max "' ((SavingsBookProduct)product).DepositFeesMax.GetFormatedValue(product.Currency.UseCents)'                                                               product.Currency.Code);                  }                    //Cheque Deposit fees                  nudChequeDepositFees.DecimalPlaces = 0;                  nudChequeDepositFees.Increment = 1;                  if (((SavingsBookProduct)product).ChequeDepositFees.HasValue)                  {                      nudChequeDepositFees.Enabled = false;                      nudChequeDepositFees.Maximum = ((SavingsBookProduct)product).ChequeDepositFees.Value;                      nudChequeDepositFees.Minimum = ((SavingsBookProduct)product).ChequeDepositFees.Value;                      lblChequeDepositFeesMinMax.Text = string.Format("{0} {1}"'                                                               ((SavingsBookProduct)product).ChequeDepositFees.GetFormatedValue(product.Currency.UseCents)'                                                               product.Currency.Code);                  }                  else                  {                      nudChequeDepositFees.Enabled = true;                      nudChequeDepositFees.Minimum = ((SavingsBookProduct)product).ChequeDepositFeesMin.Value;                      nudChequeDepositFees.Maximum = ((SavingsBookProduct)product).ChequeDepositFeesMax.Value;                      lblChequeDepositFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                                                               "Min "' ((SavingsBookProduct)product).ChequeDepositFeesMin.GetFormatedValue(product.Currency.UseCents)'                                                               "Max "' ((SavingsBookProduct)product).ChequeDepositFeesMax.GetFormatedValue(product.Currency.UseCents)'                                                               product.Currency.Code);                  }                    // Close fees                  nudCloseFees.DecimalPlaces = 0;                  nudCloseFees.Increment = 1;                  if (((SavingsBookProduct)product).CloseFees.HasValue)                  {                      nudCloseFees.Enabled = false;                      nudCloseFees.Minimum = ((SavingsBookProduct)product).CloseFees.Value;                      nudCloseFees.Maximum = ((SavingsBookProduct)product).CloseFees.Value;                      lbCloseFeesMinMax.Text = string.Format("{0} {1}"'                          ((SavingsBookProduct)product).CloseFees.GetFormatedValue(product.Currency.UseCents)' product.Currency.Code);                  }                  else                  {                      nudCloseFees.Enabled = true;                      nudCloseFees.Minimum = ((SavingsBookProduct)product).CloseFeesMin.Value;                      nudCloseFees.Maximum = ((SavingsBookProduct)product).CloseFeesMax.Value;                      lbCloseFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                          "Min "' ((SavingsBookProduct)product).CloseFeesMin.GetFormatedValue(product.Currency.UseCents)'                          "Max "' ((SavingsBookProduct)product).CloseFeesMax.GetFormatedValue(product.Currency.UseCents)'                          product.Currency.Code);                  }                    // Management fees                  nudManagementFees.DecimalPlaces = 0;                  nudManagementFees.Increment = 1;                  if (((SavingsBookProduct)product).ManagementFees.HasValue)                  {                      nudManagementFees.Enabled = false;                      nudManagementFees.Minimum = ((SavingsBookProduct)product).ManagementFees.Value;                      nudManagementFees.Maximum = ((SavingsBookProduct)product).ManagementFees.Value;                      lbManagementFeesMinMax.Text = string.Format("{0} {1}"'                          ((SavingsBookProduct)product).ManagementFees.GetFormatedValue(product.Currency.UseCents)' product.Currency.Code);                  }                  else                  {                      nudManagementFees.Enabled = true;                      nudManagementFees.Minimum = ((SavingsBookProduct)product).ManagementFeesMin.Value;                      nudManagementFees.Maximum = ((SavingsBookProduct)product).ManagementFeesMax.Value;                      lbManagementFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                          "Min "' ((SavingsBookProduct)product).ManagementFeesMin.GetFormatedValue(product.Currency.UseCents)'                          "Max "' ((SavingsBookProduct)product).ManagementFeesMax.GetFormatedValue(product.Currency.UseCents)'                          product.Currency.Code);                  }                    // Overdraft fees                  nudOverdraftFees.DecimalPlaces = 0;                  nudOverdraftFees.Increment = 1;                  if (((SavingsBookProduct)product).OverdraftFees.HasValue)                  {                      nudOverdraftFees.Enabled = false;                      nudOverdraftFees.Minimum = ((SavingsBookProduct)product).OverdraftFees.Value;                      nudOverdraftFees.Maximum = ((SavingsBookProduct)product).OverdraftFees.Value;                      lbOverdraftFeesMinMax.Text = string.Format("{0} {1}"'                          ((SavingsBookProduct)product).OverdraftFees.GetFormatedValue(product.Currency.UseCents)' product.Currency.Code);                  }                  else                  {                      nudOverdraftFees.Enabled = true;                      nudOverdraftFees.Minimum = ((SavingsBookProduct)product).OverdraftFeesMin.Value;                      nudOverdraftFees.Maximum = ((SavingsBookProduct)product).OverdraftFeesMax.Value;                      lbOverdraftFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                          "Min "' ((SavingsBookProduct)product).OverdraftFeesMin.GetFormatedValue(product.Currency.UseCents)'                          "Max "' ((SavingsBookProduct)product).OverdraftFeesMax.GetFormatedValue(product.Currency.UseCents)'                          product.Currency.Code);                  }                    // Agio fees                  nudAgioFees.DecimalPlaces = 4;                  nudAgioFees.Increment = 0.0001m;                  if (((SavingsBookProduct)product).AgioFees.HasValue)                  {                      nudAgioFees.Enabled = false;                      nudAgioFees.Minimum = (decimal)((SavingsBookProduct)product).AgioFees.Value * 100;                      nudAgioFees.Maximum = (decimal)((SavingsBookProduct)product).AgioFees.Value * 100;                      lbAgioFeesMinMax.Text = string.Format("{0} {1}"' ((SavingsBookProduct)product).AgioFees * 100' "%");                  }                  else                  {                      nudAgioFees.Enabled = true;                      nudAgioFees.Minimum = (decimal)((SavingsBookProduct)product).AgioFeesMin.Value * 100;                      nudAgioFees.Maximum = (decimal)((SavingsBookProduct)product).AgioFeesMax.Value * 100;                      lbAgioFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                          "Min "' ((SavingsBookProduct)product).AgioFeesMin * 100'                          "Max "' ((SavingsBookProduct)product).AgioFeesMax * 100' "%");                  }                    //Reopen fees                  nudReopenFees.DecimalPlaces = 0;                  nudReopenFees.Increment = 1;                    if (((SavingsBookProduct)product).ReopenFees.HasValue)                  {                      nudReopenFees.Enabled = false;                      nudReopenFees.Minimum = ((SavingsBookProduct)product).ReopenFees.Value;                      nudReopenFees.Maximum = ((SavingsBookProduct)product).ReopenFees.Value;                      lbReopenFeesMinMax.Text = string.Format("{0} {1}"'                                                               ((SavingsBookProduct)product).ReopenFees.GetFormatedValue(product.Currency.UseCents)'                                                               product.Currency.Code);                  }                  else                  {                      nudReopenFees.Enabled = true;                      nudReopenFees.Minimum = ((SavingsBookProduct)product).ReopenFeesMin.Value;                      nudReopenFees.Maximum = ((SavingsBookProduct)product).ReopenFeesMax.Value;                      lbReopenFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                                                               "Min "' ((SavingsBookProduct)product).ReopenFeesMin.GetFormatedValue(product.Currency.UseCents)'                                                               "Max "' ((SavingsBookProduct)product).ReopenFeesMax.GetFormatedValue(product.Currency.UseCents)'                                                               product.Currency.Code);                  }                    if (((SavingsBookProduct)product).UseTermDeposit)                  {                      nudNumberOfPeriods.Enabled = true;                      btSearchContract2.Enabled = true;                      cmbRollover2.Enabled = true;                      nudNumberOfPeriods.Minimum = (decimal)((SavingsBookProduct)product).TermDepositPeriodMin;                      nudNumberOfPeriods.Maximum = (decimal)((SavingsBookProduct)product).TermDepositPeriodMax;                      nudNumberOfPeriods.Value = nudNumberOfPeriods.Minimum;                      tbTargetAccount2.ResetText();                  }                }
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,DisplaySavingProduct,The following statement contains a magic number: if (product is SavingsBookProduct)              {                  gbDepositInterest.Visible = false;                  gbInterest.Visible = true;                    lbWithdrawFees.Visible = true;                  nudWithdrawFees.Visible = true;                  lbWithdrawFeesMinMax.Visible = true;                    lbEntryFees.Visible = true;                  nudEntryFees.Visible = true;                  lbEntryFeesMinMax.Visible = true;                    lbTransferFees.Visible = true;                  nudTransferFees.Visible = true;                  nudIbtFee.Visible = true;                  lbTransferFeesMinMax.Visible = true;                    lbDepositFees.Visible = true;                  nudDepositFees.Visible = true;                  lbDepositFeesMinMax.Visible = true;                    lbChequeDepositFees.Visible = true;                  nudChequeDepositFees.Visible = true;                  lblChequeDepositFeesMinMax.Visible = true;                    lbCloseFees.Visible = true;                  nudCloseFees.Visible = true;                  lbCloseFeesMinMax.Visible = true;                    lbManagementFees.Visible = true;                  nudManagementFees.Visible = true;                  lbManagementFeesMinMax.Visible = true;                    lbOverdraftFees.Visible = true;                  nudOverdraftFees.Visible = true;                  lbOverdraftFeesMinMax.Visible = true;                    lbAgioFees.Visible = true;                  nudAgioFees.Visible = true;                  lbAgioFeesMinMax.Visible = true;                    lbReopenFees.Visible = true;                  nudReopenFees.Visible = true;                  lbReopenFeesMinMax.Visible = true;                    lbInterestAccrualValue.Text = MultiLanguageStrings.GetString(Ressource.FrmAddSavingProduct' ((SavingsBookProduct)product).InterestBase + ".Text");                  lbInterestPostingValue.Text = MultiLanguageStrings.GetString(Ressource.FrmAddSavingProduct' ((SavingsBookProduct)product).InterestFrequency + ".Text");                  lbInterestBasedOnValue.Text = ((SavingsBookProduct)product).CalculAmountBase.HasValue ? MultiLanguageStrings.GetString(Ressource.FrmAddSavingProduct' ((SavingsBookProduct)product).CalculAmountBase + ".Text") : "------";                    savingDepositToolStripMenuItem.Enabled = true;                  savingWithdrawToolStripMenuItem.Enabled = true;                  savingTransferToolStripMenuItem.Enabled = true;                    // entry fees                  nudEntryFees.DecimalPlaces = 0;                  nudEntryFees.Increment = 1;                  if (((SavingsBookProduct)product).EntryFees.HasValue)                  {                      nudEntryFees.Enabled = false;                      nudEntryFees.Minimum = ((SavingsBookProduct)product).EntryFees.Value;                      nudEntryFees.Maximum = ((SavingsBookProduct)product).EntryFees.Value;                      lbEntryFeesMinMax.Text = string.Format("{0} {1}"' ((SavingsBookProduct)product).EntryFees.GetFormatedValue(product.Currency.UseCents)' product.Currency.Code);                  }                  else                  {                      nudEntryFees.Enabled = true;                      nudEntryFees.Minimum = ((SavingsBookProduct)product).EntryFeesMin.Value;                      nudEntryFees.Maximum = ((SavingsBookProduct)product).EntryFeesMax.Value;                      lbEntryFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                          "Min "' ((SavingsBookProduct)product).EntryFeesMin.GetFormatedValue(product.Currency.UseCents)'                          "Max "' ((SavingsBookProduct)product).EntryFeesMax.GetFormatedValue(product.Currency.UseCents)'                          product.Currency.Code);                  }                    // withdraw fees                  if (((SavingsBookProduct)product).WithdrawFeesType == OSavingsFeesType.Flat)                  {                      nudWithdrawFees.DecimalPlaces = 0;                      nudWithdrawFees.Increment = 1;                      if (((SavingsBookProduct)product).FlatWithdrawFees.HasValue)                      {                          nudWithdrawFees.Enabled = false;                          nudWithdrawFees.Minimum = ((SavingsBookProduct)product).FlatWithdrawFees.Value;                          nudWithdrawFees.Maximum = ((SavingsBookProduct)product).FlatWithdrawFees.Value;                          lbWithdrawFeesMinMax.Text = string.Format("{0} {1}"' ((SavingsBookProduct)product).FlatWithdrawFees.GetFormatedValue(product.Currency.UseCents)' product.Currency.Code);                      }                      else                      {                          nudWithdrawFees.Enabled = true;                          nudWithdrawFees.Minimum = ((SavingsBookProduct)product).FlatWithdrawFeesMin.Value;                          nudWithdrawFees.Maximum = ((SavingsBookProduct)product).FlatWithdrawFeesMax.Value;                          lbWithdrawFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                              "Min "' ((SavingsBookProduct)product).FlatWithdrawFeesMin.GetFormatedValue(product.Currency.UseCents)'                              "Max "' ((SavingsBookProduct)product).FlatWithdrawFeesMax.GetFormatedValue(product.Currency.UseCents)'                              product.Currency.Code);                      }                  }                  else                  {                      nudWithdrawFees.DecimalPlaces = 4;                      nudWithdrawFees.Increment = 0.0001m;                      if (((SavingsBookProduct)product).RateWithdrawFees.HasValue)                      {                          nudWithdrawFees.Enabled = false;                          nudWithdrawFees.Minimum = (decimal)((SavingsBookProduct)product).RateWithdrawFees.Value * 100;                          nudWithdrawFees.Maximum = (decimal)((SavingsBookProduct)product).RateWithdrawFees.Value * 100;                          lbWithdrawFeesMinMax.Text = string.Format("{0} {1}"' (((SavingsBookProduct)product).RateWithdrawFees * 100)' "%");                      }                      else                      {                          nudWithdrawFees.Enabled = true;                          nudWithdrawFees.Minimum = (decimal)((SavingsBookProduct)product).RateWithdrawFeesMin.Value * 100;                          nudWithdrawFees.Maximum = (decimal)((SavingsBookProduct)product).RateWithdrawFeesMax.Value * 100;                          lbWithdrawFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                              "Min "' (((SavingsBookProduct)product).RateWithdrawFeesMin * 100)'                              "Max "' (((SavingsBookProduct)product).RateWithdrawFeesMax * 100)'                              "%");                      }                  }                    // Inter-branch tansfer fee                  SavingsBookProduct p = (SavingsBookProduct)product;                  Fee fee = p.InterBranchTransferFee;                  nudIbtFee.DecimalPlaces = fee.IsFlat ? 0 : 2;                  nudIbtFee.Increment = fee.IsFlat ? 1 : 0.01m;                  nudIbtFee.Enabled = !fee.Value.HasValue;                  nudIbtFee.Minimum = fee.GetMin();                  nudIbtFee.Maximum = fee.GetMax();                  if (fee.IsRange)                  {                      string min = fee.GetMinFormatted(p.Currency);                      string max = fee.GetMaxFormatted(p.Currency);                      const string mask = "Min {0}\r\nMax {1}";                      lblIbtFeeMinMax.Text = string.Format(mask' min' max);                  }                  else                  {                      lblIbtFeeMinMax.Text = fee.GetValueFormatted(p.Currency);                  }                    if (((SavingsBookProduct)product).TransferFeesType == OSavingsFeesType.Flat)                  {                      nudTransferFees.DecimalPlaces = 0;                      nudTransferFees.Increment = 1;                      if (((SavingsBookProduct)product).FlatTransferFees.HasValue)                      {                          nudTransferFees.Enabled = false;                          nudTransferFees.Minimum = ((SavingsBookProduct)product).FlatTransferFees.Value;                          nudTransferFees.Maximum = ((SavingsBookProduct)product).FlatTransferFees.Value;                          lbTransferFeesMinMax.Text = string.Format("{0} {1}"' ((SavingsBookProduct)product).FlatTransferFees.GetFormatedValue(product.Currency.UseCents)' product.Currency.Code);                      }                      else                      {                          nudTransferFees.Enabled = true;                          nudTransferFees.Minimum = ((SavingsBookProduct)product).FlatTransferFeesMin.Value;                          nudTransferFees.Maximum = ((SavingsBookProduct)product).FlatTransferFeesMax.Value;                          lbTransferFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                              "Min "' ((SavingsBookProduct)product).FlatTransferFeesMin.GetFormatedValue(product.Currency.UseCents)'                              "Max "' ((SavingsBookProduct)product).FlatTransferFeesMax.GetFormatedValue(product.Currency.UseCents)'                              product.Currency.Code);                      }                  }                  else                  {                      nudTransferFees.DecimalPlaces = 4;                      nudTransferFees.Increment = 0.0001m;                      if (((SavingsBookProduct)product).RateTransferFees.HasValue)                      {                          nudTransferFees.Enabled = false;                          nudTransferFees.Minimum = (decimal)((SavingsBookProduct)product).RateTransferFees.Value * 100;                          nudTransferFees.Maximum = (decimal)((SavingsBookProduct)product).RateTransferFees.Value * 100;                          lbTransferFeesMinMax.Text = string.Format("{0} {1}"' (((SavingsBookProduct)product).RateTransferFees * 100)' "%");                      }                      else                      {                          nudTransferFees.Enabled = true;                          nudTransferFees.Minimum = (decimal)((SavingsBookProduct)product).RateTransferFeesMin.Value * 100;                          nudTransferFees.Maximum = (decimal)((SavingsBookProduct)product).RateTransferFeesMax.Value * 100;                          lbTransferFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                              "Min "' (((SavingsBookProduct)product).RateTransferFeesMin * 100)'                              "Max "' (((SavingsBookProduct)product).RateTransferFeesMax * 100)'                              "%");                      }                  }                    //Cash Deposit fees                  nudDepositFees.DecimalPlaces = 0;                  nudDepositFees.Increment = 1;                  if (((SavingsBookProduct)product).DepositFees.HasValue)                  {                      nudDepositFees.Enabled = false;                      nudDepositFees.Minimum = ((SavingsBookProduct)product).DepositFees.Value;                      nudDepositFees.Maximum = ((SavingsBookProduct)product).DepositFees.Value;                      lbDepositFeesMinMax.Text = string.Format("{0} {1}"'                                                               ((SavingsBookProduct)product).DepositFees.GetFormatedValue(product.Currency.UseCents)'                                                               product.Currency.Code);                  }                  else                  {                      nudDepositFees.Enabled = true;                      nudDepositFees.Minimum = ((SavingsBookProduct)product).DepositFeesMin.Value;                      nudDepositFees.Maximum = ((SavingsBookProduct)product).DepositFeesMax.Value;                      lbDepositFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                                                               "Min "' ((SavingsBookProduct)product).DepositFeesMin.GetFormatedValue(product.Currency.UseCents)'                                                               "Max "' ((SavingsBookProduct)product).DepositFeesMax.GetFormatedValue(product.Currency.UseCents)'                                                               product.Currency.Code);                  }                    //Cheque Deposit fees                  nudChequeDepositFees.DecimalPlaces = 0;                  nudChequeDepositFees.Increment = 1;                  if (((SavingsBookProduct)product).ChequeDepositFees.HasValue)                  {                      nudChequeDepositFees.Enabled = false;                      nudChequeDepositFees.Maximum = ((SavingsBookProduct)product).ChequeDepositFees.Value;                      nudChequeDepositFees.Minimum = ((SavingsBookProduct)product).ChequeDepositFees.Value;                      lblChequeDepositFeesMinMax.Text = string.Format("{0} {1}"'                                                               ((SavingsBookProduct)product).ChequeDepositFees.GetFormatedValue(product.Currency.UseCents)'                                                               product.Currency.Code);                  }                  else                  {                      nudChequeDepositFees.Enabled = true;                      nudChequeDepositFees.Minimum = ((SavingsBookProduct)product).ChequeDepositFeesMin.Value;                      nudChequeDepositFees.Maximum = ((SavingsBookProduct)product).ChequeDepositFeesMax.Value;                      lblChequeDepositFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                                                               "Min "' ((SavingsBookProduct)product).ChequeDepositFeesMin.GetFormatedValue(product.Currency.UseCents)'                                                               "Max "' ((SavingsBookProduct)product).ChequeDepositFeesMax.GetFormatedValue(product.Currency.UseCents)'                                                               product.Currency.Code);                  }                    // Close fees                  nudCloseFees.DecimalPlaces = 0;                  nudCloseFees.Increment = 1;                  if (((SavingsBookProduct)product).CloseFees.HasValue)                  {                      nudCloseFees.Enabled = false;                      nudCloseFees.Minimum = ((SavingsBookProduct)product).CloseFees.Value;                      nudCloseFees.Maximum = ((SavingsBookProduct)product).CloseFees.Value;                      lbCloseFeesMinMax.Text = string.Format("{0} {1}"'                          ((SavingsBookProduct)product).CloseFees.GetFormatedValue(product.Currency.UseCents)' product.Currency.Code);                  }                  else                  {                      nudCloseFees.Enabled = true;                      nudCloseFees.Minimum = ((SavingsBookProduct)product).CloseFeesMin.Value;                      nudCloseFees.Maximum = ((SavingsBookProduct)product).CloseFeesMax.Value;                      lbCloseFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                          "Min "' ((SavingsBookProduct)product).CloseFeesMin.GetFormatedValue(product.Currency.UseCents)'                          "Max "' ((SavingsBookProduct)product).CloseFeesMax.GetFormatedValue(product.Currency.UseCents)'                          product.Currency.Code);                  }                    // Management fees                  nudManagementFees.DecimalPlaces = 0;                  nudManagementFees.Increment = 1;                  if (((SavingsBookProduct)product).ManagementFees.HasValue)                  {                      nudManagementFees.Enabled = false;                      nudManagementFees.Minimum = ((SavingsBookProduct)product).ManagementFees.Value;                      nudManagementFees.Maximum = ((SavingsBookProduct)product).ManagementFees.Value;                      lbManagementFeesMinMax.Text = string.Format("{0} {1}"'                          ((SavingsBookProduct)product).ManagementFees.GetFormatedValue(product.Currency.UseCents)' product.Currency.Code);                  }                  else                  {                      nudManagementFees.Enabled = true;                      nudManagementFees.Minimum = ((SavingsBookProduct)product).ManagementFeesMin.Value;                      nudManagementFees.Maximum = ((SavingsBookProduct)product).ManagementFeesMax.Value;                      lbManagementFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                          "Min "' ((SavingsBookProduct)product).ManagementFeesMin.GetFormatedValue(product.Currency.UseCents)'                          "Max "' ((SavingsBookProduct)product).ManagementFeesMax.GetFormatedValue(product.Currency.UseCents)'                          product.Currency.Code);                  }                    // Overdraft fees                  nudOverdraftFees.DecimalPlaces = 0;                  nudOverdraftFees.Increment = 1;                  if (((SavingsBookProduct)product).OverdraftFees.HasValue)                  {                      nudOverdraftFees.Enabled = false;                      nudOverdraftFees.Minimum = ((SavingsBookProduct)product).OverdraftFees.Value;                      nudOverdraftFees.Maximum = ((SavingsBookProduct)product).OverdraftFees.Value;                      lbOverdraftFeesMinMax.Text = string.Format("{0} {1}"'                          ((SavingsBookProduct)product).OverdraftFees.GetFormatedValue(product.Currency.UseCents)' product.Currency.Code);                  }                  else                  {                      nudOverdraftFees.Enabled = true;                      nudOverdraftFees.Minimum = ((SavingsBookProduct)product).OverdraftFeesMin.Value;                      nudOverdraftFees.Maximum = ((SavingsBookProduct)product).OverdraftFeesMax.Value;                      lbOverdraftFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                          "Min "' ((SavingsBookProduct)product).OverdraftFeesMin.GetFormatedValue(product.Currency.UseCents)'                          "Max "' ((SavingsBookProduct)product).OverdraftFeesMax.GetFormatedValue(product.Currency.UseCents)'                          product.Currency.Code);                  }                    // Agio fees                  nudAgioFees.DecimalPlaces = 4;                  nudAgioFees.Increment = 0.0001m;                  if (((SavingsBookProduct)product).AgioFees.HasValue)                  {                      nudAgioFees.Enabled = false;                      nudAgioFees.Minimum = (decimal)((SavingsBookProduct)product).AgioFees.Value * 100;                      nudAgioFees.Maximum = (decimal)((SavingsBookProduct)product).AgioFees.Value * 100;                      lbAgioFeesMinMax.Text = string.Format("{0} {1}"' ((SavingsBookProduct)product).AgioFees * 100' "%");                  }                  else                  {                      nudAgioFees.Enabled = true;                      nudAgioFees.Minimum = (decimal)((SavingsBookProduct)product).AgioFeesMin.Value * 100;                      nudAgioFees.Maximum = (decimal)((SavingsBookProduct)product).AgioFeesMax.Value * 100;                      lbAgioFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                          "Min "' ((SavingsBookProduct)product).AgioFeesMin * 100'                          "Max "' ((SavingsBookProduct)product).AgioFeesMax * 100' "%");                  }                    //Reopen fees                  nudReopenFees.DecimalPlaces = 0;                  nudReopenFees.Increment = 1;                    if (((SavingsBookProduct)product).ReopenFees.HasValue)                  {                      nudReopenFees.Enabled = false;                      nudReopenFees.Minimum = ((SavingsBookProduct)product).ReopenFees.Value;                      nudReopenFees.Maximum = ((SavingsBookProduct)product).ReopenFees.Value;                      lbReopenFeesMinMax.Text = string.Format("{0} {1}"'                                                               ((SavingsBookProduct)product).ReopenFees.GetFormatedValue(product.Currency.UseCents)'                                                               product.Currency.Code);                  }                  else                  {                      nudReopenFees.Enabled = true;                      nudReopenFees.Minimum = ((SavingsBookProduct)product).ReopenFeesMin.Value;                      nudReopenFees.Maximum = ((SavingsBookProduct)product).ReopenFeesMax.Value;                      lbReopenFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                                                               "Min "' ((SavingsBookProduct)product).ReopenFeesMin.GetFormatedValue(product.Currency.UseCents)'                                                               "Max "' ((SavingsBookProduct)product).ReopenFeesMax.GetFormatedValue(product.Currency.UseCents)'                                                               product.Currency.Code);                  }                    if (((SavingsBookProduct)product).UseTermDeposit)                  {                      nudNumberOfPeriods.Enabled = true;                      btSearchContract2.Enabled = true;                      cmbRollover2.Enabled = true;                      nudNumberOfPeriods.Minimum = (decimal)((SavingsBookProduct)product).TermDepositPeriodMin;                      nudNumberOfPeriods.Maximum = (decimal)((SavingsBookProduct)product).TermDepositPeriodMax;                      nudNumberOfPeriods.Value = nudNumberOfPeriods.Minimum;                      tbTargetAccount2.ResetText();                  }                }
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,DisplaySavingProduct,The following statement contains a magic number: if (product is SavingsBookProduct)              {                  gbDepositInterest.Visible = false;                  gbInterest.Visible = true;                    lbWithdrawFees.Visible = true;                  nudWithdrawFees.Visible = true;                  lbWithdrawFeesMinMax.Visible = true;                    lbEntryFees.Visible = true;                  nudEntryFees.Visible = true;                  lbEntryFeesMinMax.Visible = true;                    lbTransferFees.Visible = true;                  nudTransferFees.Visible = true;                  nudIbtFee.Visible = true;                  lbTransferFeesMinMax.Visible = true;                    lbDepositFees.Visible = true;                  nudDepositFees.Visible = true;                  lbDepositFeesMinMax.Visible = true;                    lbChequeDepositFees.Visible = true;                  nudChequeDepositFees.Visible = true;                  lblChequeDepositFeesMinMax.Visible = true;                    lbCloseFees.Visible = true;                  nudCloseFees.Visible = true;                  lbCloseFeesMinMax.Visible = true;                    lbManagementFees.Visible = true;                  nudManagementFees.Visible = true;                  lbManagementFeesMinMax.Visible = true;                    lbOverdraftFees.Visible = true;                  nudOverdraftFees.Visible = true;                  lbOverdraftFeesMinMax.Visible = true;                    lbAgioFees.Visible = true;                  nudAgioFees.Visible = true;                  lbAgioFeesMinMax.Visible = true;                    lbReopenFees.Visible = true;                  nudReopenFees.Visible = true;                  lbReopenFeesMinMax.Visible = true;                    lbInterestAccrualValue.Text = MultiLanguageStrings.GetString(Ressource.FrmAddSavingProduct' ((SavingsBookProduct)product).InterestBase + ".Text");                  lbInterestPostingValue.Text = MultiLanguageStrings.GetString(Ressource.FrmAddSavingProduct' ((SavingsBookProduct)product).InterestFrequency + ".Text");                  lbInterestBasedOnValue.Text = ((SavingsBookProduct)product).CalculAmountBase.HasValue ? MultiLanguageStrings.GetString(Ressource.FrmAddSavingProduct' ((SavingsBookProduct)product).CalculAmountBase + ".Text") : "------";                    savingDepositToolStripMenuItem.Enabled = true;                  savingWithdrawToolStripMenuItem.Enabled = true;                  savingTransferToolStripMenuItem.Enabled = true;                    // entry fees                  nudEntryFees.DecimalPlaces = 0;                  nudEntryFees.Increment = 1;                  if (((SavingsBookProduct)product).EntryFees.HasValue)                  {                      nudEntryFees.Enabled = false;                      nudEntryFees.Minimum = ((SavingsBookProduct)product).EntryFees.Value;                      nudEntryFees.Maximum = ((SavingsBookProduct)product).EntryFees.Value;                      lbEntryFeesMinMax.Text = string.Format("{0} {1}"' ((SavingsBookProduct)product).EntryFees.GetFormatedValue(product.Currency.UseCents)' product.Currency.Code);                  }                  else                  {                      nudEntryFees.Enabled = true;                      nudEntryFees.Minimum = ((SavingsBookProduct)product).EntryFeesMin.Value;                      nudEntryFees.Maximum = ((SavingsBookProduct)product).EntryFeesMax.Value;                      lbEntryFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                          "Min "' ((SavingsBookProduct)product).EntryFeesMin.GetFormatedValue(product.Currency.UseCents)'                          "Max "' ((SavingsBookProduct)product).EntryFeesMax.GetFormatedValue(product.Currency.UseCents)'                          product.Currency.Code);                  }                    // withdraw fees                  if (((SavingsBookProduct)product).WithdrawFeesType == OSavingsFeesType.Flat)                  {                      nudWithdrawFees.DecimalPlaces = 0;                      nudWithdrawFees.Increment = 1;                      if (((SavingsBookProduct)product).FlatWithdrawFees.HasValue)                      {                          nudWithdrawFees.Enabled = false;                          nudWithdrawFees.Minimum = ((SavingsBookProduct)product).FlatWithdrawFees.Value;                          nudWithdrawFees.Maximum = ((SavingsBookProduct)product).FlatWithdrawFees.Value;                          lbWithdrawFeesMinMax.Text = string.Format("{0} {1}"' ((SavingsBookProduct)product).FlatWithdrawFees.GetFormatedValue(product.Currency.UseCents)' product.Currency.Code);                      }                      else                      {                          nudWithdrawFees.Enabled = true;                          nudWithdrawFees.Minimum = ((SavingsBookProduct)product).FlatWithdrawFeesMin.Value;                          nudWithdrawFees.Maximum = ((SavingsBookProduct)product).FlatWithdrawFeesMax.Value;                          lbWithdrawFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                              "Min "' ((SavingsBookProduct)product).FlatWithdrawFeesMin.GetFormatedValue(product.Currency.UseCents)'                              "Max "' ((SavingsBookProduct)product).FlatWithdrawFeesMax.GetFormatedValue(product.Currency.UseCents)'                              product.Currency.Code);                      }                  }                  else                  {                      nudWithdrawFees.DecimalPlaces = 4;                      nudWithdrawFees.Increment = 0.0001m;                      if (((SavingsBookProduct)product).RateWithdrawFees.HasValue)                      {                          nudWithdrawFees.Enabled = false;                          nudWithdrawFees.Minimum = (decimal)((SavingsBookProduct)product).RateWithdrawFees.Value * 100;                          nudWithdrawFees.Maximum = (decimal)((SavingsBookProduct)product).RateWithdrawFees.Value * 100;                          lbWithdrawFeesMinMax.Text = string.Format("{0} {1}"' (((SavingsBookProduct)product).RateWithdrawFees * 100)' "%");                      }                      else                      {                          nudWithdrawFees.Enabled = true;                          nudWithdrawFees.Minimum = (decimal)((SavingsBookProduct)product).RateWithdrawFeesMin.Value * 100;                          nudWithdrawFees.Maximum = (decimal)((SavingsBookProduct)product).RateWithdrawFeesMax.Value * 100;                          lbWithdrawFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                              "Min "' (((SavingsBookProduct)product).RateWithdrawFeesMin * 100)'                              "Max "' (((SavingsBookProduct)product).RateWithdrawFeesMax * 100)'                              "%");                      }                  }                    // Inter-branch tansfer fee                  SavingsBookProduct p = (SavingsBookProduct)product;                  Fee fee = p.InterBranchTransferFee;                  nudIbtFee.DecimalPlaces = fee.IsFlat ? 0 : 2;                  nudIbtFee.Increment = fee.IsFlat ? 1 : 0.01m;                  nudIbtFee.Enabled = !fee.Value.HasValue;                  nudIbtFee.Minimum = fee.GetMin();                  nudIbtFee.Maximum = fee.GetMax();                  if (fee.IsRange)                  {                      string min = fee.GetMinFormatted(p.Currency);                      string max = fee.GetMaxFormatted(p.Currency);                      const string mask = "Min {0}\r\nMax {1}";                      lblIbtFeeMinMax.Text = string.Format(mask' min' max);                  }                  else                  {                      lblIbtFeeMinMax.Text = fee.GetValueFormatted(p.Currency);                  }                    if (((SavingsBookProduct)product).TransferFeesType == OSavingsFeesType.Flat)                  {                      nudTransferFees.DecimalPlaces = 0;                      nudTransferFees.Increment = 1;                      if (((SavingsBookProduct)product).FlatTransferFees.HasValue)                      {                          nudTransferFees.Enabled = false;                          nudTransferFees.Minimum = ((SavingsBookProduct)product).FlatTransferFees.Value;                          nudTransferFees.Maximum = ((SavingsBookProduct)product).FlatTransferFees.Value;                          lbTransferFeesMinMax.Text = string.Format("{0} {1}"' ((SavingsBookProduct)product).FlatTransferFees.GetFormatedValue(product.Currency.UseCents)' product.Currency.Code);                      }                      else                      {                          nudTransferFees.Enabled = true;                          nudTransferFees.Minimum = ((SavingsBookProduct)product).FlatTransferFeesMin.Value;                          nudTransferFees.Maximum = ((SavingsBookProduct)product).FlatTransferFeesMax.Value;                          lbTransferFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                              "Min "' ((SavingsBookProduct)product).FlatTransferFeesMin.GetFormatedValue(product.Currency.UseCents)'                              "Max "' ((SavingsBookProduct)product).FlatTransferFeesMax.GetFormatedValue(product.Currency.UseCents)'                              product.Currency.Code);                      }                  }                  else                  {                      nudTransferFees.DecimalPlaces = 4;                      nudTransferFees.Increment = 0.0001m;                      if (((SavingsBookProduct)product).RateTransferFees.HasValue)                      {                          nudTransferFees.Enabled = false;                          nudTransferFees.Minimum = (decimal)((SavingsBookProduct)product).RateTransferFees.Value * 100;                          nudTransferFees.Maximum = (decimal)((SavingsBookProduct)product).RateTransferFees.Value * 100;                          lbTransferFeesMinMax.Text = string.Format("{0} {1}"' (((SavingsBookProduct)product).RateTransferFees * 100)' "%");                      }                      else                      {                          nudTransferFees.Enabled = true;                          nudTransferFees.Minimum = (decimal)((SavingsBookProduct)product).RateTransferFeesMin.Value * 100;                          nudTransferFees.Maximum = (decimal)((SavingsBookProduct)product).RateTransferFeesMax.Value * 100;                          lbTransferFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                              "Min "' (((SavingsBookProduct)product).RateTransferFeesMin * 100)'                              "Max "' (((SavingsBookProduct)product).RateTransferFeesMax * 100)'                              "%");                      }                  }                    //Cash Deposit fees                  nudDepositFees.DecimalPlaces = 0;                  nudDepositFees.Increment = 1;                  if (((SavingsBookProduct)product).DepositFees.HasValue)                  {                      nudDepositFees.Enabled = false;                      nudDepositFees.Minimum = ((SavingsBookProduct)product).DepositFees.Value;                      nudDepositFees.Maximum = ((SavingsBookProduct)product).DepositFees.Value;                      lbDepositFeesMinMax.Text = string.Format("{0} {1}"'                                                               ((SavingsBookProduct)product).DepositFees.GetFormatedValue(product.Currency.UseCents)'                                                               product.Currency.Code);                  }                  else                  {                      nudDepositFees.Enabled = true;                      nudDepositFees.Minimum = ((SavingsBookProduct)product).DepositFeesMin.Value;                      nudDepositFees.Maximum = ((SavingsBookProduct)product).DepositFeesMax.Value;                      lbDepositFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                                                               "Min "' ((SavingsBookProduct)product).DepositFeesMin.GetFormatedValue(product.Currency.UseCents)'                                                               "Max "' ((SavingsBookProduct)product).DepositFeesMax.GetFormatedValue(product.Currency.UseCents)'                                                               product.Currency.Code);                  }                    //Cheque Deposit fees                  nudChequeDepositFees.DecimalPlaces = 0;                  nudChequeDepositFees.Increment = 1;                  if (((SavingsBookProduct)product).ChequeDepositFees.HasValue)                  {                      nudChequeDepositFees.Enabled = false;                      nudChequeDepositFees.Maximum = ((SavingsBookProduct)product).ChequeDepositFees.Value;                      nudChequeDepositFees.Minimum = ((SavingsBookProduct)product).ChequeDepositFees.Value;                      lblChequeDepositFeesMinMax.Text = string.Format("{0} {1}"'                                                               ((SavingsBookProduct)product).ChequeDepositFees.GetFormatedValue(product.Currency.UseCents)'                                                               product.Currency.Code);                  }                  else                  {                      nudChequeDepositFees.Enabled = true;                      nudChequeDepositFees.Minimum = ((SavingsBookProduct)product).ChequeDepositFeesMin.Value;                      nudChequeDepositFees.Maximum = ((SavingsBookProduct)product).ChequeDepositFeesMax.Value;                      lblChequeDepositFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                                                               "Min "' ((SavingsBookProduct)product).ChequeDepositFeesMin.GetFormatedValue(product.Currency.UseCents)'                                                               "Max "' ((SavingsBookProduct)product).ChequeDepositFeesMax.GetFormatedValue(product.Currency.UseCents)'                                                               product.Currency.Code);                  }                    // Close fees                  nudCloseFees.DecimalPlaces = 0;                  nudCloseFees.Increment = 1;                  if (((SavingsBookProduct)product).CloseFees.HasValue)                  {                      nudCloseFees.Enabled = false;                      nudCloseFees.Minimum = ((SavingsBookProduct)product).CloseFees.Value;                      nudCloseFees.Maximum = ((SavingsBookProduct)product).CloseFees.Value;                      lbCloseFeesMinMax.Text = string.Format("{0} {1}"'                          ((SavingsBookProduct)product).CloseFees.GetFormatedValue(product.Currency.UseCents)' product.Currency.Code);                  }                  else                  {                      nudCloseFees.Enabled = true;                      nudCloseFees.Minimum = ((SavingsBookProduct)product).CloseFeesMin.Value;                      nudCloseFees.Maximum = ((SavingsBookProduct)product).CloseFeesMax.Value;                      lbCloseFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                          "Min "' ((SavingsBookProduct)product).CloseFeesMin.GetFormatedValue(product.Currency.UseCents)'                          "Max "' ((SavingsBookProduct)product).CloseFeesMax.GetFormatedValue(product.Currency.UseCents)'                          product.Currency.Code);                  }                    // Management fees                  nudManagementFees.DecimalPlaces = 0;                  nudManagementFees.Increment = 1;                  if (((SavingsBookProduct)product).ManagementFees.HasValue)                  {                      nudManagementFees.Enabled = false;                      nudManagementFees.Minimum = ((SavingsBookProduct)product).ManagementFees.Value;                      nudManagementFees.Maximum = ((SavingsBookProduct)product).ManagementFees.Value;                      lbManagementFeesMinMax.Text = string.Format("{0} {1}"'                          ((SavingsBookProduct)product).ManagementFees.GetFormatedValue(product.Currency.UseCents)' product.Currency.Code);                  }                  else                  {                      nudManagementFees.Enabled = true;                      nudManagementFees.Minimum = ((SavingsBookProduct)product).ManagementFeesMin.Value;                      nudManagementFees.Maximum = ((SavingsBookProduct)product).ManagementFeesMax.Value;                      lbManagementFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                          "Min "' ((SavingsBookProduct)product).ManagementFeesMin.GetFormatedValue(product.Currency.UseCents)'                          "Max "' ((SavingsBookProduct)product).ManagementFeesMax.GetFormatedValue(product.Currency.UseCents)'                          product.Currency.Code);                  }                    // Overdraft fees                  nudOverdraftFees.DecimalPlaces = 0;                  nudOverdraftFees.Increment = 1;                  if (((SavingsBookProduct)product).OverdraftFees.HasValue)                  {                      nudOverdraftFees.Enabled = false;                      nudOverdraftFees.Minimum = ((SavingsBookProduct)product).OverdraftFees.Value;                      nudOverdraftFees.Maximum = ((SavingsBookProduct)product).OverdraftFees.Value;                      lbOverdraftFeesMinMax.Text = string.Format("{0} {1}"'                          ((SavingsBookProduct)product).OverdraftFees.GetFormatedValue(product.Currency.UseCents)' product.Currency.Code);                  }                  else                  {                      nudOverdraftFees.Enabled = true;                      nudOverdraftFees.Minimum = ((SavingsBookProduct)product).OverdraftFeesMin.Value;                      nudOverdraftFees.Maximum = ((SavingsBookProduct)product).OverdraftFeesMax.Value;                      lbOverdraftFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                          "Min "' ((SavingsBookProduct)product).OverdraftFeesMin.GetFormatedValue(product.Currency.UseCents)'                          "Max "' ((SavingsBookProduct)product).OverdraftFeesMax.GetFormatedValue(product.Currency.UseCents)'                          product.Currency.Code);                  }                    // Agio fees                  nudAgioFees.DecimalPlaces = 4;                  nudAgioFees.Increment = 0.0001m;                  if (((SavingsBookProduct)product).AgioFees.HasValue)                  {                      nudAgioFees.Enabled = false;                      nudAgioFees.Minimum = (decimal)((SavingsBookProduct)product).AgioFees.Value * 100;                      nudAgioFees.Maximum = (decimal)((SavingsBookProduct)product).AgioFees.Value * 100;                      lbAgioFeesMinMax.Text = string.Format("{0} {1}"' ((SavingsBookProduct)product).AgioFees * 100' "%");                  }                  else                  {                      nudAgioFees.Enabled = true;                      nudAgioFees.Minimum = (decimal)((SavingsBookProduct)product).AgioFeesMin.Value * 100;                      nudAgioFees.Maximum = (decimal)((SavingsBookProduct)product).AgioFeesMax.Value * 100;                      lbAgioFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                          "Min "' ((SavingsBookProduct)product).AgioFeesMin * 100'                          "Max "' ((SavingsBookProduct)product).AgioFeesMax * 100' "%");                  }                    //Reopen fees                  nudReopenFees.DecimalPlaces = 0;                  nudReopenFees.Increment = 1;                    if (((SavingsBookProduct)product).ReopenFees.HasValue)                  {                      nudReopenFees.Enabled = false;                      nudReopenFees.Minimum = ((SavingsBookProduct)product).ReopenFees.Value;                      nudReopenFees.Maximum = ((SavingsBookProduct)product).ReopenFees.Value;                      lbReopenFeesMinMax.Text = string.Format("{0} {1}"'                                                               ((SavingsBookProduct)product).ReopenFees.GetFormatedValue(product.Currency.UseCents)'                                                               product.Currency.Code);                  }                  else                  {                      nudReopenFees.Enabled = true;                      nudReopenFees.Minimum = ((SavingsBookProduct)product).ReopenFeesMin.Value;                      nudReopenFees.Maximum = ((SavingsBookProduct)product).ReopenFeesMax.Value;                      lbReopenFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                                                               "Min "' ((SavingsBookProduct)product).ReopenFeesMin.GetFormatedValue(product.Currency.UseCents)'                                                               "Max "' ((SavingsBookProduct)product).ReopenFeesMax.GetFormatedValue(product.Currency.UseCents)'                                                               product.Currency.Code);                  }                    if (((SavingsBookProduct)product).UseTermDeposit)                  {                      nudNumberOfPeriods.Enabled = true;                      btSearchContract2.Enabled = true;                      cmbRollover2.Enabled = true;                      nudNumberOfPeriods.Minimum = (decimal)((SavingsBookProduct)product).TermDepositPeriodMin;                      nudNumberOfPeriods.Maximum = (decimal)((SavingsBookProduct)product).TermDepositPeriodMax;                      nudNumberOfPeriods.Value = nudNumberOfPeriods.Minimum;                      tbTargetAccount2.ResetText();                  }                }
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,DisplaySavingProduct,The following statement contains a magic number: if (product is SavingsBookProduct)              {                  gbDepositInterest.Visible = false;                  gbInterest.Visible = true;                    lbWithdrawFees.Visible = true;                  nudWithdrawFees.Visible = true;                  lbWithdrawFeesMinMax.Visible = true;                    lbEntryFees.Visible = true;                  nudEntryFees.Visible = true;                  lbEntryFeesMinMax.Visible = true;                    lbTransferFees.Visible = true;                  nudTransferFees.Visible = true;                  nudIbtFee.Visible = true;                  lbTransferFeesMinMax.Visible = true;                    lbDepositFees.Visible = true;                  nudDepositFees.Visible = true;                  lbDepositFeesMinMax.Visible = true;                    lbChequeDepositFees.Visible = true;                  nudChequeDepositFees.Visible = true;                  lblChequeDepositFeesMinMax.Visible = true;                    lbCloseFees.Visible = true;                  nudCloseFees.Visible = true;                  lbCloseFeesMinMax.Visible = true;                    lbManagementFees.Visible = true;                  nudManagementFees.Visible = true;                  lbManagementFeesMinMax.Visible = true;                    lbOverdraftFees.Visible = true;                  nudOverdraftFees.Visible = true;                  lbOverdraftFeesMinMax.Visible = true;                    lbAgioFees.Visible = true;                  nudAgioFees.Visible = true;                  lbAgioFeesMinMax.Visible = true;                    lbReopenFees.Visible = true;                  nudReopenFees.Visible = true;                  lbReopenFeesMinMax.Visible = true;                    lbInterestAccrualValue.Text = MultiLanguageStrings.GetString(Ressource.FrmAddSavingProduct' ((SavingsBookProduct)product).InterestBase + ".Text");                  lbInterestPostingValue.Text = MultiLanguageStrings.GetString(Ressource.FrmAddSavingProduct' ((SavingsBookProduct)product).InterestFrequency + ".Text");                  lbInterestBasedOnValue.Text = ((SavingsBookProduct)product).CalculAmountBase.HasValue ? MultiLanguageStrings.GetString(Ressource.FrmAddSavingProduct' ((SavingsBookProduct)product).CalculAmountBase + ".Text") : "------";                    savingDepositToolStripMenuItem.Enabled = true;                  savingWithdrawToolStripMenuItem.Enabled = true;                  savingTransferToolStripMenuItem.Enabled = true;                    // entry fees                  nudEntryFees.DecimalPlaces = 0;                  nudEntryFees.Increment = 1;                  if (((SavingsBookProduct)product).EntryFees.HasValue)                  {                      nudEntryFees.Enabled = false;                      nudEntryFees.Minimum = ((SavingsBookProduct)product).EntryFees.Value;                      nudEntryFees.Maximum = ((SavingsBookProduct)product).EntryFees.Value;                      lbEntryFeesMinMax.Text = string.Format("{0} {1}"' ((SavingsBookProduct)product).EntryFees.GetFormatedValue(product.Currency.UseCents)' product.Currency.Code);                  }                  else                  {                      nudEntryFees.Enabled = true;                      nudEntryFees.Minimum = ((SavingsBookProduct)product).EntryFeesMin.Value;                      nudEntryFees.Maximum = ((SavingsBookProduct)product).EntryFeesMax.Value;                      lbEntryFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                          "Min "' ((SavingsBookProduct)product).EntryFeesMin.GetFormatedValue(product.Currency.UseCents)'                          "Max "' ((SavingsBookProduct)product).EntryFeesMax.GetFormatedValue(product.Currency.UseCents)'                          product.Currency.Code);                  }                    // withdraw fees                  if (((SavingsBookProduct)product).WithdrawFeesType == OSavingsFeesType.Flat)                  {                      nudWithdrawFees.DecimalPlaces = 0;                      nudWithdrawFees.Increment = 1;                      if (((SavingsBookProduct)product).FlatWithdrawFees.HasValue)                      {                          nudWithdrawFees.Enabled = false;                          nudWithdrawFees.Minimum = ((SavingsBookProduct)product).FlatWithdrawFees.Value;                          nudWithdrawFees.Maximum = ((SavingsBookProduct)product).FlatWithdrawFees.Value;                          lbWithdrawFeesMinMax.Text = string.Format("{0} {1}"' ((SavingsBookProduct)product).FlatWithdrawFees.GetFormatedValue(product.Currency.UseCents)' product.Currency.Code);                      }                      else                      {                          nudWithdrawFees.Enabled = true;                          nudWithdrawFees.Minimum = ((SavingsBookProduct)product).FlatWithdrawFeesMin.Value;                          nudWithdrawFees.Maximum = ((SavingsBookProduct)product).FlatWithdrawFeesMax.Value;                          lbWithdrawFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                              "Min "' ((SavingsBookProduct)product).FlatWithdrawFeesMin.GetFormatedValue(product.Currency.UseCents)'                              "Max "' ((SavingsBookProduct)product).FlatWithdrawFeesMax.GetFormatedValue(product.Currency.UseCents)'                              product.Currency.Code);                      }                  }                  else                  {                      nudWithdrawFees.DecimalPlaces = 4;                      nudWithdrawFees.Increment = 0.0001m;                      if (((SavingsBookProduct)product).RateWithdrawFees.HasValue)                      {                          nudWithdrawFees.Enabled = false;                          nudWithdrawFees.Minimum = (decimal)((SavingsBookProduct)product).RateWithdrawFees.Value * 100;                          nudWithdrawFees.Maximum = (decimal)((SavingsBookProduct)product).RateWithdrawFees.Value * 100;                          lbWithdrawFeesMinMax.Text = string.Format("{0} {1}"' (((SavingsBookProduct)product).RateWithdrawFees * 100)' "%");                      }                      else                      {                          nudWithdrawFees.Enabled = true;                          nudWithdrawFees.Minimum = (decimal)((SavingsBookProduct)product).RateWithdrawFeesMin.Value * 100;                          nudWithdrawFees.Maximum = (decimal)((SavingsBookProduct)product).RateWithdrawFeesMax.Value * 100;                          lbWithdrawFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                              "Min "' (((SavingsBookProduct)product).RateWithdrawFeesMin * 100)'                              "Max "' (((SavingsBookProduct)product).RateWithdrawFeesMax * 100)'                              "%");                      }                  }                    // Inter-branch tansfer fee                  SavingsBookProduct p = (SavingsBookProduct)product;                  Fee fee = p.InterBranchTransferFee;                  nudIbtFee.DecimalPlaces = fee.IsFlat ? 0 : 2;                  nudIbtFee.Increment = fee.IsFlat ? 1 : 0.01m;                  nudIbtFee.Enabled = !fee.Value.HasValue;                  nudIbtFee.Minimum = fee.GetMin();                  nudIbtFee.Maximum = fee.GetMax();                  if (fee.IsRange)                  {                      string min = fee.GetMinFormatted(p.Currency);                      string max = fee.GetMaxFormatted(p.Currency);                      const string mask = "Min {0}\r\nMax {1}";                      lblIbtFeeMinMax.Text = string.Format(mask' min' max);                  }                  else                  {                      lblIbtFeeMinMax.Text = fee.GetValueFormatted(p.Currency);                  }                    if (((SavingsBookProduct)product).TransferFeesType == OSavingsFeesType.Flat)                  {                      nudTransferFees.DecimalPlaces = 0;                      nudTransferFees.Increment = 1;                      if (((SavingsBookProduct)product).FlatTransferFees.HasValue)                      {                          nudTransferFees.Enabled = false;                          nudTransferFees.Minimum = ((SavingsBookProduct)product).FlatTransferFees.Value;                          nudTransferFees.Maximum = ((SavingsBookProduct)product).FlatTransferFees.Value;                          lbTransferFeesMinMax.Text = string.Format("{0} {1}"' ((SavingsBookProduct)product).FlatTransferFees.GetFormatedValue(product.Currency.UseCents)' product.Currency.Code);                      }                      else                      {                          nudTransferFees.Enabled = true;                          nudTransferFees.Minimum = ((SavingsBookProduct)product).FlatTransferFeesMin.Value;                          nudTransferFees.Maximum = ((SavingsBookProduct)product).FlatTransferFeesMax.Value;                          lbTransferFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                              "Min "' ((SavingsBookProduct)product).FlatTransferFeesMin.GetFormatedValue(product.Currency.UseCents)'                              "Max "' ((SavingsBookProduct)product).FlatTransferFeesMax.GetFormatedValue(product.Currency.UseCents)'                              product.Currency.Code);                      }                  }                  else                  {                      nudTransferFees.DecimalPlaces = 4;                      nudTransferFees.Increment = 0.0001m;                      if (((SavingsBookProduct)product).RateTransferFees.HasValue)                      {                          nudTransferFees.Enabled = false;                          nudTransferFees.Minimum = (decimal)((SavingsBookProduct)product).RateTransferFees.Value * 100;                          nudTransferFees.Maximum = (decimal)((SavingsBookProduct)product).RateTransferFees.Value * 100;                          lbTransferFeesMinMax.Text = string.Format("{0} {1}"' (((SavingsBookProduct)product).RateTransferFees * 100)' "%");                      }                      else                      {                          nudTransferFees.Enabled = true;                          nudTransferFees.Minimum = (decimal)((SavingsBookProduct)product).RateTransferFeesMin.Value * 100;                          nudTransferFees.Maximum = (decimal)((SavingsBookProduct)product).RateTransferFeesMax.Value * 100;                          lbTransferFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                              "Min "' (((SavingsBookProduct)product).RateTransferFeesMin * 100)'                              "Max "' (((SavingsBookProduct)product).RateTransferFeesMax * 100)'                              "%");                      }                  }                    //Cash Deposit fees                  nudDepositFees.DecimalPlaces = 0;                  nudDepositFees.Increment = 1;                  if (((SavingsBookProduct)product).DepositFees.HasValue)                  {                      nudDepositFees.Enabled = false;                      nudDepositFees.Minimum = ((SavingsBookProduct)product).DepositFees.Value;                      nudDepositFees.Maximum = ((SavingsBookProduct)product).DepositFees.Value;                      lbDepositFeesMinMax.Text = string.Format("{0} {1}"'                                                               ((SavingsBookProduct)product).DepositFees.GetFormatedValue(product.Currency.UseCents)'                                                               product.Currency.Code);                  }                  else                  {                      nudDepositFees.Enabled = true;                      nudDepositFees.Minimum = ((SavingsBookProduct)product).DepositFeesMin.Value;                      nudDepositFees.Maximum = ((SavingsBookProduct)product).DepositFeesMax.Value;                      lbDepositFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                                                               "Min "' ((SavingsBookProduct)product).DepositFeesMin.GetFormatedValue(product.Currency.UseCents)'                                                               "Max "' ((SavingsBookProduct)product).DepositFeesMax.GetFormatedValue(product.Currency.UseCents)'                                                               product.Currency.Code);                  }                    //Cheque Deposit fees                  nudChequeDepositFees.DecimalPlaces = 0;                  nudChequeDepositFees.Increment = 1;                  if (((SavingsBookProduct)product).ChequeDepositFees.HasValue)                  {                      nudChequeDepositFees.Enabled = false;                      nudChequeDepositFees.Maximum = ((SavingsBookProduct)product).ChequeDepositFees.Value;                      nudChequeDepositFees.Minimum = ((SavingsBookProduct)product).ChequeDepositFees.Value;                      lblChequeDepositFeesMinMax.Text = string.Format("{0} {1}"'                                                               ((SavingsBookProduct)product).ChequeDepositFees.GetFormatedValue(product.Currency.UseCents)'                                                               product.Currency.Code);                  }                  else                  {                      nudChequeDepositFees.Enabled = true;                      nudChequeDepositFees.Minimum = ((SavingsBookProduct)product).ChequeDepositFeesMin.Value;                      nudChequeDepositFees.Maximum = ((SavingsBookProduct)product).ChequeDepositFeesMax.Value;                      lblChequeDepositFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                                                               "Min "' ((SavingsBookProduct)product).ChequeDepositFeesMin.GetFormatedValue(product.Currency.UseCents)'                                                               "Max "' ((SavingsBookProduct)product).ChequeDepositFeesMax.GetFormatedValue(product.Currency.UseCents)'                                                               product.Currency.Code);                  }                    // Close fees                  nudCloseFees.DecimalPlaces = 0;                  nudCloseFees.Increment = 1;                  if (((SavingsBookProduct)product).CloseFees.HasValue)                  {                      nudCloseFees.Enabled = false;                      nudCloseFees.Minimum = ((SavingsBookProduct)product).CloseFees.Value;                      nudCloseFees.Maximum = ((SavingsBookProduct)product).CloseFees.Value;                      lbCloseFeesMinMax.Text = string.Format("{0} {1}"'                          ((SavingsBookProduct)product).CloseFees.GetFormatedValue(product.Currency.UseCents)' product.Currency.Code);                  }                  else                  {                      nudCloseFees.Enabled = true;                      nudCloseFees.Minimum = ((SavingsBookProduct)product).CloseFeesMin.Value;                      nudCloseFees.Maximum = ((SavingsBookProduct)product).CloseFeesMax.Value;                      lbCloseFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                          "Min "' ((SavingsBookProduct)product).CloseFeesMin.GetFormatedValue(product.Currency.UseCents)'                          "Max "' ((SavingsBookProduct)product).CloseFeesMax.GetFormatedValue(product.Currency.UseCents)'                          product.Currency.Code);                  }                    // Management fees                  nudManagementFees.DecimalPlaces = 0;                  nudManagementFees.Increment = 1;                  if (((SavingsBookProduct)product).ManagementFees.HasValue)                  {                      nudManagementFees.Enabled = false;                      nudManagementFees.Minimum = ((SavingsBookProduct)product).ManagementFees.Value;                      nudManagementFees.Maximum = ((SavingsBookProduct)product).ManagementFees.Value;                      lbManagementFeesMinMax.Text = string.Format("{0} {1}"'                          ((SavingsBookProduct)product).ManagementFees.GetFormatedValue(product.Currency.UseCents)' product.Currency.Code);                  }                  else                  {                      nudManagementFees.Enabled = true;                      nudManagementFees.Minimum = ((SavingsBookProduct)product).ManagementFeesMin.Value;                      nudManagementFees.Maximum = ((SavingsBookProduct)product).ManagementFeesMax.Value;                      lbManagementFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                          "Min "' ((SavingsBookProduct)product).ManagementFeesMin.GetFormatedValue(product.Currency.UseCents)'                          "Max "' ((SavingsBookProduct)product).ManagementFeesMax.GetFormatedValue(product.Currency.UseCents)'                          product.Currency.Code);                  }                    // Overdraft fees                  nudOverdraftFees.DecimalPlaces = 0;                  nudOverdraftFees.Increment = 1;                  if (((SavingsBookProduct)product).OverdraftFees.HasValue)                  {                      nudOverdraftFees.Enabled = false;                      nudOverdraftFees.Minimum = ((SavingsBookProduct)product).OverdraftFees.Value;                      nudOverdraftFees.Maximum = ((SavingsBookProduct)product).OverdraftFees.Value;                      lbOverdraftFeesMinMax.Text = string.Format("{0} {1}"'                          ((SavingsBookProduct)product).OverdraftFees.GetFormatedValue(product.Currency.UseCents)' product.Currency.Code);                  }                  else                  {                      nudOverdraftFees.Enabled = true;                      nudOverdraftFees.Minimum = ((SavingsBookProduct)product).OverdraftFeesMin.Value;                      nudOverdraftFees.Maximum = ((SavingsBookProduct)product).OverdraftFeesMax.Value;                      lbOverdraftFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                          "Min "' ((SavingsBookProduct)product).OverdraftFeesMin.GetFormatedValue(product.Currency.UseCents)'                          "Max "' ((SavingsBookProduct)product).OverdraftFeesMax.GetFormatedValue(product.Currency.UseCents)'                          product.Currency.Code);                  }                    // Agio fees                  nudAgioFees.DecimalPlaces = 4;                  nudAgioFees.Increment = 0.0001m;                  if (((SavingsBookProduct)product).AgioFees.HasValue)                  {                      nudAgioFees.Enabled = false;                      nudAgioFees.Minimum = (decimal)((SavingsBookProduct)product).AgioFees.Value * 100;                      nudAgioFees.Maximum = (decimal)((SavingsBookProduct)product).AgioFees.Value * 100;                      lbAgioFeesMinMax.Text = string.Format("{0} {1}"' ((SavingsBookProduct)product).AgioFees * 100' "%");                  }                  else                  {                      nudAgioFees.Enabled = true;                      nudAgioFees.Minimum = (decimal)((SavingsBookProduct)product).AgioFeesMin.Value * 100;                      nudAgioFees.Maximum = (decimal)((SavingsBookProduct)product).AgioFeesMax.Value * 100;                      lbAgioFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                          "Min "' ((SavingsBookProduct)product).AgioFeesMin * 100'                          "Max "' ((SavingsBookProduct)product).AgioFeesMax * 100' "%");                  }                    //Reopen fees                  nudReopenFees.DecimalPlaces = 0;                  nudReopenFees.Increment = 1;                    if (((SavingsBookProduct)product).ReopenFees.HasValue)                  {                      nudReopenFees.Enabled = false;                      nudReopenFees.Minimum = ((SavingsBookProduct)product).ReopenFees.Value;                      nudReopenFees.Maximum = ((SavingsBookProduct)product).ReopenFees.Value;                      lbReopenFeesMinMax.Text = string.Format("{0} {1}"'                                                               ((SavingsBookProduct)product).ReopenFees.GetFormatedValue(product.Currency.UseCents)'                                                               product.Currency.Code);                  }                  else                  {                      nudReopenFees.Enabled = true;                      nudReopenFees.Minimum = ((SavingsBookProduct)product).ReopenFeesMin.Value;                      nudReopenFees.Maximum = ((SavingsBookProduct)product).ReopenFeesMax.Value;                      lbReopenFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                                                               "Min "' ((SavingsBookProduct)product).ReopenFeesMin.GetFormatedValue(product.Currency.UseCents)'                                                               "Max "' ((SavingsBookProduct)product).ReopenFeesMax.GetFormatedValue(product.Currency.UseCents)'                                                               product.Currency.Code);                  }                    if (((SavingsBookProduct)product).UseTermDeposit)                  {                      nudNumberOfPeriods.Enabled = true;                      btSearchContract2.Enabled = true;                      cmbRollover2.Enabled = true;                      nudNumberOfPeriods.Minimum = (decimal)((SavingsBookProduct)product).TermDepositPeriodMin;                      nudNumberOfPeriods.Maximum = (decimal)((SavingsBookProduct)product).TermDepositPeriodMax;                      nudNumberOfPeriods.Value = nudNumberOfPeriods.Minimum;                      tbTargetAccount2.ResetText();                  }                }
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,DisplaySavingProduct,The following statement contains a magic number: if (product is SavingsBookProduct)              {                  gbDepositInterest.Visible = false;                  gbInterest.Visible = true;                    lbWithdrawFees.Visible = true;                  nudWithdrawFees.Visible = true;                  lbWithdrawFeesMinMax.Visible = true;                    lbEntryFees.Visible = true;                  nudEntryFees.Visible = true;                  lbEntryFeesMinMax.Visible = true;                    lbTransferFees.Visible = true;                  nudTransferFees.Visible = true;                  nudIbtFee.Visible = true;                  lbTransferFeesMinMax.Visible = true;                    lbDepositFees.Visible = true;                  nudDepositFees.Visible = true;                  lbDepositFeesMinMax.Visible = true;                    lbChequeDepositFees.Visible = true;                  nudChequeDepositFees.Visible = true;                  lblChequeDepositFeesMinMax.Visible = true;                    lbCloseFees.Visible = true;                  nudCloseFees.Visible = true;                  lbCloseFeesMinMax.Visible = true;                    lbManagementFees.Visible = true;                  nudManagementFees.Visible = true;                  lbManagementFeesMinMax.Visible = true;                    lbOverdraftFees.Visible = true;                  nudOverdraftFees.Visible = true;                  lbOverdraftFeesMinMax.Visible = true;                    lbAgioFees.Visible = true;                  nudAgioFees.Visible = true;                  lbAgioFeesMinMax.Visible = true;                    lbReopenFees.Visible = true;                  nudReopenFees.Visible = true;                  lbReopenFeesMinMax.Visible = true;                    lbInterestAccrualValue.Text = MultiLanguageStrings.GetString(Ressource.FrmAddSavingProduct' ((SavingsBookProduct)product).InterestBase + ".Text");                  lbInterestPostingValue.Text = MultiLanguageStrings.GetString(Ressource.FrmAddSavingProduct' ((SavingsBookProduct)product).InterestFrequency + ".Text");                  lbInterestBasedOnValue.Text = ((SavingsBookProduct)product).CalculAmountBase.HasValue ? MultiLanguageStrings.GetString(Ressource.FrmAddSavingProduct' ((SavingsBookProduct)product).CalculAmountBase + ".Text") : "------";                    savingDepositToolStripMenuItem.Enabled = true;                  savingWithdrawToolStripMenuItem.Enabled = true;                  savingTransferToolStripMenuItem.Enabled = true;                    // entry fees                  nudEntryFees.DecimalPlaces = 0;                  nudEntryFees.Increment = 1;                  if (((SavingsBookProduct)product).EntryFees.HasValue)                  {                      nudEntryFees.Enabled = false;                      nudEntryFees.Minimum = ((SavingsBookProduct)product).EntryFees.Value;                      nudEntryFees.Maximum = ((SavingsBookProduct)product).EntryFees.Value;                      lbEntryFeesMinMax.Text = string.Format("{0} {1}"' ((SavingsBookProduct)product).EntryFees.GetFormatedValue(product.Currency.UseCents)' product.Currency.Code);                  }                  else                  {                      nudEntryFees.Enabled = true;                      nudEntryFees.Minimum = ((SavingsBookProduct)product).EntryFeesMin.Value;                      nudEntryFees.Maximum = ((SavingsBookProduct)product).EntryFeesMax.Value;                      lbEntryFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                          "Min "' ((SavingsBookProduct)product).EntryFeesMin.GetFormatedValue(product.Currency.UseCents)'                          "Max "' ((SavingsBookProduct)product).EntryFeesMax.GetFormatedValue(product.Currency.UseCents)'                          product.Currency.Code);                  }                    // withdraw fees                  if (((SavingsBookProduct)product).WithdrawFeesType == OSavingsFeesType.Flat)                  {                      nudWithdrawFees.DecimalPlaces = 0;                      nudWithdrawFees.Increment = 1;                      if (((SavingsBookProduct)product).FlatWithdrawFees.HasValue)                      {                          nudWithdrawFees.Enabled = false;                          nudWithdrawFees.Minimum = ((SavingsBookProduct)product).FlatWithdrawFees.Value;                          nudWithdrawFees.Maximum = ((SavingsBookProduct)product).FlatWithdrawFees.Value;                          lbWithdrawFeesMinMax.Text = string.Format("{0} {1}"' ((SavingsBookProduct)product).FlatWithdrawFees.GetFormatedValue(product.Currency.UseCents)' product.Currency.Code);                      }                      else                      {                          nudWithdrawFees.Enabled = true;                          nudWithdrawFees.Minimum = ((SavingsBookProduct)product).FlatWithdrawFeesMin.Value;                          nudWithdrawFees.Maximum = ((SavingsBookProduct)product).FlatWithdrawFeesMax.Value;                          lbWithdrawFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                              "Min "' ((SavingsBookProduct)product).FlatWithdrawFeesMin.GetFormatedValue(product.Currency.UseCents)'                              "Max "' ((SavingsBookProduct)product).FlatWithdrawFeesMax.GetFormatedValue(product.Currency.UseCents)'                              product.Currency.Code);                      }                  }                  else                  {                      nudWithdrawFees.DecimalPlaces = 4;                      nudWithdrawFees.Increment = 0.0001m;                      if (((SavingsBookProduct)product).RateWithdrawFees.HasValue)                      {                          nudWithdrawFees.Enabled = false;                          nudWithdrawFees.Minimum = (decimal)((SavingsBookProduct)product).RateWithdrawFees.Value * 100;                          nudWithdrawFees.Maximum = (decimal)((SavingsBookProduct)product).RateWithdrawFees.Value * 100;                          lbWithdrawFeesMinMax.Text = string.Format("{0} {1}"' (((SavingsBookProduct)product).RateWithdrawFees * 100)' "%");                      }                      else                      {                          nudWithdrawFees.Enabled = true;                          nudWithdrawFees.Minimum = (decimal)((SavingsBookProduct)product).RateWithdrawFeesMin.Value * 100;                          nudWithdrawFees.Maximum = (decimal)((SavingsBookProduct)product).RateWithdrawFeesMax.Value * 100;                          lbWithdrawFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                              "Min "' (((SavingsBookProduct)product).RateWithdrawFeesMin * 100)'                              "Max "' (((SavingsBookProduct)product).RateWithdrawFeesMax * 100)'                              "%");                      }                  }                    // Inter-branch tansfer fee                  SavingsBookProduct p = (SavingsBookProduct)product;                  Fee fee = p.InterBranchTransferFee;                  nudIbtFee.DecimalPlaces = fee.IsFlat ? 0 : 2;                  nudIbtFee.Increment = fee.IsFlat ? 1 : 0.01m;                  nudIbtFee.Enabled = !fee.Value.HasValue;                  nudIbtFee.Minimum = fee.GetMin();                  nudIbtFee.Maximum = fee.GetMax();                  if (fee.IsRange)                  {                      string min = fee.GetMinFormatted(p.Currency);                      string max = fee.GetMaxFormatted(p.Currency);                      const string mask = "Min {0}\r\nMax {1}";                      lblIbtFeeMinMax.Text = string.Format(mask' min' max);                  }                  else                  {                      lblIbtFeeMinMax.Text = fee.GetValueFormatted(p.Currency);                  }                    if (((SavingsBookProduct)product).TransferFeesType == OSavingsFeesType.Flat)                  {                      nudTransferFees.DecimalPlaces = 0;                      nudTransferFees.Increment = 1;                      if (((SavingsBookProduct)product).FlatTransferFees.HasValue)                      {                          nudTransferFees.Enabled = false;                          nudTransferFees.Minimum = ((SavingsBookProduct)product).FlatTransferFees.Value;                          nudTransferFees.Maximum = ((SavingsBookProduct)product).FlatTransferFees.Value;                          lbTransferFeesMinMax.Text = string.Format("{0} {1}"' ((SavingsBookProduct)product).FlatTransferFees.GetFormatedValue(product.Currency.UseCents)' product.Currency.Code);                      }                      else                      {                          nudTransferFees.Enabled = true;                          nudTransferFees.Minimum = ((SavingsBookProduct)product).FlatTransferFeesMin.Value;                          nudTransferFees.Maximum = ((SavingsBookProduct)product).FlatTransferFeesMax.Value;                          lbTransferFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                              "Min "' ((SavingsBookProduct)product).FlatTransferFeesMin.GetFormatedValue(product.Currency.UseCents)'                              "Max "' ((SavingsBookProduct)product).FlatTransferFeesMax.GetFormatedValue(product.Currency.UseCents)'                              product.Currency.Code);                      }                  }                  else                  {                      nudTransferFees.DecimalPlaces = 4;                      nudTransferFees.Increment = 0.0001m;                      if (((SavingsBookProduct)product).RateTransferFees.HasValue)                      {                          nudTransferFees.Enabled = false;                          nudTransferFees.Minimum = (decimal)((SavingsBookProduct)product).RateTransferFees.Value * 100;                          nudTransferFees.Maximum = (decimal)((SavingsBookProduct)product).RateTransferFees.Value * 100;                          lbTransferFeesMinMax.Text = string.Format("{0} {1}"' (((SavingsBookProduct)product).RateTransferFees * 100)' "%");                      }                      else                      {                          nudTransferFees.Enabled = true;                          nudTransferFees.Minimum = (decimal)((SavingsBookProduct)product).RateTransferFeesMin.Value * 100;                          nudTransferFees.Maximum = (decimal)((SavingsBookProduct)product).RateTransferFeesMax.Value * 100;                          lbTransferFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                              "Min "' (((SavingsBookProduct)product).RateTransferFeesMin * 100)'                              "Max "' (((SavingsBookProduct)product).RateTransferFeesMax * 100)'                              "%");                      }                  }                    //Cash Deposit fees                  nudDepositFees.DecimalPlaces = 0;                  nudDepositFees.Increment = 1;                  if (((SavingsBookProduct)product).DepositFees.HasValue)                  {                      nudDepositFees.Enabled = false;                      nudDepositFees.Minimum = ((SavingsBookProduct)product).DepositFees.Value;                      nudDepositFees.Maximum = ((SavingsBookProduct)product).DepositFees.Value;                      lbDepositFeesMinMax.Text = string.Format("{0} {1}"'                                                               ((SavingsBookProduct)product).DepositFees.GetFormatedValue(product.Currency.UseCents)'                                                               product.Currency.Code);                  }                  else                  {                      nudDepositFees.Enabled = true;                      nudDepositFees.Minimum = ((SavingsBookProduct)product).DepositFeesMin.Value;                      nudDepositFees.Maximum = ((SavingsBookProduct)product).DepositFeesMax.Value;                      lbDepositFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                                                               "Min "' ((SavingsBookProduct)product).DepositFeesMin.GetFormatedValue(product.Currency.UseCents)'                                                               "Max "' ((SavingsBookProduct)product).DepositFeesMax.GetFormatedValue(product.Currency.UseCents)'                                                               product.Currency.Code);                  }                    //Cheque Deposit fees                  nudChequeDepositFees.DecimalPlaces = 0;                  nudChequeDepositFees.Increment = 1;                  if (((SavingsBookProduct)product).ChequeDepositFees.HasValue)                  {                      nudChequeDepositFees.Enabled = false;                      nudChequeDepositFees.Maximum = ((SavingsBookProduct)product).ChequeDepositFees.Value;                      nudChequeDepositFees.Minimum = ((SavingsBookProduct)product).ChequeDepositFees.Value;                      lblChequeDepositFeesMinMax.Text = string.Format("{0} {1}"'                                                               ((SavingsBookProduct)product).ChequeDepositFees.GetFormatedValue(product.Currency.UseCents)'                                                               product.Currency.Code);                  }                  else                  {                      nudChequeDepositFees.Enabled = true;                      nudChequeDepositFees.Minimum = ((SavingsBookProduct)product).ChequeDepositFeesMin.Value;                      nudChequeDepositFees.Maximum = ((SavingsBookProduct)product).ChequeDepositFeesMax.Value;                      lblChequeDepositFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                                                               "Min "' ((SavingsBookProduct)product).ChequeDepositFeesMin.GetFormatedValue(product.Currency.UseCents)'                                                               "Max "' ((SavingsBookProduct)product).ChequeDepositFeesMax.GetFormatedValue(product.Currency.UseCents)'                                                               product.Currency.Code);                  }                    // Close fees                  nudCloseFees.DecimalPlaces = 0;                  nudCloseFees.Increment = 1;                  if (((SavingsBookProduct)product).CloseFees.HasValue)                  {                      nudCloseFees.Enabled = false;                      nudCloseFees.Minimum = ((SavingsBookProduct)product).CloseFees.Value;                      nudCloseFees.Maximum = ((SavingsBookProduct)product).CloseFees.Value;                      lbCloseFeesMinMax.Text = string.Format("{0} {1}"'                          ((SavingsBookProduct)product).CloseFees.GetFormatedValue(product.Currency.UseCents)' product.Currency.Code);                  }                  else                  {                      nudCloseFees.Enabled = true;                      nudCloseFees.Minimum = ((SavingsBookProduct)product).CloseFeesMin.Value;                      nudCloseFees.Maximum = ((SavingsBookProduct)product).CloseFeesMax.Value;                      lbCloseFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                          "Min "' ((SavingsBookProduct)product).CloseFeesMin.GetFormatedValue(product.Currency.UseCents)'                          "Max "' ((SavingsBookProduct)product).CloseFeesMax.GetFormatedValue(product.Currency.UseCents)'                          product.Currency.Code);                  }                    // Management fees                  nudManagementFees.DecimalPlaces = 0;                  nudManagementFees.Increment = 1;                  if (((SavingsBookProduct)product).ManagementFees.HasValue)                  {                      nudManagementFees.Enabled = false;                      nudManagementFees.Minimum = ((SavingsBookProduct)product).ManagementFees.Value;                      nudManagementFees.Maximum = ((SavingsBookProduct)product).ManagementFees.Value;                      lbManagementFeesMinMax.Text = string.Format("{0} {1}"'                          ((SavingsBookProduct)product).ManagementFees.GetFormatedValue(product.Currency.UseCents)' product.Currency.Code);                  }                  else                  {                      nudManagementFees.Enabled = true;                      nudManagementFees.Minimum = ((SavingsBookProduct)product).ManagementFeesMin.Value;                      nudManagementFees.Maximum = ((SavingsBookProduct)product).ManagementFeesMax.Value;                      lbManagementFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                          "Min "' ((SavingsBookProduct)product).ManagementFeesMin.GetFormatedValue(product.Currency.UseCents)'                          "Max "' ((SavingsBookProduct)product).ManagementFeesMax.GetFormatedValue(product.Currency.UseCents)'                          product.Currency.Code);                  }                    // Overdraft fees                  nudOverdraftFees.DecimalPlaces = 0;                  nudOverdraftFees.Increment = 1;                  if (((SavingsBookProduct)product).OverdraftFees.HasValue)                  {                      nudOverdraftFees.Enabled = false;                      nudOverdraftFees.Minimum = ((SavingsBookProduct)product).OverdraftFees.Value;                      nudOverdraftFees.Maximum = ((SavingsBookProduct)product).OverdraftFees.Value;                      lbOverdraftFeesMinMax.Text = string.Format("{0} {1}"'                          ((SavingsBookProduct)product).OverdraftFees.GetFormatedValue(product.Currency.UseCents)' product.Currency.Code);                  }                  else                  {                      nudOverdraftFees.Enabled = true;                      nudOverdraftFees.Minimum = ((SavingsBookProduct)product).OverdraftFeesMin.Value;                      nudOverdraftFees.Maximum = ((SavingsBookProduct)product).OverdraftFeesMax.Value;                      lbOverdraftFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                          "Min "' ((SavingsBookProduct)product).OverdraftFeesMin.GetFormatedValue(product.Currency.UseCents)'                          "Max "' ((SavingsBookProduct)product).OverdraftFeesMax.GetFormatedValue(product.Currency.UseCents)'                          product.Currency.Code);                  }                    // Agio fees                  nudAgioFees.DecimalPlaces = 4;                  nudAgioFees.Increment = 0.0001m;                  if (((SavingsBookProduct)product).AgioFees.HasValue)                  {                      nudAgioFees.Enabled = false;                      nudAgioFees.Minimum = (decimal)((SavingsBookProduct)product).AgioFees.Value * 100;                      nudAgioFees.Maximum = (decimal)((SavingsBookProduct)product).AgioFees.Value * 100;                      lbAgioFeesMinMax.Text = string.Format("{0} {1}"' ((SavingsBookProduct)product).AgioFees * 100' "%");                  }                  else                  {                      nudAgioFees.Enabled = true;                      nudAgioFees.Minimum = (decimal)((SavingsBookProduct)product).AgioFeesMin.Value * 100;                      nudAgioFees.Maximum = (decimal)((SavingsBookProduct)product).AgioFeesMax.Value * 100;                      lbAgioFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                          "Min "' ((SavingsBookProduct)product).AgioFeesMin * 100'                          "Max "' ((SavingsBookProduct)product).AgioFeesMax * 100' "%");                  }                    //Reopen fees                  nudReopenFees.DecimalPlaces = 0;                  nudReopenFees.Increment = 1;                    if (((SavingsBookProduct)product).ReopenFees.HasValue)                  {                      nudReopenFees.Enabled = false;                      nudReopenFees.Minimum = ((SavingsBookProduct)product).ReopenFees.Value;                      nudReopenFees.Maximum = ((SavingsBookProduct)product).ReopenFees.Value;                      lbReopenFeesMinMax.Text = string.Format("{0} {1}"'                                                               ((SavingsBookProduct)product).ReopenFees.GetFormatedValue(product.Currency.UseCents)'                                                               product.Currency.Code);                  }                  else                  {                      nudReopenFees.Enabled = true;                      nudReopenFees.Minimum = ((SavingsBookProduct)product).ReopenFeesMin.Value;                      nudReopenFees.Maximum = ((SavingsBookProduct)product).ReopenFeesMax.Value;                      lbReopenFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                                                               "Min "' ((SavingsBookProduct)product).ReopenFeesMin.GetFormatedValue(product.Currency.UseCents)'                                                               "Max "' ((SavingsBookProduct)product).ReopenFeesMax.GetFormatedValue(product.Currency.UseCents)'                                                               product.Currency.Code);                  }                    if (((SavingsBookProduct)product).UseTermDeposit)                  {                      nudNumberOfPeriods.Enabled = true;                      btSearchContract2.Enabled = true;                      cmbRollover2.Enabled = true;                      nudNumberOfPeriods.Minimum = (decimal)((SavingsBookProduct)product).TermDepositPeriodMin;                      nudNumberOfPeriods.Maximum = (decimal)((SavingsBookProduct)product).TermDepositPeriodMax;                      nudNumberOfPeriods.Value = nudNumberOfPeriods.Minimum;                      tbTargetAccount2.ResetText();                  }                }
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,DisplaySavingProduct,The following statement contains a magic number: if (product is SavingsBookProduct)              {                  gbDepositInterest.Visible = false;                  gbInterest.Visible = true;                    lbWithdrawFees.Visible = true;                  nudWithdrawFees.Visible = true;                  lbWithdrawFeesMinMax.Visible = true;                    lbEntryFees.Visible = true;                  nudEntryFees.Visible = true;                  lbEntryFeesMinMax.Visible = true;                    lbTransferFees.Visible = true;                  nudTransferFees.Visible = true;                  nudIbtFee.Visible = true;                  lbTransferFeesMinMax.Visible = true;                    lbDepositFees.Visible = true;                  nudDepositFees.Visible = true;                  lbDepositFeesMinMax.Visible = true;                    lbChequeDepositFees.Visible = true;                  nudChequeDepositFees.Visible = true;                  lblChequeDepositFeesMinMax.Visible = true;                    lbCloseFees.Visible = true;                  nudCloseFees.Visible = true;                  lbCloseFeesMinMax.Visible = true;                    lbManagementFees.Visible = true;                  nudManagementFees.Visible = true;                  lbManagementFeesMinMax.Visible = true;                    lbOverdraftFees.Visible = true;                  nudOverdraftFees.Visible = true;                  lbOverdraftFeesMinMax.Visible = true;                    lbAgioFees.Visible = true;                  nudAgioFees.Visible = true;                  lbAgioFeesMinMax.Visible = true;                    lbReopenFees.Visible = true;                  nudReopenFees.Visible = true;                  lbReopenFeesMinMax.Visible = true;                    lbInterestAccrualValue.Text = MultiLanguageStrings.GetString(Ressource.FrmAddSavingProduct' ((SavingsBookProduct)product).InterestBase + ".Text");                  lbInterestPostingValue.Text = MultiLanguageStrings.GetString(Ressource.FrmAddSavingProduct' ((SavingsBookProduct)product).InterestFrequency + ".Text");                  lbInterestBasedOnValue.Text = ((SavingsBookProduct)product).CalculAmountBase.HasValue ? MultiLanguageStrings.GetString(Ressource.FrmAddSavingProduct' ((SavingsBookProduct)product).CalculAmountBase + ".Text") : "------";                    savingDepositToolStripMenuItem.Enabled = true;                  savingWithdrawToolStripMenuItem.Enabled = true;                  savingTransferToolStripMenuItem.Enabled = true;                    // entry fees                  nudEntryFees.DecimalPlaces = 0;                  nudEntryFees.Increment = 1;                  if (((SavingsBookProduct)product).EntryFees.HasValue)                  {                      nudEntryFees.Enabled = false;                      nudEntryFees.Minimum = ((SavingsBookProduct)product).EntryFees.Value;                      nudEntryFees.Maximum = ((SavingsBookProduct)product).EntryFees.Value;                      lbEntryFeesMinMax.Text = string.Format("{0} {1}"' ((SavingsBookProduct)product).EntryFees.GetFormatedValue(product.Currency.UseCents)' product.Currency.Code);                  }                  else                  {                      nudEntryFees.Enabled = true;                      nudEntryFees.Minimum = ((SavingsBookProduct)product).EntryFeesMin.Value;                      nudEntryFees.Maximum = ((SavingsBookProduct)product).EntryFeesMax.Value;                      lbEntryFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                          "Min "' ((SavingsBookProduct)product).EntryFeesMin.GetFormatedValue(product.Currency.UseCents)'                          "Max "' ((SavingsBookProduct)product).EntryFeesMax.GetFormatedValue(product.Currency.UseCents)'                          product.Currency.Code);                  }                    // withdraw fees                  if (((SavingsBookProduct)product).WithdrawFeesType == OSavingsFeesType.Flat)                  {                      nudWithdrawFees.DecimalPlaces = 0;                      nudWithdrawFees.Increment = 1;                      if (((SavingsBookProduct)product).FlatWithdrawFees.HasValue)                      {                          nudWithdrawFees.Enabled = false;                          nudWithdrawFees.Minimum = ((SavingsBookProduct)product).FlatWithdrawFees.Value;                          nudWithdrawFees.Maximum = ((SavingsBookProduct)product).FlatWithdrawFees.Value;                          lbWithdrawFeesMinMax.Text = string.Format("{0} {1}"' ((SavingsBookProduct)product).FlatWithdrawFees.GetFormatedValue(product.Currency.UseCents)' product.Currency.Code);                      }                      else                      {                          nudWithdrawFees.Enabled = true;                          nudWithdrawFees.Minimum = ((SavingsBookProduct)product).FlatWithdrawFeesMin.Value;                          nudWithdrawFees.Maximum = ((SavingsBookProduct)product).FlatWithdrawFeesMax.Value;                          lbWithdrawFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                              "Min "' ((SavingsBookProduct)product).FlatWithdrawFeesMin.GetFormatedValue(product.Currency.UseCents)'                              "Max "' ((SavingsBookProduct)product).FlatWithdrawFeesMax.GetFormatedValue(product.Currency.UseCents)'                              product.Currency.Code);                      }                  }                  else                  {                      nudWithdrawFees.DecimalPlaces = 4;                      nudWithdrawFees.Increment = 0.0001m;                      if (((SavingsBookProduct)product).RateWithdrawFees.HasValue)                      {                          nudWithdrawFees.Enabled = false;                          nudWithdrawFees.Minimum = (decimal)((SavingsBookProduct)product).RateWithdrawFees.Value * 100;                          nudWithdrawFees.Maximum = (decimal)((SavingsBookProduct)product).RateWithdrawFees.Value * 100;                          lbWithdrawFeesMinMax.Text = string.Format("{0} {1}"' (((SavingsBookProduct)product).RateWithdrawFees * 100)' "%");                      }                      else                      {                          nudWithdrawFees.Enabled = true;                          nudWithdrawFees.Minimum = (decimal)((SavingsBookProduct)product).RateWithdrawFeesMin.Value * 100;                          nudWithdrawFees.Maximum = (decimal)((SavingsBookProduct)product).RateWithdrawFeesMax.Value * 100;                          lbWithdrawFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                              "Min "' (((SavingsBookProduct)product).RateWithdrawFeesMin * 100)'                              "Max "' (((SavingsBookProduct)product).RateWithdrawFeesMax * 100)'                              "%");                      }                  }                    // Inter-branch tansfer fee                  SavingsBookProduct p = (SavingsBookProduct)product;                  Fee fee = p.InterBranchTransferFee;                  nudIbtFee.DecimalPlaces = fee.IsFlat ? 0 : 2;                  nudIbtFee.Increment = fee.IsFlat ? 1 : 0.01m;                  nudIbtFee.Enabled = !fee.Value.HasValue;                  nudIbtFee.Minimum = fee.GetMin();                  nudIbtFee.Maximum = fee.GetMax();                  if (fee.IsRange)                  {                      string min = fee.GetMinFormatted(p.Currency);                      string max = fee.GetMaxFormatted(p.Currency);                      const string mask = "Min {0}\r\nMax {1}";                      lblIbtFeeMinMax.Text = string.Format(mask' min' max);                  }                  else                  {                      lblIbtFeeMinMax.Text = fee.GetValueFormatted(p.Currency);                  }                    if (((SavingsBookProduct)product).TransferFeesType == OSavingsFeesType.Flat)                  {                      nudTransferFees.DecimalPlaces = 0;                      nudTransferFees.Increment = 1;                      if (((SavingsBookProduct)product).FlatTransferFees.HasValue)                      {                          nudTransferFees.Enabled = false;                          nudTransferFees.Minimum = ((SavingsBookProduct)product).FlatTransferFees.Value;                          nudTransferFees.Maximum = ((SavingsBookProduct)product).FlatTransferFees.Value;                          lbTransferFeesMinMax.Text = string.Format("{0} {1}"' ((SavingsBookProduct)product).FlatTransferFees.GetFormatedValue(product.Currency.UseCents)' product.Currency.Code);                      }                      else                      {                          nudTransferFees.Enabled = true;                          nudTransferFees.Minimum = ((SavingsBookProduct)product).FlatTransferFeesMin.Value;                          nudTransferFees.Maximum = ((SavingsBookProduct)product).FlatTransferFeesMax.Value;                          lbTransferFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                              "Min "' ((SavingsBookProduct)product).FlatTransferFeesMin.GetFormatedValue(product.Currency.UseCents)'                              "Max "' ((SavingsBookProduct)product).FlatTransferFeesMax.GetFormatedValue(product.Currency.UseCents)'                              product.Currency.Code);                      }                  }                  else                  {                      nudTransferFees.DecimalPlaces = 4;                      nudTransferFees.Increment = 0.0001m;                      if (((SavingsBookProduct)product).RateTransferFees.HasValue)                      {                          nudTransferFees.Enabled = false;                          nudTransferFees.Minimum = (decimal)((SavingsBookProduct)product).RateTransferFees.Value * 100;                          nudTransferFees.Maximum = (decimal)((SavingsBookProduct)product).RateTransferFees.Value * 100;                          lbTransferFeesMinMax.Text = string.Format("{0} {1}"' (((SavingsBookProduct)product).RateTransferFees * 100)' "%");                      }                      else                      {                          nudTransferFees.Enabled = true;                          nudTransferFees.Minimum = (decimal)((SavingsBookProduct)product).RateTransferFeesMin.Value * 100;                          nudTransferFees.Maximum = (decimal)((SavingsBookProduct)product).RateTransferFeesMax.Value * 100;                          lbTransferFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                              "Min "' (((SavingsBookProduct)product).RateTransferFeesMin * 100)'                              "Max "' (((SavingsBookProduct)product).RateTransferFeesMax * 100)'                              "%");                      }                  }                    //Cash Deposit fees                  nudDepositFees.DecimalPlaces = 0;                  nudDepositFees.Increment = 1;                  if (((SavingsBookProduct)product).DepositFees.HasValue)                  {                      nudDepositFees.Enabled = false;                      nudDepositFees.Minimum = ((SavingsBookProduct)product).DepositFees.Value;                      nudDepositFees.Maximum = ((SavingsBookProduct)product).DepositFees.Value;                      lbDepositFeesMinMax.Text = string.Format("{0} {1}"'                                                               ((SavingsBookProduct)product).DepositFees.GetFormatedValue(product.Currency.UseCents)'                                                               product.Currency.Code);                  }                  else                  {                      nudDepositFees.Enabled = true;                      nudDepositFees.Minimum = ((SavingsBookProduct)product).DepositFeesMin.Value;                      nudDepositFees.Maximum = ((SavingsBookProduct)product).DepositFeesMax.Value;                      lbDepositFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                                                               "Min "' ((SavingsBookProduct)product).DepositFeesMin.GetFormatedValue(product.Currency.UseCents)'                                                               "Max "' ((SavingsBookProduct)product).DepositFeesMax.GetFormatedValue(product.Currency.UseCents)'                                                               product.Currency.Code);                  }                    //Cheque Deposit fees                  nudChequeDepositFees.DecimalPlaces = 0;                  nudChequeDepositFees.Increment = 1;                  if (((SavingsBookProduct)product).ChequeDepositFees.HasValue)                  {                      nudChequeDepositFees.Enabled = false;                      nudChequeDepositFees.Maximum = ((SavingsBookProduct)product).ChequeDepositFees.Value;                      nudChequeDepositFees.Minimum = ((SavingsBookProduct)product).ChequeDepositFees.Value;                      lblChequeDepositFeesMinMax.Text = string.Format("{0} {1}"'                                                               ((SavingsBookProduct)product).ChequeDepositFees.GetFormatedValue(product.Currency.UseCents)'                                                               product.Currency.Code);                  }                  else                  {                      nudChequeDepositFees.Enabled = true;                      nudChequeDepositFees.Minimum = ((SavingsBookProduct)product).ChequeDepositFeesMin.Value;                      nudChequeDepositFees.Maximum = ((SavingsBookProduct)product).ChequeDepositFeesMax.Value;                      lblChequeDepositFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                                                               "Min "' ((SavingsBookProduct)product).ChequeDepositFeesMin.GetFormatedValue(product.Currency.UseCents)'                                                               "Max "' ((SavingsBookProduct)product).ChequeDepositFeesMax.GetFormatedValue(product.Currency.UseCents)'                                                               product.Currency.Code);                  }                    // Close fees                  nudCloseFees.DecimalPlaces = 0;                  nudCloseFees.Increment = 1;                  if (((SavingsBookProduct)product).CloseFees.HasValue)                  {                      nudCloseFees.Enabled = false;                      nudCloseFees.Minimum = ((SavingsBookProduct)product).CloseFees.Value;                      nudCloseFees.Maximum = ((SavingsBookProduct)product).CloseFees.Value;                      lbCloseFeesMinMax.Text = string.Format("{0} {1}"'                          ((SavingsBookProduct)product).CloseFees.GetFormatedValue(product.Currency.UseCents)' product.Currency.Code);                  }                  else                  {                      nudCloseFees.Enabled = true;                      nudCloseFees.Minimum = ((SavingsBookProduct)product).CloseFeesMin.Value;                      nudCloseFees.Maximum = ((SavingsBookProduct)product).CloseFeesMax.Value;                      lbCloseFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                          "Min "' ((SavingsBookProduct)product).CloseFeesMin.GetFormatedValue(product.Currency.UseCents)'                          "Max "' ((SavingsBookProduct)product).CloseFeesMax.GetFormatedValue(product.Currency.UseCents)'                          product.Currency.Code);                  }                    // Management fees                  nudManagementFees.DecimalPlaces = 0;                  nudManagementFees.Increment = 1;                  if (((SavingsBookProduct)product).ManagementFees.HasValue)                  {                      nudManagementFees.Enabled = false;                      nudManagementFees.Minimum = ((SavingsBookProduct)product).ManagementFees.Value;                      nudManagementFees.Maximum = ((SavingsBookProduct)product).ManagementFees.Value;                      lbManagementFeesMinMax.Text = string.Format("{0} {1}"'                          ((SavingsBookProduct)product).ManagementFees.GetFormatedValue(product.Currency.UseCents)' product.Currency.Code);                  }                  else                  {                      nudManagementFees.Enabled = true;                      nudManagementFees.Minimum = ((SavingsBookProduct)product).ManagementFeesMin.Value;                      nudManagementFees.Maximum = ((SavingsBookProduct)product).ManagementFeesMax.Value;                      lbManagementFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                          "Min "' ((SavingsBookProduct)product).ManagementFeesMin.GetFormatedValue(product.Currency.UseCents)'                          "Max "' ((SavingsBookProduct)product).ManagementFeesMax.GetFormatedValue(product.Currency.UseCents)'                          product.Currency.Code);                  }                    // Overdraft fees                  nudOverdraftFees.DecimalPlaces = 0;                  nudOverdraftFees.Increment = 1;                  if (((SavingsBookProduct)product).OverdraftFees.HasValue)                  {                      nudOverdraftFees.Enabled = false;                      nudOverdraftFees.Minimum = ((SavingsBookProduct)product).OverdraftFees.Value;                      nudOverdraftFees.Maximum = ((SavingsBookProduct)product).OverdraftFees.Value;                      lbOverdraftFeesMinMax.Text = string.Format("{0} {1}"'                          ((SavingsBookProduct)product).OverdraftFees.GetFormatedValue(product.Currency.UseCents)' product.Currency.Code);                  }                  else                  {                      nudOverdraftFees.Enabled = true;                      nudOverdraftFees.Minimum = ((SavingsBookProduct)product).OverdraftFeesMin.Value;                      nudOverdraftFees.Maximum = ((SavingsBookProduct)product).OverdraftFeesMax.Value;                      lbOverdraftFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                          "Min "' ((SavingsBookProduct)product).OverdraftFeesMin.GetFormatedValue(product.Currency.UseCents)'                          "Max "' ((SavingsBookProduct)product).OverdraftFeesMax.GetFormatedValue(product.Currency.UseCents)'                          product.Currency.Code);                  }                    // Agio fees                  nudAgioFees.DecimalPlaces = 4;                  nudAgioFees.Increment = 0.0001m;                  if (((SavingsBookProduct)product).AgioFees.HasValue)                  {                      nudAgioFees.Enabled = false;                      nudAgioFees.Minimum = (decimal)((SavingsBookProduct)product).AgioFees.Value * 100;                      nudAgioFees.Maximum = (decimal)((SavingsBookProduct)product).AgioFees.Value * 100;                      lbAgioFeesMinMax.Text = string.Format("{0} {1}"' ((SavingsBookProduct)product).AgioFees * 100' "%");                  }                  else                  {                      nudAgioFees.Enabled = true;                      nudAgioFees.Minimum = (decimal)((SavingsBookProduct)product).AgioFeesMin.Value * 100;                      nudAgioFees.Maximum = (decimal)((SavingsBookProduct)product).AgioFeesMax.Value * 100;                      lbAgioFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                          "Min "' ((SavingsBookProduct)product).AgioFeesMin * 100'                          "Max "' ((SavingsBookProduct)product).AgioFeesMax * 100' "%");                  }                    //Reopen fees                  nudReopenFees.DecimalPlaces = 0;                  nudReopenFees.Increment = 1;                    if (((SavingsBookProduct)product).ReopenFees.HasValue)                  {                      nudReopenFees.Enabled = false;                      nudReopenFees.Minimum = ((SavingsBookProduct)product).ReopenFees.Value;                      nudReopenFees.Maximum = ((SavingsBookProduct)product).ReopenFees.Value;                      lbReopenFeesMinMax.Text = string.Format("{0} {1}"'                                                               ((SavingsBookProduct)product).ReopenFees.GetFormatedValue(product.Currency.UseCents)'                                                               product.Currency.Code);                  }                  else                  {                      nudReopenFees.Enabled = true;                      nudReopenFees.Minimum = ((SavingsBookProduct)product).ReopenFeesMin.Value;                      nudReopenFees.Maximum = ((SavingsBookProduct)product).ReopenFeesMax.Value;                      lbReopenFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                                                               "Min "' ((SavingsBookProduct)product).ReopenFeesMin.GetFormatedValue(product.Currency.UseCents)'                                                               "Max "' ((SavingsBookProduct)product).ReopenFeesMax.GetFormatedValue(product.Currency.UseCents)'                                                               product.Currency.Code);                  }                    if (((SavingsBookProduct)product).UseTermDeposit)                  {                      nudNumberOfPeriods.Enabled = true;                      btSearchContract2.Enabled = true;                      cmbRollover2.Enabled = true;                      nudNumberOfPeriods.Minimum = (decimal)((SavingsBookProduct)product).TermDepositPeriodMin;                      nudNumberOfPeriods.Maximum = (decimal)((SavingsBookProduct)product).TermDepositPeriodMax;                      nudNumberOfPeriods.Value = nudNumberOfPeriods.Minimum;                      tbTargetAccount2.ResetText();                  }                }
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,DisplaySavingProduct,The following statement contains a magic number: if (product is SavingsBookProduct)              {                  gbDepositInterest.Visible = false;                  gbInterest.Visible = true;                    lbWithdrawFees.Visible = true;                  nudWithdrawFees.Visible = true;                  lbWithdrawFeesMinMax.Visible = true;                    lbEntryFees.Visible = true;                  nudEntryFees.Visible = true;                  lbEntryFeesMinMax.Visible = true;                    lbTransferFees.Visible = true;                  nudTransferFees.Visible = true;                  nudIbtFee.Visible = true;                  lbTransferFeesMinMax.Visible = true;                    lbDepositFees.Visible = true;                  nudDepositFees.Visible = true;                  lbDepositFeesMinMax.Visible = true;                    lbChequeDepositFees.Visible = true;                  nudChequeDepositFees.Visible = true;                  lblChequeDepositFeesMinMax.Visible = true;                    lbCloseFees.Visible = true;                  nudCloseFees.Visible = true;                  lbCloseFeesMinMax.Visible = true;                    lbManagementFees.Visible = true;                  nudManagementFees.Visible = true;                  lbManagementFeesMinMax.Visible = true;                    lbOverdraftFees.Visible = true;                  nudOverdraftFees.Visible = true;                  lbOverdraftFeesMinMax.Visible = true;                    lbAgioFees.Visible = true;                  nudAgioFees.Visible = true;                  lbAgioFeesMinMax.Visible = true;                    lbReopenFees.Visible = true;                  nudReopenFees.Visible = true;                  lbReopenFeesMinMax.Visible = true;                    lbInterestAccrualValue.Text = MultiLanguageStrings.GetString(Ressource.FrmAddSavingProduct' ((SavingsBookProduct)product).InterestBase + ".Text");                  lbInterestPostingValue.Text = MultiLanguageStrings.GetString(Ressource.FrmAddSavingProduct' ((SavingsBookProduct)product).InterestFrequency + ".Text");                  lbInterestBasedOnValue.Text = ((SavingsBookProduct)product).CalculAmountBase.HasValue ? MultiLanguageStrings.GetString(Ressource.FrmAddSavingProduct' ((SavingsBookProduct)product).CalculAmountBase + ".Text") : "------";                    savingDepositToolStripMenuItem.Enabled = true;                  savingWithdrawToolStripMenuItem.Enabled = true;                  savingTransferToolStripMenuItem.Enabled = true;                    // entry fees                  nudEntryFees.DecimalPlaces = 0;                  nudEntryFees.Increment = 1;                  if (((SavingsBookProduct)product).EntryFees.HasValue)                  {                      nudEntryFees.Enabled = false;                      nudEntryFees.Minimum = ((SavingsBookProduct)product).EntryFees.Value;                      nudEntryFees.Maximum = ((SavingsBookProduct)product).EntryFees.Value;                      lbEntryFeesMinMax.Text = string.Format("{0} {1}"' ((SavingsBookProduct)product).EntryFees.GetFormatedValue(product.Currency.UseCents)' product.Currency.Code);                  }                  else                  {                      nudEntryFees.Enabled = true;                      nudEntryFees.Minimum = ((SavingsBookProduct)product).EntryFeesMin.Value;                      nudEntryFees.Maximum = ((SavingsBookProduct)product).EntryFeesMax.Value;                      lbEntryFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                          "Min "' ((SavingsBookProduct)product).EntryFeesMin.GetFormatedValue(product.Currency.UseCents)'                          "Max "' ((SavingsBookProduct)product).EntryFeesMax.GetFormatedValue(product.Currency.UseCents)'                          product.Currency.Code);                  }                    // withdraw fees                  if (((SavingsBookProduct)product).WithdrawFeesType == OSavingsFeesType.Flat)                  {                      nudWithdrawFees.DecimalPlaces = 0;                      nudWithdrawFees.Increment = 1;                      if (((SavingsBookProduct)product).FlatWithdrawFees.HasValue)                      {                          nudWithdrawFees.Enabled = false;                          nudWithdrawFees.Minimum = ((SavingsBookProduct)product).FlatWithdrawFees.Value;                          nudWithdrawFees.Maximum = ((SavingsBookProduct)product).FlatWithdrawFees.Value;                          lbWithdrawFeesMinMax.Text = string.Format("{0} {1}"' ((SavingsBookProduct)product).FlatWithdrawFees.GetFormatedValue(product.Currency.UseCents)' product.Currency.Code);                      }                      else                      {                          nudWithdrawFees.Enabled = true;                          nudWithdrawFees.Minimum = ((SavingsBookProduct)product).FlatWithdrawFeesMin.Value;                          nudWithdrawFees.Maximum = ((SavingsBookProduct)product).FlatWithdrawFeesMax.Value;                          lbWithdrawFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                              "Min "' ((SavingsBookProduct)product).FlatWithdrawFeesMin.GetFormatedValue(product.Currency.UseCents)'                              "Max "' ((SavingsBookProduct)product).FlatWithdrawFeesMax.GetFormatedValue(product.Currency.UseCents)'                              product.Currency.Code);                      }                  }                  else                  {                      nudWithdrawFees.DecimalPlaces = 4;                      nudWithdrawFees.Increment = 0.0001m;                      if (((SavingsBookProduct)product).RateWithdrawFees.HasValue)                      {                          nudWithdrawFees.Enabled = false;                          nudWithdrawFees.Minimum = (decimal)((SavingsBookProduct)product).RateWithdrawFees.Value * 100;                          nudWithdrawFees.Maximum = (decimal)((SavingsBookProduct)product).RateWithdrawFees.Value * 100;                          lbWithdrawFeesMinMax.Text = string.Format("{0} {1}"' (((SavingsBookProduct)product).RateWithdrawFees * 100)' "%");                      }                      else                      {                          nudWithdrawFees.Enabled = true;                          nudWithdrawFees.Minimum = (decimal)((SavingsBookProduct)product).RateWithdrawFeesMin.Value * 100;                          nudWithdrawFees.Maximum = (decimal)((SavingsBookProduct)product).RateWithdrawFeesMax.Value * 100;                          lbWithdrawFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                              "Min "' (((SavingsBookProduct)product).RateWithdrawFeesMin * 100)'                              "Max "' (((SavingsBookProduct)product).RateWithdrawFeesMax * 100)'                              "%");                      }                  }                    // Inter-branch tansfer fee                  SavingsBookProduct p = (SavingsBookProduct)product;                  Fee fee = p.InterBranchTransferFee;                  nudIbtFee.DecimalPlaces = fee.IsFlat ? 0 : 2;                  nudIbtFee.Increment = fee.IsFlat ? 1 : 0.01m;                  nudIbtFee.Enabled = !fee.Value.HasValue;                  nudIbtFee.Minimum = fee.GetMin();                  nudIbtFee.Maximum = fee.GetMax();                  if (fee.IsRange)                  {                      string min = fee.GetMinFormatted(p.Currency);                      string max = fee.GetMaxFormatted(p.Currency);                      const string mask = "Min {0}\r\nMax {1}";                      lblIbtFeeMinMax.Text = string.Format(mask' min' max);                  }                  else                  {                      lblIbtFeeMinMax.Text = fee.GetValueFormatted(p.Currency);                  }                    if (((SavingsBookProduct)product).TransferFeesType == OSavingsFeesType.Flat)                  {                      nudTransferFees.DecimalPlaces = 0;                      nudTransferFees.Increment = 1;                      if (((SavingsBookProduct)product).FlatTransferFees.HasValue)                      {                          nudTransferFees.Enabled = false;                          nudTransferFees.Minimum = ((SavingsBookProduct)product).FlatTransferFees.Value;                          nudTransferFees.Maximum = ((SavingsBookProduct)product).FlatTransferFees.Value;                          lbTransferFeesMinMax.Text = string.Format("{0} {1}"' ((SavingsBookProduct)product).FlatTransferFees.GetFormatedValue(product.Currency.UseCents)' product.Currency.Code);                      }                      else                      {                          nudTransferFees.Enabled = true;                          nudTransferFees.Minimum = ((SavingsBookProduct)product).FlatTransferFeesMin.Value;                          nudTransferFees.Maximum = ((SavingsBookProduct)product).FlatTransferFeesMax.Value;                          lbTransferFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                              "Min "' ((SavingsBookProduct)product).FlatTransferFeesMin.GetFormatedValue(product.Currency.UseCents)'                              "Max "' ((SavingsBookProduct)product).FlatTransferFeesMax.GetFormatedValue(product.Currency.UseCents)'                              product.Currency.Code);                      }                  }                  else                  {                      nudTransferFees.DecimalPlaces = 4;                      nudTransferFees.Increment = 0.0001m;                      if (((SavingsBookProduct)product).RateTransferFees.HasValue)                      {                          nudTransferFees.Enabled = false;                          nudTransferFees.Minimum = (decimal)((SavingsBookProduct)product).RateTransferFees.Value * 100;                          nudTransferFees.Maximum = (decimal)((SavingsBookProduct)product).RateTransferFees.Value * 100;                          lbTransferFeesMinMax.Text = string.Format("{0} {1}"' (((SavingsBookProduct)product).RateTransferFees * 100)' "%");                      }                      else                      {                          nudTransferFees.Enabled = true;                          nudTransferFees.Minimum = (decimal)((SavingsBookProduct)product).RateTransferFeesMin.Value * 100;                          nudTransferFees.Maximum = (decimal)((SavingsBookProduct)product).RateTransferFeesMax.Value * 100;                          lbTransferFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                              "Min "' (((SavingsBookProduct)product).RateTransferFeesMin * 100)'                              "Max "' (((SavingsBookProduct)product).RateTransferFeesMax * 100)'                              "%");                      }                  }                    //Cash Deposit fees                  nudDepositFees.DecimalPlaces = 0;                  nudDepositFees.Increment = 1;                  if (((SavingsBookProduct)product).DepositFees.HasValue)                  {                      nudDepositFees.Enabled = false;                      nudDepositFees.Minimum = ((SavingsBookProduct)product).DepositFees.Value;                      nudDepositFees.Maximum = ((SavingsBookProduct)product).DepositFees.Value;                      lbDepositFeesMinMax.Text = string.Format("{0} {1}"'                                                               ((SavingsBookProduct)product).DepositFees.GetFormatedValue(product.Currency.UseCents)'                                                               product.Currency.Code);                  }                  else                  {                      nudDepositFees.Enabled = true;                      nudDepositFees.Minimum = ((SavingsBookProduct)product).DepositFeesMin.Value;                      nudDepositFees.Maximum = ((SavingsBookProduct)product).DepositFeesMax.Value;                      lbDepositFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                                                               "Min "' ((SavingsBookProduct)product).DepositFeesMin.GetFormatedValue(product.Currency.UseCents)'                                                               "Max "' ((SavingsBookProduct)product).DepositFeesMax.GetFormatedValue(product.Currency.UseCents)'                                                               product.Currency.Code);                  }                    //Cheque Deposit fees                  nudChequeDepositFees.DecimalPlaces = 0;                  nudChequeDepositFees.Increment = 1;                  if (((SavingsBookProduct)product).ChequeDepositFees.HasValue)                  {                      nudChequeDepositFees.Enabled = false;                      nudChequeDepositFees.Maximum = ((SavingsBookProduct)product).ChequeDepositFees.Value;                      nudChequeDepositFees.Minimum = ((SavingsBookProduct)product).ChequeDepositFees.Value;                      lblChequeDepositFeesMinMax.Text = string.Format("{0} {1}"'                                                               ((SavingsBookProduct)product).ChequeDepositFees.GetFormatedValue(product.Currency.UseCents)'                                                               product.Currency.Code);                  }                  else                  {                      nudChequeDepositFees.Enabled = true;                      nudChequeDepositFees.Minimum = ((SavingsBookProduct)product).ChequeDepositFeesMin.Value;                      nudChequeDepositFees.Maximum = ((SavingsBookProduct)product).ChequeDepositFeesMax.Value;                      lblChequeDepositFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                                                               "Min "' ((SavingsBookProduct)product).ChequeDepositFeesMin.GetFormatedValue(product.Currency.UseCents)'                                                               "Max "' ((SavingsBookProduct)product).ChequeDepositFeesMax.GetFormatedValue(product.Currency.UseCents)'                                                               product.Currency.Code);                  }                    // Close fees                  nudCloseFees.DecimalPlaces = 0;                  nudCloseFees.Increment = 1;                  if (((SavingsBookProduct)product).CloseFees.HasValue)                  {                      nudCloseFees.Enabled = false;                      nudCloseFees.Minimum = ((SavingsBookProduct)product).CloseFees.Value;                      nudCloseFees.Maximum = ((SavingsBookProduct)product).CloseFees.Value;                      lbCloseFeesMinMax.Text = string.Format("{0} {1}"'                          ((SavingsBookProduct)product).CloseFees.GetFormatedValue(product.Currency.UseCents)' product.Currency.Code);                  }                  else                  {                      nudCloseFees.Enabled = true;                      nudCloseFees.Minimum = ((SavingsBookProduct)product).CloseFeesMin.Value;                      nudCloseFees.Maximum = ((SavingsBookProduct)product).CloseFeesMax.Value;                      lbCloseFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                          "Min "' ((SavingsBookProduct)product).CloseFeesMin.GetFormatedValue(product.Currency.UseCents)'                          "Max "' ((SavingsBookProduct)product).CloseFeesMax.GetFormatedValue(product.Currency.UseCents)'                          product.Currency.Code);                  }                    // Management fees                  nudManagementFees.DecimalPlaces = 0;                  nudManagementFees.Increment = 1;                  if (((SavingsBookProduct)product).ManagementFees.HasValue)                  {                      nudManagementFees.Enabled = false;                      nudManagementFees.Minimum = ((SavingsBookProduct)product).ManagementFees.Value;                      nudManagementFees.Maximum = ((SavingsBookProduct)product).ManagementFees.Value;                      lbManagementFeesMinMax.Text = string.Format("{0} {1}"'                          ((SavingsBookProduct)product).ManagementFees.GetFormatedValue(product.Currency.UseCents)' product.Currency.Code);                  }                  else                  {                      nudManagementFees.Enabled = true;                      nudManagementFees.Minimum = ((SavingsBookProduct)product).ManagementFeesMin.Value;                      nudManagementFees.Maximum = ((SavingsBookProduct)product).ManagementFeesMax.Value;                      lbManagementFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                          "Min "' ((SavingsBookProduct)product).ManagementFeesMin.GetFormatedValue(product.Currency.UseCents)'                          "Max "' ((SavingsBookProduct)product).ManagementFeesMax.GetFormatedValue(product.Currency.UseCents)'                          product.Currency.Code);                  }                    // Overdraft fees                  nudOverdraftFees.DecimalPlaces = 0;                  nudOverdraftFees.Increment = 1;                  if (((SavingsBookProduct)product).OverdraftFees.HasValue)                  {                      nudOverdraftFees.Enabled = false;                      nudOverdraftFees.Minimum = ((SavingsBookProduct)product).OverdraftFees.Value;                      nudOverdraftFees.Maximum = ((SavingsBookProduct)product).OverdraftFees.Value;                      lbOverdraftFeesMinMax.Text = string.Format("{0} {1}"'                          ((SavingsBookProduct)product).OverdraftFees.GetFormatedValue(product.Currency.UseCents)' product.Currency.Code);                  }                  else                  {                      nudOverdraftFees.Enabled = true;                      nudOverdraftFees.Minimum = ((SavingsBookProduct)product).OverdraftFeesMin.Value;                      nudOverdraftFees.Maximum = ((SavingsBookProduct)product).OverdraftFeesMax.Value;                      lbOverdraftFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                          "Min "' ((SavingsBookProduct)product).OverdraftFeesMin.GetFormatedValue(product.Currency.UseCents)'                          "Max "' ((SavingsBookProduct)product).OverdraftFeesMax.GetFormatedValue(product.Currency.UseCents)'                          product.Currency.Code);                  }                    // Agio fees                  nudAgioFees.DecimalPlaces = 4;                  nudAgioFees.Increment = 0.0001m;                  if (((SavingsBookProduct)product).AgioFees.HasValue)                  {                      nudAgioFees.Enabled = false;                      nudAgioFees.Minimum = (decimal)((SavingsBookProduct)product).AgioFees.Value * 100;                      nudAgioFees.Maximum = (decimal)((SavingsBookProduct)product).AgioFees.Value * 100;                      lbAgioFeesMinMax.Text = string.Format("{0} {1}"' ((SavingsBookProduct)product).AgioFees * 100' "%");                  }                  else                  {                      nudAgioFees.Enabled = true;                      nudAgioFees.Minimum = (decimal)((SavingsBookProduct)product).AgioFeesMin.Value * 100;                      nudAgioFees.Maximum = (decimal)((SavingsBookProduct)product).AgioFeesMax.Value * 100;                      lbAgioFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                          "Min "' ((SavingsBookProduct)product).AgioFeesMin * 100'                          "Max "' ((SavingsBookProduct)product).AgioFeesMax * 100' "%");                  }                    //Reopen fees                  nudReopenFees.DecimalPlaces = 0;                  nudReopenFees.Increment = 1;                    if (((SavingsBookProduct)product).ReopenFees.HasValue)                  {                      nudReopenFees.Enabled = false;                      nudReopenFees.Minimum = ((SavingsBookProduct)product).ReopenFees.Value;                      nudReopenFees.Maximum = ((SavingsBookProduct)product).ReopenFees.Value;                      lbReopenFeesMinMax.Text = string.Format("{0} {1}"'                                                               ((SavingsBookProduct)product).ReopenFees.GetFormatedValue(product.Currency.UseCents)'                                                               product.Currency.Code);                  }                  else                  {                      nudReopenFees.Enabled = true;                      nudReopenFees.Minimum = ((SavingsBookProduct)product).ReopenFeesMin.Value;                      nudReopenFees.Maximum = ((SavingsBookProduct)product).ReopenFeesMax.Value;                      lbReopenFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                                                               "Min "' ((SavingsBookProduct)product).ReopenFeesMin.GetFormatedValue(product.Currency.UseCents)'                                                               "Max "' ((SavingsBookProduct)product).ReopenFeesMax.GetFormatedValue(product.Currency.UseCents)'                                                               product.Currency.Code);                  }                    if (((SavingsBookProduct)product).UseTermDeposit)                  {                      nudNumberOfPeriods.Enabled = true;                      btSearchContract2.Enabled = true;                      cmbRollover2.Enabled = true;                      nudNumberOfPeriods.Minimum = (decimal)((SavingsBookProduct)product).TermDepositPeriodMin;                      nudNumberOfPeriods.Maximum = (decimal)((SavingsBookProduct)product).TermDepositPeriodMax;                      nudNumberOfPeriods.Value = nudNumberOfPeriods.Minimum;                      tbTargetAccount2.ResetText();                  }                }
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,DisplaySavingProduct,The following statement contains a magic number: if (product is SavingsBookProduct)              {                  gbDepositInterest.Visible = false;                  gbInterest.Visible = true;                    lbWithdrawFees.Visible = true;                  nudWithdrawFees.Visible = true;                  lbWithdrawFeesMinMax.Visible = true;                    lbEntryFees.Visible = true;                  nudEntryFees.Visible = true;                  lbEntryFeesMinMax.Visible = true;                    lbTransferFees.Visible = true;                  nudTransferFees.Visible = true;                  nudIbtFee.Visible = true;                  lbTransferFeesMinMax.Visible = true;                    lbDepositFees.Visible = true;                  nudDepositFees.Visible = true;                  lbDepositFeesMinMax.Visible = true;                    lbChequeDepositFees.Visible = true;                  nudChequeDepositFees.Visible = true;                  lblChequeDepositFeesMinMax.Visible = true;                    lbCloseFees.Visible = true;                  nudCloseFees.Visible = true;                  lbCloseFeesMinMax.Visible = true;                    lbManagementFees.Visible = true;                  nudManagementFees.Visible = true;                  lbManagementFeesMinMax.Visible = true;                    lbOverdraftFees.Visible = true;                  nudOverdraftFees.Visible = true;                  lbOverdraftFeesMinMax.Visible = true;                    lbAgioFees.Visible = true;                  nudAgioFees.Visible = true;                  lbAgioFeesMinMax.Visible = true;                    lbReopenFees.Visible = true;                  nudReopenFees.Visible = true;                  lbReopenFeesMinMax.Visible = true;                    lbInterestAccrualValue.Text = MultiLanguageStrings.GetString(Ressource.FrmAddSavingProduct' ((SavingsBookProduct)product).InterestBase + ".Text");                  lbInterestPostingValue.Text = MultiLanguageStrings.GetString(Ressource.FrmAddSavingProduct' ((SavingsBookProduct)product).InterestFrequency + ".Text");                  lbInterestBasedOnValue.Text = ((SavingsBookProduct)product).CalculAmountBase.HasValue ? MultiLanguageStrings.GetString(Ressource.FrmAddSavingProduct' ((SavingsBookProduct)product).CalculAmountBase + ".Text") : "------";                    savingDepositToolStripMenuItem.Enabled = true;                  savingWithdrawToolStripMenuItem.Enabled = true;                  savingTransferToolStripMenuItem.Enabled = true;                    // entry fees                  nudEntryFees.DecimalPlaces = 0;                  nudEntryFees.Increment = 1;                  if (((SavingsBookProduct)product).EntryFees.HasValue)                  {                      nudEntryFees.Enabled = false;                      nudEntryFees.Minimum = ((SavingsBookProduct)product).EntryFees.Value;                      nudEntryFees.Maximum = ((SavingsBookProduct)product).EntryFees.Value;                      lbEntryFeesMinMax.Text = string.Format("{0} {1}"' ((SavingsBookProduct)product).EntryFees.GetFormatedValue(product.Currency.UseCents)' product.Currency.Code);                  }                  else                  {                      nudEntryFees.Enabled = true;                      nudEntryFees.Minimum = ((SavingsBookProduct)product).EntryFeesMin.Value;                      nudEntryFees.Maximum = ((SavingsBookProduct)product).EntryFeesMax.Value;                      lbEntryFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                          "Min "' ((SavingsBookProduct)product).EntryFeesMin.GetFormatedValue(product.Currency.UseCents)'                          "Max "' ((SavingsBookProduct)product).EntryFeesMax.GetFormatedValue(product.Currency.UseCents)'                          product.Currency.Code);                  }                    // withdraw fees                  if (((SavingsBookProduct)product).WithdrawFeesType == OSavingsFeesType.Flat)                  {                      nudWithdrawFees.DecimalPlaces = 0;                      nudWithdrawFees.Increment = 1;                      if (((SavingsBookProduct)product).FlatWithdrawFees.HasValue)                      {                          nudWithdrawFees.Enabled = false;                          nudWithdrawFees.Minimum = ((SavingsBookProduct)product).FlatWithdrawFees.Value;                          nudWithdrawFees.Maximum = ((SavingsBookProduct)product).FlatWithdrawFees.Value;                          lbWithdrawFeesMinMax.Text = string.Format("{0} {1}"' ((SavingsBookProduct)product).FlatWithdrawFees.GetFormatedValue(product.Currency.UseCents)' product.Currency.Code);                      }                      else                      {                          nudWithdrawFees.Enabled = true;                          nudWithdrawFees.Minimum = ((SavingsBookProduct)product).FlatWithdrawFeesMin.Value;                          nudWithdrawFees.Maximum = ((SavingsBookProduct)product).FlatWithdrawFeesMax.Value;                          lbWithdrawFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                              "Min "' ((SavingsBookProduct)product).FlatWithdrawFeesMin.GetFormatedValue(product.Currency.UseCents)'                              "Max "' ((SavingsBookProduct)product).FlatWithdrawFeesMax.GetFormatedValue(product.Currency.UseCents)'                              product.Currency.Code);                      }                  }                  else                  {                      nudWithdrawFees.DecimalPlaces = 4;                      nudWithdrawFees.Increment = 0.0001m;                      if (((SavingsBookProduct)product).RateWithdrawFees.HasValue)                      {                          nudWithdrawFees.Enabled = false;                          nudWithdrawFees.Minimum = (decimal)((SavingsBookProduct)product).RateWithdrawFees.Value * 100;                          nudWithdrawFees.Maximum = (decimal)((SavingsBookProduct)product).RateWithdrawFees.Value * 100;                          lbWithdrawFeesMinMax.Text = string.Format("{0} {1}"' (((SavingsBookProduct)product).RateWithdrawFees * 100)' "%");                      }                      else                      {                          nudWithdrawFees.Enabled = true;                          nudWithdrawFees.Minimum = (decimal)((SavingsBookProduct)product).RateWithdrawFeesMin.Value * 100;                          nudWithdrawFees.Maximum = (decimal)((SavingsBookProduct)product).RateWithdrawFeesMax.Value * 100;                          lbWithdrawFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                              "Min "' (((SavingsBookProduct)product).RateWithdrawFeesMin * 100)'                              "Max "' (((SavingsBookProduct)product).RateWithdrawFeesMax * 100)'                              "%");                      }                  }                    // Inter-branch tansfer fee                  SavingsBookProduct p = (SavingsBookProduct)product;                  Fee fee = p.InterBranchTransferFee;                  nudIbtFee.DecimalPlaces = fee.IsFlat ? 0 : 2;                  nudIbtFee.Increment = fee.IsFlat ? 1 : 0.01m;                  nudIbtFee.Enabled = !fee.Value.HasValue;                  nudIbtFee.Minimum = fee.GetMin();                  nudIbtFee.Maximum = fee.GetMax();                  if (fee.IsRange)                  {                      string min = fee.GetMinFormatted(p.Currency);                      string max = fee.GetMaxFormatted(p.Currency);                      const string mask = "Min {0}\r\nMax {1}";                      lblIbtFeeMinMax.Text = string.Format(mask' min' max);                  }                  else                  {                      lblIbtFeeMinMax.Text = fee.GetValueFormatted(p.Currency);                  }                    if (((SavingsBookProduct)product).TransferFeesType == OSavingsFeesType.Flat)                  {                      nudTransferFees.DecimalPlaces = 0;                      nudTransferFees.Increment = 1;                      if (((SavingsBookProduct)product).FlatTransferFees.HasValue)                      {                          nudTransferFees.Enabled = false;                          nudTransferFees.Minimum = ((SavingsBookProduct)product).FlatTransferFees.Value;                          nudTransferFees.Maximum = ((SavingsBookProduct)product).FlatTransferFees.Value;                          lbTransferFeesMinMax.Text = string.Format("{0} {1}"' ((SavingsBookProduct)product).FlatTransferFees.GetFormatedValue(product.Currency.UseCents)' product.Currency.Code);                      }                      else                      {                          nudTransferFees.Enabled = true;                          nudTransferFees.Minimum = ((SavingsBookProduct)product).FlatTransferFeesMin.Value;                          nudTransferFees.Maximum = ((SavingsBookProduct)product).FlatTransferFeesMax.Value;                          lbTransferFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                              "Min "' ((SavingsBookProduct)product).FlatTransferFeesMin.GetFormatedValue(product.Currency.UseCents)'                              "Max "' ((SavingsBookProduct)product).FlatTransferFeesMax.GetFormatedValue(product.Currency.UseCents)'                              product.Currency.Code);                      }                  }                  else                  {                      nudTransferFees.DecimalPlaces = 4;                      nudTransferFees.Increment = 0.0001m;                      if (((SavingsBookProduct)product).RateTransferFees.HasValue)                      {                          nudTransferFees.Enabled = false;                          nudTransferFees.Minimum = (decimal)((SavingsBookProduct)product).RateTransferFees.Value * 100;                          nudTransferFees.Maximum = (decimal)((SavingsBookProduct)product).RateTransferFees.Value * 100;                          lbTransferFeesMinMax.Text = string.Format("{0} {1}"' (((SavingsBookProduct)product).RateTransferFees * 100)' "%");                      }                      else                      {                          nudTransferFees.Enabled = true;                          nudTransferFees.Minimum = (decimal)((SavingsBookProduct)product).RateTransferFeesMin.Value * 100;                          nudTransferFees.Maximum = (decimal)((SavingsBookProduct)product).RateTransferFeesMax.Value * 100;                          lbTransferFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                              "Min "' (((SavingsBookProduct)product).RateTransferFeesMin * 100)'                              "Max "' (((SavingsBookProduct)product).RateTransferFeesMax * 100)'                              "%");                      }                  }                    //Cash Deposit fees                  nudDepositFees.DecimalPlaces = 0;                  nudDepositFees.Increment = 1;                  if (((SavingsBookProduct)product).DepositFees.HasValue)                  {                      nudDepositFees.Enabled = false;                      nudDepositFees.Minimum = ((SavingsBookProduct)product).DepositFees.Value;                      nudDepositFees.Maximum = ((SavingsBookProduct)product).DepositFees.Value;                      lbDepositFeesMinMax.Text = string.Format("{0} {1}"'                                                               ((SavingsBookProduct)product).DepositFees.GetFormatedValue(product.Currency.UseCents)'                                                               product.Currency.Code);                  }                  else                  {                      nudDepositFees.Enabled = true;                      nudDepositFees.Minimum = ((SavingsBookProduct)product).DepositFeesMin.Value;                      nudDepositFees.Maximum = ((SavingsBookProduct)product).DepositFeesMax.Value;                      lbDepositFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                                                               "Min "' ((SavingsBookProduct)product).DepositFeesMin.GetFormatedValue(product.Currency.UseCents)'                                                               "Max "' ((SavingsBookProduct)product).DepositFeesMax.GetFormatedValue(product.Currency.UseCents)'                                                               product.Currency.Code);                  }                    //Cheque Deposit fees                  nudChequeDepositFees.DecimalPlaces = 0;                  nudChequeDepositFees.Increment = 1;                  if (((SavingsBookProduct)product).ChequeDepositFees.HasValue)                  {                      nudChequeDepositFees.Enabled = false;                      nudChequeDepositFees.Maximum = ((SavingsBookProduct)product).ChequeDepositFees.Value;                      nudChequeDepositFees.Minimum = ((SavingsBookProduct)product).ChequeDepositFees.Value;                      lblChequeDepositFeesMinMax.Text = string.Format("{0} {1}"'                                                               ((SavingsBookProduct)product).ChequeDepositFees.GetFormatedValue(product.Currency.UseCents)'                                                               product.Currency.Code);                  }                  else                  {                      nudChequeDepositFees.Enabled = true;                      nudChequeDepositFees.Minimum = ((SavingsBookProduct)product).ChequeDepositFeesMin.Value;                      nudChequeDepositFees.Maximum = ((SavingsBookProduct)product).ChequeDepositFeesMax.Value;                      lblChequeDepositFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                                                               "Min "' ((SavingsBookProduct)product).ChequeDepositFeesMin.GetFormatedValue(product.Currency.UseCents)'                                                               "Max "' ((SavingsBookProduct)product).ChequeDepositFeesMax.GetFormatedValue(product.Currency.UseCents)'                                                               product.Currency.Code);                  }                    // Close fees                  nudCloseFees.DecimalPlaces = 0;                  nudCloseFees.Increment = 1;                  if (((SavingsBookProduct)product).CloseFees.HasValue)                  {                      nudCloseFees.Enabled = false;                      nudCloseFees.Minimum = ((SavingsBookProduct)product).CloseFees.Value;                      nudCloseFees.Maximum = ((SavingsBookProduct)product).CloseFees.Value;                      lbCloseFeesMinMax.Text = string.Format("{0} {1}"'                          ((SavingsBookProduct)product).CloseFees.GetFormatedValue(product.Currency.UseCents)' product.Currency.Code);                  }                  else                  {                      nudCloseFees.Enabled = true;                      nudCloseFees.Minimum = ((SavingsBookProduct)product).CloseFeesMin.Value;                      nudCloseFees.Maximum = ((SavingsBookProduct)product).CloseFeesMax.Value;                      lbCloseFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                          "Min "' ((SavingsBookProduct)product).CloseFeesMin.GetFormatedValue(product.Currency.UseCents)'                          "Max "' ((SavingsBookProduct)product).CloseFeesMax.GetFormatedValue(product.Currency.UseCents)'                          product.Currency.Code);                  }                    // Management fees                  nudManagementFees.DecimalPlaces = 0;                  nudManagementFees.Increment = 1;                  if (((SavingsBookProduct)product).ManagementFees.HasValue)                  {                      nudManagementFees.Enabled = false;                      nudManagementFees.Minimum = ((SavingsBookProduct)product).ManagementFees.Value;                      nudManagementFees.Maximum = ((SavingsBookProduct)product).ManagementFees.Value;                      lbManagementFeesMinMax.Text = string.Format("{0} {1}"'                          ((SavingsBookProduct)product).ManagementFees.GetFormatedValue(product.Currency.UseCents)' product.Currency.Code);                  }                  else                  {                      nudManagementFees.Enabled = true;                      nudManagementFees.Minimum = ((SavingsBookProduct)product).ManagementFeesMin.Value;                      nudManagementFees.Maximum = ((SavingsBookProduct)product).ManagementFeesMax.Value;                      lbManagementFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                          "Min "' ((SavingsBookProduct)product).ManagementFeesMin.GetFormatedValue(product.Currency.UseCents)'                          "Max "' ((SavingsBookProduct)product).ManagementFeesMax.GetFormatedValue(product.Currency.UseCents)'                          product.Currency.Code);                  }                    // Overdraft fees                  nudOverdraftFees.DecimalPlaces = 0;                  nudOverdraftFees.Increment = 1;                  if (((SavingsBookProduct)product).OverdraftFees.HasValue)                  {                      nudOverdraftFees.Enabled = false;                      nudOverdraftFees.Minimum = ((SavingsBookProduct)product).OverdraftFees.Value;                      nudOverdraftFees.Maximum = ((SavingsBookProduct)product).OverdraftFees.Value;                      lbOverdraftFeesMinMax.Text = string.Format("{0} {1}"'                          ((SavingsBookProduct)product).OverdraftFees.GetFormatedValue(product.Currency.UseCents)' product.Currency.Code);                  }                  else                  {                      nudOverdraftFees.Enabled = true;                      nudOverdraftFees.Minimum = ((SavingsBookProduct)product).OverdraftFeesMin.Value;                      nudOverdraftFees.Maximum = ((SavingsBookProduct)product).OverdraftFeesMax.Value;                      lbOverdraftFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                          "Min "' ((SavingsBookProduct)product).OverdraftFeesMin.GetFormatedValue(product.Currency.UseCents)'                          "Max "' ((SavingsBookProduct)product).OverdraftFeesMax.GetFormatedValue(product.Currency.UseCents)'                          product.Currency.Code);                  }                    // Agio fees                  nudAgioFees.DecimalPlaces = 4;                  nudAgioFees.Increment = 0.0001m;                  if (((SavingsBookProduct)product).AgioFees.HasValue)                  {                      nudAgioFees.Enabled = false;                      nudAgioFees.Minimum = (decimal)((SavingsBookProduct)product).AgioFees.Value * 100;                      nudAgioFees.Maximum = (decimal)((SavingsBookProduct)product).AgioFees.Value * 100;                      lbAgioFeesMinMax.Text = string.Format("{0} {1}"' ((SavingsBookProduct)product).AgioFees * 100' "%");                  }                  else                  {                      nudAgioFees.Enabled = true;                      nudAgioFees.Minimum = (decimal)((SavingsBookProduct)product).AgioFeesMin.Value * 100;                      nudAgioFees.Maximum = (decimal)((SavingsBookProduct)product).AgioFeesMax.Value * 100;                      lbAgioFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                          "Min "' ((SavingsBookProduct)product).AgioFeesMin * 100'                          "Max "' ((SavingsBookProduct)product).AgioFeesMax * 100' "%");                  }                    //Reopen fees                  nudReopenFees.DecimalPlaces = 0;                  nudReopenFees.Increment = 1;                    if (((SavingsBookProduct)product).ReopenFees.HasValue)                  {                      nudReopenFees.Enabled = false;                      nudReopenFees.Minimum = ((SavingsBookProduct)product).ReopenFees.Value;                      nudReopenFees.Maximum = ((SavingsBookProduct)product).ReopenFees.Value;                      lbReopenFeesMinMax.Text = string.Format("{0} {1}"'                                                               ((SavingsBookProduct)product).ReopenFees.GetFormatedValue(product.Currency.UseCents)'                                                               product.Currency.Code);                  }                  else                  {                      nudReopenFees.Enabled = true;                      nudReopenFees.Minimum = ((SavingsBookProduct)product).ReopenFeesMin.Value;                      nudReopenFees.Maximum = ((SavingsBookProduct)product).ReopenFeesMax.Value;                      lbReopenFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                                                               "Min "' ((SavingsBookProduct)product).ReopenFeesMin.GetFormatedValue(product.Currency.UseCents)'                                                               "Max "' ((SavingsBookProduct)product).ReopenFeesMax.GetFormatedValue(product.Currency.UseCents)'                                                               product.Currency.Code);                  }                    if (((SavingsBookProduct)product).UseTermDeposit)                  {                      nudNumberOfPeriods.Enabled = true;                      btSearchContract2.Enabled = true;                      cmbRollover2.Enabled = true;                      nudNumberOfPeriods.Minimum = (decimal)((SavingsBookProduct)product).TermDepositPeriodMin;                      nudNumberOfPeriods.Maximum = (decimal)((SavingsBookProduct)product).TermDepositPeriodMax;                      nudNumberOfPeriods.Value = nudNumberOfPeriods.Minimum;                      tbTargetAccount2.ResetText();                  }                }
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,DisplaySavingProduct,The following statement contains a magic number: if (product is SavingsBookProduct)              {                  gbDepositInterest.Visible = false;                  gbInterest.Visible = true;                    lbWithdrawFees.Visible = true;                  nudWithdrawFees.Visible = true;                  lbWithdrawFeesMinMax.Visible = true;                    lbEntryFees.Visible = true;                  nudEntryFees.Visible = true;                  lbEntryFeesMinMax.Visible = true;                    lbTransferFees.Visible = true;                  nudTransferFees.Visible = true;                  nudIbtFee.Visible = true;                  lbTransferFeesMinMax.Visible = true;                    lbDepositFees.Visible = true;                  nudDepositFees.Visible = true;                  lbDepositFeesMinMax.Visible = true;                    lbChequeDepositFees.Visible = true;                  nudChequeDepositFees.Visible = true;                  lblChequeDepositFeesMinMax.Visible = true;                    lbCloseFees.Visible = true;                  nudCloseFees.Visible = true;                  lbCloseFeesMinMax.Visible = true;                    lbManagementFees.Visible = true;                  nudManagementFees.Visible = true;                  lbManagementFeesMinMax.Visible = true;                    lbOverdraftFees.Visible = true;                  nudOverdraftFees.Visible = true;                  lbOverdraftFeesMinMax.Visible = true;                    lbAgioFees.Visible = true;                  nudAgioFees.Visible = true;                  lbAgioFeesMinMax.Visible = true;                    lbReopenFees.Visible = true;                  nudReopenFees.Visible = true;                  lbReopenFeesMinMax.Visible = true;                    lbInterestAccrualValue.Text = MultiLanguageStrings.GetString(Ressource.FrmAddSavingProduct' ((SavingsBookProduct)product).InterestBase + ".Text");                  lbInterestPostingValue.Text = MultiLanguageStrings.GetString(Ressource.FrmAddSavingProduct' ((SavingsBookProduct)product).InterestFrequency + ".Text");                  lbInterestBasedOnValue.Text = ((SavingsBookProduct)product).CalculAmountBase.HasValue ? MultiLanguageStrings.GetString(Ressource.FrmAddSavingProduct' ((SavingsBookProduct)product).CalculAmountBase + ".Text") : "------";                    savingDepositToolStripMenuItem.Enabled = true;                  savingWithdrawToolStripMenuItem.Enabled = true;                  savingTransferToolStripMenuItem.Enabled = true;                    // entry fees                  nudEntryFees.DecimalPlaces = 0;                  nudEntryFees.Increment = 1;                  if (((SavingsBookProduct)product).EntryFees.HasValue)                  {                      nudEntryFees.Enabled = false;                      nudEntryFees.Minimum = ((SavingsBookProduct)product).EntryFees.Value;                      nudEntryFees.Maximum = ((SavingsBookProduct)product).EntryFees.Value;                      lbEntryFeesMinMax.Text = string.Format("{0} {1}"' ((SavingsBookProduct)product).EntryFees.GetFormatedValue(product.Currency.UseCents)' product.Currency.Code);                  }                  else                  {                      nudEntryFees.Enabled = true;                      nudEntryFees.Minimum = ((SavingsBookProduct)product).EntryFeesMin.Value;                      nudEntryFees.Maximum = ((SavingsBookProduct)product).EntryFeesMax.Value;                      lbEntryFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                          "Min "' ((SavingsBookProduct)product).EntryFeesMin.GetFormatedValue(product.Currency.UseCents)'                          "Max "' ((SavingsBookProduct)product).EntryFeesMax.GetFormatedValue(product.Currency.UseCents)'                          product.Currency.Code);                  }                    // withdraw fees                  if (((SavingsBookProduct)product).WithdrawFeesType == OSavingsFeesType.Flat)                  {                      nudWithdrawFees.DecimalPlaces = 0;                      nudWithdrawFees.Increment = 1;                      if (((SavingsBookProduct)product).FlatWithdrawFees.HasValue)                      {                          nudWithdrawFees.Enabled = false;                          nudWithdrawFees.Minimum = ((SavingsBookProduct)product).FlatWithdrawFees.Value;                          nudWithdrawFees.Maximum = ((SavingsBookProduct)product).FlatWithdrawFees.Value;                          lbWithdrawFeesMinMax.Text = string.Format("{0} {1}"' ((SavingsBookProduct)product).FlatWithdrawFees.GetFormatedValue(product.Currency.UseCents)' product.Currency.Code);                      }                      else                      {                          nudWithdrawFees.Enabled = true;                          nudWithdrawFees.Minimum = ((SavingsBookProduct)product).FlatWithdrawFeesMin.Value;                          nudWithdrawFees.Maximum = ((SavingsBookProduct)product).FlatWithdrawFeesMax.Value;                          lbWithdrawFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                              "Min "' ((SavingsBookProduct)product).FlatWithdrawFeesMin.GetFormatedValue(product.Currency.UseCents)'                              "Max "' ((SavingsBookProduct)product).FlatWithdrawFeesMax.GetFormatedValue(product.Currency.UseCents)'                              product.Currency.Code);                      }                  }                  else                  {                      nudWithdrawFees.DecimalPlaces = 4;                      nudWithdrawFees.Increment = 0.0001m;                      if (((SavingsBookProduct)product).RateWithdrawFees.HasValue)                      {                          nudWithdrawFees.Enabled = false;                          nudWithdrawFees.Minimum = (decimal)((SavingsBookProduct)product).RateWithdrawFees.Value * 100;                          nudWithdrawFees.Maximum = (decimal)((SavingsBookProduct)product).RateWithdrawFees.Value * 100;                          lbWithdrawFeesMinMax.Text = string.Format("{0} {1}"' (((SavingsBookProduct)product).RateWithdrawFees * 100)' "%");                      }                      else                      {                          nudWithdrawFees.Enabled = true;                          nudWithdrawFees.Minimum = (decimal)((SavingsBookProduct)product).RateWithdrawFeesMin.Value * 100;                          nudWithdrawFees.Maximum = (decimal)((SavingsBookProduct)product).RateWithdrawFeesMax.Value * 100;                          lbWithdrawFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                              "Min "' (((SavingsBookProduct)product).RateWithdrawFeesMin * 100)'                              "Max "' (((SavingsBookProduct)product).RateWithdrawFeesMax * 100)'                              "%");                      }                  }                    // Inter-branch tansfer fee                  SavingsBookProduct p = (SavingsBookProduct)product;                  Fee fee = p.InterBranchTransferFee;                  nudIbtFee.DecimalPlaces = fee.IsFlat ? 0 : 2;                  nudIbtFee.Increment = fee.IsFlat ? 1 : 0.01m;                  nudIbtFee.Enabled = !fee.Value.HasValue;                  nudIbtFee.Minimum = fee.GetMin();                  nudIbtFee.Maximum = fee.GetMax();                  if (fee.IsRange)                  {                      string min = fee.GetMinFormatted(p.Currency);                      string max = fee.GetMaxFormatted(p.Currency);                      const string mask = "Min {0}\r\nMax {1}";                      lblIbtFeeMinMax.Text = string.Format(mask' min' max);                  }                  else                  {                      lblIbtFeeMinMax.Text = fee.GetValueFormatted(p.Currency);                  }                    if (((SavingsBookProduct)product).TransferFeesType == OSavingsFeesType.Flat)                  {                      nudTransferFees.DecimalPlaces = 0;                      nudTransferFees.Increment = 1;                      if (((SavingsBookProduct)product).FlatTransferFees.HasValue)                      {                          nudTransferFees.Enabled = false;                          nudTransferFees.Minimum = ((SavingsBookProduct)product).FlatTransferFees.Value;                          nudTransferFees.Maximum = ((SavingsBookProduct)product).FlatTransferFees.Value;                          lbTransferFeesMinMax.Text = string.Format("{0} {1}"' ((SavingsBookProduct)product).FlatTransferFees.GetFormatedValue(product.Currency.UseCents)' product.Currency.Code);                      }                      else                      {                          nudTransferFees.Enabled = true;                          nudTransferFees.Minimum = ((SavingsBookProduct)product).FlatTransferFeesMin.Value;                          nudTransferFees.Maximum = ((SavingsBookProduct)product).FlatTransferFeesMax.Value;                          lbTransferFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                              "Min "' ((SavingsBookProduct)product).FlatTransferFeesMin.GetFormatedValue(product.Currency.UseCents)'                              "Max "' ((SavingsBookProduct)product).FlatTransferFeesMax.GetFormatedValue(product.Currency.UseCents)'                              product.Currency.Code);                      }                  }                  else                  {                      nudTransferFees.DecimalPlaces = 4;                      nudTransferFees.Increment = 0.0001m;                      if (((SavingsBookProduct)product).RateTransferFees.HasValue)                      {                          nudTransferFees.Enabled = false;                          nudTransferFees.Minimum = (decimal)((SavingsBookProduct)product).RateTransferFees.Value * 100;                          nudTransferFees.Maximum = (decimal)((SavingsBookProduct)product).RateTransferFees.Value * 100;                          lbTransferFeesMinMax.Text = string.Format("{0} {1}"' (((SavingsBookProduct)product).RateTransferFees * 100)' "%");                      }                      else                      {                          nudTransferFees.Enabled = true;                          nudTransferFees.Minimum = (decimal)((SavingsBookProduct)product).RateTransferFeesMin.Value * 100;                          nudTransferFees.Maximum = (decimal)((SavingsBookProduct)product).RateTransferFeesMax.Value * 100;                          lbTransferFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                              "Min "' (((SavingsBookProduct)product).RateTransferFeesMin * 100)'                              "Max "' (((SavingsBookProduct)product).RateTransferFeesMax * 100)'                              "%");                      }                  }                    //Cash Deposit fees                  nudDepositFees.DecimalPlaces = 0;                  nudDepositFees.Increment = 1;                  if (((SavingsBookProduct)product).DepositFees.HasValue)                  {                      nudDepositFees.Enabled = false;                      nudDepositFees.Minimum = ((SavingsBookProduct)product).DepositFees.Value;                      nudDepositFees.Maximum = ((SavingsBookProduct)product).DepositFees.Value;                      lbDepositFeesMinMax.Text = string.Format("{0} {1}"'                                                               ((SavingsBookProduct)product).DepositFees.GetFormatedValue(product.Currency.UseCents)'                                                               product.Currency.Code);                  }                  else                  {                      nudDepositFees.Enabled = true;                      nudDepositFees.Minimum = ((SavingsBookProduct)product).DepositFeesMin.Value;                      nudDepositFees.Maximum = ((SavingsBookProduct)product).DepositFeesMax.Value;                      lbDepositFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                                                               "Min "' ((SavingsBookProduct)product).DepositFeesMin.GetFormatedValue(product.Currency.UseCents)'                                                               "Max "' ((SavingsBookProduct)product).DepositFeesMax.GetFormatedValue(product.Currency.UseCents)'                                                               product.Currency.Code);                  }                    //Cheque Deposit fees                  nudChequeDepositFees.DecimalPlaces = 0;                  nudChequeDepositFees.Increment = 1;                  if (((SavingsBookProduct)product).ChequeDepositFees.HasValue)                  {                      nudChequeDepositFees.Enabled = false;                      nudChequeDepositFees.Maximum = ((SavingsBookProduct)product).ChequeDepositFees.Value;                      nudChequeDepositFees.Minimum = ((SavingsBookProduct)product).ChequeDepositFees.Value;                      lblChequeDepositFeesMinMax.Text = string.Format("{0} {1}"'                                                               ((SavingsBookProduct)product).ChequeDepositFees.GetFormatedValue(product.Currency.UseCents)'                                                               product.Currency.Code);                  }                  else                  {                      nudChequeDepositFees.Enabled = true;                      nudChequeDepositFees.Minimum = ((SavingsBookProduct)product).ChequeDepositFeesMin.Value;                      nudChequeDepositFees.Maximum = ((SavingsBookProduct)product).ChequeDepositFeesMax.Value;                      lblChequeDepositFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                                                               "Min "' ((SavingsBookProduct)product).ChequeDepositFeesMin.GetFormatedValue(product.Currency.UseCents)'                                                               "Max "' ((SavingsBookProduct)product).ChequeDepositFeesMax.GetFormatedValue(product.Currency.UseCents)'                                                               product.Currency.Code);                  }                    // Close fees                  nudCloseFees.DecimalPlaces = 0;                  nudCloseFees.Increment = 1;                  if (((SavingsBookProduct)product).CloseFees.HasValue)                  {                      nudCloseFees.Enabled = false;                      nudCloseFees.Minimum = ((SavingsBookProduct)product).CloseFees.Value;                      nudCloseFees.Maximum = ((SavingsBookProduct)product).CloseFees.Value;                      lbCloseFeesMinMax.Text = string.Format("{0} {1}"'                          ((SavingsBookProduct)product).CloseFees.GetFormatedValue(product.Currency.UseCents)' product.Currency.Code);                  }                  else                  {                      nudCloseFees.Enabled = true;                      nudCloseFees.Minimum = ((SavingsBookProduct)product).CloseFeesMin.Value;                      nudCloseFees.Maximum = ((SavingsBookProduct)product).CloseFeesMax.Value;                      lbCloseFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                          "Min "' ((SavingsBookProduct)product).CloseFeesMin.GetFormatedValue(product.Currency.UseCents)'                          "Max "' ((SavingsBookProduct)product).CloseFeesMax.GetFormatedValue(product.Currency.UseCents)'                          product.Currency.Code);                  }                    // Management fees                  nudManagementFees.DecimalPlaces = 0;                  nudManagementFees.Increment = 1;                  if (((SavingsBookProduct)product).ManagementFees.HasValue)                  {                      nudManagementFees.Enabled = false;                      nudManagementFees.Minimum = ((SavingsBookProduct)product).ManagementFees.Value;                      nudManagementFees.Maximum = ((SavingsBookProduct)product).ManagementFees.Value;                      lbManagementFeesMinMax.Text = string.Format("{0} {1}"'                          ((SavingsBookProduct)product).ManagementFees.GetFormatedValue(product.Currency.UseCents)' product.Currency.Code);                  }                  else                  {                      nudManagementFees.Enabled = true;                      nudManagementFees.Minimum = ((SavingsBookProduct)product).ManagementFeesMin.Value;                      nudManagementFees.Maximum = ((SavingsBookProduct)product).ManagementFeesMax.Value;                      lbManagementFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                          "Min "' ((SavingsBookProduct)product).ManagementFeesMin.GetFormatedValue(product.Currency.UseCents)'                          "Max "' ((SavingsBookProduct)product).ManagementFeesMax.GetFormatedValue(product.Currency.UseCents)'                          product.Currency.Code);                  }                    // Overdraft fees                  nudOverdraftFees.DecimalPlaces = 0;                  nudOverdraftFees.Increment = 1;                  if (((SavingsBookProduct)product).OverdraftFees.HasValue)                  {                      nudOverdraftFees.Enabled = false;                      nudOverdraftFees.Minimum = ((SavingsBookProduct)product).OverdraftFees.Value;                      nudOverdraftFees.Maximum = ((SavingsBookProduct)product).OverdraftFees.Value;                      lbOverdraftFeesMinMax.Text = string.Format("{0} {1}"'                          ((SavingsBookProduct)product).OverdraftFees.GetFormatedValue(product.Currency.UseCents)' product.Currency.Code);                  }                  else                  {                      nudOverdraftFees.Enabled = true;                      nudOverdraftFees.Minimum = ((SavingsBookProduct)product).OverdraftFeesMin.Value;                      nudOverdraftFees.Maximum = ((SavingsBookProduct)product).OverdraftFeesMax.Value;                      lbOverdraftFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                          "Min "' ((SavingsBookProduct)product).OverdraftFeesMin.GetFormatedValue(product.Currency.UseCents)'                          "Max "' ((SavingsBookProduct)product).OverdraftFeesMax.GetFormatedValue(product.Currency.UseCents)'                          product.Currency.Code);                  }                    // Agio fees                  nudAgioFees.DecimalPlaces = 4;                  nudAgioFees.Increment = 0.0001m;                  if (((SavingsBookProduct)product).AgioFees.HasValue)                  {                      nudAgioFees.Enabled = false;                      nudAgioFees.Minimum = (decimal)((SavingsBookProduct)product).AgioFees.Value * 100;                      nudAgioFees.Maximum = (decimal)((SavingsBookProduct)product).AgioFees.Value * 100;                      lbAgioFeesMinMax.Text = string.Format("{0} {1}"' ((SavingsBookProduct)product).AgioFees * 100' "%");                  }                  else                  {                      nudAgioFees.Enabled = true;                      nudAgioFees.Minimum = (decimal)((SavingsBookProduct)product).AgioFeesMin.Value * 100;                      nudAgioFees.Maximum = (decimal)((SavingsBookProduct)product).AgioFeesMax.Value * 100;                      lbAgioFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                          "Min "' ((SavingsBookProduct)product).AgioFeesMin * 100'                          "Max "' ((SavingsBookProduct)product).AgioFeesMax * 100' "%");                  }                    //Reopen fees                  nudReopenFees.DecimalPlaces = 0;                  nudReopenFees.Increment = 1;                    if (((SavingsBookProduct)product).ReopenFees.HasValue)                  {                      nudReopenFees.Enabled = false;                      nudReopenFees.Minimum = ((SavingsBookProduct)product).ReopenFees.Value;                      nudReopenFees.Maximum = ((SavingsBookProduct)product).ReopenFees.Value;                      lbReopenFeesMinMax.Text = string.Format("{0} {1}"'                                                               ((SavingsBookProduct)product).ReopenFees.GetFormatedValue(product.Currency.UseCents)'                                                               product.Currency.Code);                  }                  else                  {                      nudReopenFees.Enabled = true;                      nudReopenFees.Minimum = ((SavingsBookProduct)product).ReopenFeesMin.Value;                      nudReopenFees.Maximum = ((SavingsBookProduct)product).ReopenFeesMax.Value;                      lbReopenFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                                                               "Min "' ((SavingsBookProduct)product).ReopenFeesMin.GetFormatedValue(product.Currency.UseCents)'                                                               "Max "' ((SavingsBookProduct)product).ReopenFeesMax.GetFormatedValue(product.Currency.UseCents)'                                                               product.Currency.Code);                  }                    if (((SavingsBookProduct)product).UseTermDeposit)                  {                      nudNumberOfPeriods.Enabled = true;                      btSearchContract2.Enabled = true;                      cmbRollover2.Enabled = true;                      nudNumberOfPeriods.Minimum = (decimal)((SavingsBookProduct)product).TermDepositPeriodMin;                      nudNumberOfPeriods.Maximum = (decimal)((SavingsBookProduct)product).TermDepositPeriodMax;                      nudNumberOfPeriods.Value = nudNumberOfPeriods.Minimum;                      tbTargetAccount2.ResetText();                  }                }
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,DisplaySavingProduct,The following statement contains a magic number: if (product is SavingsBookProduct)              {                  gbDepositInterest.Visible = false;                  gbInterest.Visible = true;                    lbWithdrawFees.Visible = true;                  nudWithdrawFees.Visible = true;                  lbWithdrawFeesMinMax.Visible = true;                    lbEntryFees.Visible = true;                  nudEntryFees.Visible = true;                  lbEntryFeesMinMax.Visible = true;                    lbTransferFees.Visible = true;                  nudTransferFees.Visible = true;                  nudIbtFee.Visible = true;                  lbTransferFeesMinMax.Visible = true;                    lbDepositFees.Visible = true;                  nudDepositFees.Visible = true;                  lbDepositFeesMinMax.Visible = true;                    lbChequeDepositFees.Visible = true;                  nudChequeDepositFees.Visible = true;                  lblChequeDepositFeesMinMax.Visible = true;                    lbCloseFees.Visible = true;                  nudCloseFees.Visible = true;                  lbCloseFeesMinMax.Visible = true;                    lbManagementFees.Visible = true;                  nudManagementFees.Visible = true;                  lbManagementFeesMinMax.Visible = true;                    lbOverdraftFees.Visible = true;                  nudOverdraftFees.Visible = true;                  lbOverdraftFeesMinMax.Visible = true;                    lbAgioFees.Visible = true;                  nudAgioFees.Visible = true;                  lbAgioFeesMinMax.Visible = true;                    lbReopenFees.Visible = true;                  nudReopenFees.Visible = true;                  lbReopenFeesMinMax.Visible = true;                    lbInterestAccrualValue.Text = MultiLanguageStrings.GetString(Ressource.FrmAddSavingProduct' ((SavingsBookProduct)product).InterestBase + ".Text");                  lbInterestPostingValue.Text = MultiLanguageStrings.GetString(Ressource.FrmAddSavingProduct' ((SavingsBookProduct)product).InterestFrequency + ".Text");                  lbInterestBasedOnValue.Text = ((SavingsBookProduct)product).CalculAmountBase.HasValue ? MultiLanguageStrings.GetString(Ressource.FrmAddSavingProduct' ((SavingsBookProduct)product).CalculAmountBase + ".Text") : "------";                    savingDepositToolStripMenuItem.Enabled = true;                  savingWithdrawToolStripMenuItem.Enabled = true;                  savingTransferToolStripMenuItem.Enabled = true;                    // entry fees                  nudEntryFees.DecimalPlaces = 0;                  nudEntryFees.Increment = 1;                  if (((SavingsBookProduct)product).EntryFees.HasValue)                  {                      nudEntryFees.Enabled = false;                      nudEntryFees.Minimum = ((SavingsBookProduct)product).EntryFees.Value;                      nudEntryFees.Maximum = ((SavingsBookProduct)product).EntryFees.Value;                      lbEntryFeesMinMax.Text = string.Format("{0} {1}"' ((SavingsBookProduct)product).EntryFees.GetFormatedValue(product.Currency.UseCents)' product.Currency.Code);                  }                  else                  {                      nudEntryFees.Enabled = true;                      nudEntryFees.Minimum = ((SavingsBookProduct)product).EntryFeesMin.Value;                      nudEntryFees.Maximum = ((SavingsBookProduct)product).EntryFeesMax.Value;                      lbEntryFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                          "Min "' ((SavingsBookProduct)product).EntryFeesMin.GetFormatedValue(product.Currency.UseCents)'                          "Max "' ((SavingsBookProduct)product).EntryFeesMax.GetFormatedValue(product.Currency.UseCents)'                          product.Currency.Code);                  }                    // withdraw fees                  if (((SavingsBookProduct)product).WithdrawFeesType == OSavingsFeesType.Flat)                  {                      nudWithdrawFees.DecimalPlaces = 0;                      nudWithdrawFees.Increment = 1;                      if (((SavingsBookProduct)product).FlatWithdrawFees.HasValue)                      {                          nudWithdrawFees.Enabled = false;                          nudWithdrawFees.Minimum = ((SavingsBookProduct)product).FlatWithdrawFees.Value;                          nudWithdrawFees.Maximum = ((SavingsBookProduct)product).FlatWithdrawFees.Value;                          lbWithdrawFeesMinMax.Text = string.Format("{0} {1}"' ((SavingsBookProduct)product).FlatWithdrawFees.GetFormatedValue(product.Currency.UseCents)' product.Currency.Code);                      }                      else                      {                          nudWithdrawFees.Enabled = true;                          nudWithdrawFees.Minimum = ((SavingsBookProduct)product).FlatWithdrawFeesMin.Value;                          nudWithdrawFees.Maximum = ((SavingsBookProduct)product).FlatWithdrawFeesMax.Value;                          lbWithdrawFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                              "Min "' ((SavingsBookProduct)product).FlatWithdrawFeesMin.GetFormatedValue(product.Currency.UseCents)'                              "Max "' ((SavingsBookProduct)product).FlatWithdrawFeesMax.GetFormatedValue(product.Currency.UseCents)'                              product.Currency.Code);                      }                  }                  else                  {                      nudWithdrawFees.DecimalPlaces = 4;                      nudWithdrawFees.Increment = 0.0001m;                      if (((SavingsBookProduct)product).RateWithdrawFees.HasValue)                      {                          nudWithdrawFees.Enabled = false;                          nudWithdrawFees.Minimum = (decimal)((SavingsBookProduct)product).RateWithdrawFees.Value * 100;                          nudWithdrawFees.Maximum = (decimal)((SavingsBookProduct)product).RateWithdrawFees.Value * 100;                          lbWithdrawFeesMinMax.Text = string.Format("{0} {1}"' (((SavingsBookProduct)product).RateWithdrawFees * 100)' "%");                      }                      else                      {                          nudWithdrawFees.Enabled = true;                          nudWithdrawFees.Minimum = (decimal)((SavingsBookProduct)product).RateWithdrawFeesMin.Value * 100;                          nudWithdrawFees.Maximum = (decimal)((SavingsBookProduct)product).RateWithdrawFeesMax.Value * 100;                          lbWithdrawFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                              "Min "' (((SavingsBookProduct)product).RateWithdrawFeesMin * 100)'                              "Max "' (((SavingsBookProduct)product).RateWithdrawFeesMax * 100)'                              "%");                      }                  }                    // Inter-branch tansfer fee                  SavingsBookProduct p = (SavingsBookProduct)product;                  Fee fee = p.InterBranchTransferFee;                  nudIbtFee.DecimalPlaces = fee.IsFlat ? 0 : 2;                  nudIbtFee.Increment = fee.IsFlat ? 1 : 0.01m;                  nudIbtFee.Enabled = !fee.Value.HasValue;                  nudIbtFee.Minimum = fee.GetMin();                  nudIbtFee.Maximum = fee.GetMax();                  if (fee.IsRange)                  {                      string min = fee.GetMinFormatted(p.Currency);                      string max = fee.GetMaxFormatted(p.Currency);                      const string mask = "Min {0}\r\nMax {1}";                      lblIbtFeeMinMax.Text = string.Format(mask' min' max);                  }                  else                  {                      lblIbtFeeMinMax.Text = fee.GetValueFormatted(p.Currency);                  }                    if (((SavingsBookProduct)product).TransferFeesType == OSavingsFeesType.Flat)                  {                      nudTransferFees.DecimalPlaces = 0;                      nudTransferFees.Increment = 1;                      if (((SavingsBookProduct)product).FlatTransferFees.HasValue)                      {                          nudTransferFees.Enabled = false;                          nudTransferFees.Minimum = ((SavingsBookProduct)product).FlatTransferFees.Value;                          nudTransferFees.Maximum = ((SavingsBookProduct)product).FlatTransferFees.Value;                          lbTransferFeesMinMax.Text = string.Format("{0} {1}"' ((SavingsBookProduct)product).FlatTransferFees.GetFormatedValue(product.Currency.UseCents)' product.Currency.Code);                      }                      else                      {                          nudTransferFees.Enabled = true;                          nudTransferFees.Minimum = ((SavingsBookProduct)product).FlatTransferFeesMin.Value;                          nudTransferFees.Maximum = ((SavingsBookProduct)product).FlatTransferFeesMax.Value;                          lbTransferFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                              "Min "' ((SavingsBookProduct)product).FlatTransferFeesMin.GetFormatedValue(product.Currency.UseCents)'                              "Max "' ((SavingsBookProduct)product).FlatTransferFeesMax.GetFormatedValue(product.Currency.UseCents)'                              product.Currency.Code);                      }                  }                  else                  {                      nudTransferFees.DecimalPlaces = 4;                      nudTransferFees.Increment = 0.0001m;                      if (((SavingsBookProduct)product).RateTransferFees.HasValue)                      {                          nudTransferFees.Enabled = false;                          nudTransferFees.Minimum = (decimal)((SavingsBookProduct)product).RateTransferFees.Value * 100;                          nudTransferFees.Maximum = (decimal)((SavingsBookProduct)product).RateTransferFees.Value * 100;                          lbTransferFeesMinMax.Text = string.Format("{0} {1}"' (((SavingsBookProduct)product).RateTransferFees * 100)' "%");                      }                      else                      {                          nudTransferFees.Enabled = true;                          nudTransferFees.Minimum = (decimal)((SavingsBookProduct)product).RateTransferFeesMin.Value * 100;                          nudTransferFees.Maximum = (decimal)((SavingsBookProduct)product).RateTransferFeesMax.Value * 100;                          lbTransferFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                              "Min "' (((SavingsBookProduct)product).RateTransferFeesMin * 100)'                              "Max "' (((SavingsBookProduct)product).RateTransferFeesMax * 100)'                              "%");                      }                  }                    //Cash Deposit fees                  nudDepositFees.DecimalPlaces = 0;                  nudDepositFees.Increment = 1;                  if (((SavingsBookProduct)product).DepositFees.HasValue)                  {                      nudDepositFees.Enabled = false;                      nudDepositFees.Minimum = ((SavingsBookProduct)product).DepositFees.Value;                      nudDepositFees.Maximum = ((SavingsBookProduct)product).DepositFees.Value;                      lbDepositFeesMinMax.Text = string.Format("{0} {1}"'                                                               ((SavingsBookProduct)product).DepositFees.GetFormatedValue(product.Currency.UseCents)'                                                               product.Currency.Code);                  }                  else                  {                      nudDepositFees.Enabled = true;                      nudDepositFees.Minimum = ((SavingsBookProduct)product).DepositFeesMin.Value;                      nudDepositFees.Maximum = ((SavingsBookProduct)product).DepositFeesMax.Value;                      lbDepositFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                                                               "Min "' ((SavingsBookProduct)product).DepositFeesMin.GetFormatedValue(product.Currency.UseCents)'                                                               "Max "' ((SavingsBookProduct)product).DepositFeesMax.GetFormatedValue(product.Currency.UseCents)'                                                               product.Currency.Code);                  }                    //Cheque Deposit fees                  nudChequeDepositFees.DecimalPlaces = 0;                  nudChequeDepositFees.Increment = 1;                  if (((SavingsBookProduct)product).ChequeDepositFees.HasValue)                  {                      nudChequeDepositFees.Enabled = false;                      nudChequeDepositFees.Maximum = ((SavingsBookProduct)product).ChequeDepositFees.Value;                      nudChequeDepositFees.Minimum = ((SavingsBookProduct)product).ChequeDepositFees.Value;                      lblChequeDepositFeesMinMax.Text = string.Format("{0} {1}"'                                                               ((SavingsBookProduct)product).ChequeDepositFees.GetFormatedValue(product.Currency.UseCents)'                                                               product.Currency.Code);                  }                  else                  {                      nudChequeDepositFees.Enabled = true;                      nudChequeDepositFees.Minimum = ((SavingsBookProduct)product).ChequeDepositFeesMin.Value;                      nudChequeDepositFees.Maximum = ((SavingsBookProduct)product).ChequeDepositFeesMax.Value;                      lblChequeDepositFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                                                               "Min "' ((SavingsBookProduct)product).ChequeDepositFeesMin.GetFormatedValue(product.Currency.UseCents)'                                                               "Max "' ((SavingsBookProduct)product).ChequeDepositFeesMax.GetFormatedValue(product.Currency.UseCents)'                                                               product.Currency.Code);                  }                    // Close fees                  nudCloseFees.DecimalPlaces = 0;                  nudCloseFees.Increment = 1;                  if (((SavingsBookProduct)product).CloseFees.HasValue)                  {                      nudCloseFees.Enabled = false;                      nudCloseFees.Minimum = ((SavingsBookProduct)product).CloseFees.Value;                      nudCloseFees.Maximum = ((SavingsBookProduct)product).CloseFees.Value;                      lbCloseFeesMinMax.Text = string.Format("{0} {1}"'                          ((SavingsBookProduct)product).CloseFees.GetFormatedValue(product.Currency.UseCents)' product.Currency.Code);                  }                  else                  {                      nudCloseFees.Enabled = true;                      nudCloseFees.Minimum = ((SavingsBookProduct)product).CloseFeesMin.Value;                      nudCloseFees.Maximum = ((SavingsBookProduct)product).CloseFeesMax.Value;                      lbCloseFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                          "Min "' ((SavingsBookProduct)product).CloseFeesMin.GetFormatedValue(product.Currency.UseCents)'                          "Max "' ((SavingsBookProduct)product).CloseFeesMax.GetFormatedValue(product.Currency.UseCents)'                          product.Currency.Code);                  }                    // Management fees                  nudManagementFees.DecimalPlaces = 0;                  nudManagementFees.Increment = 1;                  if (((SavingsBookProduct)product).ManagementFees.HasValue)                  {                      nudManagementFees.Enabled = false;                      nudManagementFees.Minimum = ((SavingsBookProduct)product).ManagementFees.Value;                      nudManagementFees.Maximum = ((SavingsBookProduct)product).ManagementFees.Value;                      lbManagementFeesMinMax.Text = string.Format("{0} {1}"'                          ((SavingsBookProduct)product).ManagementFees.GetFormatedValue(product.Currency.UseCents)' product.Currency.Code);                  }                  else                  {                      nudManagementFees.Enabled = true;                      nudManagementFees.Minimum = ((SavingsBookProduct)product).ManagementFeesMin.Value;                      nudManagementFees.Maximum = ((SavingsBookProduct)product).ManagementFeesMax.Value;                      lbManagementFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                          "Min "' ((SavingsBookProduct)product).ManagementFeesMin.GetFormatedValue(product.Currency.UseCents)'                          "Max "' ((SavingsBookProduct)product).ManagementFeesMax.GetFormatedValue(product.Currency.UseCents)'                          product.Currency.Code);                  }                    // Overdraft fees                  nudOverdraftFees.DecimalPlaces = 0;                  nudOverdraftFees.Increment = 1;                  if (((SavingsBookProduct)product).OverdraftFees.HasValue)                  {                      nudOverdraftFees.Enabled = false;                      nudOverdraftFees.Minimum = ((SavingsBookProduct)product).OverdraftFees.Value;                      nudOverdraftFees.Maximum = ((SavingsBookProduct)product).OverdraftFees.Value;                      lbOverdraftFeesMinMax.Text = string.Format("{0} {1}"'                          ((SavingsBookProduct)product).OverdraftFees.GetFormatedValue(product.Currency.UseCents)' product.Currency.Code);                  }                  else                  {                      nudOverdraftFees.Enabled = true;                      nudOverdraftFees.Minimum = ((SavingsBookProduct)product).OverdraftFeesMin.Value;                      nudOverdraftFees.Maximum = ((SavingsBookProduct)product).OverdraftFeesMax.Value;                      lbOverdraftFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                          "Min "' ((SavingsBookProduct)product).OverdraftFeesMin.GetFormatedValue(product.Currency.UseCents)'                          "Max "' ((SavingsBookProduct)product).OverdraftFeesMax.GetFormatedValue(product.Currency.UseCents)'                          product.Currency.Code);                  }                    // Agio fees                  nudAgioFees.DecimalPlaces = 4;                  nudAgioFees.Increment = 0.0001m;                  if (((SavingsBookProduct)product).AgioFees.HasValue)                  {                      nudAgioFees.Enabled = false;                      nudAgioFees.Minimum = (decimal)((SavingsBookProduct)product).AgioFees.Value * 100;                      nudAgioFees.Maximum = (decimal)((SavingsBookProduct)product).AgioFees.Value * 100;                      lbAgioFeesMinMax.Text = string.Format("{0} {1}"' ((SavingsBookProduct)product).AgioFees * 100' "%");                  }                  else                  {                      nudAgioFees.Enabled = true;                      nudAgioFees.Minimum = (decimal)((SavingsBookProduct)product).AgioFeesMin.Value * 100;                      nudAgioFees.Maximum = (decimal)((SavingsBookProduct)product).AgioFeesMax.Value * 100;                      lbAgioFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                          "Min "' ((SavingsBookProduct)product).AgioFeesMin * 100'                          "Max "' ((SavingsBookProduct)product).AgioFeesMax * 100' "%");                  }                    //Reopen fees                  nudReopenFees.DecimalPlaces = 0;                  nudReopenFees.Increment = 1;                    if (((SavingsBookProduct)product).ReopenFees.HasValue)                  {                      nudReopenFees.Enabled = false;                      nudReopenFees.Minimum = ((SavingsBookProduct)product).ReopenFees.Value;                      nudReopenFees.Maximum = ((SavingsBookProduct)product).ReopenFees.Value;                      lbReopenFeesMinMax.Text = string.Format("{0} {1}"'                                                               ((SavingsBookProduct)product).ReopenFees.GetFormatedValue(product.Currency.UseCents)'                                                               product.Currency.Code);                  }                  else                  {                      nudReopenFees.Enabled = true;                      nudReopenFees.Minimum = ((SavingsBookProduct)product).ReopenFeesMin.Value;                      nudReopenFees.Maximum = ((SavingsBookProduct)product).ReopenFeesMax.Value;                      lbReopenFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                                                               "Min "' ((SavingsBookProduct)product).ReopenFeesMin.GetFormatedValue(product.Currency.UseCents)'                                                               "Max "' ((SavingsBookProduct)product).ReopenFeesMax.GetFormatedValue(product.Currency.UseCents)'                                                               product.Currency.Code);                  }                    if (((SavingsBookProduct)product).UseTermDeposit)                  {                      nudNumberOfPeriods.Enabled = true;                      btSearchContract2.Enabled = true;                      cmbRollover2.Enabled = true;                      nudNumberOfPeriods.Minimum = (decimal)((SavingsBookProduct)product).TermDepositPeriodMin;                      nudNumberOfPeriods.Maximum = (decimal)((SavingsBookProduct)product).TermDepositPeriodMax;                      nudNumberOfPeriods.Value = nudNumberOfPeriods.Minimum;                      tbTargetAccount2.ResetText();                  }                }
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,DisplaySaving,The following statement contains a magic number: switch (_saving.Status)              {                  case OSavingsStatus.Pending:                      {                          groupBoxSaving.ForeColor = Color.FromArgb(246' 137' 56);                          pnlSavingsButtons.Enabled = false;                          buttonFirstDeposit.Visible = true;                          buttonCloseSaving.Visible = false;                          buttonReopenSaving.Visible = false;                          break;                      }                  case OSavingsStatus.Active:                      {                          groupBoxSaving.ForeColor = Color.FromArgb(61' 153' 57);                          pnlSavingsButtons.Enabled = true;                          buttonFirstDeposit.Visible = false;                          buttonCloseSaving.Visible = true;                          buttonReopenSaving.Visible = false;                          break;                      }                  case OSavingsStatus.Closed:                      {                          groupBoxSaving.ForeColor = Color.Red;                          pnlSavingsButtons.Enabled = true;                          buttonSavingsOperations.Enabled = false;                          buttonFirstDeposit.Visible = false;                          buttonCloseSaving.Visible = false;                          buttonReopenSaving.Visible = true;                          break;                      }              }
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,DisplaySaving,The following statement contains a magic number: switch (_saving.Status)              {                  case OSavingsStatus.Pending:                      {                          groupBoxSaving.ForeColor = Color.FromArgb(246' 137' 56);                          pnlSavingsButtons.Enabled = false;                          buttonFirstDeposit.Visible = true;                          buttonCloseSaving.Visible = false;                          buttonReopenSaving.Visible = false;                          break;                      }                  case OSavingsStatus.Active:                      {                          groupBoxSaving.ForeColor = Color.FromArgb(61' 153' 57);                          pnlSavingsButtons.Enabled = true;                          buttonFirstDeposit.Visible = false;                          buttonCloseSaving.Visible = true;                          buttonReopenSaving.Visible = false;                          break;                      }                  case OSavingsStatus.Closed:                      {                          groupBoxSaving.ForeColor = Color.Red;                          pnlSavingsButtons.Enabled = true;                          buttonSavingsOperations.Enabled = false;                          buttonFirstDeposit.Visible = false;                          buttonCloseSaving.Visible = false;                          buttonReopenSaving.Visible = true;                          break;                      }              }
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,DisplaySaving,The following statement contains a magic number: switch (_saving.Status)              {                  case OSavingsStatus.Pending:                      {                          groupBoxSaving.ForeColor = Color.FromArgb(246' 137' 56);                          pnlSavingsButtons.Enabled = false;                          buttonFirstDeposit.Visible = true;                          buttonCloseSaving.Visible = false;                          buttonReopenSaving.Visible = false;                          break;                      }                  case OSavingsStatus.Active:                      {                          groupBoxSaving.ForeColor = Color.FromArgb(61' 153' 57);                          pnlSavingsButtons.Enabled = true;                          buttonFirstDeposit.Visible = false;                          buttonCloseSaving.Visible = true;                          buttonReopenSaving.Visible = false;                          break;                      }                  case OSavingsStatus.Closed:                      {                          groupBoxSaving.ForeColor = Color.Red;                          pnlSavingsButtons.Enabled = true;                          buttonSavingsOperations.Enabled = false;                          buttonFirstDeposit.Visible = false;                          buttonCloseSaving.Visible = false;                          buttonReopenSaving.Visible = true;                          break;                      }              }
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,DisplaySaving,The following statement contains a magic number: switch (_saving.Status)              {                  case OSavingsStatus.Pending:                      {                          groupBoxSaving.ForeColor = Color.FromArgb(246' 137' 56);                          pnlSavingsButtons.Enabled = false;                          buttonFirstDeposit.Visible = true;                          buttonCloseSaving.Visible = false;                          buttonReopenSaving.Visible = false;                          break;                      }                  case OSavingsStatus.Active:                      {                          groupBoxSaving.ForeColor = Color.FromArgb(61' 153' 57);                          pnlSavingsButtons.Enabled = true;                          buttonFirstDeposit.Visible = false;                          buttonCloseSaving.Visible = true;                          buttonReopenSaving.Visible = false;                          break;                      }                  case OSavingsStatus.Closed:                      {                          groupBoxSaving.ForeColor = Color.Red;                          pnlSavingsButtons.Enabled = true;                          buttonSavingsOperations.Enabled = false;                          buttonFirstDeposit.Visible = false;                          buttonCloseSaving.Visible = false;                          buttonReopenSaving.Visible = true;                          break;                      }              }
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,DisplaySaving,The following statement contains a magic number: switch (_saving.Status)              {                  case OSavingsStatus.Pending:                      {                          groupBoxSaving.ForeColor = Color.FromArgb(246' 137' 56);                          pnlSavingsButtons.Enabled = false;                          buttonFirstDeposit.Visible = true;                          buttonCloseSaving.Visible = false;                          buttonReopenSaving.Visible = false;                          break;                      }                  case OSavingsStatus.Active:                      {                          groupBoxSaving.ForeColor = Color.FromArgb(61' 153' 57);                          pnlSavingsButtons.Enabled = true;                          buttonFirstDeposit.Visible = false;                          buttonCloseSaving.Visible = true;                          buttonReopenSaving.Visible = false;                          break;                      }                  case OSavingsStatus.Closed:                      {                          groupBoxSaving.ForeColor = Color.Red;                          pnlSavingsButtons.Enabled = true;                          buttonSavingsOperations.Enabled = false;                          buttonFirstDeposit.Visible = false;                          buttonCloseSaving.Visible = false;                          buttonReopenSaving.Visible = true;                          break;                      }              }
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,DisplaySaving,The following statement contains a magic number: switch (_saving.Status)              {                  case OSavingsStatus.Pending:                      {                          groupBoxSaving.ForeColor = Color.FromArgb(246' 137' 56);                          pnlSavingsButtons.Enabled = false;                          buttonFirstDeposit.Visible = true;                          buttonCloseSaving.Visible = false;                          buttonReopenSaving.Visible = false;                          break;                      }                  case OSavingsStatus.Active:                      {                          groupBoxSaving.ForeColor = Color.FromArgb(61' 153' 57);                          pnlSavingsButtons.Enabled = true;                          buttonFirstDeposit.Visible = false;                          buttonCloseSaving.Visible = true;                          buttonReopenSaving.Visible = false;                          break;                      }                  case OSavingsStatus.Closed:                      {                          groupBoxSaving.ForeColor = Color.Red;                          pnlSavingsButtons.Enabled = true;                          buttonSavingsOperations.Enabled = false;                          buttonFirstDeposit.Visible = false;                          buttonCloseSaving.Visible = false;                          buttonReopenSaving.Visible = true;                          break;                      }              }
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,DisplayContracts,The following statement contains a magic number: foreach (Loan credit in loans)              {                    // it will be done for the first credit                  if (currencyCodeHolder == null) currencyCodeHolder = credit.Product.Currency.Code;                    //if not the first                  if (credit.Product.Currency.Code != currencyCodeHolder) multiCurrency = true;                  currencyCodeHolder = credit.Product.Currency.Code;                      //In case' if there are contracts in different currencies' total values of OLB and Credit amounts are displayed in pivot currency                  //For OLB' we must use current exchange rate to calculate in single currency.But for credit amounts' we must use exchange rates                  //recorded at disbursement date.                    latestExchangeRate =                      ServicesProvider.GetInstance().GetAccountingServices().FindLatestExchangeRate(TimeProvider.Today'                                                                                              credit.Product.Currency);                  customExchangeRate =                      ServicesProvider.GetInstance().GetAccountingServices().FindLatestExchangeRate(                          credit.StartDate' credit.Product.Currency);                    var item = new ListViewItem("C") { Tag = credit };                  item.SubItems.Add(credit.Code);                    item.SubItems.Add(MultiLanguageStrings.GetString(Ressource.ClientForm' credit.ContractStatus + ".Text"));                    item.SubItems.Add(credit.Amount.GetFormatedValue(credit.UseCents));                  if (credit.ContractStatus == OContractStatus.Abandoned || credit.ContractStatus == OContractStatus.Refused)                      item.SubItems.Add(credit.UseCents ? "0.00" : "0");                  else                      item.SubItems.Add(credit.CalculateActualOlb().GetFormatedValue(credit.UseCents));                  item.SubItems.Add(credit.Product.Currency.Code);                  item.SubItems.Add(Math.Round(credit.InterestRate * 100' decimalPlaces).ToString());                  item.SubItems.Add(credit.InstallmentType.Name);                  item.SubItems.Add(credit.NbOfInstallments.ToString());                  item.SubItems.Add(credit.CreationDate.ToShortDateString());                  item.SubItems.Add(credit.StartDate.ToShortDateString());                  item.SubItems.Add(credit.CloseDate.ToShortDateString());                    if (credit.ContractStatus != OContractStatus.Abandoned && credit.ContractStatus != OContractStatus.Refused)                  {                        if (credit.ContractStatus != OContractStatus.Closed)                      {                            totalAmount += credit.Amount;                          totalAmountInPivot += customExchangeRate.Rate == 0                                                    ? 0                                                    : credit.Amount / customExchangeRate.Rate;                            totalOlb += credit.CalculateActualOlb();                          totalOlbInPivot += latestExchangeRate.Rate == 0                                                 ? 0                                                 : credit.CalculateActualOlb() /                                                   latestExchangeRate.Rate;                            credit.CalculateActualOlb();                      }                      else if (credit.ContractStatus == OContractStatus.Closed)                      {                          totalAmount += credit.Amount;                          totalAmountInPivot += customExchangeRate.Rate == 0                                                    ? 0                                                    : credit.Amount / customExchangeRate.Rate;                      }                  }                    lvContracts.Items.Add(item);                    if (credit.UseCents)                      usedCents = credit.UseCents;              }
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,DisplayContracts,The following statement contains a magic number: int midPoint = usedCents ? 2 : 0;
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeTabPageLoansDetails,The following statement contains a magic number: nudInterestRate.Text = (pCredit.InterestRate * 100).ToString();
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeTabPageLoansDetails,The following statement contains a magic number: textBoxLoanAnticipatedTotalFees.Text = (pCredit.AnticipatedTotalRepaymentPenalties * 100).ToString();
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeTabPageLoansDetails,The following statement contains a magic number: tbLoanAnticipatedPartialFees.Text = (pCredit.AnticipatedPartialRepaymentPenalties * 100).ToString();
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeTabPageLoansDetails,The following statement contains a magic number: textBoxLoanLateFeesOnAmount.Text = (pCredit.NonRepaymentPenalties.InitialAmount * 100).ToString();
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeTabPageLoansDetails,The following statement contains a magic number: textBoxLoanLateFeesOnOLB.Text = (pCredit.NonRepaymentPenalties.OLB * 100).ToString();
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeTabPageLoansDetails,The following statement contains a magic number: textBoxLoanLateFeesOnOverdueInterest.Text = (pCredit.NonRepaymentPenalties.OverDueInterest * 100).ToString();
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeTabPageLoansDetails,The following statement contains a magic number: textBoxLoanLateFeesOnOverduePrincipal.Text = (pCredit.NonRepaymentPenalties.OverDuePrincipal * 100).ToString();
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeEntryFees,The following statement contains a magic number: foreach (LoanEntryFee entryFee in _credit.LoanEntryFeesList)              {                  ListViewItem item = new ListViewItem(entryFee.ProductEntryFee.Name)                                          {                                              UseItemStyleForSubItems = true'                                              Tag = entryFee                                          };                    OCurrency feeValue = entryFee.FeeValue;                  if (entryFee.ProductEntryFee.IsRate)                      item.SubItems.Add(feeValue.GetFormatedValue(true));                  else                      item.SubItems.Add(feeValue.GetFormatedValue(_credit.Product.Currency.UseCents));                    _typeOfFee = entryFee.ProductEntryFee.IsRate ? "%" : _credit.Product.Currency.Name;                    item.SubItems.Add(_typeOfFee);                  OCurrency loanAmount = nudLoanAmount.Value;                  OCurrency amount;                  if (entryFee.ProductEntryFee.IsRate)                      amount = loanAmount.Value * feeValue.Value / 100;                  else                      amount = feeValue.Value;                  item.SubItems.Add(amount.GetFormatedValue(_credit.Product.Currency.UseCents));                    lvEntryFees.Items.Add(item);              }
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeEntryFees,The following statement contains a magic number: lvEntryFees.Columns[2].Text = string.Format("% / {0}"' _credit.Product.Currency.Name);
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitScheduleType,The following statement contains a magic number: switch (loanType)              {                  case OLoanTypes.All:                      _scheduleTypeComboBox.SelectedIndex = 0;                      break;                    case OLoanTypes.Flat:                      _scheduleTypeComboBox.SelectedIndex = 0;                      break;                    case OLoanTypes.DecliningFixedPrincipal:                      _scheduleTypeComboBox.SelectedIndex = 1;                      break;                    case OLoanTypes.DecliningFixedInstallments:                      _scheduleTypeComboBox.SelectedIndex = 2;                      break;                    case OLoanTypes.CustomLoanType:                      _scheduleTypeComboBox.Text = scriptName;                      break;              }
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializePackageInterestRate,The following statement contains a magic number: if (pForCreation) //if it is new contract              {                  nudInterestRate.Enabled = true;                  if (!creditProduct.UseLoanCycle) //if product doesn't use any loan cycles                  {                      if (!creditProduct.InterestRate.HasValue) //if interest rate is a range value                      {                          decimal? interestRateMin = creditProduct.InterestRateMin * 100;                          decimal? interestRateMax = creditProduct.InterestRateMax * 100;                          nudInterestRate.Minimum = interestRateMin.Value;                          nudInterestRate.Maximum = interestRateMax.Value;                          lbLoanInterestRateMinMax.Text = string.Format("{0}{1}\r\n{2}{3}"'                              annualType + MultiLanguageStrings.GetString(Ressource.CreditContractForm' "min.Text")'                              ServicesHelper.ConvertNullableDecimalToString(interestRateMin.Value' false)'                              MultiLanguageStrings.GetString(Ressource.CreditContractForm' "max.Text")'                              ServicesHelper.ConvertNullableDecimalToString(interestRateMax.Value' false));                          nudInterestRate.Value = interestRateMin.Value;                      }                      else// if interest rate is a fixed value                      {                          decimal? interestRate = creditProduct.InterestRate * 100;                          nudInterestRate.Minimum = nudInterestRate.Maximum = creditProduct.InterestRate.Value * 100;                          nudInterestRate.Value = interestRate.Value;                          lbLoanInterestRateMinMax.Text = string.Format("{0}{1}\r\n{2}{3}"'                              annualType + MultiLanguageStrings.GetString(Ressource.CreditContractForm' "min.Text")'                              ServicesHelper.ConvertNullableDecimalToString(interestRate.Value' false)'                              MultiLanguageStrings.GetString(Ressource.CreditContractForm' "max.Text")'                              ServicesHelper.ConvertNullableDecimalToString(interestRate.Value' false));                      }                  }                  else //if product uses a loan cycle                  {                      decimal? interestRateMin = creditProduct.InterestRateMin * 100;                      decimal? interestRateMax = creditProduct.InterestRateMax * 100;                      nudInterestRate.Minimum = interestRateMin.Value;                      nudInterestRate.Maximum = interestRateMax.Value;                      lbLoanInterestRateMinMax.Text = string.Format("{0}{1}\r\n{2}{3}"'                          annualType + MultiLanguageStrings.GetString(Ressource.CreditContractForm' "min.Text")'                          ServicesHelper.ConvertNullableDecimalToString(interestRateMin.Value' false)'                          MultiLanguageStrings.GetString(Ressource.CreditContractForm' "max.Text")'                          ServicesHelper.ConvertNullableDecimalToString(interestRateMax.Value' false));                      nudInterestRate.Value = interestRateMin.Value;                  }              }              else // if it is an existing contract              {                  //if contract doesn't use a loan cycle                  if (credit.LoanCycle == null && credit.InterestRateMin == null && credit.InterestRateMax == null)                  {                      try                      {                          decimal? interestRateMin = creditProduct.InterestRateMin * 100;                          decimal? interestRateMax = creditProduct.InterestRateMax * 100;                          nudInterestRate.Minimum = interestRateMin.Value;                          nudInterestRate.Maximum = interestRateMax.Value;                          lbLoanInterestRateMinMax.Text = string.Format("{0}{1}\r\n{2}{3}"'                              annualType + MultiLanguageStrings.GetString(Ressource.CreditContractForm' "min.Text")'                              ServicesHelper.ConvertNullableDecimalToString(interestRateMin.Value' false)'                              MultiLanguageStrings.GetString(Ressource.CreditContractForm' "max.Text")'                              ServicesHelper.ConvertNullableDecimalToString(interestRateMax.Value' false));                          nudInterestRate.Value = credit.InterestRate * 100;                      }                      catch                      {                          nudInterestRate.Minimum = nudInterestRate.Maximum = credit.InterestRate * 100;                          nudInterestRate.Value = credit.InterestRate * 100;                      }                    }                  else //contract uses a loan cycle                  {                      try                      {                          decimal? interestRateMin = creditProduct.InterestRateMin * 100;                          decimal? interestRateMax = creditProduct.InterestRateMax * 100;                          nudInterestRate.Minimum = interestRateMin.Value;                          nudInterestRate.Maximum = interestRateMax.Value;                          lbLoanInterestRateMinMax.Text = string.Format("{0}{1}\r\n{2}{3}"'                              annualType + MultiLanguageStrings.GetString(Ressource.CreditContractForm' "min.Text")'                              ServicesHelper.ConvertNullableDecimalToString(interestRateMin.Value' false)'                              MultiLanguageStrings.GetString(Ressource.CreditContractForm' "max.Text")'                              ServicesHelper.ConvertNullableDecimalToString(interestRateMax.Value' false));                          nudInterestRate.Value = credit.InterestRate * 100;                      }                      catch                      {                          nudInterestRate.Minimum = nudInterestRate.Maximum = credit.InterestRate * 100;                          nudInterestRate.Value = credit.InterestRate * 100;                      }                  }              }
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializePackageInterestRate,The following statement contains a magic number: if (pForCreation) //if it is new contract              {                  nudInterestRate.Enabled = true;                  if (!creditProduct.UseLoanCycle) //if product doesn't use any loan cycles                  {                      if (!creditProduct.InterestRate.HasValue) //if interest rate is a range value                      {                          decimal? interestRateMin = creditProduct.InterestRateMin * 100;                          decimal? interestRateMax = creditProduct.InterestRateMax * 100;                          nudInterestRate.Minimum = interestRateMin.Value;                          nudInterestRate.Maximum = interestRateMax.Value;                          lbLoanInterestRateMinMax.Text = string.Format("{0}{1}\r\n{2}{3}"'                              annualType + MultiLanguageStrings.GetString(Ressource.CreditContractForm' "min.Text")'                              ServicesHelper.ConvertNullableDecimalToString(interestRateMin.Value' false)'                              MultiLanguageStrings.GetString(Ressource.CreditContractForm' "max.Text")'                              ServicesHelper.ConvertNullableDecimalToString(interestRateMax.Value' false));                          nudInterestRate.Value = interestRateMin.Value;                      }                      else// if interest rate is a fixed value                      {                          decimal? interestRate = creditProduct.InterestRate * 100;                          nudInterestRate.Minimum = nudInterestRate.Maximum = creditProduct.InterestRate.Value * 100;                          nudInterestRate.Value = interestRate.Value;                          lbLoanInterestRateMinMax.Text = string.Format("{0}{1}\r\n{2}{3}"'                              annualType + MultiLanguageStrings.GetString(Ressource.CreditContractForm' "min.Text")'                              ServicesHelper.ConvertNullableDecimalToString(interestRate.Value' false)'                              MultiLanguageStrings.GetString(Ressource.CreditContractForm' "max.Text")'                              ServicesHelper.ConvertNullableDecimalToString(interestRate.Value' false));                      }                  }                  else //if product uses a loan cycle                  {                      decimal? interestRateMin = creditProduct.InterestRateMin * 100;                      decimal? interestRateMax = creditProduct.InterestRateMax * 100;                      nudInterestRate.Minimum = interestRateMin.Value;                      nudInterestRate.Maximum = interestRateMax.Value;                      lbLoanInterestRateMinMax.Text = string.Format("{0}{1}\r\n{2}{3}"'                          annualType + MultiLanguageStrings.GetString(Ressource.CreditContractForm' "min.Text")'                          ServicesHelper.ConvertNullableDecimalToString(interestRateMin.Value' false)'                          MultiLanguageStrings.GetString(Ressource.CreditContractForm' "max.Text")'                          ServicesHelper.ConvertNullableDecimalToString(interestRateMax.Value' false));                      nudInterestRate.Value = interestRateMin.Value;                  }              }              else // if it is an existing contract              {                  //if contract doesn't use a loan cycle                  if (credit.LoanCycle == null && credit.InterestRateMin == null && credit.InterestRateMax == null)                  {                      try                      {                          decimal? interestRateMin = creditProduct.InterestRateMin * 100;                          decimal? interestRateMax = creditProduct.InterestRateMax * 100;                          nudInterestRate.Minimum = interestRateMin.Value;                          nudInterestRate.Maximum = interestRateMax.Value;                          lbLoanInterestRateMinMax.Text = string.Format("{0}{1}\r\n{2}{3}"'                              annualType + MultiLanguageStrings.GetString(Ressource.CreditContractForm' "min.Text")'                              ServicesHelper.ConvertNullableDecimalToString(interestRateMin.Value' false)'                              MultiLanguageStrings.GetString(Ressource.CreditContractForm' "max.Text")'                              ServicesHelper.ConvertNullableDecimalToString(interestRateMax.Value' false));                          nudInterestRate.Value = credit.InterestRate * 100;                      }                      catch                      {                          nudInterestRate.Minimum = nudInterestRate.Maximum = credit.InterestRate * 100;                          nudInterestRate.Value = credit.InterestRate * 100;                      }                    }                  else //contract uses a loan cycle                  {                      try                      {                          decimal? interestRateMin = creditProduct.InterestRateMin * 100;                          decimal? interestRateMax = creditProduct.InterestRateMax * 100;                          nudInterestRate.Minimum = interestRateMin.Value;                          nudInterestRate.Maximum = interestRateMax.Value;                          lbLoanInterestRateMinMax.Text = string.Format("{0}{1}\r\n{2}{3}"'                              annualType + MultiLanguageStrings.GetString(Ressource.CreditContractForm' "min.Text")'                              ServicesHelper.ConvertNullableDecimalToString(interestRateMin.Value' false)'                              MultiLanguageStrings.GetString(Ressource.CreditContractForm' "max.Text")'                              ServicesHelper.ConvertNullableDecimalToString(interestRateMax.Value' false));                          nudInterestRate.Value = credit.InterestRate * 100;                      }                      catch                      {                          nudInterestRate.Minimum = nudInterestRate.Maximum = credit.InterestRate * 100;                          nudInterestRate.Value = credit.InterestRate * 100;                      }                  }              }
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializePackageInterestRate,The following statement contains a magic number: if (pForCreation) //if it is new contract              {                  nudInterestRate.Enabled = true;                  if (!creditProduct.UseLoanCycle) //if product doesn't use any loan cycles                  {                      if (!creditProduct.InterestRate.HasValue) //if interest rate is a range value                      {                          decimal? interestRateMin = creditProduct.InterestRateMin * 100;                          decimal? interestRateMax = creditProduct.InterestRateMax * 100;                          nudInterestRate.Minimum = interestRateMin.Value;                          nudInterestRate.Maximum = interestRateMax.Value;                          lbLoanInterestRateMinMax.Text = string.Format("{0}{1}\r\n{2}{3}"'                              annualType + MultiLanguageStrings.GetString(Ressource.CreditContractForm' "min.Text")'                              ServicesHelper.ConvertNullableDecimalToString(interestRateMin.Value' false)'                              MultiLanguageStrings.GetString(Ressource.CreditContractForm' "max.Text")'                              ServicesHelper.ConvertNullableDecimalToString(interestRateMax.Value' false));                          nudInterestRate.Value = interestRateMin.Value;                      }                      else// if interest rate is a fixed value                      {                          decimal? interestRate = creditProduct.InterestRate * 100;                          nudInterestRate.Minimum = nudInterestRate.Maximum = creditProduct.InterestRate.Value * 100;                          nudInterestRate.Value = interestRate.Value;                          lbLoanInterestRateMinMax.Text = string.Format("{0}{1}\r\n{2}{3}"'                              annualType + MultiLanguageStrings.GetString(Ressource.CreditContractForm' "min.Text")'                              ServicesHelper.ConvertNullableDecimalToString(interestRate.Value' false)'                              MultiLanguageStrings.GetString(Ressource.CreditContractForm' "max.Text")'                              ServicesHelper.ConvertNullableDecimalToString(interestRate.Value' false));                      }                  }                  else //if product uses a loan cycle                  {                      decimal? interestRateMin = creditProduct.InterestRateMin * 100;                      decimal? interestRateMax = creditProduct.InterestRateMax * 100;                      nudInterestRate.Minimum = interestRateMin.Value;                      nudInterestRate.Maximum = interestRateMax.Value;                      lbLoanInterestRateMinMax.Text = string.Format("{0}{1}\r\n{2}{3}"'                          annualType + MultiLanguageStrings.GetString(Ressource.CreditContractForm' "min.Text")'                          ServicesHelper.ConvertNullableDecimalToString(interestRateMin.Value' false)'                          MultiLanguageStrings.GetString(Ressource.CreditContractForm' "max.Text")'                          ServicesHelper.ConvertNullableDecimalToString(interestRateMax.Value' false));                      nudInterestRate.Value = interestRateMin.Value;                  }              }              else // if it is an existing contract              {                  //if contract doesn't use a loan cycle                  if (credit.LoanCycle == null && credit.InterestRateMin == null && credit.InterestRateMax == null)                  {                      try                      {                          decimal? interestRateMin = creditProduct.InterestRateMin * 100;                          decimal? interestRateMax = creditProduct.InterestRateMax * 100;                          nudInterestRate.Minimum = interestRateMin.Value;                          nudInterestRate.Maximum = interestRateMax.Value;                          lbLoanInterestRateMinMax.Text = string.Format("{0}{1}\r\n{2}{3}"'                              annualType + MultiLanguageStrings.GetString(Ressource.CreditContractForm' "min.Text")'                              ServicesHelper.ConvertNullableDecimalToString(interestRateMin.Value' false)'                              MultiLanguageStrings.GetString(Ressource.CreditContractForm' "max.Text")'                              ServicesHelper.ConvertNullableDecimalToString(interestRateMax.Value' false));                          nudInterestRate.Value = credit.InterestRate * 100;                      }                      catch                      {                          nudInterestRate.Minimum = nudInterestRate.Maximum = credit.InterestRate * 100;                          nudInterestRate.Value = credit.InterestRate * 100;                      }                    }                  else //contract uses a loan cycle                  {                      try                      {                          decimal? interestRateMin = creditProduct.InterestRateMin * 100;                          decimal? interestRateMax = creditProduct.InterestRateMax * 100;                          nudInterestRate.Minimum = interestRateMin.Value;                          nudInterestRate.Maximum = interestRateMax.Value;                          lbLoanInterestRateMinMax.Text = string.Format("{0}{1}\r\n{2}{3}"'                              annualType + MultiLanguageStrings.GetString(Ressource.CreditContractForm' "min.Text")'                              ServicesHelper.ConvertNullableDecimalToString(interestRateMin.Value' false)'                              MultiLanguageStrings.GetString(Ressource.CreditContractForm' "max.Text")'                              ServicesHelper.ConvertNullableDecimalToString(interestRateMax.Value' false));                          nudInterestRate.Value = credit.InterestRate * 100;                      }                      catch                      {                          nudInterestRate.Minimum = nudInterestRate.Maximum = credit.InterestRate * 100;                          nudInterestRate.Value = credit.InterestRate * 100;                      }                  }              }
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializePackageInterestRate,The following statement contains a magic number: if (pForCreation) //if it is new contract              {                  nudInterestRate.Enabled = true;                  if (!creditProduct.UseLoanCycle) //if product doesn't use any loan cycles                  {                      if (!creditProduct.InterestRate.HasValue) //if interest rate is a range value                      {                          decimal? interestRateMin = creditProduct.InterestRateMin * 100;                          decimal? interestRateMax = creditProduct.InterestRateMax * 100;                          nudInterestRate.Minimum = interestRateMin.Value;                          nudInterestRate.Maximum = interestRateMax.Value;                          lbLoanInterestRateMinMax.Text = string.Format("{0}{1}\r\n{2}{3}"'                              annualType + MultiLanguageStrings.GetString(Ressource.CreditContractForm' "min.Text")'                              ServicesHelper.ConvertNullableDecimalToString(interestRateMin.Value' false)'                              MultiLanguageStrings.GetString(Ressource.CreditContractForm' "max.Text")'                              ServicesHelper.ConvertNullableDecimalToString(interestRateMax.Value' false));                          nudInterestRate.Value = interestRateMin.Value;                      }                      else// if interest rate is a fixed value                      {                          decimal? interestRate = creditProduct.InterestRate * 100;                          nudInterestRate.Minimum = nudInterestRate.Maximum = creditProduct.InterestRate.Value * 100;                          nudInterestRate.Value = interestRate.Value;                          lbLoanInterestRateMinMax.Text = string.Format("{0}{1}\r\n{2}{3}"'                              annualType + MultiLanguageStrings.GetString(Ressource.CreditContractForm' "min.Text")'                              ServicesHelper.ConvertNullableDecimalToString(interestRate.Value' false)'                              MultiLanguageStrings.GetString(Ressource.CreditContractForm' "max.Text")'                              ServicesHelper.ConvertNullableDecimalToString(interestRate.Value' false));                      }                  }                  else //if product uses a loan cycle                  {                      decimal? interestRateMin = creditProduct.InterestRateMin * 100;                      decimal? interestRateMax = creditProduct.InterestRateMax * 100;                      nudInterestRate.Minimum = interestRateMin.Value;                      nudInterestRate.Maximum = interestRateMax.Value;                      lbLoanInterestRateMinMax.Text = string.Format("{0}{1}\r\n{2}{3}"'                          annualType + MultiLanguageStrings.GetString(Ressource.CreditContractForm' "min.Text")'                          ServicesHelper.ConvertNullableDecimalToString(interestRateMin.Value' false)'                          MultiLanguageStrings.GetString(Ressource.CreditContractForm' "max.Text")'                          ServicesHelper.ConvertNullableDecimalToString(interestRateMax.Value' false));                      nudInterestRate.Value = interestRateMin.Value;                  }              }              else // if it is an existing contract              {                  //if contract doesn't use a loan cycle                  if (credit.LoanCycle == null && credit.InterestRateMin == null && credit.InterestRateMax == null)                  {                      try                      {                          decimal? interestRateMin = creditProduct.InterestRateMin * 100;                          decimal? interestRateMax = creditProduct.InterestRateMax * 100;                          nudInterestRate.Minimum = interestRateMin.Value;                          nudInterestRate.Maximum = interestRateMax.Value;                          lbLoanInterestRateMinMax.Text = string.Format("{0}{1}\r\n{2}{3}"'                              annualType + MultiLanguageStrings.GetString(Ressource.CreditContractForm' "min.Text")'                              ServicesHelper.ConvertNullableDecimalToString(interestRateMin.Value' false)'                              MultiLanguageStrings.GetString(Ressource.CreditContractForm' "max.Text")'                              ServicesHelper.ConvertNullableDecimalToString(interestRateMax.Value' false));                          nudInterestRate.Value = credit.InterestRate * 100;                      }                      catch                      {                          nudInterestRate.Minimum = nudInterestRate.Maximum = credit.InterestRate * 100;                          nudInterestRate.Value = credit.InterestRate * 100;                      }                    }                  else //contract uses a loan cycle                  {                      try                      {                          decimal? interestRateMin = creditProduct.InterestRateMin * 100;                          decimal? interestRateMax = creditProduct.InterestRateMax * 100;                          nudInterestRate.Minimum = interestRateMin.Value;                          nudInterestRate.Maximum = interestRateMax.Value;                          lbLoanInterestRateMinMax.Text = string.Format("{0}{1}\r\n{2}{3}"'                              annualType + MultiLanguageStrings.GetString(Ressource.CreditContractForm' "min.Text")'                              ServicesHelper.ConvertNullableDecimalToString(interestRateMin.Value' false)'                              MultiLanguageStrings.GetString(Ressource.CreditContractForm' "max.Text")'                              ServicesHelper.ConvertNullableDecimalToString(interestRateMax.Value' false));                          nudInterestRate.Value = credit.InterestRate * 100;                      }                      catch                      {                          nudInterestRate.Minimum = nudInterestRate.Maximum = credit.InterestRate * 100;                          nudInterestRate.Value = credit.InterestRate * 100;                      }                  }              }
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializePackageInterestRate,The following statement contains a magic number: if (pForCreation) //if it is new contract              {                  nudInterestRate.Enabled = true;                  if (!creditProduct.UseLoanCycle) //if product doesn't use any loan cycles                  {                      if (!creditProduct.InterestRate.HasValue) //if interest rate is a range value                      {                          decimal? interestRateMin = creditProduct.InterestRateMin * 100;                          decimal? interestRateMax = creditProduct.InterestRateMax * 100;                          nudInterestRate.Minimum = interestRateMin.Value;                          nudInterestRate.Maximum = interestRateMax.Value;                          lbLoanInterestRateMinMax.Text = string.Format("{0}{1}\r\n{2}{3}"'                              annualType + MultiLanguageStrings.GetString(Ressource.CreditContractForm' "min.Text")'                              ServicesHelper.ConvertNullableDecimalToString(interestRateMin.Value' false)'                              MultiLanguageStrings.GetString(Ressource.CreditContractForm' "max.Text")'                              ServicesHelper.ConvertNullableDecimalToString(interestRateMax.Value' false));                          nudInterestRate.Value = interestRateMin.Value;                      }                      else// if interest rate is a fixed value                      {                          decimal? interestRate = creditProduct.InterestRate * 100;                          nudInterestRate.Minimum = nudInterestRate.Maximum = creditProduct.InterestRate.Value * 100;                          nudInterestRate.Value = interestRate.Value;                          lbLoanInterestRateMinMax.Text = string.Format("{0}{1}\r\n{2}{3}"'                              annualType + MultiLanguageStrings.GetString(Ressource.CreditContractForm' "min.Text")'                              ServicesHelper.ConvertNullableDecimalToString(interestRate.Value' false)'                              MultiLanguageStrings.GetString(Ressource.CreditContractForm' "max.Text")'                              ServicesHelper.ConvertNullableDecimalToString(interestRate.Value' false));                      }                  }                  else //if product uses a loan cycle                  {                      decimal? interestRateMin = creditProduct.InterestRateMin * 100;                      decimal? interestRateMax = creditProduct.InterestRateMax * 100;                      nudInterestRate.Minimum = interestRateMin.Value;                      nudInterestRate.Maximum = interestRateMax.Value;                      lbLoanInterestRateMinMax.Text = string.Format("{0}{1}\r\n{2}{3}"'                          annualType + MultiLanguageStrings.GetString(Ressource.CreditContractForm' "min.Text")'                          ServicesHelper.ConvertNullableDecimalToString(interestRateMin.Value' false)'                          MultiLanguageStrings.GetString(Ressource.CreditContractForm' "max.Text")'                          ServicesHelper.ConvertNullableDecimalToString(interestRateMax.Value' false));                      nudInterestRate.Value = interestRateMin.Value;                  }              }              else // if it is an existing contract              {                  //if contract doesn't use a loan cycle                  if (credit.LoanCycle == null && credit.InterestRateMin == null && credit.InterestRateMax == null)                  {                      try                      {                          decimal? interestRateMin = creditProduct.InterestRateMin * 100;                          decimal? interestRateMax = creditProduct.InterestRateMax * 100;                          nudInterestRate.Minimum = interestRateMin.Value;                          nudInterestRate.Maximum = interestRateMax.Value;                          lbLoanInterestRateMinMax.Text = string.Format("{0}{1}\r\n{2}{3}"'                              annualType + MultiLanguageStrings.GetString(Ressource.CreditContractForm' "min.Text")'                              ServicesHelper.ConvertNullableDecimalToString(interestRateMin.Value' false)'                              MultiLanguageStrings.GetString(Ressource.CreditContractForm' "max.Text")'                              ServicesHelper.ConvertNullableDecimalToString(interestRateMax.Value' false));                          nudInterestRate.Value = credit.InterestRate * 100;                      }                      catch                      {                          nudInterestRate.Minimum = nudInterestRate.Maximum = credit.InterestRate * 100;                          nudInterestRate.Value = credit.InterestRate * 100;                      }                    }                  else //contract uses a loan cycle                  {                      try                      {                          decimal? interestRateMin = creditProduct.InterestRateMin * 100;                          decimal? interestRateMax = creditProduct.InterestRateMax * 100;                          nudInterestRate.Minimum = interestRateMin.Value;                          nudInterestRate.Maximum = interestRateMax.Value;                          lbLoanInterestRateMinMax.Text = string.Format("{0}{1}\r\n{2}{3}"'                              annualType + MultiLanguageStrings.GetString(Ressource.CreditContractForm' "min.Text")'                              ServicesHelper.ConvertNullableDecimalToString(interestRateMin.Value' false)'                              MultiLanguageStrings.GetString(Ressource.CreditContractForm' "max.Text")'                              ServicesHelper.ConvertNullableDecimalToString(interestRateMax.Value' false));                          nudInterestRate.Value = credit.InterestRate * 100;                      }                      catch                      {                          nudInterestRate.Minimum = nudInterestRate.Maximum = credit.InterestRate * 100;                          nudInterestRate.Value = credit.InterestRate * 100;                      }                  }              }
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializePackageInterestRate,The following statement contains a magic number: if (pForCreation) //if it is new contract              {                  nudInterestRate.Enabled = true;                  if (!creditProduct.UseLoanCycle) //if product doesn't use any loan cycles                  {                      if (!creditProduct.InterestRate.HasValue) //if interest rate is a range value                      {                          decimal? interestRateMin = creditProduct.InterestRateMin * 100;                          decimal? interestRateMax = creditProduct.InterestRateMax * 100;                          nudInterestRate.Minimum = interestRateMin.Value;                          nudInterestRate.Maximum = interestRateMax.Value;                          lbLoanInterestRateMinMax.Text = string.Format("{0}{1}\r\n{2}{3}"'                              annualType + MultiLanguageStrings.GetString(Ressource.CreditContractForm' "min.Text")'                              ServicesHelper.ConvertNullableDecimalToString(interestRateMin.Value' false)'                              MultiLanguageStrings.GetString(Ressource.CreditContractForm' "max.Text")'                              ServicesHelper.ConvertNullableDecimalToString(interestRateMax.Value' false));                          nudInterestRate.Value = interestRateMin.Value;                      }                      else// if interest rate is a fixed value                      {                          decimal? interestRate = creditProduct.InterestRate * 100;                          nudInterestRate.Minimum = nudInterestRate.Maximum = creditProduct.InterestRate.Value * 100;                          nudInterestRate.Value = interestRate.Value;                          lbLoanInterestRateMinMax.Text = string.Format("{0}{1}\r\n{2}{3}"'                              annualType + MultiLanguageStrings.GetString(Ressource.CreditContractForm' "min.Text")'                              ServicesHelper.ConvertNullableDecimalToString(interestRate.Value' false)'                              MultiLanguageStrings.GetString(Ressource.CreditContractForm' "max.Text")'                              ServicesHelper.ConvertNullableDecimalToString(interestRate.Value' false));                      }                  }                  else //if product uses a loan cycle                  {                      decimal? interestRateMin = creditProduct.InterestRateMin * 100;                      decimal? interestRateMax = creditProduct.InterestRateMax * 100;                      nudInterestRate.Minimum = interestRateMin.Value;                      nudInterestRate.Maximum = interestRateMax.Value;                      lbLoanInterestRateMinMax.Text = string.Format("{0}{1}\r\n{2}{3}"'                          annualType + MultiLanguageStrings.GetString(Ressource.CreditContractForm' "min.Text")'                          ServicesHelper.ConvertNullableDecimalToString(interestRateMin.Value' false)'                          MultiLanguageStrings.GetString(Ressource.CreditContractForm' "max.Text")'                          ServicesHelper.ConvertNullableDecimalToString(interestRateMax.Value' false));                      nudInterestRate.Value = interestRateMin.Value;                  }              }              else // if it is an existing contract              {                  //if contract doesn't use a loan cycle                  if (credit.LoanCycle == null && credit.InterestRateMin == null && credit.InterestRateMax == null)                  {                      try                      {                          decimal? interestRateMin = creditProduct.InterestRateMin * 100;                          decimal? interestRateMax = creditProduct.InterestRateMax * 100;                          nudInterestRate.Minimum = interestRateMin.Value;                          nudInterestRate.Maximum = interestRateMax.Value;                          lbLoanInterestRateMinMax.Text = string.Format("{0}{1}\r\n{2}{3}"'                              annualType + MultiLanguageStrings.GetString(Ressource.CreditContractForm' "min.Text")'                              ServicesHelper.ConvertNullableDecimalToString(interestRateMin.Value' false)'                              MultiLanguageStrings.GetString(Ressource.CreditContractForm' "max.Text")'                              ServicesHelper.ConvertNullableDecimalToString(interestRateMax.Value' false));                          nudInterestRate.Value = credit.InterestRate * 100;                      }                      catch                      {                          nudInterestRate.Minimum = nudInterestRate.Maximum = credit.InterestRate * 100;                          nudInterestRate.Value = credit.InterestRate * 100;                      }                    }                  else //contract uses a loan cycle                  {                      try                      {                          decimal? interestRateMin = creditProduct.InterestRateMin * 100;                          decimal? interestRateMax = creditProduct.InterestRateMax * 100;                          nudInterestRate.Minimum = interestRateMin.Value;                          nudInterestRate.Maximum = interestRateMax.Value;                          lbLoanInterestRateMinMax.Text = string.Format("{0}{1}\r\n{2}{3}"'                              annualType + MultiLanguageStrings.GetString(Ressource.CreditContractForm' "min.Text")'                              ServicesHelper.ConvertNullableDecimalToString(interestRateMin.Value' false)'                              MultiLanguageStrings.GetString(Ressource.CreditContractForm' "max.Text")'                              ServicesHelper.ConvertNullableDecimalToString(interestRateMax.Value' false));                          nudInterestRate.Value = credit.InterestRate * 100;                      }                      catch                      {                          nudInterestRate.Minimum = nudInterestRate.Maximum = credit.InterestRate * 100;                          nudInterestRate.Value = credit.InterestRate * 100;                      }                  }              }
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializePackageInterestRate,The following statement contains a magic number: if (pForCreation) //if it is new contract              {                  nudInterestRate.Enabled = true;                  if (!creditProduct.UseLoanCycle) //if product doesn't use any loan cycles                  {                      if (!creditProduct.InterestRate.HasValue) //if interest rate is a range value                      {                          decimal? interestRateMin = creditProduct.InterestRateMin * 100;                          decimal? interestRateMax = creditProduct.InterestRateMax * 100;                          nudInterestRate.Minimum = interestRateMin.Value;                          nudInterestRate.Maximum = interestRateMax.Value;                          lbLoanInterestRateMinMax.Text = string.Format("{0}{1}\r\n{2}{3}"'                              annualType + MultiLanguageStrings.GetString(Ressource.CreditContractForm' "min.Text")'                              ServicesHelper.ConvertNullableDecimalToString(interestRateMin.Value' false)'                              MultiLanguageStrings.GetString(Ressource.CreditContractForm' "max.Text")'                              ServicesHelper.ConvertNullableDecimalToString(interestRateMax.Value' false));                          nudInterestRate.Value = interestRateMin.Value;                      }                      else// if interest rate is a fixed value                      {                          decimal? interestRate = creditProduct.InterestRate * 100;                          nudInterestRate.Minimum = nudInterestRate.Maximum = creditProduct.InterestRate.Value * 100;                          nudInterestRate.Value = interestRate.Value;                          lbLoanInterestRateMinMax.Text = string.Format("{0}{1}\r\n{2}{3}"'                              annualType + MultiLanguageStrings.GetString(Ressource.CreditContractForm' "min.Text")'                              ServicesHelper.ConvertNullableDecimalToString(interestRate.Value' false)'                              MultiLanguageStrings.GetString(Ressource.CreditContractForm' "max.Text")'                              ServicesHelper.ConvertNullableDecimalToString(interestRate.Value' false));                      }                  }                  else //if product uses a loan cycle                  {                      decimal? interestRateMin = creditProduct.InterestRateMin * 100;                      decimal? interestRateMax = creditProduct.InterestRateMax * 100;                      nudInterestRate.Minimum = interestRateMin.Value;                      nudInterestRate.Maximum = interestRateMax.Value;                      lbLoanInterestRateMinMax.Text = string.Format("{0}{1}\r\n{2}{3}"'                          annualType + MultiLanguageStrings.GetString(Ressource.CreditContractForm' "min.Text")'                          ServicesHelper.ConvertNullableDecimalToString(interestRateMin.Value' false)'                          MultiLanguageStrings.GetString(Ressource.CreditContractForm' "max.Text")'                          ServicesHelper.ConvertNullableDecimalToString(interestRateMax.Value' false));                      nudInterestRate.Value = interestRateMin.Value;                  }              }              else // if it is an existing contract              {                  //if contract doesn't use a loan cycle                  if (credit.LoanCycle == null && credit.InterestRateMin == null && credit.InterestRateMax == null)                  {                      try                      {                          decimal? interestRateMin = creditProduct.InterestRateMin * 100;                          decimal? interestRateMax = creditProduct.InterestRateMax * 100;                          nudInterestRate.Minimum = interestRateMin.Value;                          nudInterestRate.Maximum = interestRateMax.Value;                          lbLoanInterestRateMinMax.Text = string.Format("{0}{1}\r\n{2}{3}"'                              annualType + MultiLanguageStrings.GetString(Ressource.CreditContractForm' "min.Text")'                              ServicesHelper.ConvertNullableDecimalToString(interestRateMin.Value' false)'                              MultiLanguageStrings.GetString(Ressource.CreditContractForm' "max.Text")'                              ServicesHelper.ConvertNullableDecimalToString(interestRateMax.Value' false));                          nudInterestRate.Value = credit.InterestRate * 100;                      }                      catch                      {                          nudInterestRate.Minimum = nudInterestRate.Maximum = credit.InterestRate * 100;                          nudInterestRate.Value = credit.InterestRate * 100;                      }                    }                  else //contract uses a loan cycle                  {                      try                      {                          decimal? interestRateMin = creditProduct.InterestRateMin * 100;                          decimal? interestRateMax = creditProduct.InterestRateMax * 100;                          nudInterestRate.Minimum = interestRateMin.Value;                          nudInterestRate.Maximum = interestRateMax.Value;                          lbLoanInterestRateMinMax.Text = string.Format("{0}{1}\r\n{2}{3}"'                              annualType + MultiLanguageStrings.GetString(Ressource.CreditContractForm' "min.Text")'                              ServicesHelper.ConvertNullableDecimalToString(interestRateMin.Value' false)'                              MultiLanguageStrings.GetString(Ressource.CreditContractForm' "max.Text")'                              ServicesHelper.ConvertNullableDecimalToString(interestRateMax.Value' false));                          nudInterestRate.Value = credit.InterestRate * 100;                      }                      catch                      {                          nudInterestRate.Minimum = nudInterestRate.Maximum = credit.InterestRate * 100;                          nudInterestRate.Value = credit.InterestRate * 100;                      }                  }              }
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializePackageInterestRate,The following statement contains a magic number: if (pForCreation) //if it is new contract              {                  nudInterestRate.Enabled = true;                  if (!creditProduct.UseLoanCycle) //if product doesn't use any loan cycles                  {                      if (!creditProduct.InterestRate.HasValue) //if interest rate is a range value                      {                          decimal? interestRateMin = creditProduct.InterestRateMin * 100;                          decimal? interestRateMax = creditProduct.InterestRateMax * 100;                          nudInterestRate.Minimum = interestRateMin.Value;                          nudInterestRate.Maximum = interestRateMax.Value;                          lbLoanInterestRateMinMax.Text = string.Format("{0}{1}\r\n{2}{3}"'                              annualType + MultiLanguageStrings.GetString(Ressource.CreditContractForm' "min.Text")'                              ServicesHelper.ConvertNullableDecimalToString(interestRateMin.Value' false)'                              MultiLanguageStrings.GetString(Ressource.CreditContractForm' "max.Text")'                              ServicesHelper.ConvertNullableDecimalToString(interestRateMax.Value' false));                          nudInterestRate.Value = interestRateMin.Value;                      }                      else// if interest rate is a fixed value                      {                          decimal? interestRate = creditProduct.InterestRate * 100;                          nudInterestRate.Minimum = nudInterestRate.Maximum = creditProduct.InterestRate.Value * 100;                          nudInterestRate.Value = interestRate.Value;                          lbLoanInterestRateMinMax.Text = string.Format("{0}{1}\r\n{2}{3}"'                              annualType + MultiLanguageStrings.GetString(Ressource.CreditContractForm' "min.Text")'                              ServicesHelper.ConvertNullableDecimalToString(interestRate.Value' false)'                              MultiLanguageStrings.GetString(Ressource.CreditContractForm' "max.Text")'                              ServicesHelper.ConvertNullableDecimalToString(interestRate.Value' false));                      }                  }                  else //if product uses a loan cycle                  {                      decimal? interestRateMin = creditProduct.InterestRateMin * 100;                      decimal? interestRateMax = creditProduct.InterestRateMax * 100;                      nudInterestRate.Minimum = interestRateMin.Value;                      nudInterestRate.Maximum = interestRateMax.Value;                      lbLoanInterestRateMinMax.Text = string.Format("{0}{1}\r\n{2}{3}"'                          annualType + MultiLanguageStrings.GetString(Ressource.CreditContractForm' "min.Text")'                          ServicesHelper.ConvertNullableDecimalToString(interestRateMin.Value' false)'                          MultiLanguageStrings.GetString(Ressource.CreditContractForm' "max.Text")'                          ServicesHelper.ConvertNullableDecimalToString(interestRateMax.Value' false));                      nudInterestRate.Value = interestRateMin.Value;                  }              }              else // if it is an existing contract              {                  //if contract doesn't use a loan cycle                  if (credit.LoanCycle == null && credit.InterestRateMin == null && credit.InterestRateMax == null)                  {                      try                      {                          decimal? interestRateMin = creditProduct.InterestRateMin * 100;                          decimal? interestRateMax = creditProduct.InterestRateMax * 100;                          nudInterestRate.Minimum = interestRateMin.Value;                          nudInterestRate.Maximum = interestRateMax.Value;                          lbLoanInterestRateMinMax.Text = string.Format("{0}{1}\r\n{2}{3}"'                              annualType + MultiLanguageStrings.GetString(Ressource.CreditContractForm' "min.Text")'                              ServicesHelper.ConvertNullableDecimalToString(interestRateMin.Value' false)'                              MultiLanguageStrings.GetString(Ressource.CreditContractForm' "max.Text")'                              ServicesHelper.ConvertNullableDecimalToString(interestRateMax.Value' false));                          nudInterestRate.Value = credit.InterestRate * 100;                      }                      catch                      {                          nudInterestRate.Minimum = nudInterestRate.Maximum = credit.InterestRate * 100;                          nudInterestRate.Value = credit.InterestRate * 100;                      }                    }                  else //contract uses a loan cycle                  {                      try                      {                          decimal? interestRateMin = creditProduct.InterestRateMin * 100;                          decimal? interestRateMax = creditProduct.InterestRateMax * 100;                          nudInterestRate.Minimum = interestRateMin.Value;                          nudInterestRate.Maximum = interestRateMax.Value;                          lbLoanInterestRateMinMax.Text = string.Format("{0}{1}\r\n{2}{3}"'                              annualType + MultiLanguageStrings.GetString(Ressource.CreditContractForm' "min.Text")'                              ServicesHelper.ConvertNullableDecimalToString(interestRateMin.Value' false)'                              MultiLanguageStrings.GetString(Ressource.CreditContractForm' "max.Text")'                              ServicesHelper.ConvertNullableDecimalToString(interestRateMax.Value' false));                          nudInterestRate.Value = credit.InterestRate * 100;                      }                      catch                      {                          nudInterestRate.Minimum = nudInterestRate.Maximum = credit.InterestRate * 100;                          nudInterestRate.Value = credit.InterestRate * 100;                      }                  }              }
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializePackageInterestRate,The following statement contains a magic number: if (pForCreation) //if it is new contract              {                  nudInterestRate.Enabled = true;                  if (!creditProduct.UseLoanCycle) //if product doesn't use any loan cycles                  {                      if (!creditProduct.InterestRate.HasValue) //if interest rate is a range value                      {                          decimal? interestRateMin = creditProduct.InterestRateMin * 100;                          decimal? interestRateMax = creditProduct.InterestRateMax * 100;                          nudInterestRate.Minimum = interestRateMin.Value;                          nudInterestRate.Maximum = interestRateMax.Value;                          lbLoanInterestRateMinMax.Text = string.Format("{0}{1}\r\n{2}{3}"'                              annualType + MultiLanguageStrings.GetString(Ressource.CreditContractForm' "min.Text")'                              ServicesHelper.ConvertNullableDecimalToString(interestRateMin.Value' false)'                              MultiLanguageStrings.GetString(Ressource.CreditContractForm' "max.Text")'                              ServicesHelper.ConvertNullableDecimalToString(interestRateMax.Value' false));                          nudInterestRate.Value = interestRateMin.Value;                      }                      else// if interest rate is a fixed value                      {                          decimal? interestRate = creditProduct.InterestRate * 100;                          nudInterestRate.Minimum = nudInterestRate.Maximum = creditProduct.InterestRate.Value * 100;                          nudInterestRate.Value = interestRate.Value;                          lbLoanInterestRateMinMax.Text = string.Format("{0}{1}\r\n{2}{3}"'                              annualType + MultiLanguageStrings.GetString(Ressource.CreditContractForm' "min.Text")'                              ServicesHelper.ConvertNullableDecimalToString(interestRate.Value' false)'                              MultiLanguageStrings.GetString(Ressource.CreditContractForm' "max.Text")'                              ServicesHelper.ConvertNullableDecimalToString(interestRate.Value' false));                      }                  }                  else //if product uses a loan cycle                  {                      decimal? interestRateMin = creditProduct.InterestRateMin * 100;                      decimal? interestRateMax = creditProduct.InterestRateMax * 100;                      nudInterestRate.Minimum = interestRateMin.Value;                      nudInterestRate.Maximum = interestRateMax.Value;                      lbLoanInterestRateMinMax.Text = string.Format("{0}{1}\r\n{2}{3}"'                          annualType + MultiLanguageStrings.GetString(Ressource.CreditContractForm' "min.Text")'                          ServicesHelper.ConvertNullableDecimalToString(interestRateMin.Value' false)'                          MultiLanguageStrings.GetString(Ressource.CreditContractForm' "max.Text")'                          ServicesHelper.ConvertNullableDecimalToString(interestRateMax.Value' false));                      nudInterestRate.Value = interestRateMin.Value;                  }              }              else // if it is an existing contract              {                  //if contract doesn't use a loan cycle                  if (credit.LoanCycle == null && credit.InterestRateMin == null && credit.InterestRateMax == null)                  {                      try                      {                          decimal? interestRateMin = creditProduct.InterestRateMin * 100;                          decimal? interestRateMax = creditProduct.InterestRateMax * 100;                          nudInterestRate.Minimum = interestRateMin.Value;                          nudInterestRate.Maximum = interestRateMax.Value;                          lbLoanInterestRateMinMax.Text = string.Format("{0}{1}\r\n{2}{3}"'                              annualType + MultiLanguageStrings.GetString(Ressource.CreditContractForm' "min.Text")'                              ServicesHelper.ConvertNullableDecimalToString(interestRateMin.Value' false)'                              MultiLanguageStrings.GetString(Ressource.CreditContractForm' "max.Text")'                              ServicesHelper.ConvertNullableDecimalToString(interestRateMax.Value' false));                          nudInterestRate.Value = credit.InterestRate * 100;                      }                      catch                      {                          nudInterestRate.Minimum = nudInterestRate.Maximum = credit.InterestRate * 100;                          nudInterestRate.Value = credit.InterestRate * 100;                      }                    }                  else //contract uses a loan cycle                  {                      try                      {                          decimal? interestRateMin = creditProduct.InterestRateMin * 100;                          decimal? interestRateMax = creditProduct.InterestRateMax * 100;                          nudInterestRate.Minimum = interestRateMin.Value;                          nudInterestRate.Maximum = interestRateMax.Value;                          lbLoanInterestRateMinMax.Text = string.Format("{0}{1}\r\n{2}{3}"'                              annualType + MultiLanguageStrings.GetString(Ressource.CreditContractForm' "min.Text")'                              ServicesHelper.ConvertNullableDecimalToString(interestRateMin.Value' false)'                              MultiLanguageStrings.GetString(Ressource.CreditContractForm' "max.Text")'                              ServicesHelper.ConvertNullableDecimalToString(interestRateMax.Value' false));                          nudInterestRate.Value = credit.InterestRate * 100;                      }                      catch                      {                          nudInterestRate.Minimum = nudInterestRate.Maximum = credit.InterestRate * 100;                          nudInterestRate.Value = credit.InterestRate * 100;                      }                  }              }
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializePackageInterestRate,The following statement contains a magic number: if (pForCreation) //if it is new contract              {                  nudInterestRate.Enabled = true;                  if (!creditProduct.UseLoanCycle) //if product doesn't use any loan cycles                  {                      if (!creditProduct.InterestRate.HasValue) //if interest rate is a range value                      {                          decimal? interestRateMin = creditProduct.InterestRateMin * 100;                          decimal? interestRateMax = creditProduct.InterestRateMax * 100;                          nudInterestRate.Minimum = interestRateMin.Value;                          nudInterestRate.Maximum = interestRateMax.Value;                          lbLoanInterestRateMinMax.Text = string.Format("{0}{1}\r\n{2}{3}"'                              annualType + MultiLanguageStrings.GetString(Ressource.CreditContractForm' "min.Text")'                              ServicesHelper.ConvertNullableDecimalToString(interestRateMin.Value' false)'                              MultiLanguageStrings.GetString(Ressource.CreditContractForm' "max.Text")'                              ServicesHelper.ConvertNullableDecimalToString(interestRateMax.Value' false));                          nudInterestRate.Value = interestRateMin.Value;                      }                      else// if interest rate is a fixed value                      {                          decimal? interestRate = creditProduct.InterestRate * 100;                          nudInterestRate.Minimum = nudInterestRate.Maximum = creditProduct.InterestRate.Value * 100;                          nudInterestRate.Value = interestRate.Value;                          lbLoanInterestRateMinMax.Text = string.Format("{0}{1}\r\n{2}{3}"'                              annualType + MultiLanguageStrings.GetString(Ressource.CreditContractForm' "min.Text")'                              ServicesHelper.ConvertNullableDecimalToString(interestRate.Value' false)'                              MultiLanguageStrings.GetString(Ressource.CreditContractForm' "max.Text")'                              ServicesHelper.ConvertNullableDecimalToString(interestRate.Value' false));                      }                  }                  else //if product uses a loan cycle                  {                      decimal? interestRateMin = creditProduct.InterestRateMin * 100;                      decimal? interestRateMax = creditProduct.InterestRateMax * 100;                      nudInterestRate.Minimum = interestRateMin.Value;                      nudInterestRate.Maximum = interestRateMax.Value;                      lbLoanInterestRateMinMax.Text = string.Format("{0}{1}\r\n{2}{3}"'                          annualType + MultiLanguageStrings.GetString(Ressource.CreditContractForm' "min.Text")'                          ServicesHelper.ConvertNullableDecimalToString(interestRateMin.Value' false)'                          MultiLanguageStrings.GetString(Ressource.CreditContractForm' "max.Text")'                          ServicesHelper.ConvertNullableDecimalToString(interestRateMax.Value' false));                      nudInterestRate.Value = interestRateMin.Value;                  }              }              else // if it is an existing contract              {                  //if contract doesn't use a loan cycle                  if (credit.LoanCycle == null && credit.InterestRateMin == null && credit.InterestRateMax == null)                  {                      try                      {                          decimal? interestRateMin = creditProduct.InterestRateMin * 100;                          decimal? interestRateMax = creditProduct.InterestRateMax * 100;                          nudInterestRate.Minimum = interestRateMin.Value;                          nudInterestRate.Maximum = interestRateMax.Value;                          lbLoanInterestRateMinMax.Text = string.Format("{0}{1}\r\n{2}{3}"'                              annualType + MultiLanguageStrings.GetString(Ressource.CreditContractForm' "min.Text")'                              ServicesHelper.ConvertNullableDecimalToString(interestRateMin.Value' false)'                              MultiLanguageStrings.GetString(Ressource.CreditContractForm' "max.Text")'                              ServicesHelper.ConvertNullableDecimalToString(interestRateMax.Value' false));                          nudInterestRate.Value = credit.InterestRate * 100;                      }                      catch                      {                          nudInterestRate.Minimum = nudInterestRate.Maximum = credit.InterestRate * 100;                          nudInterestRate.Value = credit.InterestRate * 100;                      }                    }                  else //contract uses a loan cycle                  {                      try                      {                          decimal? interestRateMin = creditProduct.InterestRateMin * 100;                          decimal? interestRateMax = creditProduct.InterestRateMax * 100;                          nudInterestRate.Minimum = interestRateMin.Value;                          nudInterestRate.Maximum = interestRateMax.Value;                          lbLoanInterestRateMinMax.Text = string.Format("{0}{1}\r\n{2}{3}"'                              annualType + MultiLanguageStrings.GetString(Ressource.CreditContractForm' "min.Text")'                              ServicesHelper.ConvertNullableDecimalToString(interestRateMin.Value' false)'                              MultiLanguageStrings.GetString(Ressource.CreditContractForm' "max.Text")'                              ServicesHelper.ConvertNullableDecimalToString(interestRateMax.Value' false));                          nudInterestRate.Value = credit.InterestRate * 100;                      }                      catch                      {                          nudInterestRate.Minimum = nudInterestRate.Maximum = credit.InterestRate * 100;                          nudInterestRate.Value = credit.InterestRate * 100;                      }                  }              }
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializePackageInterestRate,The following statement contains a magic number: if (pForCreation) //if it is new contract              {                  nudInterestRate.Enabled = true;                  if (!creditProduct.UseLoanCycle) //if product doesn't use any loan cycles                  {                      if (!creditProduct.InterestRate.HasValue) //if interest rate is a range value                      {                          decimal? interestRateMin = creditProduct.InterestRateMin * 100;                          decimal? interestRateMax = creditProduct.InterestRateMax * 100;                          nudInterestRate.Minimum = interestRateMin.Value;                          nudInterestRate.Maximum = interestRateMax.Value;                          lbLoanInterestRateMinMax.Text = string.Format("{0}{1}\r\n{2}{3}"'                              annualType + MultiLanguageStrings.GetString(Ressource.CreditContractForm' "min.Text")'                              ServicesHelper.ConvertNullableDecimalToString(interestRateMin.Value' false)'                              MultiLanguageStrings.GetString(Ressource.CreditContractForm' "max.Text")'                              ServicesHelper.ConvertNullableDecimalToString(interestRateMax.Value' false));                          nudInterestRate.Value = interestRateMin.Value;                      }                      else// if interest rate is a fixed value                      {                          decimal? interestRate = creditProduct.InterestRate * 100;                          nudInterestRate.Minimum = nudInterestRate.Maximum = creditProduct.InterestRate.Value * 100;                          nudInterestRate.Value = interestRate.Value;                          lbLoanInterestRateMinMax.Text = string.Format("{0}{1}\r\n{2}{3}"'                              annualType + MultiLanguageStrings.GetString(Ressource.CreditContractForm' "min.Text")'                              ServicesHelper.ConvertNullableDecimalToString(interestRate.Value' false)'                              MultiLanguageStrings.GetString(Ressource.CreditContractForm' "max.Text")'                              ServicesHelper.ConvertNullableDecimalToString(interestRate.Value' false));                      }                  }                  else //if product uses a loan cycle                  {                      decimal? interestRateMin = creditProduct.InterestRateMin * 100;                      decimal? interestRateMax = creditProduct.InterestRateMax * 100;                      nudInterestRate.Minimum = interestRateMin.Value;                      nudInterestRate.Maximum = interestRateMax.Value;                      lbLoanInterestRateMinMax.Text = string.Format("{0}{1}\r\n{2}{3}"'                          annualType + MultiLanguageStrings.GetString(Ressource.CreditContractForm' "min.Text")'                          ServicesHelper.ConvertNullableDecimalToString(interestRateMin.Value' false)'                          MultiLanguageStrings.GetString(Ressource.CreditContractForm' "max.Text")'                          ServicesHelper.ConvertNullableDecimalToString(interestRateMax.Value' false));                      nudInterestRate.Value = interestRateMin.Value;                  }              }              else // if it is an existing contract              {                  //if contract doesn't use a loan cycle                  if (credit.LoanCycle == null && credit.InterestRateMin == null && credit.InterestRateMax == null)                  {                      try                      {                          decimal? interestRateMin = creditProduct.InterestRateMin * 100;                          decimal? interestRateMax = creditProduct.InterestRateMax * 100;                          nudInterestRate.Minimum = interestRateMin.Value;                          nudInterestRate.Maximum = interestRateMax.Value;                          lbLoanInterestRateMinMax.Text = string.Format("{0}{1}\r\n{2}{3}"'                              annualType + MultiLanguageStrings.GetString(Ressource.CreditContractForm' "min.Text")'                              ServicesHelper.ConvertNullableDecimalToString(interestRateMin.Value' false)'                              MultiLanguageStrings.GetString(Ressource.CreditContractForm' "max.Text")'                              ServicesHelper.ConvertNullableDecimalToString(interestRateMax.Value' false));                          nudInterestRate.Value = credit.InterestRate * 100;                      }                      catch                      {                          nudInterestRate.Minimum = nudInterestRate.Maximum = credit.InterestRate * 100;                          nudInterestRate.Value = credit.InterestRate * 100;                      }                    }                  else //contract uses a loan cycle                  {                      try                      {                          decimal? interestRateMin = creditProduct.InterestRateMin * 100;                          decimal? interestRateMax = creditProduct.InterestRateMax * 100;                          nudInterestRate.Minimum = interestRateMin.Value;                          nudInterestRate.Maximum = interestRateMax.Value;                          lbLoanInterestRateMinMax.Text = string.Format("{0}{1}\r\n{2}{3}"'                              annualType + MultiLanguageStrings.GetString(Ressource.CreditContractForm' "min.Text")'                              ServicesHelper.ConvertNullableDecimalToString(interestRateMin.Value' false)'                              MultiLanguageStrings.GetString(Ressource.CreditContractForm' "max.Text")'                              ServicesHelper.ConvertNullableDecimalToString(interestRateMax.Value' false));                          nudInterestRate.Value = credit.InterestRate * 100;                      }                      catch                      {                          nudInterestRate.Minimum = nudInterestRate.Maximum = credit.InterestRate * 100;                          nudInterestRate.Value = credit.InterestRate * 100;                      }                  }              }
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializePackageInterestRate,The following statement contains a magic number: if (pForCreation) //if it is new contract              {                  nudInterestRate.Enabled = true;                  if (!creditProduct.UseLoanCycle) //if product doesn't use any loan cycles                  {                      if (!creditProduct.InterestRate.HasValue) //if interest rate is a range value                      {                          decimal? interestRateMin = creditProduct.InterestRateMin * 100;                          decimal? interestRateMax = creditProduct.InterestRateMax * 100;                          nudInterestRate.Minimum = interestRateMin.Value;                          nudInterestRate.Maximum = interestRateMax.Value;                          lbLoanInterestRateMinMax.Text = string.Format("{0}{1}\r\n{2}{3}"'                              annualType + MultiLanguageStrings.GetString(Ressource.CreditContractForm' "min.Text")'                              ServicesHelper.ConvertNullableDecimalToString(interestRateMin.Value' false)'                              MultiLanguageStrings.GetString(Ressource.CreditContractForm' "max.Text")'                              ServicesHelper.ConvertNullableDecimalToString(interestRateMax.Value' false));                          nudInterestRate.Value = interestRateMin.Value;                      }                      else// if interest rate is a fixed value                      {                          decimal? interestRate = creditProduct.InterestRate * 100;                          nudInterestRate.Minimum = nudInterestRate.Maximum = creditProduct.InterestRate.Value * 100;                          nudInterestRate.Value = interestRate.Value;                          lbLoanInterestRateMinMax.Text = string.Format("{0}{1}\r\n{2}{3}"'                              annualType + MultiLanguageStrings.GetString(Ressource.CreditContractForm' "min.Text")'                              ServicesHelper.ConvertNullableDecimalToString(interestRate.Value' false)'                              MultiLanguageStrings.GetString(Ressource.CreditContractForm' "max.Text")'                              ServicesHelper.ConvertNullableDecimalToString(interestRate.Value' false));                      }                  }                  else //if product uses a loan cycle                  {                      decimal? interestRateMin = creditProduct.InterestRateMin * 100;                      decimal? interestRateMax = creditProduct.InterestRateMax * 100;                      nudInterestRate.Minimum = interestRateMin.Value;                      nudInterestRate.Maximum = interestRateMax.Value;                      lbLoanInterestRateMinMax.Text = string.Format("{0}{1}\r\n{2}{3}"'                          annualType + MultiLanguageStrings.GetString(Ressource.CreditContractForm' "min.Text")'                          ServicesHelper.ConvertNullableDecimalToString(interestRateMin.Value' false)'                          MultiLanguageStrings.GetString(Ressource.CreditContractForm' "max.Text")'                          ServicesHelper.ConvertNullableDecimalToString(interestRateMax.Value' false));                      nudInterestRate.Value = interestRateMin.Value;                  }              }              else // if it is an existing contract              {                  //if contract doesn't use a loan cycle                  if (credit.LoanCycle == null && credit.InterestRateMin == null && credit.InterestRateMax == null)                  {                      try                      {                          decimal? interestRateMin = creditProduct.InterestRateMin * 100;                          decimal? interestRateMax = creditProduct.InterestRateMax * 100;                          nudInterestRate.Minimum = interestRateMin.Value;                          nudInterestRate.Maximum = interestRateMax.Value;                          lbLoanInterestRateMinMax.Text = string.Format("{0}{1}\r\n{2}{3}"'                              annualType + MultiLanguageStrings.GetString(Ressource.CreditContractForm' "min.Text")'                              ServicesHelper.ConvertNullableDecimalToString(interestRateMin.Value' false)'                              MultiLanguageStrings.GetString(Ressource.CreditContractForm' "max.Text")'                              ServicesHelper.ConvertNullableDecimalToString(interestRateMax.Value' false));                          nudInterestRate.Value = credit.InterestRate * 100;                      }                      catch                      {                          nudInterestRate.Minimum = nudInterestRate.Maximum = credit.InterestRate * 100;                          nudInterestRate.Value = credit.InterestRate * 100;                      }                    }                  else //contract uses a loan cycle                  {                      try                      {                          decimal? interestRateMin = creditProduct.InterestRateMin * 100;                          decimal? interestRateMax = creditProduct.InterestRateMax * 100;                          nudInterestRate.Minimum = interestRateMin.Value;                          nudInterestRate.Maximum = interestRateMax.Value;                          lbLoanInterestRateMinMax.Text = string.Format("{0}{1}\r\n{2}{3}"'                              annualType + MultiLanguageStrings.GetString(Ressource.CreditContractForm' "min.Text")'                              ServicesHelper.ConvertNullableDecimalToString(interestRateMin.Value' false)'                              MultiLanguageStrings.GetString(Ressource.CreditContractForm' "max.Text")'                              ServicesHelper.ConvertNullableDecimalToString(interestRateMax.Value' false));                          nudInterestRate.Value = credit.InterestRate * 100;                      }                      catch                      {                          nudInterestRate.Minimum = nudInterestRate.Maximum = credit.InterestRate * 100;                          nudInterestRate.Value = credit.InterestRate * 100;                      }                  }              }
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializePackageInterestRate,The following statement contains a magic number: if (pForCreation) //if it is new contract              {                  nudInterestRate.Enabled = true;                  if (!creditProduct.UseLoanCycle) //if product doesn't use any loan cycles                  {                      if (!creditProduct.InterestRate.HasValue) //if interest rate is a range value                      {                          decimal? interestRateMin = creditProduct.InterestRateMin * 100;                          decimal? interestRateMax = creditProduct.InterestRateMax * 100;                          nudInterestRate.Minimum = interestRateMin.Value;                          nudInterestRate.Maximum = interestRateMax.Value;                          lbLoanInterestRateMinMax.Text = string.Format("{0}{1}\r\n{2}{3}"'                              annualType + MultiLanguageStrings.GetString(Ressource.CreditContractForm' "min.Text")'                              ServicesHelper.ConvertNullableDecimalToString(interestRateMin.Value' false)'                              MultiLanguageStrings.GetString(Ressource.CreditContractForm' "max.Text")'                              ServicesHelper.ConvertNullableDecimalToString(interestRateMax.Value' false));                          nudInterestRate.Value = interestRateMin.Value;                      }                      else// if interest rate is a fixed value                      {                          decimal? interestRate = creditProduct.InterestRate * 100;                          nudInterestRate.Minimum = nudInterestRate.Maximum = creditProduct.InterestRate.Value * 100;                          nudInterestRate.Value = interestRate.Value;                          lbLoanInterestRateMinMax.Text = string.Format("{0}{1}\r\n{2}{3}"'                              annualType + MultiLanguageStrings.GetString(Ressource.CreditContractForm' "min.Text")'                              ServicesHelper.ConvertNullableDecimalToString(interestRate.Value' false)'                              MultiLanguageStrings.GetString(Ressource.CreditContractForm' "max.Text")'                              ServicesHelper.ConvertNullableDecimalToString(interestRate.Value' false));                      }                  }                  else //if product uses a loan cycle                  {                      decimal? interestRateMin = creditProduct.InterestRateMin * 100;                      decimal? interestRateMax = creditProduct.InterestRateMax * 100;                      nudInterestRate.Minimum = interestRateMin.Value;                      nudInterestRate.Maximum = interestRateMax.Value;                      lbLoanInterestRateMinMax.Text = string.Format("{0}{1}\r\n{2}{3}"'                          annualType + MultiLanguageStrings.GetString(Ressource.CreditContractForm' "min.Text")'                          ServicesHelper.ConvertNullableDecimalToString(interestRateMin.Value' false)'                          MultiLanguageStrings.GetString(Ressource.CreditContractForm' "max.Text")'                          ServicesHelper.ConvertNullableDecimalToString(interestRateMax.Value' false));                      nudInterestRate.Value = interestRateMin.Value;                  }              }              else // if it is an existing contract              {                  //if contract doesn't use a loan cycle                  if (credit.LoanCycle == null && credit.InterestRateMin == null && credit.InterestRateMax == null)                  {                      try                      {                          decimal? interestRateMin = creditProduct.InterestRateMin * 100;                          decimal? interestRateMax = creditProduct.InterestRateMax * 100;                          nudInterestRate.Minimum = interestRateMin.Value;                          nudInterestRate.Maximum = interestRateMax.Value;                          lbLoanInterestRateMinMax.Text = string.Format("{0}{1}\r\n{2}{3}"'                              annualType + MultiLanguageStrings.GetString(Ressource.CreditContractForm' "min.Text")'                              ServicesHelper.ConvertNullableDecimalToString(interestRateMin.Value' false)'                              MultiLanguageStrings.GetString(Ressource.CreditContractForm' "max.Text")'                              ServicesHelper.ConvertNullableDecimalToString(interestRateMax.Value' false));                          nudInterestRate.Value = credit.InterestRate * 100;                      }                      catch                      {                          nudInterestRate.Minimum = nudInterestRate.Maximum = credit.InterestRate * 100;                          nudInterestRate.Value = credit.InterestRate * 100;                      }                    }                  else //contract uses a loan cycle                  {                      try                      {                          decimal? interestRateMin = creditProduct.InterestRateMin * 100;                          decimal? interestRateMax = creditProduct.InterestRateMax * 100;                          nudInterestRate.Minimum = interestRateMin.Value;                          nudInterestRate.Maximum = interestRateMax.Value;                          lbLoanInterestRateMinMax.Text = string.Format("{0}{1}\r\n{2}{3}"'                              annualType + MultiLanguageStrings.GetString(Ressource.CreditContractForm' "min.Text")'                              ServicesHelper.ConvertNullableDecimalToString(interestRateMin.Value' false)'                              MultiLanguageStrings.GetString(Ressource.CreditContractForm' "max.Text")'                              ServicesHelper.ConvertNullableDecimalToString(interestRateMax.Value' false));                          nudInterestRate.Value = credit.InterestRate * 100;                      }                      catch                      {                          nudInterestRate.Minimum = nudInterestRate.Maximum = credit.InterestRate * 100;                          nudInterestRate.Value = credit.InterestRate * 100;                      }                  }              }
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializePackageInterestRate,The following statement contains a magic number: if (pForCreation) //if it is new contract              {                  nudInterestRate.Enabled = true;                  if (!creditProduct.UseLoanCycle) //if product doesn't use any loan cycles                  {                      if (!creditProduct.InterestRate.HasValue) //if interest rate is a range value                      {                          decimal? interestRateMin = creditProduct.InterestRateMin * 100;                          decimal? interestRateMax = creditProduct.InterestRateMax * 100;                          nudInterestRate.Minimum = interestRateMin.Value;                          nudInterestRate.Maximum = interestRateMax.Value;                          lbLoanInterestRateMinMax.Text = string.Format("{0}{1}\r\n{2}{3}"'                              annualType + MultiLanguageStrings.GetString(Ressource.CreditContractForm' "min.Text")'                              ServicesHelper.ConvertNullableDecimalToString(interestRateMin.Value' false)'                              MultiLanguageStrings.GetString(Ressource.CreditContractForm' "max.Text")'                              ServicesHelper.ConvertNullableDecimalToString(interestRateMax.Value' false));                          nudInterestRate.Value = interestRateMin.Value;                      }                      else// if interest rate is a fixed value                      {                          decimal? interestRate = creditProduct.InterestRate * 100;                          nudInterestRate.Minimum = nudInterestRate.Maximum = creditProduct.InterestRate.Value * 100;                          nudInterestRate.Value = interestRate.Value;                          lbLoanInterestRateMinMax.Text = string.Format("{0}{1}\r\n{2}{3}"'                              annualType + MultiLanguageStrings.GetString(Ressource.CreditContractForm' "min.Text")'                              ServicesHelper.ConvertNullableDecimalToString(interestRate.Value' false)'                              MultiLanguageStrings.GetString(Ressource.CreditContractForm' "max.Text")'                              ServicesHelper.ConvertNullableDecimalToString(interestRate.Value' false));                      }                  }                  else //if product uses a loan cycle                  {                      decimal? interestRateMin = creditProduct.InterestRateMin * 100;                      decimal? interestRateMax = creditProduct.InterestRateMax * 100;                      nudInterestRate.Minimum = interestRateMin.Value;                      nudInterestRate.Maximum = interestRateMax.Value;                      lbLoanInterestRateMinMax.Text = string.Format("{0}{1}\r\n{2}{3}"'                          annualType + MultiLanguageStrings.GetString(Ressource.CreditContractForm' "min.Text")'                          ServicesHelper.ConvertNullableDecimalToString(interestRateMin.Value' false)'                          MultiLanguageStrings.GetString(Ressource.CreditContractForm' "max.Text")'                          ServicesHelper.ConvertNullableDecimalToString(interestRateMax.Value' false));                      nudInterestRate.Value = interestRateMin.Value;                  }              }              else // if it is an existing contract              {                  //if contract doesn't use a loan cycle                  if (credit.LoanCycle == null && credit.InterestRateMin == null && credit.InterestRateMax == null)                  {                      try                      {                          decimal? interestRateMin = creditProduct.InterestRateMin * 100;                          decimal? interestRateMax = creditProduct.InterestRateMax * 100;                          nudInterestRate.Minimum = interestRateMin.Value;                          nudInterestRate.Maximum = interestRateMax.Value;                          lbLoanInterestRateMinMax.Text = string.Format("{0}{1}\r\n{2}{3}"'                              annualType + MultiLanguageStrings.GetString(Ressource.CreditContractForm' "min.Text")'                              ServicesHelper.ConvertNullableDecimalToString(interestRateMin.Value' false)'                              MultiLanguageStrings.GetString(Ressource.CreditContractForm' "max.Text")'                              ServicesHelper.ConvertNullableDecimalToString(interestRateMax.Value' false));                          nudInterestRate.Value = credit.InterestRate * 100;                      }                      catch                      {                          nudInterestRate.Minimum = nudInterestRate.Maximum = credit.InterestRate * 100;                          nudInterestRate.Value = credit.InterestRate * 100;                      }                    }                  else //contract uses a loan cycle                  {                      try                      {                          decimal? interestRateMin = creditProduct.InterestRateMin * 100;                          decimal? interestRateMax = creditProduct.InterestRateMax * 100;                          nudInterestRate.Minimum = interestRateMin.Value;                          nudInterestRate.Maximum = interestRateMax.Value;                          lbLoanInterestRateMinMax.Text = string.Format("{0}{1}\r\n{2}{3}"'                              annualType + MultiLanguageStrings.GetString(Ressource.CreditContractForm' "min.Text")'                              ServicesHelper.ConvertNullableDecimalToString(interestRateMin.Value' false)'                              MultiLanguageStrings.GetString(Ressource.CreditContractForm' "max.Text")'                              ServicesHelper.ConvertNullableDecimalToString(interestRateMax.Value' false));                          nudInterestRate.Value = credit.InterestRate * 100;                      }                      catch                      {                          nudInterestRate.Minimum = nudInterestRate.Maximum = credit.InterestRate * 100;                          nudInterestRate.Value = credit.InterestRate * 100;                      }                  }              }
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializePackageInterestRate,The following statement contains a magic number: if (pForCreation) //if it is new contract              {                  nudInterestRate.Enabled = true;                  if (!creditProduct.UseLoanCycle) //if product doesn't use any loan cycles                  {                      if (!creditProduct.InterestRate.HasValue) //if interest rate is a range value                      {                          decimal? interestRateMin = creditProduct.InterestRateMin * 100;                          decimal? interestRateMax = creditProduct.InterestRateMax * 100;                          nudInterestRate.Minimum = interestRateMin.Value;                          nudInterestRate.Maximum = interestRateMax.Value;                          lbLoanInterestRateMinMax.Text = string.Format("{0}{1}\r\n{2}{3}"'                              annualType + MultiLanguageStrings.GetString(Ressource.CreditContractForm' "min.Text")'                              ServicesHelper.ConvertNullableDecimalToString(interestRateMin.Value' false)'                              MultiLanguageStrings.GetString(Ressource.CreditContractForm' "max.Text")'                              ServicesHelper.ConvertNullableDecimalToString(interestRateMax.Value' false));                          nudInterestRate.Value = interestRateMin.Value;                      }                      else// if interest rate is a fixed value                      {                          decimal? interestRate = creditProduct.InterestRate * 100;                          nudInterestRate.Minimum = nudInterestRate.Maximum = creditProduct.InterestRate.Value * 100;                          nudInterestRate.Value = interestRate.Value;                          lbLoanInterestRateMinMax.Text = string.Format("{0}{1}\r\n{2}{3}"'                              annualType + MultiLanguageStrings.GetString(Ressource.CreditContractForm' "min.Text")'                              ServicesHelper.ConvertNullableDecimalToString(interestRate.Value' false)'                              MultiLanguageStrings.GetString(Ressource.CreditContractForm' "max.Text")'                              ServicesHelper.ConvertNullableDecimalToString(interestRate.Value' false));                      }                  }                  else //if product uses a loan cycle                  {                      decimal? interestRateMin = creditProduct.InterestRateMin * 100;                      decimal? interestRateMax = creditProduct.InterestRateMax * 100;                      nudInterestRate.Minimum = interestRateMin.Value;                      nudInterestRate.Maximum = interestRateMax.Value;                      lbLoanInterestRateMinMax.Text = string.Format("{0}{1}\r\n{2}{3}"'                          annualType + MultiLanguageStrings.GetString(Ressource.CreditContractForm' "min.Text")'                          ServicesHelper.ConvertNullableDecimalToString(interestRateMin.Value' false)'                          MultiLanguageStrings.GetString(Ressource.CreditContractForm' "max.Text")'                          ServicesHelper.ConvertNullableDecimalToString(interestRateMax.Value' false));                      nudInterestRate.Value = interestRateMin.Value;                  }              }              else // if it is an existing contract              {                  //if contract doesn't use a loan cycle                  if (credit.LoanCycle == null && credit.InterestRateMin == null && credit.InterestRateMax == null)                  {                      try                      {                          decimal? interestRateMin = creditProduct.InterestRateMin * 100;                          decimal? interestRateMax = creditProduct.InterestRateMax * 100;                          nudInterestRate.Minimum = interestRateMin.Value;                          nudInterestRate.Maximum = interestRateMax.Value;                          lbLoanInterestRateMinMax.Text = string.Format("{0}{1}\r\n{2}{3}"'                              annualType + MultiLanguageStrings.GetString(Ressource.CreditContractForm' "min.Text")'                              ServicesHelper.ConvertNullableDecimalToString(interestRateMin.Value' false)'                              MultiLanguageStrings.GetString(Ressource.CreditContractForm' "max.Text")'                              ServicesHelper.ConvertNullableDecimalToString(interestRateMax.Value' false));                          nudInterestRate.Value = credit.InterestRate * 100;                      }                      catch                      {                          nudInterestRate.Minimum = nudInterestRate.Maximum = credit.InterestRate * 100;                          nudInterestRate.Value = credit.InterestRate * 100;                      }                    }                  else //contract uses a loan cycle                  {                      try                      {                          decimal? interestRateMin = creditProduct.InterestRateMin * 100;                          decimal? interestRateMax = creditProduct.InterestRateMax * 100;                          nudInterestRate.Minimum = interestRateMin.Value;                          nudInterestRate.Maximum = interestRateMax.Value;                          lbLoanInterestRateMinMax.Text = string.Format("{0}{1}\r\n{2}{3}"'                              annualType + MultiLanguageStrings.GetString(Ressource.CreditContractForm' "min.Text")'                              ServicesHelper.ConvertNullableDecimalToString(interestRateMin.Value' false)'                              MultiLanguageStrings.GetString(Ressource.CreditContractForm' "max.Text")'                              ServicesHelper.ConvertNullableDecimalToString(interestRateMax.Value' false));                          nudInterestRate.Value = credit.InterestRate * 100;                      }                      catch                      {                          nudInterestRate.Minimum = nudInterestRate.Maximum = credit.InterestRate * 100;                          nudInterestRate.Value = credit.InterestRate * 100;                      }                  }              }
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializePackageInterestRate,The following statement contains a magic number: if (pForCreation) //if it is new contract              {                  nudInterestRate.Enabled = true;                  if (!creditProduct.UseLoanCycle) //if product doesn't use any loan cycles                  {                      if (!creditProduct.InterestRate.HasValue) //if interest rate is a range value                      {                          decimal? interestRateMin = creditProduct.InterestRateMin * 100;                          decimal? interestRateMax = creditProduct.InterestRateMax * 100;                          nudInterestRate.Minimum = interestRateMin.Value;                          nudInterestRate.Maximum = interestRateMax.Value;                          lbLoanInterestRateMinMax.Text = string.Format("{0}{1}\r\n{2}{3}"'                              annualType + MultiLanguageStrings.GetString(Ressource.CreditContractForm' "min.Text")'                              ServicesHelper.ConvertNullableDecimalToString(interestRateMin.Value' false)'                              MultiLanguageStrings.GetString(Ressource.CreditContractForm' "max.Text")'                              ServicesHelper.ConvertNullableDecimalToString(interestRateMax.Value' false));                          nudInterestRate.Value = interestRateMin.Value;                      }                      else// if interest rate is a fixed value                      {                          decimal? interestRate = creditProduct.InterestRate * 100;                          nudInterestRate.Minimum = nudInterestRate.Maximum = creditProduct.InterestRate.Value * 100;                          nudInterestRate.Value = interestRate.Value;                          lbLoanInterestRateMinMax.Text = string.Format("{0}{1}\r\n{2}{3}"'                              annualType + MultiLanguageStrings.GetString(Ressource.CreditContractForm' "min.Text")'                              ServicesHelper.ConvertNullableDecimalToString(interestRate.Value' false)'                              MultiLanguageStrings.GetString(Ressource.CreditContractForm' "max.Text")'                              ServicesHelper.ConvertNullableDecimalToString(interestRate.Value' false));                      }                  }                  else //if product uses a loan cycle                  {                      decimal? interestRateMin = creditProduct.InterestRateMin * 100;                      decimal? interestRateMax = creditProduct.InterestRateMax * 100;                      nudInterestRate.Minimum = interestRateMin.Value;                      nudInterestRate.Maximum = interestRateMax.Value;                      lbLoanInterestRateMinMax.Text = string.Format("{0}{1}\r\n{2}{3}"'                          annualType + MultiLanguageStrings.GetString(Ressource.CreditContractForm' "min.Text")'                          ServicesHelper.ConvertNullableDecimalToString(interestRateMin.Value' false)'                          MultiLanguageStrings.GetString(Ressource.CreditContractForm' "max.Text")'                          ServicesHelper.ConvertNullableDecimalToString(interestRateMax.Value' false));                      nudInterestRate.Value = interestRateMin.Value;                  }              }              else // if it is an existing contract              {                  //if contract doesn't use a loan cycle                  if (credit.LoanCycle == null && credit.InterestRateMin == null && credit.InterestRateMax == null)                  {                      try                      {                          decimal? interestRateMin = creditProduct.InterestRateMin * 100;                          decimal? interestRateMax = creditProduct.InterestRateMax * 100;                          nudInterestRate.Minimum = interestRateMin.Value;                          nudInterestRate.Maximum = interestRateMax.Value;                          lbLoanInterestRateMinMax.Text = string.Format("{0}{1}\r\n{2}{3}"'                              annualType + MultiLanguageStrings.GetString(Ressource.CreditContractForm' "min.Text")'                              ServicesHelper.ConvertNullableDecimalToString(interestRateMin.Value' false)'                              MultiLanguageStrings.GetString(Ressource.CreditContractForm' "max.Text")'                              ServicesHelper.ConvertNullableDecimalToString(interestRateMax.Value' false));                          nudInterestRate.Value = credit.InterestRate * 100;                      }                      catch                      {                          nudInterestRate.Minimum = nudInterestRate.Maximum = credit.InterestRate * 100;                          nudInterestRate.Value = credit.InterestRate * 100;                      }                    }                  else //contract uses a loan cycle                  {                      try                      {                          decimal? interestRateMin = creditProduct.InterestRateMin * 100;                          decimal? interestRateMax = creditProduct.InterestRateMax * 100;                          nudInterestRate.Minimum = interestRateMin.Value;                          nudInterestRate.Maximum = interestRateMax.Value;                          lbLoanInterestRateMinMax.Text = string.Format("{0}{1}\r\n{2}{3}"'                              annualType + MultiLanguageStrings.GetString(Ressource.CreditContractForm' "min.Text")'                              ServicesHelper.ConvertNullableDecimalToString(interestRateMin.Value' false)'                              MultiLanguageStrings.GetString(Ressource.CreditContractForm' "max.Text")'                              ServicesHelper.ConvertNullableDecimalToString(interestRateMax.Value' false));                          nudInterestRate.Value = credit.InterestRate * 100;                      }                      catch                      {                          nudInterestRate.Minimum = nudInterestRate.Maximum = credit.InterestRate * 100;                          nudInterestRate.Value = credit.InterestRate * 100;                      }                  }              }
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeAmount,The following statement contains a magic number: if (pForCreation) //if it is new contract              {                  nudLoanAmount.DecimalPlaces = (credit.Product.Currency.UseCents || _credit.UseCents) ? 2 : 0;                  if (!credit.Product.UseLoanCycle) //If product doesn't use any loan cycle                  {                      if (!credit.Product.Amount.HasValue) //if credit amount is a range value                      {                          try                          {                              _amountValueRange = new DecimalValueRange(credit.Product.AmountMin' credit.Product.AmountMax);                              nudLoanAmount.Enabled = true;                              labelLoanAmountMinMax.SetRangeText(_amountValueRange.Min' _amountValueRange.Max);                              nudLoanAmount.Minimum = _amountValueRange.Min.Value;                              nudLoanAmount.Maximum = _amountValueRange.Max.Value;                              nudLoanAmount.Value = _amountValueRange.Min.Value;                          }                          catch                          {                              nudLoanAmount.Minimum = nudLoanAmount.Maximum = credit.Amount.Value;                              nudLoanAmount.Value = credit.Amount.Value;                          }                      }                      else //if credit amount is a fixed value                      {                          try                          {                              _amountValueRange = new DecimalValueRange(credit.Product.Amount);                              OCurrency valueCurrency = _amountValueRange.Value;                              decimal value = valueCurrency.Value;                              labelLoanAmountMinMax.SetRangeText(valueCurrency);                              nudLoanAmount.Minimum = value;                              nudLoanAmount.Maximum = value;                              nudLoanAmount.Value = value;                              nudLoanAmount.Enabled = false;                          }                          catch                          {                              nudLoanAmount.Minimum = nudLoanAmount.Maximum = credit.Amount.Value;                              nudLoanAmount.Value = credit.Amount.Value;                          }                      }                  }                  else //if product uses loan cycles                  {                      _amountValueRange = new DecimalValueRange(credit.Product.AmountMin' credit.Product.AmountMax);                      nudLoanAmount.Enabled = true;                      labelLoanAmountMinMax.SetRangeText(_amountValueRange.Min' _amountValueRange.Max);                      nudLoanAmount.Minimum = _amountValueRange.Min.Value;                      nudLoanAmount.Maximum = _amountValueRange.Max.Value;                      nudLoanAmount.Value = _amountValueRange.Min.Value;                  }              }              else //if it is an existing contract              {                  nudLoanAmount.DecimalPlaces = (credit.Product.Currency.UseCents) ? 2 : 0;                    if (credit.LoanCycle == null && !credit.AmountMin.HasValue && !credit.AmountMax.HasValue)//if contract doesn't use any loan cycles                  {                      if (credit.Product.Amount.HasValue)//if credit amount is a fixed value                      {                          try                          {                              _amountValueRange = new DecimalValueRange(credit.Product.Amount);                              labelLoanAmountMinMax.SetRangeText(_amountValueRange.Value);                              nudLoanAmount.Minimum = nudLoanAmount.Maximum = _amountValueRange.Value.Value;                          }                          catch (Exception)                          {                              nudLoanAmount.Minimum = nudLoanAmount.Maximum = credit.Amount.Value;                              nudLoanAmount.Value = credit.Amount.Value;                          }                        }                      else //if credit amount is range vale                      {                          try                          {                              _amountValueRange = new DecimalValueRange(credit.Product.AmountMin' credit.Product.AmountMax);                              labelLoanAmountMinMax.SetRangeText(_amountValueRange.Min' _amountValueRange.Max);                              nudLoanAmount.Minimum = _amountValueRange.Min.Value;                              nudLoanAmount.Maximum = _amountValueRange.Max.Value;                              nudLoanAmount.Value = credit.Amount.Value;                          }                          catch                          {                              nudLoanAmount.Minimum = nudLoanAmount.Maximum = credit.Amount.Value;                              nudLoanAmount.Value = credit.Amount.Value;                          }                      }                  }                  else //if product  uses loan cycles                  {                      try                      {                          _amountValueRange = new DecimalValueRange(credit.AmountMin' credit.AmountMax);                          nudLoanAmount.Enabled = true;                          labelLoanAmountMinMax.SetRangeText(_amountValueRange.Min' _amountValueRange.Max);                          nudLoanAmount.Minimum = _amountValueRange.Min.Value;                          nudLoanAmount.Maximum = _amountValueRange.Max.Value;                          nudLoanAmount.Value = credit.Amount.Value;                      }                      catch                      {                          nudLoanAmount.Minimum = nudLoanAmount.Maximum = credit.Amount.Value;                          nudLoanAmount.Value = credit.Amount.Value;                      }                  }              }
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeAmount,The following statement contains a magic number: if (pForCreation) //if it is new contract              {                  nudLoanAmount.DecimalPlaces = (credit.Product.Currency.UseCents || _credit.UseCents) ? 2 : 0;                  if (!credit.Product.UseLoanCycle) //If product doesn't use any loan cycle                  {                      if (!credit.Product.Amount.HasValue) //if credit amount is a range value                      {                          try                          {                              _amountValueRange = new DecimalValueRange(credit.Product.AmountMin' credit.Product.AmountMax);                              nudLoanAmount.Enabled = true;                              labelLoanAmountMinMax.SetRangeText(_amountValueRange.Min' _amountValueRange.Max);                              nudLoanAmount.Minimum = _amountValueRange.Min.Value;                              nudLoanAmount.Maximum = _amountValueRange.Max.Value;                              nudLoanAmount.Value = _amountValueRange.Min.Value;                          }                          catch                          {                              nudLoanAmount.Minimum = nudLoanAmount.Maximum = credit.Amount.Value;                              nudLoanAmount.Value = credit.Amount.Value;                          }                      }                      else //if credit amount is a fixed value                      {                          try                          {                              _amountValueRange = new DecimalValueRange(credit.Product.Amount);                              OCurrency valueCurrency = _amountValueRange.Value;                              decimal value = valueCurrency.Value;                              labelLoanAmountMinMax.SetRangeText(valueCurrency);                              nudLoanAmount.Minimum = value;                              nudLoanAmount.Maximum = value;                              nudLoanAmount.Value = value;                              nudLoanAmount.Enabled = false;                          }                          catch                          {                              nudLoanAmount.Minimum = nudLoanAmount.Maximum = credit.Amount.Value;                              nudLoanAmount.Value = credit.Amount.Value;                          }                      }                  }                  else //if product uses loan cycles                  {                      _amountValueRange = new DecimalValueRange(credit.Product.AmountMin' credit.Product.AmountMax);                      nudLoanAmount.Enabled = true;                      labelLoanAmountMinMax.SetRangeText(_amountValueRange.Min' _amountValueRange.Max);                      nudLoanAmount.Minimum = _amountValueRange.Min.Value;                      nudLoanAmount.Maximum = _amountValueRange.Max.Value;                      nudLoanAmount.Value = _amountValueRange.Min.Value;                  }              }              else //if it is an existing contract              {                  nudLoanAmount.DecimalPlaces = (credit.Product.Currency.UseCents) ? 2 : 0;                    if (credit.LoanCycle == null && !credit.AmountMin.HasValue && !credit.AmountMax.HasValue)//if contract doesn't use any loan cycles                  {                      if (credit.Product.Amount.HasValue)//if credit amount is a fixed value                      {                          try                          {                              _amountValueRange = new DecimalValueRange(credit.Product.Amount);                              labelLoanAmountMinMax.SetRangeText(_amountValueRange.Value);                              nudLoanAmount.Minimum = nudLoanAmount.Maximum = _amountValueRange.Value.Value;                          }                          catch (Exception)                          {                              nudLoanAmount.Minimum = nudLoanAmount.Maximum = credit.Amount.Value;                              nudLoanAmount.Value = credit.Amount.Value;                          }                        }                      else //if credit amount is range vale                      {                          try                          {                              _amountValueRange = new DecimalValueRange(credit.Product.AmountMin' credit.Product.AmountMax);                              labelLoanAmountMinMax.SetRangeText(_amountValueRange.Min' _amountValueRange.Max);                              nudLoanAmount.Minimum = _amountValueRange.Min.Value;                              nudLoanAmount.Maximum = _amountValueRange.Max.Value;                              nudLoanAmount.Value = credit.Amount.Value;                          }                          catch                          {                              nudLoanAmount.Minimum = nudLoanAmount.Maximum = credit.Amount.Value;                              nudLoanAmount.Value = credit.Amount.Value;                          }                      }                  }                  else //if product  uses loan cycles                  {                      try                      {                          _amountValueRange = new DecimalValueRange(credit.AmountMin' credit.AmountMax);                          nudLoanAmount.Enabled = true;                          labelLoanAmountMinMax.SetRangeText(_amountValueRange.Min' _amountValueRange.Max);                          nudLoanAmount.Minimum = _amountValueRange.Min.Value;                          nudLoanAmount.Maximum = _amountValueRange.Max.Value;                          nudLoanAmount.Value = credit.Amount.Value;                      }                      catch                      {                          nudLoanAmount.Minimum = nudLoanAmount.Maximum = credit.Amount.Value;                          nudLoanAmount.Value = credit.Amount.Value;                      }                  }              }
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,GetScheduleType,The following statement contains a magic number: switch (_scheduleTypeComboBox.SelectedIndex)              {                  case 0:                      return OLoanTypes.Flat;                    case 1:                      return OLoanTypes.DecliningFixedPrincipal;                    case 2:                      return OLoanTypes.DecliningFixedInstallments;                    default:                      return OLoanTypes.CustomLoanType;              }
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,GetScriptName,The following statement contains a magic number: if (_scheduleTypeComboBox.SelectedIndex >= 3)              {                  return _scheduleTypeComboBox.Text;              }
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,buttonLoanDisbursment_Click,The following statement contains a magic number: if (_credit.Product.UseGuarantorCollateral)              {                  if (!_credit.Product.SetSeparateGuarantorCollateral)                  {                      if (_totalCollateralAmount + _totalGuarantorAmount <                          _credit.Amount.Value * _credit.Product.PercentageTotalGuarantorCollateral / 100)                      {                          var message = string.Format(ML.GetString(Ressource.ClientForm' "CollateralGuarantorAmountIsNotEnough")'                                          ServicesHelper.ConvertDecimalToString(_credit.Amount.Value * _credit.Product.PercentageTotalGuarantorCollateral / 100)'                                          _credit.Product.PercentageTotalGuarantorCollateral);                          Fail(message);                          return;                      }                  }                  else                  {                      if (_totalGuarantorAmount < _credit.Amount.Value * _credit.Product.PercentageSeparateGuarantour / 100)                      {                          var message = string.Format(ML.GetString(Ressource.ClientForm' "GuarantorAmountIsNotEnough")'                                          ServicesHelper.ConvertDecimalToString(_credit.Amount.Value * _credit.Product.PercentageSeparateGuarantour / 100)'                                          _credit.Product.PercentageSeparateGuarantour);                          Fail(message);                          return;                      }                        if (_totalCollateralAmount < _credit.Amount.Value * _credit.Product.PercentageSeparateCollateral / 100)                      {                          var message = string.Format(ML.GetString(Ressource.ClientForm' "CollateralAmountIsNotEnough")'                                          ServicesHelper.ConvertDecimalToString(_credit.Amount.Value * _credit.Product.PercentageSeparateCollateral / 100)'                                          _credit.Product.PercentageSeparateCollateral);                          Fail(message);                            return;                      }                  }              }
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,buttonLoanDisbursment_Click,The following statement contains a magic number: if (_credit.Product.UseGuarantorCollateral)              {                  if (!_credit.Product.SetSeparateGuarantorCollateral)                  {                      if (_totalCollateralAmount + _totalGuarantorAmount <                          _credit.Amount.Value * _credit.Product.PercentageTotalGuarantorCollateral / 100)                      {                          var message = string.Format(ML.GetString(Ressource.ClientForm' "CollateralGuarantorAmountIsNotEnough")'                                          ServicesHelper.ConvertDecimalToString(_credit.Amount.Value * _credit.Product.PercentageTotalGuarantorCollateral / 100)'                                          _credit.Product.PercentageTotalGuarantorCollateral);                          Fail(message);                          return;                      }                  }                  else                  {                      if (_totalGuarantorAmount < _credit.Amount.Value * _credit.Product.PercentageSeparateGuarantour / 100)                      {                          var message = string.Format(ML.GetString(Ressource.ClientForm' "GuarantorAmountIsNotEnough")'                                          ServicesHelper.ConvertDecimalToString(_credit.Amount.Value * _credit.Product.PercentageSeparateGuarantour / 100)'                                          _credit.Product.PercentageSeparateGuarantour);                          Fail(message);                          return;                      }                        if (_totalCollateralAmount < _credit.Amount.Value * _credit.Product.PercentageSeparateCollateral / 100)                      {                          var message = string.Format(ML.GetString(Ressource.ClientForm' "CollateralAmountIsNotEnough")'                                          ServicesHelper.ConvertDecimalToString(_credit.Amount.Value * _credit.Product.PercentageSeparateCollateral / 100)'                                          _credit.Product.PercentageSeparateCollateral);                          Fail(message);                            return;                      }                  }              }
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,buttonLoanDisbursment_Click,The following statement contains a magic number: if (_credit.Product.UseGuarantorCollateral)              {                  if (!_credit.Product.SetSeparateGuarantorCollateral)                  {                      if (_totalCollateralAmount + _totalGuarantorAmount <                          _credit.Amount.Value * _credit.Product.PercentageTotalGuarantorCollateral / 100)                      {                          var message = string.Format(ML.GetString(Ressource.ClientForm' "CollateralGuarantorAmountIsNotEnough")'                                          ServicesHelper.ConvertDecimalToString(_credit.Amount.Value * _credit.Product.PercentageTotalGuarantorCollateral / 100)'                                          _credit.Product.PercentageTotalGuarantorCollateral);                          Fail(message);                          return;                      }                  }                  else                  {                      if (_totalGuarantorAmount < _credit.Amount.Value * _credit.Product.PercentageSeparateGuarantour / 100)                      {                          var message = string.Format(ML.GetString(Ressource.ClientForm' "GuarantorAmountIsNotEnough")'                                          ServicesHelper.ConvertDecimalToString(_credit.Amount.Value * _credit.Product.PercentageSeparateGuarantour / 100)'                                          _credit.Product.PercentageSeparateGuarantour);                          Fail(message);                          return;                      }                        if (_totalCollateralAmount < _credit.Amount.Value * _credit.Product.PercentageSeparateCollateral / 100)                      {                          var message = string.Format(ML.GetString(Ressource.ClientForm' "CollateralAmountIsNotEnough")'                                          ServicesHelper.ConvertDecimalToString(_credit.Amount.Value * _credit.Product.PercentageSeparateCollateral / 100)'                                          _credit.Product.PercentageSeparateCollateral);                          Fail(message);                            return;                      }                  }              }
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,buttonLoanDisbursment_Click,The following statement contains a magic number: if (_credit.Product.UseGuarantorCollateral)              {                  if (!_credit.Product.SetSeparateGuarantorCollateral)                  {                      if (_totalCollateralAmount + _totalGuarantorAmount <                          _credit.Amount.Value * _credit.Product.PercentageTotalGuarantorCollateral / 100)                      {                          var message = string.Format(ML.GetString(Ressource.ClientForm' "CollateralGuarantorAmountIsNotEnough")'                                          ServicesHelper.ConvertDecimalToString(_credit.Amount.Value * _credit.Product.PercentageTotalGuarantorCollateral / 100)'                                          _credit.Product.PercentageTotalGuarantorCollateral);                          Fail(message);                          return;                      }                  }                  else                  {                      if (_totalGuarantorAmount < _credit.Amount.Value * _credit.Product.PercentageSeparateGuarantour / 100)                      {                          var message = string.Format(ML.GetString(Ressource.ClientForm' "GuarantorAmountIsNotEnough")'                                          ServicesHelper.ConvertDecimalToString(_credit.Amount.Value * _credit.Product.PercentageSeparateGuarantour / 100)'                                          _credit.Product.PercentageSeparateGuarantour);                          Fail(message);                          return;                      }                        if (_totalCollateralAmount < _credit.Amount.Value * _credit.Product.PercentageSeparateCollateral / 100)                      {                          var message = string.Format(ML.GetString(Ressource.ClientForm' "CollateralAmountIsNotEnough")'                                          ServicesHelper.ConvertDecimalToString(_credit.Amount.Value * _credit.Product.PercentageSeparateCollateral / 100)'                                          _credit.Product.PercentageSeparateCollateral);                          Fail(message);                            return;                      }                  }              }
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,buttonLoanDisbursment_Click,The following statement contains a magic number: if (_credit.Product.UseGuarantorCollateral)              {                  if (!_credit.Product.SetSeparateGuarantorCollateral)                  {                      if (_totalCollateralAmount + _totalGuarantorAmount <                          _credit.Amount.Value * _credit.Product.PercentageTotalGuarantorCollateral / 100)                      {                          var message = string.Format(ML.GetString(Ressource.ClientForm' "CollateralGuarantorAmountIsNotEnough")'                                          ServicesHelper.ConvertDecimalToString(_credit.Amount.Value * _credit.Product.PercentageTotalGuarantorCollateral / 100)'                                          _credit.Product.PercentageTotalGuarantorCollateral);                          Fail(message);                          return;                      }                  }                  else                  {                      if (_totalGuarantorAmount < _credit.Amount.Value * _credit.Product.PercentageSeparateGuarantour / 100)                      {                          var message = string.Format(ML.GetString(Ressource.ClientForm' "GuarantorAmountIsNotEnough")'                                          ServicesHelper.ConvertDecimalToString(_credit.Amount.Value * _credit.Product.PercentageSeparateGuarantour / 100)'                                          _credit.Product.PercentageSeparateGuarantour);                          Fail(message);                          return;                      }                        if (_totalCollateralAmount < _credit.Amount.Value * _credit.Product.PercentageSeparateCollateral / 100)                      {                          var message = string.Format(ML.GetString(Ressource.ClientForm' "CollateralAmountIsNotEnough")'                                          ServicesHelper.ConvertDecimalToString(_credit.Amount.Value * _credit.Product.PercentageSeparateCollateral / 100)'                                          _credit.Product.PercentageSeparateCollateral);                          Fail(message);                            return;                      }                  }              }
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,buttonLoanDisbursment_Click,The following statement contains a magic number: if (_credit.Product.UseGuarantorCollateral)              {                  if (!_credit.Product.SetSeparateGuarantorCollateral)                  {                      if (_totalCollateralAmount + _totalGuarantorAmount <                          _credit.Amount.Value * _credit.Product.PercentageTotalGuarantorCollateral / 100)                      {                          var message = string.Format(ML.GetString(Ressource.ClientForm' "CollateralGuarantorAmountIsNotEnough")'                                          ServicesHelper.ConvertDecimalToString(_credit.Amount.Value * _credit.Product.PercentageTotalGuarantorCollateral / 100)'                                          _credit.Product.PercentageTotalGuarantorCollateral);                          Fail(message);                          return;                      }                  }                  else                  {                      if (_totalGuarantorAmount < _credit.Amount.Value * _credit.Product.PercentageSeparateGuarantour / 100)                      {                          var message = string.Format(ML.GetString(Ressource.ClientForm' "GuarantorAmountIsNotEnough")'                                          ServicesHelper.ConvertDecimalToString(_credit.Amount.Value * _credit.Product.PercentageSeparateGuarantour / 100)'                                          _credit.Product.PercentageSeparateGuarantour);                          Fail(message);                          return;                      }                        if (_totalCollateralAmount < _credit.Amount.Value * _credit.Product.PercentageSeparateCollateral / 100)                      {                          var message = string.Format(ML.GetString(Ressource.ClientForm' "CollateralAmountIsNotEnough")'                                          ServicesHelper.ConvertDecimalToString(_credit.Amount.Value * _credit.Product.PercentageSeparateCollateral / 100)'                                          _credit.Product.PercentageSeparateCollateral);                          Fail(message);                            return;                      }                  }              }
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,buttonLoanDisbursment_Click,The following statement contains a magic number: if (_credit.Product.UseCompulsorySavings)              {                  _credit.CompulsorySavings = SavingServices.GetSavingForLoan(_credit.Id' true);                  if (_credit.CompulsorySavings != null)                  {                      decimal savingsBalance = 0;                      decimal totalAmountPercentage = 0;                      savingsBalance = _credit.CompulsorySavings.GetBalance().Value;                        foreach (Loan assosiatedLoan in _credit.CompulsorySavings.Loans)                      {                          if (assosiatedLoan.CompulsorySavingsPercentage != null && (assosiatedLoan.ContractStatus == OContractStatus.Active ||                              assosiatedLoan.ContractStatus == OContractStatus.Validated))                              totalAmountPercentage += (assosiatedLoan.Amount.Value * ((decimal)assosiatedLoan.CompulsorySavingsPercentage / 100));                      }                      if (totalAmountPercentage > savingsBalance)                      {                          var message = string.Format(ML.GetString(Ressource.ClientForm' "BalanceIsNotEnough")'                              new OCurrency(savingsBalance).GetFormatedValue(_credit.Product.UseCents)'                              new OCurrency(totalAmountPercentage).GetFormatedValue(_credit.Product.UseCents));                          Fail(message);                          return;                      }                  }                  else                  {                      Fail(MultiLanguageStrings.GetString(Ressource.ClientForm' "LoanRequiresCompulsory"));                      return;                  }              }
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,DisplayGuarantors,The following statement contains a magic number: foreach (Guarantor selectedGuarantor in pGuarantors)              {                  ListViewItem listViewItem = new ListViewItem(((Person)selectedGuarantor.Tiers).Name) { Tag = selectedGuarantor };                  listViewItem.SubItems.Add(selectedGuarantor.Amount.GetFormatedValue(_credit.UseCents));                    if (pAmount.HasValue)                      listViewItem.SubItems.Add((selectedGuarantor.Amount / pAmount * (double)100).ToString());                  else                      listViewItem.SubItems.Add("-");                    listViewItem.SubItems.Add(selectedGuarantor.Description);                    _totalGuarantorAmount += selectedGuarantor.Amount;                  totalGuarantorAmountPercent += selectedGuarantor.Amount / pAmount * (double)100;                    listViewGuarantors.Items.Add(listViewItem);              }
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,DisplayGuarantors,The following statement contains a magic number: foreach (Guarantor selectedGuarantor in pGuarantors)              {                  ListViewItem listViewItem = new ListViewItem(((Person)selectedGuarantor.Tiers).Name) { Tag = selectedGuarantor };                  listViewItem.SubItems.Add(selectedGuarantor.Amount.GetFormatedValue(_credit.UseCents));                    if (pAmount.HasValue)                      listViewItem.SubItems.Add((selectedGuarantor.Amount / pAmount * (double)100).ToString());                  else                      listViewItem.SubItems.Add("-");                    listViewItem.SubItems.Add(selectedGuarantor.Description);                    _totalGuarantorAmount += selectedGuarantor.Amount;                  totalGuarantorAmountPercent += selectedGuarantor.Amount / pAmount * (double)100;                    listViewGuarantors.Items.Add(listViewItem);              }
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,DisplayLoanEvents,The following statement contains a magic number: foreach (Event displayEvent in events)              {                  if (!chxSystemEvents.Checked && (displayEvent is AccruedInterestEvent || displayEvent is LoanPenaltyAccrualEvent ||                      displayEvent is LoanInterestAccrualEvent || displayEvent is LoanTransitionEvent || displayEvent is CreditInsuranceEvent ||                      displayEvent is LoanValidationEvent || displayEvent is LoanCloseEvent)) continue;                    var listViewItem = new ListViewItem(displayEvent.Date.ToString());                  listViewItem.SubItems.Add(displayEvent.EntryDate.ToShortDateString());                    listViewItem.SubItems.Add(displayEvent.Code);                  listViewItem.Tag = displayEvent;                    if (displayEvent is LoanDisbursmentEvent)                  {                      var e = displayEvent as LoanDisbursmentEvent;                      listViewItem.SubItems.Add(e.Amount.GetFormatedValue(pCredit.UseCents));                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add(e.Fee.GetFormatedValue(pCredit.UseCents));                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                  }                  else if (displayEvent is LoanEntryFeeEvent)                  {                      LoanEntryFeeEvent e = displayEvent as LoanEntryFeeEvent;                        listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add(e.Fee.GetFormatedValue(pCredit.UseCents));                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                  }                  else if (displayEvent is AccruedInterestEvent)                  {                      AccruedInterestEvent evt = displayEvent as AccruedInterestEvent;                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add(evt.AccruedInterest.GetFormatedValue(pCredit.UseCents));                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                  }                  else if (displayEvent is RepaymentEvent)                  {                      RepaymentEvent _event = displayEvent as RepaymentEvent;                      listViewItem.SubItems.Add(_event.Principal.GetFormatedValue(pCredit.UseCents));                      listViewItem.SubItems.Add(_event.Interests.GetFormatedValue(pCredit.UseCents));                      listViewItem.SubItems.Add(_event.Commissions.GetFormatedValue(pCredit.UseCents));                      listViewItem.SubItems.Add(_event.Penalties.GetFormatedValue(pCredit.UseCents));                      listViewItem.SubItems.Add(_event.BounceFee.GetFormatedValue(pCredit.UseCents));                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                  }                  else if (displayEvent is TrancheEvent)                  {                      TrancheEvent _event = displayEvent as TrancheEvent;                      listViewItem.SubItems.Add(_event.Amount.GetFormatedValue(pCredit.UseCents));                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                  }                  else if (displayEvent is OverdueEvent)                  {                      OverdueEvent _event = displayEvent as OverdueEvent;                      listViewItem.SubItems.Add(_event.OLB.GetFormatedValue(pCredit.UseCents));                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add(_event.OverduePrincipal.GetFormatedValue(pCredit.UseCents));                      listViewItem.SubItems.Add(_event.OverdueDays.ToString());                  }                  else if (displayEvent is ProvisionEvent)                  {                      ProvisionEvent _event = displayEvent as ProvisionEvent;                      listViewItem.SubItems.Add(_event.Amount.GetFormatedValue(pCredit.UseCents));                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                  }                  else if (displayEvent is LoanPenaltyAccrualEvent)                  {                      LoanPenaltyAccrualEvent _event = displayEvent as LoanPenaltyAccrualEvent;                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add(_event.Penalty.GetFormatedValue(pCredit.UseCents));                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                  }                  else if (displayEvent is PenaltyWriteOffEvent)                  {                      var penaltyWriteOffEvent = displayEvent as PenaltyWriteOffEvent;                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add(penaltyWriteOffEvent.Amount.GetFormatedValue(pCredit.UseCents));                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                  }                  else if (displayEvent is InterestWriteOffEvent)                  {                      var penaltyWriteOffEvent = displayEvent as InterestWriteOffEvent;                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add(penaltyWriteOffEvent.Amount.GetFormatedValue(pCredit.UseCents));                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                                      }                  else if (displayEvent is LoanInterestAccrualEvent)                  {                      LoanInterestAccrualEvent _event = displayEvent as LoanInterestAccrualEvent;                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add(_event.Interest.GetFormatedValue(pCredit.UseCents));                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                  }                  else if (displayEvent is LoanTransitionEvent)                  {                      var _event = displayEvent as LoanTransitionEvent;                      listViewItem.SubItems.Add(_event.Amount.GetFormatedValue(pCredit.UseCents));                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                  }                  else if (displayEvent is RegEvent                           || displayEvent is WriteOffEvent                           || displayEvent is LoanValidationEvent                           || displayEvent is LoanCloseEvent                           || displayEvent is ManualScheduleChangeEvent)                  {                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                  }                  else if (displayEvent is RescheduleLoanEvent)                  {                      RescheduleLoanEvent _event = displayEvent as RescheduleLoanEvent;                      listViewItem.SubItems.Add(_event.Amount.GetFormatedValue(pCredit.UseCents));                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                  }                  else if (displayEvent is CreditInsuranceEvent)                  {                      CreditInsuranceEvent _event = displayEvent as CreditInsuranceEvent;                      listViewItem.SubItems.Add(_event.Principal.GetFormatedValue(pCredit.UseCents));                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add(_event.Commission.GetFormatedValue(pCredit.Product.Currency.UseCents));                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                  }                    listViewItem.SubItems.Add(displayEvent.Cancelable.ToString());                  listViewItem.SubItems.Add(displayEvent.User.ToString());                    if (displayEvent.ExportedDate.Date >= new DateTime(1900' 1' 1' 12' 0' 0))                      listViewItem.SubItems.Add(displayEvent.ExportedDate.ToShortDateString());                  else                      listViewItem.SubItems.Add("-");                    listViewItem.SubItems.Add(displayEvent.Id.ToString());                  listViewItem.SubItems.Add(displayEvent.InstallmentNumber.ToString());                  listViewItem.SubItems.Add(displayEvent.Comment);                  if (displayEvent.PaymentMethod != null)                  {                      listViewItem.SubItems.Add(displayEvent.PaymentMethod.Name);                  }                  else                  {                      listViewItem.SubItems.Add(string.Empty);                  }                  if (displayEvent.CancelDate.HasValue)                      listViewItem.SubItems.Add(displayEvent.CancelDate.Value.ToString("dd/MM/yyyy HH:mm:ss"));                  else                      listViewItem.SubItems.Add(string.Empty);                    if (displayEvent.Deleted)                  {                      listViewItem.SubItems.Add(MultiLanguageStrings.GetString(Ressource.ClientForm' "Yes.Text"));                      listViewItem.BackColor = Color.FromArgb(188' 209' 199);                      listViewItem.ForeColor = Color.White;                  }                  else                  {                      listViewItem.SubItems.Add(MultiLanguageStrings.GetString(Ressource.ClientForm' "No.Text"));                  }                    lvEvents.Items.Add(listViewItem);              }
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,DisplayLoanEvents,The following statement contains a magic number: foreach (Event displayEvent in events)              {                  if (!chxSystemEvents.Checked && (displayEvent is AccruedInterestEvent || displayEvent is LoanPenaltyAccrualEvent ||                      displayEvent is LoanInterestAccrualEvent || displayEvent is LoanTransitionEvent || displayEvent is CreditInsuranceEvent ||                      displayEvent is LoanValidationEvent || displayEvent is LoanCloseEvent)) continue;                    var listViewItem = new ListViewItem(displayEvent.Date.ToString());                  listViewItem.SubItems.Add(displayEvent.EntryDate.ToShortDateString());                    listViewItem.SubItems.Add(displayEvent.Code);                  listViewItem.Tag = displayEvent;                    if (displayEvent is LoanDisbursmentEvent)                  {                      var e = displayEvent as LoanDisbursmentEvent;                      listViewItem.SubItems.Add(e.Amount.GetFormatedValue(pCredit.UseCents));                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add(e.Fee.GetFormatedValue(pCredit.UseCents));                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                  }                  else if (displayEvent is LoanEntryFeeEvent)                  {                      LoanEntryFeeEvent e = displayEvent as LoanEntryFeeEvent;                        listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add(e.Fee.GetFormatedValue(pCredit.UseCents));                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                  }                  else if (displayEvent is AccruedInterestEvent)                  {                      AccruedInterestEvent evt = displayEvent as AccruedInterestEvent;                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add(evt.AccruedInterest.GetFormatedValue(pCredit.UseCents));                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                  }                  else if (displayEvent is RepaymentEvent)                  {                      RepaymentEvent _event = displayEvent as RepaymentEvent;                      listViewItem.SubItems.Add(_event.Principal.GetFormatedValue(pCredit.UseCents));                      listViewItem.SubItems.Add(_event.Interests.GetFormatedValue(pCredit.UseCents));                      listViewItem.SubItems.Add(_event.Commissions.GetFormatedValue(pCredit.UseCents));                      listViewItem.SubItems.Add(_event.Penalties.GetFormatedValue(pCredit.UseCents));                      listViewItem.SubItems.Add(_event.BounceFee.GetFormatedValue(pCredit.UseCents));                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                  }                  else if (displayEvent is TrancheEvent)                  {                      TrancheEvent _event = displayEvent as TrancheEvent;                      listViewItem.SubItems.Add(_event.Amount.GetFormatedValue(pCredit.UseCents));                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                  }                  else if (displayEvent is OverdueEvent)                  {                      OverdueEvent _event = displayEvent as OverdueEvent;                      listViewItem.SubItems.Add(_event.OLB.GetFormatedValue(pCredit.UseCents));                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add(_event.OverduePrincipal.GetFormatedValue(pCredit.UseCents));                      listViewItem.SubItems.Add(_event.OverdueDays.ToString());                  }                  else if (displayEvent is ProvisionEvent)                  {                      ProvisionEvent _event = displayEvent as ProvisionEvent;                      listViewItem.SubItems.Add(_event.Amount.GetFormatedValue(pCredit.UseCents));                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                  }                  else if (displayEvent is LoanPenaltyAccrualEvent)                  {                      LoanPenaltyAccrualEvent _event = displayEvent as LoanPenaltyAccrualEvent;                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add(_event.Penalty.GetFormatedValue(pCredit.UseCents));                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                  }                  else if (displayEvent is PenaltyWriteOffEvent)                  {                      var penaltyWriteOffEvent = displayEvent as PenaltyWriteOffEvent;                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add(penaltyWriteOffEvent.Amount.GetFormatedValue(pCredit.UseCents));                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                  }                  else if (displayEvent is InterestWriteOffEvent)                  {                      var penaltyWriteOffEvent = displayEvent as InterestWriteOffEvent;                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add(penaltyWriteOffEvent.Amount.GetFormatedValue(pCredit.UseCents));                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                                      }                  else if (displayEvent is LoanInterestAccrualEvent)                  {                      LoanInterestAccrualEvent _event = displayEvent as LoanInterestAccrualEvent;                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add(_event.Interest.GetFormatedValue(pCredit.UseCents));                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                  }                  else if (displayEvent is LoanTransitionEvent)                  {                      var _event = displayEvent as LoanTransitionEvent;                      listViewItem.SubItems.Add(_event.Amount.GetFormatedValue(pCredit.UseCents));                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                  }                  else if (displayEvent is RegEvent                           || displayEvent is WriteOffEvent                           || displayEvent is LoanValidationEvent                           || displayEvent is LoanCloseEvent                           || displayEvent is ManualScheduleChangeEvent)                  {                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                  }                  else if (displayEvent is RescheduleLoanEvent)                  {                      RescheduleLoanEvent _event = displayEvent as RescheduleLoanEvent;                      listViewItem.SubItems.Add(_event.Amount.GetFormatedValue(pCredit.UseCents));                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                  }                  else if (displayEvent is CreditInsuranceEvent)                  {                      CreditInsuranceEvent _event = displayEvent as CreditInsuranceEvent;                      listViewItem.SubItems.Add(_event.Principal.GetFormatedValue(pCredit.UseCents));                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add(_event.Commission.GetFormatedValue(pCredit.Product.Currency.UseCents));                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                  }                    listViewItem.SubItems.Add(displayEvent.Cancelable.ToString());                  listViewItem.SubItems.Add(displayEvent.User.ToString());                    if (displayEvent.ExportedDate.Date >= new DateTime(1900' 1' 1' 12' 0' 0))                      listViewItem.SubItems.Add(displayEvent.ExportedDate.ToShortDateString());                  else                      listViewItem.SubItems.Add("-");                    listViewItem.SubItems.Add(displayEvent.Id.ToString());                  listViewItem.SubItems.Add(displayEvent.InstallmentNumber.ToString());                  listViewItem.SubItems.Add(displayEvent.Comment);                  if (displayEvent.PaymentMethod != null)                  {                      listViewItem.SubItems.Add(displayEvent.PaymentMethod.Name);                  }                  else                  {                      listViewItem.SubItems.Add(string.Empty);                  }                  if (displayEvent.CancelDate.HasValue)                      listViewItem.SubItems.Add(displayEvent.CancelDate.Value.ToString("dd/MM/yyyy HH:mm:ss"));                  else                      listViewItem.SubItems.Add(string.Empty);                    if (displayEvent.Deleted)                  {                      listViewItem.SubItems.Add(MultiLanguageStrings.GetString(Ressource.ClientForm' "Yes.Text"));                      listViewItem.BackColor = Color.FromArgb(188' 209' 199);                      listViewItem.ForeColor = Color.White;                  }                  else                  {                      listViewItem.SubItems.Add(MultiLanguageStrings.GetString(Ressource.ClientForm' "No.Text"));                  }                    lvEvents.Items.Add(listViewItem);              }
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,DisplayLoanEvents,The following statement contains a magic number: foreach (Event displayEvent in events)              {                  if (!chxSystemEvents.Checked && (displayEvent is AccruedInterestEvent || displayEvent is LoanPenaltyAccrualEvent ||                      displayEvent is LoanInterestAccrualEvent || displayEvent is LoanTransitionEvent || displayEvent is CreditInsuranceEvent ||                      displayEvent is LoanValidationEvent || displayEvent is LoanCloseEvent)) continue;                    var listViewItem = new ListViewItem(displayEvent.Date.ToString());                  listViewItem.SubItems.Add(displayEvent.EntryDate.ToShortDateString());                    listViewItem.SubItems.Add(displayEvent.Code);                  listViewItem.Tag = displayEvent;                    if (displayEvent is LoanDisbursmentEvent)                  {                      var e = displayEvent as LoanDisbursmentEvent;                      listViewItem.SubItems.Add(e.Amount.GetFormatedValue(pCredit.UseCents));                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add(e.Fee.GetFormatedValue(pCredit.UseCents));                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                  }                  else if (displayEvent is LoanEntryFeeEvent)                  {                      LoanEntryFeeEvent e = displayEvent as LoanEntryFeeEvent;                        listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add(e.Fee.GetFormatedValue(pCredit.UseCents));                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                  }                  else if (displayEvent is AccruedInterestEvent)                  {                      AccruedInterestEvent evt = displayEvent as AccruedInterestEvent;                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add(evt.AccruedInterest.GetFormatedValue(pCredit.UseCents));                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                  }                  else if (displayEvent is RepaymentEvent)                  {                      RepaymentEvent _event = displayEvent as RepaymentEvent;                      listViewItem.SubItems.Add(_event.Principal.GetFormatedValue(pCredit.UseCents));                      listViewItem.SubItems.Add(_event.Interests.GetFormatedValue(pCredit.UseCents));                      listViewItem.SubItems.Add(_event.Commissions.GetFormatedValue(pCredit.UseCents));                      listViewItem.SubItems.Add(_event.Penalties.GetFormatedValue(pCredit.UseCents));                      listViewItem.SubItems.Add(_event.BounceFee.GetFormatedValue(pCredit.UseCents));                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                  }                  else if (displayEvent is TrancheEvent)                  {                      TrancheEvent _event = displayEvent as TrancheEvent;                      listViewItem.SubItems.Add(_event.Amount.GetFormatedValue(pCredit.UseCents));                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                  }                  else if (displayEvent is OverdueEvent)                  {                      OverdueEvent _event = displayEvent as OverdueEvent;                      listViewItem.SubItems.Add(_event.OLB.GetFormatedValue(pCredit.UseCents));                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add(_event.OverduePrincipal.GetFormatedValue(pCredit.UseCents));                      listViewItem.SubItems.Add(_event.OverdueDays.ToString());                  }                  else if (displayEvent is ProvisionEvent)                  {                      ProvisionEvent _event = displayEvent as ProvisionEvent;                      listViewItem.SubItems.Add(_event.Amount.GetFormatedValue(pCredit.UseCents));                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                  }                  else if (displayEvent is LoanPenaltyAccrualEvent)                  {                      LoanPenaltyAccrualEvent _event = displayEvent as LoanPenaltyAccrualEvent;                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add(_event.Penalty.GetFormatedValue(pCredit.UseCents));                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                  }                  else if (displayEvent is PenaltyWriteOffEvent)                  {                      var penaltyWriteOffEvent = displayEvent as PenaltyWriteOffEvent;                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add(penaltyWriteOffEvent.Amount.GetFormatedValue(pCredit.UseCents));                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                  }                  else if (displayEvent is InterestWriteOffEvent)                  {                      var penaltyWriteOffEvent = displayEvent as InterestWriteOffEvent;                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add(penaltyWriteOffEvent.Amount.GetFormatedValue(pCredit.UseCents));                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                                      }                  else if (displayEvent is LoanInterestAccrualEvent)                  {                      LoanInterestAccrualEvent _event = displayEvent as LoanInterestAccrualEvent;                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add(_event.Interest.GetFormatedValue(pCredit.UseCents));                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                  }                  else if (displayEvent is LoanTransitionEvent)                  {                      var _event = displayEvent as LoanTransitionEvent;                      listViewItem.SubItems.Add(_event.Amount.GetFormatedValue(pCredit.UseCents));                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                  }                  else if (displayEvent is RegEvent                           || displayEvent is WriteOffEvent                           || displayEvent is LoanValidationEvent                           || displayEvent is LoanCloseEvent                           || displayEvent is ManualScheduleChangeEvent)                  {                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                  }                  else if (displayEvent is RescheduleLoanEvent)                  {                      RescheduleLoanEvent _event = displayEvent as RescheduleLoanEvent;                      listViewItem.SubItems.Add(_event.Amount.GetFormatedValue(pCredit.UseCents));                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                  }                  else if (displayEvent is CreditInsuranceEvent)                  {                      CreditInsuranceEvent _event = displayEvent as CreditInsuranceEvent;                      listViewItem.SubItems.Add(_event.Principal.GetFormatedValue(pCredit.UseCents));                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add(_event.Commission.GetFormatedValue(pCredit.Product.Currency.UseCents));                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                  }                    listViewItem.SubItems.Add(displayEvent.Cancelable.ToString());                  listViewItem.SubItems.Add(displayEvent.User.ToString());                    if (displayEvent.ExportedDate.Date >= new DateTime(1900' 1' 1' 12' 0' 0))                      listViewItem.SubItems.Add(displayEvent.ExportedDate.ToShortDateString());                  else                      listViewItem.SubItems.Add("-");                    listViewItem.SubItems.Add(displayEvent.Id.ToString());                  listViewItem.SubItems.Add(displayEvent.InstallmentNumber.ToString());                  listViewItem.SubItems.Add(displayEvent.Comment);                  if (displayEvent.PaymentMethod != null)                  {                      listViewItem.SubItems.Add(displayEvent.PaymentMethod.Name);                  }                  else                  {                      listViewItem.SubItems.Add(string.Empty);                  }                  if (displayEvent.CancelDate.HasValue)                      listViewItem.SubItems.Add(displayEvent.CancelDate.Value.ToString("dd/MM/yyyy HH:mm:ss"));                  else                      listViewItem.SubItems.Add(string.Empty);                    if (displayEvent.Deleted)                  {                      listViewItem.SubItems.Add(MultiLanguageStrings.GetString(Ressource.ClientForm' "Yes.Text"));                      listViewItem.BackColor = Color.FromArgb(188' 209' 199);                      listViewItem.ForeColor = Color.White;                  }                  else                  {                      listViewItem.SubItems.Add(MultiLanguageStrings.GetString(Ressource.ClientForm' "No.Text"));                  }                    lvEvents.Items.Add(listViewItem);              }
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,DisplayLoanEvents,The following statement contains a magic number: foreach (Event displayEvent in events)              {                  if (!chxSystemEvents.Checked && (displayEvent is AccruedInterestEvent || displayEvent is LoanPenaltyAccrualEvent ||                      displayEvent is LoanInterestAccrualEvent || displayEvent is LoanTransitionEvent || displayEvent is CreditInsuranceEvent ||                      displayEvent is LoanValidationEvent || displayEvent is LoanCloseEvent)) continue;                    var listViewItem = new ListViewItem(displayEvent.Date.ToString());                  listViewItem.SubItems.Add(displayEvent.EntryDate.ToShortDateString());                    listViewItem.SubItems.Add(displayEvent.Code);                  listViewItem.Tag = displayEvent;                    if (displayEvent is LoanDisbursmentEvent)                  {                      var e = displayEvent as LoanDisbursmentEvent;                      listViewItem.SubItems.Add(e.Amount.GetFormatedValue(pCredit.UseCents));                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add(e.Fee.GetFormatedValue(pCredit.UseCents));                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                  }                  else if (displayEvent is LoanEntryFeeEvent)                  {                      LoanEntryFeeEvent e = displayEvent as LoanEntryFeeEvent;                        listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add(e.Fee.GetFormatedValue(pCredit.UseCents));                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                  }                  else if (displayEvent is AccruedInterestEvent)                  {                      AccruedInterestEvent evt = displayEvent as AccruedInterestEvent;                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add(evt.AccruedInterest.GetFormatedValue(pCredit.UseCents));                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                  }                  else if (displayEvent is RepaymentEvent)                  {                      RepaymentEvent _event = displayEvent as RepaymentEvent;                      listViewItem.SubItems.Add(_event.Principal.GetFormatedValue(pCredit.UseCents));                      listViewItem.SubItems.Add(_event.Interests.GetFormatedValue(pCredit.UseCents));                      listViewItem.SubItems.Add(_event.Commissions.GetFormatedValue(pCredit.UseCents));                      listViewItem.SubItems.Add(_event.Penalties.GetFormatedValue(pCredit.UseCents));                      listViewItem.SubItems.Add(_event.BounceFee.GetFormatedValue(pCredit.UseCents));                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                  }                  else if (displayEvent is TrancheEvent)                  {                      TrancheEvent _event = displayEvent as TrancheEvent;                      listViewItem.SubItems.Add(_event.Amount.GetFormatedValue(pCredit.UseCents));                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                  }                  else if (displayEvent is OverdueEvent)                  {                      OverdueEvent _event = displayEvent as OverdueEvent;                      listViewItem.SubItems.Add(_event.OLB.GetFormatedValue(pCredit.UseCents));                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add(_event.OverduePrincipal.GetFormatedValue(pCredit.UseCents));                      listViewItem.SubItems.Add(_event.OverdueDays.ToString());                  }                  else if (displayEvent is ProvisionEvent)                  {                      ProvisionEvent _event = displayEvent as ProvisionEvent;                      listViewItem.SubItems.Add(_event.Amount.GetFormatedValue(pCredit.UseCents));                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                  }                  else if (displayEvent is LoanPenaltyAccrualEvent)                  {                      LoanPenaltyAccrualEvent _event = displayEvent as LoanPenaltyAccrualEvent;                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add(_event.Penalty.GetFormatedValue(pCredit.UseCents));                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                  }                  else if (displayEvent is PenaltyWriteOffEvent)                  {                      var penaltyWriteOffEvent = displayEvent as PenaltyWriteOffEvent;                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add(penaltyWriteOffEvent.Amount.GetFormatedValue(pCredit.UseCents));                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                  }                  else if (displayEvent is InterestWriteOffEvent)                  {                      var penaltyWriteOffEvent = displayEvent as InterestWriteOffEvent;                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add(penaltyWriteOffEvent.Amount.GetFormatedValue(pCredit.UseCents));                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                                      }                  else if (displayEvent is LoanInterestAccrualEvent)                  {                      LoanInterestAccrualEvent _event = displayEvent as LoanInterestAccrualEvent;                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add(_event.Interest.GetFormatedValue(pCredit.UseCents));                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                  }                  else if (displayEvent is LoanTransitionEvent)                  {                      var _event = displayEvent as LoanTransitionEvent;                      listViewItem.SubItems.Add(_event.Amount.GetFormatedValue(pCredit.UseCents));                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                  }                  else if (displayEvent is RegEvent                           || displayEvent is WriteOffEvent                           || displayEvent is LoanValidationEvent                           || displayEvent is LoanCloseEvent                           || displayEvent is ManualScheduleChangeEvent)                  {                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                  }                  else if (displayEvent is RescheduleLoanEvent)                  {                      RescheduleLoanEvent _event = displayEvent as RescheduleLoanEvent;                      listViewItem.SubItems.Add(_event.Amount.GetFormatedValue(pCredit.UseCents));                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                  }                  else if (displayEvent is CreditInsuranceEvent)                  {                      CreditInsuranceEvent _event = displayEvent as CreditInsuranceEvent;                      listViewItem.SubItems.Add(_event.Principal.GetFormatedValue(pCredit.UseCents));                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add(_event.Commission.GetFormatedValue(pCredit.Product.Currency.UseCents));                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                  }                    listViewItem.SubItems.Add(displayEvent.Cancelable.ToString());                  listViewItem.SubItems.Add(displayEvent.User.ToString());                    if (displayEvent.ExportedDate.Date >= new DateTime(1900' 1' 1' 12' 0' 0))                      listViewItem.SubItems.Add(displayEvent.ExportedDate.ToShortDateString());                  else                      listViewItem.SubItems.Add("-");                    listViewItem.SubItems.Add(displayEvent.Id.ToString());                  listViewItem.SubItems.Add(displayEvent.InstallmentNumber.ToString());                  listViewItem.SubItems.Add(displayEvent.Comment);                  if (displayEvent.PaymentMethod != null)                  {                      listViewItem.SubItems.Add(displayEvent.PaymentMethod.Name);                  }                  else                  {                      listViewItem.SubItems.Add(string.Empty);                  }                  if (displayEvent.CancelDate.HasValue)                      listViewItem.SubItems.Add(displayEvent.CancelDate.Value.ToString("dd/MM/yyyy HH:mm:ss"));                  else                      listViewItem.SubItems.Add(string.Empty);                    if (displayEvent.Deleted)                  {                      listViewItem.SubItems.Add(MultiLanguageStrings.GetString(Ressource.ClientForm' "Yes.Text"));                      listViewItem.BackColor = Color.FromArgb(188' 209' 199);                      listViewItem.ForeColor = Color.White;                  }                  else                  {                      listViewItem.SubItems.Add(MultiLanguageStrings.GetString(Ressource.ClientForm' "No.Text"));                  }                    lvEvents.Items.Add(listViewItem);              }
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,DisplayLoanEvents,The following statement contains a magic number: foreach (Event displayEvent in events)              {                  if (!chxSystemEvents.Checked && (displayEvent is AccruedInterestEvent || displayEvent is LoanPenaltyAccrualEvent ||                      displayEvent is LoanInterestAccrualEvent || displayEvent is LoanTransitionEvent || displayEvent is CreditInsuranceEvent ||                      displayEvent is LoanValidationEvent || displayEvent is LoanCloseEvent)) continue;                    var listViewItem = new ListViewItem(displayEvent.Date.ToString());                  listViewItem.SubItems.Add(displayEvent.EntryDate.ToShortDateString());                    listViewItem.SubItems.Add(displayEvent.Code);                  listViewItem.Tag = displayEvent;                    if (displayEvent is LoanDisbursmentEvent)                  {                      var e = displayEvent as LoanDisbursmentEvent;                      listViewItem.SubItems.Add(e.Amount.GetFormatedValue(pCredit.UseCents));                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add(e.Fee.GetFormatedValue(pCredit.UseCents));                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                  }                  else if (displayEvent is LoanEntryFeeEvent)                  {                      LoanEntryFeeEvent e = displayEvent as LoanEntryFeeEvent;                        listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add(e.Fee.GetFormatedValue(pCredit.UseCents));                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                  }                  else if (displayEvent is AccruedInterestEvent)                  {                      AccruedInterestEvent evt = displayEvent as AccruedInterestEvent;                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add(evt.AccruedInterest.GetFormatedValue(pCredit.UseCents));                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                  }                  else if (displayEvent is RepaymentEvent)                  {                      RepaymentEvent _event = displayEvent as RepaymentEvent;                      listViewItem.SubItems.Add(_event.Principal.GetFormatedValue(pCredit.UseCents));                      listViewItem.SubItems.Add(_event.Interests.GetFormatedValue(pCredit.UseCents));                      listViewItem.SubItems.Add(_event.Commissions.GetFormatedValue(pCredit.UseCents));                      listViewItem.SubItems.Add(_event.Penalties.GetFormatedValue(pCredit.UseCents));                      listViewItem.SubItems.Add(_event.BounceFee.GetFormatedValue(pCredit.UseCents));                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                  }                  else if (displayEvent is TrancheEvent)                  {                      TrancheEvent _event = displayEvent as TrancheEvent;                      listViewItem.SubItems.Add(_event.Amount.GetFormatedValue(pCredit.UseCents));                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                  }                  else if (displayEvent is OverdueEvent)                  {                      OverdueEvent _event = displayEvent as OverdueEvent;                      listViewItem.SubItems.Add(_event.OLB.GetFormatedValue(pCredit.UseCents));                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add(_event.OverduePrincipal.GetFormatedValue(pCredit.UseCents));                      listViewItem.SubItems.Add(_event.OverdueDays.ToString());                  }                  else if (displayEvent is ProvisionEvent)                  {                      ProvisionEvent _event = displayEvent as ProvisionEvent;                      listViewItem.SubItems.Add(_event.Amount.GetFormatedValue(pCredit.UseCents));                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                  }                  else if (displayEvent is LoanPenaltyAccrualEvent)                  {                      LoanPenaltyAccrualEvent _event = displayEvent as LoanPenaltyAccrualEvent;                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add(_event.Penalty.GetFormatedValue(pCredit.UseCents));                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                  }                  else if (displayEvent is PenaltyWriteOffEvent)                  {                      var penaltyWriteOffEvent = displayEvent as PenaltyWriteOffEvent;                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add(penaltyWriteOffEvent.Amount.GetFormatedValue(pCredit.UseCents));                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                  }                  else if (displayEvent is InterestWriteOffEvent)                  {                      var penaltyWriteOffEvent = displayEvent as InterestWriteOffEvent;                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add(penaltyWriteOffEvent.Amount.GetFormatedValue(pCredit.UseCents));                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                                      }                  else if (displayEvent is LoanInterestAccrualEvent)                  {                      LoanInterestAccrualEvent _event = displayEvent as LoanInterestAccrualEvent;                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add(_event.Interest.GetFormatedValue(pCredit.UseCents));                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                  }                  else if (displayEvent is LoanTransitionEvent)                  {                      var _event = displayEvent as LoanTransitionEvent;                      listViewItem.SubItems.Add(_event.Amount.GetFormatedValue(pCredit.UseCents));                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                  }                  else if (displayEvent is RegEvent                           || displayEvent is WriteOffEvent                           || displayEvent is LoanValidationEvent                           || displayEvent is LoanCloseEvent                           || displayEvent is ManualScheduleChangeEvent)                  {                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                  }                  else if (displayEvent is RescheduleLoanEvent)                  {                      RescheduleLoanEvent _event = displayEvent as RescheduleLoanEvent;                      listViewItem.SubItems.Add(_event.Amount.GetFormatedValue(pCredit.UseCents));                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                  }                  else if (displayEvent is CreditInsuranceEvent)                  {                      CreditInsuranceEvent _event = displayEvent as CreditInsuranceEvent;                      listViewItem.SubItems.Add(_event.Principal.GetFormatedValue(pCredit.UseCents));                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add(_event.Commission.GetFormatedValue(pCredit.Product.Currency.UseCents));                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                      listViewItem.SubItems.Add("-");                  }                    listViewItem.SubItems.Add(displayEvent.Cancelable.ToString());                  listViewItem.SubItems.Add(displayEvent.User.ToString());                    if (displayEvent.ExportedDate.Date >= new DateTime(1900' 1' 1' 12' 0' 0))                      listViewItem.SubItems.Add(displayEvent.ExportedDate.ToShortDateString());                  else                      listViewItem.SubItems.Add("-");                    listViewItem.SubItems.Add(displayEvent.Id.ToString());                  listViewItem.SubItems.Add(displayEvent.InstallmentNumber.ToString());                  listViewItem.SubItems.Add(displayEvent.Comment);                  if (displayEvent.PaymentMethod != null)                  {                      listViewItem.SubItems.Add(displayEvent.PaymentMethod.Name);                  }                  else                  {                      listViewItem.SubItems.Add(string.Empty);                  }                  if (displayEvent.CancelDate.HasValue)                      listViewItem.SubItems.Add(displayEvent.CancelDate.Value.ToString("dd/MM/yyyy HH:mm:ss"));                  else                      listViewItem.SubItems.Add(string.Empty);                    if (displayEvent.Deleted)                  {                      listViewItem.SubItems.Add(MultiLanguageStrings.GetString(Ressource.ClientForm' "Yes.Text"));                      listViewItem.BackColor = Color.FromArgb(188' 209' 199);                      listViewItem.ForeColor = Color.White;                  }                  else                  {                      listViewItem.SubItems.Add(MultiLanguageStrings.GetString(Ressource.ClientForm' "No.Text"));                  }                    lvEvents.Items.Add(listViewItem);              }
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeTabPageSavingDetails,The following statement contains a magic number: try              {                  Text = _title;                  _savingsBookProduct = (SavingsBookProduct)product;                  DisplaySavingProduct(product);                    tabControlSavingsDetails.TabPages.Clear();                  tabControlSavingsDetails.TabPages.Add(tabPageSavingsAmountsAndFees);                  tabControlSavingsDetails.TabPages.Add(tabPageSavingsEvents);                  tabControlSavingsDetails.TabPages.Add(tabPageLoans); ;                  _saving =                      new SavingBookContract(ServicesProvider.GetInstance().GetGeneralSettings()'                          User.CurrentUser'                          (SavingsBookProduct)product);                  if (((SavingsBookProduct)product).UseTermDeposit) tabControlSavingsDetails.TabPages.Add(tpTermDeposit);                    groupBoxSaving.Text = string.Format("{0}"'                      MultiLanguageStrings.GetString(Ressource.ClientForm' "SavingsBook.Text"));                  groupBoxSaving.ForeColor = Color.FromArgb(0' 88' 56);                    tabControlPerson.TabPages.Remove(tabPageSavingDetails);                  tabControlPerson.TabPages.Add(tabPageSavingDetails);                  tabControlPerson.SelectedTab = tabPageSavingDetails;                    InitializeSavingsGeneralControls();                  InitializeTabPageTermDeposit();                  InitializeSavingsFees();                    btSavingsUpdate.Visible = false;                    groupBoxSaving.Enabled = true;                  pnlSavingsButtons.Enabled = false;                    groupBoxSaving.Name += string.Format(" {0}"' product.Name);                  int numbersOfSavings = SavingServices.GetSavingCount(_client);                  _saving.GenerateSavingCode(_client' numbersOfSavings' ServicesProvider.GetInstance().GetGeneralSettings().SavingsCodeTemplate'                     _client.Branch.Code);                  int nextSavingsId = SavingServices.GetLastSavingsId() + 1;                  tBSavingCode.Text = _saving.Code + '/' + nextSavingsId.ToString();                    InitializeSavingsOfficersComboBox();                  DisplaySavingEvent(_saving);                  DisplaySavingLoans(_saving);                    LoadSavingsExtensions();              }              catch (Exception ex)              {                  new frmShowError(CustomExceptionHandler.ShowExceptionText(ex)).ShowDialog();              }
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeTabPageSavingDetails,The following statement contains a magic number: try              {                  Text = _title;                  _savingsBookProduct = (SavingsBookProduct)product;                  DisplaySavingProduct(product);                    tabControlSavingsDetails.TabPages.Clear();                  tabControlSavingsDetails.TabPages.Add(tabPageSavingsAmountsAndFees);                  tabControlSavingsDetails.TabPages.Add(tabPageSavingsEvents);                  tabControlSavingsDetails.TabPages.Add(tabPageLoans); ;                  _saving =                      new SavingBookContract(ServicesProvider.GetInstance().GetGeneralSettings()'                          User.CurrentUser'                          (SavingsBookProduct)product);                  if (((SavingsBookProduct)product).UseTermDeposit) tabControlSavingsDetails.TabPages.Add(tpTermDeposit);                    groupBoxSaving.Text = string.Format("{0}"'                      MultiLanguageStrings.GetString(Ressource.ClientForm' "SavingsBook.Text"));                  groupBoxSaving.ForeColor = Color.FromArgb(0' 88' 56);                    tabControlPerson.TabPages.Remove(tabPageSavingDetails);                  tabControlPerson.TabPages.Add(tabPageSavingDetails);                  tabControlPerson.SelectedTab = tabPageSavingDetails;                    InitializeSavingsGeneralControls();                  InitializeTabPageTermDeposit();                  InitializeSavingsFees();                    btSavingsUpdate.Visible = false;                    groupBoxSaving.Enabled = true;                  pnlSavingsButtons.Enabled = false;                    groupBoxSaving.Name += string.Format(" {0}"' product.Name);                  int numbersOfSavings = SavingServices.GetSavingCount(_client);                  _saving.GenerateSavingCode(_client' numbersOfSavings' ServicesProvider.GetInstance().GetGeneralSettings().SavingsCodeTemplate'                     _client.Branch.Code);                  int nextSavingsId = SavingServices.GetLastSavingsId() + 1;                  tBSavingCode.Text = _saving.Code + '/' + nextSavingsId.ToString();                    InitializeSavingsOfficersComboBox();                  DisplaySavingEvent(_saving);                  DisplaySavingLoans(_saving);                    LoadSavingsExtensions();              }              catch (Exception ex)              {                  new frmShowError(CustomExceptionHandler.ShowExceptionText(ex)).ShowDialog();              }
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,DisplaySavingEvent,The following statement contains a magic number: if (pSaving.Id != 0)              {                  nudDownInterestRate.Value = nudDownInterestRate.Minimum = nudDownInterestRate.Maximum = (decimal)pSaving.InterestRate * 100;                  nudDownInitialAmount.Value = nudDownInitialAmount.Minimum = nudDownInitialAmount.Maximum = pSaving.InitialAmount.Value;                    SavingBookContract s = (SavingBookContract)pSaving;                  nudEntryFees.Value = nudEntryFees.Minimum = nudEntryFees.Maximum = s.EntryFees.Value;                    nudWithdrawFees.Value = nudWithdrawFees.Minimum = nudWithdrawFees.Maximum = s.FlatWithdrawFees.HasValue ?                      s.FlatWithdrawFees.Value : (decimal)s.RateWithdrawFees.Value * 100;                    nudTransferFees.Value = nudTransferFees.Minimum = nudTransferFees.Maximum = s.FlatTransferFees.HasValue ?                      s.FlatTransferFees.Value : (decimal)s.RateTransferFees.Value * 100;                    nudIbtFee.Value = s.FlatInterBranchTransferFee.HasValue ? s.FlatInterBranchTransferFee.Value                      : Convert.ToDecimal(s.RateInterBranchTransferFee.Value);                  nudIbtFee.Minimum = nudIbtFee.Maximum = nudIbtFee.Value;                    nudDepositFees.Value = nudDepositFees.Minimum = nudDepositFees.Maximum = ((SavingBookContract)pSaving).DepositFees.Value;                  nudChequeDepositFees.Value = nudChequeDepositFees.Minimum = nudChequeDepositFees.Maximum = ((SavingBookContract)pSaving).ChequeDepositFees.Value;                  nudCloseFees.Value = nudCloseFees.Minimum = nudCloseFees.Maximum = ((SavingBookContract)pSaving).CloseFees.Value;                  nudManagementFees.Value = nudManagementFees.Minimum = nudManagementFees.Maximum = ((SavingBookContract)pSaving).ManagementFees.Value;                  nudOverdraftFees.Value = nudOverdraftFees.Minimum = nudOverdraftFees.Maximum = ((SavingBookContract)pSaving).OverdraftFees.Value;                  nudAgioFees.Value = nudAgioFees.Minimum = nudAgioFees.Maximum = (decimal)((SavingBookContract)pSaving).AgioFees.Value * 100;                  nudReopenFees.Value = nudReopenFees.Minimum = nudReopenFees.Maximum = ((SavingBookContract)pSaving).ReopenFees.Value;                }
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,DisplaySavingEvent,The following statement contains a magic number: if (pSaving.Id != 0)              {                  nudDownInterestRate.Value = nudDownInterestRate.Minimum = nudDownInterestRate.Maximum = (decimal)pSaving.InterestRate * 100;                  nudDownInitialAmount.Value = nudDownInitialAmount.Minimum = nudDownInitialAmount.Maximum = pSaving.InitialAmount.Value;                    SavingBookContract s = (SavingBookContract)pSaving;                  nudEntryFees.Value = nudEntryFees.Minimum = nudEntryFees.Maximum = s.EntryFees.Value;                    nudWithdrawFees.Value = nudWithdrawFees.Minimum = nudWithdrawFees.Maximum = s.FlatWithdrawFees.HasValue ?                      s.FlatWithdrawFees.Value : (decimal)s.RateWithdrawFees.Value * 100;                    nudTransferFees.Value = nudTransferFees.Minimum = nudTransferFees.Maximum = s.FlatTransferFees.HasValue ?                      s.FlatTransferFees.Value : (decimal)s.RateTransferFees.Value * 100;                    nudIbtFee.Value = s.FlatInterBranchTransferFee.HasValue ? s.FlatInterBranchTransferFee.Value                      : Convert.ToDecimal(s.RateInterBranchTransferFee.Value);                  nudIbtFee.Minimum = nudIbtFee.Maximum = nudIbtFee.Value;                    nudDepositFees.Value = nudDepositFees.Minimum = nudDepositFees.Maximum = ((SavingBookContract)pSaving).DepositFees.Value;                  nudChequeDepositFees.Value = nudChequeDepositFees.Minimum = nudChequeDepositFees.Maximum = ((SavingBookContract)pSaving).ChequeDepositFees.Value;                  nudCloseFees.Value = nudCloseFees.Minimum = nudCloseFees.Maximum = ((SavingBookContract)pSaving).CloseFees.Value;                  nudManagementFees.Value = nudManagementFees.Minimum = nudManagementFees.Maximum = ((SavingBookContract)pSaving).ManagementFees.Value;                  nudOverdraftFees.Value = nudOverdraftFees.Minimum = nudOverdraftFees.Maximum = ((SavingBookContract)pSaving).OverdraftFees.Value;                  nudAgioFees.Value = nudAgioFees.Minimum = nudAgioFees.Maximum = (decimal)((SavingBookContract)pSaving).AgioFees.Value * 100;                  nudReopenFees.Value = nudReopenFees.Minimum = nudReopenFees.Maximum = ((SavingBookContract)pSaving).ReopenFees.Value;                }
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,DisplaySavingEvent,The following statement contains a magic number: if (pSaving.Id != 0)              {                  nudDownInterestRate.Value = nudDownInterestRate.Minimum = nudDownInterestRate.Maximum = (decimal)pSaving.InterestRate * 100;                  nudDownInitialAmount.Value = nudDownInitialAmount.Minimum = nudDownInitialAmount.Maximum = pSaving.InitialAmount.Value;                    SavingBookContract s = (SavingBookContract)pSaving;                  nudEntryFees.Value = nudEntryFees.Minimum = nudEntryFees.Maximum = s.EntryFees.Value;                    nudWithdrawFees.Value = nudWithdrawFees.Minimum = nudWithdrawFees.Maximum = s.FlatWithdrawFees.HasValue ?                      s.FlatWithdrawFees.Value : (decimal)s.RateWithdrawFees.Value * 100;                    nudTransferFees.Value = nudTransferFees.Minimum = nudTransferFees.Maximum = s.FlatTransferFees.HasValue ?                      s.FlatTransferFees.Value : (decimal)s.RateTransferFees.Value * 100;                    nudIbtFee.Value = s.FlatInterBranchTransferFee.HasValue ? s.FlatInterBranchTransferFee.Value                      : Convert.ToDecimal(s.RateInterBranchTransferFee.Value);                  nudIbtFee.Minimum = nudIbtFee.Maximum = nudIbtFee.Value;                    nudDepositFees.Value = nudDepositFees.Minimum = nudDepositFees.Maximum = ((SavingBookContract)pSaving).DepositFees.Value;                  nudChequeDepositFees.Value = nudChequeDepositFees.Minimum = nudChequeDepositFees.Maximum = ((SavingBookContract)pSaving).ChequeDepositFees.Value;                  nudCloseFees.Value = nudCloseFees.Minimum = nudCloseFees.Maximum = ((SavingBookContract)pSaving).CloseFees.Value;                  nudManagementFees.Value = nudManagementFees.Minimum = nudManagementFees.Maximum = ((SavingBookContract)pSaving).ManagementFees.Value;                  nudOverdraftFees.Value = nudOverdraftFees.Minimum = nudOverdraftFees.Maximum = ((SavingBookContract)pSaving).OverdraftFees.Value;                  nudAgioFees.Value = nudAgioFees.Minimum = nudAgioFees.Maximum = (decimal)((SavingBookContract)pSaving).AgioFees.Value * 100;                  nudReopenFees.Value = nudReopenFees.Minimum = nudReopenFees.Maximum = ((SavingBookContract)pSaving).ReopenFees.Value;                }
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,DisplaySavingEvent,The following statement contains a magic number: if (pSaving.Id != 0)              {                  nudDownInterestRate.Value = nudDownInterestRate.Minimum = nudDownInterestRate.Maximum = (decimal)pSaving.InterestRate * 100;                  nudDownInitialAmount.Value = nudDownInitialAmount.Minimum = nudDownInitialAmount.Maximum = pSaving.InitialAmount.Value;                    SavingBookContract s = (SavingBookContract)pSaving;                  nudEntryFees.Value = nudEntryFees.Minimum = nudEntryFees.Maximum = s.EntryFees.Value;                    nudWithdrawFees.Value = nudWithdrawFees.Minimum = nudWithdrawFees.Maximum = s.FlatWithdrawFees.HasValue ?                      s.FlatWithdrawFees.Value : (decimal)s.RateWithdrawFees.Value * 100;                    nudTransferFees.Value = nudTransferFees.Minimum = nudTransferFees.Maximum = s.FlatTransferFees.HasValue ?                      s.FlatTransferFees.Value : (decimal)s.RateTransferFees.Value * 100;                    nudIbtFee.Value = s.FlatInterBranchTransferFee.HasValue ? s.FlatInterBranchTransferFee.Value                      : Convert.ToDecimal(s.RateInterBranchTransferFee.Value);                  nudIbtFee.Minimum = nudIbtFee.Maximum = nudIbtFee.Value;                    nudDepositFees.Value = nudDepositFees.Minimum = nudDepositFees.Maximum = ((SavingBookContract)pSaving).DepositFees.Value;                  nudChequeDepositFees.Value = nudChequeDepositFees.Minimum = nudChequeDepositFees.Maximum = ((SavingBookContract)pSaving).ChequeDepositFees.Value;                  nudCloseFees.Value = nudCloseFees.Minimum = nudCloseFees.Maximum = ((SavingBookContract)pSaving).CloseFees.Value;                  nudManagementFees.Value = nudManagementFees.Minimum = nudManagementFees.Maximum = ((SavingBookContract)pSaving).ManagementFees.Value;                  nudOverdraftFees.Value = nudOverdraftFees.Minimum = nudOverdraftFees.Maximum = ((SavingBookContract)pSaving).OverdraftFees.Value;                  nudAgioFees.Value = nudAgioFees.Minimum = nudAgioFees.Maximum = (decimal)((SavingBookContract)pSaving).AgioFees.Value * 100;                  nudReopenFees.Value = nudReopenFees.Minimum = nudReopenFees.Maximum = ((SavingBookContract)pSaving).ReopenFees.Value;                }
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,DisplaySavingEvent,The following statement contains a magic number: foreach (SavingEvent e in events)              {                  ListViewItem item = new ListViewItem(e.Date.ToString("dd/MM/yyyy HH:mm:ss"));                  item.SubItems.Add(e.Fee.GetFormatedValue(useCents));                  string amt = e.Amount.GetFormatedValue(useCents);                  item.SubItems.Add(e.IsDebit ? amt : string.Empty);                  item.SubItems.Add(e.IsDebit ? string.Empty : amt);                  item.SubItems.Add(e.ExtraInfo);                  item.SubItems.Add(e.Code);                  item.SubItems.Add(e.SavingsMethod.HasValue ? GetString("SavingsOperationForm"' e.SavingsMethod + ".Text") : "-");                  item.SubItems.Add(e.User.Name);                  item.SubItems.Add(e.Description);                  item.SubItems.Add(e.CancelDate.HasValue ? e.CancelDate.Value.ToString("dd/MM/yyyy HH:mm:ss") : string.Empty);                    if (e.IsPending)                  {                      item.BackColor = Color.Orange;                      item.ForeColor = Color.White;                  }                    if (e.Deleted)                  {                      item.BackColor = Color.FromArgb(188' 209' 199);                      item.ForeColor = Color.White;                  }                    item.Tag = e;                  lvSavingEvent.Items.Add(item);              }
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,DisplaySavingEvent,The following statement contains a magic number: foreach (SavingEvent e in events)              {                  ListViewItem item = new ListViewItem(e.Date.ToString("dd/MM/yyyy HH:mm:ss"));                  item.SubItems.Add(e.Fee.GetFormatedValue(useCents));                  string amt = e.Amount.GetFormatedValue(useCents);                  item.SubItems.Add(e.IsDebit ? amt : string.Empty);                  item.SubItems.Add(e.IsDebit ? string.Empty : amt);                  item.SubItems.Add(e.ExtraInfo);                  item.SubItems.Add(e.Code);                  item.SubItems.Add(e.SavingsMethod.HasValue ? GetString("SavingsOperationForm"' e.SavingsMethod + ".Text") : "-");                  item.SubItems.Add(e.User.Name);                  item.SubItems.Add(e.Description);                  item.SubItems.Add(e.CancelDate.HasValue ? e.CancelDate.Value.ToString("dd/MM/yyyy HH:mm:ss") : string.Empty);                    if (e.IsPending)                  {                      item.BackColor = Color.Orange;                      item.ForeColor = Color.White;                  }                    if (e.Deleted)                  {                      item.BackColor = Color.FromArgb(188' 209' 199);                      item.ForeColor = Color.White;                  }                    item.Tag = e;                  lvSavingEvent.Items.Add(item);              }
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,DisplaySavingEvent,The following statement contains a magic number: foreach (SavingEvent e in events)              {                  ListViewItem item = new ListViewItem(e.Date.ToString("dd/MM/yyyy HH:mm:ss"));                  item.SubItems.Add(e.Fee.GetFormatedValue(useCents));                  string amt = e.Amount.GetFormatedValue(useCents);                  item.SubItems.Add(e.IsDebit ? amt : string.Empty);                  item.SubItems.Add(e.IsDebit ? string.Empty : amt);                  item.SubItems.Add(e.ExtraInfo);                  item.SubItems.Add(e.Code);                  item.SubItems.Add(e.SavingsMethod.HasValue ? GetString("SavingsOperationForm"' e.SavingsMethod + ".Text") : "-");                  item.SubItems.Add(e.User.Name);                  item.SubItems.Add(e.Description);                  item.SubItems.Add(e.CancelDate.HasValue ? e.CancelDate.Value.ToString("dd/MM/yyyy HH:mm:ss") : string.Empty);                    if (e.IsPending)                  {                      item.BackColor = Color.Orange;                      item.ForeColor = Color.White;                  }                    if (e.Deleted)                  {                      item.BackColor = Color.FromArgb(188' 209' 199);                      item.ForeColor = Color.White;                  }                    item.Tag = e;                  lvSavingEvent.Items.Add(item);              }
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,buttonSaveSaving_Click,The following statement contains a magic number: try              {                  _saving = new SavingBookContract(                          ServicesProvider.GetInstance().GetGeneralSettings()'                          User.CurrentUser'                          TimeProvider.Now'                          (SavingsBookProduct)_savingsBookProduct'                          _person)                  {                      InterestRate = Convert.ToDouble(nudDownInterestRate.Value) / 100'                      InitialAmount = nudDownInitialAmount.Value                  };                    var savingBookContract = (SavingBookContract)_saving;                  var savingBookProduct = (SavingsBookProduct)_savingsBookProduct;                    savingBookContract.EntryFees = nudEntryFees.Value;                    if (savingBookProduct.WithdrawFeesType == OSavingsFeesType.Flat)                      savingBookContract.FlatWithdrawFees = nudWithdrawFees.Value;                  else                      savingBookContract.RateWithdrawFees = (double)nudWithdrawFees.Value / 100;                    if (savingBookProduct.TransferFeesType == OSavingsFeesType.Flat)                      savingBookContract.FlatTransferFees = nudTransferFees.Value;                  else                      savingBookContract.RateTransferFees = (double)nudTransferFees.Value / 100;                    if (savingBookProduct.InterBranchTransferFee.IsFlat)                  {                      savingBookContract.FlatInterBranchTransferFee = nudIbtFee.Value;                  }                  else                  {                      savingBookContract.RateInterBranchTransferFee = Convert.ToDouble(nudIbtFee.Value);                  }                    savingBookContract.DepositFees = nudDepositFees.Value;                  savingBookContract.ChequeDepositFees = nudChequeDepositFees.Value;                  savingBookContract.CloseFees = nudCloseFees.Value;                  savingBookContract.ManagementFees = nudManagementFees.Value;                  savingBookContract.OverdraftFees = nudOverdraftFees.Value;                  savingBookContract.AgioFees = (double)nudAgioFees.Value / 100;                  savingBookContract.ReopenFees = nudReopenFees.Value;                  if (savingBookContract.Product.UseTermDeposit)                  {                      savingBookContract.UseTermDeposit = true;                      savingBookContract.NumberOfPeriods = (int)nudNumberOfPeriods.Value;                      savingBookContract.TermDepositPeriodMin = savingBookContract.Product.TermDepositPeriodMin;                      savingBookContract.TermDepositPeriodMax = savingBookContract.Product.TermDepositPeriodMax;                      savingBookContract.TransferAccount = SavingServices.GetSaving(tbTargetAccount2.Text);                      savingBookContract.Rollover =                          (OSavingsRollover)                          Enum.Parse(typeof(OSavingsRollover)' cmbRollover2.SelectedValue.ToString());                  }                    _saving.SavingsOfficer = (User)cmbSavingsOfficer.SelectedItem;                  _saving.Id = SavingServices.SaveContract(_saving' _client' (tx' id) =>                  {                      foreach (var extension in SavingsExtensions) extension.Save(_saving' tx);                  });                  _saving = SavingServices.GetSaving(_saving.Id);                    _client.AddSaving(_saving);                  tBSavingCode.Text = _saving.Code;                  DisplaySaving(_saving);                  DisplaySavings(_client.Savings);                  DisplaySavingEvent(_saving);                  buttonSaveSaving.Visible = false;                  buttonFirstDeposit.Visible = true;              }              catch (OpenCBS.ExceptionsHandler.Exceptions.CustomFieldsExceptions.CustomFieldsAreNotFilledCorrectlyException)              {                }              catch (Exception ex)              {                  new frmShowError(CustomExceptionHandler.ShowExceptionText(ex)).ShowDialog();              }
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,buttonSaveSaving_Click,The following statement contains a magic number: try              {                  _saving = new SavingBookContract(                          ServicesProvider.GetInstance().GetGeneralSettings()'                          User.CurrentUser'                          TimeProvider.Now'                          (SavingsBookProduct)_savingsBookProduct'                          _person)                  {                      InterestRate = Convert.ToDouble(nudDownInterestRate.Value) / 100'                      InitialAmount = nudDownInitialAmount.Value                  };                    var savingBookContract = (SavingBookContract)_saving;                  var savingBookProduct = (SavingsBookProduct)_savingsBookProduct;                    savingBookContract.EntryFees = nudEntryFees.Value;                    if (savingBookProduct.WithdrawFeesType == OSavingsFeesType.Flat)                      savingBookContract.FlatWithdrawFees = nudWithdrawFees.Value;                  else                      savingBookContract.RateWithdrawFees = (double)nudWithdrawFees.Value / 100;                    if (savingBookProduct.TransferFeesType == OSavingsFeesType.Flat)                      savingBookContract.FlatTransferFees = nudTransferFees.Value;                  else                      savingBookContract.RateTransferFees = (double)nudTransferFees.Value / 100;                    if (savingBookProduct.InterBranchTransferFee.IsFlat)                  {                      savingBookContract.FlatInterBranchTransferFee = nudIbtFee.Value;                  }                  else                  {                      savingBookContract.RateInterBranchTransferFee = Convert.ToDouble(nudIbtFee.Value);                  }                    savingBookContract.DepositFees = nudDepositFees.Value;                  savingBookContract.ChequeDepositFees = nudChequeDepositFees.Value;                  savingBookContract.CloseFees = nudCloseFees.Value;                  savingBookContract.ManagementFees = nudManagementFees.Value;                  savingBookContract.OverdraftFees = nudOverdraftFees.Value;                  savingBookContract.AgioFees = (double)nudAgioFees.Value / 100;                  savingBookContract.ReopenFees = nudReopenFees.Value;                  if (savingBookContract.Product.UseTermDeposit)                  {                      savingBookContract.UseTermDeposit = true;                      savingBookContract.NumberOfPeriods = (int)nudNumberOfPeriods.Value;                      savingBookContract.TermDepositPeriodMin = savingBookContract.Product.TermDepositPeriodMin;                      savingBookContract.TermDepositPeriodMax = savingBookContract.Product.TermDepositPeriodMax;                      savingBookContract.TransferAccount = SavingServices.GetSaving(tbTargetAccount2.Text);                      savingBookContract.Rollover =                          (OSavingsRollover)                          Enum.Parse(typeof(OSavingsRollover)' cmbRollover2.SelectedValue.ToString());                  }                    _saving.SavingsOfficer = (User)cmbSavingsOfficer.SelectedItem;                  _saving.Id = SavingServices.SaveContract(_saving' _client' (tx' id) =>                  {                      foreach (var extension in SavingsExtensions) extension.Save(_saving' tx);                  });                  _saving = SavingServices.GetSaving(_saving.Id);                    _client.AddSaving(_saving);                  tBSavingCode.Text = _saving.Code;                  DisplaySaving(_saving);                  DisplaySavings(_client.Savings);                  DisplaySavingEvent(_saving);                  buttonSaveSaving.Visible = false;                  buttonFirstDeposit.Visible = true;              }              catch (OpenCBS.ExceptionsHandler.Exceptions.CustomFieldsExceptions.CustomFieldsAreNotFilledCorrectlyException)              {                }              catch (Exception ex)              {                  new frmShowError(CustomExceptionHandler.ShowExceptionText(ex)).ShowDialog();              }
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,buttonSaveSaving_Click,The following statement contains a magic number: try              {                  _saving = new SavingBookContract(                          ServicesProvider.GetInstance().GetGeneralSettings()'                          User.CurrentUser'                          TimeProvider.Now'                          (SavingsBookProduct)_savingsBookProduct'                          _person)                  {                      InterestRate = Convert.ToDouble(nudDownInterestRate.Value) / 100'                      InitialAmount = nudDownInitialAmount.Value                  };                    var savingBookContract = (SavingBookContract)_saving;                  var savingBookProduct = (SavingsBookProduct)_savingsBookProduct;                    savingBookContract.EntryFees = nudEntryFees.Value;                    if (savingBookProduct.WithdrawFeesType == OSavingsFeesType.Flat)                      savingBookContract.FlatWithdrawFees = nudWithdrawFees.Value;                  else                      savingBookContract.RateWithdrawFees = (double)nudWithdrawFees.Value / 100;                    if (savingBookProduct.TransferFeesType == OSavingsFeesType.Flat)                      savingBookContract.FlatTransferFees = nudTransferFees.Value;                  else                      savingBookContract.RateTransferFees = (double)nudTransferFees.Value / 100;                    if (savingBookProduct.InterBranchTransferFee.IsFlat)                  {                      savingBookContract.FlatInterBranchTransferFee = nudIbtFee.Value;                  }                  else                  {                      savingBookContract.RateInterBranchTransferFee = Convert.ToDouble(nudIbtFee.Value);                  }                    savingBookContract.DepositFees = nudDepositFees.Value;                  savingBookContract.ChequeDepositFees = nudChequeDepositFees.Value;                  savingBookContract.CloseFees = nudCloseFees.Value;                  savingBookContract.ManagementFees = nudManagementFees.Value;                  savingBookContract.OverdraftFees = nudOverdraftFees.Value;                  savingBookContract.AgioFees = (double)nudAgioFees.Value / 100;                  savingBookContract.ReopenFees = nudReopenFees.Value;                  if (savingBookContract.Product.UseTermDeposit)                  {                      savingBookContract.UseTermDeposit = true;                      savingBookContract.NumberOfPeriods = (int)nudNumberOfPeriods.Value;                      savingBookContract.TermDepositPeriodMin = savingBookContract.Product.TermDepositPeriodMin;                      savingBookContract.TermDepositPeriodMax = savingBookContract.Product.TermDepositPeriodMax;                      savingBookContract.TransferAccount = SavingServices.GetSaving(tbTargetAccount2.Text);                      savingBookContract.Rollover =                          (OSavingsRollover)                          Enum.Parse(typeof(OSavingsRollover)' cmbRollover2.SelectedValue.ToString());                  }                    _saving.SavingsOfficer = (User)cmbSavingsOfficer.SelectedItem;                  _saving.Id = SavingServices.SaveContract(_saving' _client' (tx' id) =>                  {                      foreach (var extension in SavingsExtensions) extension.Save(_saving' tx);                  });                  _saving = SavingServices.GetSaving(_saving.Id);                    _client.AddSaving(_saving);                  tBSavingCode.Text = _saving.Code;                  DisplaySaving(_saving);                  DisplaySavings(_client.Savings);                  DisplaySavingEvent(_saving);                  buttonSaveSaving.Visible = false;                  buttonFirstDeposit.Visible = true;              }              catch (OpenCBS.ExceptionsHandler.Exceptions.CustomFieldsExceptions.CustomFieldsAreNotFilledCorrectlyException)              {                }              catch (Exception ex)              {                  new frmShowError(CustomExceptionHandler.ShowExceptionText(ex)).ShowDialog();              }
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,buttonSaveSaving_Click,The following statement contains a magic number: try              {                  _saving = new SavingBookContract(                          ServicesProvider.GetInstance().GetGeneralSettings()'                          User.CurrentUser'                          TimeProvider.Now'                          (SavingsBookProduct)_savingsBookProduct'                          _person)                  {                      InterestRate = Convert.ToDouble(nudDownInterestRate.Value) / 100'                      InitialAmount = nudDownInitialAmount.Value                  };                    var savingBookContract = (SavingBookContract)_saving;                  var savingBookProduct = (SavingsBookProduct)_savingsBookProduct;                    savingBookContract.EntryFees = nudEntryFees.Value;                    if (savingBookProduct.WithdrawFeesType == OSavingsFeesType.Flat)                      savingBookContract.FlatWithdrawFees = nudWithdrawFees.Value;                  else                      savingBookContract.RateWithdrawFees = (double)nudWithdrawFees.Value / 100;                    if (savingBookProduct.TransferFeesType == OSavingsFeesType.Flat)                      savingBookContract.FlatTransferFees = nudTransferFees.Value;                  else                      savingBookContract.RateTransferFees = (double)nudTransferFees.Value / 100;                    if (savingBookProduct.InterBranchTransferFee.IsFlat)                  {                      savingBookContract.FlatInterBranchTransferFee = nudIbtFee.Value;                  }                  else                  {                      savingBookContract.RateInterBranchTransferFee = Convert.ToDouble(nudIbtFee.Value);                  }                    savingBookContract.DepositFees = nudDepositFees.Value;                  savingBookContract.ChequeDepositFees = nudChequeDepositFees.Value;                  savingBookContract.CloseFees = nudCloseFees.Value;                  savingBookContract.ManagementFees = nudManagementFees.Value;                  savingBookContract.OverdraftFees = nudOverdraftFees.Value;                  savingBookContract.AgioFees = (double)nudAgioFees.Value / 100;                  savingBookContract.ReopenFees = nudReopenFees.Value;                  if (savingBookContract.Product.UseTermDeposit)                  {                      savingBookContract.UseTermDeposit = true;                      savingBookContract.NumberOfPeriods = (int)nudNumberOfPeriods.Value;                      savingBookContract.TermDepositPeriodMin = savingBookContract.Product.TermDepositPeriodMin;                      savingBookContract.TermDepositPeriodMax = savingBookContract.Product.TermDepositPeriodMax;                      savingBookContract.TransferAccount = SavingServices.GetSaving(tbTargetAccount2.Text);                      savingBookContract.Rollover =                          (OSavingsRollover)                          Enum.Parse(typeof(OSavingsRollover)' cmbRollover2.SelectedValue.ToString());                  }                    _saving.SavingsOfficer = (User)cmbSavingsOfficer.SelectedItem;                  _saving.Id = SavingServices.SaveContract(_saving' _client' (tx' id) =>                  {                      foreach (var extension in SavingsExtensions) extension.Save(_saving' tx);                  });                  _saving = SavingServices.GetSaving(_saving.Id);                    _client.AddSaving(_saving);                  tBSavingCode.Text = _saving.Code;                  DisplaySaving(_saving);                  DisplaySavings(_client.Savings);                  DisplaySavingEvent(_saving);                  buttonSaveSaving.Visible = false;                  buttonFirstDeposit.Visible = true;              }              catch (OpenCBS.ExceptionsHandler.Exceptions.CustomFieldsExceptions.CustomFieldsAreNotFilledCorrectlyException)              {                }              catch (Exception ex)              {                  new frmShowError(CustomExceptionHandler.ShowExceptionText(ex)).ShowDialog();              }
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitializeLoanShares,The following statement contains a magic number: decimal amt = _credit.Product.UseCents                        ? Math.Round(share' 2' MidpointRounding.AwayFromZero)                        : Math.Floor(share);
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,textBoxLoanAnticipatedPartialFees_Leave,The following statement contains a magic number: CheckAnticipatedFees(2);
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,textBoxLocAmount_KeyPress,The following statement contains a magic number: if ((keyCode >= 48 && keyCode <= 57) || (keyCode == 8) || (Char.IsControl(e.KeyChar) && e.KeyChar                  != ((char)Keys.V | (char)Keys.ControlKey)) || (Char.IsControl(e.KeyChar) && e.KeyChar !=                  ((char)Keys.C | (char)Keys.ControlKey))                  || (e.KeyChar.ToString() == NumberFormatInfo.CurrentInfo.NumberDecimalSeparator))              {                  e.Handled = false;              }              else                  e.Handled = true;
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,textBoxLocAmount_KeyPress,The following statement contains a magic number: if ((keyCode >= 48 && keyCode <= 57) || (keyCode == 8) || (Char.IsControl(e.KeyChar) && e.KeyChar                  != ((char)Keys.V | (char)Keys.ControlKey)) || (Char.IsControl(e.KeyChar) && e.KeyChar !=                  ((char)Keys.C | (char)Keys.ControlKey))                  || (e.KeyChar.ToString() == NumberFormatInfo.CurrentInfo.NumberDecimalSeparator))              {                  e.Handled = false;              }              else                  e.Handled = true;
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,textBoxLocAmount_KeyPress,The following statement contains a magic number: if ((keyCode >= 48 && keyCode <= 57) || (keyCode == 8) || (Char.IsControl(e.KeyChar) && e.KeyChar                  != ((char)Keys.V | (char)Keys.ControlKey)) || (Char.IsControl(e.KeyChar) && e.KeyChar !=                  ((char)Keys.C | (char)Keys.ControlKey))                  || (e.KeyChar.ToString() == NumberFormatInfo.CurrentInfo.NumberDecimalSeparator))              {                  e.Handled = false;              }              else                  e.Handled = true;
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,DisplayCollateral,The following statement contains a magic number: foreach (ContractCollateral selectedCollateral in _collaterals)              {                  CollateralProduct collateralProduct =                      ServicesProvider.GetInstance().GetCollateralProductServices().SelectCollateralProductByPropertyId(selectedCollateral.PropertyValues[0].Property.Id);                    OCurrency selectedCollateralAmount = 0;                  foreach (CollateralPropertyValue propertyValue in selectedCollateral.PropertyValues)                      if (propertyValue.Property.Name.Equals(GetString("FrmAddCollateralProduct"' "propertyAmount")) ||                          propertyValue.Property.Name.Equals("Montant") || propertyValue.Property.Name.Equals("Сумма") || propertyValue.Property.Name.Equals("Amount"))                          selectedCollateralAmount = new OCurrency(Converter.CustomFieldValueToDecimal(propertyValue.Value));                    string selectedCollateralDescription = string.Empty;                  foreach (CollateralPropertyValue propertyValue in selectedCollateral.PropertyValues)                      if (propertyValue.Property.Name.Equals(GetString("FrmAddCollateralProduct"' "propertyDescription")) ||                          propertyValue.Property.Name.Equals("Description") || propertyValue.Property.Name.Equals("Описание"))                          selectedCollateralDescription = propertyValue.Value;                    var listViewItem = new ListViewItem(collateralProduct.Name) { Tag = selectedCollateral };                  listViewItem.SubItems.Add(selectedCollateralAmount.GetFormatedValue(_credit.UseCents));                  if (_credit.Amount.HasValue)                      listViewItem.SubItems.Add((selectedCollateralAmount / _credit.Amount * (double)100).ToString());                  else                      listViewItem.SubItems.Add("-");                  listViewItem.SubItems.Add(selectedCollateralDescription);                    _totalCollateralAmount += selectedCollateralAmount;                  totalCollateralAmountPercent += selectedCollateralAmount / _credit.Amount * (double)100;                    listViewCollaterals.Items.Add(listViewItem);              }
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,DisplayCollateral,The following statement contains a magic number: foreach (ContractCollateral selectedCollateral in _collaterals)              {                  CollateralProduct collateralProduct =                      ServicesProvider.GetInstance().GetCollateralProductServices().SelectCollateralProductByPropertyId(selectedCollateral.PropertyValues[0].Property.Id);                    OCurrency selectedCollateralAmount = 0;                  foreach (CollateralPropertyValue propertyValue in selectedCollateral.PropertyValues)                      if (propertyValue.Property.Name.Equals(GetString("FrmAddCollateralProduct"' "propertyAmount")) ||                          propertyValue.Property.Name.Equals("Montant") || propertyValue.Property.Name.Equals("Сумма") || propertyValue.Property.Name.Equals("Amount"))                          selectedCollateralAmount = new OCurrency(Converter.CustomFieldValueToDecimal(propertyValue.Value));                    string selectedCollateralDescription = string.Empty;                  foreach (CollateralPropertyValue propertyValue in selectedCollateral.PropertyValues)                      if (propertyValue.Property.Name.Equals(GetString("FrmAddCollateralProduct"' "propertyDescription")) ||                          propertyValue.Property.Name.Equals("Description") || propertyValue.Property.Name.Equals("Описание"))                          selectedCollateralDescription = propertyValue.Value;                    var listViewItem = new ListViewItem(collateralProduct.Name) { Tag = selectedCollateral };                  listViewItem.SubItems.Add(selectedCollateralAmount.GetFormatedValue(_credit.UseCents));                  if (_credit.Amount.HasValue)                      listViewItem.SubItems.Add((selectedCollateralAmount / _credit.Amount * (double)100).ToString());                  else                      listViewItem.SubItems.Add("-");                  listViewItem.SubItems.Add(selectedCollateralDescription);                    _totalCollateralAmount += selectedCollateralAmount;                  totalCollateralAmountPercent += selectedCollateralAmount / _credit.Amount * (double)100;                    listViewCollaterals.Items.Add(listViewItem);              }
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,lvEntryFees_SubItemClicked,The following statement contains a magic number: if (_credit.Product.Currency.UseCents || ((LoanEntryFee)e.Item.Tag).ProductEntryFee.IsRate)              {                  numEntryFees.DecimalPlaces = 2;                  numEntryFees.Increment = (decimal)0.01;              }
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,lvEntryFees_SubItemClicked,The following statement contains a magic number: if (_credit.Product.Currency.UseCents || ((LoanEntryFee)e.Item.Tag).ProductEntryFee.IsRate)              {                  numEntryFees.DecimalPlaces = 2;                  numEntryFees.Increment = (decimal)0.01;              }
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,ShowTotalFeesInListView,The following statement contains a magic number: item.SubItems[3].Text = total.GetFormatedValue(_credit.Product.Currency.UseCents) + @" " + _credit.Product.Currency.Code;
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,lvEntryFees_SubItemEndEditing,The following statement contains a magic number: foreach (ListViewItem item in lvEntryFees.Items)              {                  if (item.Tag is LoanEntryFee)                  {                      _credit.LoanEntryFeesList.Add((LoanEntryFee)item.Tag);                      if (e.Item.Index == item.Index)                      {                          ((LoanEntryFee)item.Tag).FeeValue = inputFee.Value;                          if (((LoanEntryFee)item.Tag).ProductEntryFee.IsRate)                          {                              OCurrency feeAmount = loanAmount * inputFee / 100;                              item.SubItems[3].Text = feeAmount.GetFormatedValue(_credit.Product.Currency.UseCents);                          }                          else                          {                              OCurrency feeAmount = inputFee;                              item.SubItems[3].Text = feeAmount.GetFormatedValue(_credit.Product.Currency.UseCents);                          }                      }                  }                  else if (item.Tag.Equals("TotalFees"))                  {                      ShowTotalFeesInListView(item);                  }              }
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,lvEntryFees_SubItemEndEditing,The following statement contains a magic number: foreach (ListViewItem item in lvEntryFees.Items)              {                  if (item.Tag is LoanEntryFee)                  {                      _credit.LoanEntryFeesList.Add((LoanEntryFee)item.Tag);                      if (e.Item.Index == item.Index)                      {                          ((LoanEntryFee)item.Tag).FeeValue = inputFee.Value;                          if (((LoanEntryFee)item.Tag).ProductEntryFee.IsRate)                          {                              OCurrency feeAmount = loanAmount * inputFee / 100;                              item.SubItems[3].Text = feeAmount.GetFormatedValue(_credit.Product.Currency.UseCents);                          }                          else                          {                              OCurrency feeAmount = inputFee;                              item.SubItems[3].Text = feeAmount.GetFormatedValue(_credit.Product.Currency.UseCents);                          }                      }                  }                  else if (item.Tag.Equals("TotalFees"))                  {                      ShowTotalFeesInListView(item);                  }              }
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,lvEntryFees_SubItemEndEditing,The following statement contains a magic number: foreach (ListViewItem item in lvEntryFees.Items)              {                  if (item.Tag is LoanEntryFee)                  {                      _credit.LoanEntryFeesList.Add((LoanEntryFee)item.Tag);                      if (e.Item.Index == item.Index)                      {                          ((LoanEntryFee)item.Tag).FeeValue = inputFee.Value;                          if (((LoanEntryFee)item.Tag).ProductEntryFee.IsRate)                          {                              OCurrency feeAmount = loanAmount * inputFee / 100;                              item.SubItems[3].Text = feeAmount.GetFormatedValue(_credit.Product.Currency.UseCents);                          }                          else                          {                              OCurrency feeAmount = inputFee;                              item.SubItems[3].Text = feeAmount.GetFormatedValue(_credit.Product.Currency.UseCents);                          }                      }                  }                  else if (item.Tag.Equals("TotalFees"))                  {                      ShowTotalFeesInListView(item);                  }              }
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,nudLoanAmount_ValueChanged,The following statement contains a magic number: if (_credit != null)              {                  if (nudLoanAmount.Enabled)                  {                      btnSaveLoan.Enabled = true;                      _credit.ScheduleChangedManually = false;                      decimal loanAmount;                      if (decimal.TryParse(nudLoanAmount.Text' out loanAmount))                          amount = ServicesHelper.ConvertStringToDecimal(nudLoanAmount.Text' 0' _credit.Product.UseCents);                      else                      {                          btnSaveLoan.Enabled = false;                          return;                      }                  }                    if (_credit.LoanEntryFeesList != null)                  {                      _credit.LoanEntryFeesList.Clear();                        foreach (ListViewItem item in lvEntryFees.Items)                      {                          if (item.Tag is LoanEntryFee)                          {                              _credit.LoanEntryFeesList.Add((LoanEntryFee)item.Tag);                          }                          else if (item.Tag.Equals("TotalFees"))                              ShowTotalFeesInListView(item);                      }                        foreach (ListViewItem item in lvEntryFees.Items)                      {                          if (item.Tag is LoanEntryFee)                          {                              LoanEntryFee entryFee = (LoanEntryFee)item.Tag;                              if (entryFee.ProductEntryFee.IsRate)                              {                                  OCurrency feeAmount = amount * entryFee.FeeValue / 100;                                  item.SubItems[3].Text = feeAmount.GetFormatedValue(_credit.Product.Currency.UseCents);                              }                              else                              {                                  OCurrency feeAmount = entryFee.FeeValue;                                  item.SubItems[3].Text = feeAmount.GetFormatedValue(_credit.Product.Currency.UseCents);                              }                          }                      }                  }              }
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,nudLoanAmount_ValueChanged,The following statement contains a magic number: if (_credit != null)              {                  if (nudLoanAmount.Enabled)                  {                      btnSaveLoan.Enabled = true;                      _credit.ScheduleChangedManually = false;                      decimal loanAmount;                      if (decimal.TryParse(nudLoanAmount.Text' out loanAmount))                          amount = ServicesHelper.ConvertStringToDecimal(nudLoanAmount.Text' 0' _credit.Product.UseCents);                      else                      {                          btnSaveLoan.Enabled = false;                          return;                      }                  }                    if (_credit.LoanEntryFeesList != null)                  {                      _credit.LoanEntryFeesList.Clear();                        foreach (ListViewItem item in lvEntryFees.Items)                      {                          if (item.Tag is LoanEntryFee)                          {                              _credit.LoanEntryFeesList.Add((LoanEntryFee)item.Tag);                          }                          else if (item.Tag.Equals("TotalFees"))                              ShowTotalFeesInListView(item);                      }                        foreach (ListViewItem item in lvEntryFees.Items)                      {                          if (item.Tag is LoanEntryFee)                          {                              LoanEntryFee entryFee = (LoanEntryFee)item.Tag;                              if (entryFee.ProductEntryFee.IsRate)                              {                                  OCurrency feeAmount = amount * entryFee.FeeValue / 100;                                  item.SubItems[3].Text = feeAmount.GetFormatedValue(_credit.Product.Currency.UseCents);                              }                              else                              {                                  OCurrency feeAmount = entryFee.FeeValue;                                  item.SubItems[3].Text = feeAmount.GetFormatedValue(_credit.Product.Currency.UseCents);                              }                          }                      }                  }              }
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,nudLoanAmount_ValueChanged,The following statement contains a magic number: if (_credit != null)              {                  if (nudLoanAmount.Enabled)                  {                      btnSaveLoan.Enabled = true;                      _credit.ScheduleChangedManually = false;                      decimal loanAmount;                      if (decimal.TryParse(nudLoanAmount.Text' out loanAmount))                          amount = ServicesHelper.ConvertStringToDecimal(nudLoanAmount.Text' 0' _credit.Product.UseCents);                      else                      {                          btnSaveLoan.Enabled = false;                          return;                      }                  }                    if (_credit.LoanEntryFeesList != null)                  {                      _credit.LoanEntryFeesList.Clear();                        foreach (ListViewItem item in lvEntryFees.Items)                      {                          if (item.Tag is LoanEntryFee)                          {                              _credit.LoanEntryFeesList.Add((LoanEntryFee)item.Tag);                          }                          else if (item.Tag.Equals("TotalFees"))                              ShowTotalFeesInListView(item);                      }                        foreach (ListViewItem item in lvEntryFees.Items)                      {                          if (item.Tag is LoanEntryFee)                          {                              LoanEntryFee entryFee = (LoanEntryFee)item.Tag;                              if (entryFee.ProductEntryFee.IsRate)                              {                                  OCurrency feeAmount = amount * entryFee.FeeValue / 100;                                  item.SubItems[3].Text = feeAmount.GetFormatedValue(_credit.Product.Currency.UseCents);                              }                              else                              {                                  OCurrency feeAmount = entryFee.FeeValue;                                  item.SubItems[3].Text = feeAmount.GetFormatedValue(_credit.Product.Currency.UseCents);                              }                          }                      }                  }              }
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,buttonSavingsOperations_Click,The following statement contains a magic number: point.X -= 12;
Magic Number,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,buttonSavingsOperations_Click,The following statement contains a magic number: point.Y -= 23;
Magic Number,OpenCBS.GUI.Clients,MembersOfGroup,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\MembersOfGroup.cs,MembersOfGroup,The following statement contains a magic number: int roundTo = _loan.UseCents ? 2 : 0;
Magic Number,OpenCBS.GUI.Clients,MembersOfGroup,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\MembersOfGroup.cs,InitializeComponent,The following statement contains a magic number: this.listViewMembers.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56)))));
Magic Number,OpenCBS.GUI.Clients,MembersOfGroup,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\MembersOfGroup.cs,InitializeComponent,The following statement contains a magic number: this.listViewMembers.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56)))));
Magic Number,OpenCBS.GUI.Clients,NonSolidaryGroupForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\NonSolidaryGroupForm.cs,GetDayOfWeek,The following statement contains a magic number: switch (cmbWeekDay.SelectedIndex)              {                  case 0: dayOfWeek = DayOfWeek.Sunday;                      break;                  case 1: dayOfWeek = DayOfWeek.Monday;                      break;                  case 2: dayOfWeek = DayOfWeek.Tuesday;                      break;                  case 3: dayOfWeek = DayOfWeek.Wednesday;                      break;                  case 4: dayOfWeek = DayOfWeek.Thursday;                      break;                  case 5: dayOfWeek = DayOfWeek.Friday;                      break;                  case 6: dayOfWeek = DayOfWeek.Saturday;                      break;              }
Magic Number,OpenCBS.GUI.Clients,NonSolidaryGroupForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\NonSolidaryGroupForm.cs,GetDayOfWeek,The following statement contains a magic number: switch (cmbWeekDay.SelectedIndex)              {                  case 0: dayOfWeek = DayOfWeek.Sunday;                      break;                  case 1: dayOfWeek = DayOfWeek.Monday;                      break;                  case 2: dayOfWeek = DayOfWeek.Tuesday;                      break;                  case 3: dayOfWeek = DayOfWeek.Wednesday;                      break;                  case 4: dayOfWeek = DayOfWeek.Thursday;                      break;                  case 5: dayOfWeek = DayOfWeek.Friday;                      break;                  case 6: dayOfWeek = DayOfWeek.Saturday;                      break;              }
Magic Number,OpenCBS.GUI.Clients,NonSolidaryGroupForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\NonSolidaryGroupForm.cs,GetDayOfWeek,The following statement contains a magic number: switch (cmbWeekDay.SelectedIndex)              {                  case 0: dayOfWeek = DayOfWeek.Sunday;                      break;                  case 1: dayOfWeek = DayOfWeek.Monday;                      break;                  case 2: dayOfWeek = DayOfWeek.Tuesday;                      break;                  case 3: dayOfWeek = DayOfWeek.Wednesday;                      break;                  case 4: dayOfWeek = DayOfWeek.Thursday;                      break;                  case 5: dayOfWeek = DayOfWeek.Friday;                      break;                  case 6: dayOfWeek = DayOfWeek.Saturday;                      break;              }
Magic Number,OpenCBS.GUI.Clients,NonSolidaryGroupForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\NonSolidaryGroupForm.cs,GetDayOfWeek,The following statement contains a magic number: switch (cmbWeekDay.SelectedIndex)              {                  case 0: dayOfWeek = DayOfWeek.Sunday;                      break;                  case 1: dayOfWeek = DayOfWeek.Monday;                      break;                  case 2: dayOfWeek = DayOfWeek.Tuesday;                      break;                  case 3: dayOfWeek = DayOfWeek.Wednesday;                      break;                  case 4: dayOfWeek = DayOfWeek.Thursday;                      break;                  case 5: dayOfWeek = DayOfWeek.Friday;                      break;                  case 6: dayOfWeek = DayOfWeek.Saturday;                      break;              }
Magic Number,OpenCBS.GUI.Clients,NonSolidaryGroupForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\NonSolidaryGroupForm.cs,GetDayOfWeek,The following statement contains a magic number: switch (cmbWeekDay.SelectedIndex)              {                  case 0: dayOfWeek = DayOfWeek.Sunday;                      break;                  case 1: dayOfWeek = DayOfWeek.Monday;                      break;                  case 2: dayOfWeek = DayOfWeek.Tuesday;                      break;                  case 3: dayOfWeek = DayOfWeek.Wednesday;                      break;                  case 4: dayOfWeek = DayOfWeek.Thursday;                      break;                  case 5: dayOfWeek = DayOfWeek.Friday;                      break;                  case 6: dayOfWeek = DayOfWeek.Saturday;                      break;              }
Magic Number,OpenCBS.GUI.Clients,NonSolidaryGroupForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\NonSolidaryGroupForm.cs,ShowAllMembers,The following statement contains a magic number: foreach (VillageMember member in _village.MemberHistory.OrderBy(i => i.Tiers.Name))              {                  member.ActiveLoans = ServicesProvider.GetInstance().GetContractServices().FindActiveContracts(member.Tiers.Id);                  Person person = (Person)member.Tiers;                  ListViewItem item = new ListViewItem(person.Name) { Tag = member };                  item.SubItems.Add(person.LoanCycle.ToString());                  item.SubItems.Add(person.IdentificationData);                    item.SubItems.Add(person.Active ? activeClient : inActiveClient);                  item.SubItems.Add(member.JoinedDate.ToShortDateString());                  if (_village.Leader != null)                  {                      if (member.LeftDate != null && member.CurrentlyIn == false)                      {                          item.SubItems.Add(member.LeftDate.Value.ToShortDateString());                          item.BackColor = Color.Red;                      }                      else if (person.Id == _village.Leader.Tiers.Id)                      {                          item.BackColor = Color.FromArgb(0' 88' 56);                          item.ForeColor = Color.White;                      }                      else                          item.BackColor = Color.White;                  }                    lvMembers.Items.Add(item);              }
Magic Number,OpenCBS.GUI.Clients,NonSolidaryGroupForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\NonSolidaryGroupForm.cs,ShowAllMembers,The following statement contains a magic number: foreach (VillageMember member in _village.MemberHistory.OrderBy(i => i.Tiers.Name))              {                  member.ActiveLoans = ServicesProvider.GetInstance().GetContractServices().FindActiveContracts(member.Tiers.Id);                  Person person = (Person)member.Tiers;                  ListViewItem item = new ListViewItem(person.Name) { Tag = member };                  item.SubItems.Add(person.LoanCycle.ToString());                  item.SubItems.Add(person.IdentificationData);                    item.SubItems.Add(person.Active ? activeClient : inActiveClient);                  item.SubItems.Add(member.JoinedDate.ToShortDateString());                  if (_village.Leader != null)                  {                      if (member.LeftDate != null && member.CurrentlyIn == false)                      {                          item.SubItems.Add(member.LeftDate.Value.ToShortDateString());                          item.BackColor = Color.Red;                      }                      else if (person.Id == _village.Leader.Tiers.Id)                      {                          item.BackColor = Color.FromArgb(0' 88' 56);                          item.ForeColor = Color.White;                      }                      else                          item.BackColor = Color.White;                  }                    lvMembers.Items.Add(item);              }
Magic Number,OpenCBS.GUI.Clients,NonSolidaryGroupForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\NonSolidaryGroupForm.cs,ShowCurrentMembers,The following statement contains a magic number: foreach (VillageMember member in _village.Members.OrderBy(i => i.Tiers.Name))              {                  //                member.ActiveLoans =                  //                    ServicesProvider.GetInstance().GetContractServices().FindActiveContracts(member.Tiers.Id);                  Person person = (Person)member.Tiers;                  ListViewItem item = new ListViewItem(person.Name) { Tag = member };                  item.SubItems.Add(person.LoanCycle.ToString());                  item.SubItems.Add(person.IdentificationData);                    item.SubItems.Add(person.Active ? activeClient : inActiveClient);                  item.SubItems.Add(member.JoinedDate.ToShortDateString());                    if (_village.Leader != null)                  {                      if (person.Id == _village.Leader.Tiers.Id)                      {                          item.BackColor = Color.FromArgb(0' 88' 56);                          item.ForeColor = Color.White;                      }                      else                          item.BackColor = Color.White;                  }                    lvMembers.Items.Add(item);              }
Magic Number,OpenCBS.GUI.Clients,NonSolidaryGroupForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\NonSolidaryGroupForm.cs,ShowCurrentMembers,The following statement contains a magic number: foreach (VillageMember member in _village.Members.OrderBy(i => i.Tiers.Name))              {                  //                member.ActiveLoans =                  //                    ServicesProvider.GetInstance().GetContractServices().FindActiveContracts(member.Tiers.Id);                  Person person = (Person)member.Tiers;                  ListViewItem item = new ListViewItem(person.Name) { Tag = member };                  item.SubItems.Add(person.LoanCycle.ToString());                  item.SubItems.Add(person.IdentificationData);                    item.SubItems.Add(person.Active ? activeClient : inActiveClient);                  item.SubItems.Add(member.JoinedDate.ToShortDateString());                    if (_village.Leader != null)                  {                      if (person.Id == _village.Leader.Tiers.Id)                      {                          item.BackColor = Color.FromArgb(0' 88' 56);                          item.ForeColor = Color.White;                      }                      else                          item.BackColor = Color.White;                  }                    lvMembers.Items.Add(item);              }
Magic Number,OpenCBS.GUI.Clients,NonSolidaryGroupForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\NonSolidaryGroupForm.cs,buttonUpdateAttendence_Click,The following statement contains a magic number: foreach (OLVListItem item in olvAttendees.Items)              {                  VillageAttendee attendee = new VillageAttendee();                    attendee.Id = Convert.ToInt32(item.SubItems[0].Text);                  attendee.VillageId = _village.Id;                  attendee.TiersId = Convert.ToInt32(item.SubItems[1].Text);                  attendee.AttendedDate = ((DateTime)this.comboBoxMeetingDates.SelectedValue).Date;                  attendee.Attended = Convert.ToBoolean(item.SubItems[3].Text);                  attendee.Comment = item.SubItems[4].Text;                  attendee.LoanId = Convert.ToInt32(item.SubItems[5].Text);                  ServicesProvider.GetInstance().GetContractServices().UpdateMeetingAttendees(attendee);                  item.SubItems[0].Text = attendee.Id.ToString();              }
Magic Number,OpenCBS.GUI.Clients,NonSolidaryGroupForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\NonSolidaryGroupForm.cs,buttonUpdateAttendence_Click,The following statement contains a magic number: foreach (OLVListItem item in olvAttendees.Items)              {                  VillageAttendee attendee = new VillageAttendee();                    attendee.Id = Convert.ToInt32(item.SubItems[0].Text);                  attendee.VillageId = _village.Id;                  attendee.TiersId = Convert.ToInt32(item.SubItems[1].Text);                  attendee.AttendedDate = ((DateTime)this.comboBoxMeetingDates.SelectedValue).Date;                  attendee.Attended = Convert.ToBoolean(item.SubItems[3].Text);                  attendee.Comment = item.SubItems[4].Text;                  attendee.LoanId = Convert.ToInt32(item.SubItems[5].Text);                  ServicesProvider.GetInstance().GetContractServices().UpdateMeetingAttendees(attendee);                  item.SubItems[0].Text = attendee.Id.ToString();              }
Magic Number,OpenCBS.GUI.Clients,NonSolidaryGroupForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\NonSolidaryGroupForm.cs,buttonUpdateAttendence_Click,The following statement contains a magic number: foreach (OLVListItem item in olvAttendees.Items)              {                  VillageAttendee attendee = new VillageAttendee();                    attendee.Id = Convert.ToInt32(item.SubItems[0].Text);                  attendee.VillageId = _village.Id;                  attendee.TiersId = Convert.ToInt32(item.SubItems[1].Text);                  attendee.AttendedDate = ((DateTime)this.comboBoxMeetingDates.SelectedValue).Date;                  attendee.Attended = Convert.ToBoolean(item.SubItems[3].Text);                  attendee.Comment = item.SubItems[4].Text;                  attendee.LoanId = Convert.ToInt32(item.SubItems[5].Text);                  ServicesProvider.GetInstance().GetContractServices().UpdateMeetingAttendees(attendee);                  item.SubItems[0].Text = attendee.Id.ToString();              }
Magic Number,OpenCBS.GUI.Clients,NonSolidaryGroupForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\NonSolidaryGroupForm.cs,InitializeComponent,The following statement contains a magic number: this.panelNSGDetails.Controls.Add(this.cbBranch' 1' 4);
Magic Number,OpenCBS.GUI.Clients,NonSolidaryGroupForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\NonSolidaryGroupForm.cs,InitializeComponent,The following statement contains a magic number: this.panelNSGDetails.Controls.Add(this.lblBranch' 0' 4);
Magic Number,OpenCBS.GUI.Clients,NonSolidaryGroupForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\NonSolidaryGroupForm.cs,InitializeComponent,The following statement contains a magic number: this.panelNSGDetails.Controls.Add(this.lblWeekDay' 0' 3);
Magic Number,OpenCBS.GUI.Clients,NonSolidaryGroupForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\NonSolidaryGroupForm.cs,InitializeComponent,The following statement contains a magic number: this.panelNSGDetails.Controls.Add(this.lblLoanOfficer' 0' 2);
Magic Number,OpenCBS.GUI.Clients,NonSolidaryGroupForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\NonSolidaryGroupForm.cs,InitializeComponent,The following statement contains a magic number: this.panelNSGDetails.Controls.Add(this.cbLoanOfficers' 1' 2);
Magic Number,OpenCBS.GUI.Clients,NonSolidaryGroupForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\NonSolidaryGroupForm.cs,InitializeComponent,The following statement contains a magic number: this.panelNSGDetails.Controls.Add(this.cmbWeekDay' 1' 3);
Magic Number,OpenCBS.GUI.Clients,NonSolidaryGroupForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\NonSolidaryGroupForm.cs,InitializeComponent,The following statement contains a magic number: this.panelNSGDetails.Controls.Add(this.cbMeetingDay' 2' 3);
Magic Number,OpenCBS.GUI.Clients,NonSolidaryGroupForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\NonSolidaryGroupForm.cs,InitializeComponent,The following statement contains a magic number: this.panelNSGDetails.Controls.Add(this.cbMeetingDay' 2' 3);
Magic Number,OpenCBS.GUI.Clients,NonSolidaryGroupForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\NonSolidaryGroupForm.cs,InitializeComponent,The following statement contains a magic number: this.panelNSGDetails.SetColumnSpan(this.tbName' 2);
Magic Number,OpenCBS.GUI.Clients,NonSolidaryGroupForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\NonSolidaryGroupForm.cs,InitializeComponent,The following statement contains a magic number: this.panelNSGDetails.SetColumnSpan(this.dtDate' 2);
Magic Number,OpenCBS.GUI.Clients,NonSolidaryGroupForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\NonSolidaryGroupForm.cs,InitializeComponent,The following statement contains a magic number: this.panelNSGDetails.SetColumnSpan(this.cbLoanOfficers' 2);
Magic Number,OpenCBS.GUI.Clients,NonSolidaryGroupForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\NonSolidaryGroupForm.cs,InitializeComponent,The following statement contains a magic number: this.pictureBox2.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(224))))' ((int)(((byte)(224))))' ((int)(((byte)(224)))));
Magic Number,OpenCBS.GUI.Clients,NonSolidaryGroupForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\NonSolidaryGroupForm.cs,InitializeComponent,The following statement contains a magic number: this.pictureBox2.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(224))))' ((int)(((byte)(224))))' ((int)(((byte)(224)))));
Magic Number,OpenCBS.GUI.Clients,NonSolidaryGroupForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\NonSolidaryGroupForm.cs,InitializeComponent,The following statement contains a magic number: this.pictureBox2.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(224))))' ((int)(((byte)(224))))' ((int)(((byte)(224)))));
Magic Number,OpenCBS.GUI.Clients,NonSolidaryGroupForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\NonSolidaryGroupForm.cs,InitializeComponent,The following statement contains a magic number: this.pictureBox1.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(224))))' ((int)(((byte)(224))))' ((int)(((byte)(224)))));
Magic Number,OpenCBS.GUI.Clients,NonSolidaryGroupForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\NonSolidaryGroupForm.cs,InitializeComponent,The following statement contains a magic number: this.pictureBox1.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(224))))' ((int)(((byte)(224))))' ((int)(((byte)(224)))));
Magic Number,OpenCBS.GUI.Clients,NonSolidaryGroupForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\NonSolidaryGroupForm.cs,InitializeComponent,The following statement contains a magic number: this.pictureBox1.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(224))))' ((int)(((byte)(224))))' ((int)(((byte)(224)))));
Magic Number,OpenCBS.GUI.Clients,NonSolidaryGroupForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\NonSolidaryGroupForm.cs,InitializeComponent,The following statement contains a magic number: this.olvAttendees.SelectedColumnTint = System.Drawing.Color.FromArgb(((int)(((byte)(15))))' ((int)(((byte)(0))))' ((int)(((byte)(0))))' ((int)(((byte)(192)))));
Magic Number,OpenCBS.GUI.Clients,NonSolidaryGroupForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\NonSolidaryGroupForm.cs,InitializeComponent,The following statement contains a magic number: this.olvAttendees.SelectedColumnTint = System.Drawing.Color.FromArgb(((int)(((byte)(15))))' ((int)(((byte)(0))))' ((int)(((byte)(0))))' ((int)(((byte)(192)))));
Magic Number,OpenCBS.GUI.Configuration,AddBranchForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Configuration\AddBranchForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Controls.Add(this.tbDescription' 1' 3);
Magic Number,OpenCBS.GUI.Configuration,AddBranchForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Configuration\AddBranchForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Controls.Add(this.label3' 0' 3);
Magic Number,OpenCBS.GUI.Configuration,AddBranchForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Configuration\AddBranchForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Controls.Add(this.tbAddress' 1' 2);
Magic Number,OpenCBS.GUI.Configuration,AddBranchForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Configuration\AddBranchForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Controls.Add(this.label2' 0' 2);
Magic Number,OpenCBS.GUI.Configuration,FrmCurrencyType,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Configuration\FrmCurrencyType.cs,InitializeComponent,The following statement contains a magic number: this.listViewCurrencies.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56)))));
Magic Number,OpenCBS.GUI.Configuration,FrmCurrencyType,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Configuration\FrmCurrencyType.cs,InitializeComponent,The following statement contains a magic number: this.listViewCurrencies.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56)))));
Magic Number,OpenCBS.GUI.Configuration,FrmEconomicActivity,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Configuration\FrmEconomicActivity.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tvEconomicActivity.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(81))))' ((int)(((byte)(152)))));
Magic Number,OpenCBS.GUI.Configuration,FrmEconomicActivity,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Configuration\FrmEconomicActivity.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tvEconomicActivity.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(81))))' ((int)(((byte)(152)))));
Magic Number,OpenCBS.GUI.Configuration,FrmFundingLineEvent,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Configuration\FrmFundingLineEvent.cs,buttonSave_Click,The following statement contains a magic number: try              {                  _saved = true;                    if (comboBoxDirection.SelectedIndex == -1)                      throw new OpenCbsFundingLineEventException(OpenCbsFundingLineEventExceptionEnum.DirectionIsEmpty);                    _fundingLineEvent.Movement = (OBookingDirections)((DictionaryEntry)comboBoxDirection.SelectedItem).Value;                      if (textBoxCode.Text == string.Empty)                      throw new OpenCbsFundingLineEventException(OpenCbsFundingLineEventExceptionEnum.CodeIsEmpty);                    _fundingLineEvent.Code = textBoxCode.Text;                    if (textBoxAmount.Text == string.Empty)                      throw new OpenCbsFundingLineEventException(OpenCbsFundingLineEventExceptionEnum.AmountIsEmpty);                    decimal amount;                    if (!decimal.TryParse(textBoxAmount.Text' out amount))                      throw new OpenCbsFundingLineEventException(OpenCbsFundingLineEventExceptionEnum.AmountIsNonCompliant);                    if (amount >= 1000000000000000)                      throw new OpenCbsFundingLineEventException(OpenCbsFundingLineEventExceptionEnum.AmountIsBigger);                    _fundingLineEvent.Amount = amount;                    if (_exchangeRate == null)                  {                      throw new OpenCbsExchangeRateException(OpenCbsExchangeRateExceptionEnum.ExchangeRateIsNull);                  }                  _fundingLineEvent.CreationDate = dateTimePickerEvent.Value;                  _fundingLineEvent.FundingLine = _FundingLine;                  _fundingLineEvent.Type = OFundingLineEventTypes.Entry;                      Close();              }              catch (Exception ex)              {                  _saved = false;                  SetExchangeRate();                  new frmShowError(CustomExceptionHandler.ShowExceptionText(ex)).ShowDialog();                  //if(ex is OpenCbsExchangeRateException)                  //{                  //    ExchangeRateForm _xrForm = new ExchangeRateForm(new DateTime(_fundingLineEvent.CreationDate.Year' _fundingLineEvent.CreationDate.Month' _fundingLineEvent.CreationDate.Day)' _fundingLineEvent.FundingLine.Currency);                  //    _xrForm.ShowDialog();                  //    if (_xrForm.ExchangeRate != null)                  //    {                  //        buttonSave.Enabled = true;                  //    }                  //    else buttonSave.Enabled = false;                  //}              }
Magic Number,OpenCBS.GUI.Configuration,FrmFundingLineEvent,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Configuration\FrmFundingLineEvent.cs,textBoxAmount_KeyPress,The following statement contains a magic number: if ((keyCode >= 48 && keyCode <= 57) || (keyCode == 8) || (Char.IsControl(e.KeyChar) && e.KeyChar                != ((char)Keys.V | (char)Keys.ControlKey)) || (Char.IsControl(e.KeyChar) && e.KeyChar !=                ((char)Keys.C | (char)Keys.ControlKey)) || (e.KeyChar.ToString() ==                System.Globalization.NumberFormatInfo.CurrentInfo.NumberDecimalSeparator))            {                e.Handled = false;            }            else                e.Handled = true;
Magic Number,OpenCBS.GUI.Configuration,FrmFundingLineEvent,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Configuration\FrmFundingLineEvent.cs,textBoxAmount_KeyPress,The following statement contains a magic number: if ((keyCode >= 48 && keyCode <= 57) || (keyCode == 8) || (Char.IsControl(e.KeyChar) && e.KeyChar                != ((char)Keys.V | (char)Keys.ControlKey)) || (Char.IsControl(e.KeyChar) && e.KeyChar !=                ((char)Keys.C | (char)Keys.ControlKey)) || (e.KeyChar.ToString() ==                System.Globalization.NumberFormatInfo.CurrentInfo.NumberDecimalSeparator))            {                e.Handled = false;            }            else                e.Handled = true;
Magic Number,OpenCBS.GUI.Configuration,FrmFundingLineEvent,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Configuration\FrmFundingLineEvent.cs,textBoxAmount_KeyPress,The following statement contains a magic number: if ((keyCode >= 48 && keyCode <= 57) || (keyCode == 8) || (Char.IsControl(e.KeyChar) && e.KeyChar                != ((char)Keys.V | (char)Keys.ControlKey)) || (Char.IsControl(e.KeyChar) && e.KeyChar !=                ((char)Keys.C | (char)Keys.ControlKey)) || (e.KeyChar.ToString() ==                System.Globalization.NumberFormatInfo.CurrentInfo.NumberDecimalSeparator))            {                e.Handled = false;            }            else                e.Handled = true;
Magic Number,OpenCBS.GUI.Configuration,FrmRoles,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Configuration\FrmRoles.cs,adjustDefaultWindowComboBoxByRole,The following statement contains a magic number: switch (role.DefaultStartPage)              {                  case OStartPages.StartPages.START_PAGE:                      defaultWindowComboBox.SelectedIndex = 0;                      break;                  case OStartPages.StartPages.DASHBOARD_PAGE:                      defaultWindowComboBox.SelectedIndex = 1;                      break;                  case OStartPages.StartPages.ALERTS_PAGE:                      defaultWindowComboBox.SelectedIndex = 2;                      break;                  default:                      defaultWindowComboBox.SelectedIndex = 0;                      break;              }
Magic Number,OpenCBS.GUI.Configuration,FrmRoles,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Configuration\FrmRoles.cs,defaultWindowComboBox_SelectedIndexChanged,The following statement contains a magic number: switch (defaultWindowComboBox.SelectedIndex)              {                  case 0:                      defaultWindowComboBox.Tag = OStartPages.StartPages.START_PAGE;                      break;                  case 1:                      defaultWindowComboBox.Tag = OStartPages.StartPages.DASHBOARD_PAGE;                      break;                  case 2:                      defaultWindowComboBox.Tag = OStartPages.StartPages.ALERTS_PAGE;                      break;                  default:                      throw new IndexOutOfRangeException();              }
Magic Number,OpenCBS.GUI.Configuration,FrmRoles,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Configuration\FrmRoles.cs,InitializeComponent,The following statement contains a magic number: this.labelRoles.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(64))))' ((int)(((byte)(0)))));
Magic Number,OpenCBS.GUI.Configuration,FrmRoles,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Configuration\FrmRoles.cs,InitializeComponent,The following statement contains a magic number: this.lblRoles.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(81))))' ((int)(((byte)(152)))));
Magic Number,OpenCBS.GUI.Configuration,FrmRoles,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Configuration\FrmRoles.cs,InitializeComponent,The following statement contains a magic number: this.lblRoles.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(81))))' ((int)(((byte)(152)))));
Magic Number,OpenCBS.GUI.Configuration,UserForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Configuration\UserForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel.Controls.Add(this.cmbRoles' 3' 0);
Magic Number,OpenCBS.GUI.Configuration,UserForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Configuration\UserForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel.Controls.Add(this.txbMail' 1' 5);
Magic Number,OpenCBS.GUI.Configuration,UserForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Configuration\UserForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel.Controls.Add(this.lblRole' 2' 0);
Magic Number,OpenCBS.GUI.Configuration,UserForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Configuration\UserForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel.Controls.Add(this.txbConfirmPassword' 1' 2);
Magic Number,OpenCBS.GUI.Configuration,UserForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Configuration\UserForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel.Controls.Add(this.lbComfirmPassword' 0' 2);
Magic Number,OpenCBS.GUI.Configuration,UserForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Configuration\UserForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel.Controls.Add(this.txbLastname' 1' 4);
Magic Number,OpenCBS.GUI.Configuration,UserForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Configuration\UserForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel.Controls.Add(this.txbFirstname' 1' 3);
Magic Number,OpenCBS.GUI.Configuration,UserForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Configuration\UserForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel.Controls.Add(this.lblMail' 0' 5);
Magic Number,OpenCBS.GUI.Configuration,UserForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Configuration\UserForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel.Controls.Add(this.lblFirstName' 0' 3);
Magic Number,OpenCBS.GUI.Configuration,UserForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Configuration\UserForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel.Controls.Add(this.lblLastName' 0' 4);
Magic Number,OpenCBS.GUI.Configuration,UserForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Configuration\UserForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel.Controls.Add(this.lblSex' 2' 1);
Magic Number,OpenCBS.GUI.Configuration,UserForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Configuration\UserForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel.Controls.Add(this.cmbSex' 3' 1);
Magic Number,OpenCBS.GUI.Configuration,UserForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Configuration\UserForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel.Controls.Add(this.lblPhone' 2' 2);
Magic Number,OpenCBS.GUI.Configuration,UserForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Configuration\UserForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel.Controls.Add(this.lblPhone' 2' 2);
Magic Number,OpenCBS.GUI.Configuration,UserForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Configuration\UserForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel.Controls.Add(this.txbPhone' 3' 2);
Magic Number,OpenCBS.GUI.Configuration,UserForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Configuration\UserForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel.Controls.Add(this.txbPhone' 3' 2);
Magic Number,OpenCBS.GUI.Configuration,UserForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Configuration\UserForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.cmbRoles.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56)))));
Magic Number,OpenCBS.GUI.Configuration,UserForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Configuration\UserForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.cmbRoles.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56)))));
Magic Number,OpenCBS.GUI.Configuration,UserForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Configuration\UserForm.Designer.cs,_InitializeControls,The following statement contains a magic number: _ChangeAllLabelForeColor(Color.FromArgb(0' 88' 56));
Magic Number,OpenCBS.GUI.Configuration,UserForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Configuration\UserForm.Designer.cs,_InitializeControls,The following statement contains a magic number: _ChangeAllLabelForeColor(Color.FromArgb(0' 88' 56));
Magic Number,OpenCBS.GUI.Configuration,UserForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Configuration\UserForm.Designer.cs,listViewUsers_Click,The following statement contains a magic number: _ChangeAllLabelForeColor(Color.FromArgb(0' 88' 56));
Magic Number,OpenCBS.GUI.Configuration,UserForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Configuration\UserForm.Designer.cs,listViewUsers_Click,The following statement contains a magic number: _ChangeAllLabelForeColor(Color.FromArgb(0' 88' 56));
Magic Number,OpenCBS.GUI.Configuration,UserForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Configuration\UserForm.Designer.cs,buttonNew_Click,The following statement contains a magic number: _ChangeAllLabelForeColor(Color.FromArgb(0' 88' 56));
Magic Number,OpenCBS.GUI.Configuration,UserForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Configuration\UserForm.Designer.cs,buttonNew_Click,The following statement contains a magic number: _ChangeAllLabelForeColor(Color.FromArgb(0' 88' 56));
Magic Number,OpenCBS.GUI.Configuration,UserForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Configuration\UserForm.Designer.cs,RefreshUser,The following statement contains a magic number: foreach (ListViewItem item in lvUsers.Items)              {                  if (!user.Equals(item.Tag as User)) continue;                    item.SubItems[6].Text = user.SubordinateCount.ToString();              }
Magic Number,OpenCBS.GUI.Configuration,FrmAddSavingBookProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddSavingBookProduct.cs,InitializeControls,The following statement contains a magic number: if (_savingsProduct.InterestRateMax.HasValue) tbInterestRateMax.Text = (_savingsProduct.InterestRateMax.Value * 100).ToString();
Magic Number,OpenCBS.GUI.Configuration,FrmAddSavingBookProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddSavingBookProduct.cs,InitializeControls,The following statement contains a magic number: if (_savingsProduct.InterestRateMin.HasValue) tbInterestRateMin.Text = (_savingsProduct.InterestRateMin.Value * 100).ToString();
Magic Number,OpenCBS.GUI.Configuration,FrmAddSavingBookProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddSavingBookProduct.cs,InitializeControls,The following statement contains a magic number: if (_savingsProduct.InterestRate.HasValue) tbInterestRateValue.Text = (_savingsProduct.InterestRate.Value * 100).ToString();
Magic Number,OpenCBS.GUI.Configuration,FrmAddSavingBookProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddSavingBookProduct.cs,InitializeControls,The following statement contains a magic number: if (_savingsProduct.WithdrawFeesType == OSavingsFeesType.Flat)              {                  if (_savingsProduct.FlatWithdrawFees.HasValue)                       tbWithdrawFees.Text = _savingsProduct.FlatWithdrawFees.GetFormatedValue(_savingsProduct.UseCents);                  if (_savingsProduct.FlatWithdrawFeesMin.HasValue)                       tbWithdrawFeesMin.Text = _savingsProduct.FlatWithdrawFeesMin.GetFormatedValue(_savingsProduct.UseCents);                  if (_savingsProduct.FlatWithdrawFeesMax.HasValue)                       tbWithdrawFeesMax.Text = _savingsProduct.FlatWithdrawFeesMax.GetFormatedValue(_savingsProduct.UseCents);                  rbFlatWithdrawFees.Checked = true;              }              else              {                  if (_savingsProduct.RateWithdrawFees.HasValue)                       tbWithdrawFees.Text = (_savingsProduct.RateWithdrawFees.Value * 100).ToString();                  if (_savingsProduct.RateWithdrawFeesMin.HasValue)                       tbWithdrawFeesMin.Text = (_savingsProduct.RateWithdrawFeesMin.Value * 100).ToString();                  if (_savingsProduct.RateWithdrawFeesMax.HasValue)                       tbWithdrawFeesMax.Text = (_savingsProduct.RateWithdrawFeesMax.Value * 100).ToString();                  rbRateWithdrawFees.Checked = true;              }
Magic Number,OpenCBS.GUI.Configuration,FrmAddSavingBookProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddSavingBookProduct.cs,InitializeControls,The following statement contains a magic number: if (_savingsProduct.WithdrawFeesType == OSavingsFeesType.Flat)              {                  if (_savingsProduct.FlatWithdrawFees.HasValue)                       tbWithdrawFees.Text = _savingsProduct.FlatWithdrawFees.GetFormatedValue(_savingsProduct.UseCents);                  if (_savingsProduct.FlatWithdrawFeesMin.HasValue)                       tbWithdrawFeesMin.Text = _savingsProduct.FlatWithdrawFeesMin.GetFormatedValue(_savingsProduct.UseCents);                  if (_savingsProduct.FlatWithdrawFeesMax.HasValue)                       tbWithdrawFeesMax.Text = _savingsProduct.FlatWithdrawFeesMax.GetFormatedValue(_savingsProduct.UseCents);                  rbFlatWithdrawFees.Checked = true;              }              else              {                  if (_savingsProduct.RateWithdrawFees.HasValue)                       tbWithdrawFees.Text = (_savingsProduct.RateWithdrawFees.Value * 100).ToString();                  if (_savingsProduct.RateWithdrawFeesMin.HasValue)                       tbWithdrawFeesMin.Text = (_savingsProduct.RateWithdrawFeesMin.Value * 100).ToString();                  if (_savingsProduct.RateWithdrawFeesMax.HasValue)                       tbWithdrawFeesMax.Text = (_savingsProduct.RateWithdrawFeesMax.Value * 100).ToString();                  rbRateWithdrawFees.Checked = true;              }
Magic Number,OpenCBS.GUI.Configuration,FrmAddSavingBookProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddSavingBookProduct.cs,InitializeControls,The following statement contains a magic number: if (_savingsProduct.WithdrawFeesType == OSavingsFeesType.Flat)              {                  if (_savingsProduct.FlatWithdrawFees.HasValue)                       tbWithdrawFees.Text = _savingsProduct.FlatWithdrawFees.GetFormatedValue(_savingsProduct.UseCents);                  if (_savingsProduct.FlatWithdrawFeesMin.HasValue)                       tbWithdrawFeesMin.Text = _savingsProduct.FlatWithdrawFeesMin.GetFormatedValue(_savingsProduct.UseCents);                  if (_savingsProduct.FlatWithdrawFeesMax.HasValue)                       tbWithdrawFeesMax.Text = _savingsProduct.FlatWithdrawFeesMax.GetFormatedValue(_savingsProduct.UseCents);                  rbFlatWithdrawFees.Checked = true;              }              else              {                  if (_savingsProduct.RateWithdrawFees.HasValue)                       tbWithdrawFees.Text = (_savingsProduct.RateWithdrawFees.Value * 100).ToString();                  if (_savingsProduct.RateWithdrawFeesMin.HasValue)                       tbWithdrawFeesMin.Text = (_savingsProduct.RateWithdrawFeesMin.Value * 100).ToString();                  if (_savingsProduct.RateWithdrawFeesMax.HasValue)                       tbWithdrawFeesMax.Text = (_savingsProduct.RateWithdrawFeesMax.Value * 100).ToString();                  rbRateWithdrawFees.Checked = true;              }
Magic Number,OpenCBS.GUI.Configuration,FrmAddSavingBookProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddSavingBookProduct.cs,InitializeControls,The following statement contains a magic number: if (_savingsProduct.TransferFeesType == OSavingsFeesType.Flat)              {                  if (_savingsProduct.FlatTransferFees.HasValue)                       tbTransferFees.Text = _savingsProduct.FlatTransferFees.GetFormatedValue(_savingsProduct.UseCents);                  if (_savingsProduct.FlatTransferFeesMin.HasValue)                       tbTransferFeesMin.Text = _savingsProduct.FlatTransferFeesMin.GetFormatedValue(_savingsProduct.UseCents);                  if (_savingsProduct.FlatTransferFeesMax.HasValue)                       tbTransferFeesMax.Text = _savingsProduct.FlatTransferFeesMax.GetFormatedValue(_savingsProduct.UseCents);                  rbFlatTransferFees.Checked = true;              }              else              {                  if (_savingsProduct.RateTransferFees.HasValue)                       tbTransferFees.Text = (_savingsProduct.RateTransferFees.Value * 100).ToString();                  if (_savingsProduct.RateTransferFeesMin.HasValue)                       tbTransferFeesMin.Text = (_savingsProduct.RateTransferFeesMin.Value * 100).ToString();                  if (_savingsProduct.RateTransferFeesMax.HasValue)                       tbTransferFeesMax.Text = (_savingsProduct.RateTransferFeesMax.Value * 100).ToString();                  rbRateTransferFees.Checked = true;              }
Magic Number,OpenCBS.GUI.Configuration,FrmAddSavingBookProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddSavingBookProduct.cs,InitializeControls,The following statement contains a magic number: if (_savingsProduct.TransferFeesType == OSavingsFeesType.Flat)              {                  if (_savingsProduct.FlatTransferFees.HasValue)                       tbTransferFees.Text = _savingsProduct.FlatTransferFees.GetFormatedValue(_savingsProduct.UseCents);                  if (_savingsProduct.FlatTransferFeesMin.HasValue)                       tbTransferFeesMin.Text = _savingsProduct.FlatTransferFeesMin.GetFormatedValue(_savingsProduct.UseCents);                  if (_savingsProduct.FlatTransferFeesMax.HasValue)                       tbTransferFeesMax.Text = _savingsProduct.FlatTransferFeesMax.GetFormatedValue(_savingsProduct.UseCents);                  rbFlatTransferFees.Checked = true;              }              else              {                  if (_savingsProduct.RateTransferFees.HasValue)                       tbTransferFees.Text = (_savingsProduct.RateTransferFees.Value * 100).ToString();                  if (_savingsProduct.RateTransferFeesMin.HasValue)                       tbTransferFeesMin.Text = (_savingsProduct.RateTransferFeesMin.Value * 100).ToString();                  if (_savingsProduct.RateTransferFeesMax.HasValue)                       tbTransferFeesMax.Text = (_savingsProduct.RateTransferFeesMax.Value * 100).ToString();                  rbRateTransferFees.Checked = true;              }
Magic Number,OpenCBS.GUI.Configuration,FrmAddSavingBookProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddSavingBookProduct.cs,InitializeControls,The following statement contains a magic number: if (_savingsProduct.TransferFeesType == OSavingsFeesType.Flat)              {                  if (_savingsProduct.FlatTransferFees.HasValue)                       tbTransferFees.Text = _savingsProduct.FlatTransferFees.GetFormatedValue(_savingsProduct.UseCents);                  if (_savingsProduct.FlatTransferFeesMin.HasValue)                       tbTransferFeesMin.Text = _savingsProduct.FlatTransferFeesMin.GetFormatedValue(_savingsProduct.UseCents);                  if (_savingsProduct.FlatTransferFeesMax.HasValue)                       tbTransferFeesMax.Text = _savingsProduct.FlatTransferFeesMax.GetFormatedValue(_savingsProduct.UseCents);                  rbFlatTransferFees.Checked = true;              }              else              {                  if (_savingsProduct.RateTransferFees.HasValue)                       tbTransferFees.Text = (_savingsProduct.RateTransferFees.Value * 100).ToString();                  if (_savingsProduct.RateTransferFeesMin.HasValue)                       tbTransferFeesMin.Text = (_savingsProduct.RateTransferFeesMin.Value * 100).ToString();                  if (_savingsProduct.RateTransferFeesMax.HasValue)                       tbTransferFeesMax.Text = (_savingsProduct.RateTransferFeesMax.Value * 100).ToString();                  rbRateTransferFees.Checked = true;              }
Magic Number,OpenCBS.GUI.Configuration,FrmAddSavingBookProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddSavingBookProduct.cs,InitializeControls,The following statement contains a magic number: if (_savingsProduct.AgioFees.HasValue)                  tbAgioFees.Text = (_savingsProduct.AgioFees.Value * 100).ToString();
Magic Number,OpenCBS.GUI.Configuration,FrmAddSavingBookProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddSavingBookProduct.cs,InitializeControls,The following statement contains a magic number: if (_savingsProduct.AgioFeesMin.HasValue)                  tbAgioFeesMin.Text = (_savingsProduct.AgioFeesMin.Value * 100).ToString();
Magic Number,OpenCBS.GUI.Configuration,FrmAddSavingBookProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddSavingBookProduct.cs,InitializeControls,The following statement contains a magic number: if (_savingsProduct.AgioFeesMax.HasValue)                  tbAgioFeesMax.Text = (_savingsProduct.AgioFeesMax.Value * 100).ToString();
Magic Number,OpenCBS.GUI.Configuration,FrmAddSavingBookProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddSavingBookProduct.cs,InitializeComboBoxCurrencies,The following statement contains a magic number: bool oneCurrency = 2 == cbCurrency.Items.Count;
Magic Number,OpenCBS.GUI.Configuration,FrmAddSavingBookProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddSavingBookProduct.cs,Check,The following statement contains a magic number: try              {                  if (string.IsNullOrEmpty(tb.Text.Trim()))                       return null;                    if (!allowNegativeNumber && Convert.ToDecimal(tb.Text) < 0)                      throw new Exception();                    if (Convert.ToDecimal(tb.Text) > 999999999999999)                      throw new Exception();                    return Convert.ToDecimal(tb.Text);              }              catch (Exception)              {                  tb.BackColor = Color.Red;                  return null;              }
Magic Number,OpenCBS.GUI.Configuration,FrmAddSavingBookProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddSavingBookProduct.cs,CheckAmount,The following statement contains a magic number: try              {                  if (String.IsNullOrEmpty(textBox.Text.Trim()))                      return null;                  if (!allowNegativeNumber && Convert.ToDecimal(textBox.Text)<0)                      throw new Exception();                                    if (Convert.ToDecimal(textBox.Text) > 999999999999999)                      throw new Exception();                    return Convert.ToDecimal(textBox.Text);              }              catch (Exception)              {                  textBox.BackColor = Color.Red;                  return null;              }
Magic Number,OpenCBS.GUI.Configuration,FrmAddSavingBookProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddSavingBookProduct.cs,CheckAmount,The following statement contains a magic number: try              {                  if (String.IsNullOrEmpty(textBox.Text.Trim()))                      return  null;                  if (!allowNegativeNumber && Convert.ToDouble(textBox.Text) < 0)                      throw new Exception();                    if (Convert.ToDouble(textBox.Text) > 999999999999999.0)                      throw new Exception();                                    return Convert.ToDouble(textBox.Text) / 100;              }              catch (Exception)              {                  textBox.BackColor = Color.Red;                  return null;              }
Magic Number,OpenCBS.GUI.Configuration,FrmAddSavingBookProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddSavingBookProduct.cs,CheckAmount,The following statement contains a magic number: try              {                  if (String.IsNullOrEmpty(textBox.Text.Trim()))                      return  null;                  if (!allowNegativeNumber && Convert.ToDouble(textBox.Text) < 0)                      throw new Exception();                    if (Convert.ToDouble(textBox.Text) > 999999999999999.0)                      throw new Exception();                                    return Convert.ToDouble(textBox.Text) / 100;              }              catch (Exception)              {                  textBox.BackColor = Color.Red;                  return null;              }
Magic Number,OpenCBS.GUI.Configuration,FrmAddSavingBookProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddSavingBookProduct.cs,GetYearlyInterestRate,The following statement contains a magic number: switch (oSavingInterestBase)              {                  case OSavingInterestBase.Daily: return interestRate * 100 * 365;                  case OSavingInterestBase.Weekly: return interestRate * 100 * 52;                   case OSavingInterestBase.Monthly: return interestRate * 100 * 12;                  default: return null;              }
Magic Number,OpenCBS.GUI.Configuration,FrmAddSavingBookProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddSavingBookProduct.cs,GetYearlyInterestRate,The following statement contains a magic number: switch (oSavingInterestBase)              {                  case OSavingInterestBase.Daily: return interestRate * 100 * 365;                  case OSavingInterestBase.Weekly: return interestRate * 100 * 52;                   case OSavingInterestBase.Monthly: return interestRate * 100 * 12;                  default: return null;              }
Magic Number,OpenCBS.GUI.Configuration,FrmAddSavingBookProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddSavingBookProduct.cs,GetYearlyInterestRate,The following statement contains a magic number: switch (oSavingInterestBase)              {                  case OSavingInterestBase.Daily: return interestRate * 100 * 365;                  case OSavingInterestBase.Weekly: return interestRate * 100 * 52;                   case OSavingInterestBase.Monthly: return interestRate * 100 * 12;                  default: return null;              }
Magic Number,OpenCBS.GUI.Configuration,FrmAddSavingBookProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddSavingBookProduct.cs,GetYearlyInterestRate,The following statement contains a magic number: switch (oSavingInterestBase)              {                  case OSavingInterestBase.Daily: return interestRate * 100 * 365;                  case OSavingInterestBase.Weekly: return interestRate * 100 * 52;                   case OSavingInterestBase.Monthly: return interestRate * 100 * 12;                  default: return null;              }
Magic Number,OpenCBS.GUI.Configuration,FrmAddSavingBookProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddSavingBookProduct.cs,GetYearlyInterestRate,The following statement contains a magic number: switch (oSavingInterestBase)              {                  case OSavingInterestBase.Daily: return interestRate * 100 * 365;                  case OSavingInterestBase.Weekly: return interestRate * 100 * 52;                   case OSavingInterestBase.Monthly: return interestRate * 100 * 12;                  default: return null;              }
Magic Number,OpenCBS.GUI.Configuration,FrmAddSavingBookProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddSavingBookProduct.cs,GetYearlyInterestRate,The following statement contains a magic number: switch (oSavingInterestBase)              {                  case OSavingInterestBase.Daily: return interestRate * 100 * 365;                  case OSavingInterestBase.Weekly: return interestRate * 100 * 52;                   case OSavingInterestBase.Monthly: return interestRate * 100 * 12;                  default: return null;              }
Magic Number,OpenCBS.GUI.Configuration,FrmAddSavingBookProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddSavingBookProduct.cs,clientTypeGroupCheckBox_CheckedChanged,The following statement contains a magic number: if (clientTypeCounter == 4)                  clientTypeAllCheckBox.Checked = true;              else              {                  clientTypeAllCheckBox.Checked = false;              }
Magic Number,OpenCBS.GUI.Configuration,FrmAddSavingBookProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddSavingBookProduct.cs,cbTransferType_SelectedIndexChanged,The following statement contains a magic number: if (ib)              {                  if (ibtFee.Min.HasValue)                  {                      rateMin = Convert.ToDouble(ibtFee.Min.Value/100);                  }                  else                  {                      rateMin = null;                  }                    if (ibtFee.Max.HasValue)                  {                      rateMax = Convert.ToDouble(ibtFee.Max.Value/100);                  }                  else                  {                      rateMax = null;                  }                    if (ibtFee.Value.HasValue)                  {                      rateValue = Convert.ToDouble(ibtFee.Value.Value/100);                  }                  else                  {                      rateValue = null;                  }              }              else              {                  rateMin = _savingsProduct.RateTransferFeesMin;                  rateMax = _savingsProduct.RateTransferFeesMax;                  rateValue = _savingsProduct.RateTransferFees;              }
Magic Number,OpenCBS.GUI.Configuration,FrmAddSavingBookProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddSavingBookProduct.cs,cbTransferType_SelectedIndexChanged,The following statement contains a magic number: if (ib)              {                  if (ibtFee.Min.HasValue)                  {                      rateMin = Convert.ToDouble(ibtFee.Min.Value/100);                  }                  else                  {                      rateMin = null;                  }                    if (ibtFee.Max.HasValue)                  {                      rateMax = Convert.ToDouble(ibtFee.Max.Value/100);                  }                  else                  {                      rateMax = null;                  }                    if (ibtFee.Value.HasValue)                  {                      rateValue = Convert.ToDouble(ibtFee.Value.Value/100);                  }                  else                  {                      rateValue = null;                  }              }              else              {                  rateMin = _savingsProduct.RateTransferFeesMin;                  rateMax = _savingsProduct.RateTransferFeesMax;                  rateValue = _savingsProduct.RateTransferFees;              }
Magic Number,OpenCBS.GUI.Configuration,FrmAddSavingBookProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddSavingBookProduct.cs,cbTransferType_SelectedIndexChanged,The following statement contains a magic number: if (ib)              {                  if (ibtFee.Min.HasValue)                  {                      rateMin = Convert.ToDouble(ibtFee.Min.Value/100);                  }                  else                  {                      rateMin = null;                  }                    if (ibtFee.Max.HasValue)                  {                      rateMax = Convert.ToDouble(ibtFee.Max.Value/100);                  }                  else                  {                      rateMax = null;                  }                    if (ibtFee.Value.HasValue)                  {                      rateValue = Convert.ToDouble(ibtFee.Value.Value/100);                  }                  else                  {                      rateValue = null;                  }              }              else              {                  rateMin = _savingsProduct.RateTransferFeesMin;                  rateMax = _savingsProduct.RateTransferFeesMax;                  rateValue = _savingsProduct.RateTransferFees;              }
Magic Number,OpenCBS.GUI.Configuration,FrmAddSavingBookProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddSavingBookProduct.cs,cbTransferType_SelectedIndexChanged,The following statement contains a magic number: if (OSavingsFeesType.Flat == ft)              {                  rbFlatTransferFees.Checked = true;                  tbTransferFeesMin.Text = flatMin.HasValue ?  flatMin.GetFormatedValue(_savingsProduct.UseCents) : string.Empty;                  tbTransferFeesMax.Text = flatMax.HasValue ? flatMax.GetFormatedValue(_savingsProduct.UseCents) : string.Empty;                  tbTransferFees.Text = flatValue.HasValue ? flatValue.GetFormatedValue(_savingsProduct.UseCents) : string.Empty;              }              else              {                  rbRateTransferFees.Checked = true;                  tbTransferFeesMin.Text = rateMin.HasValue ? (rateMin.Value*100).ToString() : string.Empty;                  tbTransferFeesMax.Text = rateMax.HasValue ? (rateMax.Value * 100).ToString() : string.Empty;                  tbTransferFees.Text = rateValue.HasValue ? (rateValue*100).ToString() : string.Empty;              }
Magic Number,OpenCBS.GUI.Configuration,FrmAddSavingBookProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddSavingBookProduct.cs,cbTransferType_SelectedIndexChanged,The following statement contains a magic number: if (OSavingsFeesType.Flat == ft)              {                  rbFlatTransferFees.Checked = true;                  tbTransferFeesMin.Text = flatMin.HasValue ?  flatMin.GetFormatedValue(_savingsProduct.UseCents) : string.Empty;                  tbTransferFeesMax.Text = flatMax.HasValue ? flatMax.GetFormatedValue(_savingsProduct.UseCents) : string.Empty;                  tbTransferFees.Text = flatValue.HasValue ? flatValue.GetFormatedValue(_savingsProduct.UseCents) : string.Empty;              }              else              {                  rbRateTransferFees.Checked = true;                  tbTransferFeesMin.Text = rateMin.HasValue ? (rateMin.Value*100).ToString() : string.Empty;                  tbTransferFeesMax.Text = rateMax.HasValue ? (rateMax.Value * 100).ToString() : string.Empty;                  tbTransferFees.Text = rateValue.HasValue ? (rateValue*100).ToString() : string.Empty;              }
Magic Number,OpenCBS.GUI.Configuration,FrmAddSavingBookProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddSavingBookProduct.cs,cbTransferType_SelectedIndexChanged,The following statement contains a magic number: if (OSavingsFeesType.Flat == ft)              {                  rbFlatTransferFees.Checked = true;                  tbTransferFeesMin.Text = flatMin.HasValue ?  flatMin.GetFormatedValue(_savingsProduct.UseCents) : string.Empty;                  tbTransferFeesMax.Text = flatMax.HasValue ? flatMax.GetFormatedValue(_savingsProduct.UseCents) : string.Empty;                  tbTransferFees.Text = flatValue.HasValue ? flatValue.GetFormatedValue(_savingsProduct.UseCents) : string.Empty;              }              else              {                  rbRateTransferFees.Checked = true;                  tbTransferFeesMin.Text = rateMin.HasValue ? (rateMin.Value*100).ToString() : string.Empty;                  tbTransferFeesMax.Text = rateMax.HasValue ? (rateMax.Value * 100).ToString() : string.Empty;                  tbTransferFees.Text = rateValue.HasValue ? (rateValue*100).ToString() : string.Empty;              }
Magic Number,OpenCBS.GUI.Configuration,FrmAddSavingBookProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddSavingBookProduct.cs,InitializeComponent,The following statement contains a magic number: this.cbCalculAmount.DropDownWidth = 180;
Magic Number,OpenCBS.GUI.Configuration,FrmGeneralSettings,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Configuration\FrmGeneralSettings.cs,InitializeListViewProvisioningTables,The following statement contains a magic number: foreach (ProvisioningRate provisioningRate in provisioningRates)              {                  var listViewItem = new ListViewItem(provisioningRate.Number.ToString());                    if (provisioningRate.NbOfDaysMin == -1)                  {                      listViewItem.Tag = provisioningRate;                      listViewItem.SubItems.Add("rescheduled");                      listViewItem.SubItems.Add("-");                        //listViewItem.SubItems.Add((Math.Round(provisioningRate.Rate' 2) * 100).ToString());                      listViewItem.SubItems.Add((provisioningRate.ProvisioningValue * 100).ToString());                      listViewItem.SubItems.Add((provisioningRate.ProvisioningInterest * 100).ToString());                      listViewItem.SubItems.Add((provisioningRate.ProvisioningPenalty * 100).ToString());                      listViewItemRes = listViewItem;                  }                  else                  {                      listViewItem.Tag = provisioningRate;                      listViewItem.SubItems.Add(provisioningRate.NbOfDaysMin.ToString());                      listViewItem.SubItems.Add(provisioningRate.NbOfDaysMax.ToString());                      //listViewItem.SubItems.Add((Math.Round(provisioningRate.Rate' 2)*100).ToString());                      listViewItem.SubItems.Add((provisioningRate.ProvisioningValue * 100).ToString());                      listViewItem.SubItems.Add((provisioningRate.ProvisioningInterest * 100).ToString());                      listViewItem.SubItems.Add((provisioningRate.ProvisioningPenalty * 100).ToString());                      listViewProvisioningRules.Items.Add(listViewItem);                  }              }
Magic Number,OpenCBS.GUI.Configuration,FrmGeneralSettings,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Configuration\FrmGeneralSettings.cs,InitializeListViewProvisioningTables,The following statement contains a magic number: foreach (ProvisioningRate provisioningRate in provisioningRates)              {                  var listViewItem = new ListViewItem(provisioningRate.Number.ToString());                    if (provisioningRate.NbOfDaysMin == -1)                  {                      listViewItem.Tag = provisioningRate;                      listViewItem.SubItems.Add("rescheduled");                      listViewItem.SubItems.Add("-");                        //listViewItem.SubItems.Add((Math.Round(provisioningRate.Rate' 2) * 100).ToString());                      listViewItem.SubItems.Add((provisioningRate.ProvisioningValue * 100).ToString());                      listViewItem.SubItems.Add((provisioningRate.ProvisioningInterest * 100).ToString());                      listViewItem.SubItems.Add((provisioningRate.ProvisioningPenalty * 100).ToString());                      listViewItemRes = listViewItem;                  }                  else                  {                      listViewItem.Tag = provisioningRate;                      listViewItem.SubItems.Add(provisioningRate.NbOfDaysMin.ToString());                      listViewItem.SubItems.Add(provisioningRate.NbOfDaysMax.ToString());                      //listViewItem.SubItems.Add((Math.Round(provisioningRate.Rate' 2)*100).ToString());                      listViewItem.SubItems.Add((provisioningRate.ProvisioningValue * 100).ToString());                      listViewItem.SubItems.Add((provisioningRate.ProvisioningInterest * 100).ToString());                      listViewItem.SubItems.Add((provisioningRate.ProvisioningPenalty * 100).ToString());                      listViewProvisioningRules.Items.Add(listViewItem);                  }              }
Magic Number,OpenCBS.GUI.Configuration,FrmGeneralSettings,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Configuration\FrmGeneralSettings.cs,InitializeListViewProvisioningTables,The following statement contains a magic number: foreach (ProvisioningRate provisioningRate in provisioningRates)              {                  var listViewItem = new ListViewItem(provisioningRate.Number.ToString());                    if (provisioningRate.NbOfDaysMin == -1)                  {                      listViewItem.Tag = provisioningRate;                      listViewItem.SubItems.Add("rescheduled");                      listViewItem.SubItems.Add("-");                        //listViewItem.SubItems.Add((Math.Round(provisioningRate.Rate' 2) * 100).ToString());                      listViewItem.SubItems.Add((provisioningRate.ProvisioningValue * 100).ToString());                      listViewItem.SubItems.Add((provisioningRate.ProvisioningInterest * 100).ToString());                      listViewItem.SubItems.Add((provisioningRate.ProvisioningPenalty * 100).ToString());                      listViewItemRes = listViewItem;                  }                  else                  {                      listViewItem.Tag = provisioningRate;                      listViewItem.SubItems.Add(provisioningRate.NbOfDaysMin.ToString());                      listViewItem.SubItems.Add(provisioningRate.NbOfDaysMax.ToString());                      //listViewItem.SubItems.Add((Math.Round(provisioningRate.Rate' 2)*100).ToString());                      listViewItem.SubItems.Add((provisioningRate.ProvisioningValue * 100).ToString());                      listViewItem.SubItems.Add((provisioningRate.ProvisioningInterest * 100).ToString());                      listViewItem.SubItems.Add((provisioningRate.ProvisioningPenalty * 100).ToString());                      listViewProvisioningRules.Items.Add(listViewItem);                  }              }
Magic Number,OpenCBS.GUI.Configuration,FrmGeneralSettings,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Configuration\FrmGeneralSettings.cs,InitializeListViewProvisioningTables,The following statement contains a magic number: foreach (ProvisioningRate provisioningRate in provisioningRates)              {                  var listViewItem = new ListViewItem(provisioningRate.Number.ToString());                    if (provisioningRate.NbOfDaysMin == -1)                  {                      listViewItem.Tag = provisioningRate;                      listViewItem.SubItems.Add("rescheduled");                      listViewItem.SubItems.Add("-");                        //listViewItem.SubItems.Add((Math.Round(provisioningRate.Rate' 2) * 100).ToString());                      listViewItem.SubItems.Add((provisioningRate.ProvisioningValue * 100).ToString());                      listViewItem.SubItems.Add((provisioningRate.ProvisioningInterest * 100).ToString());                      listViewItem.SubItems.Add((provisioningRate.ProvisioningPenalty * 100).ToString());                      listViewItemRes = listViewItem;                  }                  else                  {                      listViewItem.Tag = provisioningRate;                      listViewItem.SubItems.Add(provisioningRate.NbOfDaysMin.ToString());                      listViewItem.SubItems.Add(provisioningRate.NbOfDaysMax.ToString());                      //listViewItem.SubItems.Add((Math.Round(provisioningRate.Rate' 2)*100).ToString());                      listViewItem.SubItems.Add((provisioningRate.ProvisioningValue * 100).ToString());                      listViewItem.SubItems.Add((provisioningRate.ProvisioningInterest * 100).ToString());                      listViewItem.SubItems.Add((provisioningRate.ProvisioningPenalty * 100).ToString());                      listViewProvisioningRules.Items.Add(listViewItem);                  }              }
Magic Number,OpenCBS.GUI.Configuration,FrmGeneralSettings,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Configuration\FrmGeneralSettings.cs,InitializeListViewProvisioningTables,The following statement contains a magic number: foreach (ProvisioningRate provisioningRate in provisioningRates)              {                  var listViewItem = new ListViewItem(provisioningRate.Number.ToString());                    if (provisioningRate.NbOfDaysMin == -1)                  {                      listViewItem.Tag = provisioningRate;                      listViewItem.SubItems.Add("rescheduled");                      listViewItem.SubItems.Add("-");                        //listViewItem.SubItems.Add((Math.Round(provisioningRate.Rate' 2) * 100).ToString());                      listViewItem.SubItems.Add((provisioningRate.ProvisioningValue * 100).ToString());                      listViewItem.SubItems.Add((provisioningRate.ProvisioningInterest * 100).ToString());                      listViewItem.SubItems.Add((provisioningRate.ProvisioningPenalty * 100).ToString());                      listViewItemRes = listViewItem;                  }                  else                  {                      listViewItem.Tag = provisioningRate;                      listViewItem.SubItems.Add(provisioningRate.NbOfDaysMin.ToString());                      listViewItem.SubItems.Add(provisioningRate.NbOfDaysMax.ToString());                      //listViewItem.SubItems.Add((Math.Round(provisioningRate.Rate' 2)*100).ToString());                      listViewItem.SubItems.Add((provisioningRate.ProvisioningValue * 100).ToString());                      listViewItem.SubItems.Add((provisioningRate.ProvisioningInterest * 100).ToString());                      listViewItem.SubItems.Add((provisioningRate.ProvisioningPenalty * 100).ToString());                      listViewProvisioningRules.Items.Add(listViewItem);                  }              }
Magic Number,OpenCBS.GUI.Configuration,FrmGeneralSettings,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Configuration\FrmGeneralSettings.cs,InitializeListViewProvisioningTables,The following statement contains a magic number: foreach (ProvisioningRate provisioningRate in provisioningRates)              {                  var listViewItem = new ListViewItem(provisioningRate.Number.ToString());                    if (provisioningRate.NbOfDaysMin == -1)                  {                      listViewItem.Tag = provisioningRate;                      listViewItem.SubItems.Add("rescheduled");                      listViewItem.SubItems.Add("-");                        //listViewItem.SubItems.Add((Math.Round(provisioningRate.Rate' 2) * 100).ToString());                      listViewItem.SubItems.Add((provisioningRate.ProvisioningValue * 100).ToString());                      listViewItem.SubItems.Add((provisioningRate.ProvisioningInterest * 100).ToString());                      listViewItem.SubItems.Add((provisioningRate.ProvisioningPenalty * 100).ToString());                      listViewItemRes = listViewItem;                  }                  else                  {                      listViewItem.Tag = provisioningRate;                      listViewItem.SubItems.Add(provisioningRate.NbOfDaysMin.ToString());                      listViewItem.SubItems.Add(provisioningRate.NbOfDaysMax.ToString());                      //listViewItem.SubItems.Add((Math.Round(provisioningRate.Rate' 2)*100).ToString());                      listViewItem.SubItems.Add((provisioningRate.ProvisioningValue * 100).ToString());                      listViewItem.SubItems.Add((provisioningRate.ProvisioningInterest * 100).ToString());                      listViewItem.SubItems.Add((provisioningRate.ProvisioningPenalty * 100).ToString());                      listViewProvisioningRules.Items.Add(listViewItem);                  }              }
Magic Number,OpenCBS.GUI.Configuration,FrmGeneralSettings,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Configuration\FrmGeneralSettings.cs,InitializeComponent,The following statement contains a magic number: this.dateTimePickerPublicHoliday.Value = new System.DateTime(2008' 10' 7' 0' 0' 0' 0);
Magic Number,OpenCBS.GUI.Configuration,FrmGeneralSettings,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Configuration\FrmGeneralSettings.cs,InitializeComponent,The following statement contains a magic number: this.dateTimePickerPublicHoliday.Value = new System.DateTime(2008' 10' 7' 0' 0' 0' 0);
Magic Number,OpenCBS.GUI.Configuration,FrmGeneralSettings,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Configuration\FrmGeneralSettings.cs,InitializeComponent,The following statement contains a magic number: this.dateTimePickerPublicHoliday.Value = new System.DateTime(2008' 10' 7' 0' 0' 0' 0);
Magic Number,OpenCBS.GUI.Configuration,FrmGeneralSettings,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Configuration\FrmGeneralSettings.cs,textBoxProvisioning_TextChanged,The following statement contains a magic number: try              {                  pR.ProvisioningValue = Convert.ToDouble(textBoxProvisioningOlb.Text) / 100;              }              catch (FormatException ex)              {                  MessageBox.Show("Invalid format: " + ex.Message);              }
Magic Number,OpenCBS.GUI.Configuration,FrmGeneralSettings,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Configuration\FrmGeneralSettings.cs,textBoxProvisioning_KeyPress,The following statement contains a magic number: const char Delete = (char)8;
Magic Number,OpenCBS.GUI.Configuration,FrmGeneralSettings,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Configuration\FrmGeneralSettings.cs,InitializeProvisioningRate,The following statement contains a magic number: if (pR.NbOfDaysMin == -1)              {                  textBoxProvisioningOlb.Text = (pR.ProvisioningValue * 100).ToString();                  textBoxProvisioningInterest.Text = (pR.ProvisioningInterest * 100).ToString();                  textBoxProvisioningPenalty.Text = (pR.ProvisioningPenalty * 100).ToString();                  textBoxNbOfDaysMin.Text = @"rest.";                  textBoxNbOfDaysMax.Text = @"rest.";              }              else              {                  textBoxNbOfDaysMin.Text = pR.NbOfDaysMin.ToString();                  textBoxNbOfDaysMax.Text = pR.NbOfDaysMax.ToString();                  textBoxProvisioningOlb.Text = (pR.ProvisioningValue * 100).ToString();                  textBoxProvisioningInterest.Text = (pR.ProvisioningInterest * 100).ToString();                  textBoxProvisioningPenalty.Text = (pR.ProvisioningPenalty * 100).ToString();              }
Magic Number,OpenCBS.GUI.Configuration,FrmGeneralSettings,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Configuration\FrmGeneralSettings.cs,InitializeProvisioningRate,The following statement contains a magic number: if (pR.NbOfDaysMin == -1)              {                  textBoxProvisioningOlb.Text = (pR.ProvisioningValue * 100).ToString();                  textBoxProvisioningInterest.Text = (pR.ProvisioningInterest * 100).ToString();                  textBoxProvisioningPenalty.Text = (pR.ProvisioningPenalty * 100).ToString();                  textBoxNbOfDaysMin.Text = @"rest.";                  textBoxNbOfDaysMax.Text = @"rest.";              }              else              {                  textBoxNbOfDaysMin.Text = pR.NbOfDaysMin.ToString();                  textBoxNbOfDaysMax.Text = pR.NbOfDaysMax.ToString();                  textBoxProvisioningOlb.Text = (pR.ProvisioningValue * 100).ToString();                  textBoxProvisioningInterest.Text = (pR.ProvisioningInterest * 100).ToString();                  textBoxProvisioningPenalty.Text = (pR.ProvisioningPenalty * 100).ToString();              }
Magic Number,OpenCBS.GUI.Configuration,FrmGeneralSettings,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Configuration\FrmGeneralSettings.cs,InitializeProvisioningRate,The following statement contains a magic number: if (pR.NbOfDaysMin == -1)              {                  textBoxProvisioningOlb.Text = (pR.ProvisioningValue * 100).ToString();                  textBoxProvisioningInterest.Text = (pR.ProvisioningInterest * 100).ToString();                  textBoxProvisioningPenalty.Text = (pR.ProvisioningPenalty * 100).ToString();                  textBoxNbOfDaysMin.Text = @"rest.";                  textBoxNbOfDaysMax.Text = @"rest.";              }              else              {                  textBoxNbOfDaysMin.Text = pR.NbOfDaysMin.ToString();                  textBoxNbOfDaysMax.Text = pR.NbOfDaysMax.ToString();                  textBoxProvisioningOlb.Text = (pR.ProvisioningValue * 100).ToString();                  textBoxProvisioningInterest.Text = (pR.ProvisioningInterest * 100).ToString();                  textBoxProvisioningPenalty.Text = (pR.ProvisioningPenalty * 100).ToString();              }
Magic Number,OpenCBS.GUI.Configuration,FrmGeneralSettings,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Configuration\FrmGeneralSettings.cs,InitializeProvisioningRate,The following statement contains a magic number: if (pR.NbOfDaysMin == -1)              {                  textBoxProvisioningOlb.Text = (pR.ProvisioningValue * 100).ToString();                  textBoxProvisioningInterest.Text = (pR.ProvisioningInterest * 100).ToString();                  textBoxProvisioningPenalty.Text = (pR.ProvisioningPenalty * 100).ToString();                  textBoxNbOfDaysMin.Text = @"rest.";                  textBoxNbOfDaysMax.Text = @"rest.";              }              else              {                  textBoxNbOfDaysMin.Text = pR.NbOfDaysMin.ToString();                  textBoxNbOfDaysMax.Text = pR.NbOfDaysMax.ToString();                  textBoxProvisioningOlb.Text = (pR.ProvisioningValue * 100).ToString();                  textBoxProvisioningInterest.Text = (pR.ProvisioningInterest * 100).ToString();                  textBoxProvisioningPenalty.Text = (pR.ProvisioningPenalty * 100).ToString();              }
Magic Number,OpenCBS.GUI.Configuration,FrmGeneralSettings,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Configuration\FrmGeneralSettings.cs,InitializeProvisioningRate,The following statement contains a magic number: if (pR.NbOfDaysMin == -1)              {                  textBoxProvisioningOlb.Text = (pR.ProvisioningValue * 100).ToString();                  textBoxProvisioningInterest.Text = (pR.ProvisioningInterest * 100).ToString();                  textBoxProvisioningPenalty.Text = (pR.ProvisioningPenalty * 100).ToString();                  textBoxNbOfDaysMin.Text = @"rest.";                  textBoxNbOfDaysMax.Text = @"rest.";              }              else              {                  textBoxNbOfDaysMin.Text = pR.NbOfDaysMin.ToString();                  textBoxNbOfDaysMax.Text = pR.NbOfDaysMax.ToString();                  textBoxProvisioningOlb.Text = (pR.ProvisioningValue * 100).ToString();                  textBoxProvisioningInterest.Text = (pR.ProvisioningInterest * 100).ToString();                  textBoxProvisioningPenalty.Text = (pR.ProvisioningPenalty * 100).ToString();              }
Magic Number,OpenCBS.GUI.Configuration,FrmGeneralSettings,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Configuration\FrmGeneralSettings.cs,InitializeProvisioningRate,The following statement contains a magic number: if (pR.NbOfDaysMin == -1)              {                  textBoxProvisioningOlb.Text = (pR.ProvisioningValue * 100).ToString();                  textBoxProvisioningInterest.Text = (pR.ProvisioningInterest * 100).ToString();                  textBoxProvisioningPenalty.Text = (pR.ProvisioningPenalty * 100).ToString();                  textBoxNbOfDaysMin.Text = @"rest.";                  textBoxNbOfDaysMax.Text = @"rest.";              }              else              {                  textBoxNbOfDaysMin.Text = pR.NbOfDaysMin.ToString();                  textBoxNbOfDaysMax.Text = pR.NbOfDaysMax.ToString();                  textBoxProvisioningOlb.Text = (pR.ProvisioningValue * 100).ToString();                  textBoxProvisioningInterest.Text = (pR.ProvisioningInterest * 100).ToString();                  textBoxProvisioningPenalty.Text = (pR.ProvisioningPenalty * 100).ToString();              }
Magic Number,OpenCBS.GUI.Configuration,FrmGeneralSettings,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Configuration\FrmGeneralSettings.cs,InitializeControls,The following statement contains a magic number: if (entry.Key.ToString() == OGeneralSettings.PAYFIRSTINSTALLMENTREALVALUE ||                  entry.Key.ToString() == OGeneralSettings.ALLOWSMULTIPLELOANS ||                  entry.Key.ToString() == OGeneralSettings.ALLOWSMULTIPLEGROUPS ||                  entry.Key.ToString() == OGeneralSettings.OLBBEFOREREPAYMENT ||                  entry.Key.ToString() == OGeneralSettings.CALCULATIONLATEFEESDURINGPUBLICHOLIDAYS ||                  entry.Key.ToString() == OGeneralSettings.DONOTSKIPWEEKENDSININSTALLMENTSDATE ||                  entry.Key.ToString() == OGeneralSettings.ENFORCE_ID_PATTERN ||                  entry.Key.ToString() == OGeneralSettings.INCREMENTALDURINGDAYOFF ||                  entry.Key.ToString() == OGeneralSettings.INTERESTS_ALSO_CREDITED_IN_FL ||                  entry.Key.ToString() == OGeneralSettings.AUTOMATIC_ID ||                  entry.Key.ToString() == OGeneralSettings.STOP_WRITEOFF_PENALTY ||                  entry.Key.ToString() == OGeneralSettings.MODIFY_ENTRY_FEE ||                  entry.Key.ToString() == OGeneralSettings.USE_MANDATORY_SAVING_ACCOUNT ||                  entry.Key.ToString() == OGeneralSettings.USE_DAILY_ACCRUAL_OF_PENALTY ||                  entry.Key.ToString() == OGeneralSettings.USE_EXTERNAL_ACCOUNTING ||                  entry.Key.ToString() == OGeneralSettings.SHOW_EXTRA_INTEREST_COLUMN)              {                  groupBoxValue.Visible = true;                  cbxValue.Visible = false;                  comboBoxSavings.Visible = false;                  textBoxGeneralParameterValue.Visible = false;                  clbxPendingSavings.Visible = false;              }              else if (entry.Key.ToString() == OGeneralSettings.ACCOUNTINGPROCESS)              {                  cbxValue.Items.Clear();                  cbxValue.Items.Add("Accrual");                  cbxValue.Items.Add("Cash");                    groupBoxValue.Visible = false;                  comboBoxSavings.Visible = false;                  textBoxGeneralParameterValue.Visible = false;                  clbxPendingSavings.Visible = false;                    cbxValue.Enabled = true;                  cbxValue.Visible = true;                  cbxValue.Width = 150;              }              else if (entry.Key.ToString() == OGeneralSettings.REAL_EXPECTED_AMOUNT)              {                  cbxValue.Visible = true;                  cbxValue.Items.Clear();                  cbxValue.Items.Add("Accrued interests");                  cbxValue.Items.Add("Accrued interests + principal");                    groupBoxValue.Visible = false;                  comboBoxSavings.Visible = false;                  textBoxGeneralParameterValue.Visible = false;                  clbxPendingSavings.Visible = false;              }              else if (entry.Key.ToString() == OGeneralSettings.SAVINGS_CODE_TEMPLATE)              {                  groupBoxValue.Visible = false;                  cbxValue.Visible = false;                  comboBoxSavings.Visible = true;                  textBoxGeneralParameterValue.Visible = false;              }              else if (entry.Key.ToString() == OGeneralSettings.PENDING_SAVINGS_MODE)              {                  groupBoxValue.Visible = false;                  cbxValue.Visible = false;                  comboBoxSavings.Visible = false;                  textBoxGeneralParameterValue.Visible = false;                  clbxPendingSavings.Visible = true;              }              else              {                  groupBoxValue.Visible = false;                  cbxValue.Visible = false;                  comboBoxSavings.Visible = false;                  clbxPendingSavings.Visible = false;                  textBoxGeneralParameterValue.Visible = true;              }
Magic Number,OpenCBS.GUI.Configuration,FrmGeneralSettings,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Configuration\FrmGeneralSettings.cs,textBoxGeneralParameterValue_TextChanged,The following statement contains a magic number: try              {                  if (entryKey == OGeneralSettings.GROUPMINMEMBERS ||                           entryKey == OGeneralSettings.GROUPMAXMEMBERS ||                           entryKey == OGeneralSettings.VILLAGEMINMEMBERS ||                           entryKey == OGeneralSettings.VILLAGEMAXMEMBERS ||                           entryKey == OGeneralSettings.CEASE_LAIE_DAYS ||                           entryKey == OGeneralSettings.CLIENT_AGE_MIN ||                           entryKey == OGeneralSettings.CLIENT_AGE_MAX ||                           entryKey == OGeneralSettings.MAX_LOANS_COVERED ||                           entryKey == OGeneralSettings.MAX_GUARANTOR_AMOUNT ||                           entryKey == OGeneralSettings.INTEREST_RATE_DECIMAL_PLACES)                  {                      if (textBoxGeneralParameterValue.Text != String.Empty)                      {                          try                          {                              entry.Value = Convert.ToInt32(textBoxGeneralParameterValue.Text);                          }                          catch                          {                              throw new GeneralSettingException(GeneralSettingEnumException.OnlyInt);                          }                      }                      else                          entry.Value = null;                    }                  else if (entryKey == OGeneralSettings.WEEKENDDAY1 ||                           entryKey == OGeneralSettings.WEEKENDDAY2)                  {                      textBoxGeneralParameterValue.Enabled = true;                      if (textBoxGeneralParameterValue.Text != String.Empty)                      {                          try                          {                              entry.Value = Convert.ToInt32(textBoxGeneralParameterValue.Text);                              var entryVal = int.Parse(entry.Value.ToString());                              if (entryVal > 6 || entryVal < 0)                                  throw new ArgumentOutOfRangeException();                          }                          catch                          {                              throw new GeneralSettingException(GeneralSettingEnumException.BetweenZeroAndSix);                          }                      }                      else                      {                          entry.Value = null;                      }                  }                    else if (entryKey == OGeneralSettings.LATEDAYSAFTERACCRUALCEASES)                  {                      if (textBoxGeneralParameterValue.Text == @"-")                          entry.Value = null;                      else                      {                          try                          {                              entry.Value = Convert.ToInt32(textBoxGeneralParameterValue.Text);                          }                          catch                          {                              textBoxGeneralParameterValue.Text = @"-";                              entry.Value = null;                              throw new GeneralSettingException(GeneralSettingEnumException.OnlyIntAndUnderscore);                          }                      }                  }                  else                  {                      entry.Value = textBoxGeneralParameterValue.Text;                  }              }              catch (Exception ex)              {                  new frmShowError(CustomExceptionHandler.ShowExceptionText(ex)).ShowDialog();                  if (entryKey != OGeneralSettings.LATEDAYSAFTERACCRUALCEASES)                  {                      textBoxGeneralParameterValue.Text = String.Empty;                      entry.Value = String.Empty;                  }              }
Magic Number,OpenCBS.GUI.Configuration,FrmGeneralSettings,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Configuration\FrmGeneralSettings.cs,comboBoxValue_SelectionChangeCommitted,The following statement contains a magic number: entry.Value = cbxValue.SelectedItem.ToString() == "Cash" ? 1 : 2;
Magic Number,OpenCBS.GUI.Configuration,FrmGeneralSettings,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Configuration\FrmGeneralSettings.cs,FrmGeneralSettings_Load,The following statement contains a magic number: cbxValue.Location = new Point(96' 71);
Magic Number,OpenCBS.GUI.Configuration,FrmGeneralSettings,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Configuration\FrmGeneralSettings.cs,FrmGeneralSettings_Load,The following statement contains a magic number: cbxValue.Location = new Point(96' 71);
Magic Number,OpenCBS.GUI.Configuration,FrmGeneralSettings,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Configuration\FrmGeneralSettings.cs,textBoxNbOfDaysMin_KeyPress,The following statement contains a magic number: const char Delete = (char)8;
Magic Number,OpenCBS.GUI.Configuration,FrmGeneralSettings,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Configuration\FrmGeneralSettings.cs,textBoxNbOfDaysMax_KeyPress,The following statement contains a magic number: const char Delete = (char)8;
Magic Number,OpenCBS.GUI.Configuration,FrmGeneralSettings,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Configuration\FrmGeneralSettings.cs,textBoxProvisioningInterest_TextChanged,The following statement contains a magic number: try              {                  pR.ProvisioningInterest = Convert.ToDouble(textBoxProvisioningInterest.Text) / 100;              }              catch (FormatException ex)              {                  MessageBox.Show("Invalid format: " + ex.Message);              }
Magic Number,OpenCBS.GUI.Configuration,FrmGeneralSettings,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Configuration\FrmGeneralSettings.cs,textBoxProvisioningInterest_KeyPress,The following statement contains a magic number: const char Delete = (char)8;
Magic Number,OpenCBS.GUI.Configuration,FrmGeneralSettings,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Configuration\FrmGeneralSettings.cs,textBoxProvisioningPenalty_TextChanged,The following statement contains a magic number: try              {                  pR.ProvisioningPenalty = Convert.ToDouble(textBoxProvisioningPenalty.Text) / 100;              }              catch (FormatException ex)              {                  MessageBox.Show("Invalid format: " + ex.Message);              }
Magic Number,OpenCBS.GUI.Configuration,FrmSettingsImportExport,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Configuration\frmSettingsImportExport.cs,InitializeComponent,The following statement contains a magic number: this.imagesSettings.Images.SetKeyName(2' "GRP");
Magic Number,OpenCBS.GUI.Configuration,FrmSettingsImportExport,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Configuration\frmSettingsImportExport.cs,InitializeComponent,The following statement contains a magic number: this.imagesSettings.Images.SetKeyName(3' "DEF");
Magic Number,OpenCBS.GUI.Configuration,FrmSettingsImportExport,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Configuration\frmSettingsImportExport.cs,InitializeComponent,The following statement contains a magic number: this.imagesSettings.Images.SetKeyName(4' "BAD");
Magic Number,OpenCBS.GUI.Contracts,AddTrancheForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\AddTrancheForm.cs,AddTrancheForm,The following statement contains a magic number: interestRateNumericUpDown.Value = contract.InterestRate * 100;
Magic Number,OpenCBS.GUI.Contracts,AddTrancheForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\AddTrancheForm.cs,AddTrancheForm,The following statement contains a magic number: if (contract.Product.InterestRate.HasValue) { /* checkBoxIRChanged.Enabled = false; */ }              else              {                  interestRateNumericUpDown.Minimum = Convert.ToDecimal(contract.Product.InterestRateMin * 100);                  interestRateNumericUpDown.Maximum = Convert.ToDecimal(contract.Product.InterestRateMax * 100);              }
Magic Number,OpenCBS.GUI.Contracts,AddTrancheForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\AddTrancheForm.cs,AddTrancheForm,The following statement contains a magic number: if (contract.Product.InterestRate.HasValue) { /* checkBoxIRChanged.Enabled = false; */ }              else              {                  interestRateNumericUpDown.Minimum = Convert.ToDecimal(contract.Product.InterestRateMin * 100);                  interestRateNumericUpDown.Maximum = Convert.ToDecimal(contract.Product.InterestRateMax * 100);              }
Magic Number,OpenCBS.GUI.Contracts,AddTrancheForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\AddTrancheForm.cs,tbDateOffset_KeyDown,The following statement contains a magic number: if (e.KeyValue == 110 || e.KeyValue == 188) return;
Magic Number,OpenCBS.GUI.Contracts,AddTrancheForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\AddTrancheForm.cs,tbDateOffset_KeyDown,The following statement contains a magic number: if (e.KeyValue == 110 || e.KeyValue == 188) return;
Magic Number,OpenCBS.GUI.Contracts,AddTrancheForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\AddTrancheForm.cs,AddTranche,The following statement contains a magic number: var entryFeesForm = new LoanEntryFeesForm                  {                      EntryFees = _contract                          .LoanEntryFeesList                          .GroupBy(i => i.ProductEntryFeeId)                          .Select(i => i.First())                          .Select(fee =>                              {                                  var result = new LoanEntryFee                                      {                                          FeeValue =                                              fee.ProductEntryFee.IsRate                                                  ? configuration.Amount*fee.FeeValue/100                                                  : fee.FeeValue'                                          Id = fee.Id'                                          ProductEntryFee = fee.ProductEntryFee'                                          ProductEntryFeeId = fee.ProductEntryFeeId                                      };                                  return result;                              }).ToList()                  };
Magic Number,OpenCBS.GUI.Contracts,AddTrancheForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\AddTrancheForm.cs,InitializeComponent,The following statement contains a magic number: this.interestRateNumericUpDown.DecimalPlaces = 2;
Magic Number,OpenCBS.GUI.Contracts,AddTrancheForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\AddTrancheForm.cs,InitializeComponent,The following statement contains a magic number: this.interestRateNumericUpDown.Increment = new decimal(new int[] {              5'              0'              0'              131072});
Magic Number,OpenCBS.GUI.Contracts,AddTrancheForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\AddTrancheForm.cs,InitializeComponent,The following statement contains a magic number: this.interestRateNumericUpDown.Increment = new decimal(new int[] {              5'              0'              0'              131072});
Magic Number,OpenCBS.GUI.Contracts,ReschedulingForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\ReschedulingForm.cs,InitializeRescheduleComponents,The following statement contains a magic number: _interestRateTextBox.Amount = Contract.InterestRate * 100;
Magic Number,OpenCBS.GUI.Contracts,ReschedulingForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\ReschedulingForm.cs,GetRescheduleConfiguration,The following statement contains a magic number: return new ScheduleConfiguration              {                  NumberOfInstallments = (int) installmentsNumericUpDown.Value'                  InterestRate = _interestRateTextBox.Amount.HasValue ? _interestRateTextBox.Amount.Value : Contract.InterestRate*100'                  GracePeriod = (int) gracePeriodNumericUpDown.Value'                  ChargeInterestDuringGracePeriod = chargeInterestDuringGracePeriodCheckBox.Checked'                  StartDate = startDateTimePicker.Value.Date'                  PreferredFirstInstallmentDate = firstRepaymentDateTimePicker.Value.Date'                  PreviousInterestRate = _contract.InterestRate'              };
Magic Number,OpenCBS.GUI.Contracts,ReschedulingForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\ReschedulingForm.cs,Reschedule,The following statement contains a magic number: try              {                                  _contract.Rescheduled = true;                  _contract = ServicesProvider                      .GetInstance()                      .GetContractServices()                      .Reschedule(_contract' _client' GetRescheduleConfiguration());                  _contract.NbOfInstallments = _contract.InstallmentList.Count;                  _contract.InterestRate = _interestRateTextBox.Amount.HasValue ? _interestRateTextBox.Amount.Value : Contract.InterestRate * 100;                  DialogResult = DialogResult.OK;                  Close();              }              catch (Exception ex)              {                  new frmShowError(CustomExceptionHandler.ShowExceptionText(ex)).ShowDialog();              }
Magic Number,OpenCBS.GUI.Contracts,FastDepositForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\FastDepositForm.cs,lvContracts_MouseDown,The following statement contains a magic number: if (MouseButtons.Left == e.Button)                  if (e.Clicks >= 2)                      _blockItemCheck = true;
Magic Number,OpenCBS.GUI.Contracts,FastDepositForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\FastDepositForm.cs,lvContracts_SubItemClicked,The following statement contains a magic number: if (e.Item.Checked && e.Item != _itemTotal)              {                  if (idxAmount == e.SubItem)                  {                      udAmount.ResetText();                      if (((ISavingsContract)e.Item.Tag).Product.Currency.UseCents)                          udAmount.DecimalPlaces = 2;                      else                          udAmount.DecimalPlaces = 0;                      udAmount.Minimum = ((ISavingsContract)e.Item.Tag).Product.DepositMin.Value;                      udAmount.Maximum = ((ISavingsContract)e.Item.Tag).Product.DepositMax.Value;                      lvContracts.StartEditing(udAmount' e.Item' e.SubItem);                  }              }
Magic Number,OpenCBS.GUI.Contracts,ManualScheduleForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\ManualScheduleForm.cs,InitializeSchedule,The following statement contains a magic number: _rounding = Loan.UseCents ? 2 : 0;
Magic Number,OpenCBS.GUI.Contracts,ManualScheduleForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\ManualScheduleForm.cs,FormatRow,The following statement contains a magic number: if (installment.IsRepaid) item.BackColor = Color.FromArgb(61' 153' 57);
Magic Number,OpenCBS.GUI.Contracts,ManualScheduleForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\ManualScheduleForm.cs,FormatRow,The following statement contains a magic number: if (installment.IsRepaid) item.BackColor = Color.FromArgb(61' 153' 57);
Magic Number,OpenCBS.GUI.Contracts,ManualScheduleForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\ManualScheduleForm.cs,FormatRow,The following statement contains a magic number: if (installment.IsRepaid) item.BackColor = Color.FromArgb(61' 153' 57);
Magic Number,OpenCBS.GUI.Contracts,ManualScheduleForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\ManualScheduleForm.cs,ScheduleRecalculation,The following statement contains a magic number: for (var i = indexOfChangedItem; i < Loan.InstallmentList.Count; i++)              {                  int daysInTheYear = Loan.Product.InterestScheme == OInterestScheme.Actual360 ||                                      Loan.Product.InterestScheme == OInterestScheme.Thirty360                      ? 360                      : DateTime.IsLeapYear(Loan.StartDate.Year) ? 366 : 365;                    int days;                  if (i == 0)                      days = (Loan.InstallmentList[0].ExpectedDate - Loan.StartDate).Days;                  else                      days = (Loan.InstallmentList[i].ExpectedDate -                          Loan.InstallmentList[i - 1].ExpectedDate).Days;                  days = Loan.Product.InterestScheme == OInterestScheme.ActualActual ||                          Loan.Product.InterestScheme == OInterestScheme.Actual360                      ? days                      : 30;                    var interest = Math.Round(Loan.InstallmentList[i].OLB.Value * Loan.InterestRate /                              daysInTheYear * days' _rounding);                  _total.InterestsRepayment += interest - Loan.InstallmentList[i].InterestsRepayment;                  Loan.InstallmentList[i].InterestsRepayment = interest;              }
Magic Number,OpenCBS.GUI.Contracts,ManualScheduleForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\ManualScheduleForm.cs,ScheduleRecalculation,The following statement contains a magic number: for (var i = indexOfChangedItem; i < Loan.InstallmentList.Count; i++)              {                  int daysInTheYear = Loan.Product.InterestScheme == OInterestScheme.Actual360 ||                                      Loan.Product.InterestScheme == OInterestScheme.Thirty360                      ? 360                      : DateTime.IsLeapYear(Loan.StartDate.Year) ? 366 : 365;                    int days;                  if (i == 0)                      days = (Loan.InstallmentList[0].ExpectedDate - Loan.StartDate).Days;                  else                      days = (Loan.InstallmentList[i].ExpectedDate -                          Loan.InstallmentList[i - 1].ExpectedDate).Days;                  days = Loan.Product.InterestScheme == OInterestScheme.ActualActual ||                          Loan.Product.InterestScheme == OInterestScheme.Actual360                      ? days                      : 30;                    var interest = Math.Round(Loan.InstallmentList[i].OLB.Value * Loan.InterestRate /                              daysInTheYear * days' _rounding);                  _total.InterestsRepayment += interest - Loan.InstallmentList[i].InterestsRepayment;                  Loan.InstallmentList[i].InterestsRepayment = interest;              }
Magic Number,OpenCBS.GUI.Contracts,ManualScheduleForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\ManualScheduleForm.cs,ScheduleRecalculation,The following statement contains a magic number: for (var i = indexOfChangedItem; i < Loan.InstallmentList.Count; i++)              {                  int daysInTheYear = Loan.Product.InterestScheme == OInterestScheme.Actual360 ||                                      Loan.Product.InterestScheme == OInterestScheme.Thirty360                      ? 360                      : DateTime.IsLeapYear(Loan.StartDate.Year) ? 366 : 365;                    int days;                  if (i == 0)                      days = (Loan.InstallmentList[0].ExpectedDate - Loan.StartDate).Days;                  else                      days = (Loan.InstallmentList[i].ExpectedDate -                          Loan.InstallmentList[i - 1].ExpectedDate).Days;                  days = Loan.Product.InterestScheme == OInterestScheme.ActualActual ||                          Loan.Product.InterestScheme == OInterestScheme.Actual360                      ? days                      : 30;                    var interest = Math.Round(Loan.InstallmentList[i].OLB.Value * Loan.InterestRate /                              daysInTheYear * days' _rounding);                  _total.InterestsRepayment += interest - Loan.InstallmentList[i].InterestsRepayment;                  Loan.InstallmentList[i].InterestsRepayment = interest;              }
Magic Number,OpenCBS.GUI.Contracts,ManualScheduleForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\ManualScheduleForm.cs,ScheduleRecalculation,The following statement contains a magic number: for (var i = indexOfChangedItem; i < Loan.InstallmentList.Count; i++)              {                  int daysInTheYear = Loan.Product.InterestScheme == OInterestScheme.Actual360 ||                                      Loan.Product.InterestScheme == OInterestScheme.Thirty360                      ? 360                      : DateTime.IsLeapYear(Loan.StartDate.Year) ? 366 : 365;                    int days;                  if (i == 0)                      days = (Loan.InstallmentList[0].ExpectedDate - Loan.StartDate).Days;                  else                      days = (Loan.InstallmentList[i].ExpectedDate -                          Loan.InstallmentList[i - 1].ExpectedDate).Days;                  days = Loan.Product.InterestScheme == OInterestScheme.ActualActual ||                          Loan.Product.InterestScheme == OInterestScheme.Actual360                      ? days                      : 30;                    var interest = Math.Round(Loan.InstallmentList[i].OLB.Value * Loan.InterestRate /                              daysInTheYear * days' _rounding);                  _total.InterestsRepayment += interest - Loan.InstallmentList[i].InterestsRepayment;                  Loan.InstallmentList[i].InterestsRepayment = interest;              }
Magic Number,OpenCBS.GUI.Contracts,VillageAddSavingsForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\VillageAddSavingsForm.cs,InitializeControls,The following statement contains a magic number: if (!_product.InterestRate.HasValue)              {                  _defaultInterestRate = _product.InterestRateMin.Value * 100;                  udInterestRate.Minimum = (decimal)_product.InterestRateMin * 100;                  udInterestRate.Maximum = (decimal)_product.InterestRateMax * 100;              }              else                  _defaultInterestRate = _product.InterestRate.Value * 100;
Magic Number,OpenCBS.GUI.Contracts,VillageAddSavingsForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\VillageAddSavingsForm.cs,InitializeControls,The following statement contains a magic number: if (!_product.InterestRate.HasValue)              {                  _defaultInterestRate = _product.InterestRateMin.Value * 100;                  udInterestRate.Minimum = (decimal)_product.InterestRateMin * 100;                  udInterestRate.Maximum = (decimal)_product.InterestRateMax * 100;              }              else                  _defaultInterestRate = _product.InterestRate.Value * 100;
Magic Number,OpenCBS.GUI.Contracts,VillageAddSavingsForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\VillageAddSavingsForm.cs,InitializeControls,The following statement contains a magic number: if (!_product.InterestRate.HasValue)              {                  _defaultInterestRate = _product.InterestRateMin.Value * 100;                  udInterestRate.Minimum = (decimal)_product.InterestRateMin * 100;                  udInterestRate.Maximum = (decimal)_product.InterestRateMax * 100;              }              else                  _defaultInterestRate = _product.InterestRate.Value * 100;
Magic Number,OpenCBS.GUI.Contracts,VillageAddSavingsForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\VillageAddSavingsForm.cs,InitializeControls,The following statement contains a magic number: if (!_product.InterestRate.HasValue)              {                  _defaultInterestRate = _product.InterestRateMin.Value * 100;                  udInterestRate.Minimum = (decimal)_product.InterestRateMin * 100;                  udInterestRate.Maximum = (decimal)_product.InterestRateMax * 100;              }              else                  _defaultInterestRate = _product.InterestRate.Value * 100;
Magic Number,OpenCBS.GUI.Contracts,VillageAddSavingsForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\VillageAddSavingsForm.cs,InitializeControls,The following statement contains a magic number: if (_product is SavingsBookProduct)              {                  SavingsBookProduct sbp = (SavingsBookProduct) _product;                  lvMembers.Columns.Remove(chLoan);                  if (sbp.WithdrawFeesType == OSavingsFeesType.Flat)                  {                      if (!sbp.FlatWithdrawFees.HasValue)                      {                          _defaultWithdrawFees = sbp.FlatWithdrawFeesMin.Value;                          udWithdrawFees.Minimum = sbp.FlatWithdrawFeesMin.Value;                          udWithdrawFees.Maximum = sbp.FlatWithdrawFeesMax.Value;                      }                      else                      {                          _defaultWithdrawFees = sbp.FlatWithdrawFees.Value;                      }                  }                  else                  {                      if (!sbp.RateWithdrawFees.HasValue)                      {                          _defaultWithdrawFees = (decimal)sbp.RateWithdrawFeesMin.Value * 100;                          udWithdrawFees.Minimum = (decimal)sbp.RateWithdrawFeesMin.Value * 100;                          udWithdrawFees.Maximum = (decimal)sbp.RateWithdrawFeesMax.Value * 100;                      }                      else                          _defaultWithdrawFees = (decimal)sbp.RateWithdrawFees.Value * 100;                  }                    if (sbp.TransferFeesType == OSavingsFeesType.Flat)                  {                      if (!sbp.FlatTransferFees.HasValue)                      {                          _defaultTransferFees = sbp.FlatTransferFeesMin.Value;                          udTransferFees.Minimum = sbp.FlatTransferFeesMin.Value;                          udTransferFees.Maximum = sbp.FlatTransferFeesMax.Value;                      }                      else                          _defaultTransferFees = sbp.FlatTransferFees.Value;                  }                  else                  {                      if (!sbp.RateTransferFees.HasValue)                      {                          _defaultTransferFees = (decimal)sbp.RateTransferFeesMin.Value * 100;                          udTransferFees.Minimum = (decimal)sbp.RateTransferFeesMin.Value * 100;                          udTransferFees.Maximum = (decimal)sbp.RateTransferFeesMax.Value * 100;                      }                      else                          _defaultTransferFees = (decimal)sbp.RateTransferFees.Value * 100;                  }                    if (sbp.InterBranchTransferFee.IsRange)                  {                      _defaultIbtFees = sbp.InterBranchTransferFee.Min.Value;                      nudIbtFees.Minimum = sbp.InterBranchTransferFee.Min.Value;                      nudIbtFees.Maximum = sbp.InterBranchTransferFee.Max.Value;                      nudIbtFees.Increment = sbp.InterBranchTransferFee.IsFlat ? 1 : 0.01m;                  }                  else                  {                      _defaultIbtFees = sbp.InterBranchTransferFee.Value.Value;                      nudIbtFees.Minimum = _defaultIbtFees;                      nudIbtFees.Maximum = _defaultIbtFees;                  }                    // Deposit fees                  if (!sbp.DepositFees.HasValue)                  {                      _defaultDepositFees = sbp.DepositFeesMin.Value;                      udDepositFees.Minimum = sbp.DepositFeesMin.Value;                      udDepositFees.Maximum = sbp.DepositFeesMax.Value;                  }                  else                      _defaultDepositFees = sbp.DepositFees.Value;                    // Cheque deposit fees                  if (!sbp.ChequeDepositFees.HasValue)                  {                      _defaultChequeDepositFees = sbp.ChequeDepositFeesMin.Value;                      udChequeDepositFees.Minimum = sbp.ChequeDepositFeesMin.Value;                      udChequeDepositFees.Maximum = sbp.ChequeDepositFeesMax.Value;                  }                  else                      _defaultChequeDepositFees = sbp.ChequeDepositFees.Value;                    // Close fees                  if (!sbp.CloseFees.HasValue)                  {                      _defaultCloseFees = sbp.CloseFeesMin.Value;                      udCloseFees.Minimum = sbp.CloseFeesMin.Value;                      udCloseFees.Maximum = sbp.CloseFeesMax.Value;                  }                  else                      _defaultCloseFees = sbp.CloseFees.Value;                    // Management                  if (!sbp.ManagementFees.HasValue)                  {                      _defaultManagementFees = sbp.ManagementFeesMin.Value;                      udManagementFees.Minimum = sbp.ManagementFeesMin.Value;                      udManagementFees.Maximum = sbp.ManagementFeesMax.Value;                  }                  else                      _defaultManagementFees = sbp.ManagementFees.Value;                    // Overdraft                  if (!sbp.OverdraftFees.HasValue)                  {                      _defaultOverdraftFees = sbp.OverdraftFeesMin.Value;                      udOverdraftFees.Minimum = sbp.OverdraftFeesMin.Value;                      udOverdraftFees.Maximum = sbp.OverdraftFeesMax.Value;                  }                  else                      _defaultOverdraftFees = sbp.OverdraftFees.Value;                    // Agio                  if (!sbp.AgioFees.HasValue)                  {                      _defaultAgioFees = (decimal) sbp.AgioFeesMin.Value * 100;                      udAgioFees.Minimum = (decimal) sbp.AgioFeesMin.Value * 100;                      udAgioFees.Maximum = (decimal) sbp.AgioFeesMax.Value * 100;                  }                  else                      _defaultAgioFees = (decimal) sbp.AgioFees.Value * 100;                    // Reopen                  if (!sbp.ReopenFees.HasValue)                  {                      _defaultReopenFees = sbp.ReopenFeesMin.Value;                      udReopenFees.Minimum = sbp.ReopenFeesMin.Value;                      udReopenFees.Maximum = sbp.ReopenFeesMax.Value;                  }                  else                      _defaultReopenFees = sbp.ReopenFees.Value;              }
Magic Number,OpenCBS.GUI.Contracts,VillageAddSavingsForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\VillageAddSavingsForm.cs,InitializeControls,The following statement contains a magic number: if (_product is SavingsBookProduct)              {                  SavingsBookProduct sbp = (SavingsBookProduct) _product;                  lvMembers.Columns.Remove(chLoan);                  if (sbp.WithdrawFeesType == OSavingsFeesType.Flat)                  {                      if (!sbp.FlatWithdrawFees.HasValue)                      {                          _defaultWithdrawFees = sbp.FlatWithdrawFeesMin.Value;                          udWithdrawFees.Minimum = sbp.FlatWithdrawFeesMin.Value;                          udWithdrawFees.Maximum = sbp.FlatWithdrawFeesMax.Value;                      }                      else                      {                          _defaultWithdrawFees = sbp.FlatWithdrawFees.Value;                      }                  }                  else                  {                      if (!sbp.RateWithdrawFees.HasValue)                      {                          _defaultWithdrawFees = (decimal)sbp.RateWithdrawFeesMin.Value * 100;                          udWithdrawFees.Minimum = (decimal)sbp.RateWithdrawFeesMin.Value * 100;                          udWithdrawFees.Maximum = (decimal)sbp.RateWithdrawFeesMax.Value * 100;                      }                      else                          _defaultWithdrawFees = (decimal)sbp.RateWithdrawFees.Value * 100;                  }                    if (sbp.TransferFeesType == OSavingsFeesType.Flat)                  {                      if (!sbp.FlatTransferFees.HasValue)                      {                          _defaultTransferFees = sbp.FlatTransferFeesMin.Value;                          udTransferFees.Minimum = sbp.FlatTransferFeesMin.Value;                          udTransferFees.Maximum = sbp.FlatTransferFeesMax.Value;                      }                      else                          _defaultTransferFees = sbp.FlatTransferFees.Value;                  }                  else                  {                      if (!sbp.RateTransferFees.HasValue)                      {                          _defaultTransferFees = (decimal)sbp.RateTransferFeesMin.Value * 100;                          udTransferFees.Minimum = (decimal)sbp.RateTransferFeesMin.Value * 100;                          udTransferFees.Maximum = (decimal)sbp.RateTransferFeesMax.Value * 100;                      }                      else                          _defaultTransferFees = (decimal)sbp.RateTransferFees.Value * 100;                  }                    if (sbp.InterBranchTransferFee.IsRange)                  {                      _defaultIbtFees = sbp.InterBranchTransferFee.Min.Value;                      nudIbtFees.Minimum = sbp.InterBranchTransferFee.Min.Value;                      nudIbtFees.Maximum = sbp.InterBranchTransferFee.Max.Value;                      nudIbtFees.Increment = sbp.InterBranchTransferFee.IsFlat ? 1 : 0.01m;                  }                  else                  {                      _defaultIbtFees = sbp.InterBranchTransferFee.Value.Value;                      nudIbtFees.Minimum = _defaultIbtFees;                      nudIbtFees.Maximum = _defaultIbtFees;                  }                    // Deposit fees                  if (!sbp.DepositFees.HasValue)                  {                      _defaultDepositFees = sbp.DepositFeesMin.Value;                      udDepositFees.Minimum = sbp.DepositFeesMin.Value;                      udDepositFees.Maximum = sbp.DepositFeesMax.Value;                  }                  else                      _defaultDepositFees = sbp.DepositFees.Value;                    // Cheque deposit fees                  if (!sbp.ChequeDepositFees.HasValue)                  {                      _defaultChequeDepositFees = sbp.ChequeDepositFeesMin.Value;                      udChequeDepositFees.Minimum = sbp.ChequeDepositFeesMin.Value;                      udChequeDepositFees.Maximum = sbp.ChequeDepositFeesMax.Value;                  }                  else                      _defaultChequeDepositFees = sbp.ChequeDepositFees.Value;                    // Close fees                  if (!sbp.CloseFees.HasValue)                  {                      _defaultCloseFees = sbp.CloseFeesMin.Value;                      udCloseFees.Minimum = sbp.CloseFeesMin.Value;                      udCloseFees.Maximum = sbp.CloseFeesMax.Value;                  }                  else                      _defaultCloseFees = sbp.CloseFees.Value;                    // Management                  if (!sbp.ManagementFees.HasValue)                  {                      _defaultManagementFees = sbp.ManagementFeesMin.Value;                      udManagementFees.Minimum = sbp.ManagementFeesMin.Value;                      udManagementFees.Maximum = sbp.ManagementFeesMax.Value;                  }                  else                      _defaultManagementFees = sbp.ManagementFees.Value;                    // Overdraft                  if (!sbp.OverdraftFees.HasValue)                  {                      _defaultOverdraftFees = sbp.OverdraftFeesMin.Value;                      udOverdraftFees.Minimum = sbp.OverdraftFeesMin.Value;                      udOverdraftFees.Maximum = sbp.OverdraftFeesMax.Value;                  }                  else                      _defaultOverdraftFees = sbp.OverdraftFees.Value;                    // Agio                  if (!sbp.AgioFees.HasValue)                  {                      _defaultAgioFees = (decimal) sbp.AgioFeesMin.Value * 100;                      udAgioFees.Minimum = (decimal) sbp.AgioFeesMin.Value * 100;                      udAgioFees.Maximum = (decimal) sbp.AgioFeesMax.Value * 100;                  }                  else                      _defaultAgioFees = (decimal) sbp.AgioFees.Value * 100;                    // Reopen                  if (!sbp.ReopenFees.HasValue)                  {                      _defaultReopenFees = sbp.ReopenFeesMin.Value;                      udReopenFees.Minimum = sbp.ReopenFeesMin.Value;                      udReopenFees.Maximum = sbp.ReopenFeesMax.Value;                  }                  else                      _defaultReopenFees = sbp.ReopenFees.Value;              }
Magic Number,OpenCBS.GUI.Contracts,VillageAddSavingsForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\VillageAddSavingsForm.cs,InitializeControls,The following statement contains a magic number: if (_product is SavingsBookProduct)              {                  SavingsBookProduct sbp = (SavingsBookProduct) _product;                  lvMembers.Columns.Remove(chLoan);                  if (sbp.WithdrawFeesType == OSavingsFeesType.Flat)                  {                      if (!sbp.FlatWithdrawFees.HasValue)                      {                          _defaultWithdrawFees = sbp.FlatWithdrawFeesMin.Value;                          udWithdrawFees.Minimum = sbp.FlatWithdrawFeesMin.Value;                          udWithdrawFees.Maximum = sbp.FlatWithdrawFeesMax.Value;                      }                      else                      {                          _defaultWithdrawFees = sbp.FlatWithdrawFees.Value;                      }                  }                  else                  {                      if (!sbp.RateWithdrawFees.HasValue)                      {                          _defaultWithdrawFees = (decimal)sbp.RateWithdrawFeesMin.Value * 100;                          udWithdrawFees.Minimum = (decimal)sbp.RateWithdrawFeesMin.Value * 100;                          udWithdrawFees.Maximum = (decimal)sbp.RateWithdrawFeesMax.Value * 100;                      }                      else                          _defaultWithdrawFees = (decimal)sbp.RateWithdrawFees.Value * 100;                  }                    if (sbp.TransferFeesType == OSavingsFeesType.Flat)                  {                      if (!sbp.FlatTransferFees.HasValue)                      {                          _defaultTransferFees = sbp.FlatTransferFeesMin.Value;                          udTransferFees.Minimum = sbp.FlatTransferFeesMin.Value;                          udTransferFees.Maximum = sbp.FlatTransferFeesMax.Value;                      }                      else                          _defaultTransferFees = sbp.FlatTransferFees.Value;                  }                  else                  {                      if (!sbp.RateTransferFees.HasValue)                      {                          _defaultTransferFees = (decimal)sbp.RateTransferFeesMin.Value * 100;                          udTransferFees.Minimum = (decimal)sbp.RateTransferFeesMin.Value * 100;                          udTransferFees.Maximum = (decimal)sbp.RateTransferFeesMax.Value * 100;                      }                      else                          _defaultTransferFees = (decimal)sbp.RateTransferFees.Value * 100;                  }                    if (sbp.InterBranchTransferFee.IsRange)                  {                      _defaultIbtFees = sbp.InterBranchTransferFee.Min.Value;                      nudIbtFees.Minimum = sbp.InterBranchTransferFee.Min.Value;                      nudIbtFees.Maximum = sbp.InterBranchTransferFee.Max.Value;                      nudIbtFees.Increment = sbp.InterBranchTransferFee.IsFlat ? 1 : 0.01m;                  }                  else                  {                      _defaultIbtFees = sbp.InterBranchTransferFee.Value.Value;                      nudIbtFees.Minimum = _defaultIbtFees;                      nudIbtFees.Maximum = _defaultIbtFees;                  }                    // Deposit fees                  if (!sbp.DepositFees.HasValue)                  {                      _defaultDepositFees = sbp.DepositFeesMin.Value;                      udDepositFees.Minimum = sbp.DepositFeesMin.Value;                      udDepositFees.Maximum = sbp.DepositFeesMax.Value;                  }                  else                      _defaultDepositFees = sbp.DepositFees.Value;                    // Cheque deposit fees                  if (!sbp.ChequeDepositFees.HasValue)                  {                      _defaultChequeDepositFees = sbp.ChequeDepositFeesMin.Value;                      udChequeDepositFees.Minimum = sbp.ChequeDepositFeesMin.Value;                      udChequeDepositFees.Maximum = sbp.ChequeDepositFeesMax.Value;                  }                  else                      _defaultChequeDepositFees = sbp.ChequeDepositFees.Value;                    // Close fees                  if (!sbp.CloseFees.HasValue)                  {                      _defaultCloseFees = sbp.CloseFeesMin.Value;                      udCloseFees.Minimum = sbp.CloseFeesMin.Value;                      udCloseFees.Maximum = sbp.CloseFeesMax.Value;                  }                  else                      _defaultCloseFees = sbp.CloseFees.Value;                    // Management                  if (!sbp.ManagementFees.HasValue)                  {                      _defaultManagementFees = sbp.ManagementFeesMin.Value;                      udManagementFees.Minimum = sbp.ManagementFeesMin.Value;                      udManagementFees.Maximum = sbp.ManagementFeesMax.Value;                  }                  else                      _defaultManagementFees = sbp.ManagementFees.Value;                    // Overdraft                  if (!sbp.OverdraftFees.HasValue)                  {                      _defaultOverdraftFees = sbp.OverdraftFeesMin.Value;                      udOverdraftFees.Minimum = sbp.OverdraftFeesMin.Value;                      udOverdraftFees.Maximum = sbp.OverdraftFeesMax.Value;                  }                  else                      _defaultOverdraftFees = sbp.OverdraftFees.Value;                    // Agio                  if (!sbp.AgioFees.HasValue)                  {                      _defaultAgioFees = (decimal) sbp.AgioFeesMin.Value * 100;                      udAgioFees.Minimum = (decimal) sbp.AgioFeesMin.Value * 100;                      udAgioFees.Maximum = (decimal) sbp.AgioFeesMax.Value * 100;                  }                  else                      _defaultAgioFees = (decimal) sbp.AgioFees.Value * 100;                    // Reopen                  if (!sbp.ReopenFees.HasValue)                  {                      _defaultReopenFees = sbp.ReopenFeesMin.Value;                      udReopenFees.Minimum = sbp.ReopenFeesMin.Value;                      udReopenFees.Maximum = sbp.ReopenFeesMax.Value;                  }                  else                      _defaultReopenFees = sbp.ReopenFees.Value;              }
Magic Number,OpenCBS.GUI.Contracts,VillageAddSavingsForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\VillageAddSavingsForm.cs,InitializeControls,The following statement contains a magic number: if (_product is SavingsBookProduct)              {                  SavingsBookProduct sbp = (SavingsBookProduct) _product;                  lvMembers.Columns.Remove(chLoan);                  if (sbp.WithdrawFeesType == OSavingsFeesType.Flat)                  {                      if (!sbp.FlatWithdrawFees.HasValue)                      {                          _defaultWithdrawFees = sbp.FlatWithdrawFeesMin.Value;                          udWithdrawFees.Minimum = sbp.FlatWithdrawFeesMin.Value;                          udWithdrawFees.Maximum = sbp.FlatWithdrawFeesMax.Value;                      }                      else                      {                          _defaultWithdrawFees = sbp.FlatWithdrawFees.Value;                      }                  }                  else                  {                      if (!sbp.RateWithdrawFees.HasValue)                      {                          _defaultWithdrawFees = (decimal)sbp.RateWithdrawFeesMin.Value * 100;                          udWithdrawFees.Minimum = (decimal)sbp.RateWithdrawFeesMin.Value * 100;                          udWithdrawFees.Maximum = (decimal)sbp.RateWithdrawFeesMax.Value * 100;                      }                      else                          _defaultWithdrawFees = (decimal)sbp.RateWithdrawFees.Value * 100;                  }                    if (sbp.TransferFeesType == OSavingsFeesType.Flat)                  {                      if (!sbp.FlatTransferFees.HasValue)                      {                          _defaultTransferFees = sbp.FlatTransferFeesMin.Value;                          udTransferFees.Minimum = sbp.FlatTransferFeesMin.Value;                          udTransferFees.Maximum = sbp.FlatTransferFeesMax.Value;                      }                      else                          _defaultTransferFees = sbp.FlatTransferFees.Value;                  }                  else                  {                      if (!sbp.RateTransferFees.HasValue)                      {                          _defaultTransferFees = (decimal)sbp.RateTransferFeesMin.Value * 100;                          udTransferFees.Minimum = (decimal)sbp.RateTransferFeesMin.Value * 100;                          udTransferFees.Maximum = (decimal)sbp.RateTransferFeesMax.Value * 100;                      }                      else                          _defaultTransferFees = (decimal)sbp.RateTransferFees.Value * 100;                  }                    if (sbp.InterBranchTransferFee.IsRange)                  {                      _defaultIbtFees = sbp.InterBranchTransferFee.Min.Value;                      nudIbtFees.Minimum = sbp.InterBranchTransferFee.Min.Value;                      nudIbtFees.Maximum = sbp.InterBranchTransferFee.Max.Value;                      nudIbtFees.Increment = sbp.InterBranchTransferFee.IsFlat ? 1 : 0.01m;                  }                  else                  {                      _defaultIbtFees = sbp.InterBranchTransferFee.Value.Value;                      nudIbtFees.Minimum = _defaultIbtFees;                      nudIbtFees.Maximum = _defaultIbtFees;                  }                    // Deposit fees                  if (!sbp.DepositFees.HasValue)                  {                      _defaultDepositFees = sbp.DepositFeesMin.Value;                      udDepositFees.Minimum = sbp.DepositFeesMin.Value;                      udDepositFees.Maximum = sbp.DepositFeesMax.Value;                  }                  else                      _defaultDepositFees = sbp.DepositFees.Value;                    // Cheque deposit fees                  if (!sbp.ChequeDepositFees.HasValue)                  {                      _defaultChequeDepositFees = sbp.ChequeDepositFeesMin.Value;                      udChequeDepositFees.Minimum = sbp.ChequeDepositFeesMin.Value;                      udChequeDepositFees.Maximum = sbp.ChequeDepositFeesMax.Value;                  }                  else                      _defaultChequeDepositFees = sbp.ChequeDepositFees.Value;                    // Close fees                  if (!sbp.CloseFees.HasValue)                  {                      _defaultCloseFees = sbp.CloseFeesMin.Value;                      udCloseFees.Minimum = sbp.CloseFeesMin.Value;                      udCloseFees.Maximum = sbp.CloseFeesMax.Value;                  }                  else                      _defaultCloseFees = sbp.CloseFees.Value;                    // Management                  if (!sbp.ManagementFees.HasValue)                  {                      _defaultManagementFees = sbp.ManagementFeesMin.Value;                      udManagementFees.Minimum = sbp.ManagementFeesMin.Value;                      udManagementFees.Maximum = sbp.ManagementFeesMax.Value;                  }                  else                      _defaultManagementFees = sbp.ManagementFees.Value;                    // Overdraft                  if (!sbp.OverdraftFees.HasValue)                  {                      _defaultOverdraftFees = sbp.OverdraftFeesMin.Value;                      udOverdraftFees.Minimum = sbp.OverdraftFeesMin.Value;                      udOverdraftFees.Maximum = sbp.OverdraftFeesMax.Value;                  }                  else                      _defaultOverdraftFees = sbp.OverdraftFees.Value;                    // Agio                  if (!sbp.AgioFees.HasValue)                  {                      _defaultAgioFees = (decimal) sbp.AgioFeesMin.Value * 100;                      udAgioFees.Minimum = (decimal) sbp.AgioFeesMin.Value * 100;                      udAgioFees.Maximum = (decimal) sbp.AgioFeesMax.Value * 100;                  }                  else                      _defaultAgioFees = (decimal) sbp.AgioFees.Value * 100;                    // Reopen                  if (!sbp.ReopenFees.HasValue)                  {                      _defaultReopenFees = sbp.ReopenFeesMin.Value;                      udReopenFees.Minimum = sbp.ReopenFeesMin.Value;                      udReopenFees.Maximum = sbp.ReopenFeesMax.Value;                  }                  else                      _defaultReopenFees = sbp.ReopenFees.Value;              }
Magic Number,OpenCBS.GUI.Contracts,VillageAddSavingsForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\VillageAddSavingsForm.cs,InitializeControls,The following statement contains a magic number: if (_product is SavingsBookProduct)              {                  SavingsBookProduct sbp = (SavingsBookProduct) _product;                  lvMembers.Columns.Remove(chLoan);                  if (sbp.WithdrawFeesType == OSavingsFeesType.Flat)                  {                      if (!sbp.FlatWithdrawFees.HasValue)                      {                          _defaultWithdrawFees = sbp.FlatWithdrawFeesMin.Value;                          udWithdrawFees.Minimum = sbp.FlatWithdrawFeesMin.Value;                          udWithdrawFees.Maximum = sbp.FlatWithdrawFeesMax.Value;                      }                      else                      {                          _defaultWithdrawFees = sbp.FlatWithdrawFees.Value;                      }                  }                  else                  {                      if (!sbp.RateWithdrawFees.HasValue)                      {                          _defaultWithdrawFees = (decimal)sbp.RateWithdrawFeesMin.Value * 100;                          udWithdrawFees.Minimum = (decimal)sbp.RateWithdrawFeesMin.Value * 100;                          udWithdrawFees.Maximum = (decimal)sbp.RateWithdrawFeesMax.Value * 100;                      }                      else                          _defaultWithdrawFees = (decimal)sbp.RateWithdrawFees.Value * 100;                  }                    if (sbp.TransferFeesType == OSavingsFeesType.Flat)                  {                      if (!sbp.FlatTransferFees.HasValue)                      {                          _defaultTransferFees = sbp.FlatTransferFeesMin.Value;                          udTransferFees.Minimum = sbp.FlatTransferFeesMin.Value;                          udTransferFees.Maximum = sbp.FlatTransferFeesMax.Value;                      }                      else                          _defaultTransferFees = sbp.FlatTransferFees.Value;                  }                  else                  {                      if (!sbp.RateTransferFees.HasValue)                      {                          _defaultTransferFees = (decimal)sbp.RateTransferFeesMin.Value * 100;                          udTransferFees.Minimum = (decimal)sbp.RateTransferFeesMin.Value * 100;                          udTransferFees.Maximum = (decimal)sbp.RateTransferFeesMax.Value * 100;                      }                      else                          _defaultTransferFees = (decimal)sbp.RateTransferFees.Value * 100;                  }                    if (sbp.InterBranchTransferFee.IsRange)                  {                      _defaultIbtFees = sbp.InterBranchTransferFee.Min.Value;                      nudIbtFees.Minimum = sbp.InterBranchTransferFee.Min.Value;                      nudIbtFees.Maximum = sbp.InterBranchTransferFee.Max.Value;                      nudIbtFees.Increment = sbp.InterBranchTransferFee.IsFlat ? 1 : 0.01m;                  }                  else                  {                      _defaultIbtFees = sbp.InterBranchTransferFee.Value.Value;                      nudIbtFees.Minimum = _defaultIbtFees;                      nudIbtFees.Maximum = _defaultIbtFees;                  }                    // Deposit fees                  if (!sbp.DepositFees.HasValue)                  {                      _defaultDepositFees = sbp.DepositFeesMin.Value;                      udDepositFees.Minimum = sbp.DepositFeesMin.Value;                      udDepositFees.Maximum = sbp.DepositFeesMax.Value;                  }                  else                      _defaultDepositFees = sbp.DepositFees.Value;                    // Cheque deposit fees                  if (!sbp.ChequeDepositFees.HasValue)                  {                      _defaultChequeDepositFees = sbp.ChequeDepositFeesMin.Value;                      udChequeDepositFees.Minimum = sbp.ChequeDepositFeesMin.Value;                      udChequeDepositFees.Maximum = sbp.ChequeDepositFeesMax.Value;                  }                  else                      _defaultChequeDepositFees = sbp.ChequeDepositFees.Value;                    // Close fees                  if (!sbp.CloseFees.HasValue)                  {                      _defaultCloseFees = sbp.CloseFeesMin.Value;                      udCloseFees.Minimum = sbp.CloseFeesMin.Value;                      udCloseFees.Maximum = sbp.CloseFeesMax.Value;                  }                  else                      _defaultCloseFees = sbp.CloseFees.Value;                    // Management                  if (!sbp.ManagementFees.HasValue)                  {                      _defaultManagementFees = sbp.ManagementFeesMin.Value;                      udManagementFees.Minimum = sbp.ManagementFeesMin.Value;                      udManagementFees.Maximum = sbp.ManagementFeesMax.Value;                  }                  else                      _defaultManagementFees = sbp.ManagementFees.Value;                    // Overdraft                  if (!sbp.OverdraftFees.HasValue)                  {                      _defaultOverdraftFees = sbp.OverdraftFeesMin.Value;                      udOverdraftFees.Minimum = sbp.OverdraftFeesMin.Value;                      udOverdraftFees.Maximum = sbp.OverdraftFeesMax.Value;                  }                  else                      _defaultOverdraftFees = sbp.OverdraftFees.Value;                    // Agio                  if (!sbp.AgioFees.HasValue)                  {                      _defaultAgioFees = (decimal) sbp.AgioFeesMin.Value * 100;                      udAgioFees.Minimum = (decimal) sbp.AgioFeesMin.Value * 100;                      udAgioFees.Maximum = (decimal) sbp.AgioFeesMax.Value * 100;                  }                  else                      _defaultAgioFees = (decimal) sbp.AgioFees.Value * 100;                    // Reopen                  if (!sbp.ReopenFees.HasValue)                  {                      _defaultReopenFees = sbp.ReopenFeesMin.Value;                      udReopenFees.Minimum = sbp.ReopenFeesMin.Value;                      udReopenFees.Maximum = sbp.ReopenFeesMax.Value;                  }                  else                      _defaultReopenFees = sbp.ReopenFees.Value;              }
Magic Number,OpenCBS.GUI.Contracts,VillageAddSavingsForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\VillageAddSavingsForm.cs,InitializeControls,The following statement contains a magic number: if (_product is SavingsBookProduct)              {                  SavingsBookProduct sbp = (SavingsBookProduct) _product;                  lvMembers.Columns.Remove(chLoan);                  if (sbp.WithdrawFeesType == OSavingsFeesType.Flat)                  {                      if (!sbp.FlatWithdrawFees.HasValue)                      {                          _defaultWithdrawFees = sbp.FlatWithdrawFeesMin.Value;                          udWithdrawFees.Minimum = sbp.FlatWithdrawFeesMin.Value;                          udWithdrawFees.Maximum = sbp.FlatWithdrawFeesMax.Value;                      }                      else                      {                          _defaultWithdrawFees = sbp.FlatWithdrawFees.Value;                      }                  }                  else                  {                      if (!sbp.RateWithdrawFees.HasValue)                      {                          _defaultWithdrawFees = (decimal)sbp.RateWithdrawFeesMin.Value * 100;                          udWithdrawFees.Minimum = (decimal)sbp.RateWithdrawFeesMin.Value * 100;                          udWithdrawFees.Maximum = (decimal)sbp.RateWithdrawFeesMax.Value * 100;                      }                      else                          _defaultWithdrawFees = (decimal)sbp.RateWithdrawFees.Value * 100;                  }                    if (sbp.TransferFeesType == OSavingsFeesType.Flat)                  {                      if (!sbp.FlatTransferFees.HasValue)                      {                          _defaultTransferFees = sbp.FlatTransferFeesMin.Value;                          udTransferFees.Minimum = sbp.FlatTransferFeesMin.Value;                          udTransferFees.Maximum = sbp.FlatTransferFeesMax.Value;                      }                      else                          _defaultTransferFees = sbp.FlatTransferFees.Value;                  }                  else                  {                      if (!sbp.RateTransferFees.HasValue)                      {                          _defaultTransferFees = (decimal)sbp.RateTransferFeesMin.Value * 100;                          udTransferFees.Minimum = (decimal)sbp.RateTransferFeesMin.Value * 100;                          udTransferFees.Maximum = (decimal)sbp.RateTransferFeesMax.Value * 100;                      }                      else                          _defaultTransferFees = (decimal)sbp.RateTransferFees.Value * 100;                  }                    if (sbp.InterBranchTransferFee.IsRange)                  {                      _defaultIbtFees = sbp.InterBranchTransferFee.Min.Value;                      nudIbtFees.Minimum = sbp.InterBranchTransferFee.Min.Value;                      nudIbtFees.Maximum = sbp.InterBranchTransferFee.Max.Value;                      nudIbtFees.Increment = sbp.InterBranchTransferFee.IsFlat ? 1 : 0.01m;                  }                  else                  {                      _defaultIbtFees = sbp.InterBranchTransferFee.Value.Value;                      nudIbtFees.Minimum = _defaultIbtFees;                      nudIbtFees.Maximum = _defaultIbtFees;                  }                    // Deposit fees                  if (!sbp.DepositFees.HasValue)                  {                      _defaultDepositFees = sbp.DepositFeesMin.Value;                      udDepositFees.Minimum = sbp.DepositFeesMin.Value;                      udDepositFees.Maximum = sbp.DepositFeesMax.Value;                  }                  else                      _defaultDepositFees = sbp.DepositFees.Value;                    // Cheque deposit fees                  if (!sbp.ChequeDepositFees.HasValue)                  {                      _defaultChequeDepositFees = sbp.ChequeDepositFeesMin.Value;                      udChequeDepositFees.Minimum = sbp.ChequeDepositFeesMin.Value;                      udChequeDepositFees.Maximum = sbp.ChequeDepositFeesMax.Value;                  }                  else                      _defaultChequeDepositFees = sbp.ChequeDepositFees.Value;                    // Close fees                  if (!sbp.CloseFees.HasValue)                  {                      _defaultCloseFees = sbp.CloseFeesMin.Value;                      udCloseFees.Minimum = sbp.CloseFeesMin.Value;                      udCloseFees.Maximum = sbp.CloseFeesMax.Value;                  }                  else                      _defaultCloseFees = sbp.CloseFees.Value;                    // Management                  if (!sbp.ManagementFees.HasValue)                  {                      _defaultManagementFees = sbp.ManagementFeesMin.Value;                      udManagementFees.Minimum = sbp.ManagementFeesMin.Value;                      udManagementFees.Maximum = sbp.ManagementFeesMax.Value;                  }                  else                      _defaultManagementFees = sbp.ManagementFees.Value;                    // Overdraft                  if (!sbp.OverdraftFees.HasValue)                  {                      _defaultOverdraftFees = sbp.OverdraftFeesMin.Value;                      udOverdraftFees.Minimum = sbp.OverdraftFeesMin.Value;                      udOverdraftFees.Maximum = sbp.OverdraftFeesMax.Value;                  }                  else                      _defaultOverdraftFees = sbp.OverdraftFees.Value;                    // Agio                  if (!sbp.AgioFees.HasValue)                  {                      _defaultAgioFees = (decimal) sbp.AgioFeesMin.Value * 100;                      udAgioFees.Minimum = (decimal) sbp.AgioFeesMin.Value * 100;                      udAgioFees.Maximum = (decimal) sbp.AgioFeesMax.Value * 100;                  }                  else                      _defaultAgioFees = (decimal) sbp.AgioFees.Value * 100;                    // Reopen                  if (!sbp.ReopenFees.HasValue)                  {                      _defaultReopenFees = sbp.ReopenFeesMin.Value;                      udReopenFees.Minimum = sbp.ReopenFeesMin.Value;                      udReopenFees.Maximum = sbp.ReopenFeesMax.Value;                  }                  else                      _defaultReopenFees = sbp.ReopenFees.Value;              }
Magic Number,OpenCBS.GUI.Contracts,VillageAddSavingsForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\VillageAddSavingsForm.cs,InitializeControls,The following statement contains a magic number: if (_product is SavingsBookProduct)              {                  SavingsBookProduct sbp = (SavingsBookProduct) _product;                  lvMembers.Columns.Remove(chLoan);                  if (sbp.WithdrawFeesType == OSavingsFeesType.Flat)                  {                      if (!sbp.FlatWithdrawFees.HasValue)                      {                          _defaultWithdrawFees = sbp.FlatWithdrawFeesMin.Value;                          udWithdrawFees.Minimum = sbp.FlatWithdrawFeesMin.Value;                          udWithdrawFees.Maximum = sbp.FlatWithdrawFeesMax.Value;                      }                      else                      {                          _defaultWithdrawFees = sbp.FlatWithdrawFees.Value;                      }                  }                  else                  {                      if (!sbp.RateWithdrawFees.HasValue)                      {                          _defaultWithdrawFees = (decimal)sbp.RateWithdrawFeesMin.Value * 100;                          udWithdrawFees.Minimum = (decimal)sbp.RateWithdrawFeesMin.Value * 100;                          udWithdrawFees.Maximum = (decimal)sbp.RateWithdrawFeesMax.Value * 100;                      }                      else                          _defaultWithdrawFees = (decimal)sbp.RateWithdrawFees.Value * 100;                  }                    if (sbp.TransferFeesType == OSavingsFeesType.Flat)                  {                      if (!sbp.FlatTransferFees.HasValue)                      {                          _defaultTransferFees = sbp.FlatTransferFeesMin.Value;                          udTransferFees.Minimum = sbp.FlatTransferFeesMin.Value;                          udTransferFees.Maximum = sbp.FlatTransferFeesMax.Value;                      }                      else                          _defaultTransferFees = sbp.FlatTransferFees.Value;                  }                  else                  {                      if (!sbp.RateTransferFees.HasValue)                      {                          _defaultTransferFees = (decimal)sbp.RateTransferFeesMin.Value * 100;                          udTransferFees.Minimum = (decimal)sbp.RateTransferFeesMin.Value * 100;                          udTransferFees.Maximum = (decimal)sbp.RateTransferFeesMax.Value * 100;                      }                      else                          _defaultTransferFees = (decimal)sbp.RateTransferFees.Value * 100;                  }                    if (sbp.InterBranchTransferFee.IsRange)                  {                      _defaultIbtFees = sbp.InterBranchTransferFee.Min.Value;                      nudIbtFees.Minimum = sbp.InterBranchTransferFee.Min.Value;                      nudIbtFees.Maximum = sbp.InterBranchTransferFee.Max.Value;                      nudIbtFees.Increment = sbp.InterBranchTransferFee.IsFlat ? 1 : 0.01m;                  }                  else                  {                      _defaultIbtFees = sbp.InterBranchTransferFee.Value.Value;                      nudIbtFees.Minimum = _defaultIbtFees;                      nudIbtFees.Maximum = _defaultIbtFees;                  }                    // Deposit fees                  if (!sbp.DepositFees.HasValue)                  {                      _defaultDepositFees = sbp.DepositFeesMin.Value;                      udDepositFees.Minimum = sbp.DepositFeesMin.Value;                      udDepositFees.Maximum = sbp.DepositFeesMax.Value;                  }                  else                      _defaultDepositFees = sbp.DepositFees.Value;                    // Cheque deposit fees                  if (!sbp.ChequeDepositFees.HasValue)                  {                      _defaultChequeDepositFees = sbp.ChequeDepositFeesMin.Value;                      udChequeDepositFees.Minimum = sbp.ChequeDepositFeesMin.Value;                      udChequeDepositFees.Maximum = sbp.ChequeDepositFeesMax.Value;                  }                  else                      _defaultChequeDepositFees = sbp.ChequeDepositFees.Value;                    // Close fees                  if (!sbp.CloseFees.HasValue)                  {                      _defaultCloseFees = sbp.CloseFeesMin.Value;                      udCloseFees.Minimum = sbp.CloseFeesMin.Value;                      udCloseFees.Maximum = sbp.CloseFeesMax.Value;                  }                  else                      _defaultCloseFees = sbp.CloseFees.Value;                    // Management                  if (!sbp.ManagementFees.HasValue)                  {                      _defaultManagementFees = sbp.ManagementFeesMin.Value;                      udManagementFees.Minimum = sbp.ManagementFeesMin.Value;                      udManagementFees.Maximum = sbp.ManagementFeesMax.Value;                  }                  else                      _defaultManagementFees = sbp.ManagementFees.Value;                    // Overdraft                  if (!sbp.OverdraftFees.HasValue)                  {                      _defaultOverdraftFees = sbp.OverdraftFeesMin.Value;                      udOverdraftFees.Minimum = sbp.OverdraftFeesMin.Value;                      udOverdraftFees.Maximum = sbp.OverdraftFeesMax.Value;                  }                  else                      _defaultOverdraftFees = sbp.OverdraftFees.Value;                    // Agio                  if (!sbp.AgioFees.HasValue)                  {                      _defaultAgioFees = (decimal) sbp.AgioFeesMin.Value * 100;                      udAgioFees.Minimum = (decimal) sbp.AgioFeesMin.Value * 100;                      udAgioFees.Maximum = (decimal) sbp.AgioFeesMax.Value * 100;                  }                  else                      _defaultAgioFees = (decimal) sbp.AgioFees.Value * 100;                    // Reopen                  if (!sbp.ReopenFees.HasValue)                  {                      _defaultReopenFees = sbp.ReopenFeesMin.Value;                      udReopenFees.Minimum = sbp.ReopenFeesMin.Value;                      udReopenFees.Maximum = sbp.ReopenFeesMax.Value;                  }                  else                      _defaultReopenFees = sbp.ReopenFees.Value;              }
Magic Number,OpenCBS.GUI.Contracts,VillageAddSavingsForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\VillageAddSavingsForm.cs,InitializeControls,The following statement contains a magic number: if (_product is SavingsBookProduct)              {                  SavingsBookProduct sbp = (SavingsBookProduct) _product;                  lvMembers.Columns.Remove(chLoan);                  if (sbp.WithdrawFeesType == OSavingsFeesType.Flat)                  {                      if (!sbp.FlatWithdrawFees.HasValue)                      {                          _defaultWithdrawFees = sbp.FlatWithdrawFeesMin.Value;                          udWithdrawFees.Minimum = sbp.FlatWithdrawFeesMin.Value;                          udWithdrawFees.Maximum = sbp.FlatWithdrawFeesMax.Value;                      }                      else                      {                          _defaultWithdrawFees = sbp.FlatWithdrawFees.Value;                      }                  }                  else                  {                      if (!sbp.RateWithdrawFees.HasValue)                      {                          _defaultWithdrawFees = (decimal)sbp.RateWithdrawFeesMin.Value * 100;                          udWithdrawFees.Minimum = (decimal)sbp.RateWithdrawFeesMin.Value * 100;                          udWithdrawFees.Maximum = (decimal)sbp.RateWithdrawFeesMax.Value * 100;                      }                      else                          _defaultWithdrawFees = (decimal)sbp.RateWithdrawFees.Value * 100;                  }                    if (sbp.TransferFeesType == OSavingsFeesType.Flat)                  {                      if (!sbp.FlatTransferFees.HasValue)                      {                          _defaultTransferFees = sbp.FlatTransferFeesMin.Value;                          udTransferFees.Minimum = sbp.FlatTransferFeesMin.Value;                          udTransferFees.Maximum = sbp.FlatTransferFeesMax.Value;                      }                      else                          _defaultTransferFees = sbp.FlatTransferFees.Value;                  }                  else                  {                      if (!sbp.RateTransferFees.HasValue)                      {                          _defaultTransferFees = (decimal)sbp.RateTransferFeesMin.Value * 100;                          udTransferFees.Minimum = (decimal)sbp.RateTransferFeesMin.Value * 100;                          udTransferFees.Maximum = (decimal)sbp.RateTransferFeesMax.Value * 100;                      }                      else                          _defaultTransferFees = (decimal)sbp.RateTransferFees.Value * 100;                  }                    if (sbp.InterBranchTransferFee.IsRange)                  {                      _defaultIbtFees = sbp.InterBranchTransferFee.Min.Value;                      nudIbtFees.Minimum = sbp.InterBranchTransferFee.Min.Value;                      nudIbtFees.Maximum = sbp.InterBranchTransferFee.Max.Value;                      nudIbtFees.Increment = sbp.InterBranchTransferFee.IsFlat ? 1 : 0.01m;                  }                  else                  {                      _defaultIbtFees = sbp.InterBranchTransferFee.Value.Value;                      nudIbtFees.Minimum = _defaultIbtFees;                      nudIbtFees.Maximum = _defaultIbtFees;                  }                    // Deposit fees                  if (!sbp.DepositFees.HasValue)                  {                      _defaultDepositFees = sbp.DepositFeesMin.Value;                      udDepositFees.Minimum = sbp.DepositFeesMin.Value;                      udDepositFees.Maximum = sbp.DepositFeesMax.Value;                  }                  else                      _defaultDepositFees = sbp.DepositFees.Value;                    // Cheque deposit fees                  if (!sbp.ChequeDepositFees.HasValue)                  {                      _defaultChequeDepositFees = sbp.ChequeDepositFeesMin.Value;                      udChequeDepositFees.Minimum = sbp.ChequeDepositFeesMin.Value;                      udChequeDepositFees.Maximum = sbp.ChequeDepositFeesMax.Value;                  }                  else                      _defaultChequeDepositFees = sbp.ChequeDepositFees.Value;                    // Close fees                  if (!sbp.CloseFees.HasValue)                  {                      _defaultCloseFees = sbp.CloseFeesMin.Value;                      udCloseFees.Minimum = sbp.CloseFeesMin.Value;                      udCloseFees.Maximum = sbp.CloseFeesMax.Value;                  }                  else                      _defaultCloseFees = sbp.CloseFees.Value;                    // Management                  if (!sbp.ManagementFees.HasValue)                  {                      _defaultManagementFees = sbp.ManagementFeesMin.Value;                      udManagementFees.Minimum = sbp.ManagementFeesMin.Value;                      udManagementFees.Maximum = sbp.ManagementFeesMax.Value;                  }                  else                      _defaultManagementFees = sbp.ManagementFees.Value;                    // Overdraft                  if (!sbp.OverdraftFees.HasValue)                  {                      _defaultOverdraftFees = sbp.OverdraftFeesMin.Value;                      udOverdraftFees.Minimum = sbp.OverdraftFeesMin.Value;                      udOverdraftFees.Maximum = sbp.OverdraftFeesMax.Value;                  }                  else                      _defaultOverdraftFees = sbp.OverdraftFees.Value;                    // Agio                  if (!sbp.AgioFees.HasValue)                  {                      _defaultAgioFees = (decimal) sbp.AgioFeesMin.Value * 100;                      udAgioFees.Minimum = (decimal) sbp.AgioFeesMin.Value * 100;                      udAgioFees.Maximum = (decimal) sbp.AgioFeesMax.Value * 100;                  }                  else                      _defaultAgioFees = (decimal) sbp.AgioFees.Value * 100;                    // Reopen                  if (!sbp.ReopenFees.HasValue)                  {                      _defaultReopenFees = sbp.ReopenFeesMin.Value;                      udReopenFees.Minimum = sbp.ReopenFeesMin.Value;                      udReopenFees.Maximum = sbp.ReopenFeesMax.Value;                  }                  else                      _defaultReopenFees = sbp.ReopenFees.Value;              }
Magic Number,OpenCBS.GUI.Contracts,VillageAddSavingsForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\VillageAddSavingsForm.cs,InitializeControls,The following statement contains a magic number: if (_product is SavingsBookProduct)              {                  SavingsBookProduct sbp = (SavingsBookProduct) _product;                  lvMembers.Columns.Remove(chLoan);                  if (sbp.WithdrawFeesType == OSavingsFeesType.Flat)                  {                      if (!sbp.FlatWithdrawFees.HasValue)                      {                          _defaultWithdrawFees = sbp.FlatWithdrawFeesMin.Value;                          udWithdrawFees.Minimum = sbp.FlatWithdrawFeesMin.Value;                          udWithdrawFees.Maximum = sbp.FlatWithdrawFeesMax.Value;                      }                      else                      {                          _defaultWithdrawFees = sbp.FlatWithdrawFees.Value;                      }                  }                  else                  {                      if (!sbp.RateWithdrawFees.HasValue)                      {                          _defaultWithdrawFees = (decimal)sbp.RateWithdrawFeesMin.Value * 100;                          udWithdrawFees.Minimum = (decimal)sbp.RateWithdrawFeesMin.Value * 100;                          udWithdrawFees.Maximum = (decimal)sbp.RateWithdrawFeesMax.Value * 100;                      }                      else                          _defaultWithdrawFees = (decimal)sbp.RateWithdrawFees.Value * 100;                  }                    if (sbp.TransferFeesType == OSavingsFeesType.Flat)                  {                      if (!sbp.FlatTransferFees.HasValue)                      {                          _defaultTransferFees = sbp.FlatTransferFeesMin.Value;                          udTransferFees.Minimum = sbp.FlatTransferFeesMin.Value;                          udTransferFees.Maximum = sbp.FlatTransferFeesMax.Value;                      }                      else                          _defaultTransferFees = sbp.FlatTransferFees.Value;                  }                  else                  {                      if (!sbp.RateTransferFees.HasValue)                      {                          _defaultTransferFees = (decimal)sbp.RateTransferFeesMin.Value * 100;                          udTransferFees.Minimum = (decimal)sbp.RateTransferFeesMin.Value * 100;                          udTransferFees.Maximum = (decimal)sbp.RateTransferFeesMax.Value * 100;                      }                      else                          _defaultTransferFees = (decimal)sbp.RateTransferFees.Value * 100;                  }                    if (sbp.InterBranchTransferFee.IsRange)                  {                      _defaultIbtFees = sbp.InterBranchTransferFee.Min.Value;                      nudIbtFees.Minimum = sbp.InterBranchTransferFee.Min.Value;                      nudIbtFees.Maximum = sbp.InterBranchTransferFee.Max.Value;                      nudIbtFees.Increment = sbp.InterBranchTransferFee.IsFlat ? 1 : 0.01m;                  }                  else                  {                      _defaultIbtFees = sbp.InterBranchTransferFee.Value.Value;                      nudIbtFees.Minimum = _defaultIbtFees;                      nudIbtFees.Maximum = _defaultIbtFees;                  }                    // Deposit fees                  if (!sbp.DepositFees.HasValue)                  {                      _defaultDepositFees = sbp.DepositFeesMin.Value;                      udDepositFees.Minimum = sbp.DepositFeesMin.Value;                      udDepositFees.Maximum = sbp.DepositFeesMax.Value;                  }                  else                      _defaultDepositFees = sbp.DepositFees.Value;                    // Cheque deposit fees                  if (!sbp.ChequeDepositFees.HasValue)                  {                      _defaultChequeDepositFees = sbp.ChequeDepositFeesMin.Value;                      udChequeDepositFees.Minimum = sbp.ChequeDepositFeesMin.Value;                      udChequeDepositFees.Maximum = sbp.ChequeDepositFeesMax.Value;                  }                  else                      _defaultChequeDepositFees = sbp.ChequeDepositFees.Value;                    // Close fees                  if (!sbp.CloseFees.HasValue)                  {                      _defaultCloseFees = sbp.CloseFeesMin.Value;                      udCloseFees.Minimum = sbp.CloseFeesMin.Value;                      udCloseFees.Maximum = sbp.CloseFeesMax.Value;                  }                  else                      _defaultCloseFees = sbp.CloseFees.Value;                    // Management                  if (!sbp.ManagementFees.HasValue)                  {                      _defaultManagementFees = sbp.ManagementFeesMin.Value;                      udManagementFees.Minimum = sbp.ManagementFeesMin.Value;                      udManagementFees.Maximum = sbp.ManagementFeesMax.Value;                  }                  else                      _defaultManagementFees = sbp.ManagementFees.Value;                    // Overdraft                  if (!sbp.OverdraftFees.HasValue)                  {                      _defaultOverdraftFees = sbp.OverdraftFeesMin.Value;                      udOverdraftFees.Minimum = sbp.OverdraftFeesMin.Value;                      udOverdraftFees.Maximum = sbp.OverdraftFeesMax.Value;                  }                  else                      _defaultOverdraftFees = sbp.OverdraftFees.Value;                    // Agio                  if (!sbp.AgioFees.HasValue)                  {                      _defaultAgioFees = (decimal) sbp.AgioFeesMin.Value * 100;                      udAgioFees.Minimum = (decimal) sbp.AgioFeesMin.Value * 100;                      udAgioFees.Maximum = (decimal) sbp.AgioFeesMax.Value * 100;                  }                  else                      _defaultAgioFees = (decimal) sbp.AgioFees.Value * 100;                    // Reopen                  if (!sbp.ReopenFees.HasValue)                  {                      _defaultReopenFees = sbp.ReopenFeesMin.Value;                      udReopenFees.Minimum = sbp.ReopenFeesMin.Value;                      udReopenFees.Maximum = sbp.ReopenFeesMax.Value;                  }                  else                      _defaultReopenFees = sbp.ReopenFees.Value;              }
Magic Number,OpenCBS.GUI.Contracts,VillageAddSavingsForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\VillageAddSavingsForm.cs,InitializeControls,The following statement contains a magic number: if (_product is SavingsBookProduct)              {                  SavingsBookProduct sbp = (SavingsBookProduct) _product;                  lvMembers.Columns.Remove(chLoan);                  if (sbp.WithdrawFeesType == OSavingsFeesType.Flat)                  {                      if (!sbp.FlatWithdrawFees.HasValue)                      {                          _defaultWithdrawFees = sbp.FlatWithdrawFeesMin.Value;                          udWithdrawFees.Minimum = sbp.FlatWithdrawFeesMin.Value;                          udWithdrawFees.Maximum = sbp.FlatWithdrawFeesMax.Value;                      }                      else                      {                          _defaultWithdrawFees = sbp.FlatWithdrawFees.Value;                      }                  }                  else                  {                      if (!sbp.RateWithdrawFees.HasValue)                      {                          _defaultWithdrawFees = (decimal)sbp.RateWithdrawFeesMin.Value * 100;                          udWithdrawFees.Minimum = (decimal)sbp.RateWithdrawFeesMin.Value * 100;                          udWithdrawFees.Maximum = (decimal)sbp.RateWithdrawFeesMax.Value * 100;                      }                      else                          _defaultWithdrawFees = (decimal)sbp.RateWithdrawFees.Value * 100;                  }                    if (sbp.TransferFeesType == OSavingsFeesType.Flat)                  {                      if (!sbp.FlatTransferFees.HasValue)                      {                          _defaultTransferFees = sbp.FlatTransferFeesMin.Value;                          udTransferFees.Minimum = sbp.FlatTransferFeesMin.Value;                          udTransferFees.Maximum = sbp.FlatTransferFeesMax.Value;                      }                      else                          _defaultTransferFees = sbp.FlatTransferFees.Value;                  }                  else                  {                      if (!sbp.RateTransferFees.HasValue)                      {                          _defaultTransferFees = (decimal)sbp.RateTransferFeesMin.Value * 100;                          udTransferFees.Minimum = (decimal)sbp.RateTransferFeesMin.Value * 100;                          udTransferFees.Maximum = (decimal)sbp.RateTransferFeesMax.Value * 100;                      }                      else                          _defaultTransferFees = (decimal)sbp.RateTransferFees.Value * 100;                  }                    if (sbp.InterBranchTransferFee.IsRange)                  {                      _defaultIbtFees = sbp.InterBranchTransferFee.Min.Value;                      nudIbtFees.Minimum = sbp.InterBranchTransferFee.Min.Value;                      nudIbtFees.Maximum = sbp.InterBranchTransferFee.Max.Value;                      nudIbtFees.Increment = sbp.InterBranchTransferFee.IsFlat ? 1 : 0.01m;                  }                  else                  {                      _defaultIbtFees = sbp.InterBranchTransferFee.Value.Value;                      nudIbtFees.Minimum = _defaultIbtFees;                      nudIbtFees.Maximum = _defaultIbtFees;                  }                    // Deposit fees                  if (!sbp.DepositFees.HasValue)                  {                      _defaultDepositFees = sbp.DepositFeesMin.Value;                      udDepositFees.Minimum = sbp.DepositFeesMin.Value;                      udDepositFees.Maximum = sbp.DepositFeesMax.Value;                  }                  else                      _defaultDepositFees = sbp.DepositFees.Value;                    // Cheque deposit fees                  if (!sbp.ChequeDepositFees.HasValue)                  {                      _defaultChequeDepositFees = sbp.ChequeDepositFeesMin.Value;                      udChequeDepositFees.Minimum = sbp.ChequeDepositFeesMin.Value;                      udChequeDepositFees.Maximum = sbp.ChequeDepositFeesMax.Value;                  }                  else                      _defaultChequeDepositFees = sbp.ChequeDepositFees.Value;                    // Close fees                  if (!sbp.CloseFees.HasValue)                  {                      _defaultCloseFees = sbp.CloseFeesMin.Value;                      udCloseFees.Minimum = sbp.CloseFeesMin.Value;                      udCloseFees.Maximum = sbp.CloseFeesMax.Value;                  }                  else                      _defaultCloseFees = sbp.CloseFees.Value;                    // Management                  if (!sbp.ManagementFees.HasValue)                  {                      _defaultManagementFees = sbp.ManagementFeesMin.Value;                      udManagementFees.Minimum = sbp.ManagementFeesMin.Value;                      udManagementFees.Maximum = sbp.ManagementFeesMax.Value;                  }                  else                      _defaultManagementFees = sbp.ManagementFees.Value;                    // Overdraft                  if (!sbp.OverdraftFees.HasValue)                  {                      _defaultOverdraftFees = sbp.OverdraftFeesMin.Value;                      udOverdraftFees.Minimum = sbp.OverdraftFeesMin.Value;                      udOverdraftFees.Maximum = sbp.OverdraftFeesMax.Value;                  }                  else                      _defaultOverdraftFees = sbp.OverdraftFees.Value;                    // Agio                  if (!sbp.AgioFees.HasValue)                  {                      _defaultAgioFees = (decimal) sbp.AgioFeesMin.Value * 100;                      udAgioFees.Minimum = (decimal) sbp.AgioFeesMin.Value * 100;                      udAgioFees.Maximum = (decimal) sbp.AgioFeesMax.Value * 100;                  }                  else                      _defaultAgioFees = (decimal) sbp.AgioFees.Value * 100;                    // Reopen                  if (!sbp.ReopenFees.HasValue)                  {                      _defaultReopenFees = sbp.ReopenFeesMin.Value;                      udReopenFees.Minimum = sbp.ReopenFeesMin.Value;                      udReopenFees.Maximum = sbp.ReopenFeesMax.Value;                  }                  else                      _defaultReopenFees = sbp.ReopenFees.Value;              }
Magic Number,OpenCBS.GUI.Contracts,VillageAddSavingsForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\VillageAddSavingsForm.cs,InitializeControls,The following statement contains a magic number: if (_product is SavingsBookProduct)              {                  SavingsBookProduct sbp = (SavingsBookProduct) _product;                  lvMembers.Columns.Remove(chLoan);                  if (sbp.WithdrawFeesType == OSavingsFeesType.Flat)                  {                      if (!sbp.FlatWithdrawFees.HasValue)                      {                          _defaultWithdrawFees = sbp.FlatWithdrawFeesMin.Value;                          udWithdrawFees.Minimum = sbp.FlatWithdrawFeesMin.Value;                          udWithdrawFees.Maximum = sbp.FlatWithdrawFeesMax.Value;                      }                      else                      {                          _defaultWithdrawFees = sbp.FlatWithdrawFees.Value;                      }                  }                  else                  {                      if (!sbp.RateWithdrawFees.HasValue)                      {                          _defaultWithdrawFees = (decimal)sbp.RateWithdrawFeesMin.Value * 100;                          udWithdrawFees.Minimum = (decimal)sbp.RateWithdrawFeesMin.Value * 100;                          udWithdrawFees.Maximum = (decimal)sbp.RateWithdrawFeesMax.Value * 100;                      }                      else                          _defaultWithdrawFees = (decimal)sbp.RateWithdrawFees.Value * 100;                  }                    if (sbp.TransferFeesType == OSavingsFeesType.Flat)                  {                      if (!sbp.FlatTransferFees.HasValue)                      {                          _defaultTransferFees = sbp.FlatTransferFeesMin.Value;                          udTransferFees.Minimum = sbp.FlatTransferFeesMin.Value;                          udTransferFees.Maximum = sbp.FlatTransferFeesMax.Value;                      }                      else                          _defaultTransferFees = sbp.FlatTransferFees.Value;                  }                  else                  {                      if (!sbp.RateTransferFees.HasValue)                      {                          _defaultTransferFees = (decimal)sbp.RateTransferFeesMin.Value * 100;                          udTransferFees.Minimum = (decimal)sbp.RateTransferFeesMin.Value * 100;                          udTransferFees.Maximum = (decimal)sbp.RateTransferFeesMax.Value * 100;                      }                      else                          _defaultTransferFees = (decimal)sbp.RateTransferFees.Value * 100;                  }                    if (sbp.InterBranchTransferFee.IsRange)                  {                      _defaultIbtFees = sbp.InterBranchTransferFee.Min.Value;                      nudIbtFees.Minimum = sbp.InterBranchTransferFee.Min.Value;                      nudIbtFees.Maximum = sbp.InterBranchTransferFee.Max.Value;                      nudIbtFees.Increment = sbp.InterBranchTransferFee.IsFlat ? 1 : 0.01m;                  }                  else                  {                      _defaultIbtFees = sbp.InterBranchTransferFee.Value.Value;                      nudIbtFees.Minimum = _defaultIbtFees;                      nudIbtFees.Maximum = _defaultIbtFees;                  }                    // Deposit fees                  if (!sbp.DepositFees.HasValue)                  {                      _defaultDepositFees = sbp.DepositFeesMin.Value;                      udDepositFees.Minimum = sbp.DepositFeesMin.Value;                      udDepositFees.Maximum = sbp.DepositFeesMax.Value;                  }                  else                      _defaultDepositFees = sbp.DepositFees.Value;                    // Cheque deposit fees                  if (!sbp.ChequeDepositFees.HasValue)                  {                      _defaultChequeDepositFees = sbp.ChequeDepositFeesMin.Value;                      udChequeDepositFees.Minimum = sbp.ChequeDepositFeesMin.Value;                      udChequeDepositFees.Maximum = sbp.ChequeDepositFeesMax.Value;                  }                  else                      _defaultChequeDepositFees = sbp.ChequeDepositFees.Value;                    // Close fees                  if (!sbp.CloseFees.HasValue)                  {                      _defaultCloseFees = sbp.CloseFeesMin.Value;                      udCloseFees.Minimum = sbp.CloseFeesMin.Value;                      udCloseFees.Maximum = sbp.CloseFeesMax.Value;                  }                  else                      _defaultCloseFees = sbp.CloseFees.Value;                    // Management                  if (!sbp.ManagementFees.HasValue)                  {                      _defaultManagementFees = sbp.ManagementFeesMin.Value;                      udManagementFees.Minimum = sbp.ManagementFeesMin.Value;                      udManagementFees.Maximum = sbp.ManagementFeesMax.Value;                  }                  else                      _defaultManagementFees = sbp.ManagementFees.Value;                    // Overdraft                  if (!sbp.OverdraftFees.HasValue)                  {                      _defaultOverdraftFees = sbp.OverdraftFeesMin.Value;                      udOverdraftFees.Minimum = sbp.OverdraftFeesMin.Value;                      udOverdraftFees.Maximum = sbp.OverdraftFeesMax.Value;                  }                  else                      _defaultOverdraftFees = sbp.OverdraftFees.Value;                    // Agio                  if (!sbp.AgioFees.HasValue)                  {                      _defaultAgioFees = (decimal) sbp.AgioFeesMin.Value * 100;                      udAgioFees.Minimum = (decimal) sbp.AgioFeesMin.Value * 100;                      udAgioFees.Maximum = (decimal) sbp.AgioFeesMax.Value * 100;                  }                  else                      _defaultAgioFees = (decimal) sbp.AgioFees.Value * 100;                    // Reopen                  if (!sbp.ReopenFees.HasValue)                  {                      _defaultReopenFees = sbp.ReopenFeesMin.Value;                      udReopenFees.Minimum = sbp.ReopenFeesMin.Value;                      udReopenFees.Maximum = sbp.ReopenFeesMax.Value;                  }                  else                      _defaultReopenFees = sbp.ReopenFees.Value;              }
Magic Number,OpenCBS.GUI.Contracts,VillageAddSavingsForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\VillageAddSavingsForm.cs,InitializeControls,The following statement contains a magic number: if (_product is SavingsBookProduct)              {                  SavingsBookProduct sbp = (SavingsBookProduct) _product;                  lvMembers.Columns.Remove(chLoan);                  if (sbp.WithdrawFeesType == OSavingsFeesType.Flat)                  {                      if (!sbp.FlatWithdrawFees.HasValue)                      {                          _defaultWithdrawFees = sbp.FlatWithdrawFeesMin.Value;                          udWithdrawFees.Minimum = sbp.FlatWithdrawFeesMin.Value;                          udWithdrawFees.Maximum = sbp.FlatWithdrawFeesMax.Value;                      }                      else                      {                          _defaultWithdrawFees = sbp.FlatWithdrawFees.Value;                      }                  }                  else                  {                      if (!sbp.RateWithdrawFees.HasValue)                      {                          _defaultWithdrawFees = (decimal)sbp.RateWithdrawFeesMin.Value * 100;                          udWithdrawFees.Minimum = (decimal)sbp.RateWithdrawFeesMin.Value * 100;                          udWithdrawFees.Maximum = (decimal)sbp.RateWithdrawFeesMax.Value * 100;                      }                      else                          _defaultWithdrawFees = (decimal)sbp.RateWithdrawFees.Value * 100;                  }                    if (sbp.TransferFeesType == OSavingsFeesType.Flat)                  {                      if (!sbp.FlatTransferFees.HasValue)                      {                          _defaultTransferFees = sbp.FlatTransferFeesMin.Value;                          udTransferFees.Minimum = sbp.FlatTransferFeesMin.Value;                          udTransferFees.Maximum = sbp.FlatTransferFeesMax.Value;                      }                      else                          _defaultTransferFees = sbp.FlatTransferFees.Value;                  }                  else                  {                      if (!sbp.RateTransferFees.HasValue)                      {                          _defaultTransferFees = (decimal)sbp.RateTransferFeesMin.Value * 100;                          udTransferFees.Minimum = (decimal)sbp.RateTransferFeesMin.Value * 100;                          udTransferFees.Maximum = (decimal)sbp.RateTransferFeesMax.Value * 100;                      }                      else                          _defaultTransferFees = (decimal)sbp.RateTransferFees.Value * 100;                  }                    if (sbp.InterBranchTransferFee.IsRange)                  {                      _defaultIbtFees = sbp.InterBranchTransferFee.Min.Value;                      nudIbtFees.Minimum = sbp.InterBranchTransferFee.Min.Value;                      nudIbtFees.Maximum = sbp.InterBranchTransferFee.Max.Value;                      nudIbtFees.Increment = sbp.InterBranchTransferFee.IsFlat ? 1 : 0.01m;                  }                  else                  {                      _defaultIbtFees = sbp.InterBranchTransferFee.Value.Value;                      nudIbtFees.Minimum = _defaultIbtFees;                      nudIbtFees.Maximum = _defaultIbtFees;                  }                    // Deposit fees                  if (!sbp.DepositFees.HasValue)                  {                      _defaultDepositFees = sbp.DepositFeesMin.Value;                      udDepositFees.Minimum = sbp.DepositFeesMin.Value;                      udDepositFees.Maximum = sbp.DepositFeesMax.Value;                  }                  else                      _defaultDepositFees = sbp.DepositFees.Value;                    // Cheque deposit fees                  if (!sbp.ChequeDepositFees.HasValue)                  {                      _defaultChequeDepositFees = sbp.ChequeDepositFeesMin.Value;                      udChequeDepositFees.Minimum = sbp.ChequeDepositFeesMin.Value;                      udChequeDepositFees.Maximum = sbp.ChequeDepositFeesMax.Value;                  }                  else                      _defaultChequeDepositFees = sbp.ChequeDepositFees.Value;                    // Close fees                  if (!sbp.CloseFees.HasValue)                  {                      _defaultCloseFees = sbp.CloseFeesMin.Value;                      udCloseFees.Minimum = sbp.CloseFeesMin.Value;                      udCloseFees.Maximum = sbp.CloseFeesMax.Value;                  }                  else                      _defaultCloseFees = sbp.CloseFees.Value;                    // Management                  if (!sbp.ManagementFees.HasValue)                  {                      _defaultManagementFees = sbp.ManagementFeesMin.Value;                      udManagementFees.Minimum = sbp.ManagementFeesMin.Value;                      udManagementFees.Maximum = sbp.ManagementFeesMax.Value;                  }                  else                      _defaultManagementFees = sbp.ManagementFees.Value;                    // Overdraft                  if (!sbp.OverdraftFees.HasValue)                  {                      _defaultOverdraftFees = sbp.OverdraftFeesMin.Value;                      udOverdraftFees.Minimum = sbp.OverdraftFeesMin.Value;                      udOverdraftFees.Maximum = sbp.OverdraftFeesMax.Value;                  }                  else                      _defaultOverdraftFees = sbp.OverdraftFees.Value;                    // Agio                  if (!sbp.AgioFees.HasValue)                  {                      _defaultAgioFees = (decimal) sbp.AgioFeesMin.Value * 100;                      udAgioFees.Minimum = (decimal) sbp.AgioFeesMin.Value * 100;                      udAgioFees.Maximum = (decimal) sbp.AgioFeesMax.Value * 100;                  }                  else                      _defaultAgioFees = (decimal) sbp.AgioFees.Value * 100;                    // Reopen                  if (!sbp.ReopenFees.HasValue)                  {                      _defaultReopenFees = sbp.ReopenFeesMin.Value;                      udReopenFees.Minimum = sbp.ReopenFeesMin.Value;                      udReopenFees.Maximum = sbp.ReopenFeesMax.Value;                  }                  else                      _defaultReopenFees = sbp.ReopenFees.Value;              }
Magic Number,OpenCBS.GUI.Contracts,VillageAddSavingsForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\VillageAddSavingsForm.cs,lvMembers_ItemChecked,The following statement contains a magic number: if (item.Checked && item != _itemTotal)              {                  if (string.IsNullOrEmpty(item.SubItems[idxInitialAmount].Text)) // Initial Amount                  {                      item.SubItems[idxInitialAmount].Text = _product.InitialAmountMin.GetFormatedValue(_product.Currency.UseCents);                      item.SubItems[idxInitialAmount].Tag = _product.InitialAmountMin;                  }                  if (string.IsNullOrEmpty(item.SubItems[idxCurrency].Text)) // Currency                  {                      item.SubItems[idxCurrency].Text = _product.Currency.Code;                      item.SubItems[idxCurrency].Tag = _product.Currency;                  }                                    if (string.IsNullOrEmpty(item.SubItems[idxInterestRate].Text)) // Interest Rate                  {                      item.SubItems[idxInterestRate].Text = _defaultInterestRate.ToString();                      item.SubItems[idxInterestRate].Tag = _defaultInterestRate;                  }                  if (string.IsNullOrEmpty(item.SubItems[idxEntryFees].Text)) // Entry Fees                  {                      item.SubItems[idxEntryFees].Text = _defaultEntryFees.GetFormatedValue(_product.Currency.UseCents);                      item.SubItems[idxEntryFees].Tag = _defaultEntryFees;                  }                  if (_product is SavingsBookProduct)                  {                      if (string.IsNullOrEmpty(item.SubItems[idxWithdrawFees].Text)) // Withdraw Fees                      {                          item.SubItems[idxWithdrawFees].Text = _defaultWithdrawFees.ToString();                          item.SubItems[idxWithdrawFees].Tag = _defaultWithdrawFees;                      }                      if (string.IsNullOrEmpty(item.SubItems[idxTransferFees].Text)) // Transfer Fees                      {                          item.SubItems[idxTransferFees].Text = _defaultTransferFees.ToString();                          item.SubItems[idxTransferFees].Tag = _defaultTransferFees;                      }                      if (string.IsNullOrEmpty(item.SubItems[idxIbtFees].Text))                      {                          item.SubItems[idxIbtFees].Text = _defaultIbtFees.ToString();                          item.SubItems[idxIbtFees].Tag = _defaultIbtFees;                      }                      if (string.IsNullOrEmpty(item.SubItems[idxDepositFees].Text)) // Deposit Fees                      {                          item.SubItems[idxDepositFees].Text = _defaultDepositFees.ToString();                          item.SubItems[idxDepositFees].Tag = _defaultDepositFees;                      }                      if (string.IsNullOrEmpty(item.SubItems[idxChequeDepositFees].Text)) // Cheque Deposit Fees                      {                          item.SubItems[idxChequeDepositFees].Text = _defaultChequeDepositFees.ToString();                          item.SubItems[idxChequeDepositFees].Tag = _defaultChequeDepositFees;                      }                      if (string.IsNullOrEmpty(item.SubItems[idxCloseFees].Text)) // Close Fees                      {                          item.SubItems[idxCloseFees].Text = _defaultCloseFees.ToString();                          item.SubItems[idxCloseFees].Tag = _defaultCloseFees;                      }                      if (string.IsNullOrEmpty(item.SubItems[idxManagementFees].Text)) // Management Fees                      {                          item.SubItems[idxManagementFees].Text = _defaultManagementFees.ToString();                          item.SubItems[idxManagementFees].Tag = _defaultManagementFees;                      }                      if (string.IsNullOrEmpty(item.SubItems[idxOverdraftFees].Text)) // Overdraft Fees                      {                          item.SubItems[idxOverdraftFees].Text = _defaultOverdraftFees.ToString();                          item.SubItems[idxOverdraftFees].Tag = _defaultOverdraftFees;                      }                      if (string.IsNullOrEmpty(item.SubItems[idxAgioFees].Text)) // Agio Fees                      {                          item.SubItems[idxAgioFees].Text = _defaultAgioFees.ToString();                          item.SubItems[idxAgioFees].Tag = _defaultAgioFees;                      }                      if (string.IsNullOrEmpty(item.SubItems[idxReopenFees].Text)) // Reopen Fees                      {                          item.SubItems[idxReopenFees].Text = _defaultReopenFees.ToString();                          item.SubItems[idxReopenFees].Tag = _defaultReopenFees;                      }                  }              }              else              {                  for (int i = 2; i < item.SubItems.Count; i++ )                  {                      item.SubItems[i].Text = "";                  }              }
Magic Number,OpenCBS.GUI.Contracts,VillageAddSavingsForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\VillageAddSavingsForm.cs,lvMembers_MouseDown,The following statement contains a magic number: if (MouseButtons.Left == e.Button)              {                  if (e.Clicks >= 2)                  {                      blockItemCheck = true;                  }              }
Magic Number,OpenCBS.GUI.Contracts,VillageAddSavingsForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\VillageAddSavingsForm.cs,btnSave_Click,The following statement contains a magic number: try              {                  foreach (ListViewItem item in lvMembers.Items)                  {                      if (item == _itemTotal) continue;                      if (!item.Checked) continue;                      var member = item.Tag as VillageMember;                      IClient client = member.Tiers;                        OCurrency initialAmount = (OCurrency)item.SubItems[idxInitialAmount].Tag;                      double interestRate = (double)item.SubItems[idxInterestRate].Tag;                      OCurrency entryFees = (OCurrency)item.SubItems[idxEntryFees].Tag;                        if (_product is SavingsBookProduct)                      {                          SavingsBookProduct sbp = (SavingsBookProduct)_product;                          decimal withdrawFees = (decimal)item.SubItems[idxWithdrawFees].Tag;                          decimal transferFees = (decimal)item.SubItems[idxTransferFees].Tag;                          decimal ibtFees = Convert.ToDecimal(item.SubItems[idxIbtFees].Tag);                          decimal depositFees = (decimal)item.SubItems[idxDepositFees].Tag;                          decimal chequeDepositFees = (decimal)item.SubItems[idxChequeDepositFees].Tag;                          decimal closeFees = (decimal)item.SubItems[idxCloseFees].Tag;                          decimal managementFees = (decimal)item.SubItems[idxManagementFees].Tag;                          decimal overdraftFees = (decimal)item.SubItems[idxOverdraftFees].Tag;                          decimal agioFees = (decimal)item.SubItems[idxAgioFees].Tag;                          decimal reopenFees = (decimal)item.SubItems[idxReopenFees].Tag;                            saving = new SavingBookContract(ServicesProvider.GetInstance().GetGeneralSettings()'                                                          User.CurrentUser' TimeProvider.Today' sbp' client)                                       {InterestRate = interestRate/100};                          SavingBookContract s = (SavingBookContract)saving;                            if (sbp.WithdrawFeesType == OSavingsFeesType.Flat)                              s.FlatWithdrawFees = withdrawFees;                          else                              s.RateWithdrawFees = (double)withdrawFees / 100;                            if (sbp.TransferFeesType == OSavingsFeesType.Flat)                              s.FlatTransferFees = transferFees;                          else                              s.RateTransferFees = (double)transferFees / 100;                            if (sbp.InterBranchTransferFee.IsFlat)                          {                              s.FlatInterBranchTransferFee = ibtFees;                          }                          else                          {                              s.RateInterBranchTransferFee = Convert.ToDouble(ibtFees);                          }                            s.DepositFees = depositFees;                          s.ChequeDepositFees = chequeDepositFees;                          s.CloseFees = closeFees;                          s.ManagementFees = managementFees;                          s.OverdraftFees = overdraftFees;                          s.AgioFees = (double)agioFees / 100;                          s.ReopenFees = reopenFees;                      }                                            saving.SavingsOfficer = _village.LoanOfficer;                      saving.InitialAmount = initialAmount;                      saving.EntryFees = entryFees;                      saving.NsgID = _village.Id;                      saving.Id = ServicesProvider.GetInstance().GetSavingServices().SaveContract(saving' (Client)member.Tiers);                      saving = ServicesProvider.GetInstance().GetSavingServices().GetSaving(saving.Id);                        ServicesProvider.GetInstance().GetSavingServices().FirstDeposit(saving' initialAmount' TimeProvider.Now' entryFees'                           User.CurrentUser' Teller.CurrentTeller);                      ServicesProvider.GetInstance().GetSavingServices().UpdateInitialData(saving.Id' initialAmount' entryFees);                                            saving = ServicesProvider.GetInstance().GetSavingServices().GetSaving(saving.Id);                      ((Client)member.Tiers).AddSaving(saving);                  }              }              catch (Exception ex)              {                  isError = true;                  new frmShowError(CustomExceptionHandler.ShowExceptionText(ex)).ShowDialog();              }              finally              {                  InitializeControls();              }
Magic Number,OpenCBS.GUI.Contracts,VillageAddSavingsForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\VillageAddSavingsForm.cs,btnSave_Click,The following statement contains a magic number: try              {                  foreach (ListViewItem item in lvMembers.Items)                  {                      if (item == _itemTotal) continue;                      if (!item.Checked) continue;                      var member = item.Tag as VillageMember;                      IClient client = member.Tiers;                        OCurrency initialAmount = (OCurrency)item.SubItems[idxInitialAmount].Tag;                      double interestRate = (double)item.SubItems[idxInterestRate].Tag;                      OCurrency entryFees = (OCurrency)item.SubItems[idxEntryFees].Tag;                        if (_product is SavingsBookProduct)                      {                          SavingsBookProduct sbp = (SavingsBookProduct)_product;                          decimal withdrawFees = (decimal)item.SubItems[idxWithdrawFees].Tag;                          decimal transferFees = (decimal)item.SubItems[idxTransferFees].Tag;                          decimal ibtFees = Convert.ToDecimal(item.SubItems[idxIbtFees].Tag);                          decimal depositFees = (decimal)item.SubItems[idxDepositFees].Tag;                          decimal chequeDepositFees = (decimal)item.SubItems[idxChequeDepositFees].Tag;                          decimal closeFees = (decimal)item.SubItems[idxCloseFees].Tag;                          decimal managementFees = (decimal)item.SubItems[idxManagementFees].Tag;                          decimal overdraftFees = (decimal)item.SubItems[idxOverdraftFees].Tag;                          decimal agioFees = (decimal)item.SubItems[idxAgioFees].Tag;                          decimal reopenFees = (decimal)item.SubItems[idxReopenFees].Tag;                            saving = new SavingBookContract(ServicesProvider.GetInstance().GetGeneralSettings()'                                                          User.CurrentUser' TimeProvider.Today' sbp' client)                                       {InterestRate = interestRate/100};                          SavingBookContract s = (SavingBookContract)saving;                            if (sbp.WithdrawFeesType == OSavingsFeesType.Flat)                              s.FlatWithdrawFees = withdrawFees;                          else                              s.RateWithdrawFees = (double)withdrawFees / 100;                            if (sbp.TransferFeesType == OSavingsFeesType.Flat)                              s.FlatTransferFees = transferFees;                          else                              s.RateTransferFees = (double)transferFees / 100;                            if (sbp.InterBranchTransferFee.IsFlat)                          {                              s.FlatInterBranchTransferFee = ibtFees;                          }                          else                          {                              s.RateInterBranchTransferFee = Convert.ToDouble(ibtFees);                          }                            s.DepositFees = depositFees;                          s.ChequeDepositFees = chequeDepositFees;                          s.CloseFees = closeFees;                          s.ManagementFees = managementFees;                          s.OverdraftFees = overdraftFees;                          s.AgioFees = (double)agioFees / 100;                          s.ReopenFees = reopenFees;                      }                                            saving.SavingsOfficer = _village.LoanOfficer;                      saving.InitialAmount = initialAmount;                      saving.EntryFees = entryFees;                      saving.NsgID = _village.Id;                      saving.Id = ServicesProvider.GetInstance().GetSavingServices().SaveContract(saving' (Client)member.Tiers);                      saving = ServicesProvider.GetInstance().GetSavingServices().GetSaving(saving.Id);                        ServicesProvider.GetInstance().GetSavingServices().FirstDeposit(saving' initialAmount' TimeProvider.Now' entryFees'                           User.CurrentUser' Teller.CurrentTeller);                      ServicesProvider.GetInstance().GetSavingServices().UpdateInitialData(saving.Id' initialAmount' entryFees);                                            saving = ServicesProvider.GetInstance().GetSavingServices().GetSaving(saving.Id);                      ((Client)member.Tiers).AddSaving(saving);                  }              }              catch (Exception ex)              {                  isError = true;                  new frmShowError(CustomExceptionHandler.ShowExceptionText(ex)).ShowDialog();              }              finally              {                  InitializeControls();              }
Magic Number,OpenCBS.GUI.Contracts,VillageAddSavingsForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\VillageAddSavingsForm.cs,btnSave_Click,The following statement contains a magic number: try              {                  foreach (ListViewItem item in lvMembers.Items)                  {                      if (item == _itemTotal) continue;                      if (!item.Checked) continue;                      var member = item.Tag as VillageMember;                      IClient client = member.Tiers;                        OCurrency initialAmount = (OCurrency)item.SubItems[idxInitialAmount].Tag;                      double interestRate = (double)item.SubItems[idxInterestRate].Tag;                      OCurrency entryFees = (OCurrency)item.SubItems[idxEntryFees].Tag;                        if (_product is SavingsBookProduct)                      {                          SavingsBookProduct sbp = (SavingsBookProduct)_product;                          decimal withdrawFees = (decimal)item.SubItems[idxWithdrawFees].Tag;                          decimal transferFees = (decimal)item.SubItems[idxTransferFees].Tag;                          decimal ibtFees = Convert.ToDecimal(item.SubItems[idxIbtFees].Tag);                          decimal depositFees = (decimal)item.SubItems[idxDepositFees].Tag;                          decimal chequeDepositFees = (decimal)item.SubItems[idxChequeDepositFees].Tag;                          decimal closeFees = (decimal)item.SubItems[idxCloseFees].Tag;                          decimal managementFees = (decimal)item.SubItems[idxManagementFees].Tag;                          decimal overdraftFees = (decimal)item.SubItems[idxOverdraftFees].Tag;                          decimal agioFees = (decimal)item.SubItems[idxAgioFees].Tag;                          decimal reopenFees = (decimal)item.SubItems[idxReopenFees].Tag;                            saving = new SavingBookContract(ServicesProvider.GetInstance().GetGeneralSettings()'                                                          User.CurrentUser' TimeProvider.Today' sbp' client)                                       {InterestRate = interestRate/100};                          SavingBookContract s = (SavingBookContract)saving;                            if (sbp.WithdrawFeesType == OSavingsFeesType.Flat)                              s.FlatWithdrawFees = withdrawFees;                          else                              s.RateWithdrawFees = (double)withdrawFees / 100;                            if (sbp.TransferFeesType == OSavingsFeesType.Flat)                              s.FlatTransferFees = transferFees;                          else                              s.RateTransferFees = (double)transferFees / 100;                            if (sbp.InterBranchTransferFee.IsFlat)                          {                              s.FlatInterBranchTransferFee = ibtFees;                          }                          else                          {                              s.RateInterBranchTransferFee = Convert.ToDouble(ibtFees);                          }                            s.DepositFees = depositFees;                          s.ChequeDepositFees = chequeDepositFees;                          s.CloseFees = closeFees;                          s.ManagementFees = managementFees;                          s.OverdraftFees = overdraftFees;                          s.AgioFees = (double)agioFees / 100;                          s.ReopenFees = reopenFees;                      }                                            saving.SavingsOfficer = _village.LoanOfficer;                      saving.InitialAmount = initialAmount;                      saving.EntryFees = entryFees;                      saving.NsgID = _village.Id;                      saving.Id = ServicesProvider.GetInstance().GetSavingServices().SaveContract(saving' (Client)member.Tiers);                      saving = ServicesProvider.GetInstance().GetSavingServices().GetSaving(saving.Id);                        ServicesProvider.GetInstance().GetSavingServices().FirstDeposit(saving' initialAmount' TimeProvider.Now' entryFees'                           User.CurrentUser' Teller.CurrentTeller);                      ServicesProvider.GetInstance().GetSavingServices().UpdateInitialData(saving.Id' initialAmount' entryFees);                                            saving = ServicesProvider.GetInstance().GetSavingServices().GetSaving(saving.Id);                      ((Client)member.Tiers).AddSaving(saving);                  }              }              catch (Exception ex)              {                  isError = true;                  new frmShowError(CustomExceptionHandler.ShowExceptionText(ex)).ShowDialog();              }              finally              {                  InitializeControls();              }
Magic Number,OpenCBS.GUI.Contracts,VillageAddSavingsForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\VillageAddSavingsForm.cs,btnSave_Click,The following statement contains a magic number: try              {                  foreach (ListViewItem item in lvMembers.Items)                  {                      if (item == _itemTotal) continue;                      if (!item.Checked) continue;                      var member = item.Tag as VillageMember;                      IClient client = member.Tiers;                        OCurrency initialAmount = (OCurrency)item.SubItems[idxInitialAmount].Tag;                      double interestRate = (double)item.SubItems[idxInterestRate].Tag;                      OCurrency entryFees = (OCurrency)item.SubItems[idxEntryFees].Tag;                        if (_product is SavingsBookProduct)                      {                          SavingsBookProduct sbp = (SavingsBookProduct)_product;                          decimal withdrawFees = (decimal)item.SubItems[idxWithdrawFees].Tag;                          decimal transferFees = (decimal)item.SubItems[idxTransferFees].Tag;                          decimal ibtFees = Convert.ToDecimal(item.SubItems[idxIbtFees].Tag);                          decimal depositFees = (decimal)item.SubItems[idxDepositFees].Tag;                          decimal chequeDepositFees = (decimal)item.SubItems[idxChequeDepositFees].Tag;                          decimal closeFees = (decimal)item.SubItems[idxCloseFees].Tag;                          decimal managementFees = (decimal)item.SubItems[idxManagementFees].Tag;                          decimal overdraftFees = (decimal)item.SubItems[idxOverdraftFees].Tag;                          decimal agioFees = (decimal)item.SubItems[idxAgioFees].Tag;                          decimal reopenFees = (decimal)item.SubItems[idxReopenFees].Tag;                            saving = new SavingBookContract(ServicesProvider.GetInstance().GetGeneralSettings()'                                                          User.CurrentUser' TimeProvider.Today' sbp' client)                                       {InterestRate = interestRate/100};                          SavingBookContract s = (SavingBookContract)saving;                            if (sbp.WithdrawFeesType == OSavingsFeesType.Flat)                              s.FlatWithdrawFees = withdrawFees;                          else                              s.RateWithdrawFees = (double)withdrawFees / 100;                            if (sbp.TransferFeesType == OSavingsFeesType.Flat)                              s.FlatTransferFees = transferFees;                          else                              s.RateTransferFees = (double)transferFees / 100;                            if (sbp.InterBranchTransferFee.IsFlat)                          {                              s.FlatInterBranchTransferFee = ibtFees;                          }                          else                          {                              s.RateInterBranchTransferFee = Convert.ToDouble(ibtFees);                          }                            s.DepositFees = depositFees;                          s.ChequeDepositFees = chequeDepositFees;                          s.CloseFees = closeFees;                          s.ManagementFees = managementFees;                          s.OverdraftFees = overdraftFees;                          s.AgioFees = (double)agioFees / 100;                          s.ReopenFees = reopenFees;                      }                                            saving.SavingsOfficer = _village.LoanOfficer;                      saving.InitialAmount = initialAmount;                      saving.EntryFees = entryFees;                      saving.NsgID = _village.Id;                      saving.Id = ServicesProvider.GetInstance().GetSavingServices().SaveContract(saving' (Client)member.Tiers);                      saving = ServicesProvider.GetInstance().GetSavingServices().GetSaving(saving.Id);                        ServicesProvider.GetInstance().GetSavingServices().FirstDeposit(saving' initialAmount' TimeProvider.Now' entryFees'                           User.CurrentUser' Teller.CurrentTeller);                      ServicesProvider.GetInstance().GetSavingServices().UpdateInitialData(saving.Id' initialAmount' entryFees);                                            saving = ServicesProvider.GetInstance().GetSavingServices().GetSaving(saving.Id);                      ((Client)member.Tiers).AddSaving(saving);                  }              }              catch (Exception ex)              {                  isError = true;                  new frmShowError(CustomExceptionHandler.ShowExceptionText(ex)).ShowDialog();              }              finally              {                  InitializeControls();              }
Magic Number,OpenCBS.GUI.Contracts,VillageAddSavingsForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\VillageAddSavingsForm.cs,InitializeComponent,The following statement contains a magic number: this.udInitialAmount.DecimalPlaces = 2;
Magic Number,OpenCBS.GUI.Contracts,VillageAddSavingsForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\VillageAddSavingsForm.cs,InitializeComponent,The following statement contains a magic number: this.udInterestRate.DecimalPlaces = 2;
Magic Number,OpenCBS.GUI.Contracts,VillageAddSavingsForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\VillageAddSavingsForm.cs,InitializeComponent,The following statement contains a magic number: this.udEntryFees.DecimalPlaces = 2;
Magic Number,OpenCBS.GUI.Contracts,VillageAddSavingsForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\VillageAddSavingsForm.cs,InitializeComponent,The following statement contains a magic number: this.udWithdrawFees.DecimalPlaces = 2;
Magic Number,OpenCBS.GUI.Contracts,VillageAddSavingsForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\VillageAddSavingsForm.cs,InitializeComponent,The following statement contains a magic number: this.udTransferFees.DecimalPlaces = 2;
Magic Number,OpenCBS.GUI.Contracts,VillageAddSavingsForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\VillageAddSavingsForm.cs,InitializeComponent,The following statement contains a magic number: this.udDepositFees.DecimalPlaces = 2;
Magic Number,OpenCBS.GUI.Contracts,VillageAddSavingsForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\VillageAddSavingsForm.cs,InitializeComponent,The following statement contains a magic number: this.udCloseFees.DecimalPlaces = 2;
Magic Number,OpenCBS.GUI.Contracts,VillageAddSavingsForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\VillageAddSavingsForm.cs,InitializeComponent,The following statement contains a magic number: this.udManagementFees.DecimalPlaces = 2;
Magic Number,OpenCBS.GUI.Contracts,VillageAddSavingsForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\VillageAddSavingsForm.cs,InitializeComponent,The following statement contains a magic number: this.udOverdraftFees.DecimalPlaces = 2;
Magic Number,OpenCBS.GUI.Contracts,VillageAddSavingsForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\VillageAddSavingsForm.cs,InitializeComponent,The following statement contains a magic number: this.udAgioFees.DecimalPlaces = 2;
Magic Number,OpenCBS.GUI.Contracts,VillageAddSavingsForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\VillageAddSavingsForm.cs,InitializeComponent,The following statement contains a magic number: this.udChequeDepositFees.DecimalPlaces = 2;
Magic Number,OpenCBS.GUI.Contracts,VillageAddSavingsForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\VillageAddSavingsForm.cs,InitializeComponent,The following statement contains a magic number: this.udReopenFees.DecimalPlaces = 2;
Magic Number,OpenCBS.GUI.Contracts,VillageAddSavingsForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\VillageAddSavingsForm.cs,InitializeComponent,The following statement contains a magic number: this.nudIbtFees.DecimalPlaces = 2;
Magic Number,OpenCBS.GUI.Contracts,CreditContractRepayForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\CreditContractRepayForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Controls.Add(this.groupBoxButton' 0' 2);
Magic Number,OpenCBS.GUI.Contracts,CreditContractRepayForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\CreditContractRepayForm.Designer.cs,SetUp,The following statement contains a magic number: nudICAmount.DecimalPlaces = _loan.UseCents ? 2 : 0;
Magic Number,OpenCBS.GUI.Contracts,CreditContractRepayForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\CreditContractRepayForm.Designer.cs,SetUp,The following statement contains a magic number: nudECAmount.DecimalPlaces = _loan.UseCents ? 2 : 0;
Magic Number,OpenCBS.GUI.Contracts,CreditContractRepayForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\CreditContractRepayForm.Designer.cs,SetAmount,The following statement contains a magic number: if(_exchangeRate == null)              {                  _amount = ServicesHelper.ConvertStringToDecimal(pTextBoxAmount.Value.ToString()' 0' useCents);              }              else              {                  if(pTextBoxAmount == nudICAmount)                  {                      _amount = ServicesHelper.ConvertStringToDecimal(pTextBoxAmount.Value.ToString()' 0' useCents);                      nudECAmount.Maximum = (_maximumAmount/_exchangeRate.Rate).Value;                      nudECAmount.DecimalPlaces = _loan.UseCents ? 2 : 0;                      nudECAmount.Value = (_amount/_exchangeRate.Rate).Value;                  }                  else                  {                      OCurrency tempAmount = pTextBoxAmount.Value;                      nudECAmount.DecimalPlaces = _loan.UseCents ? 2 : 0;                      nudICAmount.Value = (tempAmount * _exchangeRate.Rate).Value;                                            if (tempAmount == Math.Round((_maximumAmount / _exchangeRate.Rate).Value' 2))                          nudICAmount.Value = _maximumAmount.Value;                        _amount = nudICAmount.Value;                  }              }
Magic Number,OpenCBS.GUI.Contracts,CreditContractRepayForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\CreditContractRepayForm.Designer.cs,SetAmount,The following statement contains a magic number: if(_exchangeRate == null)              {                  _amount = ServicesHelper.ConvertStringToDecimal(pTextBoxAmount.Value.ToString()' 0' useCents);              }              else              {                  if(pTextBoxAmount == nudICAmount)                  {                      _amount = ServicesHelper.ConvertStringToDecimal(pTextBoxAmount.Value.ToString()' 0' useCents);                      nudECAmount.Maximum = (_maximumAmount/_exchangeRate.Rate).Value;                      nudECAmount.DecimalPlaces = _loan.UseCents ? 2 : 0;                      nudECAmount.Value = (_amount/_exchangeRate.Rate).Value;                  }                  else                  {                      OCurrency tempAmount = pTextBoxAmount.Value;                      nudECAmount.DecimalPlaces = _loan.UseCents ? 2 : 0;                      nudICAmount.Value = (tempAmount * _exchangeRate.Rate).Value;                                            if (tempAmount == Math.Round((_maximumAmount / _exchangeRate.Rate).Value' 2))                          nudICAmount.Value = _maximumAmount.Value;                        _amount = nudICAmount.Value;                  }              }
Magic Number,OpenCBS.GUI.Contracts,CreditContractRepayForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\CreditContractRepayForm.Designer.cs,SetAmount,The following statement contains a magic number: if(_exchangeRate == null)              {                  _amount = ServicesHelper.ConvertStringToDecimal(pTextBoxAmount.Value.ToString()' 0' useCents);              }              else              {                  if(pTextBoxAmount == nudICAmount)                  {                      _amount = ServicesHelper.ConvertStringToDecimal(pTextBoxAmount.Value.ToString()' 0' useCents);                      nudECAmount.Maximum = (_maximumAmount/_exchangeRate.Rate).Value;                      nudECAmount.DecimalPlaces = _loan.UseCents ? 2 : 0;                      nudECAmount.Value = (_amount/_exchangeRate.Rate).Value;                  }                  else                  {                      OCurrency tempAmount = pTextBoxAmount.Value;                      nudECAmount.DecimalPlaces = _loan.UseCents ? 2 : 0;                      nudICAmount.Value = (tempAmount * _exchangeRate.Rate).Value;                                            if (tempAmount == Math.Round((_maximumAmount / _exchangeRate.Rate).Value' 2))                          nudICAmount.Value = _maximumAmount.Value;                        _amount = nudICAmount.Value;                  }              }
Magic Number,OpenCBS.GUI.Contracts,CreditContractRepayForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\CreditContractRepayForm.Designer.cs,SetInstalments,The following statement contains a magic number: foreach (Installment installment in pInstalments)              {                  ListViewItem listViewItem = new ListViewItem(installment.Number.ToString());                  if (installment.IsRepaid)                  {                      listViewItem.BackColor = Color.FromArgb(61' 153' 57);                      listViewItem.ForeColor = Color.White;                  }                  if (installment.IsPending)                  {                      listViewItem.BackColor = Color.Orange;                      listViewItem.ForeColor = Color.White;                  }                  listViewItem.Tag = installment;                  listViewItem.SubItems.Add(installment.ExpectedDate.ToShortDateString());                  listViewItem.SubItems.Add(installment.InterestsRepayment.GetFormatedValue(_loan.UseCents));                  listViewItem.SubItems.Add(installment.CapitalRepayment.GetFormatedValue(_loan.UseCents));                  listViewItem.SubItems.Add(installment.AmountHasToPayWithInterest.GetFormatedValue(_loan.UseCents));                    listViewItem.SubItems.Add(ServicesProvider.GetInstance().GetGeneralSettings().IsOlbBeforeRepayment                                                ? installment.OLB.GetFormatedValue(_loan.UseCents)                                                : installment.OLBAfterRepayment.GetFormatedValue(_loan.UseCents));                    listViewItem.SubItems.Add(installment.PaidInterests.GetFormatedValue(_loan.UseCents));                  listViewItem.SubItems.Add(installment.PaidCapital.GetFormatedValue(_loan.UseCents));                  listViewItem.SubItems.Add(installment.PaidDate.HasValue                                                ? installment.PaidDate.Value.ToShortDateString()                                                : "-");                  listViewRepayments.Items.Add(listViewItem);              }
Magic Number,OpenCBS.GUI.Contracts,CreditContractRepayForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\CreditContractRepayForm.Designer.cs,SetInstalments,The following statement contains a magic number: foreach (Installment installment in pInstalments)              {                  ListViewItem listViewItem = new ListViewItem(installment.Number.ToString());                  if (installment.IsRepaid)                  {                      listViewItem.BackColor = Color.FromArgb(61' 153' 57);                      listViewItem.ForeColor = Color.White;                  }                  if (installment.IsPending)                  {                      listViewItem.BackColor = Color.Orange;                      listViewItem.ForeColor = Color.White;                  }                  listViewItem.Tag = installment;                  listViewItem.SubItems.Add(installment.ExpectedDate.ToShortDateString());                  listViewItem.SubItems.Add(installment.InterestsRepayment.GetFormatedValue(_loan.UseCents));                  listViewItem.SubItems.Add(installment.CapitalRepayment.GetFormatedValue(_loan.UseCents));                  listViewItem.SubItems.Add(installment.AmountHasToPayWithInterest.GetFormatedValue(_loan.UseCents));                    listViewItem.SubItems.Add(ServicesProvider.GetInstance().GetGeneralSettings().IsOlbBeforeRepayment                                                ? installment.OLB.GetFormatedValue(_loan.UseCents)                                                : installment.OLBAfterRepayment.GetFormatedValue(_loan.UseCents));                    listViewItem.SubItems.Add(installment.PaidInterests.GetFormatedValue(_loan.UseCents));                  listViewItem.SubItems.Add(installment.PaidCapital.GetFormatedValue(_loan.UseCents));                  listViewItem.SubItems.Add(installment.PaidDate.HasValue                                                ? installment.PaidDate.Value.ToShortDateString()                                                : "-");                  listViewRepayments.Items.Add(listViewItem);              }
Magic Number,OpenCBS.GUI.Contracts,CreditContractRepayForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\CreditContractRepayForm.Designer.cs,SetInstalments,The following statement contains a magic number: foreach (Installment installment in pInstalments)              {                  ListViewItem listViewItem = new ListViewItem(installment.Number.ToString());                  if (installment.IsRepaid)                  {                      listViewItem.BackColor = Color.FromArgb(61' 153' 57);                      listViewItem.ForeColor = Color.White;                  }                  if (installment.IsPending)                  {                      listViewItem.BackColor = Color.Orange;                      listViewItem.ForeColor = Color.White;                  }                  listViewItem.Tag = installment;                  listViewItem.SubItems.Add(installment.ExpectedDate.ToShortDateString());                  listViewItem.SubItems.Add(installment.InterestsRepayment.GetFormatedValue(_loan.UseCents));                  listViewItem.SubItems.Add(installment.CapitalRepayment.GetFormatedValue(_loan.UseCents));                  listViewItem.SubItems.Add(installment.AmountHasToPayWithInterest.GetFormatedValue(_loan.UseCents));                    listViewItem.SubItems.Add(ServicesProvider.GetInstance().GetGeneralSettings().IsOlbBeforeRepayment                                                ? installment.OLB.GetFormatedValue(_loan.UseCents)                                                : installment.OLBAfterRepayment.GetFormatedValue(_loan.UseCents));                    listViewItem.SubItems.Add(installment.PaidInterests.GetFormatedValue(_loan.UseCents));                  listViewItem.SubItems.Add(installment.PaidCapital.GetFormatedValue(_loan.UseCents));                  listViewItem.SubItems.Add(installment.PaidDate.HasValue                                                ? installment.PaidDate.Value.ToShortDateString()                                                : "-");                  listViewRepayments.Items.Add(listViewItem);              }
Magic Number,OpenCBS.GUI.Contracts,CreditContractRepayForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\CreditContractRepayForm.Designer.cs,_lbICAmountToGoBackNormal_MouseLeave,The following statement contains a magic number: lblAmountToGoBackNormal.ForeColor = Color.FromArgb(0' 88' 56);
Magic Number,OpenCBS.GUI.Contracts,CreditContractRepayForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\CreditContractRepayForm.Designer.cs,_lbICAmountToGoBackNormal_MouseLeave,The following statement contains a magic number: lblAmountToGoBackNormal.ForeColor = Color.FromArgb(0' 88' 56);
Magic Number,OpenCBS.GUI.Contracts,CloseSavingsForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\CloseSavingsForm.cs,Initialize,The following statement contains a magic number: udCloseFees.DecimalPlaces = UseCents ? 2 : 0;
Magic Number,OpenCBS.GUI.Contracts,CloseSavingsForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\CloseSavingsForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Controls.Add(this.groupBox1' 0' 3);
Magic Number,OpenCBS.GUI.Contracts,CloseSavingsForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\CloseSavingsForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Controls.Add(this.gbCloseFees' 0' 2);
Magic Number,OpenCBS.GUI.Contracts,CloseSavingsForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\CloseSavingsForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutAmount.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(64))))' ((int)(((byte)(0)))));
Magic Number,OpenCBS.GUI.Contracts,LoanDisbursementForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\LoanDisbursementForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Controls.Add(this._lbAmountValue' 1' 3);
Magic Number,OpenCBS.GUI.Contracts,LoanDisbursementForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\LoanDisbursementForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Controls.Add(this.tbComment' 1' 6);
Magic Number,OpenCBS.GUI.Contracts,LoanDisbursementForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\LoanDisbursementForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Controls.Add(this._lbComment' 0' 6);
Magic Number,OpenCBS.GUI.Contracts,LoanDisbursementForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\LoanDisbursementForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Controls.Add(this._lbFundingLine' 0' 2);
Magic Number,OpenCBS.GUI.Contracts,LoanDisbursementForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\LoanDisbursementForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Controls.Add(this._lbFundingLineValue' 1' 2);
Magic Number,OpenCBS.GUI.Contracts,LoanDisbursementForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\LoanDisbursementForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Controls.Add(this._lbAmount' 0' 3);
Magic Number,OpenCBS.GUI.Contracts,LoanDisbursementForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\LoanDisbursementForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Controls.Add(this._lbFees' 0' 4);
Magic Number,OpenCBS.GUI.Contracts,LoanDisbursementForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\LoanDisbursementForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Controls.Add(this.lblFeesCurrencyPivot' 3' 4);
Magic Number,OpenCBS.GUI.Contracts,LoanDisbursementForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\LoanDisbursementForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Controls.Add(this.lblFeesCurrencyPivot' 3' 4);
Magic Number,OpenCBS.GUI.Contracts,LoanDisbursementForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\LoanDisbursementForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Controls.Add(this.checkBoxFees' 0' 5);
Magic Number,OpenCBS.GUI.Contracts,LoanDisbursementForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\LoanDisbursementForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Controls.Add(this.lblAmountCurrency' 2' 3);
Magic Number,OpenCBS.GUI.Contracts,LoanDisbursementForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\LoanDisbursementForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Controls.Add(this.lblAmountCurrency' 2' 3);
Magic Number,OpenCBS.GUI.Contracts,LoanDisbursementForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\LoanDisbursementForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Controls.Add(this.lblEntryFeeCurrency' 2' 4);
Magic Number,OpenCBS.GUI.Contracts,LoanDisbursementForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\LoanDisbursementForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Controls.Add(this.lblEntryFeeCurrency' 2' 4);
Magic Number,OpenCBS.GUI.Contracts,LoanDisbursementForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\LoanDisbursementForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Controls.Add(this.tbEntryFee' 1' 4);
Magic Number,OpenCBS.GUI.Contracts,LoanDisbursementForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\LoanDisbursementForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Controls.Add(this.lblPivotCurrency' 3' 3);
Magic Number,OpenCBS.GUI.Contracts,LoanDisbursementForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\LoanDisbursementForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Controls.Add(this.lblPivotCurrency' 3' 3);
Magic Number,OpenCBS.GUI.Contracts,LoanDisbursementForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\LoanDisbursementForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.SetColumnSpan(this._lbFundingLineValue' 3);
Magic Number,OpenCBS.GUI.Contracts,LoanDisbursementForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\LoanDisbursementForm.Designer.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.SetColumnSpan(this._lbLoanCodeValue' 3);
Magic Number,OpenCBS.GUI.Contracts,LoanDisbursementForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\LoanDisbursementForm.Designer.cs,TbEntryFeeValueKeyPress,The following statement contains a magic number: if ((keyCode >= 48 && keyCode <= 57) || (keyCode == 8) || (Char.IsControl(e.KeyChar) && e.KeyChar                                                                         != ((char) Keys.V | (char) Keys.ControlKey)) ||                  (Char.IsControl(e.KeyChar) && e.KeyChar !=                   ((char) Keys.C | (char) Keys.ControlKey)) ||                  (e.KeyChar.ToString() == NumberFormatInfo.CurrentInfo.NumberDecimalSeparator))              {                  e.Handled = false;              }              else                  e.Handled = true;
Magic Number,OpenCBS.GUI.Contracts,LoanDisbursementForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\LoanDisbursementForm.Designer.cs,TbEntryFeeValueKeyPress,The following statement contains a magic number: if ((keyCode >= 48 && keyCode <= 57) || (keyCode == 8) || (Char.IsControl(e.KeyChar) && e.KeyChar                                                                         != ((char) Keys.V | (char) Keys.ControlKey)) ||                  (Char.IsControl(e.KeyChar) && e.KeyChar !=                   ((char) Keys.C | (char) Keys.ControlKey)) ||                  (e.KeyChar.ToString() == NumberFormatInfo.CurrentInfo.NumberDecimalSeparator))              {                  e.Handled = false;              }              else                  e.Handled = true;
Magic Number,OpenCBS.GUI.Contracts,LoanDisbursementForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\LoanDisbursementForm.Designer.cs,TbEntryFeeValueKeyPress,The following statement contains a magic number: if ((keyCode >= 48 && keyCode <= 57) || (keyCode == 8) || (Char.IsControl(e.KeyChar) && e.KeyChar                                                                         != ((char) Keys.V | (char) Keys.ControlKey)) ||                  (Char.IsControl(e.KeyChar) && e.KeyChar !=                   ((char) Keys.C | (char) Keys.ControlKey)) ||                  (e.KeyChar.ToString() == NumberFormatInfo.CurrentInfo.NumberDecimalSeparator))              {                  e.Handled = false;              }              else                  e.Handled = true;
Magic Number,OpenCBS.GUI.Contracts,OpenSavingsForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\OpenSavingsForm.cs,Initialize,The following statement contains a magic number: nudInitialAmount.DecimalPlaces = UseCents ? 2 : 0;
Magic Number,OpenCBS.GUI.Contracts,OpenSavingsForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\OpenSavingsForm.cs,Initialize,The following statement contains a magic number: if (fees.HasValue)              {                  udEntryFees.Minimum = _entryFees.Value;                  udEntryFees.Maximum = _entryFees.Value;                  udEntryFees.Value = _entryFees.Value;                    lbEntryFeesMinMax.Text = string.Format("{0} {1}"'                      _entryFees.GetFormatedValue(UseCents)'                       _savingsProduct.Currency.Code);              }              else              {                  udEntryFees.DecimalPlaces = UseCents ? 2 : 0;                  udEntryFees.Minimum = feesMin.Value;                  udEntryFees.Maximum = feesMax.Value;                  if (_entryFees.Value >= udEntryFees.Minimum && _entryFees.Value <= udEntryFees.Maximum)                      udEntryFees.Value = _entryFees.Value;                  else                      udEntryFees.Value = feesMin.Value;                                    lbEntryFeesMinMax.Text = string.Format("{0}{1} {4}\r\n{2}{3} {4}"'                                                         "Min: "' feesMin.GetFormatedValue(UseCents)'                                                         "Max: "' feesMax.GetFormatedValue(UseCents)'                                                         _savingsProduct.Currency.Code);              }
Magic Number,OpenCBS.GUI.Contracts,OpenSavingsForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\OpenSavingsForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Controls.Add(this.groupBox1' 0' 2);
Magic Number,OpenCBS.GUI.Contracts,OpenSavingsForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\OpenSavingsForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel2.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(64))))' ((int)(((byte)(0)))));
Magic Number,OpenCBS.GUI.Contracts,OpenSavingsForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\OpenSavingsForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel2.Controls.Add(this.lbEntryFeesConfirmation' 1' 2);
Magic Number,OpenCBS.GUI.Contracts,OpenSavingsForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\OpenSavingsForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel2.Controls.Add(this.lbTotalAmountValue' 2' 0);
Magic Number,OpenCBS.GUI.Contracts,OpenSavingsForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\OpenSavingsForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel2.Controls.Add(this.lbInitialAmountValue' 2' 1);
Magic Number,OpenCBS.GUI.Contracts,OpenSavingsForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\OpenSavingsForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel2.Controls.Add(this.lbEntryFeesValue' 2' 2);
Magic Number,OpenCBS.GUI.Contracts,OpenSavingsForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\OpenSavingsForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel2.Controls.Add(this.lbEntryFeesValue' 2' 2);
Magic Number,OpenCBS.GUI.Contracts,OpenSavingsForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\OpenSavingsForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel2.SetColumnSpan(this.lbConfirmationTotalAmount' 2);
Magic Number,OpenCBS.GUI.Contracts,InstallmentCommentDialog,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\InstallmentCommentDialog.cs,InitializeComponent,The following statement contains a magic number: this.buttonCancel.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56)))));
Magic Number,OpenCBS.GUI.Contracts,InstallmentCommentDialog,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\InstallmentCommentDialog.cs,InitializeComponent,The following statement contains a magic number: this.buttonCancel.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56)))));
Magic Number,OpenCBS.GUI.Contracts,InstallmentCommentDialog,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\InstallmentCommentDialog.cs,InitializeComponent,The following statement contains a magic number: this.buttonOK.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56)))));
Magic Number,OpenCBS.GUI.Contracts,InstallmentCommentDialog,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\InstallmentCommentDialog.cs,InitializeComponent,The following statement contains a magic number: this.buttonOK.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56)))));
Magic Number,OpenCBS.GUI.Contracts,VillageCreditCommitteeForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\VillageCreditCommitteeForm.cs,Validate,The following statement contains a magic number: foreach (var item in lvMembers.Items.Cast<ListViewItem>().Where(item => item.Checked))              {                  item.SubItems[5].Text = OContractStatus.Validated.ToString();                  item.SubItems[5].Tag = OContractStatus.Validated;              }
Magic Number,OpenCBS.GUI.Contracts,VillageCreditCommitteeForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\VillageCreditCommitteeForm.cs,Validate,The following statement contains a magic number: foreach (var item in lvMembers.Items.Cast<ListViewItem>().Where(item => item.Checked))              {                  item.SubItems[5].Text = OContractStatus.Validated.ToString();                  item.SubItems[5].Tag = OContractStatus.Validated;              }
Magic Number,OpenCBS.GUI.Contracts,VillageCreditCommitteeForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\VillageCreditCommitteeForm.cs,lvMembers_ItemChecked,The following statement contains a magic number: if (item.Checked)              {                    if (string.IsNullOrEmpty(item.SubItems[IdxAmount].Text)) // Amount                  {                      item.SubItems[IdxAmount].Text = ((Loan)item.Tag).Amount.GetFormatedValue(false);                  }                  if (string.IsNullOrEmpty(item.SubItems[IdxCurrency].Text)) // Currency                  {                      item.SubItems[IdxCurrency].Text = ((Loan)item.Tag).Product.Currency.Code;                  }                    if (string.IsNullOrEmpty(item.SubItems[IdxLoanOfficer].Text)) // Loan officer                  {                      item.SubItems[IdxLoanOfficer].Text = _village.LoanOfficer.ToString();                  }                    var statusSubItem = item.SubItems[IdxStatus];                  if (string.IsNullOrEmpty(statusSubItem.Text)) // Status                  {                      var loan = (Loan)item.Tag;                      var items = cbStatus.Items;                      if (loan.ContractStatus == OContractStatus.Pending)                          statusSubItem.Text = items[0].ToString();                      if (loan.ContractStatus == OContractStatus.Postponed)                          statusSubItem.Text = items[1].ToString();                      if (loan.ContractStatus == OContractStatus.Validated)                          statusSubItem.Text = items[2].ToString();                      if (loan.ContractStatus == OContractStatus.Refused)                          statusSubItem.Text = items[3].ToString();                      if (loan.ContractStatus == OContractStatus.Abandoned)                          statusSubItem.Text = items[4].ToString();                        statusSubItem.Tag = loan.ContractStatus;                  }                    if (string.IsNullOrEmpty(item.SubItems[IdxCreditCommitteeDate].Text)) // Credit Committee date                  {                      var loan = (Loan)item.Tag;                      if (loan.CreditCommiteeDate == null)                      {                          item.SubItems[IdxCreditCommitteeDate].Text = TimeProvider.Today.ToString(ApplicationSettings.GetInstance("").SHORT_DATE_FORMAT);                          item.SubItems[IdxCreditCommitteeDate].Tag = TimeProvider.Today.ToString(ApplicationSettings.GetInstance("").SHORT_DATE_FORMAT);                      }                      else                      {                          item.SubItems[IdxCreditCommitteeDate].Text = loan.CreditCommiteeDate.Value.ToString(ApplicationSettings.GetInstance("").SHORT_DATE_FORMAT);                          item.SubItems[IdxCreditCommitteeDate].Tag = loan.CreditCommiteeDate.Value.ToString(ApplicationSettings.GetInstance("").SHORT_DATE_FORMAT);                      }                  }                    if (string.IsNullOrEmpty(item.SubItems[IdxDisbursementDate].Text)) // Disbursement date                  {                      var loan = (Loan)item.Tag;                      item.SubItems[IdxDisbursementDate].Text = loan.StartDate.ToString(ApplicationSettings.GetInstance("").SHORT_DATE_FORMAT);                      item.SubItems[IdxDisbursementDate].Tag = loan.StartDate.ToString(ApplicationSettings.GetInstance("").SHORT_DATE_FORMAT);                  }                    if (string.IsNullOrEmpty(item.SubItems[IdxFirstInstallmentDate].Text)) // Disbursement date                  {                      var loan = (Loan)item.Tag;                      item.SubItems[IdxFirstInstallmentDate].Text = loan.FirstInstallmentDate.ToString(ApplicationSettings.GetInstance("").SHORT_DATE_FORMAT);                      item.SubItems[IdxFirstInstallmentDate].Tag = loan.FirstInstallmentDate.ToString(ApplicationSettings.GetInstance("").SHORT_DATE_FORMAT);                  }              }              else              {                  for (int i = 2; i < item.SubItems.Count; i++)                  {                      item.SubItems[i].Text = "";                  }              }
Magic Number,OpenCBS.GUI.Contracts,VillageCreditCommitteeForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\VillageCreditCommitteeForm.cs,lvMembers_ItemChecked,The following statement contains a magic number: if (item.Checked)              {                    if (string.IsNullOrEmpty(item.SubItems[IdxAmount].Text)) // Amount                  {                      item.SubItems[IdxAmount].Text = ((Loan)item.Tag).Amount.GetFormatedValue(false);                  }                  if (string.IsNullOrEmpty(item.SubItems[IdxCurrency].Text)) // Currency                  {                      item.SubItems[IdxCurrency].Text = ((Loan)item.Tag).Product.Currency.Code;                  }                    if (string.IsNullOrEmpty(item.SubItems[IdxLoanOfficer].Text)) // Loan officer                  {                      item.SubItems[IdxLoanOfficer].Text = _village.LoanOfficer.ToString();                  }                    var statusSubItem = item.SubItems[IdxStatus];                  if (string.IsNullOrEmpty(statusSubItem.Text)) // Status                  {                      var loan = (Loan)item.Tag;                      var items = cbStatus.Items;                      if (loan.ContractStatus == OContractStatus.Pending)                          statusSubItem.Text = items[0].ToString();                      if (loan.ContractStatus == OContractStatus.Postponed)                          statusSubItem.Text = items[1].ToString();                      if (loan.ContractStatus == OContractStatus.Validated)                          statusSubItem.Text = items[2].ToString();                      if (loan.ContractStatus == OContractStatus.Refused)                          statusSubItem.Text = items[3].ToString();                      if (loan.ContractStatus == OContractStatus.Abandoned)                          statusSubItem.Text = items[4].ToString();                        statusSubItem.Tag = loan.ContractStatus;                  }                    if (string.IsNullOrEmpty(item.SubItems[IdxCreditCommitteeDate].Text)) // Credit Committee date                  {                      var loan = (Loan)item.Tag;                      if (loan.CreditCommiteeDate == null)                      {                          item.SubItems[IdxCreditCommitteeDate].Text = TimeProvider.Today.ToString(ApplicationSettings.GetInstance("").SHORT_DATE_FORMAT);                          item.SubItems[IdxCreditCommitteeDate].Tag = TimeProvider.Today.ToString(ApplicationSettings.GetInstance("").SHORT_DATE_FORMAT);                      }                      else                      {                          item.SubItems[IdxCreditCommitteeDate].Text = loan.CreditCommiteeDate.Value.ToString(ApplicationSettings.GetInstance("").SHORT_DATE_FORMAT);                          item.SubItems[IdxCreditCommitteeDate].Tag = loan.CreditCommiteeDate.Value.ToString(ApplicationSettings.GetInstance("").SHORT_DATE_FORMAT);                      }                  }                    if (string.IsNullOrEmpty(item.SubItems[IdxDisbursementDate].Text)) // Disbursement date                  {                      var loan = (Loan)item.Tag;                      item.SubItems[IdxDisbursementDate].Text = loan.StartDate.ToString(ApplicationSettings.GetInstance("").SHORT_DATE_FORMAT);                      item.SubItems[IdxDisbursementDate].Tag = loan.StartDate.ToString(ApplicationSettings.GetInstance("").SHORT_DATE_FORMAT);                  }                    if (string.IsNullOrEmpty(item.SubItems[IdxFirstInstallmentDate].Text)) // Disbursement date                  {                      var loan = (Loan)item.Tag;                      item.SubItems[IdxFirstInstallmentDate].Text = loan.FirstInstallmentDate.ToString(ApplicationSettings.GetInstance("").SHORT_DATE_FORMAT);                      item.SubItems[IdxFirstInstallmentDate].Tag = loan.FirstInstallmentDate.ToString(ApplicationSettings.GetInstance("").SHORT_DATE_FORMAT);                  }              }              else              {                  for (int i = 2; i < item.SubItems.Count; i++)                  {                      item.SubItems[i].Text = "";                  }              }
Magic Number,OpenCBS.GUI.Contracts,VillageCreditCommitteeForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\VillageCreditCommitteeForm.cs,lvMembers_ItemChecked,The following statement contains a magic number: if (item.Checked)              {                    if (string.IsNullOrEmpty(item.SubItems[IdxAmount].Text)) // Amount                  {                      item.SubItems[IdxAmount].Text = ((Loan)item.Tag).Amount.GetFormatedValue(false);                  }                  if (string.IsNullOrEmpty(item.SubItems[IdxCurrency].Text)) // Currency                  {                      item.SubItems[IdxCurrency].Text = ((Loan)item.Tag).Product.Currency.Code;                  }                    if (string.IsNullOrEmpty(item.SubItems[IdxLoanOfficer].Text)) // Loan officer                  {                      item.SubItems[IdxLoanOfficer].Text = _village.LoanOfficer.ToString();                  }                    var statusSubItem = item.SubItems[IdxStatus];                  if (string.IsNullOrEmpty(statusSubItem.Text)) // Status                  {                      var loan = (Loan)item.Tag;                      var items = cbStatus.Items;                      if (loan.ContractStatus == OContractStatus.Pending)                          statusSubItem.Text = items[0].ToString();                      if (loan.ContractStatus == OContractStatus.Postponed)                          statusSubItem.Text = items[1].ToString();                      if (loan.ContractStatus == OContractStatus.Validated)                          statusSubItem.Text = items[2].ToString();                      if (loan.ContractStatus == OContractStatus.Refused)                          statusSubItem.Text = items[3].ToString();                      if (loan.ContractStatus == OContractStatus.Abandoned)                          statusSubItem.Text = items[4].ToString();                        statusSubItem.Tag = loan.ContractStatus;                  }                    if (string.IsNullOrEmpty(item.SubItems[IdxCreditCommitteeDate].Text)) // Credit Committee date                  {                      var loan = (Loan)item.Tag;                      if (loan.CreditCommiteeDate == null)                      {                          item.SubItems[IdxCreditCommitteeDate].Text = TimeProvider.Today.ToString(ApplicationSettings.GetInstance("").SHORT_DATE_FORMAT);                          item.SubItems[IdxCreditCommitteeDate].Tag = TimeProvider.Today.ToString(ApplicationSettings.GetInstance("").SHORT_DATE_FORMAT);                      }                      else                      {                          item.SubItems[IdxCreditCommitteeDate].Text = loan.CreditCommiteeDate.Value.ToString(ApplicationSettings.GetInstance("").SHORT_DATE_FORMAT);                          item.SubItems[IdxCreditCommitteeDate].Tag = loan.CreditCommiteeDate.Value.ToString(ApplicationSettings.GetInstance("").SHORT_DATE_FORMAT);                      }                  }                    if (string.IsNullOrEmpty(item.SubItems[IdxDisbursementDate].Text)) // Disbursement date                  {                      var loan = (Loan)item.Tag;                      item.SubItems[IdxDisbursementDate].Text = loan.StartDate.ToString(ApplicationSettings.GetInstance("").SHORT_DATE_FORMAT);                      item.SubItems[IdxDisbursementDate].Tag = loan.StartDate.ToString(ApplicationSettings.GetInstance("").SHORT_DATE_FORMAT);                  }                    if (string.IsNullOrEmpty(item.SubItems[IdxFirstInstallmentDate].Text)) // Disbursement date                  {                      var loan = (Loan)item.Tag;                      item.SubItems[IdxFirstInstallmentDate].Text = loan.FirstInstallmentDate.ToString(ApplicationSettings.GetInstance("").SHORT_DATE_FORMAT);                      item.SubItems[IdxFirstInstallmentDate].Tag = loan.FirstInstallmentDate.ToString(ApplicationSettings.GetInstance("").SHORT_DATE_FORMAT);                  }              }              else              {                  for (int i = 2; i < item.SubItems.Count; i++)                  {                      item.SubItems[i].Text = "";                  }              }
Magic Number,OpenCBS.GUI.Contracts,VillageCreditCommitteeForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\VillageCreditCommitteeForm.cs,lvMembers_ItemChecked,The following statement contains a magic number: if (item.Checked)              {                    if (string.IsNullOrEmpty(item.SubItems[IdxAmount].Text)) // Amount                  {                      item.SubItems[IdxAmount].Text = ((Loan)item.Tag).Amount.GetFormatedValue(false);                  }                  if (string.IsNullOrEmpty(item.SubItems[IdxCurrency].Text)) // Currency                  {                      item.SubItems[IdxCurrency].Text = ((Loan)item.Tag).Product.Currency.Code;                  }                    if (string.IsNullOrEmpty(item.SubItems[IdxLoanOfficer].Text)) // Loan officer                  {                      item.SubItems[IdxLoanOfficer].Text = _village.LoanOfficer.ToString();                  }                    var statusSubItem = item.SubItems[IdxStatus];                  if (string.IsNullOrEmpty(statusSubItem.Text)) // Status                  {                      var loan = (Loan)item.Tag;                      var items = cbStatus.Items;                      if (loan.ContractStatus == OContractStatus.Pending)                          statusSubItem.Text = items[0].ToString();                      if (loan.ContractStatus == OContractStatus.Postponed)                          statusSubItem.Text = items[1].ToString();                      if (loan.ContractStatus == OContractStatus.Validated)                          statusSubItem.Text = items[2].ToString();                      if (loan.ContractStatus == OContractStatus.Refused)                          statusSubItem.Text = items[3].ToString();                      if (loan.ContractStatus == OContractStatus.Abandoned)                          statusSubItem.Text = items[4].ToString();                        statusSubItem.Tag = loan.ContractStatus;                  }                    if (string.IsNullOrEmpty(item.SubItems[IdxCreditCommitteeDate].Text)) // Credit Committee date                  {                      var loan = (Loan)item.Tag;                      if (loan.CreditCommiteeDate == null)                      {                          item.SubItems[IdxCreditCommitteeDate].Text = TimeProvider.Today.ToString(ApplicationSettings.GetInstance("").SHORT_DATE_FORMAT);                          item.SubItems[IdxCreditCommitteeDate].Tag = TimeProvider.Today.ToString(ApplicationSettings.GetInstance("").SHORT_DATE_FORMAT);                      }                      else                      {                          item.SubItems[IdxCreditCommitteeDate].Text = loan.CreditCommiteeDate.Value.ToString(ApplicationSettings.GetInstance("").SHORT_DATE_FORMAT);                          item.SubItems[IdxCreditCommitteeDate].Tag = loan.CreditCommiteeDate.Value.ToString(ApplicationSettings.GetInstance("").SHORT_DATE_FORMAT);                      }                  }                    if (string.IsNullOrEmpty(item.SubItems[IdxDisbursementDate].Text)) // Disbursement date                  {                      var loan = (Loan)item.Tag;                      item.SubItems[IdxDisbursementDate].Text = loan.StartDate.ToString(ApplicationSettings.GetInstance("").SHORT_DATE_FORMAT);                      item.SubItems[IdxDisbursementDate].Tag = loan.StartDate.ToString(ApplicationSettings.GetInstance("").SHORT_DATE_FORMAT);                  }                    if (string.IsNullOrEmpty(item.SubItems[IdxFirstInstallmentDate].Text)) // Disbursement date                  {                      var loan = (Loan)item.Tag;                      item.SubItems[IdxFirstInstallmentDate].Text = loan.FirstInstallmentDate.ToString(ApplicationSettings.GetInstance("").SHORT_DATE_FORMAT);                      item.SubItems[IdxFirstInstallmentDate].Tag = loan.FirstInstallmentDate.ToString(ApplicationSettings.GetInstance("").SHORT_DATE_FORMAT);                  }              }              else              {                  for (int i = 2; i < item.SubItems.Count; i++)                  {                      item.SubItems[i].Text = "";                  }              }
Magic Number,OpenCBS.GUI.Contracts,VillageCreditCommitteeForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\VillageCreditCommitteeForm.cs,lvMembers_SubItemEndEditing,The following statement contains a magic number: switch (e.SubItem)              {                  case IdxStatus:                      var items = cbStatus.Items;                      if (cbStatus.SelectedItem == items[0])                          subItems[IdxStatus].Tag = OContractStatus.Pending;                      if (cbStatus.SelectedItem == items[1])                          subItems[IdxStatus].Tag = OContractStatus.Postponed;                      if (cbStatus.SelectedItem == items[2])                          subItems[IdxStatus].Tag = OContractStatus.Validated;                      if (cbStatus.SelectedItem == items[3])                          subItems[IdxStatus].Tag = OContractStatus.Refused;                      if (cbStatus.SelectedItem == items[4])                          subItems[IdxStatus].Tag = OContractStatus.Abandoned;                      break;                    case IdxCreditCommitteeDate:                      subItems[e.SubItem].Tag = _creditCommitteeDate;                      break;                    case IdxDisbursementDate:                      subItems[IdxDisbursementDate].Tag = _disbursementDate;                      //if (_firstInstallmentDate != null)                      //    subItems[IdxFirstInstallmentDate].Tag = _firstInstallmentDate;                      break;                    case IdxFirstInstallmentDate:                      subItems[e.SubItem].Tag = _firstInstallmentDate;                      break;                    case IdxValidationCode:                      subItems[e.SubItem].Text = tbValidationCode.Text;                      break;                    case IdxComment:                      subItems[e.SubItem].Text = tbComment.SelectedText;                      break;                    default:                      break;              }
Magic Number,OpenCBS.GUI.Contracts,VillageCreditCommitteeForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\VillageCreditCommitteeForm.cs,lvMembers_SubItemEndEditing,The following statement contains a magic number: switch (e.SubItem)              {                  case IdxStatus:                      var items = cbStatus.Items;                      if (cbStatus.SelectedItem == items[0])                          subItems[IdxStatus].Tag = OContractStatus.Pending;                      if (cbStatus.SelectedItem == items[1])                          subItems[IdxStatus].Tag = OContractStatus.Postponed;                      if (cbStatus.SelectedItem == items[2])                          subItems[IdxStatus].Tag = OContractStatus.Validated;                      if (cbStatus.SelectedItem == items[3])                          subItems[IdxStatus].Tag = OContractStatus.Refused;                      if (cbStatus.SelectedItem == items[4])                          subItems[IdxStatus].Tag = OContractStatus.Abandoned;                      break;                    case IdxCreditCommitteeDate:                      subItems[e.SubItem].Tag = _creditCommitteeDate;                      break;                    case IdxDisbursementDate:                      subItems[IdxDisbursementDate].Tag = _disbursementDate;                      //if (_firstInstallmentDate != null)                      //    subItems[IdxFirstInstallmentDate].Tag = _firstInstallmentDate;                      break;                    case IdxFirstInstallmentDate:                      subItems[e.SubItem].Tag = _firstInstallmentDate;                      break;                    case IdxValidationCode:                      subItems[e.SubItem].Text = tbValidationCode.Text;                      break;                    case IdxComment:                      subItems[e.SubItem].Text = tbComment.SelectedText;                      break;                    default:                      break;              }
Magic Number,OpenCBS.GUI.Contracts,VillageCreditCommitteeForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\VillageCreditCommitteeForm.cs,lvMembers_SubItemEndEditing,The following statement contains a magic number: switch (e.SubItem)              {                  case IdxStatus:                      var items = cbStatus.Items;                      if (cbStatus.SelectedItem == items[0])                          subItems[IdxStatus].Tag = OContractStatus.Pending;                      if (cbStatus.SelectedItem == items[1])                          subItems[IdxStatus].Tag = OContractStatus.Postponed;                      if (cbStatus.SelectedItem == items[2])                          subItems[IdxStatus].Tag = OContractStatus.Validated;                      if (cbStatus.SelectedItem == items[3])                          subItems[IdxStatus].Tag = OContractStatus.Refused;                      if (cbStatus.SelectedItem == items[4])                          subItems[IdxStatus].Tag = OContractStatus.Abandoned;                      break;                    case IdxCreditCommitteeDate:                      subItems[e.SubItem].Tag = _creditCommitteeDate;                      break;                    case IdxDisbursementDate:                      subItems[IdxDisbursementDate].Tag = _disbursementDate;                      //if (_firstInstallmentDate != null)                      //    subItems[IdxFirstInstallmentDate].Tag = _firstInstallmentDate;                      break;                    case IdxFirstInstallmentDate:                      subItems[e.SubItem].Tag = _firstInstallmentDate;                      break;                    case IdxValidationCode:                      subItems[e.SubItem].Text = tbValidationCode.Text;                      break;                    case IdxComment:                      subItems[e.SubItem].Text = tbComment.SelectedText;                      break;                    default:                      break;              }
Magic Number,OpenCBS.GUI.Contracts,VillageCreditCommitteeForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\VillageCreditCommitteeForm.cs,lvMembers_MouseDown,The following statement contains a magic number: if (MouseButtons.Left == e.Button)              {                  if (e.Clicks >= 2)                  {                      _blockItemCheck = true;                  }              }
Magic Number,OpenCBS.GUI.Contracts,FastRepaymentForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\FastRepaymentForm.cs,UpdateTotal,The following statement contains a magic number: foreach (ListViewItem item in lvContracts.Items)              {                  if (!item.Checked)                       continue;                                    if (item == _itemTotal)                       continue;                    customExchangeRate =                          ServicesProvider.GetInstance().GetAccountingServices().FindLatestExchangeRate(                              TimeProvider.Today' (Currency)item.SubItems[8].Tag);                    principal += customExchangeRate.Rate == 0                                            ? 0                                            : Convert.ToDecimal(item.SubItems[2].Text) / (decimal)customExchangeRate.Rate;                  interest += customExchangeRate.Rate == 0                                            ? 0                                            : Convert.ToDecimal(item.SubItems[3].Text) / (decimal)customExchangeRate.Rate;                  penalty += customExchangeRate.Rate == 0                                            ? 0                                            : Convert.ToDecimal(item.SubItems[4].Text) / (decimal)customExchangeRate.Rate;                  olb += customExchangeRate.Rate == 0                                            ? 0                                            : Convert.ToDecimal(item.SubItems[6].Text) / (decimal)customExchangeRate.Rate;                  totalDueInterest += customExchangeRate.Rate == 0                                            ? 0                                            : Convert.ToDecimal(item.SubItems[7].Text) / (decimal)customExchangeRate.Rate;              }
Magic Number,OpenCBS.GUI.Contracts,FastRepaymentForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\FastRepaymentForm.cs,UpdateTotal,The following statement contains a magic number: foreach (ListViewItem item in lvContracts.Items)              {                  if (!item.Checked)                       continue;                                    if (item == _itemTotal)                       continue;                    customExchangeRate =                          ServicesProvider.GetInstance().GetAccountingServices().FindLatestExchangeRate(                              TimeProvider.Today' (Currency)item.SubItems[8].Tag);                    principal += customExchangeRate.Rate == 0                                            ? 0                                            : Convert.ToDecimal(item.SubItems[2].Text) / (decimal)customExchangeRate.Rate;                  interest += customExchangeRate.Rate == 0                                            ? 0                                            : Convert.ToDecimal(item.SubItems[3].Text) / (decimal)customExchangeRate.Rate;                  penalty += customExchangeRate.Rate == 0                                            ? 0                                            : Convert.ToDecimal(item.SubItems[4].Text) / (decimal)customExchangeRate.Rate;                  olb += customExchangeRate.Rate == 0                                            ? 0                                            : Convert.ToDecimal(item.SubItems[6].Text) / (decimal)customExchangeRate.Rate;                  totalDueInterest += customExchangeRate.Rate == 0                                            ? 0                                            : Convert.ToDecimal(item.SubItems[7].Text) / (decimal)customExchangeRate.Rate;              }
Magic Number,OpenCBS.GUI.Contracts,FastRepaymentForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\FastRepaymentForm.cs,UpdateTotal,The following statement contains a magic number: foreach (ListViewItem item in lvContracts.Items)              {                  if (!item.Checked)                       continue;                                    if (item == _itemTotal)                       continue;                    customExchangeRate =                          ServicesProvider.GetInstance().GetAccountingServices().FindLatestExchangeRate(                              TimeProvider.Today' (Currency)item.SubItems[8].Tag);                    principal += customExchangeRate.Rate == 0                                            ? 0                                            : Convert.ToDecimal(item.SubItems[2].Text) / (decimal)customExchangeRate.Rate;                  interest += customExchangeRate.Rate == 0                                            ? 0                                            : Convert.ToDecimal(item.SubItems[3].Text) / (decimal)customExchangeRate.Rate;                  penalty += customExchangeRate.Rate == 0                                            ? 0                                            : Convert.ToDecimal(item.SubItems[4].Text) / (decimal)customExchangeRate.Rate;                  olb += customExchangeRate.Rate == 0                                            ? 0                                            : Convert.ToDecimal(item.SubItems[6].Text) / (decimal)customExchangeRate.Rate;                  totalDueInterest += customExchangeRate.Rate == 0                                            ? 0                                            : Convert.ToDecimal(item.SubItems[7].Text) / (decimal)customExchangeRate.Rate;              }
Magic Number,OpenCBS.GUI.Contracts,FastRepaymentForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\FastRepaymentForm.cs,UpdateTotal,The following statement contains a magic number: foreach (ListViewItem item in lvContracts.Items)              {                  if (!item.Checked)                       continue;                                    if (item == _itemTotal)                       continue;                    customExchangeRate =                          ServicesProvider.GetInstance().GetAccountingServices().FindLatestExchangeRate(                              TimeProvider.Today' (Currency)item.SubItems[8].Tag);                    principal += customExchangeRate.Rate == 0                                            ? 0                                            : Convert.ToDecimal(item.SubItems[2].Text) / (decimal)customExchangeRate.Rate;                  interest += customExchangeRate.Rate == 0                                            ? 0                                            : Convert.ToDecimal(item.SubItems[3].Text) / (decimal)customExchangeRate.Rate;                  penalty += customExchangeRate.Rate == 0                                            ? 0                                            : Convert.ToDecimal(item.SubItems[4].Text) / (decimal)customExchangeRate.Rate;                  olb += customExchangeRate.Rate == 0                                            ? 0                                            : Convert.ToDecimal(item.SubItems[6].Text) / (decimal)customExchangeRate.Rate;                  totalDueInterest += customExchangeRate.Rate == 0                                            ? 0                                            : Convert.ToDecimal(item.SubItems[7].Text) / (decimal)customExchangeRate.Rate;              }
Magic Number,OpenCBS.GUI.Contracts,FastRepaymentForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\FastRepaymentForm.cs,UpdateTotal,The following statement contains a magic number: foreach (ListViewItem item in lvContracts.Items)              {                  if (!item.Checked)                       continue;                                    if (item == _itemTotal)                       continue;                    customExchangeRate =                          ServicesProvider.GetInstance().GetAccountingServices().FindLatestExchangeRate(                              TimeProvider.Today' (Currency)item.SubItems[8].Tag);                    principal += customExchangeRate.Rate == 0                                            ? 0                                            : Convert.ToDecimal(item.SubItems[2].Text) / (decimal)customExchangeRate.Rate;                  interest += customExchangeRate.Rate == 0                                            ? 0                                            : Convert.ToDecimal(item.SubItems[3].Text) / (decimal)customExchangeRate.Rate;                  penalty += customExchangeRate.Rate == 0                                            ? 0                                            : Convert.ToDecimal(item.SubItems[4].Text) / (decimal)customExchangeRate.Rate;                  olb += customExchangeRate.Rate == 0                                            ? 0                                            : Convert.ToDecimal(item.SubItems[6].Text) / (decimal)customExchangeRate.Rate;                  totalDueInterest += customExchangeRate.Rate == 0                                            ? 0                                            : Convert.ToDecimal(item.SubItems[7].Text) / (decimal)customExchangeRate.Rate;              }
Magic Number,OpenCBS.GUI.Contracts,FastRepaymentForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\FastRepaymentForm.cs,UpdateTotal,The following statement contains a magic number: foreach (ListViewItem item in lvContracts.Items)              {                  if (!item.Checked)                       continue;                                    if (item == _itemTotal)                       continue;                    customExchangeRate =                          ServicesProvider.GetInstance().GetAccountingServices().FindLatestExchangeRate(                              TimeProvider.Today' (Currency)item.SubItems[8].Tag);                    principal += customExchangeRate.Rate == 0                                            ? 0                                            : Convert.ToDecimal(item.SubItems[2].Text) / (decimal)customExchangeRate.Rate;                  interest += customExchangeRate.Rate == 0                                            ? 0                                            : Convert.ToDecimal(item.SubItems[3].Text) / (decimal)customExchangeRate.Rate;                  penalty += customExchangeRate.Rate == 0                                            ? 0                                            : Convert.ToDecimal(item.SubItems[4].Text) / (decimal)customExchangeRate.Rate;                  olb += customExchangeRate.Rate == 0                                            ? 0                                            : Convert.ToDecimal(item.SubItems[6].Text) / (decimal)customExchangeRate.Rate;                  totalDueInterest += customExchangeRate.Rate == 0                                            ? 0                                            : Convert.ToDecimal(item.SubItems[7].Text) / (decimal)customExchangeRate.Rate;              }
Magic Number,OpenCBS.GUI.Contracts,FastRepaymentForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\FastRepaymentForm.cs,UpdateTotal,The following statement contains a magic number: if (_itemTotal!=null)              {                  bool useCents = ServicesProvider.GetInstance().GetCurrencyServices().GetPivot().UseCents;                  _itemTotal.SubItems[2].Text = principal.GetFormatedValue(useCents);                  _itemTotal.SubItems[3].Text = interest.GetFormatedValue(useCents);                  _itemTotal.SubItems[4].Text = penalty.GetFormatedValue(useCents);                  _itemTotal.SubItems[5].Text = total.GetFormatedValue(useCents);                  _itemTotal.SubItems[6].Text = olb.GetFormatedValue(useCents);                  _itemTotal.SubItems[7].Text = totalDueInterest.GetFormatedValue(useCents);                  _itemTotal.SubItems[8].Text = ServicesProvider.GetInstance().GetCurrencyServices().GetPivot().Code;              }
Magic Number,OpenCBS.GUI.Contracts,FastRepaymentForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\FastRepaymentForm.cs,UpdateTotal,The following statement contains a magic number: if (_itemTotal!=null)              {                  bool useCents = ServicesProvider.GetInstance().GetCurrencyServices().GetPivot().UseCents;                  _itemTotal.SubItems[2].Text = principal.GetFormatedValue(useCents);                  _itemTotal.SubItems[3].Text = interest.GetFormatedValue(useCents);                  _itemTotal.SubItems[4].Text = penalty.GetFormatedValue(useCents);                  _itemTotal.SubItems[5].Text = total.GetFormatedValue(useCents);                  _itemTotal.SubItems[6].Text = olb.GetFormatedValue(useCents);                  _itemTotal.SubItems[7].Text = totalDueInterest.GetFormatedValue(useCents);                  _itemTotal.SubItems[8].Text = ServicesProvider.GetInstance().GetCurrencyServices().GetPivot().Code;              }
Magic Number,OpenCBS.GUI.Contracts,FastRepaymentForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\FastRepaymentForm.cs,UpdateTotal,The following statement contains a magic number: if (_itemTotal!=null)              {                  bool useCents = ServicesProvider.GetInstance().GetCurrencyServices().GetPivot().UseCents;                  _itemTotal.SubItems[2].Text = principal.GetFormatedValue(useCents);                  _itemTotal.SubItems[3].Text = interest.GetFormatedValue(useCents);                  _itemTotal.SubItems[4].Text = penalty.GetFormatedValue(useCents);                  _itemTotal.SubItems[5].Text = total.GetFormatedValue(useCents);                  _itemTotal.SubItems[6].Text = olb.GetFormatedValue(useCents);                  _itemTotal.SubItems[7].Text = totalDueInterest.GetFormatedValue(useCents);                  _itemTotal.SubItems[8].Text = ServicesProvider.GetInstance().GetCurrencyServices().GetPivot().Code;              }
Magic Number,OpenCBS.GUI.Contracts,FastRepaymentForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\FastRepaymentForm.cs,UpdateTotal,The following statement contains a magic number: if (_itemTotal!=null)              {                  bool useCents = ServicesProvider.GetInstance().GetCurrencyServices().GetPivot().UseCents;                  _itemTotal.SubItems[2].Text = principal.GetFormatedValue(useCents);                  _itemTotal.SubItems[3].Text = interest.GetFormatedValue(useCents);                  _itemTotal.SubItems[4].Text = penalty.GetFormatedValue(useCents);                  _itemTotal.SubItems[5].Text = total.GetFormatedValue(useCents);                  _itemTotal.SubItems[6].Text = olb.GetFormatedValue(useCents);                  _itemTotal.SubItems[7].Text = totalDueInterest.GetFormatedValue(useCents);                  _itemTotal.SubItems[8].Text = ServicesProvider.GetInstance().GetCurrencyServices().GetPivot().Code;              }
Magic Number,OpenCBS.GUI.Contracts,FastRepaymentForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\FastRepaymentForm.cs,UpdateTotal,The following statement contains a magic number: if (_itemTotal!=null)              {                  bool useCents = ServicesProvider.GetInstance().GetCurrencyServices().GetPivot().UseCents;                  _itemTotal.SubItems[2].Text = principal.GetFormatedValue(useCents);                  _itemTotal.SubItems[3].Text = interest.GetFormatedValue(useCents);                  _itemTotal.SubItems[4].Text = penalty.GetFormatedValue(useCents);                  _itemTotal.SubItems[5].Text = total.GetFormatedValue(useCents);                  _itemTotal.SubItems[6].Text = olb.GetFormatedValue(useCents);                  _itemTotal.SubItems[7].Text = totalDueInterest.GetFormatedValue(useCents);                  _itemTotal.SubItems[8].Text = ServicesProvider.GetInstance().GetCurrencyServices().GetPivot().Code;              }
Magic Number,OpenCBS.GUI.Contracts,FastRepaymentForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\FastRepaymentForm.cs,UpdateTotal,The following statement contains a magic number: if (_itemTotal!=null)              {                  bool useCents = ServicesProvider.GetInstance().GetCurrencyServices().GetPivot().UseCents;                  _itemTotal.SubItems[2].Text = principal.GetFormatedValue(useCents);                  _itemTotal.SubItems[3].Text = interest.GetFormatedValue(useCents);                  _itemTotal.SubItems[4].Text = penalty.GetFormatedValue(useCents);                  _itemTotal.SubItems[5].Text = total.GetFormatedValue(useCents);                  _itemTotal.SubItems[6].Text = olb.GetFormatedValue(useCents);                  _itemTotal.SubItems[7].Text = totalDueInterest.GetFormatedValue(useCents);                  _itemTotal.SubItems[8].Text = ServicesProvider.GetInstance().GetCurrencyServices().GetPivot().Code;              }
Magic Number,OpenCBS.GUI.Contracts,FastRepaymentForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\FastRepaymentForm.cs,UpdateTotal,The following statement contains a magic number: if (_itemTotal!=null)              {                  bool useCents = ServicesProvider.GetInstance().GetCurrencyServices().GetPivot().UseCents;                  _itemTotal.SubItems[2].Text = principal.GetFormatedValue(useCents);                  _itemTotal.SubItems[3].Text = interest.GetFormatedValue(useCents);                  _itemTotal.SubItems[4].Text = penalty.GetFormatedValue(useCents);                  _itemTotal.SubItems[5].Text = total.GetFormatedValue(useCents);                  _itemTotal.SubItems[6].Text = olb.GetFormatedValue(useCents);                  _itemTotal.SubItems[7].Text = totalDueInterest.GetFormatedValue(useCents);                  _itemTotal.SubItems[8].Text = ServicesProvider.GetInstance().GetCurrencyServices().GetPivot().Code;              }
Magic Number,OpenCBS.GUI.Contracts,FastRepaymentForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\FastRepaymentForm.cs,lvContracts_MouseDown,The following statement contains a magic number: if (MouseButtons.Left == e.Button)              {                  if (e.Clicks >= 2)                  {                      _blockItemCheck = true;                  }              }
Magic Number,OpenCBS.GUI.Contracts,FastRepaymentForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\FastRepaymentForm.cs,lvContracts_SubItemClicked,The following statement contains a magic number: if (4 == e.SubItem && e.Item.Tag != null)              {                  lvContracts.StartEditing(tbTotal' e.Item' e.SubItem);              }
Magic Number,OpenCBS.GUI.Contracts,FastRepaymentForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\FastRepaymentForm.cs,lvContracts_SubItemClicked,The following statement contains a magic number: if (5 == e.SubItem && e.Item.Tag != null)              {                  lvContracts.StartEditing(tbTotal' e.Item' e.SubItem);              }
Magic Number,OpenCBS.GUI.Contracts,FastRepaymentForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\FastRepaymentForm.cs,lvContracts_SubItemClicked,The following statement contains a magic number: if (9 == e.SubItem && e.Item.Tag != null)              {                  lvContracts.StartEditing(cbItem' e.Item' e.SubItem);              }
Magic Number,OpenCBS.GUI.Contracts,FastRepaymentForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\FastRepaymentForm.cs,lvContracts_SubItemClicked,The following statement contains a magic number: if (10 == e.SubItem && e.Item.Tag != null)              {                  lvContracts.StartEditing(tbTotal' e.Item' e.SubItem);              }
Magic Number,OpenCBS.GUI.Contracts,FastRepaymentForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\FastRepaymentForm.cs,lvContracts_SubItemEndEditing,The following statement contains a magic number: if (4 == e.SubItem && e.Item.Tag != null)              {                  e.Item.SubItems[e.SubItem].Tag = (OCurrency)decimal.Parse(e.DisplayText);                  e.Item.SubItems[e.SubItem].Text = e.DisplayText;              }
Magic Number,OpenCBS.GUI.Contracts,FastRepaymentForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\FastRepaymentForm.cs,lvContracts_SubItemEndEditing,The following statement contains a magic number: if (5 == e.SubItem && e.Item.Tag != null)              {                  e.Item.SubItems[e.SubItem].Tag = (OCurrency)decimal.Parse(e.DisplayText);                  e.Item.SubItems[e.SubItem].Text = e.DisplayText;              }
Magic Number,OpenCBS.GUI.Contracts,FastRepaymentForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\FastRepaymentForm.cs,lvContracts_SubItemEndEditing,The following statement contains a magic number: if (4 == e.SubItem || 5 == e.SubItem || 9 == e.SubItem && e.Item.Tag != null)              {                  loan = e.Item.Tag as Loan;              }
Magic Number,OpenCBS.GUI.Contracts,FastRepaymentForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\FastRepaymentForm.cs,lvContracts_SubItemEndEditing,The following statement contains a magic number: if (4 == e.SubItem || 5 == e.SubItem || 9 == e.SubItem && e.Item.Tag != null)              {                  loan = e.Item.Tag as Loan;              }
Magic Number,OpenCBS.GUI.Contracts,FastRepaymentForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\FastRepaymentForm.cs,lvContracts_SubItemEndEditing,The following statement contains a magic number: if (4 == e.SubItem || 5 == e.SubItem || 9 == e.SubItem && e.Item.Tag != null)              {                  loan = e.Item.Tag as Loan;              }
Magic Number,OpenCBS.GUI.Contracts,FastRepaymentForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\FastRepaymentForm.cs,lvContracts_SubItemEndEditing,The following statement contains a magic number: if (loan != null && loan.Id != 0)              {                  Installment i = loan.GetFirstUnpaidInstallment();                  bool disableFees = false;                  var result = new KeyValuePair<Loan' RepaymentEvent>();                    OCurrency penalties = (OCurrency)e.Item.SubItems[4].Tag;                  OCurrency principal = result.Value == null ? i.PrincipalHasToPay : result.Value.Principal;                  OCurrency interest = result.Value == null ? i.InterestHasToPay : result.Value.InterestPrepayment;                  OCurrency total;                    if (penalties != loan.CalculateDuePenaltiesForInstallment(i.Number' TimeProvider.Today))                      disableFees = true;                    total = (OCurrency)e.Item.SubItems[5].Tag;                  if (e.SubItem == 5)                  {                      if (total < 0)                          throw new ArithmeticException("Total cannot be negative.");                      if (total > penalties)                      {                          OCurrency remainder = total - penalties;                          if (remainder > interest)                          {                              remainder -= interest;                              principal = remainder > principal ? principal : remainder;                              remainder -= principal;                              total = principal + interest + penalties + remainder;                          }                          else                          {                              interest = remainder;                              principal = 0;                          }                      }                      else                      {                          penalties = total;                          principal = 0;                          interest = 0;                      }                  }                    e.Item.SubItems[2].Text = principal.GetFormatedValue(loan.UseCents);                  e.Item.SubItems[2].Tag = principal;                  e.Item.SubItems[3].Text = interest.GetFormatedValue(loan.UseCents);                  e.Item.SubItems[3].Tag = interest;                  e.Item.SubItems[4].Text = penalties.GetFormatedValue(loan.UseCents);                  e.Item.SubItems[4].Tag = penalties;                  e.Item.SubItems[5].Text = total.GetFormatedValue(loan.UseCents);                  e.Item.SubItems[5].Tag = total;                    if (e.Item.SubItems.Count > 9)                      e.Item.SubItems[9].Tag = cbItem.SelectedItem;                    if (5 == e.SubItem)                      e.DisplayText = total.GetFormatedValue(loan.UseCents);                    if (9 == e.SubItem)                      e.DisplayText = cbItem.SelectedItem.ToString();                  if (10 == e.SubItem)                      e.Item.SubItems[10].Text = e.DisplayText;                                                      int paymentOption = cbItem.SelectedIndex + 1;                    KeyValuePair<Loan' RepaymentEvent> keyValuePair = CalculatePrincipalAndInterest(loan'                                                                                                  total.Value'                                                                                                   disableFees'                                                                                                   penalties.Value'                                                                                                   paymentOption);                  if (keyValuePair.Value != null)                  {                      e.Item.SubItems[2].Text =                          keyValuePair.Value.Principal.GetFormatedValue(loan.Product.UseCents);                      e.Item.SubItems[2].Tag = keyValuePair.Value.Principal;                      e.Item.SubItems[3].Text =                          keyValuePair.Value.Interests.GetFormatedValue(loan.Product.UseCents);                      e.Item.SubItems[3].Tag = keyValuePair.Value.Interests;                      e.Item.SubItems[4].Text =                          keyValuePair.Value.Penalties.GetFormatedValue(loan.Product.UseCents);                      e.Item.SubItems[4].Tag = keyValuePair.Value.Penalties;                  }              }
Magic Number,OpenCBS.GUI.Contracts,FastRepaymentForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\FastRepaymentForm.cs,lvContracts_SubItemEndEditing,The following statement contains a magic number: if (loan != null && loan.Id != 0)              {                  Installment i = loan.GetFirstUnpaidInstallment();                  bool disableFees = false;                  var result = new KeyValuePair<Loan' RepaymentEvent>();                    OCurrency penalties = (OCurrency)e.Item.SubItems[4].Tag;                  OCurrency principal = result.Value == null ? i.PrincipalHasToPay : result.Value.Principal;                  OCurrency interest = result.Value == null ? i.InterestHasToPay : result.Value.InterestPrepayment;                  OCurrency total;                    if (penalties != loan.CalculateDuePenaltiesForInstallment(i.Number' TimeProvider.Today))                      disableFees = true;                    total = (OCurrency)e.Item.SubItems[5].Tag;                  if (e.SubItem == 5)                  {                      if (total < 0)                          throw new ArithmeticException("Total cannot be negative.");                      if (total > penalties)                      {                          OCurrency remainder = total - penalties;                          if (remainder > interest)                          {                              remainder -= interest;                              principal = remainder > principal ? principal : remainder;                              remainder -= principal;                              total = principal + interest + penalties + remainder;                          }                          else                          {                              interest = remainder;                              principal = 0;                          }                      }                      else                      {                          penalties = total;                          principal = 0;                          interest = 0;                      }                  }                    e.Item.SubItems[2].Text = principal.GetFormatedValue(loan.UseCents);                  e.Item.SubItems[2].Tag = principal;                  e.Item.SubItems[3].Text = interest.GetFormatedValue(loan.UseCents);                  e.Item.SubItems[3].Tag = interest;                  e.Item.SubItems[4].Text = penalties.GetFormatedValue(loan.UseCents);                  e.Item.SubItems[4].Tag = penalties;                  e.Item.SubItems[5].Text = total.GetFormatedValue(loan.UseCents);                  e.Item.SubItems[5].Tag = total;                    if (e.Item.SubItems.Count > 9)                      e.Item.SubItems[9].Tag = cbItem.SelectedItem;                    if (5 == e.SubItem)                      e.DisplayText = total.GetFormatedValue(loan.UseCents);                    if (9 == e.SubItem)                      e.DisplayText = cbItem.SelectedItem.ToString();                  if (10 == e.SubItem)                      e.Item.SubItems[10].Text = e.DisplayText;                                                      int paymentOption = cbItem.SelectedIndex + 1;                    KeyValuePair<Loan' RepaymentEvent> keyValuePair = CalculatePrincipalAndInterest(loan'                                                                                                  total.Value'                                                                                                   disableFees'                                                                                                   penalties.Value'                                                                                                   paymentOption);                  if (keyValuePair.Value != null)                  {                      e.Item.SubItems[2].Text =                          keyValuePair.Value.Principal.GetFormatedValue(loan.Product.UseCents);                      e.Item.SubItems[2].Tag = keyValuePair.Value.Principal;                      e.Item.SubItems[3].Text =                          keyValuePair.Value.Interests.GetFormatedValue(loan.Product.UseCents);                      e.Item.SubItems[3].Tag = keyValuePair.Value.Interests;                      e.Item.SubItems[4].Text =                          keyValuePair.Value.Penalties.GetFormatedValue(loan.Product.UseCents);                      e.Item.SubItems[4].Tag = keyValuePair.Value.Penalties;                  }              }
Magic Number,OpenCBS.GUI.Contracts,FastRepaymentForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\FastRepaymentForm.cs,lvContracts_SubItemEndEditing,The following statement contains a magic number: if (loan != null && loan.Id != 0)              {                  Installment i = loan.GetFirstUnpaidInstallment();                  bool disableFees = false;                  var result = new KeyValuePair<Loan' RepaymentEvent>();                    OCurrency penalties = (OCurrency)e.Item.SubItems[4].Tag;                  OCurrency principal = result.Value == null ? i.PrincipalHasToPay : result.Value.Principal;                  OCurrency interest = result.Value == null ? i.InterestHasToPay : result.Value.InterestPrepayment;                  OCurrency total;                    if (penalties != loan.CalculateDuePenaltiesForInstallment(i.Number' TimeProvider.Today))                      disableFees = true;                    total = (OCurrency)e.Item.SubItems[5].Tag;                  if (e.SubItem == 5)                  {                      if (total < 0)                          throw new ArithmeticException("Total cannot be negative.");                      if (total > penalties)                      {                          OCurrency remainder = total - penalties;                          if (remainder > interest)                          {                              remainder -= interest;                              principal = remainder > principal ? principal : remainder;                              remainder -= principal;                              total = principal + interest + penalties + remainder;                          }                          else                          {                              interest = remainder;                              principal = 0;                          }                      }                      else                      {                          penalties = total;                          principal = 0;                          interest = 0;                      }                  }                    e.Item.SubItems[2].Text = principal.GetFormatedValue(loan.UseCents);                  e.Item.SubItems[2].Tag = principal;                  e.Item.SubItems[3].Text = interest.GetFormatedValue(loan.UseCents);                  e.Item.SubItems[3].Tag = interest;                  e.Item.SubItems[4].Text = penalties.GetFormatedValue(loan.UseCents);                  e.Item.SubItems[4].Tag = penalties;                  e.Item.SubItems[5].Text = total.GetFormatedValue(loan.UseCents);                  e.Item.SubItems[5].Tag = total;                    if (e.Item.SubItems.Count > 9)                      e.Item.SubItems[9].Tag = cbItem.SelectedItem;                    if (5 == e.SubItem)                      e.DisplayText = total.GetFormatedValue(loan.UseCents);                    if (9 == e.SubItem)                      e.DisplayText = cbItem.SelectedItem.ToString();                  if (10 == e.SubItem)                      e.Item.SubItems[10].Text = e.DisplayText;                                                      int paymentOption = cbItem.SelectedIndex + 1;                    KeyValuePair<Loan' RepaymentEvent> keyValuePair = CalculatePrincipalAndInterest(loan'                                                                                                  total.Value'                                                                                                   disableFees'                                                                                                   penalties.Value'                                                                                                   paymentOption);                  if (keyValuePair.Value != null)                  {                      e.Item.SubItems[2].Text =                          keyValuePair.Value.Principal.GetFormatedValue(loan.Product.UseCents);                      e.Item.SubItems[2].Tag = keyValuePair.Value.Principal;                      e.Item.SubItems[3].Text =                          keyValuePair.Value.Interests.GetFormatedValue(loan.Product.UseCents);                      e.Item.SubItems[3].Tag = keyValuePair.Value.Interests;                      e.Item.SubItems[4].Text =                          keyValuePair.Value.Penalties.GetFormatedValue(loan.Product.UseCents);                      e.Item.SubItems[4].Tag = keyValuePair.Value.Penalties;                  }              }
Magic Number,OpenCBS.GUI.Contracts,FastRepaymentForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\FastRepaymentForm.cs,lvContracts_SubItemEndEditing,The following statement contains a magic number: if (loan != null && loan.Id != 0)              {                  Installment i = loan.GetFirstUnpaidInstallment();                  bool disableFees = false;                  var result = new KeyValuePair<Loan' RepaymentEvent>();                    OCurrency penalties = (OCurrency)e.Item.SubItems[4].Tag;                  OCurrency principal = result.Value == null ? i.PrincipalHasToPay : result.Value.Principal;                  OCurrency interest = result.Value == null ? i.InterestHasToPay : result.Value.InterestPrepayment;                  OCurrency total;                    if (penalties != loan.CalculateDuePenaltiesForInstallment(i.Number' TimeProvider.Today))                      disableFees = true;                    total = (OCurrency)e.Item.SubItems[5].Tag;                  if (e.SubItem == 5)                  {                      if (total < 0)                          throw new ArithmeticException("Total cannot be negative.");                      if (total > penalties)                      {                          OCurrency remainder = total - penalties;                          if (remainder > interest)                          {                              remainder -= interest;                              principal = remainder > principal ? principal : remainder;                              remainder -= principal;                              total = principal + interest + penalties + remainder;                          }                          else                          {                              interest = remainder;                              principal = 0;                          }                      }                      else                      {                          penalties = total;                          principal = 0;                          interest = 0;                      }                  }                    e.Item.SubItems[2].Text = principal.GetFormatedValue(loan.UseCents);                  e.Item.SubItems[2].Tag = principal;                  e.Item.SubItems[3].Text = interest.GetFormatedValue(loan.UseCents);                  e.Item.SubItems[3].Tag = interest;                  e.Item.SubItems[4].Text = penalties.GetFormatedValue(loan.UseCents);                  e.Item.SubItems[4].Tag = penalties;                  e.Item.SubItems[5].Text = total.GetFormatedValue(loan.UseCents);                  e.Item.SubItems[5].Tag = total;                    if (e.Item.SubItems.Count > 9)                      e.Item.SubItems[9].Tag = cbItem.SelectedItem;                    if (5 == e.SubItem)                      e.DisplayText = total.GetFormatedValue(loan.UseCents);                    if (9 == e.SubItem)                      e.DisplayText = cbItem.SelectedItem.ToString();                  if (10 == e.SubItem)                      e.Item.SubItems[10].Text = e.DisplayText;                                                      int paymentOption = cbItem.SelectedIndex + 1;                    KeyValuePair<Loan' RepaymentEvent> keyValuePair = CalculatePrincipalAndInterest(loan'                                                                                                  total.Value'                                                                                                   disableFees'                                                                                                   penalties.Value'                                                                                                   paymentOption);                  if (keyValuePair.Value != null)                  {                      e.Item.SubItems[2].Text =                          keyValuePair.Value.Principal.GetFormatedValue(loan.Product.UseCents);                      e.Item.SubItems[2].Tag = keyValuePair.Value.Principal;                      e.Item.SubItems[3].Text =                          keyValuePair.Value.Interests.GetFormatedValue(loan.Product.UseCents);                      e.Item.SubItems[3].Tag = keyValuePair.Value.Interests;                      e.Item.SubItems[4].Text =                          keyValuePair.Value.Penalties.GetFormatedValue(loan.Product.UseCents);                      e.Item.SubItems[4].Tag = keyValuePair.Value.Penalties;                  }              }
Magic Number,OpenCBS.GUI.Contracts,FastRepaymentForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\FastRepaymentForm.cs,lvContracts_SubItemEndEditing,The following statement contains a magic number: if (loan != null && loan.Id != 0)              {                  Installment i = loan.GetFirstUnpaidInstallment();                  bool disableFees = false;                  var result = new KeyValuePair<Loan' RepaymentEvent>();                    OCurrency penalties = (OCurrency)e.Item.SubItems[4].Tag;                  OCurrency principal = result.Value == null ? i.PrincipalHasToPay : result.Value.Principal;                  OCurrency interest = result.Value == null ? i.InterestHasToPay : result.Value.InterestPrepayment;                  OCurrency total;                    if (penalties != loan.CalculateDuePenaltiesForInstallment(i.Number' TimeProvider.Today))                      disableFees = true;                    total = (OCurrency)e.Item.SubItems[5].Tag;                  if (e.SubItem == 5)                  {                      if (total < 0)                          throw new ArithmeticException("Total cannot be negative.");                      if (total > penalties)                      {                          OCurrency remainder = total - penalties;                          if (remainder > interest)                          {                              remainder -= interest;                              principal = remainder > principal ? principal : remainder;                              remainder -= principal;                              total = principal + interest + penalties + remainder;                          }                          else                          {                              interest = remainder;                              principal = 0;                          }                      }                      else                      {                          penalties = total;                          principal = 0;                          interest = 0;                      }                  }                    e.Item.SubItems[2].Text = principal.GetFormatedValue(loan.UseCents);                  e.Item.SubItems[2].Tag = principal;                  e.Item.SubItems[3].Text = interest.GetFormatedValue(loan.UseCents);                  e.Item.SubItems[3].Tag = interest;                  e.Item.SubItems[4].Text = penalties.GetFormatedValue(loan.UseCents);                  e.Item.SubItems[4].Tag = penalties;                  e.Item.SubItems[5].Text = total.GetFormatedValue(loan.UseCents);                  e.Item.SubItems[5].Tag = total;                    if (e.Item.SubItems.Count > 9)                      e.Item.SubItems[9].Tag = cbItem.SelectedItem;                    if (5 == e.SubItem)                      e.DisplayText = total.GetFormatedValue(loan.UseCents);                    if (9 == e.SubItem)                      e.DisplayText = cbItem.SelectedItem.ToString();                  if (10 == e.SubItem)                      e.Item.SubItems[10].Text = e.DisplayText;                                                      int paymentOption = cbItem.SelectedIndex + 1;                    KeyValuePair<Loan' RepaymentEvent> keyValuePair = CalculatePrincipalAndInterest(loan'                                                                                                  total.Value'                                                                                                   disableFees'                                                                                                   penalties.Value'                                                                                                   paymentOption);                  if (keyValuePair.Value != null)                  {                      e.Item.SubItems[2].Text =                          keyValuePair.Value.Principal.GetFormatedValue(loan.Product.UseCents);                      e.Item.SubItems[2].Tag = keyValuePair.Value.Principal;                      e.Item.SubItems[3].Text =                          keyValuePair.Value.Interests.GetFormatedValue(loan.Product.UseCents);                      e.Item.SubItems[3].Tag = keyValuePair.Value.Interests;                      e.Item.SubItems[4].Text =                          keyValuePair.Value.Penalties.GetFormatedValue(loan.Product.UseCents);                      e.Item.SubItems[4].Tag = keyValuePair.Value.Penalties;                  }              }
Magic Number,OpenCBS.GUI.Contracts,FastRepaymentForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\FastRepaymentForm.cs,lvContracts_SubItemEndEditing,The following statement contains a magic number: if (loan != null && loan.Id != 0)              {                  Installment i = loan.GetFirstUnpaidInstallment();                  bool disableFees = false;                  var result = new KeyValuePair<Loan' RepaymentEvent>();                    OCurrency penalties = (OCurrency)e.Item.SubItems[4].Tag;                  OCurrency principal = result.Value == null ? i.PrincipalHasToPay : result.Value.Principal;                  OCurrency interest = result.Value == null ? i.InterestHasToPay : result.Value.InterestPrepayment;                  OCurrency total;                    if (penalties != loan.CalculateDuePenaltiesForInstallment(i.Number' TimeProvider.Today))                      disableFees = true;                    total = (OCurrency)e.Item.SubItems[5].Tag;                  if (e.SubItem == 5)                  {                      if (total < 0)                          throw new ArithmeticException("Total cannot be negative.");                      if (total > penalties)                      {                          OCurrency remainder = total - penalties;                          if (remainder > interest)                          {                              remainder -= interest;                              principal = remainder > principal ? principal : remainder;                              remainder -= principal;                              total = principal + interest + penalties + remainder;                          }                          else                          {                              interest = remainder;                              principal = 0;                          }                      }                      else                      {                          penalties = total;                          principal = 0;                          interest = 0;                      }                  }                    e.Item.SubItems[2].Text = principal.GetFormatedValue(loan.UseCents);                  e.Item.SubItems[2].Tag = principal;                  e.Item.SubItems[3].Text = interest.GetFormatedValue(loan.UseCents);                  e.Item.SubItems[3].Tag = interest;                  e.Item.SubItems[4].Text = penalties.GetFormatedValue(loan.UseCents);                  e.Item.SubItems[4].Tag = penalties;                  e.Item.SubItems[5].Text = total.GetFormatedValue(loan.UseCents);                  e.Item.SubItems[5].Tag = total;                    if (e.Item.SubItems.Count > 9)                      e.Item.SubItems[9].Tag = cbItem.SelectedItem;                    if (5 == e.SubItem)                      e.DisplayText = total.GetFormatedValue(loan.UseCents);                    if (9 == e.SubItem)                      e.DisplayText = cbItem.SelectedItem.ToString();                  if (10 == e.SubItem)                      e.Item.SubItems[10].Text = e.DisplayText;                                                      int paymentOption = cbItem.SelectedIndex + 1;                    KeyValuePair<Loan' RepaymentEvent> keyValuePair = CalculatePrincipalAndInterest(loan'                                                                                                  total.Value'                                                                                                   disableFees'                                                                                                   penalties.Value'                                                                                                   paymentOption);                  if (keyValuePair.Value != null)                  {                      e.Item.SubItems[2].Text =                          keyValuePair.Value.Principal.GetFormatedValue(loan.Product.UseCents);                      e.Item.SubItems[2].Tag = keyValuePair.Value.Principal;                      e.Item.SubItems[3].Text =                          keyValuePair.Value.Interests.GetFormatedValue(loan.Product.UseCents);                      e.Item.SubItems[3].Tag = keyValuePair.Value.Interests;                      e.Item.SubItems[4].Text =                          keyValuePair.Value.Penalties.GetFormatedValue(loan.Product.UseCents);                      e.Item.SubItems[4].Tag = keyValuePair.Value.Penalties;                  }              }
Magic Number,OpenCBS.GUI.Contracts,FastRepaymentForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\FastRepaymentForm.cs,lvContracts_SubItemEndEditing,The following statement contains a magic number: if (loan != null && loan.Id != 0)              {                  Installment i = loan.GetFirstUnpaidInstallment();                  bool disableFees = false;                  var result = new KeyValuePair<Loan' RepaymentEvent>();                    OCurrency penalties = (OCurrency)e.Item.SubItems[4].Tag;                  OCurrency principal = result.Value == null ? i.PrincipalHasToPay : result.Value.Principal;                  OCurrency interest = result.Value == null ? i.InterestHasToPay : result.Value.InterestPrepayment;                  OCurrency total;                    if (penalties != loan.CalculateDuePenaltiesForInstallment(i.Number' TimeProvider.Today))                      disableFees = true;                    total = (OCurrency)e.Item.SubItems[5].Tag;                  if (e.SubItem == 5)                  {                      if (total < 0)                          throw new ArithmeticException("Total cannot be negative.");                      if (total > penalties)                      {                          OCurrency remainder = total - penalties;                          if (remainder > interest)                          {                              remainder -= interest;                              principal = remainder > principal ? principal : remainder;                              remainder -= principal;                              total = principal + interest + penalties + remainder;                          }                          else                          {                              interest = remainder;                              principal = 0;                          }                      }                      else                      {                          penalties = total;                          principal = 0;                          interest = 0;                      }                  }                    e.Item.SubItems[2].Text = principal.GetFormatedValue(loan.UseCents);                  e.Item.SubItems[2].Tag = principal;                  e.Item.SubItems[3].Text = interest.GetFormatedValue(loan.UseCents);                  e.Item.SubItems[3].Tag = interest;                  e.Item.SubItems[4].Text = penalties.GetFormatedValue(loan.UseCents);                  e.Item.SubItems[4].Tag = penalties;                  e.Item.SubItems[5].Text = total.GetFormatedValue(loan.UseCents);                  e.Item.SubItems[5].Tag = total;                    if (e.Item.SubItems.Count > 9)                      e.Item.SubItems[9].Tag = cbItem.SelectedItem;                    if (5 == e.SubItem)                      e.DisplayText = total.GetFormatedValue(loan.UseCents);                    if (9 == e.SubItem)                      e.DisplayText = cbItem.SelectedItem.ToString();                  if (10 == e.SubItem)                      e.Item.SubItems[10].Text = e.DisplayText;                                                      int paymentOption = cbItem.SelectedIndex + 1;                    KeyValuePair<Loan' RepaymentEvent> keyValuePair = CalculatePrincipalAndInterest(loan'                                                                                                  total.Value'                                                                                                   disableFees'                                                                                                   penalties.Value'                                                                                                   paymentOption);                  if (keyValuePair.Value != null)                  {                      e.Item.SubItems[2].Text =                          keyValuePair.Value.Principal.GetFormatedValue(loan.Product.UseCents);                      e.Item.SubItems[2].Tag = keyValuePair.Value.Principal;                      e.Item.SubItems[3].Text =                          keyValuePair.Value.Interests.GetFormatedValue(loan.Product.UseCents);                      e.Item.SubItems[3].Tag = keyValuePair.Value.Interests;                      e.Item.SubItems[4].Text =                          keyValuePair.Value.Penalties.GetFormatedValue(loan.Product.UseCents);                      e.Item.SubItems[4].Tag = keyValuePair.Value.Penalties;                  }              }
Magic Number,OpenCBS.GUI.Contracts,FastRepaymentForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\FastRepaymentForm.cs,lvContracts_SubItemEndEditing,The following statement contains a magic number: if (loan != null && loan.Id != 0)              {                  Installment i = loan.GetFirstUnpaidInstallment();                  bool disableFees = false;                  var result = new KeyValuePair<Loan' RepaymentEvent>();                    OCurrency penalties = (OCurrency)e.Item.SubItems[4].Tag;                  OCurrency principal = result.Value == null ? i.PrincipalHasToPay : result.Value.Principal;                  OCurrency interest = result.Value == null ? i.InterestHasToPay : result.Value.InterestPrepayment;                  OCurrency total;                    if (penalties != loan.CalculateDuePenaltiesForInstallment(i.Number' TimeProvider.Today))                      disableFees = true;                    total = (OCurrency)e.Item.SubItems[5].Tag;                  if (e.SubItem == 5)                  {                      if (total < 0)                          throw new ArithmeticException("Total cannot be negative.");                      if (total > penalties)                      {                          OCurrency remainder = total - penalties;                          if (remainder > interest)                          {                              remainder -= interest;                              principal = remainder > principal ? principal : remainder;                              remainder -= principal;                              total = principal + interest + penalties + remainder;                          }                          else                          {                              interest = remainder;                              principal = 0;                          }                      }                      else                      {                          penalties = total;                          principal = 0;                          interest = 0;                      }                  }                    e.Item.SubItems[2].Text = principal.GetFormatedValue(loan.UseCents);                  e.Item.SubItems[2].Tag = principal;                  e.Item.SubItems[3].Text = interest.GetFormatedValue(loan.UseCents);                  e.Item.SubItems[3].Tag = interest;                  e.Item.SubItems[4].Text = penalties.GetFormatedValue(loan.UseCents);                  e.Item.SubItems[4].Tag = penalties;                  e.Item.SubItems[5].Text = total.GetFormatedValue(loan.UseCents);                  e.Item.SubItems[5].Tag = total;                    if (e.Item.SubItems.Count > 9)                      e.Item.SubItems[9].Tag = cbItem.SelectedItem;                    if (5 == e.SubItem)                      e.DisplayText = total.GetFormatedValue(loan.UseCents);                    if (9 == e.SubItem)                      e.DisplayText = cbItem.SelectedItem.ToString();                  if (10 == e.SubItem)                      e.Item.SubItems[10].Text = e.DisplayText;                                                      int paymentOption = cbItem.SelectedIndex + 1;                    KeyValuePair<Loan' RepaymentEvent> keyValuePair = CalculatePrincipalAndInterest(loan'                                                                                                  total.Value'                                                                                                   disableFees'                                                                                                   penalties.Value'                                                                                                   paymentOption);                  if (keyValuePair.Value != null)                  {                      e.Item.SubItems[2].Text =                          keyValuePair.Value.Principal.GetFormatedValue(loan.Product.UseCents);                      e.Item.SubItems[2].Tag = keyValuePair.Value.Principal;                      e.Item.SubItems[3].Text =                          keyValuePair.Value.Interests.GetFormatedValue(loan.Product.UseCents);                      e.Item.SubItems[3].Tag = keyValuePair.Value.Interests;                      e.Item.SubItems[4].Text =                          keyValuePair.Value.Penalties.GetFormatedValue(loan.Product.UseCents);                      e.Item.SubItems[4].Tag = keyValuePair.Value.Penalties;                  }              }
Magic Number,OpenCBS.GUI.Contracts,FastRepaymentForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\FastRepaymentForm.cs,lvContracts_SubItemEndEditing,The following statement contains a magic number: if (loan != null && loan.Id != 0)              {                  Installment i = loan.GetFirstUnpaidInstallment();                  bool disableFees = false;                  var result = new KeyValuePair<Loan' RepaymentEvent>();                    OCurrency penalties = (OCurrency)e.Item.SubItems[4].Tag;                  OCurrency principal = result.Value == null ? i.PrincipalHasToPay : result.Value.Principal;                  OCurrency interest = result.Value == null ? i.InterestHasToPay : result.Value.InterestPrepayment;                  OCurrency total;                    if (penalties != loan.CalculateDuePenaltiesForInstallment(i.Number' TimeProvider.Today))                      disableFees = true;                    total = (OCurrency)e.Item.SubItems[5].Tag;                  if (e.SubItem == 5)                  {                      if (total < 0)                          throw new ArithmeticException("Total cannot be negative.");                      if (total > penalties)                      {                          OCurrency remainder = total - penalties;                          if (remainder > interest)                          {                              remainder -= interest;                              principal = remainder > principal ? principal : remainder;                              remainder -= principal;                              total = principal + interest + penalties + remainder;                          }                          else                          {                              interest = remainder;                              principal = 0;                          }                      }                      else                      {                          penalties = total;                          principal = 0;                          interest = 0;                      }                  }                    e.Item.SubItems[2].Text = principal.GetFormatedValue(loan.UseCents);                  e.Item.SubItems[2].Tag = principal;                  e.Item.SubItems[3].Text = interest.GetFormatedValue(loan.UseCents);                  e.Item.SubItems[3].Tag = interest;                  e.Item.SubItems[4].Text = penalties.GetFormatedValue(loan.UseCents);                  e.Item.SubItems[4].Tag = penalties;                  e.Item.SubItems[5].Text = total.GetFormatedValue(loan.UseCents);                  e.Item.SubItems[5].Tag = total;                    if (e.Item.SubItems.Count > 9)                      e.Item.SubItems[9].Tag = cbItem.SelectedItem;                    if (5 == e.SubItem)                      e.DisplayText = total.GetFormatedValue(loan.UseCents);                    if (9 == e.SubItem)                      e.DisplayText = cbItem.SelectedItem.ToString();                  if (10 == e.SubItem)                      e.Item.SubItems[10].Text = e.DisplayText;                                                      int paymentOption = cbItem.SelectedIndex + 1;                    KeyValuePair<Loan' RepaymentEvent> keyValuePair = CalculatePrincipalAndInterest(loan'                                                                                                  total.Value'                                                                                                   disableFees'                                                                                                   penalties.Value'                                                                                                   paymentOption);                  if (keyValuePair.Value != null)                  {                      e.Item.SubItems[2].Text =                          keyValuePair.Value.Principal.GetFormatedValue(loan.Product.UseCents);                      e.Item.SubItems[2].Tag = keyValuePair.Value.Principal;                      e.Item.SubItems[3].Text =                          keyValuePair.Value.Interests.GetFormatedValue(loan.Product.UseCents);                      e.Item.SubItems[3].Tag = keyValuePair.Value.Interests;                      e.Item.SubItems[4].Text =                          keyValuePair.Value.Penalties.GetFormatedValue(loan.Product.UseCents);                      e.Item.SubItems[4].Tag = keyValuePair.Value.Penalties;                  }              }
Magic Number,OpenCBS.GUI.Contracts,FastRepaymentForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\FastRepaymentForm.cs,lvContracts_SubItemEndEditing,The following statement contains a magic number: if (loan != null && loan.Id != 0)              {                  Installment i = loan.GetFirstUnpaidInstallment();                  bool disableFees = false;                  var result = new KeyValuePair<Loan' RepaymentEvent>();                    OCurrency penalties = (OCurrency)e.Item.SubItems[4].Tag;                  OCurrency principal = result.Value == null ? i.PrincipalHasToPay : result.Value.Principal;                  OCurrency interest = result.Value == null ? i.InterestHasToPay : result.Value.InterestPrepayment;                  OCurrency total;                    if (penalties != loan.CalculateDuePenaltiesForInstallment(i.Number' TimeProvider.Today))                      disableFees = true;                    total = (OCurrency)e.Item.SubItems[5].Tag;                  if (e.SubItem == 5)                  {                      if (total < 0)                          throw new ArithmeticException("Total cannot be negative.");                      if (total > penalties)                      {                          OCurrency remainder = total - penalties;                          if (remainder > interest)                          {                              remainder -= interest;                              principal = remainder > principal ? principal : remainder;                              remainder -= principal;                              total = principal + interest + penalties + remainder;                          }                          else                          {                              interest = remainder;                              principal = 0;                          }                      }                      else                      {                          penalties = total;                          principal = 0;                          interest = 0;                      }                  }                    e.Item.SubItems[2].Text = principal.GetFormatedValue(loan.UseCents);                  e.Item.SubItems[2].Tag = principal;                  e.Item.SubItems[3].Text = interest.GetFormatedValue(loan.UseCents);                  e.Item.SubItems[3].Tag = interest;                  e.Item.SubItems[4].Text = penalties.GetFormatedValue(loan.UseCents);                  e.Item.SubItems[4].Tag = penalties;                  e.Item.SubItems[5].Text = total.GetFormatedValue(loan.UseCents);                  e.Item.SubItems[5].Tag = total;                    if (e.Item.SubItems.Count > 9)                      e.Item.SubItems[9].Tag = cbItem.SelectedItem;                    if (5 == e.SubItem)                      e.DisplayText = total.GetFormatedValue(loan.UseCents);                    if (9 == e.SubItem)                      e.DisplayText = cbItem.SelectedItem.ToString();                  if (10 == e.SubItem)                      e.Item.SubItems[10].Text = e.DisplayText;                                                      int paymentOption = cbItem.SelectedIndex + 1;                    KeyValuePair<Loan' RepaymentEvent> keyValuePair = CalculatePrincipalAndInterest(loan'                                                                                                  total.Value'                                                                                                   disableFees'                                                                                                   penalties.Value'                                                                                                   paymentOption);                  if (keyValuePair.Value != null)                  {                      e.Item.SubItems[2].Text =                          keyValuePair.Value.Principal.GetFormatedValue(loan.Product.UseCents);                      e.Item.SubItems[2].Tag = keyValuePair.Value.Principal;                      e.Item.SubItems[3].Text =                          keyValuePair.Value.Interests.GetFormatedValue(loan.Product.UseCents);                      e.Item.SubItems[3].Tag = keyValuePair.Value.Interests;                      e.Item.SubItems[4].Text =                          keyValuePair.Value.Penalties.GetFormatedValue(loan.Product.UseCents);                      e.Item.SubItems[4].Tag = keyValuePair.Value.Penalties;                  }              }
Magic Number,OpenCBS.GUI.Contracts,FastRepaymentForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\FastRepaymentForm.cs,lvContracts_SubItemEndEditing,The following statement contains a magic number: if (loan != null && loan.Id != 0)              {                  Installment i = loan.GetFirstUnpaidInstallment();                  bool disableFees = false;                  var result = new KeyValuePair<Loan' RepaymentEvent>();                    OCurrency penalties = (OCurrency)e.Item.SubItems[4].Tag;                  OCurrency principal = result.Value == null ? i.PrincipalHasToPay : result.Value.Principal;                  OCurrency interest = result.Value == null ? i.InterestHasToPay : result.Value.InterestPrepayment;                  OCurrency total;                    if (penalties != loan.CalculateDuePenaltiesForInstallment(i.Number' TimeProvider.Today))                      disableFees = true;                    total = (OCurrency)e.Item.SubItems[5].Tag;                  if (e.SubItem == 5)                  {                      if (total < 0)                          throw new ArithmeticException("Total cannot be negative.");                      if (total > penalties)                      {                          OCurrency remainder = total - penalties;                          if (remainder > interest)                          {                              remainder -= interest;                              principal = remainder > principal ? principal : remainder;                              remainder -= principal;                              total = principal + interest + penalties + remainder;                          }                          else                          {                              interest = remainder;                              principal = 0;                          }                      }                      else                      {                          penalties = total;                          principal = 0;                          interest = 0;                      }                  }                    e.Item.SubItems[2].Text = principal.GetFormatedValue(loan.UseCents);                  e.Item.SubItems[2].Tag = principal;                  e.Item.SubItems[3].Text = interest.GetFormatedValue(loan.UseCents);                  e.Item.SubItems[3].Tag = interest;                  e.Item.SubItems[4].Text = penalties.GetFormatedValue(loan.UseCents);                  e.Item.SubItems[4].Tag = penalties;                  e.Item.SubItems[5].Text = total.GetFormatedValue(loan.UseCents);                  e.Item.SubItems[5].Tag = total;                    if (e.Item.SubItems.Count > 9)                      e.Item.SubItems[9].Tag = cbItem.SelectedItem;                    if (5 == e.SubItem)                      e.DisplayText = total.GetFormatedValue(loan.UseCents);                    if (9 == e.SubItem)                      e.DisplayText = cbItem.SelectedItem.ToString();                  if (10 == e.SubItem)                      e.Item.SubItems[10].Text = e.DisplayText;                                                      int paymentOption = cbItem.SelectedIndex + 1;                    KeyValuePair<Loan' RepaymentEvent> keyValuePair = CalculatePrincipalAndInterest(loan'                                                                                                  total.Value'                                                                                                   disableFees'                                                                                                   penalties.Value'                                                                                                   paymentOption);                  if (keyValuePair.Value != null)                  {                      e.Item.SubItems[2].Text =                          keyValuePair.Value.Principal.GetFormatedValue(loan.Product.UseCents);                      e.Item.SubItems[2].Tag = keyValuePair.Value.Principal;                      e.Item.SubItems[3].Text =                          keyValuePair.Value.Interests.GetFormatedValue(loan.Product.UseCents);                      e.Item.SubItems[3].Tag = keyValuePair.Value.Interests;                      e.Item.SubItems[4].Text =                          keyValuePair.Value.Penalties.GetFormatedValue(loan.Product.UseCents);                      e.Item.SubItems[4].Tag = keyValuePair.Value.Penalties;                  }              }
Magic Number,OpenCBS.GUI.Contracts,FastRepaymentForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\FastRepaymentForm.cs,lvContracts_SubItemEndEditing,The following statement contains a magic number: if (loan != null && loan.Id != 0)              {                  Installment i = loan.GetFirstUnpaidInstallment();                  bool disableFees = false;                  var result = new KeyValuePair<Loan' RepaymentEvent>();                    OCurrency penalties = (OCurrency)e.Item.SubItems[4].Tag;                  OCurrency principal = result.Value == null ? i.PrincipalHasToPay : result.Value.Principal;                  OCurrency interest = result.Value == null ? i.InterestHasToPay : result.Value.InterestPrepayment;                  OCurrency total;                    if (penalties != loan.CalculateDuePenaltiesForInstallment(i.Number' TimeProvider.Today))                      disableFees = true;                    total = (OCurrency)e.Item.SubItems[5].Tag;                  if (e.SubItem == 5)                  {                      if (total < 0)                          throw new ArithmeticException("Total cannot be negative.");                      if (total > penalties)                      {                          OCurrency remainder = total - penalties;                          if (remainder > interest)                          {                              remainder -= interest;                              principal = remainder > principal ? principal : remainder;                              remainder -= principal;                              total = principal + interest + penalties + remainder;                          }                          else                          {                              interest = remainder;                              principal = 0;                          }                      }                      else                      {                          penalties = total;                          principal = 0;                          interest = 0;                      }                  }                    e.Item.SubItems[2].Text = principal.GetFormatedValue(loan.UseCents);                  e.Item.SubItems[2].Tag = principal;                  e.Item.SubItems[3].Text = interest.GetFormatedValue(loan.UseCents);                  e.Item.SubItems[3].Tag = interest;                  e.Item.SubItems[4].Text = penalties.GetFormatedValue(loan.UseCents);                  e.Item.SubItems[4].Tag = penalties;                  e.Item.SubItems[5].Text = total.GetFormatedValue(loan.UseCents);                  e.Item.SubItems[5].Tag = total;                    if (e.Item.SubItems.Count > 9)                      e.Item.SubItems[9].Tag = cbItem.SelectedItem;                    if (5 == e.SubItem)                      e.DisplayText = total.GetFormatedValue(loan.UseCents);                    if (9 == e.SubItem)                      e.DisplayText = cbItem.SelectedItem.ToString();                  if (10 == e.SubItem)                      e.Item.SubItems[10].Text = e.DisplayText;                                                      int paymentOption = cbItem.SelectedIndex + 1;                    KeyValuePair<Loan' RepaymentEvent> keyValuePair = CalculatePrincipalAndInterest(loan'                                                                                                  total.Value'                                                                                                   disableFees'                                                                                                   penalties.Value'                                                                                                   paymentOption);                  if (keyValuePair.Value != null)                  {                      e.Item.SubItems[2].Text =                          keyValuePair.Value.Principal.GetFormatedValue(loan.Product.UseCents);                      e.Item.SubItems[2].Tag = keyValuePair.Value.Principal;                      e.Item.SubItems[3].Text =                          keyValuePair.Value.Interests.GetFormatedValue(loan.Product.UseCents);                      e.Item.SubItems[3].Tag = keyValuePair.Value.Interests;                      e.Item.SubItems[4].Text =                          keyValuePair.Value.Penalties.GetFormatedValue(loan.Product.UseCents);                      e.Item.SubItems[4].Tag = keyValuePair.Value.Penalties;                  }              }
Magic Number,OpenCBS.GUI.Contracts,FastRepaymentForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\FastRepaymentForm.cs,lvContracts_SubItemEndEditing,The following statement contains a magic number: if (loan != null && loan.Id != 0)              {                  Installment i = loan.GetFirstUnpaidInstallment();                  bool disableFees = false;                  var result = new KeyValuePair<Loan' RepaymentEvent>();                    OCurrency penalties = (OCurrency)e.Item.SubItems[4].Tag;                  OCurrency principal = result.Value == null ? i.PrincipalHasToPay : result.Value.Principal;                  OCurrency interest = result.Value == null ? i.InterestHasToPay : result.Value.InterestPrepayment;                  OCurrency total;                    if (penalties != loan.CalculateDuePenaltiesForInstallment(i.Number' TimeProvider.Today))                      disableFees = true;                    total = (OCurrency)e.Item.SubItems[5].Tag;                  if (e.SubItem == 5)                  {                      if (total < 0)                          throw new ArithmeticException("Total cannot be negative.");                      if (total > penalties)                      {                          OCurrency remainder = total - penalties;                          if (remainder > interest)                          {                              remainder -= interest;                              principal = remainder > principal ? principal : remainder;                              remainder -= principal;                              total = principal + interest + penalties + remainder;                          }                          else                          {                              interest = remainder;                              principal = 0;                          }                      }                      else                      {                          penalties = total;                          principal = 0;                          interest = 0;                      }                  }                    e.Item.SubItems[2].Text = principal.GetFormatedValue(loan.UseCents);                  e.Item.SubItems[2].Tag = principal;                  e.Item.SubItems[3].Text = interest.GetFormatedValue(loan.UseCents);                  e.Item.SubItems[3].Tag = interest;                  e.Item.SubItems[4].Text = penalties.GetFormatedValue(loan.UseCents);                  e.Item.SubItems[4].Tag = penalties;                  e.Item.SubItems[5].Text = total.GetFormatedValue(loan.UseCents);                  e.Item.SubItems[5].Tag = total;                    if (e.Item.SubItems.Count > 9)                      e.Item.SubItems[9].Tag = cbItem.SelectedItem;                    if (5 == e.SubItem)                      e.DisplayText = total.GetFormatedValue(loan.UseCents);                    if (9 == e.SubItem)                      e.DisplayText = cbItem.SelectedItem.ToString();                  if (10 == e.SubItem)                      e.Item.SubItems[10].Text = e.DisplayText;                                                      int paymentOption = cbItem.SelectedIndex + 1;                    KeyValuePair<Loan' RepaymentEvent> keyValuePair = CalculatePrincipalAndInterest(loan'                                                                                                  total.Value'                                                                                                   disableFees'                                                                                                   penalties.Value'                                                                                                   paymentOption);                  if (keyValuePair.Value != null)                  {                      e.Item.SubItems[2].Text =                          keyValuePair.Value.Principal.GetFormatedValue(loan.Product.UseCents);                      e.Item.SubItems[2].Tag = keyValuePair.Value.Principal;                      e.Item.SubItems[3].Text =                          keyValuePair.Value.Interests.GetFormatedValue(loan.Product.UseCents);                      e.Item.SubItems[3].Tag = keyValuePair.Value.Interests;                      e.Item.SubItems[4].Text =                          keyValuePair.Value.Penalties.GetFormatedValue(loan.Product.UseCents);                      e.Item.SubItems[4].Tag = keyValuePair.Value.Penalties;                  }              }
Magic Number,OpenCBS.GUI.Contracts,FastRepaymentForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\FastRepaymentForm.cs,lvContracts_SubItemEndEditing,The following statement contains a magic number: if (loan != null && loan.Id != 0)              {                  Installment i = loan.GetFirstUnpaidInstallment();                  bool disableFees = false;                  var result = new KeyValuePair<Loan' RepaymentEvent>();                    OCurrency penalties = (OCurrency)e.Item.SubItems[4].Tag;                  OCurrency principal = result.Value == null ? i.PrincipalHasToPay : result.Value.Principal;                  OCurrency interest = result.Value == null ? i.InterestHasToPay : result.Value.InterestPrepayment;                  OCurrency total;                    if (penalties != loan.CalculateDuePenaltiesForInstallment(i.Number' TimeProvider.Today))                      disableFees = true;                    total = (OCurrency)e.Item.SubItems[5].Tag;                  if (e.SubItem == 5)                  {                      if (total < 0)                          throw new ArithmeticException("Total cannot be negative.");                      if (total > penalties)                      {                          OCurrency remainder = total - penalties;                          if (remainder > interest)                          {                              remainder -= interest;                              principal = remainder > principal ? principal : remainder;                              remainder -= principal;                              total = principal + interest + penalties + remainder;                          }                          else                          {                              interest = remainder;                              principal = 0;                          }                      }                      else                      {                          penalties = total;                          principal = 0;                          interest = 0;                      }                  }                    e.Item.SubItems[2].Text = principal.GetFormatedValue(loan.UseCents);                  e.Item.SubItems[2].Tag = principal;                  e.Item.SubItems[3].Text = interest.GetFormatedValue(loan.UseCents);                  e.Item.SubItems[3].Tag = interest;                  e.Item.SubItems[4].Text = penalties.GetFormatedValue(loan.UseCents);                  e.Item.SubItems[4].Tag = penalties;                  e.Item.SubItems[5].Text = total.GetFormatedValue(loan.UseCents);                  e.Item.SubItems[5].Tag = total;                    if (e.Item.SubItems.Count > 9)                      e.Item.SubItems[9].Tag = cbItem.SelectedItem;                    if (5 == e.SubItem)                      e.DisplayText = total.GetFormatedValue(loan.UseCents);                    if (9 == e.SubItem)                      e.DisplayText = cbItem.SelectedItem.ToString();                  if (10 == e.SubItem)                      e.Item.SubItems[10].Text = e.DisplayText;                                                      int paymentOption = cbItem.SelectedIndex + 1;                    KeyValuePair<Loan' RepaymentEvent> keyValuePair = CalculatePrincipalAndInterest(loan'                                                                                                  total.Value'                                                                                                   disableFees'                                                                                                   penalties.Value'                                                                                                   paymentOption);                  if (keyValuePair.Value != null)                  {                      e.Item.SubItems[2].Text =                          keyValuePair.Value.Principal.GetFormatedValue(loan.Product.UseCents);                      e.Item.SubItems[2].Tag = keyValuePair.Value.Principal;                      e.Item.SubItems[3].Text =                          keyValuePair.Value.Interests.GetFormatedValue(loan.Product.UseCents);                      e.Item.SubItems[3].Tag = keyValuePair.Value.Interests;                      e.Item.SubItems[4].Text =                          keyValuePair.Value.Penalties.GetFormatedValue(loan.Product.UseCents);                      e.Item.SubItems[4].Tag = keyValuePair.Value.Penalties;                  }              }
Magic Number,OpenCBS.GUI.Contracts,FastRepaymentForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\FastRepaymentForm.cs,lvContracts_SubItemEndEditing,The following statement contains a magic number: if (loan != null && loan.Id != 0)              {                  Installment i = loan.GetFirstUnpaidInstallment();                  bool disableFees = false;                  var result = new KeyValuePair<Loan' RepaymentEvent>();                    OCurrency penalties = (OCurrency)e.Item.SubItems[4].Tag;                  OCurrency principal = result.Value == null ? i.PrincipalHasToPay : result.Value.Principal;                  OCurrency interest = result.Value == null ? i.InterestHasToPay : result.Value.InterestPrepayment;                  OCurrency total;                    if (penalties != loan.CalculateDuePenaltiesForInstallment(i.Number' TimeProvider.Today))                      disableFees = true;                    total = (OCurrency)e.Item.SubItems[5].Tag;                  if (e.SubItem == 5)                  {                      if (total < 0)                          throw new ArithmeticException("Total cannot be negative.");                      if (total > penalties)                      {                          OCurrency remainder = total - penalties;                          if (remainder > interest)                          {                              remainder -= interest;                              principal = remainder > principal ? principal : remainder;                              remainder -= principal;                              total = principal + interest + penalties + remainder;                          }                          else                          {                              interest = remainder;                              principal = 0;                          }                      }                      else                      {                          penalties = total;                          principal = 0;                          interest = 0;                      }                  }                    e.Item.SubItems[2].Text = principal.GetFormatedValue(loan.UseCents);                  e.Item.SubItems[2].Tag = principal;                  e.Item.SubItems[3].Text = interest.GetFormatedValue(loan.UseCents);                  e.Item.SubItems[3].Tag = interest;                  e.Item.SubItems[4].Text = penalties.GetFormatedValue(loan.UseCents);                  e.Item.SubItems[4].Tag = penalties;                  e.Item.SubItems[5].Text = total.GetFormatedValue(loan.UseCents);                  e.Item.SubItems[5].Tag = total;                    if (e.Item.SubItems.Count > 9)                      e.Item.SubItems[9].Tag = cbItem.SelectedItem;                    if (5 == e.SubItem)                      e.DisplayText = total.GetFormatedValue(loan.UseCents);                    if (9 == e.SubItem)                      e.DisplayText = cbItem.SelectedItem.ToString();                  if (10 == e.SubItem)                      e.Item.SubItems[10].Text = e.DisplayText;                                                      int paymentOption = cbItem.SelectedIndex + 1;                    KeyValuePair<Loan' RepaymentEvent> keyValuePair = CalculatePrincipalAndInterest(loan'                                                                                                  total.Value'                                                                                                   disableFees'                                                                                                   penalties.Value'                                                                                                   paymentOption);                  if (keyValuePair.Value != null)                  {                      e.Item.SubItems[2].Text =                          keyValuePair.Value.Principal.GetFormatedValue(loan.Product.UseCents);                      e.Item.SubItems[2].Tag = keyValuePair.Value.Principal;                      e.Item.SubItems[3].Text =                          keyValuePair.Value.Interests.GetFormatedValue(loan.Product.UseCents);                      e.Item.SubItems[3].Tag = keyValuePair.Value.Interests;                      e.Item.SubItems[4].Text =                          keyValuePair.Value.Penalties.GetFormatedValue(loan.Product.UseCents);                      e.Item.SubItems[4].Tag = keyValuePair.Value.Penalties;                  }              }
Magic Number,OpenCBS.GUI.Contracts,FastRepaymentForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\FastRepaymentForm.cs,lvContracts_SubItemEndEditing,The following statement contains a magic number: if (loan != null && loan.Id != 0)              {                  Installment i = loan.GetFirstUnpaidInstallment();                  bool disableFees = false;                  var result = new KeyValuePair<Loan' RepaymentEvent>();                    OCurrency penalties = (OCurrency)e.Item.SubItems[4].Tag;                  OCurrency principal = result.Value == null ? i.PrincipalHasToPay : result.Value.Principal;                  OCurrency interest = result.Value == null ? i.InterestHasToPay : result.Value.InterestPrepayment;                  OCurrency total;                    if (penalties != loan.CalculateDuePenaltiesForInstallment(i.Number' TimeProvider.Today))                      disableFees = true;                    total = (OCurrency)e.Item.SubItems[5].Tag;                  if (e.SubItem == 5)                  {                      if (total < 0)                          throw new ArithmeticException("Total cannot be negative.");                      if (total > penalties)                      {                          OCurrency remainder = total - penalties;                          if (remainder > interest)                          {                              remainder -= interest;                              principal = remainder > principal ? principal : remainder;                              remainder -= principal;                              total = principal + interest + penalties + remainder;                          }                          else                          {                              interest = remainder;                              principal = 0;                          }                      }                      else                      {                          penalties = total;                          principal = 0;                          interest = 0;                      }                  }                    e.Item.SubItems[2].Text = principal.GetFormatedValue(loan.UseCents);                  e.Item.SubItems[2].Tag = principal;                  e.Item.SubItems[3].Text = interest.GetFormatedValue(loan.UseCents);                  e.Item.SubItems[3].Tag = interest;                  e.Item.SubItems[4].Text = penalties.GetFormatedValue(loan.UseCents);                  e.Item.SubItems[4].Tag = penalties;                  e.Item.SubItems[5].Text = total.GetFormatedValue(loan.UseCents);                  e.Item.SubItems[5].Tag = total;                    if (e.Item.SubItems.Count > 9)                      e.Item.SubItems[9].Tag = cbItem.SelectedItem;                    if (5 == e.SubItem)                      e.DisplayText = total.GetFormatedValue(loan.UseCents);                    if (9 == e.SubItem)                      e.DisplayText = cbItem.SelectedItem.ToString();                  if (10 == e.SubItem)                      e.Item.SubItems[10].Text = e.DisplayText;                                                      int paymentOption = cbItem.SelectedIndex + 1;                    KeyValuePair<Loan' RepaymentEvent> keyValuePair = CalculatePrincipalAndInterest(loan'                                                                                                  total.Value'                                                                                                   disableFees'                                                                                                   penalties.Value'                                                                                                   paymentOption);                  if (keyValuePair.Value != null)                  {                      e.Item.SubItems[2].Text =                          keyValuePair.Value.Principal.GetFormatedValue(loan.Product.UseCents);                      e.Item.SubItems[2].Tag = keyValuePair.Value.Principal;                      e.Item.SubItems[3].Text =                          keyValuePair.Value.Interests.GetFormatedValue(loan.Product.UseCents);                      e.Item.SubItems[3].Tag = keyValuePair.Value.Interests;                      e.Item.SubItems[4].Text =                          keyValuePair.Value.Penalties.GetFormatedValue(loan.Product.UseCents);                      e.Item.SubItems[4].Tag = keyValuePair.Value.Penalties;                  }              }
Magic Number,OpenCBS.GUI.Contracts,FastRepaymentForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\FastRepaymentForm.cs,lvContracts_SubItemEndEditing,The following statement contains a magic number: if (loan != null && loan.Id != 0)              {                  Installment i = loan.GetFirstUnpaidInstallment();                  bool disableFees = false;                  var result = new KeyValuePair<Loan' RepaymentEvent>();                    OCurrency penalties = (OCurrency)e.Item.SubItems[4].Tag;                  OCurrency principal = result.Value == null ? i.PrincipalHasToPay : result.Value.Principal;                  OCurrency interest = result.Value == null ? i.InterestHasToPay : result.Value.InterestPrepayment;                  OCurrency total;                    if (penalties != loan.CalculateDuePenaltiesForInstallment(i.Number' TimeProvider.Today))                      disableFees = true;                    total = (OCurrency)e.Item.SubItems[5].Tag;                  if (e.SubItem == 5)                  {                      if (total < 0)                          throw new ArithmeticException("Total cannot be negative.");                      if (total > penalties)                      {                          OCurrency remainder = total - penalties;                          if (remainder > interest)                          {                              remainder -= interest;                              principal = remainder > principal ? principal : remainder;                              remainder -= principal;                              total = principal + interest + penalties + remainder;                          }                          else                          {                              interest = remainder;                              principal = 0;                          }                      }                      else                      {                          penalties = total;                          principal = 0;                          interest = 0;                      }                  }                    e.Item.SubItems[2].Text = principal.GetFormatedValue(loan.UseCents);                  e.Item.SubItems[2].Tag = principal;                  e.Item.SubItems[3].Text = interest.GetFormatedValue(loan.UseCents);                  e.Item.SubItems[3].Tag = interest;                  e.Item.SubItems[4].Text = penalties.GetFormatedValue(loan.UseCents);                  e.Item.SubItems[4].Tag = penalties;                  e.Item.SubItems[5].Text = total.GetFormatedValue(loan.UseCents);                  e.Item.SubItems[5].Tag = total;                    if (e.Item.SubItems.Count > 9)                      e.Item.SubItems[9].Tag = cbItem.SelectedItem;                    if (5 == e.SubItem)                      e.DisplayText = total.GetFormatedValue(loan.UseCents);                    if (9 == e.SubItem)                      e.DisplayText = cbItem.SelectedItem.ToString();                  if (10 == e.SubItem)                      e.Item.SubItems[10].Text = e.DisplayText;                                                      int paymentOption = cbItem.SelectedIndex + 1;                    KeyValuePair<Loan' RepaymentEvent> keyValuePair = CalculatePrincipalAndInterest(loan'                                                                                                  total.Value'                                                                                                   disableFees'                                                                                                   penalties.Value'                                                                                                   paymentOption);                  if (keyValuePair.Value != null)                  {                      e.Item.SubItems[2].Text =                          keyValuePair.Value.Principal.GetFormatedValue(loan.Product.UseCents);                      e.Item.SubItems[2].Tag = keyValuePair.Value.Principal;                      e.Item.SubItems[3].Text =                          keyValuePair.Value.Interests.GetFormatedValue(loan.Product.UseCents);                      e.Item.SubItems[3].Tag = keyValuePair.Value.Interests;                      e.Item.SubItems[4].Text =                          keyValuePair.Value.Penalties.GetFormatedValue(loan.Product.UseCents);                      e.Item.SubItems[4].Tag = keyValuePair.Value.Penalties;                  }              }
Magic Number,OpenCBS.GUI.Contracts,FastRepaymentForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\FastRepaymentForm.cs,lvContracts_SubItemEndEditing,The following statement contains a magic number: if (loan != null && loan.Id != 0)              {                  Installment i = loan.GetFirstUnpaidInstallment();                  bool disableFees = false;                  var result = new KeyValuePair<Loan' RepaymentEvent>();                    OCurrency penalties = (OCurrency)e.Item.SubItems[4].Tag;                  OCurrency principal = result.Value == null ? i.PrincipalHasToPay : result.Value.Principal;                  OCurrency interest = result.Value == null ? i.InterestHasToPay : result.Value.InterestPrepayment;                  OCurrency total;                    if (penalties != loan.CalculateDuePenaltiesForInstallment(i.Number' TimeProvider.Today))                      disableFees = true;                    total = (OCurrency)e.Item.SubItems[5].Tag;                  if (e.SubItem == 5)                  {                      if (total < 0)                          throw new ArithmeticException("Total cannot be negative.");                      if (total > penalties)                      {                          OCurrency remainder = total - penalties;                          if (remainder > interest)                          {                              remainder -= interest;                              principal = remainder > principal ? principal : remainder;                              remainder -= principal;                              total = principal + interest + penalties + remainder;                          }                          else                          {                              interest = remainder;                              principal = 0;                          }                      }                      else                      {                          penalties = total;                          principal = 0;                          interest = 0;                      }                  }                    e.Item.SubItems[2].Text = principal.GetFormatedValue(loan.UseCents);                  e.Item.SubItems[2].Tag = principal;                  e.Item.SubItems[3].Text = interest.GetFormatedValue(loan.UseCents);                  e.Item.SubItems[3].Tag = interest;                  e.Item.SubItems[4].Text = penalties.GetFormatedValue(loan.UseCents);                  e.Item.SubItems[4].Tag = penalties;                  e.Item.SubItems[5].Text = total.GetFormatedValue(loan.UseCents);                  e.Item.SubItems[5].Tag = total;                    if (e.Item.SubItems.Count > 9)                      e.Item.SubItems[9].Tag = cbItem.SelectedItem;                    if (5 == e.SubItem)                      e.DisplayText = total.GetFormatedValue(loan.UseCents);                    if (9 == e.SubItem)                      e.DisplayText = cbItem.SelectedItem.ToString();                  if (10 == e.SubItem)                      e.Item.SubItems[10].Text = e.DisplayText;                                                      int paymentOption = cbItem.SelectedIndex + 1;                    KeyValuePair<Loan' RepaymentEvent> keyValuePair = CalculatePrincipalAndInterest(loan'                                                                                                  total.Value'                                                                                                   disableFees'                                                                                                   penalties.Value'                                                                                                   paymentOption);                  if (keyValuePair.Value != null)                  {                      e.Item.SubItems[2].Text =                          keyValuePair.Value.Principal.GetFormatedValue(loan.Product.UseCents);                      e.Item.SubItems[2].Tag = keyValuePair.Value.Principal;                      e.Item.SubItems[3].Text =                          keyValuePair.Value.Interests.GetFormatedValue(loan.Product.UseCents);                      e.Item.SubItems[3].Tag = keyValuePair.Value.Interests;                      e.Item.SubItems[4].Text =                          keyValuePair.Value.Penalties.GetFormatedValue(loan.Product.UseCents);                      e.Item.SubItems[4].Tag = keyValuePair.Value.Penalties;                  }              }
Magic Number,OpenCBS.GUI.Contracts,FastRepaymentForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\FastRepaymentForm.cs,lvContracts_SubItemEndEditing,The following statement contains a magic number: if (loan != null && loan.Id != 0)              {                  Installment i = loan.GetFirstUnpaidInstallment();                  bool disableFees = false;                  var result = new KeyValuePair<Loan' RepaymentEvent>();                    OCurrency penalties = (OCurrency)e.Item.SubItems[4].Tag;                  OCurrency principal = result.Value == null ? i.PrincipalHasToPay : result.Value.Principal;                  OCurrency interest = result.Value == null ? i.InterestHasToPay : result.Value.InterestPrepayment;                  OCurrency total;                    if (penalties != loan.CalculateDuePenaltiesForInstallment(i.Number' TimeProvider.Today))                      disableFees = true;                    total = (OCurrency)e.Item.SubItems[5].Tag;                  if (e.SubItem == 5)                  {                      if (total < 0)                          throw new ArithmeticException("Total cannot be negative.");                      if (total > penalties)                      {                          OCurrency remainder = total - penalties;                          if (remainder > interest)                          {                              remainder -= interest;                              principal = remainder > principal ? principal : remainder;                              remainder -= principal;                              total = principal + interest + penalties + remainder;                          }                          else                          {                              interest = remainder;                              principal = 0;                          }                      }                      else                      {                          penalties = total;                          principal = 0;                          interest = 0;                      }                  }                    e.Item.SubItems[2].Text = principal.GetFormatedValue(loan.UseCents);                  e.Item.SubItems[2].Tag = principal;                  e.Item.SubItems[3].Text = interest.GetFormatedValue(loan.UseCents);                  e.Item.SubItems[3].Tag = interest;                  e.Item.SubItems[4].Text = penalties.GetFormatedValue(loan.UseCents);                  e.Item.SubItems[4].Tag = penalties;                  e.Item.SubItems[5].Text = total.GetFormatedValue(loan.UseCents);                  e.Item.SubItems[5].Tag = total;                    if (e.Item.SubItems.Count > 9)                      e.Item.SubItems[9].Tag = cbItem.SelectedItem;                    if (5 == e.SubItem)                      e.DisplayText = total.GetFormatedValue(loan.UseCents);                    if (9 == e.SubItem)                      e.DisplayText = cbItem.SelectedItem.ToString();                  if (10 == e.SubItem)                      e.Item.SubItems[10].Text = e.DisplayText;                                                      int paymentOption = cbItem.SelectedIndex + 1;                    KeyValuePair<Loan' RepaymentEvent> keyValuePair = CalculatePrincipalAndInterest(loan'                                                                                                  total.Value'                                                                                                   disableFees'                                                                                                   penalties.Value'                                                                                                   paymentOption);                  if (keyValuePair.Value != null)                  {                      e.Item.SubItems[2].Text =                          keyValuePair.Value.Principal.GetFormatedValue(loan.Product.UseCents);                      e.Item.SubItems[2].Tag = keyValuePair.Value.Principal;                      e.Item.SubItems[3].Text =                          keyValuePair.Value.Interests.GetFormatedValue(loan.Product.UseCents);                      e.Item.SubItems[3].Tag = keyValuePair.Value.Interests;                      e.Item.SubItems[4].Text =                          keyValuePair.Value.Penalties.GetFormatedValue(loan.Product.UseCents);                      e.Item.SubItems[4].Tag = keyValuePair.Value.Penalties;                  }              }
Magic Number,OpenCBS.GUI.Contracts,FastRepaymentForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\FastRepaymentForm.cs,lvContracts_SubItemEndEditing,The following statement contains a magic number: if (loan != null && loan.Id != 0)              {                  Installment i = loan.GetFirstUnpaidInstallment();                  bool disableFees = false;                  var result = new KeyValuePair<Loan' RepaymentEvent>();                    OCurrency penalties = (OCurrency)e.Item.SubItems[4].Tag;                  OCurrency principal = result.Value == null ? i.PrincipalHasToPay : result.Value.Principal;                  OCurrency interest = result.Value == null ? i.InterestHasToPay : result.Value.InterestPrepayment;                  OCurrency total;                    if (penalties != loan.CalculateDuePenaltiesForInstallment(i.Number' TimeProvider.Today))                      disableFees = true;                    total = (OCurrency)e.Item.SubItems[5].Tag;                  if (e.SubItem == 5)                  {                      if (total < 0)                          throw new ArithmeticException("Total cannot be negative.");                      if (total > penalties)                      {                          OCurrency remainder = total - penalties;                          if (remainder > interest)                          {                              remainder -= interest;                              principal = remainder > principal ? principal : remainder;                              remainder -= principal;                              total = principal + interest + penalties + remainder;                          }                          else                          {                              interest = remainder;                              principal = 0;                          }                      }                      else                      {                          penalties = total;                          principal = 0;                          interest = 0;                      }                  }                    e.Item.SubItems[2].Text = principal.GetFormatedValue(loan.UseCents);                  e.Item.SubItems[2].Tag = principal;                  e.Item.SubItems[3].Text = interest.GetFormatedValue(loan.UseCents);                  e.Item.SubItems[3].Tag = interest;                  e.Item.SubItems[4].Text = penalties.GetFormatedValue(loan.UseCents);                  e.Item.SubItems[4].Tag = penalties;                  e.Item.SubItems[5].Text = total.GetFormatedValue(loan.UseCents);                  e.Item.SubItems[5].Tag = total;                    if (e.Item.SubItems.Count > 9)                      e.Item.SubItems[9].Tag = cbItem.SelectedItem;                    if (5 == e.SubItem)                      e.DisplayText = total.GetFormatedValue(loan.UseCents);                    if (9 == e.SubItem)                      e.DisplayText = cbItem.SelectedItem.ToString();                  if (10 == e.SubItem)                      e.Item.SubItems[10].Text = e.DisplayText;                                                      int paymentOption = cbItem.SelectedIndex + 1;                    KeyValuePair<Loan' RepaymentEvent> keyValuePair = CalculatePrincipalAndInterest(loan'                                                                                                  total.Value'                                                                                                   disableFees'                                                                                                   penalties.Value'                                                                                                   paymentOption);                  if (keyValuePair.Value != null)                  {                      e.Item.SubItems[2].Text =                          keyValuePair.Value.Principal.GetFormatedValue(loan.Product.UseCents);                      e.Item.SubItems[2].Tag = keyValuePair.Value.Principal;                      e.Item.SubItems[3].Text =                          keyValuePair.Value.Interests.GetFormatedValue(loan.Product.UseCents);                      e.Item.SubItems[3].Tag = keyValuePair.Value.Interests;                      e.Item.SubItems[4].Text =                          keyValuePair.Value.Penalties.GetFormatedValue(loan.Product.UseCents);                      e.Item.SubItems[4].Tag = keyValuePair.Value.Penalties;                  }              }
Magic Number,OpenCBS.GUI.Contracts,FastRepaymentForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\FastRepaymentForm.cs,lvContracts_SubItemEndEditing,The following statement contains a magic number: if (loan != null && loan.Id != 0)              {                  Installment i = loan.GetFirstUnpaidInstallment();                  bool disableFees = false;                  var result = new KeyValuePair<Loan' RepaymentEvent>();                    OCurrency penalties = (OCurrency)e.Item.SubItems[4].Tag;                  OCurrency principal = result.Value == null ? i.PrincipalHasToPay : result.Value.Principal;                  OCurrency interest = result.Value == null ? i.InterestHasToPay : result.Value.InterestPrepayment;                  OCurrency total;                    if (penalties != loan.CalculateDuePenaltiesForInstallment(i.Number' TimeProvider.Today))                      disableFees = true;                    total = (OCurrency)e.Item.SubItems[5].Tag;                  if (e.SubItem == 5)                  {                      if (total < 0)                          throw new ArithmeticException("Total cannot be negative.");                      if (total > penalties)                      {                          OCurrency remainder = total - penalties;                          if (remainder > interest)                          {                              remainder -= interest;                              principal = remainder > principal ? principal : remainder;                              remainder -= principal;                              total = principal + interest + penalties + remainder;                          }                          else                          {                              interest = remainder;                              principal = 0;                          }                      }                      else                      {                          penalties = total;                          principal = 0;                          interest = 0;                      }                  }                    e.Item.SubItems[2].Text = principal.GetFormatedValue(loan.UseCents);                  e.Item.SubItems[2].Tag = principal;                  e.Item.SubItems[3].Text = interest.GetFormatedValue(loan.UseCents);                  e.Item.SubItems[3].Tag = interest;                  e.Item.SubItems[4].Text = penalties.GetFormatedValue(loan.UseCents);                  e.Item.SubItems[4].Tag = penalties;                  e.Item.SubItems[5].Text = total.GetFormatedValue(loan.UseCents);                  e.Item.SubItems[5].Tag = total;                    if (e.Item.SubItems.Count > 9)                      e.Item.SubItems[9].Tag = cbItem.SelectedItem;                    if (5 == e.SubItem)                      e.DisplayText = total.GetFormatedValue(loan.UseCents);                    if (9 == e.SubItem)                      e.DisplayText = cbItem.SelectedItem.ToString();                  if (10 == e.SubItem)                      e.Item.SubItems[10].Text = e.DisplayText;                                                      int paymentOption = cbItem.SelectedIndex + 1;                    KeyValuePair<Loan' RepaymentEvent> keyValuePair = CalculatePrincipalAndInterest(loan'                                                                                                  total.Value'                                                                                                   disableFees'                                                                                                   penalties.Value'                                                                                                   paymentOption);                  if (keyValuePair.Value != null)                  {                      e.Item.SubItems[2].Text =                          keyValuePair.Value.Principal.GetFormatedValue(loan.Product.UseCents);                      e.Item.SubItems[2].Tag = keyValuePair.Value.Principal;                      e.Item.SubItems[3].Text =                          keyValuePair.Value.Interests.GetFormatedValue(loan.Product.UseCents);                      e.Item.SubItems[3].Tag = keyValuePair.Value.Interests;                      e.Item.SubItems[4].Text =                          keyValuePair.Value.Penalties.GetFormatedValue(loan.Product.UseCents);                      e.Item.SubItems[4].Tag = keyValuePair.Value.Penalties;                  }              }
Magic Number,OpenCBS.GUI.Contracts,FastRepaymentForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\FastRepaymentForm.cs,lvContracts_SubItemEndEditing,The following statement contains a magic number: if (loan != null && loan.Id != 0)              {                  Installment i = loan.GetFirstUnpaidInstallment();                  bool disableFees = false;                  var result = new KeyValuePair<Loan' RepaymentEvent>();                    OCurrency penalties = (OCurrency)e.Item.SubItems[4].Tag;                  OCurrency principal = result.Value == null ? i.PrincipalHasToPay : result.Value.Principal;                  OCurrency interest = result.Value == null ? i.InterestHasToPay : result.Value.InterestPrepayment;                  OCurrency total;                    if (penalties != loan.CalculateDuePenaltiesForInstallment(i.Number' TimeProvider.Today))                      disableFees = true;                    total = (OCurrency)e.Item.SubItems[5].Tag;                  if (e.SubItem == 5)                  {                      if (total < 0)                          throw new ArithmeticException("Total cannot be negative.");                      if (total > penalties)                      {                          OCurrency remainder = total - penalties;                          if (remainder > interest)                          {                              remainder -= interest;                              principal = remainder > principal ? principal : remainder;                              remainder -= principal;                              total = principal + interest + penalties + remainder;                          }                          else                          {                              interest = remainder;                              principal = 0;                          }                      }                      else                      {                          penalties = total;                          principal = 0;                          interest = 0;                      }                  }                    e.Item.SubItems[2].Text = principal.GetFormatedValue(loan.UseCents);                  e.Item.SubItems[2].Tag = principal;                  e.Item.SubItems[3].Text = interest.GetFormatedValue(loan.UseCents);                  e.Item.SubItems[3].Tag = interest;                  e.Item.SubItems[4].Text = penalties.GetFormatedValue(loan.UseCents);                  e.Item.SubItems[4].Tag = penalties;                  e.Item.SubItems[5].Text = total.GetFormatedValue(loan.UseCents);                  e.Item.SubItems[5].Tag = total;                    if (e.Item.SubItems.Count > 9)                      e.Item.SubItems[9].Tag = cbItem.SelectedItem;                    if (5 == e.SubItem)                      e.DisplayText = total.GetFormatedValue(loan.UseCents);                    if (9 == e.SubItem)                      e.DisplayText = cbItem.SelectedItem.ToString();                  if (10 == e.SubItem)                      e.Item.SubItems[10].Text = e.DisplayText;                                                      int paymentOption = cbItem.SelectedIndex + 1;                    KeyValuePair<Loan' RepaymentEvent> keyValuePair = CalculatePrincipalAndInterest(loan'                                                                                                  total.Value'                                                                                                   disableFees'                                                                                                   penalties.Value'                                                                                                   paymentOption);                  if (keyValuePair.Value != null)                  {                      e.Item.SubItems[2].Text =                          keyValuePair.Value.Principal.GetFormatedValue(loan.Product.UseCents);                      e.Item.SubItems[2].Tag = keyValuePair.Value.Principal;                      e.Item.SubItems[3].Text =                          keyValuePair.Value.Interests.GetFormatedValue(loan.Product.UseCents);                      e.Item.SubItems[3].Tag = keyValuePair.Value.Interests;                      e.Item.SubItems[4].Text =                          keyValuePair.Value.Penalties.GetFormatedValue(loan.Product.UseCents);                      e.Item.SubItems[4].Tag = keyValuePair.Value.Penalties;                  }              }
Magic Number,OpenCBS.GUI.Contracts,FastRepaymentForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\FastRepaymentForm.cs,lvContracts_SubItemEndEditing,The following statement contains a magic number: if (loan != null && loan.Id != 0)              {                  Installment i = loan.GetFirstUnpaidInstallment();                  bool disableFees = false;                  var result = new KeyValuePair<Loan' RepaymentEvent>();                    OCurrency penalties = (OCurrency)e.Item.SubItems[4].Tag;                  OCurrency principal = result.Value == null ? i.PrincipalHasToPay : result.Value.Principal;                  OCurrency interest = result.Value == null ? i.InterestHasToPay : result.Value.InterestPrepayment;                  OCurrency total;                    if (penalties != loan.CalculateDuePenaltiesForInstallment(i.Number' TimeProvider.Today))                      disableFees = true;                    total = (OCurrency)e.Item.SubItems[5].Tag;                  if (e.SubItem == 5)                  {                      if (total < 0)                          throw new ArithmeticException("Total cannot be negative.");                      if (total > penalties)                      {                          OCurrency remainder = total - penalties;                          if (remainder > interest)                          {                              remainder -= interest;                              principal = remainder > principal ? principal : remainder;                              remainder -= principal;                              total = principal + interest + penalties + remainder;                          }                          else                          {                              interest = remainder;                              principal = 0;                          }                      }                      else                      {                          penalties = total;                          principal = 0;                          interest = 0;                      }                  }                    e.Item.SubItems[2].Text = principal.GetFormatedValue(loan.UseCents);                  e.Item.SubItems[2].Tag = principal;                  e.Item.SubItems[3].Text = interest.GetFormatedValue(loan.UseCents);                  e.Item.SubItems[3].Tag = interest;                  e.Item.SubItems[4].Text = penalties.GetFormatedValue(loan.UseCents);                  e.Item.SubItems[4].Tag = penalties;                  e.Item.SubItems[5].Text = total.GetFormatedValue(loan.UseCents);                  e.Item.SubItems[5].Tag = total;                    if (e.Item.SubItems.Count > 9)                      e.Item.SubItems[9].Tag = cbItem.SelectedItem;                    if (5 == e.SubItem)                      e.DisplayText = total.GetFormatedValue(loan.UseCents);                    if (9 == e.SubItem)                      e.DisplayText = cbItem.SelectedItem.ToString();                  if (10 == e.SubItem)                      e.Item.SubItems[10].Text = e.DisplayText;                                                      int paymentOption = cbItem.SelectedIndex + 1;                    KeyValuePair<Loan' RepaymentEvent> keyValuePair = CalculatePrincipalAndInterest(loan'                                                                                                  total.Value'                                                                                                   disableFees'                                                                                                   penalties.Value'                                                                                                   paymentOption);                  if (keyValuePair.Value != null)                  {                      e.Item.SubItems[2].Text =                          keyValuePair.Value.Principal.GetFormatedValue(loan.Product.UseCents);                      e.Item.SubItems[2].Tag = keyValuePair.Value.Principal;                      e.Item.SubItems[3].Text =                          keyValuePair.Value.Interests.GetFormatedValue(loan.Product.UseCents);                      e.Item.SubItems[3].Tag = keyValuePair.Value.Interests;                      e.Item.SubItems[4].Text =                          keyValuePair.Value.Penalties.GetFormatedValue(loan.Product.UseCents);                      e.Item.SubItems[4].Tag = keyValuePair.Value.Penalties;                  }              }
Magic Number,OpenCBS.GUI.Contracts,FastRepaymentForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\FastRepaymentForm.cs,CalculatePrincipalAndInterest,The following statement contains a magic number: try              {                  int installmentNumber = loan.GetFirstUnpaidInstallment().Number;                  DateTime date = TimeProvider.Now;                    PaymentMethod paymentMethod =                      ServicesProvider.GetInstance().GetPaymentMethodServices().GetPaymentMethodById(1);                    bool keepIntialSchedule = true;                  bool payProportion = false;                    switch (paymentOption)                  {                      case 1:                          keepIntialSchedule = true;                          payProportion = false;                          break;                      case 2:                          keepIntialSchedule = false;                          payProportion = false;                          break;                      case 3:                          keepIntialSchedule = false;                          payProportion = true;                          break;                  }                    return ServicesProvider.GetInstance().GetContractServices().ShowNewContract(loan'                                                                                              installmentNumber'                                                                                              date'                                                                                              amount'                                                                                              disableFees'                                                                                              manualFees'                                                                                              0'                                                                                              false'                                                                                              0'                                                                                              keepIntialSchedule'                                                                                              payProportion'                                                                                              paymentMethod'                                                                                              false'                                                                                              false);              }              catch (Exception ex)              {                  new frmShowError(CustomExceptionHandler.ShowExceptionText(ex)).ShowDialog();                  LoadContracts();              }
Magic Number,OpenCBS.GUI.Contracts,FastRepaymentForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\FastRepaymentForm.cs,CalculatePrincipalAndInterest,The following statement contains a magic number: try              {                  int installmentNumber = loan.GetFirstUnpaidInstallment().Number;                  DateTime date = TimeProvider.Now;                    PaymentMethod paymentMethod =                      ServicesProvider.GetInstance().GetPaymentMethodServices().GetPaymentMethodById(1);                    bool keepIntialSchedule = true;                  bool payProportion = false;                    switch (paymentOption)                  {                      case 1:                          keepIntialSchedule = true;                          payProportion = false;                          break;                      case 2:                          keepIntialSchedule = false;                          payProportion = false;                          break;                      case 3:                          keepIntialSchedule = false;                          payProportion = true;                          break;                  }                    return ServicesProvider.GetInstance().GetContractServices().ShowNewContract(loan'                                                                                              installmentNumber'                                                                                              date'                                                                                              amount'                                                                                              disableFees'                                                                                              manualFees'                                                                                              0'                                                                                              false'                                                                                              0'                                                                                              keepIntialSchedule'                                                                                              payProportion'                                                                                              paymentMethod'                                                                                              false'                                                                                              false);              }              catch (Exception ex)              {                  new frmShowError(CustomExceptionHandler.ShowExceptionText(ex)).ShowDialog();                  LoadContracts();              }
Magic Number,OpenCBS.GUI.Contracts,FastRepaymentForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\FastRepaymentForm.cs,BtnOkClick,The following statement contains a magic number: foreach (ListViewItem item in lvContracts.Items)              {                  if (item == _itemTotal) continue;                  if (!item.Checked) continue;                  var loan = item.Tag as Loan;                  VillageMember activeMember = null;                  int index = 0;                  foreach (VillageMember member in _village.Members)                  {                      int tIndex = member.ActiveLoans.IndexOf(loan);                      if (tIndex > -1)                      {                          activeMember = member;                          index = tIndex;                      }                  }                    if (activeMember != null)                  {                      Person person = activeMember.Tiers as Person;                      if (loan != null)                      {                          int number = loan.GetFirstUnpaidInstallment().Number;                          OCurrency total = (OCurrency) item.SubItems[5].Tag;                          bool doProportionPayment = cbItem.SelectedIndex == 2;                          OCurrency penalties =(OCurrency)item.SubItems[4].Tag;                          bool disableFees = penalties != loan.CalculateDuePenaltiesForInstallment(number' TimeProvider.Today);                          string comment = item.SubItems[10].Text;                            PaymentMethod paymentMethod = ServicesProvider.GetInstance().GetPaymentMethodServices().GetPaymentMethodById(1);                            try                          {                              activeMember.ActiveLoans[index] =                                  ServicesProvider.GetInstance().GetContractServices().Repay(loan'                                                                                             person'                                                                                             number'                                                                                             TimeProvider.Now'                                                                                             total'                                                                                             disableFees'                                                                                             penalties'                                                                                              0'                                                                                             false'                                                                                             0'                                                                                             true'                                                                                             doProportionPayment'                                                                                             paymentMethod'                                                                                              comment'                                                                                             false);                          }                          catch (Exception ex)                          {                              new frmShowError(CustomExceptionHandler.ShowExceptionText(ex)).ShowDialog();                          }                      }                  }                    if (loan != null) if (loan.Closed) if (activeMember != null) activeMember.ActiveLoans[index] = null;              }
Magic Number,OpenCBS.GUI.Contracts,FastRepaymentForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\FastRepaymentForm.cs,BtnOkClick,The following statement contains a magic number: foreach (ListViewItem item in lvContracts.Items)              {                  if (item == _itemTotal) continue;                  if (!item.Checked) continue;                  var loan = item.Tag as Loan;                  VillageMember activeMember = null;                  int index = 0;                  foreach (VillageMember member in _village.Members)                  {                      int tIndex = member.ActiveLoans.IndexOf(loan);                      if (tIndex > -1)                      {                          activeMember = member;                          index = tIndex;                      }                  }                    if (activeMember != null)                  {                      Person person = activeMember.Tiers as Person;                      if (loan != null)                      {                          int number = loan.GetFirstUnpaidInstallment().Number;                          OCurrency total = (OCurrency) item.SubItems[5].Tag;                          bool doProportionPayment = cbItem.SelectedIndex == 2;                          OCurrency penalties =(OCurrency)item.SubItems[4].Tag;                          bool disableFees = penalties != loan.CalculateDuePenaltiesForInstallment(number' TimeProvider.Today);                          string comment = item.SubItems[10].Text;                            PaymentMethod paymentMethod = ServicesProvider.GetInstance().GetPaymentMethodServices().GetPaymentMethodById(1);                            try                          {                              activeMember.ActiveLoans[index] =                                  ServicesProvider.GetInstance().GetContractServices().Repay(loan'                                                                                             person'                                                                                             number'                                                                                             TimeProvider.Now'                                                                                             total'                                                                                             disableFees'                                                                                             penalties'                                                                                              0'                                                                                             false'                                                                                             0'                                                                                             true'                                                                                             doProportionPayment'                                                                                             paymentMethod'                                                                                              comment'                                                                                             false);                          }                          catch (Exception ex)                          {                              new frmShowError(CustomExceptionHandler.ShowExceptionText(ex)).ShowDialog();                          }                      }                  }                    if (loan != null) if (loan.Closed) if (activeMember != null) activeMember.ActiveLoans[index] = null;              }
Magic Number,OpenCBS.GUI.Contracts,FastRepaymentForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\FastRepaymentForm.cs,BtnOkClick,The following statement contains a magic number: foreach (ListViewItem item in lvContracts.Items)              {                  if (item == _itemTotal) continue;                  if (!item.Checked) continue;                  var loan = item.Tag as Loan;                  VillageMember activeMember = null;                  int index = 0;                  foreach (VillageMember member in _village.Members)                  {                      int tIndex = member.ActiveLoans.IndexOf(loan);                      if (tIndex > -1)                      {                          activeMember = member;                          index = tIndex;                      }                  }                    if (activeMember != null)                  {                      Person person = activeMember.Tiers as Person;                      if (loan != null)                      {                          int number = loan.GetFirstUnpaidInstallment().Number;                          OCurrency total = (OCurrency) item.SubItems[5].Tag;                          bool doProportionPayment = cbItem.SelectedIndex == 2;                          OCurrency penalties =(OCurrency)item.SubItems[4].Tag;                          bool disableFees = penalties != loan.CalculateDuePenaltiesForInstallment(number' TimeProvider.Today);                          string comment = item.SubItems[10].Text;                            PaymentMethod paymentMethod = ServicesProvider.GetInstance().GetPaymentMethodServices().GetPaymentMethodById(1);                            try                          {                              activeMember.ActiveLoans[index] =                                  ServicesProvider.GetInstance().GetContractServices().Repay(loan'                                                                                             person'                                                                                             number'                                                                                             TimeProvider.Now'                                                                                             total'                                                                                             disableFees'                                                                                             penalties'                                                                                              0'                                                                                             false'                                                                                             0'                                                                                             true'                                                                                             doProportionPayment'                                                                                             paymentMethod'                                                                                              comment'                                                                                             false);                          }                          catch (Exception ex)                          {                              new frmShowError(CustomExceptionHandler.ShowExceptionText(ex)).ShowDialog();                          }                      }                  }                    if (loan != null) if (loan.Closed) if (activeMember != null) activeMember.ActiveLoans[index] = null;              }
Magic Number,OpenCBS.GUI.Contracts,FastRepaymentForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\FastRepaymentForm.cs,BtnOkClick,The following statement contains a magic number: foreach (ListViewItem item in lvContracts.Items)              {                  if (item == _itemTotal) continue;                  if (!item.Checked) continue;                  var loan = item.Tag as Loan;                  VillageMember activeMember = null;                  int index = 0;                  foreach (VillageMember member in _village.Members)                  {                      int tIndex = member.ActiveLoans.IndexOf(loan);                      if (tIndex > -1)                      {                          activeMember = member;                          index = tIndex;                      }                  }                    if (activeMember != null)                  {                      Person person = activeMember.Tiers as Person;                      if (loan != null)                      {                          int number = loan.GetFirstUnpaidInstallment().Number;                          OCurrency total = (OCurrency) item.SubItems[5].Tag;                          bool doProportionPayment = cbItem.SelectedIndex == 2;                          OCurrency penalties =(OCurrency)item.SubItems[4].Tag;                          bool disableFees = penalties != loan.CalculateDuePenaltiesForInstallment(number' TimeProvider.Today);                          string comment = item.SubItems[10].Text;                            PaymentMethod paymentMethod = ServicesProvider.GetInstance().GetPaymentMethodServices().GetPaymentMethodById(1);                            try                          {                              activeMember.ActiveLoans[index] =                                  ServicesProvider.GetInstance().GetContractServices().Repay(loan'                                                                                             person'                                                                                             number'                                                                                             TimeProvider.Now'                                                                                             total'                                                                                             disableFees'                                                                                             penalties'                                                                                              0'                                                                                             false'                                                                                             0'                                                                                             true'                                                                                             doProportionPayment'                                                                                             paymentMethod'                                                                                              comment'                                                                                             false);                          }                          catch (Exception ex)                          {                              new frmShowError(CustomExceptionHandler.ShowExceptionText(ex)).ShowDialog();                          }                      }                  }                    if (loan != null) if (loan.Closed) if (activeMember != null) activeMember.ActiveLoans[index] = null;              }
Magic Number,OpenCBS.GUI.Contracts,SavingsOperationForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\SavingsOperationForm.cs,SwitchBookingDirection,The following statement contains a magic number: switch (_bookingDirection)              {                  case OSavingsOperation.Credit:                      {                          _amountMin = _saving.Product.DepositMin;                          _amountMax = _saving.Product.DepositMax;                          _chequeAmountMin = _saving.Product.ChequeDepositMin;                          _chequeAmountMax = _saving.Product.ChequeDepositMax;                            if (_saving.Product is SavingsBookProduct)                          {                              if (((SavingsBookProduct)_saving.Product).DepositFees.HasValue)                              {                                  _feesMin = ((SavingsBookProduct)_saving.Product).DepositFees;                                  _feesMax = ((SavingsBookProduct)_saving.Product).DepositFees;                              }                              else                              {                                  _feesMin = ((SavingsBookProduct)_saving.Product).DepositFeesMin;                                  _feesMax = ((SavingsBookProduct)_saving.Product).DepositFeesMax;                              }                          }                          break;                      }                  case OSavingsOperation.Debit:                      {                          _amountMin = _saving.Product.WithdrawingMin;                          _amountMax = _saving.Product.WithdrawingMax;                          _chequeAmountMin = _saving.Product.ChequeDepositMin;                          _chequeAmountMax = _saving.Product.ChequeDepositMax;                            if (_saving.Product is SavingsBookProduct)                          {                              if (((SavingsBookProduct)_saving.Product).FlatWithdrawFees.HasValue ||                                  ((SavingsBookProduct)_saving.Product).FlatWithdrawFeesMin.HasValue)                              {                                  if (((SavingsBookProduct)_saving.Product).FlatWithdrawFees.HasValue)                                  {                                      _feesMin = ((SavingsBookProduct)_saving.Product).FlatWithdrawFees;                                      _feesMax = ((SavingsBookProduct)_saving.Product).FlatWithdrawFees;                                  }                                  else                                  {                                      _feesMin = ((SavingsBookProduct)_saving.Product).FlatWithdrawFeesMin;                                      _feesMax = ((SavingsBookProduct)_saving.Product).FlatWithdrawFeesMax;                                  }                              }                              else                              {                                  if (((SavingsBookProduct)_saving.Product).RateWithdrawFees.HasValue)                                  {                                      _feesMin = (decimal)((SavingsBookProduct)_saving.Product).RateWithdrawFees * 100;                                      _feesMax = (decimal)((SavingsBookProduct)_saving.Product).RateWithdrawFees * 100;                                  }                                  else                                  {                                      _feesMin = (decimal)((SavingsBookProduct)_saving.Product).RateWithdrawFeesMin * 100;                                      _feesMax = (decimal)((SavingsBookProduct)_saving.Product).RateWithdrawFeesMax * 100;                                  }                              }                          }                          break;                      }                    case OSavingsOperation.Transfer:                      _amountMin = _saving.Product.TransferMin;                      _amountMax = _saving.Product.TransferMax;                        LoadTransferFee();                      break;                    default:                      _amountMin = 0;                      _amountMax = decimal.MaxValue;                        break;              }
Magic Number,OpenCBS.GUI.Contracts,SavingsOperationForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\SavingsOperationForm.cs,SwitchBookingDirection,The following statement contains a magic number: switch (_bookingDirection)              {                  case OSavingsOperation.Credit:                      {                          _amountMin = _saving.Product.DepositMin;                          _amountMax = _saving.Product.DepositMax;                          _chequeAmountMin = _saving.Product.ChequeDepositMin;                          _chequeAmountMax = _saving.Product.ChequeDepositMax;                            if (_saving.Product is SavingsBookProduct)                          {                              if (((SavingsBookProduct)_saving.Product).DepositFees.HasValue)                              {                                  _feesMin = ((SavingsBookProduct)_saving.Product).DepositFees;                                  _feesMax = ((SavingsBookProduct)_saving.Product).DepositFees;                              }                              else                              {                                  _feesMin = ((SavingsBookProduct)_saving.Product).DepositFeesMin;                                  _feesMax = ((SavingsBookProduct)_saving.Product).DepositFeesMax;                              }                          }                          break;                      }                  case OSavingsOperation.Debit:                      {                          _amountMin = _saving.Product.WithdrawingMin;                          _amountMax = _saving.Product.WithdrawingMax;                          _chequeAmountMin = _saving.Product.ChequeDepositMin;                          _chequeAmountMax = _saving.Product.ChequeDepositMax;                            if (_saving.Product is SavingsBookProduct)                          {                              if (((SavingsBookProduct)_saving.Product).FlatWithdrawFees.HasValue ||                                  ((SavingsBookProduct)_saving.Product).FlatWithdrawFeesMin.HasValue)                              {                                  if (((SavingsBookProduct)_saving.Product).FlatWithdrawFees.HasValue)                                  {                                      _feesMin = ((SavingsBookProduct)_saving.Product).FlatWithdrawFees;                                      _feesMax = ((SavingsBookProduct)_saving.Product).FlatWithdrawFees;                                  }                                  else                                  {                                      _feesMin = ((SavingsBookProduct)_saving.Product).FlatWithdrawFeesMin;                                      _feesMax = ((SavingsBookProduct)_saving.Product).FlatWithdrawFeesMax;                                  }                              }                              else                              {                                  if (((SavingsBookProduct)_saving.Product).RateWithdrawFees.HasValue)                                  {                                      _feesMin = (decimal)((SavingsBookProduct)_saving.Product).RateWithdrawFees * 100;                                      _feesMax = (decimal)((SavingsBookProduct)_saving.Product).RateWithdrawFees * 100;                                  }                                  else                                  {                                      _feesMin = (decimal)((SavingsBookProduct)_saving.Product).RateWithdrawFeesMin * 100;                                      _feesMax = (decimal)((SavingsBookProduct)_saving.Product).RateWithdrawFeesMax * 100;                                  }                              }                          }                          break;                      }                    case OSavingsOperation.Transfer:                      _amountMin = _saving.Product.TransferMin;                      _amountMax = _saving.Product.TransferMax;                        LoadTransferFee();                      break;                    default:                      _amountMin = 0;                      _amountMax = decimal.MaxValue;                        break;              }
Magic Number,OpenCBS.GUI.Contracts,SavingsOperationForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\SavingsOperationForm.cs,SwitchBookingDirection,The following statement contains a magic number: switch (_bookingDirection)              {                  case OSavingsOperation.Credit:                      {                          _amountMin = _saving.Product.DepositMin;                          _amountMax = _saving.Product.DepositMax;                          _chequeAmountMin = _saving.Product.ChequeDepositMin;                          _chequeAmountMax = _saving.Product.ChequeDepositMax;                            if (_saving.Product is SavingsBookProduct)                          {                              if (((SavingsBookProduct)_saving.Product).DepositFees.HasValue)                              {                                  _feesMin = ((SavingsBookProduct)_saving.Product).DepositFees;                                  _feesMax = ((SavingsBookProduct)_saving.Product).DepositFees;                              }                              else                              {                                  _feesMin = ((SavingsBookProduct)_saving.Product).DepositFeesMin;                                  _feesMax = ((SavingsBookProduct)_saving.Product).DepositFeesMax;                              }                          }                          break;                      }                  case OSavingsOperation.Debit:                      {                          _amountMin = _saving.Product.WithdrawingMin;                          _amountMax = _saving.Product.WithdrawingMax;                          _chequeAmountMin = _saving.Product.ChequeDepositMin;                          _chequeAmountMax = _saving.Product.ChequeDepositMax;                            if (_saving.Product is SavingsBookProduct)                          {                              if (((SavingsBookProduct)_saving.Product).FlatWithdrawFees.HasValue ||                                  ((SavingsBookProduct)_saving.Product).FlatWithdrawFeesMin.HasValue)                              {                                  if (((SavingsBookProduct)_saving.Product).FlatWithdrawFees.HasValue)                                  {                                      _feesMin = ((SavingsBookProduct)_saving.Product).FlatWithdrawFees;                                      _feesMax = ((SavingsBookProduct)_saving.Product).FlatWithdrawFees;                                  }                                  else                                  {                                      _feesMin = ((SavingsBookProduct)_saving.Product).FlatWithdrawFeesMin;                                      _feesMax = ((SavingsBookProduct)_saving.Product).FlatWithdrawFeesMax;                                  }                              }                              else                              {                                  if (((SavingsBookProduct)_saving.Product).RateWithdrawFees.HasValue)                                  {                                      _feesMin = (decimal)((SavingsBookProduct)_saving.Product).RateWithdrawFees * 100;                                      _feesMax = (decimal)((SavingsBookProduct)_saving.Product).RateWithdrawFees * 100;                                  }                                  else                                  {                                      _feesMin = (decimal)((SavingsBookProduct)_saving.Product).RateWithdrawFeesMin * 100;                                      _feesMax = (decimal)((SavingsBookProduct)_saving.Product).RateWithdrawFeesMax * 100;                                  }                              }                          }                          break;                      }                    case OSavingsOperation.Transfer:                      _amountMin = _saving.Product.TransferMin;                      _amountMax = _saving.Product.TransferMax;                        LoadTransferFee();                      break;                    default:                      _amountMin = 0;                      _amountMax = decimal.MaxValue;                        break;              }
Magic Number,OpenCBS.GUI.Contracts,SavingsOperationForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\SavingsOperationForm.cs,SwitchBookingDirection,The following statement contains a magic number: switch (_bookingDirection)              {                  case OSavingsOperation.Credit:                      {                          _amountMin = _saving.Product.DepositMin;                          _amountMax = _saving.Product.DepositMax;                          _chequeAmountMin = _saving.Product.ChequeDepositMin;                          _chequeAmountMax = _saving.Product.ChequeDepositMax;                            if (_saving.Product is SavingsBookProduct)                          {                              if (((SavingsBookProduct)_saving.Product).DepositFees.HasValue)                              {                                  _feesMin = ((SavingsBookProduct)_saving.Product).DepositFees;                                  _feesMax = ((SavingsBookProduct)_saving.Product).DepositFees;                              }                              else                              {                                  _feesMin = ((SavingsBookProduct)_saving.Product).DepositFeesMin;                                  _feesMax = ((SavingsBookProduct)_saving.Product).DepositFeesMax;                              }                          }                          break;                      }                  case OSavingsOperation.Debit:                      {                          _amountMin = _saving.Product.WithdrawingMin;                          _amountMax = _saving.Product.WithdrawingMax;                          _chequeAmountMin = _saving.Product.ChequeDepositMin;                          _chequeAmountMax = _saving.Product.ChequeDepositMax;                            if (_saving.Product is SavingsBookProduct)                          {                              if (((SavingsBookProduct)_saving.Product).FlatWithdrawFees.HasValue ||                                  ((SavingsBookProduct)_saving.Product).FlatWithdrawFeesMin.HasValue)                              {                                  if (((SavingsBookProduct)_saving.Product).FlatWithdrawFees.HasValue)                                  {                                      _feesMin = ((SavingsBookProduct)_saving.Product).FlatWithdrawFees;                                      _feesMax = ((SavingsBookProduct)_saving.Product).FlatWithdrawFees;                                  }                                  else                                  {                                      _feesMin = ((SavingsBookProduct)_saving.Product).FlatWithdrawFeesMin;                                      _feesMax = ((SavingsBookProduct)_saving.Product).FlatWithdrawFeesMax;                                  }                              }                              else                              {                                  if (((SavingsBookProduct)_saving.Product).RateWithdrawFees.HasValue)                                  {                                      _feesMin = (decimal)((SavingsBookProduct)_saving.Product).RateWithdrawFees * 100;                                      _feesMax = (decimal)((SavingsBookProduct)_saving.Product).RateWithdrawFees * 100;                                  }                                  else                                  {                                      _feesMin = (decimal)((SavingsBookProduct)_saving.Product).RateWithdrawFeesMin * 100;                                      _feesMax = (decimal)((SavingsBookProduct)_saving.Product).RateWithdrawFeesMax * 100;                                  }                              }                          }                          break;                      }                    case OSavingsOperation.Transfer:                      _amountMin = _saving.Product.TransferMin;                      _amountMax = _saving.Product.TransferMax;                        LoadTransferFee();                      break;                    default:                      _amountMin = 0;                      _amountMax = decimal.MaxValue;                        break;              }
Magic Number,OpenCBS.GUI.Contracts,SavingsOperationForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\SavingsOperationForm.cs,Initialize,The following statement contains a magic number: decimal value = _flatFees.HasValue ? _flatFees.Value : ((decimal)(_rateFees)) * 100;
Magic Number,OpenCBS.GUI.Contracts,SavingsOperationForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\SavingsOperationForm.cs,BSaveClick,The following statement contains a magic number: try              {                  _date = new DateTime(dtpDate.Value.Year' dtpDate.Value.Month' dtpDate.Value.Day' TimeProvider.Now.Hour'                      TimeProvider.Now.Minute' TimeProvider.Now.Second);                    SavingServices savingServices = ServicesProvider.GetInstance().GetSavingServices();                    if (_date.Date < TimeProvider.Today.Date)                      savingServices.PerformBackDateOperations(_date);                  else if (_date.Date > TimeProvider.Today.Date)                      savingServices.PerformFutureDateOperations(_date);                    if (_saving.HasPendingEvents())                      if (!savingServices.AllowOperationsDuringPendingDeposit())                          return;                    if ((_flatFees.HasValue && updAmountFees.Value != _flatFees) || (_rateFees.HasValue && updAmountFees.Value != (decimal)(_rateFees * 100)))                      if (!savingServices.AllowSettingSavingsOperationsFeesManually())                          return;                    switch (_bookingDirection)                  {                      case OSavingsOperation.Credit:                          {                              OSavingsMethods savingsMethod =                                  (OSavingsMethods)                                      Enum.Parse(typeof(OSavingsMethods)' "Cash");                              var paymentMethod = (PaymentMethod)cbSavingsMethod.SelectedItem;                              if (_saving is SavingBookContract)                              {                                  if (savingsMethod == OSavingsMethods.Cheque)                                      ((SavingBookContract)_saving).ChequeDepositFees = updAmountFees.Value;                                  else ((SavingBookContract)_saving).DepositFees = updAmountFees.Value;                              }                                savingServices.Deposit(_saving' _date' _amount' _description' User.CurrentUser' pending'                                  savingsMethod' paymentMethod' null' Teller.CurrentTeller);                              break;                          }                      case OSavingsOperation.Debit:                          {                              var paymentMethod = (PaymentMethod)cbSavingsMethod.SelectedItem;                              if (_saving is SavingBookContract)                              {                                  if (_flatFees.HasValue)                                      ((SavingBookContract)_saving).FlatWithdrawFees = updAmountFees.Value;                                  else ((SavingBookContract)_saving).RateWithdrawFees = (double)(updAmountFees.Value / 100);                              }                                savingServices.Withdraw(_saving' _date' _amount' _description' User.CurrentUser'                                  Teller.CurrentTeller' paymentMethod);                              break;                          }                      case OSavingsOperation.Transfer:                          {                              if (_saving is SavingBookContract)                              {                                  if (_flatFees.HasValue)                                      ((SavingBookContract)_saving).FlatTransferFees = updAmountFees.Value;                                  else ((SavingBookContract)_saving).RateTransferFees = (double)(updAmountFees.Value / 100);                              }                              decimal fee = nudTotalAmount.Value - nudAmount.Value;                              savingServices.Transfer(_saving' _savingTarget' _date' _amount' fee' _description'                                  User.CurrentUser' false);                              break;                          }                        case OSavingsOperation.SpecialOperation:                          {                              OSavingsMethods savingsMethod =                                  (OSavingsMethods)                                      Enum.Parse(typeof(OSavingsMethods)' cbSavingsMethod.SelectedValue.ToString());                              if (cbBookings.SelectedItem != null)                              {                                  Booking booking = (Booking)cbBookings.SelectedItem;                                  booking.Branch = _saving.Branch;                                  savingServices.SpecialOperation(_saving' _date' _amount' _description' User.CurrentUser'                                      savingsMethod' rbxCredit.Checked' booking);                                  break;                              }                              throw new OpenCbsSavingException(OpenCbsSavingExceptionEnum.TransactionInvalid);                          }                  }                    Close();              }              catch (Exception ex)              {                  new frmShowError(CustomExceptionHandler.ShowExceptionText(ex)).ShowDialog();              }
Magic Number,OpenCBS.GUI.Contracts,SavingsOperationForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\SavingsOperationForm.cs,BSaveClick,The following statement contains a magic number: try              {                  _date = new DateTime(dtpDate.Value.Year' dtpDate.Value.Month' dtpDate.Value.Day' TimeProvider.Now.Hour'                      TimeProvider.Now.Minute' TimeProvider.Now.Second);                    SavingServices savingServices = ServicesProvider.GetInstance().GetSavingServices();                    if (_date.Date < TimeProvider.Today.Date)                      savingServices.PerformBackDateOperations(_date);                  else if (_date.Date > TimeProvider.Today.Date)                      savingServices.PerformFutureDateOperations(_date);                    if (_saving.HasPendingEvents())                      if (!savingServices.AllowOperationsDuringPendingDeposit())                          return;                    if ((_flatFees.HasValue && updAmountFees.Value != _flatFees) || (_rateFees.HasValue && updAmountFees.Value != (decimal)(_rateFees * 100)))                      if (!savingServices.AllowSettingSavingsOperationsFeesManually())                          return;                    switch (_bookingDirection)                  {                      case OSavingsOperation.Credit:                          {                              OSavingsMethods savingsMethod =                                  (OSavingsMethods)                                      Enum.Parse(typeof(OSavingsMethods)' "Cash");                              var paymentMethod = (PaymentMethod)cbSavingsMethod.SelectedItem;                              if (_saving is SavingBookContract)                              {                                  if (savingsMethod == OSavingsMethods.Cheque)                                      ((SavingBookContract)_saving).ChequeDepositFees = updAmountFees.Value;                                  else ((SavingBookContract)_saving).DepositFees = updAmountFees.Value;                              }                                savingServices.Deposit(_saving' _date' _amount' _description' User.CurrentUser' pending'                                  savingsMethod' paymentMethod' null' Teller.CurrentTeller);                              break;                          }                      case OSavingsOperation.Debit:                          {                              var paymentMethod = (PaymentMethod)cbSavingsMethod.SelectedItem;                              if (_saving is SavingBookContract)                              {                                  if (_flatFees.HasValue)                                      ((SavingBookContract)_saving).FlatWithdrawFees = updAmountFees.Value;                                  else ((SavingBookContract)_saving).RateWithdrawFees = (double)(updAmountFees.Value / 100);                              }                                savingServices.Withdraw(_saving' _date' _amount' _description' User.CurrentUser'                                  Teller.CurrentTeller' paymentMethod);                              break;                          }                      case OSavingsOperation.Transfer:                          {                              if (_saving is SavingBookContract)                              {                                  if (_flatFees.HasValue)                                      ((SavingBookContract)_saving).FlatTransferFees = updAmountFees.Value;                                  else ((SavingBookContract)_saving).RateTransferFees = (double)(updAmountFees.Value / 100);                              }                              decimal fee = nudTotalAmount.Value - nudAmount.Value;                              savingServices.Transfer(_saving' _savingTarget' _date' _amount' fee' _description'                                  User.CurrentUser' false);                              break;                          }                        case OSavingsOperation.SpecialOperation:                          {                              OSavingsMethods savingsMethod =                                  (OSavingsMethods)                                      Enum.Parse(typeof(OSavingsMethods)' cbSavingsMethod.SelectedValue.ToString());                              if (cbBookings.SelectedItem != null)                              {                                  Booking booking = (Booking)cbBookings.SelectedItem;                                  booking.Branch = _saving.Branch;                                  savingServices.SpecialOperation(_saving' _date' _amount' _description' User.CurrentUser'                                      savingsMethod' rbxCredit.Checked' booking);                                  break;                              }                              throw new OpenCbsSavingException(OpenCbsSavingExceptionEnum.TransactionInvalid);                          }                  }                    Close();              }              catch (Exception ex)              {                  new frmShowError(CustomExceptionHandler.ShowExceptionText(ex)).ShowDialog();              }
Magic Number,OpenCBS.GUI.Contracts,SavingsOperationForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\SavingsOperationForm.cs,BSaveClick,The following statement contains a magic number: try              {                  _date = new DateTime(dtpDate.Value.Year' dtpDate.Value.Month' dtpDate.Value.Day' TimeProvider.Now.Hour'                      TimeProvider.Now.Minute' TimeProvider.Now.Second);                    SavingServices savingServices = ServicesProvider.GetInstance().GetSavingServices();                    if (_date.Date < TimeProvider.Today.Date)                      savingServices.PerformBackDateOperations(_date);                  else if (_date.Date > TimeProvider.Today.Date)                      savingServices.PerformFutureDateOperations(_date);                    if (_saving.HasPendingEvents())                      if (!savingServices.AllowOperationsDuringPendingDeposit())                          return;                    if ((_flatFees.HasValue && updAmountFees.Value != _flatFees) || (_rateFees.HasValue && updAmountFees.Value != (decimal)(_rateFees * 100)))                      if (!savingServices.AllowSettingSavingsOperationsFeesManually())                          return;                    switch (_bookingDirection)                  {                      case OSavingsOperation.Credit:                          {                              OSavingsMethods savingsMethod =                                  (OSavingsMethods)                                      Enum.Parse(typeof(OSavingsMethods)' "Cash");                              var paymentMethod = (PaymentMethod)cbSavingsMethod.SelectedItem;                              if (_saving is SavingBookContract)                              {                                  if (savingsMethod == OSavingsMethods.Cheque)                                      ((SavingBookContract)_saving).ChequeDepositFees = updAmountFees.Value;                                  else ((SavingBookContract)_saving).DepositFees = updAmountFees.Value;                              }                                savingServices.Deposit(_saving' _date' _amount' _description' User.CurrentUser' pending'                                  savingsMethod' paymentMethod' null' Teller.CurrentTeller);                              break;                          }                      case OSavingsOperation.Debit:                          {                              var paymentMethod = (PaymentMethod)cbSavingsMethod.SelectedItem;                              if (_saving is SavingBookContract)                              {                                  if (_flatFees.HasValue)                                      ((SavingBookContract)_saving).FlatWithdrawFees = updAmountFees.Value;                                  else ((SavingBookContract)_saving).RateWithdrawFees = (double)(updAmountFees.Value / 100);                              }                                savingServices.Withdraw(_saving' _date' _amount' _description' User.CurrentUser'                                  Teller.CurrentTeller' paymentMethod);                              break;                          }                      case OSavingsOperation.Transfer:                          {                              if (_saving is SavingBookContract)                              {                                  if (_flatFees.HasValue)                                      ((SavingBookContract)_saving).FlatTransferFees = updAmountFees.Value;                                  else ((SavingBookContract)_saving).RateTransferFees = (double)(updAmountFees.Value / 100);                              }                              decimal fee = nudTotalAmount.Value - nudAmount.Value;                              savingServices.Transfer(_saving' _savingTarget' _date' _amount' fee' _description'                                  User.CurrentUser' false);                              break;                          }                        case OSavingsOperation.SpecialOperation:                          {                              OSavingsMethods savingsMethod =                                  (OSavingsMethods)                                      Enum.Parse(typeof(OSavingsMethods)' cbSavingsMethod.SelectedValue.ToString());                              if (cbBookings.SelectedItem != null)                              {                                  Booking booking = (Booking)cbBookings.SelectedItem;                                  booking.Branch = _saving.Branch;                                  savingServices.SpecialOperation(_saving' _date' _amount' _description' User.CurrentUser'                                      savingsMethod' rbxCredit.Checked' booking);                                  break;                              }                              throw new OpenCbsSavingException(OpenCbsSavingExceptionEnum.TransactionInvalid);                          }                  }                    Close();              }              catch (Exception ex)              {                  new frmShowError(CustomExceptionHandler.ShowExceptionText(ex)).ShowDialog();              }
Magic Number,OpenCBS.GUI.Contracts,SavingsOperationForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\SavingsOperationForm.cs,nudAmount_ValueChanged,The following statement contains a magic number: try              {                  _amount = nudAmount.Value;                  bool isFlat = false;                    if (_saving is SavingBookContract)                  {                      SavingsBookProduct p = (SavingsBookProduct)_saving.Product;                      if (IsNormalTransfer())                      {                          isFlat = p.FlatTransferFees.HasValue || p.FlatTransferFeesMin.HasValue;                      }                      else                      {                          isFlat = p.InterBranchTransferFee.IsFlat;                      }                  }                    OCurrency fee = isFlat ? updAmountFees.Value : _amount * updAmountFees.Value / 100;                  nudTotalAmount.Value = (_amount + fee).Value;              }              catch (Exception ex)              {                  new frmShowError(CustomExceptionHandler.ShowExceptionText(ex)).ShowDialog();              }
Magic Number,OpenCBS.GUI.Contracts,SavingsOperationForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\SavingsOperationForm.cs,LoadNormalTransferFee,The following statement contains a magic number: if (p.FlatTransferFees.HasValue || p.FlatTransferFeesMin.HasValue)              {                  if (p.FlatTransferFees.HasValue)                  {                      _feesMin = _feesMax = p.FlatTransferFees;                  }                  else                  {                      _feesMin = p.FlatTransferFeesMin;                      _feesMax = p.FlatTransferFeesMax;                  }              }              else              {                  if (p.RateTransferFees.HasValue)                  {                      _feesMin = _feesMax = (decimal)p.RateTransferFees * 100;                  }                  else                  {                      _feesMin = (decimal)p.RateTransferFeesMin * 100;                      _feesMax = (decimal)p.RateTransferFeesMax * 100;                  }              }
Magic Number,OpenCBS.GUI.Contracts,SavingsOperationForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\SavingsOperationForm.cs,LoadNormalTransferFee,The following statement contains a magic number: if (p.FlatTransferFees.HasValue || p.FlatTransferFeesMin.HasValue)              {                  if (p.FlatTransferFees.HasValue)                  {                      _feesMin = _feesMax = p.FlatTransferFees;                  }                  else                  {                      _feesMin = p.FlatTransferFeesMin;                      _feesMax = p.FlatTransferFeesMax;                  }              }              else              {                  if (p.RateTransferFees.HasValue)                  {                      _feesMin = _feesMax = (decimal)p.RateTransferFees * 100;                  }                  else                  {                      _feesMin = (decimal)p.RateTransferFeesMin * 100;                      _feesMax = (decimal)p.RateTransferFeesMax * 100;                  }              }
Magic Number,OpenCBS.GUI.Contracts,SavingsOperationForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\SavingsOperationForm.cs,LoadNormalTransferFee,The following statement contains a magic number: if (p.FlatTransferFees.HasValue || p.FlatTransferFeesMin.HasValue)              {                  if (p.FlatTransferFees.HasValue)                  {                      _feesMin = _feesMax = p.FlatTransferFees;                  }                  else                  {                      _feesMin = p.FlatTransferFeesMin;                      _feesMax = p.FlatTransferFeesMax;                  }              }              else              {                  if (p.RateTransferFees.HasValue)                  {                      _feesMin = _feesMax = (decimal)p.RateTransferFees * 100;                  }                  else                  {                      _feesMin = (decimal)p.RateTransferFeesMin * 100;                      _feesMax = (decimal)p.RateTransferFeesMax * 100;                  }              }
Magic Number,OpenCBS.GUI.Contracts,VillageAddLoanForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\VillageAddLoanForm.cs,lvMembers_ItemChecked,The following statement contains a magic number: if (item.Checked && item != _itemTotal)              {                  if (string.IsNullOrEmpty(item.SubItems[IdxAmount].Text)) // Amount                  {                      if (_product.CycleId == null)                      {                          if (_product.Amount.HasValue)                          {                              item.SubItems[IdxAmount].Text = _product.Amount.GetFormatedValue(_product.Currency.UseCents);                              item.SubItems[IdxAmount].Tag = _product.Amount;                          }                          else                          {                              item.SubItems[IdxAmount].Text = _product.AmountMin.GetFormatedValue(_product.Currency.UseCents);                              item.SubItems[IdxAmount].Tag = _product.AmountMin;                          }                      }                      else                      {                          item.SubItems[IdxAmount].Text = ((VillageMember)item.Tag).Product.AmountMin.GetFormatedValue(_product.Currency.UseCents);                      }                                        }                  if (string.IsNullOrEmpty(item.SubItems[IdxCurrency].Text)) // Currency                  {                      if (_product.CycleId == null)                      {                          if (_product.Amount.HasValue)                          {                              item.SubItems[IdxCurrency].Text = _product.Currency.Code;                              item.SubItems[IdxCurrency].Tag = _product.Currency.Code;                          }                          else                          {                              item.SubItems[IdxCurrency].Text = _product.Currency.Code;                              item.SubItems[IdxCurrency].Tag = _product.Currency.Code;                          }                      }                      else                      {                          item.SubItems[IdxCurrency].Text = ((VillageMember) item.Tag).Product.Currency.Code;                      }                    }                  if (string.IsNullOrEmpty(item.SubItems[IdxInterest].Text)) // Interest                  {                      if (_product.CycleId == null)                      {                          if (_product.InterestRate.HasValue)                          {                              item.SubItems[IdxInterest].Text = Math.Round(_product.InterestRate.Value * 100' decimalPlaces).ToString();                              item.SubItems[IdxInterest].Tag = _product.InterestRate;                          }                          else                          {                              item.SubItems[IdxInterest].Text = Math.Round(_product.InterestRateMin.Value * 100' decimalPlaces).ToString();                              item.SubItems[IdxInterest].Tag = _product.InterestRateMin;                          }                      }                      else                      {                          item.SubItems[IdxInterest].Text = Math.Round(((VillageMember)item.Tag).Product.InterestRateMin.Value * 100' decimalPlaces).ToString();                      }                  }                  if (string.IsNullOrEmpty(item.SubItems[IdxGracePeriod].Text)) // Grace period                  {                      if (_product.GracePeriod.HasValue)                      {                          item.SubItems[IdxGracePeriod].Text = _product.GracePeriod.ToString();                          item.SubItems[IdxGracePeriod].Tag = _product.GracePeriod;                      }                      else                      {                          item.SubItems[IdxGracePeriod].Text = _product.GracePeriodMin.ToString();                          item.SubItems[IdxGracePeriod].Tag = _product.GracePeriodMin;                      }                  }                  if (string.IsNullOrEmpty(item.SubItems[IdxInstallments].Text)) // Installments                  {                      if (_product.CycleId == null)                      {                          if (_product.NbOfInstallments.HasValue)                          {                              item.SubItems[IdxInstallments].Text = _product.NbOfInstallments.ToString();                              item.SubItems[IdxInstallments].Tag = _product.NbOfInstallments;                          }                          else                          {                              item.SubItems[IdxInstallments].Text = _product.NbOfInstallmentsMin.ToString();                              item.SubItems[IdxInstallments].Tag = _product.NbOfInstallmentsMin;                          }                      }                      else                      {                          item.SubItems[IdxInstallments].Text = ((VillageMember)item.Tag).Product.NbOfInstallmentsMin.ToString();                      }                                        }                  if (string.IsNullOrEmpty(item.SubItems[IdxLoanOfficer].Text)) // Loan officer                  {                      item.SubItems[IdxLoanOfficer].Text = _village.LoanOfficer.ToString();                      item.SubItems[IdxLoanOfficer].Tag = _village.LoanOfficer;                  }                    if (string.IsNullOrEmpty(item.SubItems[IdxCreationDate].Text)) // Credit Committee date                  {                      item.SubItems[IdxCreationDate].Text = TimeProvider.Today.ToString(ApplicationSettings.GetInstance("").SHORT_DATE_FORMAT);                      item.SubItems[IdxCreationDate].Tag = TimeProvider.Today.ToString(ApplicationSettings.GetInstance("").SHORT_DATE_FORMAT);                  }                    if (string.IsNullOrEmpty(item.SubItems[IdxFundingLine].Text)) // Funding line                  {                      FundingLine fl;                      string flName;                      if (_product.FundingLine != null)                      {                          flName = _product.FundingLine.Name;                          fl = _product.FundingLine;                      }                      else if (cbFundingLine.Items.Count > 0)                      {                          flName = ((FundingLine)cbFundingLine.Items[0]).Name;                          fl = (FundingLine)cbFundingLine.Items[0];                      }                      else                      {                          flName = string.Empty;                          fl = null;                      }                      item.SubItems[IdxFundingLine].Text = flName;                      item.SubItems[IdxFundingLine].Tag = fl;                      _accumulatedAmount = _fLServices.CheckIfAmountIsEnough(fl' decimal.Parse(item.SubItems[2].Text));                      item.SubItems[IdxRemainingFlMoney].Text = _accumulatedAmount.ToString();                      if (_accumulatedAmount <= 0)                      {                          item.BackColor = Color.Red;                      }                      else                          item.BackColor = Color.Transparent;                  }                  if (_product.UseCompulsorySavings && string.IsNullOrEmpty(item.SubItems[IdxCompulsorySavings].Text))                  {                      //item.SubItems[IdxCompulsorySavings]. = _village.                      //item.SubItems[IdxCompulsorySavings].Tag = _village.LoanOfficer;                        cbCompulsorySavings.Items.Clear();                      List<ISavingsContract> savings = ServicesProvider.GetInstance().GetSavingServices().GetSavingsByClientId(((VillageMember)e.Item.Tag).Tiers.Id);                      savings = savings.Where(item2 => item2 is SavingBookContract).ToList(); // Only savings book                        if (savings.Count > 0)                      {                          foreach (SavingBookContract saving in savings) cbCompulsorySavings.Items.Add(saving);                            item.SubItems[IdxCompulsorySavings].Text = savings[0].Code;                          item.SubItems[IdxCompulsorySavings].Tag = savings[0];                      }                  }                  if (_product.UseCompulsorySavings && string.IsNullOrEmpty(item.SubItems[IdxCompulsoryPercentage].Text))                  {                      if (_product.CompulsoryAmount.HasValue)                      {                          item.SubItems[IdxCompulsoryPercentage].Text = _product.CompulsoryAmount.ToString();                          item.SubItems[IdxCompulsoryPercentage].Tag = _product.CompulsoryAmount;                      }                      else                      {                          item.SubItems[IdxCompulsoryPercentage].Text = _product.CompulsoryAmountMin.ToString();                          item.SubItems[IdxCompulsoryPercentage].Tag = _product.CompulsoryAmountMin;                      }                  }                  /*if (string.IsNullOrEmpty(item.SubItems[IdxPaymentMethod].Text))                  {                      cbPaymentMethods.Items.Clear();                      List<PaymentMethod> methods = ServicesProvider.GetInstance().GetPaymentMethodServices().GetAllPaymentMethods();                        if (methods.Count > 0)                      {                          foreach (PaymentMethod method in methods)                              cbPaymentMethods.Items.Add(method.Name);                            item.SubItems[IdxPaymentMethod].Text = methods[0].Name;                          item.SubItems[IdxPaymentMethod].Tag = methods[0].Method;                      }                  }*/              }              else              {                  for (int i = 2; i < item.SubItems.Count; i++)                  {                      item.SubItems[i].Text = "";                  }              }
Magic Number,OpenCBS.GUI.Contracts,VillageAddLoanForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\VillageAddLoanForm.cs,lvMembers_ItemChecked,The following statement contains a magic number: if (item.Checked && item != _itemTotal)              {                  if (string.IsNullOrEmpty(item.SubItems[IdxAmount].Text)) // Amount                  {                      if (_product.CycleId == null)                      {                          if (_product.Amount.HasValue)                          {                              item.SubItems[IdxAmount].Text = _product.Amount.GetFormatedValue(_product.Currency.UseCents);                              item.SubItems[IdxAmount].Tag = _product.Amount;                          }                          else                          {                              item.SubItems[IdxAmount].Text = _product.AmountMin.GetFormatedValue(_product.Currency.UseCents);                              item.SubItems[IdxAmount].Tag = _product.AmountMin;                          }                      }                      else                      {                          item.SubItems[IdxAmount].Text = ((VillageMember)item.Tag).Product.AmountMin.GetFormatedValue(_product.Currency.UseCents);                      }                                        }                  if (string.IsNullOrEmpty(item.SubItems[IdxCurrency].Text)) // Currency                  {                      if (_product.CycleId == null)                      {                          if (_product.Amount.HasValue)                          {                              item.SubItems[IdxCurrency].Text = _product.Currency.Code;                              item.SubItems[IdxCurrency].Tag = _product.Currency.Code;                          }                          else                          {                              item.SubItems[IdxCurrency].Text = _product.Currency.Code;                              item.SubItems[IdxCurrency].Tag = _product.Currency.Code;                          }                      }                      else                      {                          item.SubItems[IdxCurrency].Text = ((VillageMember) item.Tag).Product.Currency.Code;                      }                    }                  if (string.IsNullOrEmpty(item.SubItems[IdxInterest].Text)) // Interest                  {                      if (_product.CycleId == null)                      {                          if (_product.InterestRate.HasValue)                          {                              item.SubItems[IdxInterest].Text = Math.Round(_product.InterestRate.Value * 100' decimalPlaces).ToString();                              item.SubItems[IdxInterest].Tag = _product.InterestRate;                          }                          else                          {                              item.SubItems[IdxInterest].Text = Math.Round(_product.InterestRateMin.Value * 100' decimalPlaces).ToString();                              item.SubItems[IdxInterest].Tag = _product.InterestRateMin;                          }                      }                      else                      {                          item.SubItems[IdxInterest].Text = Math.Round(((VillageMember)item.Tag).Product.InterestRateMin.Value * 100' decimalPlaces).ToString();                      }                  }                  if (string.IsNullOrEmpty(item.SubItems[IdxGracePeriod].Text)) // Grace period                  {                      if (_product.GracePeriod.HasValue)                      {                          item.SubItems[IdxGracePeriod].Text = _product.GracePeriod.ToString();                          item.SubItems[IdxGracePeriod].Tag = _product.GracePeriod;                      }                      else                      {                          item.SubItems[IdxGracePeriod].Text = _product.GracePeriodMin.ToString();                          item.SubItems[IdxGracePeriod].Tag = _product.GracePeriodMin;                      }                  }                  if (string.IsNullOrEmpty(item.SubItems[IdxInstallments].Text)) // Installments                  {                      if (_product.CycleId == null)                      {                          if (_product.NbOfInstallments.HasValue)                          {                              item.SubItems[IdxInstallments].Text = _product.NbOfInstallments.ToString();                              item.SubItems[IdxInstallments].Tag = _product.NbOfInstallments;                          }                          else                          {                              item.SubItems[IdxInstallments].Text = _product.NbOfInstallmentsMin.ToString();                              item.SubItems[IdxInstallments].Tag = _product.NbOfInstallmentsMin;                          }                      }                      else                      {                          item.SubItems[IdxInstallments].Text = ((VillageMember)item.Tag).Product.NbOfInstallmentsMin.ToString();                      }                                        }                  if (string.IsNullOrEmpty(item.SubItems[IdxLoanOfficer].Text)) // Loan officer                  {                      item.SubItems[IdxLoanOfficer].Text = _village.LoanOfficer.ToString();                      item.SubItems[IdxLoanOfficer].Tag = _village.LoanOfficer;                  }                    if (string.IsNullOrEmpty(item.SubItems[IdxCreationDate].Text)) // Credit Committee date                  {                      item.SubItems[IdxCreationDate].Text = TimeProvider.Today.ToString(ApplicationSettings.GetInstance("").SHORT_DATE_FORMAT);                      item.SubItems[IdxCreationDate].Tag = TimeProvider.Today.ToString(ApplicationSettings.GetInstance("").SHORT_DATE_FORMAT);                  }                    if (string.IsNullOrEmpty(item.SubItems[IdxFundingLine].Text)) // Funding line                  {                      FundingLine fl;                      string flName;                      if (_product.FundingLine != null)                      {                          flName = _product.FundingLine.Name;                          fl = _product.FundingLine;                      }                      else if (cbFundingLine.Items.Count > 0)                      {                          flName = ((FundingLine)cbFundingLine.Items[0]).Name;                          fl = (FundingLine)cbFundingLine.Items[0];                      }                      else                      {                          flName = string.Empty;                          fl = null;                      }                      item.SubItems[IdxFundingLine].Text = flName;                      item.SubItems[IdxFundingLine].Tag = fl;                      _accumulatedAmount = _fLServices.CheckIfAmountIsEnough(fl' decimal.Parse(item.SubItems[2].Text));                      item.SubItems[IdxRemainingFlMoney].Text = _accumulatedAmount.ToString();                      if (_accumulatedAmount <= 0)                      {                          item.BackColor = Color.Red;                      }                      else                          item.BackColor = Color.Transparent;                  }                  if (_product.UseCompulsorySavings && string.IsNullOrEmpty(item.SubItems[IdxCompulsorySavings].Text))                  {                      //item.SubItems[IdxCompulsorySavings]. = _village.                      //item.SubItems[IdxCompulsorySavings].Tag = _village.LoanOfficer;                        cbCompulsorySavings.Items.Clear();                      List<ISavingsContract> savings = ServicesProvider.GetInstance().GetSavingServices().GetSavingsByClientId(((VillageMember)e.Item.Tag).Tiers.Id);                      savings = savings.Where(item2 => item2 is SavingBookContract).ToList(); // Only savings book                        if (savings.Count > 0)                      {                          foreach (SavingBookContract saving in savings) cbCompulsorySavings.Items.Add(saving);                            item.SubItems[IdxCompulsorySavings].Text = savings[0].Code;                          item.SubItems[IdxCompulsorySavings].Tag = savings[0];                      }                  }                  if (_product.UseCompulsorySavings && string.IsNullOrEmpty(item.SubItems[IdxCompulsoryPercentage].Text))                  {                      if (_product.CompulsoryAmount.HasValue)                      {                          item.SubItems[IdxCompulsoryPercentage].Text = _product.CompulsoryAmount.ToString();                          item.SubItems[IdxCompulsoryPercentage].Tag = _product.CompulsoryAmount;                      }                      else                      {                          item.SubItems[IdxCompulsoryPercentage].Text = _product.CompulsoryAmountMin.ToString();                          item.SubItems[IdxCompulsoryPercentage].Tag = _product.CompulsoryAmountMin;                      }                  }                  /*if (string.IsNullOrEmpty(item.SubItems[IdxPaymentMethod].Text))                  {                      cbPaymentMethods.Items.Clear();                      List<PaymentMethod> methods = ServicesProvider.GetInstance().GetPaymentMethodServices().GetAllPaymentMethods();                        if (methods.Count > 0)                      {                          foreach (PaymentMethod method in methods)                              cbPaymentMethods.Items.Add(method.Name);                            item.SubItems[IdxPaymentMethod].Text = methods[0].Name;                          item.SubItems[IdxPaymentMethod].Tag = methods[0].Method;                      }                  }*/              }              else              {                  for (int i = 2; i < item.SubItems.Count; i++)                  {                      item.SubItems[i].Text = "";                  }              }
Magic Number,OpenCBS.GUI.Contracts,VillageAddLoanForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\VillageAddLoanForm.cs,lvMembers_ItemChecked,The following statement contains a magic number: if (item.Checked && item != _itemTotal)              {                  if (string.IsNullOrEmpty(item.SubItems[IdxAmount].Text)) // Amount                  {                      if (_product.CycleId == null)                      {                          if (_product.Amount.HasValue)                          {                              item.SubItems[IdxAmount].Text = _product.Amount.GetFormatedValue(_product.Currency.UseCents);                              item.SubItems[IdxAmount].Tag = _product.Amount;                          }                          else                          {                              item.SubItems[IdxAmount].Text = _product.AmountMin.GetFormatedValue(_product.Currency.UseCents);                              item.SubItems[IdxAmount].Tag = _product.AmountMin;                          }                      }                      else                      {                          item.SubItems[IdxAmount].Text = ((VillageMember)item.Tag).Product.AmountMin.GetFormatedValue(_product.Currency.UseCents);                      }                                        }                  if (string.IsNullOrEmpty(item.SubItems[IdxCurrency].Text)) // Currency                  {                      if (_product.CycleId == null)                      {                          if (_product.Amount.HasValue)                          {                              item.SubItems[IdxCurrency].Text = _product.Currency.Code;                              item.SubItems[IdxCurrency].Tag = _product.Currency.Code;                          }                          else                          {                              item.SubItems[IdxCurrency].Text = _product.Currency.Code;                              item.SubItems[IdxCurrency].Tag = _product.Currency.Code;                          }                      }                      else                      {                          item.SubItems[IdxCurrency].Text = ((VillageMember) item.Tag).Product.Currency.Code;                      }                    }                  if (string.IsNullOrEmpty(item.SubItems[IdxInterest].Text)) // Interest                  {                      if (_product.CycleId == null)                      {                          if (_product.InterestRate.HasValue)                          {                              item.SubItems[IdxInterest].Text = Math.Round(_product.InterestRate.Value * 100' decimalPlaces).ToString();                              item.SubItems[IdxInterest].Tag = _product.InterestRate;                          }                          else                          {                              item.SubItems[IdxInterest].Text = Math.Round(_product.InterestRateMin.Value * 100' decimalPlaces).ToString();                              item.SubItems[IdxInterest].Tag = _product.InterestRateMin;                          }                      }                      else                      {                          item.SubItems[IdxInterest].Text = Math.Round(((VillageMember)item.Tag).Product.InterestRateMin.Value * 100' decimalPlaces).ToString();                      }                  }                  if (string.IsNullOrEmpty(item.SubItems[IdxGracePeriod].Text)) // Grace period                  {                      if (_product.GracePeriod.HasValue)                      {                          item.SubItems[IdxGracePeriod].Text = _product.GracePeriod.ToString();                          item.SubItems[IdxGracePeriod].Tag = _product.GracePeriod;                      }                      else                      {                          item.SubItems[IdxGracePeriod].Text = _product.GracePeriodMin.ToString();                          item.SubItems[IdxGracePeriod].Tag = _product.GracePeriodMin;                      }                  }                  if (string.IsNullOrEmpty(item.SubItems[IdxInstallments].Text)) // Installments                  {                      if (_product.CycleId == null)                      {                          if (_product.NbOfInstallments.HasValue)                          {                              item.SubItems[IdxInstallments].Text = _product.NbOfInstallments.ToString();                              item.SubItems[IdxInstallments].Tag = _product.NbOfInstallments;                          }                          else                          {                              item.SubItems[IdxInstallments].Text = _product.NbOfInstallmentsMin.ToString();                              item.SubItems[IdxInstallments].Tag = _product.NbOfInstallmentsMin;                          }                      }                      else                      {                          item.SubItems[IdxInstallments].Text = ((VillageMember)item.Tag).Product.NbOfInstallmentsMin.ToString();                      }                                        }                  if (string.IsNullOrEmpty(item.SubItems[IdxLoanOfficer].Text)) // Loan officer                  {                      item.SubItems[IdxLoanOfficer].Text = _village.LoanOfficer.ToString();                      item.SubItems[IdxLoanOfficer].Tag = _village.LoanOfficer;                  }                    if (string.IsNullOrEmpty(item.SubItems[IdxCreationDate].Text)) // Credit Committee date                  {                      item.SubItems[IdxCreationDate].Text = TimeProvider.Today.ToString(ApplicationSettings.GetInstance("").SHORT_DATE_FORMAT);                      item.SubItems[IdxCreationDate].Tag = TimeProvider.Today.ToString(ApplicationSettings.GetInstance("").SHORT_DATE_FORMAT);                  }                    if (string.IsNullOrEmpty(item.SubItems[IdxFundingLine].Text)) // Funding line                  {                      FundingLine fl;                      string flName;                      if (_product.FundingLine != null)                      {                          flName = _product.FundingLine.Name;                          fl = _product.FundingLine;                      }                      else if (cbFundingLine.Items.Count > 0)                      {                          flName = ((FundingLine)cbFundingLine.Items[0]).Name;                          fl = (FundingLine)cbFundingLine.Items[0];                      }                      else                      {                          flName = string.Empty;                          fl = null;                      }                      item.SubItems[IdxFundingLine].Text = flName;                      item.SubItems[IdxFundingLine].Tag = fl;                      _accumulatedAmount = _fLServices.CheckIfAmountIsEnough(fl' decimal.Parse(item.SubItems[2].Text));                      item.SubItems[IdxRemainingFlMoney].Text = _accumulatedAmount.ToString();                      if (_accumulatedAmount <= 0)                      {                          item.BackColor = Color.Red;                      }                      else                          item.BackColor = Color.Transparent;                  }                  if (_product.UseCompulsorySavings && string.IsNullOrEmpty(item.SubItems[IdxCompulsorySavings].Text))                  {                      //item.SubItems[IdxCompulsorySavings]. = _village.                      //item.SubItems[IdxCompulsorySavings].Tag = _village.LoanOfficer;                        cbCompulsorySavings.Items.Clear();                      List<ISavingsContract> savings = ServicesProvider.GetInstance().GetSavingServices().GetSavingsByClientId(((VillageMember)e.Item.Tag).Tiers.Id);                      savings = savings.Where(item2 => item2 is SavingBookContract).ToList(); // Only savings book                        if (savings.Count > 0)                      {                          foreach (SavingBookContract saving in savings) cbCompulsorySavings.Items.Add(saving);                            item.SubItems[IdxCompulsorySavings].Text = savings[0].Code;                          item.SubItems[IdxCompulsorySavings].Tag = savings[0];                      }                  }                  if (_product.UseCompulsorySavings && string.IsNullOrEmpty(item.SubItems[IdxCompulsoryPercentage].Text))                  {                      if (_product.CompulsoryAmount.HasValue)                      {                          item.SubItems[IdxCompulsoryPercentage].Text = _product.CompulsoryAmount.ToString();                          item.SubItems[IdxCompulsoryPercentage].Tag = _product.CompulsoryAmount;                      }                      else                      {                          item.SubItems[IdxCompulsoryPercentage].Text = _product.CompulsoryAmountMin.ToString();                          item.SubItems[IdxCompulsoryPercentage].Tag = _product.CompulsoryAmountMin;                      }                  }                  /*if (string.IsNullOrEmpty(item.SubItems[IdxPaymentMethod].Text))                  {                      cbPaymentMethods.Items.Clear();                      List<PaymentMethod> methods = ServicesProvider.GetInstance().GetPaymentMethodServices().GetAllPaymentMethods();                        if (methods.Count > 0)                      {                          foreach (PaymentMethod method in methods)                              cbPaymentMethods.Items.Add(method.Name);                            item.SubItems[IdxPaymentMethod].Text = methods[0].Name;                          item.SubItems[IdxPaymentMethod].Tag = methods[0].Method;                      }                  }*/              }              else              {                  for (int i = 2; i < item.SubItems.Count; i++)                  {                      item.SubItems[i].Text = "";                  }              }
Magic Number,OpenCBS.GUI.Contracts,VillageAddLoanForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\VillageAddLoanForm.cs,lvMembers_ItemChecked,The following statement contains a magic number: if (item.Checked && item != _itemTotal)              {                  if (string.IsNullOrEmpty(item.SubItems[IdxAmount].Text)) // Amount                  {                      if (_product.CycleId == null)                      {                          if (_product.Amount.HasValue)                          {                              item.SubItems[IdxAmount].Text = _product.Amount.GetFormatedValue(_product.Currency.UseCents);                              item.SubItems[IdxAmount].Tag = _product.Amount;                          }                          else                          {                              item.SubItems[IdxAmount].Text = _product.AmountMin.GetFormatedValue(_product.Currency.UseCents);                              item.SubItems[IdxAmount].Tag = _product.AmountMin;                          }                      }                      else                      {                          item.SubItems[IdxAmount].Text = ((VillageMember)item.Tag).Product.AmountMin.GetFormatedValue(_product.Currency.UseCents);                      }                                        }                  if (string.IsNullOrEmpty(item.SubItems[IdxCurrency].Text)) // Currency                  {                      if (_product.CycleId == null)                      {                          if (_product.Amount.HasValue)                          {                              item.SubItems[IdxCurrency].Text = _product.Currency.Code;                              item.SubItems[IdxCurrency].Tag = _product.Currency.Code;                          }                          else                          {                              item.SubItems[IdxCurrency].Text = _product.Currency.Code;                              item.SubItems[IdxCurrency].Tag = _product.Currency.Code;                          }                      }                      else                      {                          item.SubItems[IdxCurrency].Text = ((VillageMember) item.Tag).Product.Currency.Code;                      }                    }                  if (string.IsNullOrEmpty(item.SubItems[IdxInterest].Text)) // Interest                  {                      if (_product.CycleId == null)                      {                          if (_product.InterestRate.HasValue)                          {                              item.SubItems[IdxInterest].Text = Math.Round(_product.InterestRate.Value * 100' decimalPlaces).ToString();                              item.SubItems[IdxInterest].Tag = _product.InterestRate;                          }                          else                          {                              item.SubItems[IdxInterest].Text = Math.Round(_product.InterestRateMin.Value * 100' decimalPlaces).ToString();                              item.SubItems[IdxInterest].Tag = _product.InterestRateMin;                          }                      }                      else                      {                          item.SubItems[IdxInterest].Text = Math.Round(((VillageMember)item.Tag).Product.InterestRateMin.Value * 100' decimalPlaces).ToString();                      }                  }                  if (string.IsNullOrEmpty(item.SubItems[IdxGracePeriod].Text)) // Grace period                  {                      if (_product.GracePeriod.HasValue)                      {                          item.SubItems[IdxGracePeriod].Text = _product.GracePeriod.ToString();                          item.SubItems[IdxGracePeriod].Tag = _product.GracePeriod;                      }                      else                      {                          item.SubItems[IdxGracePeriod].Text = _product.GracePeriodMin.ToString();                          item.SubItems[IdxGracePeriod].Tag = _product.GracePeriodMin;                      }                  }                  if (string.IsNullOrEmpty(item.SubItems[IdxInstallments].Text)) // Installments                  {                      if (_product.CycleId == null)                      {                          if (_product.NbOfInstallments.HasValue)                          {                              item.SubItems[IdxInstallments].Text = _product.NbOfInstallments.ToString();                              item.SubItems[IdxInstallments].Tag = _product.NbOfInstallments;                          }                          else                          {                              item.SubItems[IdxInstallments].Text = _product.NbOfInstallmentsMin.ToString();                              item.SubItems[IdxInstallments].Tag = _product.NbOfInstallmentsMin;                          }                      }                      else                      {                          item.SubItems[IdxInstallments].Text = ((VillageMember)item.Tag).Product.NbOfInstallmentsMin.ToString();                      }                                        }                  if (string.IsNullOrEmpty(item.SubItems[IdxLoanOfficer].Text)) // Loan officer                  {                      item.SubItems[IdxLoanOfficer].Text = _village.LoanOfficer.ToString();                      item.SubItems[IdxLoanOfficer].Tag = _village.LoanOfficer;                  }                    if (string.IsNullOrEmpty(item.SubItems[IdxCreationDate].Text)) // Credit Committee date                  {                      item.SubItems[IdxCreationDate].Text = TimeProvider.Today.ToString(ApplicationSettings.GetInstance("").SHORT_DATE_FORMAT);                      item.SubItems[IdxCreationDate].Tag = TimeProvider.Today.ToString(ApplicationSettings.GetInstance("").SHORT_DATE_FORMAT);                  }                    if (string.IsNullOrEmpty(item.SubItems[IdxFundingLine].Text)) // Funding line                  {                      FundingLine fl;                      string flName;                      if (_product.FundingLine != null)                      {                          flName = _product.FundingLine.Name;                          fl = _product.FundingLine;                      }                      else if (cbFundingLine.Items.Count > 0)                      {                          flName = ((FundingLine)cbFundingLine.Items[0]).Name;                          fl = (FundingLine)cbFundingLine.Items[0];                      }                      else                      {                          flName = string.Empty;                          fl = null;                      }                      item.SubItems[IdxFundingLine].Text = flName;                      item.SubItems[IdxFundingLine].Tag = fl;                      _accumulatedAmount = _fLServices.CheckIfAmountIsEnough(fl' decimal.Parse(item.SubItems[2].Text));                      item.SubItems[IdxRemainingFlMoney].Text = _accumulatedAmount.ToString();                      if (_accumulatedAmount <= 0)                      {                          item.BackColor = Color.Red;                      }                      else                          item.BackColor = Color.Transparent;                  }                  if (_product.UseCompulsorySavings && string.IsNullOrEmpty(item.SubItems[IdxCompulsorySavings].Text))                  {                      //item.SubItems[IdxCompulsorySavings]. = _village.                      //item.SubItems[IdxCompulsorySavings].Tag = _village.LoanOfficer;                        cbCompulsorySavings.Items.Clear();                      List<ISavingsContract> savings = ServicesProvider.GetInstance().GetSavingServices().GetSavingsByClientId(((VillageMember)e.Item.Tag).Tiers.Id);                      savings = savings.Where(item2 => item2 is SavingBookContract).ToList(); // Only savings book                        if (savings.Count > 0)                      {                          foreach (SavingBookContract saving in savings) cbCompulsorySavings.Items.Add(saving);                            item.SubItems[IdxCompulsorySavings].Text = savings[0].Code;                          item.SubItems[IdxCompulsorySavings].Tag = savings[0];                      }                  }                  if (_product.UseCompulsorySavings && string.IsNullOrEmpty(item.SubItems[IdxCompulsoryPercentage].Text))                  {                      if (_product.CompulsoryAmount.HasValue)                      {                          item.SubItems[IdxCompulsoryPercentage].Text = _product.CompulsoryAmount.ToString();                          item.SubItems[IdxCompulsoryPercentage].Tag = _product.CompulsoryAmount;                      }                      else                      {                          item.SubItems[IdxCompulsoryPercentage].Text = _product.CompulsoryAmountMin.ToString();                          item.SubItems[IdxCompulsoryPercentage].Tag = _product.CompulsoryAmountMin;                      }                  }                  /*if (string.IsNullOrEmpty(item.SubItems[IdxPaymentMethod].Text))                  {                      cbPaymentMethods.Items.Clear();                      List<PaymentMethod> methods = ServicesProvider.GetInstance().GetPaymentMethodServices().GetAllPaymentMethods();                        if (methods.Count > 0)                      {                          foreach (PaymentMethod method in methods)                              cbPaymentMethods.Items.Add(method.Name);                            item.SubItems[IdxPaymentMethod].Text = methods[0].Name;                          item.SubItems[IdxPaymentMethod].Tag = methods[0].Method;                      }                  }*/              }              else              {                  for (int i = 2; i < item.SubItems.Count; i++)                  {                      item.SubItems[i].Text = "";                  }              }
Magic Number,OpenCBS.GUI.Contracts,VillageAddLoanForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\VillageAddLoanForm.cs,lvMembers_ItemChecked,The following statement contains a magic number: if (item.Checked && item != _itemTotal)              {                  if (string.IsNullOrEmpty(item.SubItems[IdxAmount].Text)) // Amount                  {                      if (_product.CycleId == null)                      {                          if (_product.Amount.HasValue)                          {                              item.SubItems[IdxAmount].Text = _product.Amount.GetFormatedValue(_product.Currency.UseCents);                              item.SubItems[IdxAmount].Tag = _product.Amount;                          }                          else                          {                              item.SubItems[IdxAmount].Text = _product.AmountMin.GetFormatedValue(_product.Currency.UseCents);                              item.SubItems[IdxAmount].Tag = _product.AmountMin;                          }                      }                      else                      {                          item.SubItems[IdxAmount].Text = ((VillageMember)item.Tag).Product.AmountMin.GetFormatedValue(_product.Currency.UseCents);                      }                                        }                  if (string.IsNullOrEmpty(item.SubItems[IdxCurrency].Text)) // Currency                  {                      if (_product.CycleId == null)                      {                          if (_product.Amount.HasValue)                          {                              item.SubItems[IdxCurrency].Text = _product.Currency.Code;                              item.SubItems[IdxCurrency].Tag = _product.Currency.Code;                          }                          else                          {                              item.SubItems[IdxCurrency].Text = _product.Currency.Code;                              item.SubItems[IdxCurrency].Tag = _product.Currency.Code;                          }                      }                      else                      {                          item.SubItems[IdxCurrency].Text = ((VillageMember) item.Tag).Product.Currency.Code;                      }                    }                  if (string.IsNullOrEmpty(item.SubItems[IdxInterest].Text)) // Interest                  {                      if (_product.CycleId == null)                      {                          if (_product.InterestRate.HasValue)                          {                              item.SubItems[IdxInterest].Text = Math.Round(_product.InterestRate.Value * 100' decimalPlaces).ToString();                              item.SubItems[IdxInterest].Tag = _product.InterestRate;                          }                          else                          {                              item.SubItems[IdxInterest].Text = Math.Round(_product.InterestRateMin.Value * 100' decimalPlaces).ToString();                              item.SubItems[IdxInterest].Tag = _product.InterestRateMin;                          }                      }                      else                      {                          item.SubItems[IdxInterest].Text = Math.Round(((VillageMember)item.Tag).Product.InterestRateMin.Value * 100' decimalPlaces).ToString();                      }                  }                  if (string.IsNullOrEmpty(item.SubItems[IdxGracePeriod].Text)) // Grace period                  {                      if (_product.GracePeriod.HasValue)                      {                          item.SubItems[IdxGracePeriod].Text = _product.GracePeriod.ToString();                          item.SubItems[IdxGracePeriod].Tag = _product.GracePeriod;                      }                      else                      {                          item.SubItems[IdxGracePeriod].Text = _product.GracePeriodMin.ToString();                          item.SubItems[IdxGracePeriod].Tag = _product.GracePeriodMin;                      }                  }                  if (string.IsNullOrEmpty(item.SubItems[IdxInstallments].Text)) // Installments                  {                      if (_product.CycleId == null)                      {                          if (_product.NbOfInstallments.HasValue)                          {                              item.SubItems[IdxInstallments].Text = _product.NbOfInstallments.ToString();                              item.SubItems[IdxInstallments].Tag = _product.NbOfInstallments;                          }                          else                          {                              item.SubItems[IdxInstallments].Text = _product.NbOfInstallmentsMin.ToString();                              item.SubItems[IdxInstallments].Tag = _product.NbOfInstallmentsMin;                          }                      }                      else                      {                          item.SubItems[IdxInstallments].Text = ((VillageMember)item.Tag).Product.NbOfInstallmentsMin.ToString();                      }                                        }                  if (string.IsNullOrEmpty(item.SubItems[IdxLoanOfficer].Text)) // Loan officer                  {                      item.SubItems[IdxLoanOfficer].Text = _village.LoanOfficer.ToString();                      item.SubItems[IdxLoanOfficer].Tag = _village.LoanOfficer;                  }                    if (string.IsNullOrEmpty(item.SubItems[IdxCreationDate].Text)) // Credit Committee date                  {                      item.SubItems[IdxCreationDate].Text = TimeProvider.Today.ToString(ApplicationSettings.GetInstance("").SHORT_DATE_FORMAT);                      item.SubItems[IdxCreationDate].Tag = TimeProvider.Today.ToString(ApplicationSettings.GetInstance("").SHORT_DATE_FORMAT);                  }                    if (string.IsNullOrEmpty(item.SubItems[IdxFundingLine].Text)) // Funding line                  {                      FundingLine fl;                      string flName;                      if (_product.FundingLine != null)                      {                          flName = _product.FundingLine.Name;                          fl = _product.FundingLine;                      }                      else if (cbFundingLine.Items.Count > 0)                      {                          flName = ((FundingLine)cbFundingLine.Items[0]).Name;                          fl = (FundingLine)cbFundingLine.Items[0];                      }                      else                      {                          flName = string.Empty;                          fl = null;                      }                      item.SubItems[IdxFundingLine].Text = flName;                      item.SubItems[IdxFundingLine].Tag = fl;                      _accumulatedAmount = _fLServices.CheckIfAmountIsEnough(fl' decimal.Parse(item.SubItems[2].Text));                      item.SubItems[IdxRemainingFlMoney].Text = _accumulatedAmount.ToString();                      if (_accumulatedAmount <= 0)                      {                          item.BackColor = Color.Red;                      }                      else                          item.BackColor = Color.Transparent;                  }                  if (_product.UseCompulsorySavings && string.IsNullOrEmpty(item.SubItems[IdxCompulsorySavings].Text))                  {                      //item.SubItems[IdxCompulsorySavings]. = _village.                      //item.SubItems[IdxCompulsorySavings].Tag = _village.LoanOfficer;                        cbCompulsorySavings.Items.Clear();                      List<ISavingsContract> savings = ServicesProvider.GetInstance().GetSavingServices().GetSavingsByClientId(((VillageMember)e.Item.Tag).Tiers.Id);                      savings = savings.Where(item2 => item2 is SavingBookContract).ToList(); // Only savings book                        if (savings.Count > 0)                      {                          foreach (SavingBookContract saving in savings) cbCompulsorySavings.Items.Add(saving);                            item.SubItems[IdxCompulsorySavings].Text = savings[0].Code;                          item.SubItems[IdxCompulsorySavings].Tag = savings[0];                      }                  }                  if (_product.UseCompulsorySavings && string.IsNullOrEmpty(item.SubItems[IdxCompulsoryPercentage].Text))                  {                      if (_product.CompulsoryAmount.HasValue)                      {                          item.SubItems[IdxCompulsoryPercentage].Text = _product.CompulsoryAmount.ToString();                          item.SubItems[IdxCompulsoryPercentage].Tag = _product.CompulsoryAmount;                      }                      else                      {                          item.SubItems[IdxCompulsoryPercentage].Text = _product.CompulsoryAmountMin.ToString();                          item.SubItems[IdxCompulsoryPercentage].Tag = _product.CompulsoryAmountMin;                      }                  }                  /*if (string.IsNullOrEmpty(item.SubItems[IdxPaymentMethod].Text))                  {                      cbPaymentMethods.Items.Clear();                      List<PaymentMethod> methods = ServicesProvider.GetInstance().GetPaymentMethodServices().GetAllPaymentMethods();                        if (methods.Count > 0)                      {                          foreach (PaymentMethod method in methods)                              cbPaymentMethods.Items.Add(method.Name);                            item.SubItems[IdxPaymentMethod].Text = methods[0].Name;                          item.SubItems[IdxPaymentMethod].Tag = methods[0].Method;                      }                  }*/              }              else              {                  for (int i = 2; i < item.SubItems.Count; i++)                  {                      item.SubItems[i].Text = "";                  }              }
Magic Number,OpenCBS.GUI.Contracts,VillageAddLoanForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\VillageAddLoanForm.cs,lvMembers_SubItemEndEditing,The following statement contains a magic number: switch (e.SubItem)              {                  case IdxAmount: // Amount                                            OCurrency temp;                      try                      {                          temp = decimal.Parse(e.DisplayText);                      }                      catch                      {                          temp = (OCurrency)e.Item.SubItems[e.SubItem].Tag;                      }                        if (_product.CycleId != null)                      {                          LoanProduct product = ((VillageMember) e.Item.Tag).Product;                          temp = temp < product.AmountMin ? product.AmountMin : temp;                          temp = temp > product.AmountMax ? product.AmountMax : temp;                      }                      else                      {                          temp = temp < _product.AmountMin ? _product.AmountMin : temp;                          temp = temp > _product.AmountMax ? _product.AmountMax : temp;                      }                      e.DisplayText = temp.GetFormatedValue(_product.Currency.UseCents);                      e.Item.SubItems[e.SubItem].Tag = temp;                      e.Item.SubItems[e.SubItem].Text = e.DisplayText;                      _accumulatedAmount = _fLServices.CheckIfAmountIsEnough(e.Item.SubItems[IdxFundingLine].Tag as FundingLine' temp.Value);                      e.Item.SubItems[IdxRemainingFlMoney].Text = _accumulatedAmount.ToString();                        if (_accumulatedAmount <= 0)                      {                          lvMembers.Items[e.Item.Index].BackColor = Color.Red;                      }                      else                      {                          lvMembers.Items[e.Item.Index].BackColor = Color.Transparent;                      }                      UpdateTotal();                      break;                    case IdxInterest: // Interest                      decimal i;                      try                      {                          i = decimal.Parse(e.DisplayText);                          i = i / 100;                      }                      catch                      {                          i = (decimal)e.Item.SubItems[e.SubItem].Tag;                      }                      if (_product.CycleId == null)                      {                          i = i < _product.InterestRateMin.Value ? _product.InterestRateMin.Value : i;                          i = i > _product.InterestRateMax.Value ? _product.InterestRateMax.Value : i;                      }                      else                      {                          i = i < ((VillageMember) e.Item.Tag).Product.InterestRateMin.Value                                  ? ((VillageMember) e.Item.Tag).Product.InterestRateMin.Value                                  : i;                          i = i > ((VillageMember)e.Item.Tag).Product.InterestRateMax.Value                                  ? ((VillageMember)e.Item.Tag).Product.InterestRateMax.Value                                  : i;                        }                                            e.DisplayText = Math.Round(i * 100' decimalPlaces).ToString();                      e.Item.SubItems[e.SubItem].Tag = i;                      break;                    case IdxGracePeriod: // Grace period                      e.Item.SubItems[e.SubItem].Tag = int.Parse(e.DisplayText);                      break;                    case IdxInstallments: // Number of installments                      int? temp1;                      try                      {                          temp1 = int.Parse(e.DisplayText);                      }                      catch                      {                          temp1 = (int)e.Item.SubItems[e.SubItem].Tag;                      }                        if (_product.CycleId != null)                      {                          LoanProduct product = ((VillageMember)e.Item.Tag).Product;                          temp1 = temp1 < product.NbOfInstallmentsMin ? product.NbOfInstallmentsMin : temp1;                          temp1 = temp1 > product.NbOfInstallmentsMax ? product.NbOfInstallmentsMax : temp1;                      }                      else                      {                          temp1 = temp1 < _product.NbOfInstallmentsMin ? _product.NbOfInstallmentsMin : temp1;                          temp1 = temp1 > _product.NbOfInstallmentsMax ? _product.NbOfInstallmentsMax : temp1;                      }                      e.DisplayText = temp1.ToString();                      e.Item.SubItems[e.SubItem].Tag = temp1;                      break;                                        case IdxLoanOfficer: // Loan officer                      e.Item.SubItems[e.SubItem].Tag = cbLoanOfficer.SelectedItem;                      break;                    case IdxFundingLine: //Funding line                      FundingLine fl = (FundingLine)cbFundingLine.SelectedItem;                      if (fl != (e.Item.SubItems[e.SubItem].Tag as FundingLine))                      {                          e.Item.SubItems[e.SubItem].Tag = cbFundingLine.SelectedItem;                            _accumulatedAmount = _fLServices.CheckIfAmountIsEnough(fl' decimal.Parse(e.Item.SubItems[2].Text));                          e.Item.SubItems[IdxRemainingFlMoney].Text = _accumulatedAmount.ToString();                            if (_accumulatedAmount <= 0)                          {                              lvMembers.Items[e.Item.Index].BackColor = Color.Red;                          }                          else                          {                              lvMembers.Items[e.Item.Index].BackColor = Color.Transparent;                          }                      }                      break;                                    case IdxCreationDate:                      e.Item.SubItems[e.SubItem].Tag = _CreditCommitteeDate;                      break;                    case IdxCompulsorySavings: // Compulsory savings                      if (_product.UseCompulsorySavings)                          e.Item.SubItems[e.SubItem].Tag = cbCompulsorySavings.SelectedItem;                      break;                    case IdxCompulsoryPercentage: // Compulsory percentage                      if (_product.UseCompulsorySavings)                          e.Item.SubItems[e.SubItem].Tag = int.Parse(e.DisplayText);                      break;                  /*                  case IdxPaymentMethod:                          e.Item.SubItems[e.SubItem].Tag = cbPaymentMethods.SelectedItem;                      break;                      */                  default:                      break;              }
Magic Number,OpenCBS.GUI.Contracts,VillageAddLoanForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\VillageAddLoanForm.cs,lvMembers_SubItemEndEditing,The following statement contains a magic number: switch (e.SubItem)              {                  case IdxAmount: // Amount                                            OCurrency temp;                      try                      {                          temp = decimal.Parse(e.DisplayText);                      }                      catch                      {                          temp = (OCurrency)e.Item.SubItems[e.SubItem].Tag;                      }                        if (_product.CycleId != null)                      {                          LoanProduct product = ((VillageMember) e.Item.Tag).Product;                          temp = temp < product.AmountMin ? product.AmountMin : temp;                          temp = temp > product.AmountMax ? product.AmountMax : temp;                      }                      else                      {                          temp = temp < _product.AmountMin ? _product.AmountMin : temp;                          temp = temp > _product.AmountMax ? _product.AmountMax : temp;                      }                      e.DisplayText = temp.GetFormatedValue(_product.Currency.UseCents);                      e.Item.SubItems[e.SubItem].Tag = temp;                      e.Item.SubItems[e.SubItem].Text = e.DisplayText;                      _accumulatedAmount = _fLServices.CheckIfAmountIsEnough(e.Item.SubItems[IdxFundingLine].Tag as FundingLine' temp.Value);                      e.Item.SubItems[IdxRemainingFlMoney].Text = _accumulatedAmount.ToString();                        if (_accumulatedAmount <= 0)                      {                          lvMembers.Items[e.Item.Index].BackColor = Color.Red;                      }                      else                      {                          lvMembers.Items[e.Item.Index].BackColor = Color.Transparent;                      }                      UpdateTotal();                      break;                    case IdxInterest: // Interest                      decimal i;                      try                      {                          i = decimal.Parse(e.DisplayText);                          i = i / 100;                      }                      catch                      {                          i = (decimal)e.Item.SubItems[e.SubItem].Tag;                      }                      if (_product.CycleId == null)                      {                          i = i < _product.InterestRateMin.Value ? _product.InterestRateMin.Value : i;                          i = i > _product.InterestRateMax.Value ? _product.InterestRateMax.Value : i;                      }                      else                      {                          i = i < ((VillageMember) e.Item.Tag).Product.InterestRateMin.Value                                  ? ((VillageMember) e.Item.Tag).Product.InterestRateMin.Value                                  : i;                          i = i > ((VillageMember)e.Item.Tag).Product.InterestRateMax.Value                                  ? ((VillageMember)e.Item.Tag).Product.InterestRateMax.Value                                  : i;                        }                                            e.DisplayText = Math.Round(i * 100' decimalPlaces).ToString();                      e.Item.SubItems[e.SubItem].Tag = i;                      break;                    case IdxGracePeriod: // Grace period                      e.Item.SubItems[e.SubItem].Tag = int.Parse(e.DisplayText);                      break;                    case IdxInstallments: // Number of installments                      int? temp1;                      try                      {                          temp1 = int.Parse(e.DisplayText);                      }                      catch                      {                          temp1 = (int)e.Item.SubItems[e.SubItem].Tag;                      }                        if (_product.CycleId != null)                      {                          LoanProduct product = ((VillageMember)e.Item.Tag).Product;                          temp1 = temp1 < product.NbOfInstallmentsMin ? product.NbOfInstallmentsMin : temp1;                          temp1 = temp1 > product.NbOfInstallmentsMax ? product.NbOfInstallmentsMax : temp1;                      }                      else                      {                          temp1 = temp1 < _product.NbOfInstallmentsMin ? _product.NbOfInstallmentsMin : temp1;                          temp1 = temp1 > _product.NbOfInstallmentsMax ? _product.NbOfInstallmentsMax : temp1;                      }                      e.DisplayText = temp1.ToString();                      e.Item.SubItems[e.SubItem].Tag = temp1;                      break;                                        case IdxLoanOfficer: // Loan officer                      e.Item.SubItems[e.SubItem].Tag = cbLoanOfficer.SelectedItem;                      break;                    case IdxFundingLine: //Funding line                      FundingLine fl = (FundingLine)cbFundingLine.SelectedItem;                      if (fl != (e.Item.SubItems[e.SubItem].Tag as FundingLine))                      {                          e.Item.SubItems[e.SubItem].Tag = cbFundingLine.SelectedItem;                            _accumulatedAmount = _fLServices.CheckIfAmountIsEnough(fl' decimal.Parse(e.Item.SubItems[2].Text));                          e.Item.SubItems[IdxRemainingFlMoney].Text = _accumulatedAmount.ToString();                            if (_accumulatedAmount <= 0)                          {                              lvMembers.Items[e.Item.Index].BackColor = Color.Red;                          }                          else                          {                              lvMembers.Items[e.Item.Index].BackColor = Color.Transparent;                          }                      }                      break;                                    case IdxCreationDate:                      e.Item.SubItems[e.SubItem].Tag = _CreditCommitteeDate;                      break;                    case IdxCompulsorySavings: // Compulsory savings                      if (_product.UseCompulsorySavings)                          e.Item.SubItems[e.SubItem].Tag = cbCompulsorySavings.SelectedItem;                      break;                    case IdxCompulsoryPercentage: // Compulsory percentage                      if (_product.UseCompulsorySavings)                          e.Item.SubItems[e.SubItem].Tag = int.Parse(e.DisplayText);                      break;                  /*                  case IdxPaymentMethod:                          e.Item.SubItems[e.SubItem].Tag = cbPaymentMethods.SelectedItem;                      break;                      */                  default:                      break;              }
Magic Number,OpenCBS.GUI.Contracts,VillageAddLoanForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\VillageAddLoanForm.cs,lvMembers_SubItemEndEditing,The following statement contains a magic number: switch (e.SubItem)              {                  case IdxAmount: // Amount                                            OCurrency temp;                      try                      {                          temp = decimal.Parse(e.DisplayText);                      }                      catch                      {                          temp = (OCurrency)e.Item.SubItems[e.SubItem].Tag;                      }                        if (_product.CycleId != null)                      {                          LoanProduct product = ((VillageMember) e.Item.Tag).Product;                          temp = temp < product.AmountMin ? product.AmountMin : temp;                          temp = temp > product.AmountMax ? product.AmountMax : temp;                      }                      else                      {                          temp = temp < _product.AmountMin ? _product.AmountMin : temp;                          temp = temp > _product.AmountMax ? _product.AmountMax : temp;                      }                      e.DisplayText = temp.GetFormatedValue(_product.Currency.UseCents);                      e.Item.SubItems[e.SubItem].Tag = temp;                      e.Item.SubItems[e.SubItem].Text = e.DisplayText;                      _accumulatedAmount = _fLServices.CheckIfAmountIsEnough(e.Item.SubItems[IdxFundingLine].Tag as FundingLine' temp.Value);                      e.Item.SubItems[IdxRemainingFlMoney].Text = _accumulatedAmount.ToString();                        if (_accumulatedAmount <= 0)                      {                          lvMembers.Items[e.Item.Index].BackColor = Color.Red;                      }                      else                      {                          lvMembers.Items[e.Item.Index].BackColor = Color.Transparent;                      }                      UpdateTotal();                      break;                    case IdxInterest: // Interest                      decimal i;                      try                      {                          i = decimal.Parse(e.DisplayText);                          i = i / 100;                      }                      catch                      {                          i = (decimal)e.Item.SubItems[e.SubItem].Tag;                      }                      if (_product.CycleId == null)                      {                          i = i < _product.InterestRateMin.Value ? _product.InterestRateMin.Value : i;                          i = i > _product.InterestRateMax.Value ? _product.InterestRateMax.Value : i;                      }                      else                      {                          i = i < ((VillageMember) e.Item.Tag).Product.InterestRateMin.Value                                  ? ((VillageMember) e.Item.Tag).Product.InterestRateMin.Value                                  : i;                          i = i > ((VillageMember)e.Item.Tag).Product.InterestRateMax.Value                                  ? ((VillageMember)e.Item.Tag).Product.InterestRateMax.Value                                  : i;                        }                                            e.DisplayText = Math.Round(i * 100' decimalPlaces).ToString();                      e.Item.SubItems[e.SubItem].Tag = i;                      break;                    case IdxGracePeriod: // Grace period                      e.Item.SubItems[e.SubItem].Tag = int.Parse(e.DisplayText);                      break;                    case IdxInstallments: // Number of installments                      int? temp1;                      try                      {                          temp1 = int.Parse(e.DisplayText);                      }                      catch                      {                          temp1 = (int)e.Item.SubItems[e.SubItem].Tag;                      }                        if (_product.CycleId != null)                      {                          LoanProduct product = ((VillageMember)e.Item.Tag).Product;                          temp1 = temp1 < product.NbOfInstallmentsMin ? product.NbOfInstallmentsMin : temp1;                          temp1 = temp1 > product.NbOfInstallmentsMax ? product.NbOfInstallmentsMax : temp1;                      }                      else                      {                          temp1 = temp1 < _product.NbOfInstallmentsMin ? _product.NbOfInstallmentsMin : temp1;                          temp1 = temp1 > _product.NbOfInstallmentsMax ? _product.NbOfInstallmentsMax : temp1;                      }                      e.DisplayText = temp1.ToString();                      e.Item.SubItems[e.SubItem].Tag = temp1;                      break;                                        case IdxLoanOfficer: // Loan officer                      e.Item.SubItems[e.SubItem].Tag = cbLoanOfficer.SelectedItem;                      break;                    case IdxFundingLine: //Funding line                      FundingLine fl = (FundingLine)cbFundingLine.SelectedItem;                      if (fl != (e.Item.SubItems[e.SubItem].Tag as FundingLine))                      {                          e.Item.SubItems[e.SubItem].Tag = cbFundingLine.SelectedItem;                            _accumulatedAmount = _fLServices.CheckIfAmountIsEnough(fl' decimal.Parse(e.Item.SubItems[2].Text));                          e.Item.SubItems[IdxRemainingFlMoney].Text = _accumulatedAmount.ToString();                            if (_accumulatedAmount <= 0)                          {                              lvMembers.Items[e.Item.Index].BackColor = Color.Red;                          }                          else                          {                              lvMembers.Items[e.Item.Index].BackColor = Color.Transparent;                          }                      }                      break;                                    case IdxCreationDate:                      e.Item.SubItems[e.SubItem].Tag = _CreditCommitteeDate;                      break;                    case IdxCompulsorySavings: // Compulsory savings                      if (_product.UseCompulsorySavings)                          e.Item.SubItems[e.SubItem].Tag = cbCompulsorySavings.SelectedItem;                      break;                    case IdxCompulsoryPercentage: // Compulsory percentage                      if (_product.UseCompulsorySavings)                          e.Item.SubItems[e.SubItem].Tag = int.Parse(e.DisplayText);                      break;                  /*                  case IdxPaymentMethod:                          e.Item.SubItems[e.SubItem].Tag = cbPaymentMethods.SelectedItem;                      break;                      */                  default:                      break;              }
Magic Number,OpenCBS.GUI.Contracts,VillageAddLoanForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\VillageAddLoanForm.cs,lvMembers_MouseDown,The following statement contains a magic number: if (MouseButtons.Left == e.Button)              {                  if (e.Clicks >= 2)                  {                      _blockItemCheck = true;                  }              }
Magic Number,OpenCBS.GUI.Contracts,VillageDisburseLoanForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\VillageDisburseLoanForm.cs,InitializeControls,The following statement contains a magic number: foreach (VillageMember member in _village.NonDisbursedMembers)              {                  foreach (Loan loan in member.ActiveLoans)                  {                      if (loan.ContractStatus == OContractStatus.Active ||                          loan.ContractStatus == OContractStatus.Refused ||                          loan.ContractStatus == OContractStatus.Abandoned                          ) continue;                      _hasMember = true;                      Person person = member.Tiers as Person;                      ListViewItem item = new ListViewItem(person.Name) {Tag = loan};                      item.UseItemStyleForSubItems = true;                      item.SubItems.Add(person.IdentificationData);                        ListViewItem.ListViewSubItem subitem;                        if (loan.StartDate == null)                          subitem = new ListViewItem.ListViewSubItem                                      {                                          Text = TimeProvider.Today.ToString(ApplicationSettings.GetInstance("").SHORT_DATE_FORMAT)'                                          Tag = TimeProvider.Today                                      };                      else                          subitem = new ListViewItem.ListViewSubItem                                  {                                      Text = loan.StartDate.ToString(ApplicationSettings.GetInstance("").SHORT_DATE_FORMAT)'                                      Tag = loan.StartDate.ToString(ApplicationSettings.GetInstance("").SHORT_DATE_FORMAT)                                  };                        item.SubItems.Add(subitem);                      item.SubItems.Add(loan.FirstInstallmentDate.ToString(ApplicationSettings.GetInstance("").SHORT_DATE_FORMAT));                      item.SubItems.Add(loan.Amount.GetFormatedValue(loan.UseCents));                      item.SubItems.Add(loan.Product.Currency.Code);                      item.SubItems.Add(Math.Round(loan.InterestRate*100' decimalPlaces).ToString());                      item.SubItems.Add(loan.GracePeriod.ToString());                      item.SubItems.Add(loan.NbOfInstallments.ToString());                      item.SubItems.Add(loan.LoanOfficer.Name);                      item.SubItems.Add(loan.FundingLine.Name);                        _accumulatedAmount = _fLServices.CheckIfAmountIsEnough(loan.FundingLine' loan.Amount.Value);                      if (_accumulatedAmount <= 0) item.BackColor = Color.Red;                      item.SubItems.Add(_accumulatedAmount.ToString());                        cbPaymentMethods.Items.Clear();                      List<PaymentMethod> methods = ServicesProvider.GetInstance().GetPaymentMethodServices().GetAllPaymentMethods();                      item.SubItems.Add(methods[0].Name);                        lvMembers.Items.Add(item);                      item.SubItems[IdxAmount].Tag = loan.Amount.GetFormatedValue(loan.UseCents);                      item.SubItems[IdxCurrency].Tag = loan.Product.Currency;                  }              }
Magic Number,OpenCBS.GUI.Contracts,VillageDisburseLoanForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\VillageDisburseLoanForm.cs,lvMembers_SubItemClicked,The following statement contains a magic number: if (e.SubItem.Equals(3)) lvMembers.StartEditing(dtpRepayment' e.Item' e.SubItem);
Magic Number,OpenCBS.GUI.Contracts,VillageDisburseLoanForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\VillageDisburseLoanForm.cs,lvMembers_MouseDown,The following statement contains a magic number: if (e.Clicks >= 2) _blockItemCheck = true;
Magic Number,OpenCBS.GUI.Contracts,VillageDisburseLoanForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\VillageDisburseLoanForm.cs,btnSave_Click,The following statement contains a magic number: try              {                  if (_notEnoughMoney)                  {                      if (!MessageBox.Show(MultiLanguageStrings.GetString(Ressource.VillageForm' "MoneyNotEnoughForAll.Text")' "!"'                           MessageBoxButtons.YesNo).Equals(DialogResult.Yes))                          return;                  }                  foreach (ListViewItem item in lvMembers.Items)                  {                      if (!item.Checked || item == _itemTotal) continue;                      var loan = item.Tag as Loan;                      DateTime date = Convert.ToDateTime(item.SubItems[IdxDDate].Text);                        VillageMember activeMember = null;                                            int index = 0;                      foreach (VillageMember member in _village.NonDisbursedMembers)                      {                          int tIndex = member.ActiveLoans.IndexOf(loan);                          if (tIndex > -1)                          {                              activeMember = member;                              index = tIndex;                          }                      }                        if (loan != null)                      {                          loan.CompulsorySavings = ServicesProvider.GetInstance().GetSavingServices().GetSavingForLoan(loan.Id' true);                          if (loan.Product.UseCompulsorySavings)                          {                              if (loan.CompulsorySavings == null)                              {                                  string text = string.Format("The loan with the code {0} requires a compulsory savings account to be disbursed!"' loan.Code);                                  MessageBox.Show(text' @"No compulsory savings"' MessageBoxButtons.OK' MessageBoxIcon.Warning);                                  return;                              }                              decimal totalAmountPercentage = 0;                              decimal savingsBalance = loan.CompulsorySavings.GetBalance().Value;                                foreach (Loan assosiatedLoan in loan.CompulsorySavings.Loans)                              {                                  if (assosiatedLoan.ContractStatus != OContractStatus.Closed &&                                      assosiatedLoan.ContractStatus !=OContractStatus.Abandoned &&                                      assosiatedLoan.ContractStatus != OContractStatus.Postponed &&                                      assosiatedLoan.CompulsorySavingsPercentage != null )                                      totalAmountPercentage += (assosiatedLoan.Amount.Value*((decimal) assosiatedLoan.CompulsorySavingsPercentage/100));                              }                                if (totalAmountPercentage > savingsBalance)                              {                                  MessageBox.Show(String.Format(                                          "The balance on savings account {2} of {0} is not enough to cover total loans amount percentage of {1}.\nClient name: {3}"'                                          ServicesHelper.ConvertDecimalToString(savingsBalance)'                                          ServicesHelper.ConvertDecimalToString(totalAmountPercentage)'                                          loan.CompulsorySavings.Code'                                          item.SubItems[0].Text)'                                      @"Insufficient savings balance"' MessageBoxButtons.OK' MessageBoxIcon.Warning);                                  return;                              }                          }                      }                        date = DateTime.Parse(item.SubItems[2].Text);                        loan.StartDate = date;                      if (loan.AlignDisbursementDate.Date != DateTime.Parse(item.SubItems[3].Text).Date)                      {                          loan.FirstInstallmentDate = DateTime.Parse(item.SubItems[3].Text).Date;                          loan.AlignDisbursementDate = loan.CalculateAlignDisbursementDate(DateTime.Parse(item.SubItems[3].Text).Date);                          if (!loan.ScheduleChangedManually)                          {                              loan.InstallmentList = ServicesProvider.GetInstance().GetContractServices().SimulateScheduleCreation(loan);                              loan.CalculateStartDates();                          }                      }                      loan.CloseDate = loan.InstallmentList[loan.NbOfInstallments - 1].ExpectedDate;                        if (item.SubItems[IdxPaymentMethod].Tag != null && item.SubItems[IdxPaymentMethod].Tag.ToString() == OPaymentMethods.Savings.ToString())                      {                          if (loan.Product.UseCompulsorySavings && loan.CompulsorySavings != null)                          {                              if (loan.CompulsorySavings.Status == OSavingsStatus.Active)                              {                                  ServicesProvider.GetInstance().GetSavingServices().LoanDisbursement(loan.CompulsorySavings' loan'                                         loan.AlignDisbursementDate' "Disbursement of the loan: " + loan.Code' User.CurrentUser' false);                              }                              else                              {                                  throw new OpenCbsSavingException(OpenCbsSavingExceptionEnum.CompulsorySavingsContractIsNotActive);                              }                          }                          else                          {                              string text = string.Format(@"The loan of client '{0}' requires a compulsory savings account!"' ((VillageMember)item.Tag).Tiers.Name);                              MessageBox.Show(text' @"No compulsory savings"' MessageBoxButtons.OK' MessageBoxIcon.Warning);                              return;                          }                      }                        date += DateTime.Now.TimeOfDay;                      PaymentMethod method =                           ServicesProvider.GetInstance().GetPaymentMethodServices().GetPaymentMethodByName(item.SubItems[IdxPaymentMethod].Text);                      activeMember.ActiveLoans[index] = ServicesProvider.GetInstance().GetContractServices().Disburse(loan' date' true' false' method);                  }              }              catch (Exception ex)              {                  isError = true;                  new frmShowError(CustomExceptionHandler.ShowExceptionText(ex)).ShowDialog();              }
Magic Number,OpenCBS.GUI.Contracts,VillageDisburseLoanForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\VillageDisburseLoanForm.cs,btnSave_Click,The following statement contains a magic number: try              {                  if (_notEnoughMoney)                  {                      if (!MessageBox.Show(MultiLanguageStrings.GetString(Ressource.VillageForm' "MoneyNotEnoughForAll.Text")' "!"'                           MessageBoxButtons.YesNo).Equals(DialogResult.Yes))                          return;                  }                  foreach (ListViewItem item in lvMembers.Items)                  {                      if (!item.Checked || item == _itemTotal) continue;                      var loan = item.Tag as Loan;                      DateTime date = Convert.ToDateTime(item.SubItems[IdxDDate].Text);                        VillageMember activeMember = null;                                            int index = 0;                      foreach (VillageMember member in _village.NonDisbursedMembers)                      {                          int tIndex = member.ActiveLoans.IndexOf(loan);                          if (tIndex > -1)                          {                              activeMember = member;                              index = tIndex;                          }                      }                        if (loan != null)                      {                          loan.CompulsorySavings = ServicesProvider.GetInstance().GetSavingServices().GetSavingForLoan(loan.Id' true);                          if (loan.Product.UseCompulsorySavings)                          {                              if (loan.CompulsorySavings == null)                              {                                  string text = string.Format("The loan with the code {0} requires a compulsory savings account to be disbursed!"' loan.Code);                                  MessageBox.Show(text' @"No compulsory savings"' MessageBoxButtons.OK' MessageBoxIcon.Warning);                                  return;                              }                              decimal totalAmountPercentage = 0;                              decimal savingsBalance = loan.CompulsorySavings.GetBalance().Value;                                foreach (Loan assosiatedLoan in loan.CompulsorySavings.Loans)                              {                                  if (assosiatedLoan.ContractStatus != OContractStatus.Closed &&                                      assosiatedLoan.ContractStatus !=OContractStatus.Abandoned &&                                      assosiatedLoan.ContractStatus != OContractStatus.Postponed &&                                      assosiatedLoan.CompulsorySavingsPercentage != null )                                      totalAmountPercentage += (assosiatedLoan.Amount.Value*((decimal) assosiatedLoan.CompulsorySavingsPercentage/100));                              }                                if (totalAmountPercentage > savingsBalance)                              {                                  MessageBox.Show(String.Format(                                          "The balance on savings account {2} of {0} is not enough to cover total loans amount percentage of {1}.\nClient name: {3}"'                                          ServicesHelper.ConvertDecimalToString(savingsBalance)'                                          ServicesHelper.ConvertDecimalToString(totalAmountPercentage)'                                          loan.CompulsorySavings.Code'                                          item.SubItems[0].Text)'                                      @"Insufficient savings balance"' MessageBoxButtons.OK' MessageBoxIcon.Warning);                                  return;                              }                          }                      }                        date = DateTime.Parse(item.SubItems[2].Text);                        loan.StartDate = date;                      if (loan.AlignDisbursementDate.Date != DateTime.Parse(item.SubItems[3].Text).Date)                      {                          loan.FirstInstallmentDate = DateTime.Parse(item.SubItems[3].Text).Date;                          loan.AlignDisbursementDate = loan.CalculateAlignDisbursementDate(DateTime.Parse(item.SubItems[3].Text).Date);                          if (!loan.ScheduleChangedManually)                          {                              loan.InstallmentList = ServicesProvider.GetInstance().GetContractServices().SimulateScheduleCreation(loan);                              loan.CalculateStartDates();                          }                      }                      loan.CloseDate = loan.InstallmentList[loan.NbOfInstallments - 1].ExpectedDate;                        if (item.SubItems[IdxPaymentMethod].Tag != null && item.SubItems[IdxPaymentMethod].Tag.ToString() == OPaymentMethods.Savings.ToString())                      {                          if (loan.Product.UseCompulsorySavings && loan.CompulsorySavings != null)                          {                              if (loan.CompulsorySavings.Status == OSavingsStatus.Active)                              {                                  ServicesProvider.GetInstance().GetSavingServices().LoanDisbursement(loan.CompulsorySavings' loan'                                         loan.AlignDisbursementDate' "Disbursement of the loan: " + loan.Code' User.CurrentUser' false);                              }                              else                              {                                  throw new OpenCbsSavingException(OpenCbsSavingExceptionEnum.CompulsorySavingsContractIsNotActive);                              }                          }                          else                          {                              string text = string.Format(@"The loan of client '{0}' requires a compulsory savings account!"' ((VillageMember)item.Tag).Tiers.Name);                              MessageBox.Show(text' @"No compulsory savings"' MessageBoxButtons.OK' MessageBoxIcon.Warning);                              return;                          }                      }                        date += DateTime.Now.TimeOfDay;                      PaymentMethod method =                           ServicesProvider.GetInstance().GetPaymentMethodServices().GetPaymentMethodByName(item.SubItems[IdxPaymentMethod].Text);                      activeMember.ActiveLoans[index] = ServicesProvider.GetInstance().GetContractServices().Disburse(loan' date' true' false' method);                  }              }              catch (Exception ex)              {                  isError = true;                  new frmShowError(CustomExceptionHandler.ShowExceptionText(ex)).ShowDialog();              }
Magic Number,OpenCBS.GUI.Contracts,VillageDisburseLoanForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\VillageDisburseLoanForm.cs,btnSave_Click,The following statement contains a magic number: try              {                  if (_notEnoughMoney)                  {                      if (!MessageBox.Show(MultiLanguageStrings.GetString(Ressource.VillageForm' "MoneyNotEnoughForAll.Text")' "!"'                           MessageBoxButtons.YesNo).Equals(DialogResult.Yes))                          return;                  }                  foreach (ListViewItem item in lvMembers.Items)                  {                      if (!item.Checked || item == _itemTotal) continue;                      var loan = item.Tag as Loan;                      DateTime date = Convert.ToDateTime(item.SubItems[IdxDDate].Text);                        VillageMember activeMember = null;                                            int index = 0;                      foreach (VillageMember member in _village.NonDisbursedMembers)                      {                          int tIndex = member.ActiveLoans.IndexOf(loan);                          if (tIndex > -1)                          {                              activeMember = member;                              index = tIndex;                          }                      }                        if (loan != null)                      {                          loan.CompulsorySavings = ServicesProvider.GetInstance().GetSavingServices().GetSavingForLoan(loan.Id' true);                          if (loan.Product.UseCompulsorySavings)                          {                              if (loan.CompulsorySavings == null)                              {                                  string text = string.Format("The loan with the code {0} requires a compulsory savings account to be disbursed!"' loan.Code);                                  MessageBox.Show(text' @"No compulsory savings"' MessageBoxButtons.OK' MessageBoxIcon.Warning);                                  return;                              }                              decimal totalAmountPercentage = 0;                              decimal savingsBalance = loan.CompulsorySavings.GetBalance().Value;                                foreach (Loan assosiatedLoan in loan.CompulsorySavings.Loans)                              {                                  if (assosiatedLoan.ContractStatus != OContractStatus.Closed &&                                      assosiatedLoan.ContractStatus !=OContractStatus.Abandoned &&                                      assosiatedLoan.ContractStatus != OContractStatus.Postponed &&                                      assosiatedLoan.CompulsorySavingsPercentage != null )                                      totalAmountPercentage += (assosiatedLoan.Amount.Value*((decimal) assosiatedLoan.CompulsorySavingsPercentage/100));                              }                                if (totalAmountPercentage > savingsBalance)                              {                                  MessageBox.Show(String.Format(                                          "The balance on savings account {2} of {0} is not enough to cover total loans amount percentage of {1}.\nClient name: {3}"'                                          ServicesHelper.ConvertDecimalToString(savingsBalance)'                                          ServicesHelper.ConvertDecimalToString(totalAmountPercentage)'                                          loan.CompulsorySavings.Code'                                          item.SubItems[0].Text)'                                      @"Insufficient savings balance"' MessageBoxButtons.OK' MessageBoxIcon.Warning);                                  return;                              }                          }                      }                        date = DateTime.Parse(item.SubItems[2].Text);                        loan.StartDate = date;                      if (loan.AlignDisbursementDate.Date != DateTime.Parse(item.SubItems[3].Text).Date)                      {                          loan.FirstInstallmentDate = DateTime.Parse(item.SubItems[3].Text).Date;                          loan.AlignDisbursementDate = loan.CalculateAlignDisbursementDate(DateTime.Parse(item.SubItems[3].Text).Date);                          if (!loan.ScheduleChangedManually)                          {                              loan.InstallmentList = ServicesProvider.GetInstance().GetContractServices().SimulateScheduleCreation(loan);                              loan.CalculateStartDates();                          }                      }                      loan.CloseDate = loan.InstallmentList[loan.NbOfInstallments - 1].ExpectedDate;                        if (item.SubItems[IdxPaymentMethod].Tag != null && item.SubItems[IdxPaymentMethod].Tag.ToString() == OPaymentMethods.Savings.ToString())                      {                          if (loan.Product.UseCompulsorySavings && loan.CompulsorySavings != null)                          {                              if (loan.CompulsorySavings.Status == OSavingsStatus.Active)                              {                                  ServicesProvider.GetInstance().GetSavingServices().LoanDisbursement(loan.CompulsorySavings' loan'                                         loan.AlignDisbursementDate' "Disbursement of the loan: " + loan.Code' User.CurrentUser' false);                              }                              else                              {                                  throw new OpenCbsSavingException(OpenCbsSavingExceptionEnum.CompulsorySavingsContractIsNotActive);                              }                          }                          else                          {                              string text = string.Format(@"The loan of client '{0}' requires a compulsory savings account!"' ((VillageMember)item.Tag).Tiers.Name);                              MessageBox.Show(text' @"No compulsory savings"' MessageBoxButtons.OK' MessageBoxIcon.Warning);                              return;                          }                      }                        date += DateTime.Now.TimeOfDay;                      PaymentMethod method =                           ServicesProvider.GetInstance().GetPaymentMethodServices().GetPaymentMethodByName(item.SubItems[IdxPaymentMethod].Text);                      activeMember.ActiveLoans[index] = ServicesProvider.GetInstance().GetContractServices().Disburse(loan' date' true' false' method);                  }              }              catch (Exception ex)              {                  isError = true;                  new frmShowError(CustomExceptionHandler.ShowExceptionText(ex)).ShowDialog();              }
Magic Number,OpenCBS.GUI.Contracts,VillageDisburseLoanForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\VillageDisburseLoanForm.cs,btnSave_Click,The following statement contains a magic number: try              {                  if (_notEnoughMoney)                  {                      if (!MessageBox.Show(MultiLanguageStrings.GetString(Ressource.VillageForm' "MoneyNotEnoughForAll.Text")' "!"'                           MessageBoxButtons.YesNo).Equals(DialogResult.Yes))                          return;                  }                  foreach (ListViewItem item in lvMembers.Items)                  {                      if (!item.Checked || item == _itemTotal) continue;                      var loan = item.Tag as Loan;                      DateTime date = Convert.ToDateTime(item.SubItems[IdxDDate].Text);                        VillageMember activeMember = null;                                            int index = 0;                      foreach (VillageMember member in _village.NonDisbursedMembers)                      {                          int tIndex = member.ActiveLoans.IndexOf(loan);                          if (tIndex > -1)                          {                              activeMember = member;                              index = tIndex;                          }                      }                        if (loan != null)                      {                          loan.CompulsorySavings = ServicesProvider.GetInstance().GetSavingServices().GetSavingForLoan(loan.Id' true);                          if (loan.Product.UseCompulsorySavings)                          {                              if (loan.CompulsorySavings == null)                              {                                  string text = string.Format("The loan with the code {0} requires a compulsory savings account to be disbursed!"' loan.Code);                                  MessageBox.Show(text' @"No compulsory savings"' MessageBoxButtons.OK' MessageBoxIcon.Warning);                                  return;                              }                              decimal totalAmountPercentage = 0;                              decimal savingsBalance = loan.CompulsorySavings.GetBalance().Value;                                foreach (Loan assosiatedLoan in loan.CompulsorySavings.Loans)                              {                                  if (assosiatedLoan.ContractStatus != OContractStatus.Closed &&                                      assosiatedLoan.ContractStatus !=OContractStatus.Abandoned &&                                      assosiatedLoan.ContractStatus != OContractStatus.Postponed &&                                      assosiatedLoan.CompulsorySavingsPercentage != null )                                      totalAmountPercentage += (assosiatedLoan.Amount.Value*((decimal) assosiatedLoan.CompulsorySavingsPercentage/100));                              }                                if (totalAmountPercentage > savingsBalance)                              {                                  MessageBox.Show(String.Format(                                          "The balance on savings account {2} of {0} is not enough to cover total loans amount percentage of {1}.\nClient name: {3}"'                                          ServicesHelper.ConvertDecimalToString(savingsBalance)'                                          ServicesHelper.ConvertDecimalToString(totalAmountPercentage)'                                          loan.CompulsorySavings.Code'                                          item.SubItems[0].Text)'                                      @"Insufficient savings balance"' MessageBoxButtons.OK' MessageBoxIcon.Warning);                                  return;                              }                          }                      }                        date = DateTime.Parse(item.SubItems[2].Text);                        loan.StartDate = date;                      if (loan.AlignDisbursementDate.Date != DateTime.Parse(item.SubItems[3].Text).Date)                      {                          loan.FirstInstallmentDate = DateTime.Parse(item.SubItems[3].Text).Date;                          loan.AlignDisbursementDate = loan.CalculateAlignDisbursementDate(DateTime.Parse(item.SubItems[3].Text).Date);                          if (!loan.ScheduleChangedManually)                          {                              loan.InstallmentList = ServicesProvider.GetInstance().GetContractServices().SimulateScheduleCreation(loan);                              loan.CalculateStartDates();                          }                      }                      loan.CloseDate = loan.InstallmentList[loan.NbOfInstallments - 1].ExpectedDate;                        if (item.SubItems[IdxPaymentMethod].Tag != null && item.SubItems[IdxPaymentMethod].Tag.ToString() == OPaymentMethods.Savings.ToString())                      {                          if (loan.Product.UseCompulsorySavings && loan.CompulsorySavings != null)                          {                              if (loan.CompulsorySavings.Status == OSavingsStatus.Active)                              {                                  ServicesProvider.GetInstance().GetSavingServices().LoanDisbursement(loan.CompulsorySavings' loan'                                         loan.AlignDisbursementDate' "Disbursement of the loan: " + loan.Code' User.CurrentUser' false);                              }                              else                              {                                  throw new OpenCbsSavingException(OpenCbsSavingExceptionEnum.CompulsorySavingsContractIsNotActive);                              }                          }                          else                          {                              string text = string.Format(@"The loan of client '{0}' requires a compulsory savings account!"' ((VillageMember)item.Tag).Tiers.Name);                              MessageBox.Show(text' @"No compulsory savings"' MessageBoxButtons.OK' MessageBoxIcon.Warning);                              return;                          }                      }                        date += DateTime.Now.TimeOfDay;                      PaymentMethod method =                           ServicesProvider.GetInstance().GetPaymentMethodServices().GetPaymentMethodByName(item.SubItems[IdxPaymentMethod].Text);                      activeMember.ActiveLoans[index] = ServicesProvider.GetInstance().GetContractServices().Disburse(loan' date' true' false' method);                  }              }              catch (Exception ex)              {                  isError = true;                  new frmShowError(CustomExceptionHandler.ShowExceptionText(ex)).ShowDialog();              }
Magic Number,OpenCBS.GUI.Contracts,VillageDisburseLoanForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\VillageDisburseLoanForm.cs,btnSave_Click,The following statement contains a magic number: try              {                  if (_notEnoughMoney)                  {                      if (!MessageBox.Show(MultiLanguageStrings.GetString(Ressource.VillageForm' "MoneyNotEnoughForAll.Text")' "!"'                           MessageBoxButtons.YesNo).Equals(DialogResult.Yes))                          return;                  }                  foreach (ListViewItem item in lvMembers.Items)                  {                      if (!item.Checked || item == _itemTotal) continue;                      var loan = item.Tag as Loan;                      DateTime date = Convert.ToDateTime(item.SubItems[IdxDDate].Text);                        VillageMember activeMember = null;                                            int index = 0;                      foreach (VillageMember member in _village.NonDisbursedMembers)                      {                          int tIndex = member.ActiveLoans.IndexOf(loan);                          if (tIndex > -1)                          {                              activeMember = member;                              index = tIndex;                          }                      }                        if (loan != null)                      {                          loan.CompulsorySavings = ServicesProvider.GetInstance().GetSavingServices().GetSavingForLoan(loan.Id' true);                          if (loan.Product.UseCompulsorySavings)                          {                              if (loan.CompulsorySavings == null)                              {                                  string text = string.Format("The loan with the code {0} requires a compulsory savings account to be disbursed!"' loan.Code);                                  MessageBox.Show(text' @"No compulsory savings"' MessageBoxButtons.OK' MessageBoxIcon.Warning);                                  return;                              }                              decimal totalAmountPercentage = 0;                              decimal savingsBalance = loan.CompulsorySavings.GetBalance().Value;                                foreach (Loan assosiatedLoan in loan.CompulsorySavings.Loans)                              {                                  if (assosiatedLoan.ContractStatus != OContractStatus.Closed &&                                      assosiatedLoan.ContractStatus !=OContractStatus.Abandoned &&                                      assosiatedLoan.ContractStatus != OContractStatus.Postponed &&                                      assosiatedLoan.CompulsorySavingsPercentage != null )                                      totalAmountPercentage += (assosiatedLoan.Amount.Value*((decimal) assosiatedLoan.CompulsorySavingsPercentage/100));                              }                                if (totalAmountPercentage > savingsBalance)                              {                                  MessageBox.Show(String.Format(                                          "The balance on savings account {2} of {0} is not enough to cover total loans amount percentage of {1}.\nClient name: {3}"'                                          ServicesHelper.ConvertDecimalToString(savingsBalance)'                                          ServicesHelper.ConvertDecimalToString(totalAmountPercentage)'                                          loan.CompulsorySavings.Code'                                          item.SubItems[0].Text)'                                      @"Insufficient savings balance"' MessageBoxButtons.OK' MessageBoxIcon.Warning);                                  return;                              }                          }                      }                        date = DateTime.Parse(item.SubItems[2].Text);                        loan.StartDate = date;                      if (loan.AlignDisbursementDate.Date != DateTime.Parse(item.SubItems[3].Text).Date)                      {                          loan.FirstInstallmentDate = DateTime.Parse(item.SubItems[3].Text).Date;                          loan.AlignDisbursementDate = loan.CalculateAlignDisbursementDate(DateTime.Parse(item.SubItems[3].Text).Date);                          if (!loan.ScheduleChangedManually)                          {                              loan.InstallmentList = ServicesProvider.GetInstance().GetContractServices().SimulateScheduleCreation(loan);                              loan.CalculateStartDates();                          }                      }                      loan.CloseDate = loan.InstallmentList[loan.NbOfInstallments - 1].ExpectedDate;                        if (item.SubItems[IdxPaymentMethod].Tag != null && item.SubItems[IdxPaymentMethod].Tag.ToString() == OPaymentMethods.Savings.ToString())                      {                          if (loan.Product.UseCompulsorySavings && loan.CompulsorySavings != null)                          {                              if (loan.CompulsorySavings.Status == OSavingsStatus.Active)                              {                                  ServicesProvider.GetInstance().GetSavingServices().LoanDisbursement(loan.CompulsorySavings' loan'                                         loan.AlignDisbursementDate' "Disbursement of the loan: " + loan.Code' User.CurrentUser' false);                              }                              else                              {                                  throw new OpenCbsSavingException(OpenCbsSavingExceptionEnum.CompulsorySavingsContractIsNotActive);                              }                          }                          else                          {                              string text = string.Format(@"The loan of client '{0}' requires a compulsory savings account!"' ((VillageMember)item.Tag).Tiers.Name);                              MessageBox.Show(text' @"No compulsory savings"' MessageBoxButtons.OK' MessageBoxIcon.Warning);                              return;                          }                      }                        date += DateTime.Now.TimeOfDay;                      PaymentMethod method =                           ServicesProvider.GetInstance().GetPaymentMethodServices().GetPaymentMethodByName(item.SubItems[IdxPaymentMethod].Text);                      activeMember.ActiveLoans[index] = ServicesProvider.GetInstance().GetContractServices().Disburse(loan' date' true' false' method);                  }              }              catch (Exception ex)              {                  isError = true;                  new frmShowError(CustomExceptionHandler.ShowExceptionText(ex)).ShowDialog();              }
Magic Number,OpenCBS.GUI.Contracts,VillageDisburseLoanForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\VillageDisburseLoanForm.cs,InitializeComponent,The following statement contains a magic number: this.toolStripStatusLabel1.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56)))));
Magic Number,OpenCBS.GUI.Contracts,VillageDisburseLoanForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\VillageDisburseLoanForm.cs,InitializeComponent,The following statement contains a magic number: this.toolStripStatusLabel1.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56)))));
Magic Number,OpenCBS.GUI.Contracts,ReassignContractsForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\ReassignContractsForm.cs,Setup,The following statement contains a magic number: interestRateColumn.AspectToStringConverter = value =>              {                  if (value == null) return "";                  var interestRate = (decimal)value;                  return (interestRate * 100).ToString("N2") + " %";              };
Magic Number,OpenCBS.GUI.Database,FrmDatabaseSettings,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Database\FrmDatabaseSettings.cs,InitializeTabPageServerConnection,The following statement contains a magic number: tableLayoutPanelServerSettings.Controls.Add(groupBoxSaveSettings' 0' 2);
Magic Number,OpenCBS.GUI.Database,FrmDatabaseSettings,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Database\FrmDatabaseSettings.cs,InitializeTabPageSqlDatabaseSettings,The following statement contains a magic number: tableLayoutPanelDatabaseSettings.Controls.Add(groupBoxSaveSettings' 0' 3);
Magic Number,OpenCBS.GUI.Database,FrmDatabaseSettings,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Database\FrmDatabaseSettings.cs,InitializeTabPageSqlServerSettings,The following statement contains a magic number: tableLayoutPanelSQLSettings.Controls.Add(groupBoxSaveSettings' 0' 2);
Magic Number,OpenCBS.GUI.Database,FrmDatabaseSettings,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Database\FrmDatabaseSettings.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanelSQLSettings.Controls.Add(this.groupBoxSaveSettings' 0' 2);
Magic Number,OpenCBS.GUI.Database,FrmDatabaseSettings,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Database\FrmDatabaseSettings.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanelDatabaseSettings.Controls.Add(this.groupBoxSQLDatabaseStructure' 0' 2);
Magic Number,OpenCBS.GUI.Database,FrmDatabaseSettings,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Database\FrmDatabaseSettings.cs,InitializeComponent,The following statement contains a magic number: this.tBDatabaseSettingsSchemaResult.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56)))));
Magic Number,OpenCBS.GUI.Database,FrmDatabaseSettings,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Database\FrmDatabaseSettings.cs,InitializeComponent,The following statement contains a magic number: this.tBDatabaseSettingsSchemaResult.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56)))));
Magic Number,OpenCBS.GUI.Export,CustomizableImportForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Export\CustomizableImportForm.cs,InitializeComponent,The following statement contains a magic number: this._buttonExit.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56)))));
Magic Number,OpenCBS.GUI.Export,CustomizableImportForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Export\CustomizableImportForm.cs,InitializeComponent,The following statement contains a magic number: this._buttonExit.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56)))));
Magic Number,OpenCBS.GUI.Export,CustomizableImportForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Export\CustomizableImportForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonOpenData.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56)))));
Magic Number,OpenCBS.GUI.Export,CustomizableImportForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Export\CustomizableImportForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonOpenData.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56)))));
Magic Number,OpenCBS.GUI.Export,CustomizableImportForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Export\CustomizableImportForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonExportAccountTiers.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56)))));
Magic Number,OpenCBS.GUI.Export,CustomizableImportForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Export\CustomizableImportForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonExportAccountTiers.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56)))));
Magic Number,OpenCBS.GUI.Export,CustomizableImportForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Export\CustomizableImportForm.cs,InitializeComponent,The following statement contains a magic number: this.btnSelectAllInstallments.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56)))));
Magic Number,OpenCBS.GUI.Export,CustomizableImportForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Export\CustomizableImportForm.cs,InitializeComponent,The following statement contains a magic number: this.btnSelectAllInstallments.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56)))));
Magic Number,OpenCBS.GUI.Export,CustomizableImportForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Export\CustomizableImportForm.cs,InitializeComponent,The following statement contains a magic number: this.btnDeselectAllInstallments.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56)))));
Magic Number,OpenCBS.GUI.Export,CustomizableImportForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Export\CustomizableImportForm.cs,InitializeComponent,The following statement contains a magic number: this.btnDeselectAllInstallments.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56)))));
Magic Number,OpenCBS.GUI.Export,CustomizableExportConfigurationForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Export\CustomizableExportConfigurationForm.cs,GetFile,The following statement contains a magic number: _file.FieldsDelimiter = _file.HasFieldsDelimiter ?                  comboBoxFieldDelimiter.SelectedIndex == 2                      ? (char)9                      : comboBoxFieldDelimiter.SelectedIndex == 3                          ? (char)32                          : Convert.ToChar(comboBoxFieldDelimiter.Text)                  : new char();
Magic Number,OpenCBS.GUI.Export,CustomizableExportConfigurationForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Export\CustomizableExportConfigurationForm.cs,GetFile,The following statement contains a magic number: _file.FieldsDelimiter = _file.HasFieldsDelimiter ?                  comboBoxFieldDelimiter.SelectedIndex == 2                      ? (char)9                      : comboBoxFieldDelimiter.SelectedIndex == 3                          ? (char)32                          : Convert.ToChar(comboBoxFieldDelimiter.Text)                  : new char();
Magic Number,OpenCBS.GUI.Export,CustomizableExportConfigurationForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Export\CustomizableExportConfigurationForm.cs,GetFile,The following statement contains a magic number: _file.FieldsDelimiter = _file.HasFieldsDelimiter ?                  comboBoxFieldDelimiter.SelectedIndex == 2                      ? (char)9                      : comboBoxFieldDelimiter.SelectedIndex == 3                          ? (char)32                          : Convert.ToChar(comboBoxFieldDelimiter.Text)                  : new char();
Magic Number,OpenCBS.GUI.Export,CustomizableExportConfigurationForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Export\CustomizableExportConfigurationForm.cs,GetFile,The following statement contains a magic number: _file.FieldsDelimiter = _file.HasFieldsDelimiter ?                  comboBoxFieldDelimiter.SelectedIndex == 2                      ? (char)9                      : comboBoxFieldDelimiter.SelectedIndex == 3                          ? (char)32                          : Convert.ToChar(comboBoxFieldDelimiter.Text)                  : new char();
Magic Number,OpenCBS.GUI.Export,CustomizableExportConfigurationForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Export\CustomizableExportConfigurationForm.cs,SetFile,The following statement contains a magic number: comboBoxFieldDelimiter.Text = _file.HasFieldsDelimiter ?                  _file.FieldsDelimiter == (char)9                      ? comboBoxFieldDelimiter.Items[2].ToString()                      : _file.FieldsDelimiter == (char)32                          ? comboBoxFieldDelimiter.Items[3].ToString()                          : _file.FieldsDelimiter.ToString()                  : string.Empty;
Magic Number,OpenCBS.GUI.Export,CustomizableExportConfigurationForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Export\CustomizableExportConfigurationForm.cs,SetFile,The following statement contains a magic number: comboBoxFieldDelimiter.Text = _file.HasFieldsDelimiter ?                  _file.FieldsDelimiter == (char)9                      ? comboBoxFieldDelimiter.Items[2].ToString()                      : _file.FieldsDelimiter == (char)32                          ? comboBoxFieldDelimiter.Items[3].ToString()                          : _file.FieldsDelimiter.ToString()                  : string.Empty;
Magic Number,OpenCBS.GUI.Export,CustomizableExportConfigurationForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Export\CustomizableExportConfigurationForm.cs,SetFile,The following statement contains a magic number: comboBoxFieldDelimiter.Text = _file.HasFieldsDelimiter ?                  _file.FieldsDelimiter == (char)9                      ? comboBoxFieldDelimiter.Items[2].ToString()                      : _file.FieldsDelimiter == (char)32                          ? comboBoxFieldDelimiter.Items[3].ToString()                          : _file.FieldsDelimiter.ToString()                  : string.Empty;
Magic Number,OpenCBS.GUI.Export,CustomizableExportConfigurationForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Export\CustomizableExportConfigurationForm.cs,SetFile,The following statement contains a magic number: comboBoxFieldDelimiter.Text = _file.HasFieldsDelimiter ?                  _file.FieldsDelimiter == (char)9                      ? comboBoxFieldDelimiter.Items[2].ToString()                      : _file.FieldsDelimiter == (char)32                          ? comboBoxFieldDelimiter.Items[3].ToString()                          : _file.FieldsDelimiter.ToString()                  : string.Empty;
Magic Number,OpenCBS.GUI.Export,CustomizableExportForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Export\CustomizableExportForm.cs,InitializeComponent,The following statement contains a magic number: this._buttonExit.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56)))));
Magic Number,OpenCBS.GUI.Export,CustomizableExportForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Export\CustomizableExportForm.cs,InitializeComponent,The following statement contains a magic number: this._buttonExit.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56)))));
Magic Number,OpenCBS.GUI.Export,CustomizableExportForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Export\CustomizableExportForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonRefreshInstallments.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56)))));
Magic Number,OpenCBS.GUI.Export,CustomizableExportForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Export\CustomizableExportForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonRefreshInstallments.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56)))));
Magic Number,OpenCBS.GUI.Export,CustomizableExportForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Export\CustomizableExportForm.cs,InitializeComponent,The following statement contains a magic number: this.btnSelectAllInstallments.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56)))));
Magic Number,OpenCBS.GUI.Export,CustomizableExportForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Export\CustomizableExportForm.cs,InitializeComponent,The following statement contains a magic number: this.btnSelectAllInstallments.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56)))));
Magic Number,OpenCBS.GUI.Export,CustomizableExportForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Export\CustomizableExportForm.cs,InitializeComponent,The following statement contains a magic number: this.btnDeselectAllInstallments.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56)))));
Magic Number,OpenCBS.GUI.Export,CustomizableExportForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Export\CustomizableExportForm.cs,InitializeComponent,The following statement contains a magic number: this.btnDeselectAllInstallments.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56)))));
Magic Number,OpenCBS.GUI.Export,CustomizableExportForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Export\CustomizableExportForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonExportAccountTiers.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56)))));
Magic Number,OpenCBS.GUI.Export,CustomizableExportForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Export\CustomizableExportForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonExportAccountTiers.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56)))));
Magic Number,OpenCBS.GUI.Export,RunPendingInstallmentForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Export\RunPendingInstallmentForm.cs,backgroundWorker1_DoWork,The following statement contains a magic number: for (int i = 0; i < _installments.Count; i++)              {                  progressBar.Invoke(new MethodInvoker(delegate                      {                          progressBar.Text = string.Format("{0} / {1}"' i + 1' _installments.Count);                          progressBar.Value = i * 100 / _installments.Count;                      }));                    labelDetails.Invoke(new MethodInvoker(delegate                      {                          labelDetails.Text = string.Format("{0}"' _installments[i].ContractCode);                      }));                    try                  {                      exportServices.SetInstallmentAsPending(_installments[i]' _paymentMethod);                  }                  catch                  {                      _failedInstallments.Add(_installments[i]);                  }              }
Magic Number,OpenCBS.GUI.Export,RunPendingInstallmentForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Export\RunPendingInstallmentForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Controls.Add(this.progressBar' 0' 2);
Magic Number,OpenCBS.GUI.Export,RunPendingInstallmentForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Export\RunPendingInstallmentForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Controls.Add(this.groupBox1' 0' 3);
Magic Number,OpenCBS.GUI.Export,RunPendingInstallmentForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Export\RunPendingInstallmentForm.cs,InitializeComponent,The following statement contains a magic number: this.labelTitle.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(64))))' ((int)(((byte)(0)))));
Magic Number,OpenCBS.GUI.Export,RunPendingInstallmentForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Export\RunPendingInstallmentForm.cs,InitializeComponent,The following statement contains a magic number: this.progressBar.Step = 10;
Magic Number,OpenCBS.GUI.Export,RunPendingInstallmentForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Export\RunPendingInstallmentForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonCancel.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56)))));
Magic Number,OpenCBS.GUI.Export,RunPendingInstallmentForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Export\RunPendingInstallmentForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonCancel.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56)))));
Magic Number,OpenCBS.GUI.Export,RunPendingInstallmentForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Export\RunPendingInstallmentForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonRun.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56)))));
Magic Number,OpenCBS.GUI.Export,RunPendingInstallmentForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Export\RunPendingInstallmentForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonRun.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56)))));
Magic Number,OpenCBS.GUI.Report_Browser,ReportLoadingProgressForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Report Browser\ReportLoadingProgressForm.cs,InitializeComponent,The following statement contains a magic number: this.timer.Interval = 1000;
Magic Number,OpenCBS.GUI.Report_Browser,RepaymentCollectionSheetForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Report Browser\RepaymentCollectionSheetForm.cs,InitializeControls,The following statement contains a magic number: dtTo.Value = dtFrom.Value.AddDays(4);
Magic Number,OpenCBS.GUI.TellerManagement,FrmOpenCloseTeller,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\TellerManagement\FrmOpenCloseTeller.cs,tbAmount_KeyPress,The following statement contains a magic number: if (                  (keyCode >= 48 && keyCode <= 57) ||                  (keyCode == 8) ||                  (Char.IsControl(e.KeyChar) && e.KeyChar != ((char)Keys.V | (char)Keys.ControlKey))                  ||                  (Char.IsControl(e.KeyChar) && e.KeyChar != ((char)Keys.C | (char)Keys.ControlKey))                  ||                  (e.KeyChar.ToString() == NumberFormatInfo.CurrentInfo.NumberDecimalSeparator)                  )              {                  e.Handled = false;              }              else                  e.Handled = true;
Magic Number,OpenCBS.GUI.TellerManagement,FrmOpenCloseTeller,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\TellerManagement\FrmOpenCloseTeller.cs,tbAmount_KeyPress,The following statement contains a magic number: if (                  (keyCode >= 48 && keyCode <= 57) ||                  (keyCode == 8) ||                  (Char.IsControl(e.KeyChar) && e.KeyChar != ((char)Keys.V | (char)Keys.ControlKey))                  ||                  (Char.IsControl(e.KeyChar) && e.KeyChar != ((char)Keys.C | (char)Keys.ControlKey))                  ||                  (e.KeyChar.ToString() == NumberFormatInfo.CurrentInfo.NumberDecimalSeparator)                  )              {                  e.Handled = false;              }              else                  e.Handled = true;
Magic Number,OpenCBS.GUI.TellerManagement,FrmOpenCloseTeller,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\TellerManagement\FrmOpenCloseTeller.cs,tbAmount_KeyPress,The following statement contains a magic number: if (                  (keyCode >= 48 && keyCode <= 57) ||                  (keyCode == 8) ||                  (Char.IsControl(e.KeyChar) && e.KeyChar != ((char)Keys.V | (char)Keys.ControlKey))                  ||                  (Char.IsControl(e.KeyChar) && e.KeyChar != ((char)Keys.C | (char)Keys.ControlKey))                  ||                  (e.KeyChar.ToString() == NumberFormatInfo.CurrentInfo.NumberDecimalSeparator)                  )              {                  e.Handled = false;              }              else                  e.Handled = true;
Magic Number,OpenCBS.GUI.TellerManagement,FrmTellerOperation,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\TellerManagement\FrmTellerOperation.cs,tbxAmount_KeyPress,The following statement contains a magic number: if ((keyCode >= 48 && keyCode <= 57) || (keyCode == 8) || (Char.IsControl(e.KeyChar) && e.KeyChar                                                                         != ((char)Keys.V | (char)Keys.ControlKey)) ||                  (Char.IsControl(e.KeyChar) && e.KeyChar !=                   ((char)Keys.C | (char)Keys.ControlKey)) ||                  (e.KeyChar.ToString() == NumberFormatInfo.CurrentInfo.NumberDecimalSeparator))              {                  e.Handled = false;              }              else                  e.Handled = true;
Magic Number,OpenCBS.GUI.TellerManagement,FrmTellerOperation,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\TellerManagement\FrmTellerOperation.cs,tbxAmount_KeyPress,The following statement contains a magic number: if ((keyCode >= 48 && keyCode <= 57) || (keyCode == 8) || (Char.IsControl(e.KeyChar) && e.KeyChar                                                                         != ((char)Keys.V | (char)Keys.ControlKey)) ||                  (Char.IsControl(e.KeyChar) && e.KeyChar !=                   ((char)Keys.C | (char)Keys.ControlKey)) ||                  (e.KeyChar.ToString() == NumberFormatInfo.CurrentInfo.NumberDecimalSeparator))              {                  e.Handled = false;              }              else                  e.Handled = true;
Magic Number,OpenCBS.GUI.TellerManagement,FrmTellerOperation,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\TellerManagement\FrmTellerOperation.cs,tbxAmount_KeyPress,The following statement contains a magic number: if ((keyCode >= 48 && keyCode <= 57) || (keyCode == 8) || (Char.IsControl(e.KeyChar) && e.KeyChar                                                                         != ((char)Keys.V | (char)Keys.ControlKey)) ||                  (Char.IsControl(e.KeyChar) && e.KeyChar !=                   ((char)Keys.C | (char)Keys.ControlKey)) ||                  (e.KeyChar.ToString() == NumberFormatInfo.CurrentInfo.NumberDecimalSeparator))              {                  e.Handled = false;              }              else                  e.Handled = true;
Magic Number,OpenCBS.GUI.Tools,PasswordForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Tools\PasswordForm.cs,PasswordForm_FormClosing,The following statement contains a magic number: if (User.Password != textBoxOldPswd.Text)              {                  Fail("oldPasswordIsWrong");                  e.Cancel = true;              }              else if (textBoxNewPswd.Text.Length<4 || textBoxNewPswd.Text.Length>30)              {                  Fail("littleOrBigPassword");                  e.Cancel = true;              }              else if (!string.Equals(textBoxNewPswd.Text' textBoxConfirmNewPswd.Text))              {                  Fail("newPasswordIsWrong");                  e.Cancel = true;              }
Magic Number,OpenCBS.GUI.Tools,PasswordForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Tools\PasswordForm.cs,PasswordForm_FormClosing,The following statement contains a magic number: if (User.Password != textBoxOldPswd.Text)              {                  Fail("oldPasswordIsWrong");                  e.Cancel = true;              }              else if (textBoxNewPswd.Text.Length<4 || textBoxNewPswd.Text.Length>30)              {                  Fail("littleOrBigPassword");                  e.Cancel = true;              }              else if (!string.Equals(textBoxNewPswd.Text' textBoxConfirmNewPswd.Text))              {                  Fail("newPasswordIsWrong");                  e.Cancel = true;              }
Magic Number,OpenCBS.GUI.Tools,frmProgress,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Tools\frmProgress.cs,InitializeComponent,The following statement contains a magic number: this.progressBar1.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(64))))' ((int)(((byte)(0)))));
Magic Number,OpenCBS.GUI.Tools,frmProgress,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Tools\frmProgress.cs,InitializeComponent,The following statement contains a magic number: this.timer.Interval = 500;
Magic Number,OpenCBS.GUI.Tools,FrmSaveFile,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Tools\frmSaveFile.cs,InitializeComponent,The following statement contains a magic number: this.timerInput.Interval = 300;
Magic Number,OpenCBS.GUI.Tools,ShowPictureForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Tools\ShowPictureForm.cs,ShowPicture,The following statement contains a magic number: if (personUserControl!=null)             {                 if (person.Id == 0)                 {                     UserPicture.Image = null;                 }                 if (photoSubId==0 && !string.IsNullOrEmpty(person.ImagePath))                 {                     Bitmap tempImage = new Bitmap(person.ImagePath);                     image = ServicesProvider.GetInstance().GetPicturesServices().Resize(tempImage' 600);                 }                 else if (photoSubId==1 && !string.IsNullOrEmpty(person.Image2Path))                 {                     Bitmap tempImage = new Bitmap(person.Image2Path);                     image = ServicesProvider.GetInstance().GetPicturesServices().Resize(tempImage' 600);                 }                 else                 {                     image = ServicesProvider.GetInstance().GetPicturesServices().GetPicture("PERSON"' person.Id' false' photoSubId);                 }             }             else if (villageForm!=null)             {                 if (village.Id == 0)                 {                     UserPicture.Image = null;                 }                   if (photoSubId==0)                 {                     if (!string.IsNullOrEmpty(village.ImagePath))                     {                         Bitmap tempImage = new Bitmap(village.ImagePath);                         image = ServicesProvider.GetInstance().GetPicturesServices().Resize(tempImage' 600);                     }                     else                     {                         image = ServicesProvider.GetInstance().GetPicturesServices().GetPicture("VILLAGE"' village.Id' false' photoSubId);                     }                 }                 else if (photoSubId==1)                 {                     if (!string.IsNullOrEmpty(village.Image2Path))                     {                         Bitmap tempImage = new Bitmap(village.Image2Path);                         image = ServicesProvider.GetInstance().GetPicturesServices().Resize(tempImage' 600);                     }                     else                     {                         image = ServicesProvider.GetInstance().GetPicturesServices().GetPicture("VILLAGE"' village.Id' false' photoSubId);                     }                 }                              }             else if (groupUserControl!=null)             {                 if (photoSubId==0)                 {                     if (!string.IsNullOrEmpty(group.ImagePath))                     {                         Bitmap tempImage = new Bitmap(group.ImagePath);                         image = ServicesProvider.GetInstance().GetPicturesServices().Resize(tempImage' 600);                     }                     else                     {                         image = ServicesProvider.GetInstance().GetPicturesServices().GetPicture("GROUP"' group.Id' false'                                                                                                 photoSubId);                     }                 }                 else if (photoSubId==1)                 {                     if (!string.IsNullOrEmpty(group.Image2Path))                     {                         Bitmap tempImage = new Bitmap(group.Image2Path);                         image = ServicesProvider.GetInstance().GetPicturesServices().Resize(tempImage' 600);                     }                     else                     {                         image = ServicesProvider.GetInstance().GetPicturesServices().GetPicture("GROUP"' group.Id' false'                                                                                                 photoSubId);                     }                 }             }               else if (corporateUserControl != null)             {                 if (photoSubId == 0)                 {                     if (!string.IsNullOrEmpty(corporate.ImagePath))                     {                         Bitmap tempImage=new Bitmap(corporate.ImagePath);                         image = ServicesProvider.GetInstance().GetPicturesServices().Resize(tempImage' 600);                     }                     else                     {                         image = ServicesProvider.GetInstance().GetPicturesServices().GetPicture("CORPORATE"' corporate.Id'                                                                                                 false' photoSubId);                     }                 }                 else if (photoSubId == 1)                 {                     if (!string.IsNullOrEmpty(corporate.Image2Path))                     {                         Bitmap tempImage = new Bitmap(corporate.Image2Path);                         image = ServicesProvider.GetInstance().GetPicturesServices().Resize(tempImage' 600);                     }                     else                     {                         image = ServicesProvider.GetInstance().GetPicturesServices().GetPicture("CORPORATE"' corporate.Id'                                                                                                 false' photoSubId);                     }                 }             }
Magic Number,OpenCBS.GUI.Tools,ShowPictureForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Tools\ShowPictureForm.cs,ShowPicture,The following statement contains a magic number: if (personUserControl!=null)             {                 if (person.Id == 0)                 {                     UserPicture.Image = null;                 }                 if (photoSubId==0 && !string.IsNullOrEmpty(person.ImagePath))                 {                     Bitmap tempImage = new Bitmap(person.ImagePath);                     image = ServicesProvider.GetInstance().GetPicturesServices().Resize(tempImage' 600);                 }                 else if (photoSubId==1 && !string.IsNullOrEmpty(person.Image2Path))                 {                     Bitmap tempImage = new Bitmap(person.Image2Path);                     image = ServicesProvider.GetInstance().GetPicturesServices().Resize(tempImage' 600);                 }                 else                 {                     image = ServicesProvider.GetInstance().GetPicturesServices().GetPicture("PERSON"' person.Id' false' photoSubId);                 }             }             else if (villageForm!=null)             {                 if (village.Id == 0)                 {                     UserPicture.Image = null;                 }                   if (photoSubId==0)                 {                     if (!string.IsNullOrEmpty(village.ImagePath))                     {                         Bitmap tempImage = new Bitmap(village.ImagePath);                         image = ServicesProvider.GetInstance().GetPicturesServices().Resize(tempImage' 600);                     }                     else                     {                         image = ServicesProvider.GetInstance().GetPicturesServices().GetPicture("VILLAGE"' village.Id' false' photoSubId);                     }                 }                 else if (photoSubId==1)                 {                     if (!string.IsNullOrEmpty(village.Image2Path))                     {                         Bitmap tempImage = new Bitmap(village.Image2Path);                         image = ServicesProvider.GetInstance().GetPicturesServices().Resize(tempImage' 600);                     }                     else                     {                         image = ServicesProvider.GetInstance().GetPicturesServices().GetPicture("VILLAGE"' village.Id' false' photoSubId);                     }                 }                              }             else if (groupUserControl!=null)             {                 if (photoSubId==0)                 {                     if (!string.IsNullOrEmpty(group.ImagePath))                     {                         Bitmap tempImage = new Bitmap(group.ImagePath);                         image = ServicesProvider.GetInstance().GetPicturesServices().Resize(tempImage' 600);                     }                     else                     {                         image = ServicesProvider.GetInstance().GetPicturesServices().GetPicture("GROUP"' group.Id' false'                                                                                                 photoSubId);                     }                 }                 else if (photoSubId==1)                 {                     if (!string.IsNullOrEmpty(group.Image2Path))                     {                         Bitmap tempImage = new Bitmap(group.Image2Path);                         image = ServicesProvider.GetInstance().GetPicturesServices().Resize(tempImage' 600);                     }                     else                     {                         image = ServicesProvider.GetInstance().GetPicturesServices().GetPicture("GROUP"' group.Id' false'                                                                                                 photoSubId);                     }                 }             }               else if (corporateUserControl != null)             {                 if (photoSubId == 0)                 {                     if (!string.IsNullOrEmpty(corporate.ImagePath))                     {                         Bitmap tempImage=new Bitmap(corporate.ImagePath);                         image = ServicesProvider.GetInstance().GetPicturesServices().Resize(tempImage' 600);                     }                     else                     {                         image = ServicesProvider.GetInstance().GetPicturesServices().GetPicture("CORPORATE"' corporate.Id'                                                                                                 false' photoSubId);                     }                 }                 else if (photoSubId == 1)                 {                     if (!string.IsNullOrEmpty(corporate.Image2Path))                     {                         Bitmap tempImage = new Bitmap(corporate.Image2Path);                         image = ServicesProvider.GetInstance().GetPicturesServices().Resize(tempImage' 600);                     }                     else                     {                         image = ServicesProvider.GetInstance().GetPicturesServices().GetPicture("CORPORATE"' corporate.Id'                                                                                                 false' photoSubId);                     }                 }             }
Magic Number,OpenCBS.GUI.Tools,ShowPictureForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Tools\ShowPictureForm.cs,ShowPicture,The following statement contains a magic number: if (personUserControl!=null)             {                 if (person.Id == 0)                 {                     UserPicture.Image = null;                 }                 if (photoSubId==0 && !string.IsNullOrEmpty(person.ImagePath))                 {                     Bitmap tempImage = new Bitmap(person.ImagePath);                     image = ServicesProvider.GetInstance().GetPicturesServices().Resize(tempImage' 600);                 }                 else if (photoSubId==1 && !string.IsNullOrEmpty(person.Image2Path))                 {                     Bitmap tempImage = new Bitmap(person.Image2Path);                     image = ServicesProvider.GetInstance().GetPicturesServices().Resize(tempImage' 600);                 }                 else                 {                     image = ServicesProvider.GetInstance().GetPicturesServices().GetPicture("PERSON"' person.Id' false' photoSubId);                 }             }             else if (villageForm!=null)             {                 if (village.Id == 0)                 {                     UserPicture.Image = null;                 }                   if (photoSubId==0)                 {                     if (!string.IsNullOrEmpty(village.ImagePath))                     {                         Bitmap tempImage = new Bitmap(village.ImagePath);                         image = ServicesProvider.GetInstance().GetPicturesServices().Resize(tempImage' 600);                     }                     else                     {                         image = ServicesProvider.GetInstance().GetPicturesServices().GetPicture("VILLAGE"' village.Id' false' photoSubId);                     }                 }                 else if (photoSubId==1)                 {                     if (!string.IsNullOrEmpty(village.Image2Path))                     {                         Bitmap tempImage = new Bitmap(village.Image2Path);                         image = ServicesProvider.GetInstance().GetPicturesServices().Resize(tempImage' 600);                     }                     else                     {                         image = ServicesProvider.GetInstance().GetPicturesServices().GetPicture("VILLAGE"' village.Id' false' photoSubId);                     }                 }                              }             else if (groupUserControl!=null)             {                 if (photoSubId==0)                 {                     if (!string.IsNullOrEmpty(group.ImagePath))                     {                         Bitmap tempImage = new Bitmap(group.ImagePath);                         image = ServicesProvider.GetInstance().GetPicturesServices().Resize(tempImage' 600);                     }                     else                     {                         image = ServicesProvider.GetInstance().GetPicturesServices().GetPicture("GROUP"' group.Id' false'                                                                                                 photoSubId);                     }                 }                 else if (photoSubId==1)                 {                     if (!string.IsNullOrEmpty(group.Image2Path))                     {                         Bitmap tempImage = new Bitmap(group.Image2Path);                         image = ServicesProvider.GetInstance().GetPicturesServices().Resize(tempImage' 600);                     }                     else                     {                         image = ServicesProvider.GetInstance().GetPicturesServices().GetPicture("GROUP"' group.Id' false'                                                                                                 photoSubId);                     }                 }             }               else if (corporateUserControl != null)             {                 if (photoSubId == 0)                 {                     if (!string.IsNullOrEmpty(corporate.ImagePath))                     {                         Bitmap tempImage=new Bitmap(corporate.ImagePath);                         image = ServicesProvider.GetInstance().GetPicturesServices().Resize(tempImage' 600);                     }                     else                     {                         image = ServicesProvider.GetInstance().GetPicturesServices().GetPicture("CORPORATE"' corporate.Id'                                                                                                 false' photoSubId);                     }                 }                 else if (photoSubId == 1)                 {                     if (!string.IsNullOrEmpty(corporate.Image2Path))                     {                         Bitmap tempImage = new Bitmap(corporate.Image2Path);                         image = ServicesProvider.GetInstance().GetPicturesServices().Resize(tempImage' 600);                     }                     else                     {                         image = ServicesProvider.GetInstance().GetPicturesServices().GetPicture("CORPORATE"' corporate.Id'                                                                                                 false' photoSubId);                     }                 }             }
Magic Number,OpenCBS.GUI.Tools,ShowPictureForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Tools\ShowPictureForm.cs,ShowPicture,The following statement contains a magic number: if (personUserControl!=null)             {                 if (person.Id == 0)                 {                     UserPicture.Image = null;                 }                 if (photoSubId==0 && !string.IsNullOrEmpty(person.ImagePath))                 {                     Bitmap tempImage = new Bitmap(person.ImagePath);                     image = ServicesProvider.GetInstance().GetPicturesServices().Resize(tempImage' 600);                 }                 else if (photoSubId==1 && !string.IsNullOrEmpty(person.Image2Path))                 {                     Bitmap tempImage = new Bitmap(person.Image2Path);                     image = ServicesProvider.GetInstance().GetPicturesServices().Resize(tempImage' 600);                 }                 else                 {                     image = ServicesProvider.GetInstance().GetPicturesServices().GetPicture("PERSON"' person.Id' false' photoSubId);                 }             }             else if (villageForm!=null)             {                 if (village.Id == 0)                 {                     UserPicture.Image = null;                 }                   if (photoSubId==0)                 {                     if (!string.IsNullOrEmpty(village.ImagePath))                     {                         Bitmap tempImage = new Bitmap(village.ImagePath);                         image = ServicesProvider.GetInstance().GetPicturesServices().Resize(tempImage' 600);                     }                     else                     {                         image = ServicesProvider.GetInstance().GetPicturesServices().GetPicture("VILLAGE"' village.Id' false' photoSubId);                     }                 }                 else if (photoSubId==1)                 {                     if (!string.IsNullOrEmpty(village.Image2Path))                     {                         Bitmap tempImage = new Bitmap(village.Image2Path);                         image = ServicesProvider.GetInstance().GetPicturesServices().Resize(tempImage' 600);                     }                     else                     {                         image = ServicesProvider.GetInstance().GetPicturesServices().GetPicture("VILLAGE"' village.Id' false' photoSubId);                     }                 }                              }             else if (groupUserControl!=null)             {                 if (photoSubId==0)                 {                     if (!string.IsNullOrEmpty(group.ImagePath))                     {                         Bitmap tempImage = new Bitmap(group.ImagePath);                         image = ServicesProvider.GetInstance().GetPicturesServices().Resize(tempImage' 600);                     }                     else                     {                         image = ServicesProvider.GetInstance().GetPicturesServices().GetPicture("GROUP"' group.Id' false'                                                                                                 photoSubId);                     }                 }                 else if (photoSubId==1)                 {                     if (!string.IsNullOrEmpty(group.Image2Path))                     {                         Bitmap tempImage = new Bitmap(group.Image2Path);                         image = ServicesProvider.GetInstance().GetPicturesServices().Resize(tempImage' 600);                     }                     else                     {                         image = ServicesProvider.GetInstance().GetPicturesServices().GetPicture("GROUP"' group.Id' false'                                                                                                 photoSubId);                     }                 }             }               else if (corporateUserControl != null)             {                 if (photoSubId == 0)                 {                     if (!string.IsNullOrEmpty(corporate.ImagePath))                     {                         Bitmap tempImage=new Bitmap(corporate.ImagePath);                         image = ServicesProvider.GetInstance().GetPicturesServices().Resize(tempImage' 600);                     }                     else                     {                         image = ServicesProvider.GetInstance().GetPicturesServices().GetPicture("CORPORATE"' corporate.Id'                                                                                                 false' photoSubId);                     }                 }                 else if (photoSubId == 1)                 {                     if (!string.IsNullOrEmpty(corporate.Image2Path))                     {                         Bitmap tempImage = new Bitmap(corporate.Image2Path);                         image = ServicesProvider.GetInstance().GetPicturesServices().Resize(tempImage' 600);                     }                     else                     {                         image = ServicesProvider.GetInstance().GetPicturesServices().GetPicture("CORPORATE"' corporate.Id'                                                                                                 false' photoSubId);                     }                 }             }
Magic Number,OpenCBS.GUI.Tools,ShowPictureForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Tools\ShowPictureForm.cs,ShowPicture,The following statement contains a magic number: if (personUserControl!=null)             {                 if (person.Id == 0)                 {                     UserPicture.Image = null;                 }                 if (photoSubId==0 && !string.IsNullOrEmpty(person.ImagePath))                 {                     Bitmap tempImage = new Bitmap(person.ImagePath);                     image = ServicesProvider.GetInstance().GetPicturesServices().Resize(tempImage' 600);                 }                 else if (photoSubId==1 && !string.IsNullOrEmpty(person.Image2Path))                 {                     Bitmap tempImage = new Bitmap(person.Image2Path);                     image = ServicesProvider.GetInstance().GetPicturesServices().Resize(tempImage' 600);                 }                 else                 {                     image = ServicesProvider.GetInstance().GetPicturesServices().GetPicture("PERSON"' person.Id' false' photoSubId);                 }             }             else if (villageForm!=null)             {                 if (village.Id == 0)                 {                     UserPicture.Image = null;                 }                   if (photoSubId==0)                 {                     if (!string.IsNullOrEmpty(village.ImagePath))                     {                         Bitmap tempImage = new Bitmap(village.ImagePath);                         image = ServicesProvider.GetInstance().GetPicturesServices().Resize(tempImage' 600);                     }                     else                     {                         image = ServicesProvider.GetInstance().GetPicturesServices().GetPicture("VILLAGE"' village.Id' false' photoSubId);                     }                 }                 else if (photoSubId==1)                 {                     if (!string.IsNullOrEmpty(village.Image2Path))                     {                         Bitmap tempImage = new Bitmap(village.Image2Path);                         image = ServicesProvider.GetInstance().GetPicturesServices().Resize(tempImage' 600);                     }                     else                     {                         image = ServicesProvider.GetInstance().GetPicturesServices().GetPicture("VILLAGE"' village.Id' false' photoSubId);                     }                 }                              }             else if (groupUserControl!=null)             {                 if (photoSubId==0)                 {                     if (!string.IsNullOrEmpty(group.ImagePath))                     {                         Bitmap tempImage = new Bitmap(group.ImagePath);                         image = ServicesProvider.GetInstance().GetPicturesServices().Resize(tempImage' 600);                     }                     else                     {                         image = ServicesProvider.GetInstance().GetPicturesServices().GetPicture("GROUP"' group.Id' false'                                                                                                 photoSubId);                     }                 }                 else if (photoSubId==1)                 {                     if (!string.IsNullOrEmpty(group.Image2Path))                     {                         Bitmap tempImage = new Bitmap(group.Image2Path);                         image = ServicesProvider.GetInstance().GetPicturesServices().Resize(tempImage' 600);                     }                     else                     {                         image = ServicesProvider.GetInstance().GetPicturesServices().GetPicture("GROUP"' group.Id' false'                                                                                                 photoSubId);                     }                 }             }               else if (corporateUserControl != null)             {                 if (photoSubId == 0)                 {                     if (!string.IsNullOrEmpty(corporate.ImagePath))                     {                         Bitmap tempImage=new Bitmap(corporate.ImagePath);                         image = ServicesProvider.GetInstance().GetPicturesServices().Resize(tempImage' 600);                     }                     else                     {                         image = ServicesProvider.GetInstance().GetPicturesServices().GetPicture("CORPORATE"' corporate.Id'                                                                                                 false' photoSubId);                     }                 }                 else if (photoSubId == 1)                 {                     if (!string.IsNullOrEmpty(corporate.Image2Path))                     {                         Bitmap tempImage = new Bitmap(corporate.Image2Path);                         image = ServicesProvider.GetInstance().GetPicturesServices().Resize(tempImage' 600);                     }                     else                     {                         image = ServicesProvider.GetInstance().GetPicturesServices().GetPicture("CORPORATE"' corporate.Id'                                                                                                 false' photoSubId);                     }                 }             }
Magic Number,OpenCBS.GUI.Tools,ShowPictureForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Tools\ShowPictureForm.cs,ShowPicture,The following statement contains a magic number: if (personUserControl!=null)             {                 if (person.Id == 0)                 {                     UserPicture.Image = null;                 }                 if (photoSubId==0 && !string.IsNullOrEmpty(person.ImagePath))                 {                     Bitmap tempImage = new Bitmap(person.ImagePath);                     image = ServicesProvider.GetInstance().GetPicturesServices().Resize(tempImage' 600);                 }                 else if (photoSubId==1 && !string.IsNullOrEmpty(person.Image2Path))                 {                     Bitmap tempImage = new Bitmap(person.Image2Path);                     image = ServicesProvider.GetInstance().GetPicturesServices().Resize(tempImage' 600);                 }                 else                 {                     image = ServicesProvider.GetInstance().GetPicturesServices().GetPicture("PERSON"' person.Id' false' photoSubId);                 }             }             else if (villageForm!=null)             {                 if (village.Id == 0)                 {                     UserPicture.Image = null;                 }                   if (photoSubId==0)                 {                     if (!string.IsNullOrEmpty(village.ImagePath))                     {                         Bitmap tempImage = new Bitmap(village.ImagePath);                         image = ServicesProvider.GetInstance().GetPicturesServices().Resize(tempImage' 600);                     }                     else                     {                         image = ServicesProvider.GetInstance().GetPicturesServices().GetPicture("VILLAGE"' village.Id' false' photoSubId);                     }                 }                 else if (photoSubId==1)                 {                     if (!string.IsNullOrEmpty(village.Image2Path))                     {                         Bitmap tempImage = new Bitmap(village.Image2Path);                         image = ServicesProvider.GetInstance().GetPicturesServices().Resize(tempImage' 600);                     }                     else                     {                         image = ServicesProvider.GetInstance().GetPicturesServices().GetPicture("VILLAGE"' village.Id' false' photoSubId);                     }                 }                              }             else if (groupUserControl!=null)             {                 if (photoSubId==0)                 {                     if (!string.IsNullOrEmpty(group.ImagePath))                     {                         Bitmap tempImage = new Bitmap(group.ImagePath);                         image = ServicesProvider.GetInstance().GetPicturesServices().Resize(tempImage' 600);                     }                     else                     {                         image = ServicesProvider.GetInstance().GetPicturesServices().GetPicture("GROUP"' group.Id' false'                                                                                                 photoSubId);                     }                 }                 else if (photoSubId==1)                 {                     if (!string.IsNullOrEmpty(group.Image2Path))                     {                         Bitmap tempImage = new Bitmap(group.Image2Path);                         image = ServicesProvider.GetInstance().GetPicturesServices().Resize(tempImage' 600);                     }                     else                     {                         image = ServicesProvider.GetInstance().GetPicturesServices().GetPicture("GROUP"' group.Id' false'                                                                                                 photoSubId);                     }                 }             }               else if (corporateUserControl != null)             {                 if (photoSubId == 0)                 {                     if (!string.IsNullOrEmpty(corporate.ImagePath))                     {                         Bitmap tempImage=new Bitmap(corporate.ImagePath);                         image = ServicesProvider.GetInstance().GetPicturesServices().Resize(tempImage' 600);                     }                     else                     {                         image = ServicesProvider.GetInstance().GetPicturesServices().GetPicture("CORPORATE"' corporate.Id'                                                                                                 false' photoSubId);                     }                 }                 else if (photoSubId == 1)                 {                     if (!string.IsNullOrEmpty(corporate.Image2Path))                     {                         Bitmap tempImage = new Bitmap(corporate.Image2Path);                         image = ServicesProvider.GetInstance().GetPicturesServices().Resize(tempImage' 600);                     }                     else                     {                         image = ServicesProvider.GetInstance().GetPicturesServices().GetPicture("CORPORATE"' corporate.Id'                                                                                                 false' photoSubId);                     }                 }             }
Magic Number,OpenCBS.GUI.Tools,ShowPictureForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Tools\ShowPictureForm.cs,ShowPicture,The following statement contains a magic number: if (personUserControl!=null)             {                 if (person.Id == 0)                 {                     UserPicture.Image = null;                 }                 if (photoSubId==0 && !string.IsNullOrEmpty(person.ImagePath))                 {                     Bitmap tempImage = new Bitmap(person.ImagePath);                     image = ServicesProvider.GetInstance().GetPicturesServices().Resize(tempImage' 600);                 }                 else if (photoSubId==1 && !string.IsNullOrEmpty(person.Image2Path))                 {                     Bitmap tempImage = new Bitmap(person.Image2Path);                     image = ServicesProvider.GetInstance().GetPicturesServices().Resize(tempImage' 600);                 }                 else                 {                     image = ServicesProvider.GetInstance().GetPicturesServices().GetPicture("PERSON"' person.Id' false' photoSubId);                 }             }             else if (villageForm!=null)             {                 if (village.Id == 0)                 {                     UserPicture.Image = null;                 }                   if (photoSubId==0)                 {                     if (!string.IsNullOrEmpty(village.ImagePath))                     {                         Bitmap tempImage = new Bitmap(village.ImagePath);                         image = ServicesProvider.GetInstance().GetPicturesServices().Resize(tempImage' 600);                     }                     else                     {                         image = ServicesProvider.GetInstance().GetPicturesServices().GetPicture("VILLAGE"' village.Id' false' photoSubId);                     }                 }                 else if (photoSubId==1)                 {                     if (!string.IsNullOrEmpty(village.Image2Path))                     {                         Bitmap tempImage = new Bitmap(village.Image2Path);                         image = ServicesProvider.GetInstance().GetPicturesServices().Resize(tempImage' 600);                     }                     else                     {                         image = ServicesProvider.GetInstance().GetPicturesServices().GetPicture("VILLAGE"' village.Id' false' photoSubId);                     }                 }                              }             else if (groupUserControl!=null)             {                 if (photoSubId==0)                 {                     if (!string.IsNullOrEmpty(group.ImagePath))                     {                         Bitmap tempImage = new Bitmap(group.ImagePath);                         image = ServicesProvider.GetInstance().GetPicturesServices().Resize(tempImage' 600);                     }                     else                     {                         image = ServicesProvider.GetInstance().GetPicturesServices().GetPicture("GROUP"' group.Id' false'                                                                                                 photoSubId);                     }                 }                 else if (photoSubId==1)                 {                     if (!string.IsNullOrEmpty(group.Image2Path))                     {                         Bitmap tempImage = new Bitmap(group.Image2Path);                         image = ServicesProvider.GetInstance().GetPicturesServices().Resize(tempImage' 600);                     }                     else                     {                         image = ServicesProvider.GetInstance().GetPicturesServices().GetPicture("GROUP"' group.Id' false'                                                                                                 photoSubId);                     }                 }             }               else if (corporateUserControl != null)             {                 if (photoSubId == 0)                 {                     if (!string.IsNullOrEmpty(corporate.ImagePath))                     {                         Bitmap tempImage=new Bitmap(corporate.ImagePath);                         image = ServicesProvider.GetInstance().GetPicturesServices().Resize(tempImage' 600);                     }                     else                     {                         image = ServicesProvider.GetInstance().GetPicturesServices().GetPicture("CORPORATE"' corporate.Id'                                                                                                 false' photoSubId);                     }                 }                 else if (photoSubId == 1)                 {                     if (!string.IsNullOrEmpty(corporate.Image2Path))                     {                         Bitmap tempImage = new Bitmap(corporate.Image2Path);                         image = ServicesProvider.GetInstance().GetPicturesServices().Resize(tempImage' 600);                     }                     else                     {                         image = ServicesProvider.GetInstance().GetPicturesServices().GetPicture("CORPORATE"' corporate.Id'                                                                                                 false' photoSubId);                     }                 }             }
Magic Number,OpenCBS.GUI.Tools,ShowPictureForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Tools\ShowPictureForm.cs,ShowPicture,The following statement contains a magic number: if (personUserControl!=null)             {                 if (person.Id == 0)                 {                     UserPicture.Image = null;                 }                 if (photoSubId==0 && !string.IsNullOrEmpty(person.ImagePath))                 {                     Bitmap tempImage = new Bitmap(person.ImagePath);                     image = ServicesProvider.GetInstance().GetPicturesServices().Resize(tempImage' 600);                 }                 else if (photoSubId==1 && !string.IsNullOrEmpty(person.Image2Path))                 {                     Bitmap tempImage = new Bitmap(person.Image2Path);                     image = ServicesProvider.GetInstance().GetPicturesServices().Resize(tempImage' 600);                 }                 else                 {                     image = ServicesProvider.GetInstance().GetPicturesServices().GetPicture("PERSON"' person.Id' false' photoSubId);                 }             }             else if (villageForm!=null)             {                 if (village.Id == 0)                 {                     UserPicture.Image = null;                 }                   if (photoSubId==0)                 {                     if (!string.IsNullOrEmpty(village.ImagePath))                     {                         Bitmap tempImage = new Bitmap(village.ImagePath);                         image = ServicesProvider.GetInstance().GetPicturesServices().Resize(tempImage' 600);                     }                     else                     {                         image = ServicesProvider.GetInstance().GetPicturesServices().GetPicture("VILLAGE"' village.Id' false' photoSubId);                     }                 }                 else if (photoSubId==1)                 {                     if (!string.IsNullOrEmpty(village.Image2Path))                     {                         Bitmap tempImage = new Bitmap(village.Image2Path);                         image = ServicesProvider.GetInstance().GetPicturesServices().Resize(tempImage' 600);                     }                     else                     {                         image = ServicesProvider.GetInstance().GetPicturesServices().GetPicture("VILLAGE"' village.Id' false' photoSubId);                     }                 }                              }             else if (groupUserControl!=null)             {                 if (photoSubId==0)                 {                     if (!string.IsNullOrEmpty(group.ImagePath))                     {                         Bitmap tempImage = new Bitmap(group.ImagePath);                         image = ServicesProvider.GetInstance().GetPicturesServices().Resize(tempImage' 600);                     }                     else                     {                         image = ServicesProvider.GetInstance().GetPicturesServices().GetPicture("GROUP"' group.Id' false'                                                                                                 photoSubId);                     }                 }                 else if (photoSubId==1)                 {                     if (!string.IsNullOrEmpty(group.Image2Path))                     {                         Bitmap tempImage = new Bitmap(group.Image2Path);                         image = ServicesProvider.GetInstance().GetPicturesServices().Resize(tempImage' 600);                     }                     else                     {                         image = ServicesProvider.GetInstance().GetPicturesServices().GetPicture("GROUP"' group.Id' false'                                                                                                 photoSubId);                     }                 }             }               else if (corporateUserControl != null)             {                 if (photoSubId == 0)                 {                     if (!string.IsNullOrEmpty(corporate.ImagePath))                     {                         Bitmap tempImage=new Bitmap(corporate.ImagePath);                         image = ServicesProvider.GetInstance().GetPicturesServices().Resize(tempImage' 600);                     }                     else                     {                         image = ServicesProvider.GetInstance().GetPicturesServices().GetPicture("CORPORATE"' corporate.Id'                                                                                                 false' photoSubId);                     }                 }                 else if (photoSubId == 1)                 {                     if (!string.IsNullOrEmpty(corporate.Image2Path))                     {                         Bitmap tempImage = new Bitmap(corporate.Image2Path);                         image = ServicesProvider.GetInstance().GetPicturesServices().Resize(tempImage' 600);                     }                     else                     {                         image = ServicesProvider.GetInstance().GetPicturesServices().GetPicture("CORPORATE"' corporate.Id'                                                                                                 false' photoSubId);                     }                 }             }
Magic Number,OpenCBS.GUI.Tools,ShowPictureForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Tools\ShowPictureForm.cs,pictureBox_SizeChanged,The following statement contains a magic number: gpPicture.Width = UserPicture.Width + 25;
Magic Number,OpenCBS.GUI.Tools,ShowPictureForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Tools\ShowPictureForm.cs,pictureBox_SizeChanged,The following statement contains a magic number: gpPicture.Height = UserPicture.Height + 25;
Magic Number,OpenCBS.GUI.Tools,ShowPictureForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Tools\ShowPictureForm.cs,ProcessImage,The following statement contains a magic number: if (personUserControl!=null)              {                  if (photoSubId == 0)                  {                      person.ImagePath = fileName;                      Bitmap bitmap = new Bitmap(fileName);                      Bitmap resized = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 600);                      UserPicture.Height = resized.Height;                      UserPicture.Width = resized.Width;                      UserPicture.Image = resized;                      Bitmap thumbnail = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 128);                      personUserControl.pictureBox.Image = thumbnail;                      personUserControl.pictureBox.SizeMode = PictureBoxSizeMode.Zoom;                      UserPicture.Image = resized;                  }                  else if (photoSubId == 1)                  {                      person.Image2Path = fileName;                      Bitmap bitmap = new Bitmap(fileName);                      Bitmap resized = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 600);                      UserPicture.Height = resized.Height;                      UserPicture.Width = resized.Width;                      UserPicture.Image = resized;                      Bitmap thumbnail = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 128);                      personUserControl.pictureBox2.Image = thumbnail;                      personUserControl.pictureBox2.SizeMode = PictureBoxSizeMode.Zoom;                      UserPicture.Image = resized;                  }              }                else if (villageForm!=null)              {                 if (photoSubId==0)                 {                     village.ImagePath = fileName;                     Bitmap bitmap = new Bitmap(fileName);                     Bitmap resized = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 600);                     UserPicture.Height = resized.Height;                     UserPicture.Width = resized.Width;                     UserPicture.Image = resized;                     Bitmap thumbnail = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 128);                     villageForm.pictureBox1.Image = thumbnail;                     villageForm.pictureBox1.SizeMode = PictureBoxSizeMode.Zoom;                     UserPicture.Image = resized;                 }                 else if (photoSubId==1)                 {                     village.Image2Path = fileName;                     Bitmap bitmap = new Bitmap(fileName);                     Bitmap resized = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 600);                     UserPicture.Height = resized.Height;                     UserPicture.Width = resized.Width;                     UserPicture.Image = resized;                     Bitmap thumbnail = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 128);                     villageForm.pictureBox2.Image = thumbnail;                     villageForm.pictureBox2.SizeMode = PictureBoxSizeMode.Zoom;                     UserPicture.Image = resized;                 }              }                else if (groupUserControl!=null)              {                  if (photoSubId==0)                  {                      group.ImagePath = fileName;                      Bitmap bitmap = new Bitmap(fileName);                      Bitmap resized = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 600);                      UserPicture.Height = resized.Height;                      UserPicture.Width = resized.Width;                      UserPicture.Image = resized;                      Bitmap thumbnail = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 128);                      groupUserControl.pictureBox1.Image = thumbnail;                      groupUserControl.pictureBox1.SizeMode = PictureBoxSizeMode.Zoom;                      UserPicture.Image = resized;                  }                  else if (photoSubId==1)                  {                      group.Image2Path = fileName;                      Bitmap bitmap=new Bitmap(fileName);                      Bitmap resized = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 600);                      UserPicture.Height = resized.Height;                      UserPicture.Width = resized.Width;                      UserPicture.Image = resized;                      Bitmap thumbnail = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 128);                      groupUserControl.pictureBox2.Image = thumbnail;                      groupUserControl.pictureBox2.SizeMode = PictureBoxSizeMode.Zoom;                      UserPicture.Image = resized;                  }              }              else if (corporateUserControl!=null)              {                  if (photoSubId==0)                  {                      corporate.ImagePath = fileName;                      Bitmap bitmap = new Bitmap(fileName);                      Bitmap resized = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 600);                      UserPicture.Height = resized.Height;                      UserPicture.Width = resized.Width;                      UserPicture.Image = resized;                      Bitmap thumbnail = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 128);                      corporateUserControl.pictureBox1.Image = thumbnail;                      corporateUserControl.pictureBox1.SizeMode = PictureBoxSizeMode.Zoom;                      UserPicture.Image = resized;                  }                  else if (photoSubId==1)                  {                      corporate.Image2Path = fileName;                      Bitmap bitmap = new Bitmap(fileName);                      Bitmap resized = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 600);                      UserPicture.Height = resized.Height;                      UserPicture.Width = resized.Width;                      UserPicture.Image = resized;                      Bitmap thumbnail = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 128);                      corporateUserControl.pictureBox2.Image = thumbnail;                      corporateUserControl.pictureBox2.SizeMode = PictureBoxSizeMode.Zoom;                      UserPicture.Image = resized;                  }              }
Magic Number,OpenCBS.GUI.Tools,ShowPictureForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Tools\ShowPictureForm.cs,ProcessImage,The following statement contains a magic number: if (personUserControl!=null)              {                  if (photoSubId == 0)                  {                      person.ImagePath = fileName;                      Bitmap bitmap = new Bitmap(fileName);                      Bitmap resized = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 600);                      UserPicture.Height = resized.Height;                      UserPicture.Width = resized.Width;                      UserPicture.Image = resized;                      Bitmap thumbnail = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 128);                      personUserControl.pictureBox.Image = thumbnail;                      personUserControl.pictureBox.SizeMode = PictureBoxSizeMode.Zoom;                      UserPicture.Image = resized;                  }                  else if (photoSubId == 1)                  {                      person.Image2Path = fileName;                      Bitmap bitmap = new Bitmap(fileName);                      Bitmap resized = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 600);                      UserPicture.Height = resized.Height;                      UserPicture.Width = resized.Width;                      UserPicture.Image = resized;                      Bitmap thumbnail = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 128);                      personUserControl.pictureBox2.Image = thumbnail;                      personUserControl.pictureBox2.SizeMode = PictureBoxSizeMode.Zoom;                      UserPicture.Image = resized;                  }              }                else if (villageForm!=null)              {                 if (photoSubId==0)                 {                     village.ImagePath = fileName;                     Bitmap bitmap = new Bitmap(fileName);                     Bitmap resized = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 600);                     UserPicture.Height = resized.Height;                     UserPicture.Width = resized.Width;                     UserPicture.Image = resized;                     Bitmap thumbnail = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 128);                     villageForm.pictureBox1.Image = thumbnail;                     villageForm.pictureBox1.SizeMode = PictureBoxSizeMode.Zoom;                     UserPicture.Image = resized;                 }                 else if (photoSubId==1)                 {                     village.Image2Path = fileName;                     Bitmap bitmap = new Bitmap(fileName);                     Bitmap resized = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 600);                     UserPicture.Height = resized.Height;                     UserPicture.Width = resized.Width;                     UserPicture.Image = resized;                     Bitmap thumbnail = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 128);                     villageForm.pictureBox2.Image = thumbnail;                     villageForm.pictureBox2.SizeMode = PictureBoxSizeMode.Zoom;                     UserPicture.Image = resized;                 }              }                else if (groupUserControl!=null)              {                  if (photoSubId==0)                  {                      group.ImagePath = fileName;                      Bitmap bitmap = new Bitmap(fileName);                      Bitmap resized = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 600);                      UserPicture.Height = resized.Height;                      UserPicture.Width = resized.Width;                      UserPicture.Image = resized;                      Bitmap thumbnail = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 128);                      groupUserControl.pictureBox1.Image = thumbnail;                      groupUserControl.pictureBox1.SizeMode = PictureBoxSizeMode.Zoom;                      UserPicture.Image = resized;                  }                  else if (photoSubId==1)                  {                      group.Image2Path = fileName;                      Bitmap bitmap=new Bitmap(fileName);                      Bitmap resized = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 600);                      UserPicture.Height = resized.Height;                      UserPicture.Width = resized.Width;                      UserPicture.Image = resized;                      Bitmap thumbnail = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 128);                      groupUserControl.pictureBox2.Image = thumbnail;                      groupUserControl.pictureBox2.SizeMode = PictureBoxSizeMode.Zoom;                      UserPicture.Image = resized;                  }              }              else if (corporateUserControl!=null)              {                  if (photoSubId==0)                  {                      corporate.ImagePath = fileName;                      Bitmap bitmap = new Bitmap(fileName);                      Bitmap resized = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 600);                      UserPicture.Height = resized.Height;                      UserPicture.Width = resized.Width;                      UserPicture.Image = resized;                      Bitmap thumbnail = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 128);                      corporateUserControl.pictureBox1.Image = thumbnail;                      corporateUserControl.pictureBox1.SizeMode = PictureBoxSizeMode.Zoom;                      UserPicture.Image = resized;                  }                  else if (photoSubId==1)                  {                      corporate.Image2Path = fileName;                      Bitmap bitmap = new Bitmap(fileName);                      Bitmap resized = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 600);                      UserPicture.Height = resized.Height;                      UserPicture.Width = resized.Width;                      UserPicture.Image = resized;                      Bitmap thumbnail = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 128);                      corporateUserControl.pictureBox2.Image = thumbnail;                      corporateUserControl.pictureBox2.SizeMode = PictureBoxSizeMode.Zoom;                      UserPicture.Image = resized;                  }              }
Magic Number,OpenCBS.GUI.Tools,ShowPictureForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Tools\ShowPictureForm.cs,ProcessImage,The following statement contains a magic number: if (personUserControl!=null)              {                  if (photoSubId == 0)                  {                      person.ImagePath = fileName;                      Bitmap bitmap = new Bitmap(fileName);                      Bitmap resized = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 600);                      UserPicture.Height = resized.Height;                      UserPicture.Width = resized.Width;                      UserPicture.Image = resized;                      Bitmap thumbnail = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 128);                      personUserControl.pictureBox.Image = thumbnail;                      personUserControl.pictureBox.SizeMode = PictureBoxSizeMode.Zoom;                      UserPicture.Image = resized;                  }                  else if (photoSubId == 1)                  {                      person.Image2Path = fileName;                      Bitmap bitmap = new Bitmap(fileName);                      Bitmap resized = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 600);                      UserPicture.Height = resized.Height;                      UserPicture.Width = resized.Width;                      UserPicture.Image = resized;                      Bitmap thumbnail = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 128);                      personUserControl.pictureBox2.Image = thumbnail;                      personUserControl.pictureBox2.SizeMode = PictureBoxSizeMode.Zoom;                      UserPicture.Image = resized;                  }              }                else if (villageForm!=null)              {                 if (photoSubId==0)                 {                     village.ImagePath = fileName;                     Bitmap bitmap = new Bitmap(fileName);                     Bitmap resized = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 600);                     UserPicture.Height = resized.Height;                     UserPicture.Width = resized.Width;                     UserPicture.Image = resized;                     Bitmap thumbnail = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 128);                     villageForm.pictureBox1.Image = thumbnail;                     villageForm.pictureBox1.SizeMode = PictureBoxSizeMode.Zoom;                     UserPicture.Image = resized;                 }                 else if (photoSubId==1)                 {                     village.Image2Path = fileName;                     Bitmap bitmap = new Bitmap(fileName);                     Bitmap resized = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 600);                     UserPicture.Height = resized.Height;                     UserPicture.Width = resized.Width;                     UserPicture.Image = resized;                     Bitmap thumbnail = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 128);                     villageForm.pictureBox2.Image = thumbnail;                     villageForm.pictureBox2.SizeMode = PictureBoxSizeMode.Zoom;                     UserPicture.Image = resized;                 }              }                else if (groupUserControl!=null)              {                  if (photoSubId==0)                  {                      group.ImagePath = fileName;                      Bitmap bitmap = new Bitmap(fileName);                      Bitmap resized = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 600);                      UserPicture.Height = resized.Height;                      UserPicture.Width = resized.Width;                      UserPicture.Image = resized;                      Bitmap thumbnail = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 128);                      groupUserControl.pictureBox1.Image = thumbnail;                      groupUserControl.pictureBox1.SizeMode = PictureBoxSizeMode.Zoom;                      UserPicture.Image = resized;                  }                  else if (photoSubId==1)                  {                      group.Image2Path = fileName;                      Bitmap bitmap=new Bitmap(fileName);                      Bitmap resized = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 600);                      UserPicture.Height = resized.Height;                      UserPicture.Width = resized.Width;                      UserPicture.Image = resized;                      Bitmap thumbnail = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 128);                      groupUserControl.pictureBox2.Image = thumbnail;                      groupUserControl.pictureBox2.SizeMode = PictureBoxSizeMode.Zoom;                      UserPicture.Image = resized;                  }              }              else if (corporateUserControl!=null)              {                  if (photoSubId==0)                  {                      corporate.ImagePath = fileName;                      Bitmap bitmap = new Bitmap(fileName);                      Bitmap resized = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 600);                      UserPicture.Height = resized.Height;                      UserPicture.Width = resized.Width;                      UserPicture.Image = resized;                      Bitmap thumbnail = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 128);                      corporateUserControl.pictureBox1.Image = thumbnail;                      corporateUserControl.pictureBox1.SizeMode = PictureBoxSizeMode.Zoom;                      UserPicture.Image = resized;                  }                  else if (photoSubId==1)                  {                      corporate.Image2Path = fileName;                      Bitmap bitmap = new Bitmap(fileName);                      Bitmap resized = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 600);                      UserPicture.Height = resized.Height;                      UserPicture.Width = resized.Width;                      UserPicture.Image = resized;                      Bitmap thumbnail = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 128);                      corporateUserControl.pictureBox2.Image = thumbnail;                      corporateUserControl.pictureBox2.SizeMode = PictureBoxSizeMode.Zoom;                      UserPicture.Image = resized;                  }              }
Magic Number,OpenCBS.GUI.Tools,ShowPictureForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Tools\ShowPictureForm.cs,ProcessImage,The following statement contains a magic number: if (personUserControl!=null)              {                  if (photoSubId == 0)                  {                      person.ImagePath = fileName;                      Bitmap bitmap = new Bitmap(fileName);                      Bitmap resized = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 600);                      UserPicture.Height = resized.Height;                      UserPicture.Width = resized.Width;                      UserPicture.Image = resized;                      Bitmap thumbnail = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 128);                      personUserControl.pictureBox.Image = thumbnail;                      personUserControl.pictureBox.SizeMode = PictureBoxSizeMode.Zoom;                      UserPicture.Image = resized;                  }                  else if (photoSubId == 1)                  {                      person.Image2Path = fileName;                      Bitmap bitmap = new Bitmap(fileName);                      Bitmap resized = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 600);                      UserPicture.Height = resized.Height;                      UserPicture.Width = resized.Width;                      UserPicture.Image = resized;                      Bitmap thumbnail = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 128);                      personUserControl.pictureBox2.Image = thumbnail;                      personUserControl.pictureBox2.SizeMode = PictureBoxSizeMode.Zoom;                      UserPicture.Image = resized;                  }              }                else if (villageForm!=null)              {                 if (photoSubId==0)                 {                     village.ImagePath = fileName;                     Bitmap bitmap = new Bitmap(fileName);                     Bitmap resized = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 600);                     UserPicture.Height = resized.Height;                     UserPicture.Width = resized.Width;                     UserPicture.Image = resized;                     Bitmap thumbnail = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 128);                     villageForm.pictureBox1.Image = thumbnail;                     villageForm.pictureBox1.SizeMode = PictureBoxSizeMode.Zoom;                     UserPicture.Image = resized;                 }                 else if (photoSubId==1)                 {                     village.Image2Path = fileName;                     Bitmap bitmap = new Bitmap(fileName);                     Bitmap resized = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 600);                     UserPicture.Height = resized.Height;                     UserPicture.Width = resized.Width;                     UserPicture.Image = resized;                     Bitmap thumbnail = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 128);                     villageForm.pictureBox2.Image = thumbnail;                     villageForm.pictureBox2.SizeMode = PictureBoxSizeMode.Zoom;                     UserPicture.Image = resized;                 }              }                else if (groupUserControl!=null)              {                  if (photoSubId==0)                  {                      group.ImagePath = fileName;                      Bitmap bitmap = new Bitmap(fileName);                      Bitmap resized = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 600);                      UserPicture.Height = resized.Height;                      UserPicture.Width = resized.Width;                      UserPicture.Image = resized;                      Bitmap thumbnail = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 128);                      groupUserControl.pictureBox1.Image = thumbnail;                      groupUserControl.pictureBox1.SizeMode = PictureBoxSizeMode.Zoom;                      UserPicture.Image = resized;                  }                  else if (photoSubId==1)                  {                      group.Image2Path = fileName;                      Bitmap bitmap=new Bitmap(fileName);                      Bitmap resized = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 600);                      UserPicture.Height = resized.Height;                      UserPicture.Width = resized.Width;                      UserPicture.Image = resized;                      Bitmap thumbnail = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 128);                      groupUserControl.pictureBox2.Image = thumbnail;                      groupUserControl.pictureBox2.SizeMode = PictureBoxSizeMode.Zoom;                      UserPicture.Image = resized;                  }              }              else if (corporateUserControl!=null)              {                  if (photoSubId==0)                  {                      corporate.ImagePath = fileName;                      Bitmap bitmap = new Bitmap(fileName);                      Bitmap resized = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 600);                      UserPicture.Height = resized.Height;                      UserPicture.Width = resized.Width;                      UserPicture.Image = resized;                      Bitmap thumbnail = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 128);                      corporateUserControl.pictureBox1.Image = thumbnail;                      corporateUserControl.pictureBox1.SizeMode = PictureBoxSizeMode.Zoom;                      UserPicture.Image = resized;                  }                  else if (photoSubId==1)                  {                      corporate.Image2Path = fileName;                      Bitmap bitmap = new Bitmap(fileName);                      Bitmap resized = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 600);                      UserPicture.Height = resized.Height;                      UserPicture.Width = resized.Width;                      UserPicture.Image = resized;                      Bitmap thumbnail = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 128);                      corporateUserControl.pictureBox2.Image = thumbnail;                      corporateUserControl.pictureBox2.SizeMode = PictureBoxSizeMode.Zoom;                      UserPicture.Image = resized;                  }              }
Magic Number,OpenCBS.GUI.Tools,ShowPictureForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Tools\ShowPictureForm.cs,ProcessImage,The following statement contains a magic number: if (personUserControl!=null)              {                  if (photoSubId == 0)                  {                      person.ImagePath = fileName;                      Bitmap bitmap = new Bitmap(fileName);                      Bitmap resized = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 600);                      UserPicture.Height = resized.Height;                      UserPicture.Width = resized.Width;                      UserPicture.Image = resized;                      Bitmap thumbnail = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 128);                      personUserControl.pictureBox.Image = thumbnail;                      personUserControl.pictureBox.SizeMode = PictureBoxSizeMode.Zoom;                      UserPicture.Image = resized;                  }                  else if (photoSubId == 1)                  {                      person.Image2Path = fileName;                      Bitmap bitmap = new Bitmap(fileName);                      Bitmap resized = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 600);                      UserPicture.Height = resized.Height;                      UserPicture.Width = resized.Width;                      UserPicture.Image = resized;                      Bitmap thumbnail = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 128);                      personUserControl.pictureBox2.Image = thumbnail;                      personUserControl.pictureBox2.SizeMode = PictureBoxSizeMode.Zoom;                      UserPicture.Image = resized;                  }              }                else if (villageForm!=null)              {                 if (photoSubId==0)                 {                     village.ImagePath = fileName;                     Bitmap bitmap = new Bitmap(fileName);                     Bitmap resized = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 600);                     UserPicture.Height = resized.Height;                     UserPicture.Width = resized.Width;                     UserPicture.Image = resized;                     Bitmap thumbnail = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 128);                     villageForm.pictureBox1.Image = thumbnail;                     villageForm.pictureBox1.SizeMode = PictureBoxSizeMode.Zoom;                     UserPicture.Image = resized;                 }                 else if (photoSubId==1)                 {                     village.Image2Path = fileName;                     Bitmap bitmap = new Bitmap(fileName);                     Bitmap resized = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 600);                     UserPicture.Height = resized.Height;                     UserPicture.Width = resized.Width;                     UserPicture.Image = resized;                     Bitmap thumbnail = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 128);                     villageForm.pictureBox2.Image = thumbnail;                     villageForm.pictureBox2.SizeMode = PictureBoxSizeMode.Zoom;                     UserPicture.Image = resized;                 }              }                else if (groupUserControl!=null)              {                  if (photoSubId==0)                  {                      group.ImagePath = fileName;                      Bitmap bitmap = new Bitmap(fileName);                      Bitmap resized = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 600);                      UserPicture.Height = resized.Height;                      UserPicture.Width = resized.Width;                      UserPicture.Image = resized;                      Bitmap thumbnail = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 128);                      groupUserControl.pictureBox1.Image = thumbnail;                      groupUserControl.pictureBox1.SizeMode = PictureBoxSizeMode.Zoom;                      UserPicture.Image = resized;                  }                  else if (photoSubId==1)                  {                      group.Image2Path = fileName;                      Bitmap bitmap=new Bitmap(fileName);                      Bitmap resized = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 600);                      UserPicture.Height = resized.Height;                      UserPicture.Width = resized.Width;                      UserPicture.Image = resized;                      Bitmap thumbnail = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 128);                      groupUserControl.pictureBox2.Image = thumbnail;                      groupUserControl.pictureBox2.SizeMode = PictureBoxSizeMode.Zoom;                      UserPicture.Image = resized;                  }              }              else if (corporateUserControl!=null)              {                  if (photoSubId==0)                  {                      corporate.ImagePath = fileName;                      Bitmap bitmap = new Bitmap(fileName);                      Bitmap resized = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 600);                      UserPicture.Height = resized.Height;                      UserPicture.Width = resized.Width;                      UserPicture.Image = resized;                      Bitmap thumbnail = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 128);                      corporateUserControl.pictureBox1.Image = thumbnail;                      corporateUserControl.pictureBox1.SizeMode = PictureBoxSizeMode.Zoom;                      UserPicture.Image = resized;                  }                  else if (photoSubId==1)                  {                      corporate.Image2Path = fileName;                      Bitmap bitmap = new Bitmap(fileName);                      Bitmap resized = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 600);                      UserPicture.Height = resized.Height;                      UserPicture.Width = resized.Width;                      UserPicture.Image = resized;                      Bitmap thumbnail = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 128);                      corporateUserControl.pictureBox2.Image = thumbnail;                      corporateUserControl.pictureBox2.SizeMode = PictureBoxSizeMode.Zoom;                      UserPicture.Image = resized;                  }              }
Magic Number,OpenCBS.GUI.Tools,ShowPictureForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Tools\ShowPictureForm.cs,ProcessImage,The following statement contains a magic number: if (personUserControl!=null)              {                  if (photoSubId == 0)                  {                      person.ImagePath = fileName;                      Bitmap bitmap = new Bitmap(fileName);                      Bitmap resized = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 600);                      UserPicture.Height = resized.Height;                      UserPicture.Width = resized.Width;                      UserPicture.Image = resized;                      Bitmap thumbnail = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 128);                      personUserControl.pictureBox.Image = thumbnail;                      personUserControl.pictureBox.SizeMode = PictureBoxSizeMode.Zoom;                      UserPicture.Image = resized;                  }                  else if (photoSubId == 1)                  {                      person.Image2Path = fileName;                      Bitmap bitmap = new Bitmap(fileName);                      Bitmap resized = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 600);                      UserPicture.Height = resized.Height;                      UserPicture.Width = resized.Width;                      UserPicture.Image = resized;                      Bitmap thumbnail = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 128);                      personUserControl.pictureBox2.Image = thumbnail;                      personUserControl.pictureBox2.SizeMode = PictureBoxSizeMode.Zoom;                      UserPicture.Image = resized;                  }              }                else if (villageForm!=null)              {                 if (photoSubId==0)                 {                     village.ImagePath = fileName;                     Bitmap bitmap = new Bitmap(fileName);                     Bitmap resized = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 600);                     UserPicture.Height = resized.Height;                     UserPicture.Width = resized.Width;                     UserPicture.Image = resized;                     Bitmap thumbnail = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 128);                     villageForm.pictureBox1.Image = thumbnail;                     villageForm.pictureBox1.SizeMode = PictureBoxSizeMode.Zoom;                     UserPicture.Image = resized;                 }                 else if (photoSubId==1)                 {                     village.Image2Path = fileName;                     Bitmap bitmap = new Bitmap(fileName);                     Bitmap resized = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 600);                     UserPicture.Height = resized.Height;                     UserPicture.Width = resized.Width;                     UserPicture.Image = resized;                     Bitmap thumbnail = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 128);                     villageForm.pictureBox2.Image = thumbnail;                     villageForm.pictureBox2.SizeMode = PictureBoxSizeMode.Zoom;                     UserPicture.Image = resized;                 }              }                else if (groupUserControl!=null)              {                  if (photoSubId==0)                  {                      group.ImagePath = fileName;                      Bitmap bitmap = new Bitmap(fileName);                      Bitmap resized = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 600);                      UserPicture.Height = resized.Height;                      UserPicture.Width = resized.Width;                      UserPicture.Image = resized;                      Bitmap thumbnail = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 128);                      groupUserControl.pictureBox1.Image = thumbnail;                      groupUserControl.pictureBox1.SizeMode = PictureBoxSizeMode.Zoom;                      UserPicture.Image = resized;                  }                  else if (photoSubId==1)                  {                      group.Image2Path = fileName;                      Bitmap bitmap=new Bitmap(fileName);                      Bitmap resized = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 600);                      UserPicture.Height = resized.Height;                      UserPicture.Width = resized.Width;                      UserPicture.Image = resized;                      Bitmap thumbnail = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 128);                      groupUserControl.pictureBox2.Image = thumbnail;                      groupUserControl.pictureBox2.SizeMode = PictureBoxSizeMode.Zoom;                      UserPicture.Image = resized;                  }              }              else if (corporateUserControl!=null)              {                  if (photoSubId==0)                  {                      corporate.ImagePath = fileName;                      Bitmap bitmap = new Bitmap(fileName);                      Bitmap resized = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 600);                      UserPicture.Height = resized.Height;                      UserPicture.Width = resized.Width;                      UserPicture.Image = resized;                      Bitmap thumbnail = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 128);                      corporateUserControl.pictureBox1.Image = thumbnail;                      corporateUserControl.pictureBox1.SizeMode = PictureBoxSizeMode.Zoom;                      UserPicture.Image = resized;                  }                  else if (photoSubId==1)                  {                      corporate.Image2Path = fileName;                      Bitmap bitmap = new Bitmap(fileName);                      Bitmap resized = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 600);                      UserPicture.Height = resized.Height;                      UserPicture.Width = resized.Width;                      UserPicture.Image = resized;                      Bitmap thumbnail = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 128);                      corporateUserControl.pictureBox2.Image = thumbnail;                      corporateUserControl.pictureBox2.SizeMode = PictureBoxSizeMode.Zoom;                      UserPicture.Image = resized;                  }              }
Magic Number,OpenCBS.GUI.Tools,ShowPictureForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Tools\ShowPictureForm.cs,ProcessImage,The following statement contains a magic number: if (personUserControl!=null)              {                  if (photoSubId == 0)                  {                      person.ImagePath = fileName;                      Bitmap bitmap = new Bitmap(fileName);                      Bitmap resized = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 600);                      UserPicture.Height = resized.Height;                      UserPicture.Width = resized.Width;                      UserPicture.Image = resized;                      Bitmap thumbnail = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 128);                      personUserControl.pictureBox.Image = thumbnail;                      personUserControl.pictureBox.SizeMode = PictureBoxSizeMode.Zoom;                      UserPicture.Image = resized;                  }                  else if (photoSubId == 1)                  {                      person.Image2Path = fileName;                      Bitmap bitmap = new Bitmap(fileName);                      Bitmap resized = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 600);                      UserPicture.Height = resized.Height;                      UserPicture.Width = resized.Width;                      UserPicture.Image = resized;                      Bitmap thumbnail = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 128);                      personUserControl.pictureBox2.Image = thumbnail;                      personUserControl.pictureBox2.SizeMode = PictureBoxSizeMode.Zoom;                      UserPicture.Image = resized;                  }              }                else if (villageForm!=null)              {                 if (photoSubId==0)                 {                     village.ImagePath = fileName;                     Bitmap bitmap = new Bitmap(fileName);                     Bitmap resized = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 600);                     UserPicture.Height = resized.Height;                     UserPicture.Width = resized.Width;                     UserPicture.Image = resized;                     Bitmap thumbnail = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 128);                     villageForm.pictureBox1.Image = thumbnail;                     villageForm.pictureBox1.SizeMode = PictureBoxSizeMode.Zoom;                     UserPicture.Image = resized;                 }                 else if (photoSubId==1)                 {                     village.Image2Path = fileName;                     Bitmap bitmap = new Bitmap(fileName);                     Bitmap resized = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 600);                     UserPicture.Height = resized.Height;                     UserPicture.Width = resized.Width;                     UserPicture.Image = resized;                     Bitmap thumbnail = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 128);                     villageForm.pictureBox2.Image = thumbnail;                     villageForm.pictureBox2.SizeMode = PictureBoxSizeMode.Zoom;                     UserPicture.Image = resized;                 }              }                else if (groupUserControl!=null)              {                  if (photoSubId==0)                  {                      group.ImagePath = fileName;                      Bitmap bitmap = new Bitmap(fileName);                      Bitmap resized = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 600);                      UserPicture.Height = resized.Height;                      UserPicture.Width = resized.Width;                      UserPicture.Image = resized;                      Bitmap thumbnail = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 128);                      groupUserControl.pictureBox1.Image = thumbnail;                      groupUserControl.pictureBox1.SizeMode = PictureBoxSizeMode.Zoom;                      UserPicture.Image = resized;                  }                  else if (photoSubId==1)                  {                      group.Image2Path = fileName;                      Bitmap bitmap=new Bitmap(fileName);                      Bitmap resized = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 600);                      UserPicture.Height = resized.Height;                      UserPicture.Width = resized.Width;                      UserPicture.Image = resized;                      Bitmap thumbnail = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 128);                      groupUserControl.pictureBox2.Image = thumbnail;                      groupUserControl.pictureBox2.SizeMode = PictureBoxSizeMode.Zoom;                      UserPicture.Image = resized;                  }              }              else if (corporateUserControl!=null)              {                  if (photoSubId==0)                  {                      corporate.ImagePath = fileName;                      Bitmap bitmap = new Bitmap(fileName);                      Bitmap resized = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 600);                      UserPicture.Height = resized.Height;                      UserPicture.Width = resized.Width;                      UserPicture.Image = resized;                      Bitmap thumbnail = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 128);                      corporateUserControl.pictureBox1.Image = thumbnail;                      corporateUserControl.pictureBox1.SizeMode = PictureBoxSizeMode.Zoom;                      UserPicture.Image = resized;                  }                  else if (photoSubId==1)                  {                      corporate.Image2Path = fileName;                      Bitmap bitmap = new Bitmap(fileName);                      Bitmap resized = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 600);                      UserPicture.Height = resized.Height;                      UserPicture.Width = resized.Width;                      UserPicture.Image = resized;                      Bitmap thumbnail = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 128);                      corporateUserControl.pictureBox2.Image = thumbnail;                      corporateUserControl.pictureBox2.SizeMode = PictureBoxSizeMode.Zoom;                      UserPicture.Image = resized;                  }              }
Magic Number,OpenCBS.GUI.Tools,ShowPictureForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Tools\ShowPictureForm.cs,ProcessImage,The following statement contains a magic number: if (personUserControl!=null)              {                  if (photoSubId == 0)                  {                      person.ImagePath = fileName;                      Bitmap bitmap = new Bitmap(fileName);                      Bitmap resized = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 600);                      UserPicture.Height = resized.Height;                      UserPicture.Width = resized.Width;                      UserPicture.Image = resized;                      Bitmap thumbnail = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 128);                      personUserControl.pictureBox.Image = thumbnail;                      personUserControl.pictureBox.SizeMode = PictureBoxSizeMode.Zoom;                      UserPicture.Image = resized;                  }                  else if (photoSubId == 1)                  {                      person.Image2Path = fileName;                      Bitmap bitmap = new Bitmap(fileName);                      Bitmap resized = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 600);                      UserPicture.Height = resized.Height;                      UserPicture.Width = resized.Width;                      UserPicture.Image = resized;                      Bitmap thumbnail = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 128);                      personUserControl.pictureBox2.Image = thumbnail;                      personUserControl.pictureBox2.SizeMode = PictureBoxSizeMode.Zoom;                      UserPicture.Image = resized;                  }              }                else if (villageForm!=null)              {                 if (photoSubId==0)                 {                     village.ImagePath = fileName;                     Bitmap bitmap = new Bitmap(fileName);                     Bitmap resized = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 600);                     UserPicture.Height = resized.Height;                     UserPicture.Width = resized.Width;                     UserPicture.Image = resized;                     Bitmap thumbnail = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 128);                     villageForm.pictureBox1.Image = thumbnail;                     villageForm.pictureBox1.SizeMode = PictureBoxSizeMode.Zoom;                     UserPicture.Image = resized;                 }                 else if (photoSubId==1)                 {                     village.Image2Path = fileName;                     Bitmap bitmap = new Bitmap(fileName);                     Bitmap resized = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 600);                     UserPicture.Height = resized.Height;                     UserPicture.Width = resized.Width;                     UserPicture.Image = resized;                     Bitmap thumbnail = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 128);                     villageForm.pictureBox2.Image = thumbnail;                     villageForm.pictureBox2.SizeMode = PictureBoxSizeMode.Zoom;                     UserPicture.Image = resized;                 }              }                else if (groupUserControl!=null)              {                  if (photoSubId==0)                  {                      group.ImagePath = fileName;                      Bitmap bitmap = new Bitmap(fileName);                      Bitmap resized = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 600);                      UserPicture.Height = resized.Height;                      UserPicture.Width = resized.Width;                      UserPicture.Image = resized;                      Bitmap thumbnail = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 128);                      groupUserControl.pictureBox1.Image = thumbnail;                      groupUserControl.pictureBox1.SizeMode = PictureBoxSizeMode.Zoom;                      UserPicture.Image = resized;                  }                  else if (photoSubId==1)                  {                      group.Image2Path = fileName;                      Bitmap bitmap=new Bitmap(fileName);                      Bitmap resized = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 600);                      UserPicture.Height = resized.Height;                      UserPicture.Width = resized.Width;                      UserPicture.Image = resized;                      Bitmap thumbnail = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 128);                      groupUserControl.pictureBox2.Image = thumbnail;                      groupUserControl.pictureBox2.SizeMode = PictureBoxSizeMode.Zoom;                      UserPicture.Image = resized;                  }              }              else if (corporateUserControl!=null)              {                  if (photoSubId==0)                  {                      corporate.ImagePath = fileName;                      Bitmap bitmap = new Bitmap(fileName);                      Bitmap resized = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 600);                      UserPicture.Height = resized.Height;                      UserPicture.Width = resized.Width;                      UserPicture.Image = resized;                      Bitmap thumbnail = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 128);                      corporateUserControl.pictureBox1.Image = thumbnail;                      corporateUserControl.pictureBox1.SizeMode = PictureBoxSizeMode.Zoom;                      UserPicture.Image = resized;                  }                  else if (photoSubId==1)                  {                      corporate.Image2Path = fileName;                      Bitmap bitmap = new Bitmap(fileName);                      Bitmap resized = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 600);                      UserPicture.Height = resized.Height;                      UserPicture.Width = resized.Width;                      UserPicture.Image = resized;                      Bitmap thumbnail = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 128);                      corporateUserControl.pictureBox2.Image = thumbnail;                      corporateUserControl.pictureBox2.SizeMode = PictureBoxSizeMode.Zoom;                      UserPicture.Image = resized;                  }              }
Magic Number,OpenCBS.GUI.Tools,ShowPictureForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Tools\ShowPictureForm.cs,ProcessImage,The following statement contains a magic number: if (personUserControl!=null)              {                  if (photoSubId == 0)                  {                      person.ImagePath = fileName;                      Bitmap bitmap = new Bitmap(fileName);                      Bitmap resized = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 600);                      UserPicture.Height = resized.Height;                      UserPicture.Width = resized.Width;                      UserPicture.Image = resized;                      Bitmap thumbnail = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 128);                      personUserControl.pictureBox.Image = thumbnail;                      personUserControl.pictureBox.SizeMode = PictureBoxSizeMode.Zoom;                      UserPicture.Image = resized;                  }                  else if (photoSubId == 1)                  {                      person.Image2Path = fileName;                      Bitmap bitmap = new Bitmap(fileName);                      Bitmap resized = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 600);                      UserPicture.Height = resized.Height;                      UserPicture.Width = resized.Width;                      UserPicture.Image = resized;                      Bitmap thumbnail = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 128);                      personUserControl.pictureBox2.Image = thumbnail;                      personUserControl.pictureBox2.SizeMode = PictureBoxSizeMode.Zoom;                      UserPicture.Image = resized;                  }              }                else if (villageForm!=null)              {                 if (photoSubId==0)                 {                     village.ImagePath = fileName;                     Bitmap bitmap = new Bitmap(fileName);                     Bitmap resized = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 600);                     UserPicture.Height = resized.Height;                     UserPicture.Width = resized.Width;                     UserPicture.Image = resized;                     Bitmap thumbnail = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 128);                     villageForm.pictureBox1.Image = thumbnail;                     villageForm.pictureBox1.SizeMode = PictureBoxSizeMode.Zoom;                     UserPicture.Image = resized;                 }                 else if (photoSubId==1)                 {                     village.Image2Path = fileName;                     Bitmap bitmap = new Bitmap(fileName);                     Bitmap resized = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 600);                     UserPicture.Height = resized.Height;                     UserPicture.Width = resized.Width;                     UserPicture.Image = resized;                     Bitmap thumbnail = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 128);                     villageForm.pictureBox2.Image = thumbnail;                     villageForm.pictureBox2.SizeMode = PictureBoxSizeMode.Zoom;                     UserPicture.Image = resized;                 }              }                else if (groupUserControl!=null)              {                  if (photoSubId==0)                  {                      group.ImagePath = fileName;                      Bitmap bitmap = new Bitmap(fileName);                      Bitmap resized = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 600);                      UserPicture.Height = resized.Height;                      UserPicture.Width = resized.Width;                      UserPicture.Image = resized;                      Bitmap thumbnail = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 128);                      groupUserControl.pictureBox1.Image = thumbnail;                      groupUserControl.pictureBox1.SizeMode = PictureBoxSizeMode.Zoom;                      UserPicture.Image = resized;                  }                  else if (photoSubId==1)                  {                      group.Image2Path = fileName;                      Bitmap bitmap=new Bitmap(fileName);                      Bitmap resized = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 600);                      UserPicture.Height = resized.Height;                      UserPicture.Width = resized.Width;                      UserPicture.Image = resized;                      Bitmap thumbnail = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 128);                      groupUserControl.pictureBox2.Image = thumbnail;                      groupUserControl.pictureBox2.SizeMode = PictureBoxSizeMode.Zoom;                      UserPicture.Image = resized;                  }              }              else if (corporateUserControl!=null)              {                  if (photoSubId==0)                  {                      corporate.ImagePath = fileName;                      Bitmap bitmap = new Bitmap(fileName);                      Bitmap resized = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 600);                      UserPicture.Height = resized.Height;                      UserPicture.Width = resized.Width;                      UserPicture.Image = resized;                      Bitmap thumbnail = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 128);                      corporateUserControl.pictureBox1.Image = thumbnail;                      corporateUserControl.pictureBox1.SizeMode = PictureBoxSizeMode.Zoom;                      UserPicture.Image = resized;                  }                  else if (photoSubId==1)                  {                      corporate.Image2Path = fileName;                      Bitmap bitmap = new Bitmap(fileName);                      Bitmap resized = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 600);                      UserPicture.Height = resized.Height;                      UserPicture.Width = resized.Width;                      UserPicture.Image = resized;                      Bitmap thumbnail = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 128);                      corporateUserControl.pictureBox2.Image = thumbnail;                      corporateUserControl.pictureBox2.SizeMode = PictureBoxSizeMode.Zoom;                      UserPicture.Image = resized;                  }              }
Magic Number,OpenCBS.GUI.Tools,ShowPictureForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Tools\ShowPictureForm.cs,ProcessImage,The following statement contains a magic number: if (personUserControl!=null)              {                  if (photoSubId == 0)                  {                      person.ImagePath = fileName;                      Bitmap bitmap = new Bitmap(fileName);                      Bitmap resized = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 600);                      UserPicture.Height = resized.Height;                      UserPicture.Width = resized.Width;                      UserPicture.Image = resized;                      Bitmap thumbnail = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 128);                      personUserControl.pictureBox.Image = thumbnail;                      personUserControl.pictureBox.SizeMode = PictureBoxSizeMode.Zoom;                      UserPicture.Image = resized;                  }                  else if (photoSubId == 1)                  {                      person.Image2Path = fileName;                      Bitmap bitmap = new Bitmap(fileName);                      Bitmap resized = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 600);                      UserPicture.Height = resized.Height;                      UserPicture.Width = resized.Width;                      UserPicture.Image = resized;                      Bitmap thumbnail = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 128);                      personUserControl.pictureBox2.Image = thumbnail;                      personUserControl.pictureBox2.SizeMode = PictureBoxSizeMode.Zoom;                      UserPicture.Image = resized;                  }              }                else if (villageForm!=null)              {                 if (photoSubId==0)                 {                     village.ImagePath = fileName;                     Bitmap bitmap = new Bitmap(fileName);                     Bitmap resized = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 600);                     UserPicture.Height = resized.Height;                     UserPicture.Width = resized.Width;                     UserPicture.Image = resized;                     Bitmap thumbnail = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 128);                     villageForm.pictureBox1.Image = thumbnail;                     villageForm.pictureBox1.SizeMode = PictureBoxSizeMode.Zoom;                     UserPicture.Image = resized;                 }                 else if (photoSubId==1)                 {                     village.Image2Path = fileName;                     Bitmap bitmap = new Bitmap(fileName);                     Bitmap resized = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 600);                     UserPicture.Height = resized.Height;                     UserPicture.Width = resized.Width;                     UserPicture.Image = resized;                     Bitmap thumbnail = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 128);                     villageForm.pictureBox2.Image = thumbnail;                     villageForm.pictureBox2.SizeMode = PictureBoxSizeMode.Zoom;                     UserPicture.Image = resized;                 }              }                else if (groupUserControl!=null)              {                  if (photoSubId==0)                  {                      group.ImagePath = fileName;                      Bitmap bitmap = new Bitmap(fileName);                      Bitmap resized = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 600);                      UserPicture.Height = resized.Height;                      UserPicture.Width = resized.Width;                      UserPicture.Image = resized;                      Bitmap thumbnail = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 128);                      groupUserControl.pictureBox1.Image = thumbnail;                      groupUserControl.pictureBox1.SizeMode = PictureBoxSizeMode.Zoom;                      UserPicture.Image = resized;                  }                  else if (photoSubId==1)                  {                      group.Image2Path = fileName;                      Bitmap bitmap=new Bitmap(fileName);                      Bitmap resized = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 600);                      UserPicture.Height = resized.Height;                      UserPicture.Width = resized.Width;                      UserPicture.Image = resized;                      Bitmap thumbnail = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 128);                      groupUserControl.pictureBox2.Image = thumbnail;                      groupUserControl.pictureBox2.SizeMode = PictureBoxSizeMode.Zoom;                      UserPicture.Image = resized;                  }              }              else if (corporateUserControl!=null)              {                  if (photoSubId==0)                  {                      corporate.ImagePath = fileName;                      Bitmap bitmap = new Bitmap(fileName);                      Bitmap resized = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 600);                      UserPicture.Height = resized.Height;                      UserPicture.Width = resized.Width;                      UserPicture.Image = resized;                      Bitmap thumbnail = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 128);                      corporateUserControl.pictureBox1.Image = thumbnail;                      corporateUserControl.pictureBox1.SizeMode = PictureBoxSizeMode.Zoom;                      UserPicture.Image = resized;                  }                  else if (photoSubId==1)                  {                      corporate.Image2Path = fileName;                      Bitmap bitmap = new Bitmap(fileName);                      Bitmap resized = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 600);                      UserPicture.Height = resized.Height;                      UserPicture.Width = resized.Width;                      UserPicture.Image = resized;                      Bitmap thumbnail = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 128);                      corporateUserControl.pictureBox2.Image = thumbnail;                      corporateUserControl.pictureBox2.SizeMode = PictureBoxSizeMode.Zoom;                      UserPicture.Image = resized;                  }              }
Magic Number,OpenCBS.GUI.Tools,ShowPictureForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Tools\ShowPictureForm.cs,ProcessImage,The following statement contains a magic number: if (personUserControl!=null)              {                  if (photoSubId == 0)                  {                      person.ImagePath = fileName;                      Bitmap bitmap = new Bitmap(fileName);                      Bitmap resized = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 600);                      UserPicture.Height = resized.Height;                      UserPicture.Width = resized.Width;                      UserPicture.Image = resized;                      Bitmap thumbnail = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 128);                      personUserControl.pictureBox.Image = thumbnail;                      personUserControl.pictureBox.SizeMode = PictureBoxSizeMode.Zoom;                      UserPicture.Image = resized;                  }                  else if (photoSubId == 1)                  {                      person.Image2Path = fileName;                      Bitmap bitmap = new Bitmap(fileName);                      Bitmap resized = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 600);                      UserPicture.Height = resized.Height;                      UserPicture.Width = resized.Width;                      UserPicture.Image = resized;                      Bitmap thumbnail = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 128);                      personUserControl.pictureBox2.Image = thumbnail;                      personUserControl.pictureBox2.SizeMode = PictureBoxSizeMode.Zoom;                      UserPicture.Image = resized;                  }              }                else if (villageForm!=null)              {                 if (photoSubId==0)                 {                     village.ImagePath = fileName;                     Bitmap bitmap = new Bitmap(fileName);                     Bitmap resized = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 600);                     UserPicture.Height = resized.Height;                     UserPicture.Width = resized.Width;                     UserPicture.Image = resized;                     Bitmap thumbnail = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 128);                     villageForm.pictureBox1.Image = thumbnail;                     villageForm.pictureBox1.SizeMode = PictureBoxSizeMode.Zoom;                     UserPicture.Image = resized;                 }                 else if (photoSubId==1)                 {                     village.Image2Path = fileName;                     Bitmap bitmap = new Bitmap(fileName);                     Bitmap resized = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 600);                     UserPicture.Height = resized.Height;                     UserPicture.Width = resized.Width;                     UserPicture.Image = resized;                     Bitmap thumbnail = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 128);                     villageForm.pictureBox2.Image = thumbnail;                     villageForm.pictureBox2.SizeMode = PictureBoxSizeMode.Zoom;                     UserPicture.Image = resized;                 }              }                else if (groupUserControl!=null)              {                  if (photoSubId==0)                  {                      group.ImagePath = fileName;                      Bitmap bitmap = new Bitmap(fileName);                      Bitmap resized = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 600);                      UserPicture.Height = resized.Height;                      UserPicture.Width = resized.Width;                      UserPicture.Image = resized;                      Bitmap thumbnail = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 128);                      groupUserControl.pictureBox1.Image = thumbnail;                      groupUserControl.pictureBox1.SizeMode = PictureBoxSizeMode.Zoom;                      UserPicture.Image = resized;                  }                  else if (photoSubId==1)                  {                      group.Image2Path = fileName;                      Bitmap bitmap=new Bitmap(fileName);                      Bitmap resized = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 600);                      UserPicture.Height = resized.Height;                      UserPicture.Width = resized.Width;                      UserPicture.Image = resized;                      Bitmap thumbnail = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 128);                      groupUserControl.pictureBox2.Image = thumbnail;                      groupUserControl.pictureBox2.SizeMode = PictureBoxSizeMode.Zoom;                      UserPicture.Image = resized;                  }              }              else if (corporateUserControl!=null)              {                  if (photoSubId==0)                  {                      corporate.ImagePath = fileName;                      Bitmap bitmap = new Bitmap(fileName);                      Bitmap resized = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 600);                      UserPicture.Height = resized.Height;                      UserPicture.Width = resized.Width;                      UserPicture.Image = resized;                      Bitmap thumbnail = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 128);                      corporateUserControl.pictureBox1.Image = thumbnail;                      corporateUserControl.pictureBox1.SizeMode = PictureBoxSizeMode.Zoom;                      UserPicture.Image = resized;                  }                  else if (photoSubId==1)                  {                      corporate.Image2Path = fileName;                      Bitmap bitmap = new Bitmap(fileName);                      Bitmap resized = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 600);                      UserPicture.Height = resized.Height;                      UserPicture.Width = resized.Width;                      UserPicture.Image = resized;                      Bitmap thumbnail = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 128);                      corporateUserControl.pictureBox2.Image = thumbnail;                      corporateUserControl.pictureBox2.SizeMode = PictureBoxSizeMode.Zoom;                      UserPicture.Image = resized;                  }              }
Magic Number,OpenCBS.GUI.Tools,ShowPictureForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Tools\ShowPictureForm.cs,ProcessImage,The following statement contains a magic number: if (personUserControl!=null)              {                  if (photoSubId == 0)                  {                      person.ImagePath = fileName;                      Bitmap bitmap = new Bitmap(fileName);                      Bitmap resized = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 600);                      UserPicture.Height = resized.Height;                      UserPicture.Width = resized.Width;                      UserPicture.Image = resized;                      Bitmap thumbnail = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 128);                      personUserControl.pictureBox.Image = thumbnail;                      personUserControl.pictureBox.SizeMode = PictureBoxSizeMode.Zoom;                      UserPicture.Image = resized;                  }                  else if (photoSubId == 1)                  {                      person.Image2Path = fileName;                      Bitmap bitmap = new Bitmap(fileName);                      Bitmap resized = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 600);                      UserPicture.Height = resized.Height;                      UserPicture.Width = resized.Width;                      UserPicture.Image = resized;                      Bitmap thumbnail = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 128);                      personUserControl.pictureBox2.Image = thumbnail;                      personUserControl.pictureBox2.SizeMode = PictureBoxSizeMode.Zoom;                      UserPicture.Image = resized;                  }              }                else if (villageForm!=null)              {                 if (photoSubId==0)                 {                     village.ImagePath = fileName;                     Bitmap bitmap = new Bitmap(fileName);                     Bitmap resized = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 600);                     UserPicture.Height = resized.Height;                     UserPicture.Width = resized.Width;                     UserPicture.Image = resized;                     Bitmap thumbnail = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 128);                     villageForm.pictureBox1.Image = thumbnail;                     villageForm.pictureBox1.SizeMode = PictureBoxSizeMode.Zoom;                     UserPicture.Image = resized;                 }                 else if (photoSubId==1)                 {                     village.Image2Path = fileName;                     Bitmap bitmap = new Bitmap(fileName);                     Bitmap resized = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 600);                     UserPicture.Height = resized.Height;                     UserPicture.Width = resized.Width;                     UserPicture.Image = resized;                     Bitmap thumbnail = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 128);                     villageForm.pictureBox2.Image = thumbnail;                     villageForm.pictureBox2.SizeMode = PictureBoxSizeMode.Zoom;                     UserPicture.Image = resized;                 }              }                else if (groupUserControl!=null)              {                  if (photoSubId==0)                  {                      group.ImagePath = fileName;                      Bitmap bitmap = new Bitmap(fileName);                      Bitmap resized = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 600);                      UserPicture.Height = resized.Height;                      UserPicture.Width = resized.Width;                      UserPicture.Image = resized;                      Bitmap thumbnail = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 128);                      groupUserControl.pictureBox1.Image = thumbnail;                      groupUserControl.pictureBox1.SizeMode = PictureBoxSizeMode.Zoom;                      UserPicture.Image = resized;                  }                  else if (photoSubId==1)                  {                      group.Image2Path = fileName;                      Bitmap bitmap=new Bitmap(fileName);                      Bitmap resized = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 600);                      UserPicture.Height = resized.Height;                      UserPicture.Width = resized.Width;                      UserPicture.Image = resized;                      Bitmap thumbnail = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 128);                      groupUserControl.pictureBox2.Image = thumbnail;                      groupUserControl.pictureBox2.SizeMode = PictureBoxSizeMode.Zoom;                      UserPicture.Image = resized;                  }              }              else if (corporateUserControl!=null)              {                  if (photoSubId==0)                  {                      corporate.ImagePath = fileName;                      Bitmap bitmap = new Bitmap(fileName);                      Bitmap resized = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 600);                      UserPicture.Height = resized.Height;                      UserPicture.Width = resized.Width;                      UserPicture.Image = resized;                      Bitmap thumbnail = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 128);                      corporateUserControl.pictureBox1.Image = thumbnail;                      corporateUserControl.pictureBox1.SizeMode = PictureBoxSizeMode.Zoom;                      UserPicture.Image = resized;                  }                  else if (photoSubId==1)                  {                      corporate.Image2Path = fileName;                      Bitmap bitmap = new Bitmap(fileName);                      Bitmap resized = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 600);                      UserPicture.Height = resized.Height;                      UserPicture.Width = resized.Width;                      UserPicture.Image = resized;                      Bitmap thumbnail = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 128);                      corporateUserControl.pictureBox2.Image = thumbnail;                      corporateUserControl.pictureBox2.SizeMode = PictureBoxSizeMode.Zoom;                      UserPicture.Image = resized;                  }              }
Magic Number,OpenCBS.GUI.Tools,ShowPictureForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Tools\ShowPictureForm.cs,ProcessImage,The following statement contains a magic number: if (personUserControl!=null)              {                  if (photoSubId == 0)                  {                      person.ImagePath = fileName;                      Bitmap bitmap = new Bitmap(fileName);                      Bitmap resized = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 600);                      UserPicture.Height = resized.Height;                      UserPicture.Width = resized.Width;                      UserPicture.Image = resized;                      Bitmap thumbnail = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 128);                      personUserControl.pictureBox.Image = thumbnail;                      personUserControl.pictureBox.SizeMode = PictureBoxSizeMode.Zoom;                      UserPicture.Image = resized;                  }                  else if (photoSubId == 1)                  {                      person.Image2Path = fileName;                      Bitmap bitmap = new Bitmap(fileName);                      Bitmap resized = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 600);                      UserPicture.Height = resized.Height;                      UserPicture.Width = resized.Width;                      UserPicture.Image = resized;                      Bitmap thumbnail = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 128);                      personUserControl.pictureBox2.Image = thumbnail;                      personUserControl.pictureBox2.SizeMode = PictureBoxSizeMode.Zoom;                      UserPicture.Image = resized;                  }              }                else if (villageForm!=null)              {                 if (photoSubId==0)                 {                     village.ImagePath = fileName;                     Bitmap bitmap = new Bitmap(fileName);                     Bitmap resized = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 600);                     UserPicture.Height = resized.Height;                     UserPicture.Width = resized.Width;                     UserPicture.Image = resized;                     Bitmap thumbnail = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 128);                     villageForm.pictureBox1.Image = thumbnail;                     villageForm.pictureBox1.SizeMode = PictureBoxSizeMode.Zoom;                     UserPicture.Image = resized;                 }                 else if (photoSubId==1)                 {                     village.Image2Path = fileName;                     Bitmap bitmap = new Bitmap(fileName);                     Bitmap resized = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 600);                     UserPicture.Height = resized.Height;                     UserPicture.Width = resized.Width;                     UserPicture.Image = resized;                     Bitmap thumbnail = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 128);                     villageForm.pictureBox2.Image = thumbnail;                     villageForm.pictureBox2.SizeMode = PictureBoxSizeMode.Zoom;                     UserPicture.Image = resized;                 }              }                else if (groupUserControl!=null)              {                  if (photoSubId==0)                  {                      group.ImagePath = fileName;                      Bitmap bitmap = new Bitmap(fileName);                      Bitmap resized = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 600);                      UserPicture.Height = resized.Height;                      UserPicture.Width = resized.Width;                      UserPicture.Image = resized;                      Bitmap thumbnail = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 128);                      groupUserControl.pictureBox1.Image = thumbnail;                      groupUserControl.pictureBox1.SizeMode = PictureBoxSizeMode.Zoom;                      UserPicture.Image = resized;                  }                  else if (photoSubId==1)                  {                      group.Image2Path = fileName;                      Bitmap bitmap=new Bitmap(fileName);                      Bitmap resized = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 600);                      UserPicture.Height = resized.Height;                      UserPicture.Width = resized.Width;                      UserPicture.Image = resized;                      Bitmap thumbnail = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 128);                      groupUserControl.pictureBox2.Image = thumbnail;                      groupUserControl.pictureBox2.SizeMode = PictureBoxSizeMode.Zoom;                      UserPicture.Image = resized;                  }              }              else if (corporateUserControl!=null)              {                  if (photoSubId==0)                  {                      corporate.ImagePath = fileName;                      Bitmap bitmap = new Bitmap(fileName);                      Bitmap resized = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 600);                      UserPicture.Height = resized.Height;                      UserPicture.Width = resized.Width;                      UserPicture.Image = resized;                      Bitmap thumbnail = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 128);                      corporateUserControl.pictureBox1.Image = thumbnail;                      corporateUserControl.pictureBox1.SizeMode = PictureBoxSizeMode.Zoom;                      UserPicture.Image = resized;                  }                  else if (photoSubId==1)                  {                      corporate.Image2Path = fileName;                      Bitmap bitmap = new Bitmap(fileName);                      Bitmap resized = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 600);                      UserPicture.Height = resized.Height;                      UserPicture.Width = resized.Width;                      UserPicture.Image = resized;                      Bitmap thumbnail = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 128);                      corporateUserControl.pictureBox2.Image = thumbnail;                      corporateUserControl.pictureBox2.SizeMode = PictureBoxSizeMode.Zoom;                      UserPicture.Image = resized;                  }              }
Magic Number,OpenCBS.GUI.Tools,ShowPictureForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Tools\ShowPictureForm.cs,ProcessImage,The following statement contains a magic number: if (personUserControl!=null)              {                  if (photoSubId == 0)                  {                      person.ImagePath = fileName;                      Bitmap bitmap = new Bitmap(fileName);                      Bitmap resized = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 600);                      UserPicture.Height = resized.Height;                      UserPicture.Width = resized.Width;                      UserPicture.Image = resized;                      Bitmap thumbnail = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 128);                      personUserControl.pictureBox.Image = thumbnail;                      personUserControl.pictureBox.SizeMode = PictureBoxSizeMode.Zoom;                      UserPicture.Image = resized;                  }                  else if (photoSubId == 1)                  {                      person.Image2Path = fileName;                      Bitmap bitmap = new Bitmap(fileName);                      Bitmap resized = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 600);                      UserPicture.Height = resized.Height;                      UserPicture.Width = resized.Width;                      UserPicture.Image = resized;                      Bitmap thumbnail = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 128);                      personUserControl.pictureBox2.Image = thumbnail;                      personUserControl.pictureBox2.SizeMode = PictureBoxSizeMode.Zoom;                      UserPicture.Image = resized;                  }              }                else if (villageForm!=null)              {                 if (photoSubId==0)                 {                     village.ImagePath = fileName;                     Bitmap bitmap = new Bitmap(fileName);                     Bitmap resized = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 600);                     UserPicture.Height = resized.Height;                     UserPicture.Width = resized.Width;                     UserPicture.Image = resized;                     Bitmap thumbnail = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 128);                     villageForm.pictureBox1.Image = thumbnail;                     villageForm.pictureBox1.SizeMode = PictureBoxSizeMode.Zoom;                     UserPicture.Image = resized;                 }                 else if (photoSubId==1)                 {                     village.Image2Path = fileName;                     Bitmap bitmap = new Bitmap(fileName);                     Bitmap resized = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 600);                     UserPicture.Height = resized.Height;                     UserPicture.Width = resized.Width;                     UserPicture.Image = resized;                     Bitmap thumbnail = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 128);                     villageForm.pictureBox2.Image = thumbnail;                     villageForm.pictureBox2.SizeMode = PictureBoxSizeMode.Zoom;                     UserPicture.Image = resized;                 }              }                else if (groupUserControl!=null)              {                  if (photoSubId==0)                  {                      group.ImagePath = fileName;                      Bitmap bitmap = new Bitmap(fileName);                      Bitmap resized = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 600);                      UserPicture.Height = resized.Height;                      UserPicture.Width = resized.Width;                      UserPicture.Image = resized;                      Bitmap thumbnail = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 128);                      groupUserControl.pictureBox1.Image = thumbnail;                      groupUserControl.pictureBox1.SizeMode = PictureBoxSizeMode.Zoom;                      UserPicture.Image = resized;                  }                  else if (photoSubId==1)                  {                      group.Image2Path = fileName;                      Bitmap bitmap=new Bitmap(fileName);                      Bitmap resized = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 600);                      UserPicture.Height = resized.Height;                      UserPicture.Width = resized.Width;                      UserPicture.Image = resized;                      Bitmap thumbnail = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 128);                      groupUserControl.pictureBox2.Image = thumbnail;                      groupUserControl.pictureBox2.SizeMode = PictureBoxSizeMode.Zoom;                      UserPicture.Image = resized;                  }              }              else if (corporateUserControl!=null)              {                  if (photoSubId==0)                  {                      corporate.ImagePath = fileName;                      Bitmap bitmap = new Bitmap(fileName);                      Bitmap resized = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 600);                      UserPicture.Height = resized.Height;                      UserPicture.Width = resized.Width;                      UserPicture.Image = resized;                      Bitmap thumbnail = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 128);                      corporateUserControl.pictureBox1.Image = thumbnail;                      corporateUserControl.pictureBox1.SizeMode = PictureBoxSizeMode.Zoom;                      UserPicture.Image = resized;                  }                  else if (photoSubId==1)                  {                      corporate.Image2Path = fileName;                      Bitmap bitmap = new Bitmap(fileName);                      Bitmap resized = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 600);                      UserPicture.Height = resized.Height;                      UserPicture.Width = resized.Width;                      UserPicture.Image = resized;                      Bitmap thumbnail = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 128);                      corporateUserControl.pictureBox2.Image = thumbnail;                      corporateUserControl.pictureBox2.SizeMode = PictureBoxSizeMode.Zoom;                      UserPicture.Image = resized;                  }              }
Magic Number,OpenCBS.GUI.Tools,ShowPictureForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Tools\ShowPictureForm.cs,ProcessImage,The following statement contains a magic number: if (personUserControl!=null)              {                  if (photoSubId == 0)                  {                      person.ImagePath = fileName;                      Bitmap bitmap = new Bitmap(fileName);                      Bitmap resized = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 600);                      UserPicture.Height = resized.Height;                      UserPicture.Width = resized.Width;                      UserPicture.Image = resized;                      Bitmap thumbnail = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 128);                      personUserControl.pictureBox.Image = thumbnail;                      personUserControl.pictureBox.SizeMode = PictureBoxSizeMode.Zoom;                      UserPicture.Image = resized;                  }                  else if (photoSubId == 1)                  {                      person.Image2Path = fileName;                      Bitmap bitmap = new Bitmap(fileName);                      Bitmap resized = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 600);                      UserPicture.Height = resized.Height;                      UserPicture.Width = resized.Width;                      UserPicture.Image = resized;                      Bitmap thumbnail = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 128);                      personUserControl.pictureBox2.Image = thumbnail;                      personUserControl.pictureBox2.SizeMode = PictureBoxSizeMode.Zoom;                      UserPicture.Image = resized;                  }              }                else if (villageForm!=null)              {                 if (photoSubId==0)                 {                     village.ImagePath = fileName;                     Bitmap bitmap = new Bitmap(fileName);                     Bitmap resized = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 600);                     UserPicture.Height = resized.Height;                     UserPicture.Width = resized.Width;                     UserPicture.Image = resized;                     Bitmap thumbnail = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 128);                     villageForm.pictureBox1.Image = thumbnail;                     villageForm.pictureBox1.SizeMode = PictureBoxSizeMode.Zoom;                     UserPicture.Image = resized;                 }                 else if (photoSubId==1)                 {                     village.Image2Path = fileName;                     Bitmap bitmap = new Bitmap(fileName);                     Bitmap resized = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 600);                     UserPicture.Height = resized.Height;                     UserPicture.Width = resized.Width;                     UserPicture.Image = resized;                     Bitmap thumbnail = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 128);                     villageForm.pictureBox2.Image = thumbnail;                     villageForm.pictureBox2.SizeMode = PictureBoxSizeMode.Zoom;                     UserPicture.Image = resized;                 }              }                else if (groupUserControl!=null)              {                  if (photoSubId==0)                  {                      group.ImagePath = fileName;                      Bitmap bitmap = new Bitmap(fileName);                      Bitmap resized = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 600);                      UserPicture.Height = resized.Height;                      UserPicture.Width = resized.Width;                      UserPicture.Image = resized;                      Bitmap thumbnail = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 128);                      groupUserControl.pictureBox1.Image = thumbnail;                      groupUserControl.pictureBox1.SizeMode = PictureBoxSizeMode.Zoom;                      UserPicture.Image = resized;                  }                  else if (photoSubId==1)                  {                      group.Image2Path = fileName;                      Bitmap bitmap=new Bitmap(fileName);                      Bitmap resized = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 600);                      UserPicture.Height = resized.Height;                      UserPicture.Width = resized.Width;                      UserPicture.Image = resized;                      Bitmap thumbnail = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 128);                      groupUserControl.pictureBox2.Image = thumbnail;                      groupUserControl.pictureBox2.SizeMode = PictureBoxSizeMode.Zoom;                      UserPicture.Image = resized;                  }              }              else if (corporateUserControl!=null)              {                  if (photoSubId==0)                  {                      corporate.ImagePath = fileName;                      Bitmap bitmap = new Bitmap(fileName);                      Bitmap resized = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 600);                      UserPicture.Height = resized.Height;                      UserPicture.Width = resized.Width;                      UserPicture.Image = resized;                      Bitmap thumbnail = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 128);                      corporateUserControl.pictureBox1.Image = thumbnail;                      corporateUserControl.pictureBox1.SizeMode = PictureBoxSizeMode.Zoom;                      UserPicture.Image = resized;                  }                  else if (photoSubId==1)                  {                      corporate.Image2Path = fileName;                      Bitmap bitmap = new Bitmap(fileName);                      Bitmap resized = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 600);                      UserPicture.Height = resized.Height;                      UserPicture.Width = resized.Width;                      UserPicture.Image = resized;                      Bitmap thumbnail = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 128);                      corporateUserControl.pictureBox2.Image = thumbnail;                      corporateUserControl.pictureBox2.SizeMode = PictureBoxSizeMode.Zoom;                      UserPicture.Image = resized;                  }              }
Magic Number,OpenCBS.GUI.Tools,ShowPictureForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Tools\ShowPictureForm.cs,ProcessImage,The following statement contains a magic number: if (personUserControl!=null)              {                  if (photoSubId == 0)                  {                      person.ImagePath = fileName;                      Bitmap bitmap = new Bitmap(fileName);                      Bitmap resized = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 600);                      UserPicture.Height = resized.Height;                      UserPicture.Width = resized.Width;                      UserPicture.Image = resized;                      Bitmap thumbnail = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 128);                      personUserControl.pictureBox.Image = thumbnail;                      personUserControl.pictureBox.SizeMode = PictureBoxSizeMode.Zoom;                      UserPicture.Image = resized;                  }                  else if (photoSubId == 1)                  {                      person.Image2Path = fileName;                      Bitmap bitmap = new Bitmap(fileName);                      Bitmap resized = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 600);                      UserPicture.Height = resized.Height;                      UserPicture.Width = resized.Width;                      UserPicture.Image = resized;                      Bitmap thumbnail = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 128);                      personUserControl.pictureBox2.Image = thumbnail;                      personUserControl.pictureBox2.SizeMode = PictureBoxSizeMode.Zoom;                      UserPicture.Image = resized;                  }              }                else if (villageForm!=null)              {                 if (photoSubId==0)                 {                     village.ImagePath = fileName;                     Bitmap bitmap = new Bitmap(fileName);                     Bitmap resized = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 600);                     UserPicture.Height = resized.Height;                     UserPicture.Width = resized.Width;                     UserPicture.Image = resized;                     Bitmap thumbnail = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 128);                     villageForm.pictureBox1.Image = thumbnail;                     villageForm.pictureBox1.SizeMode = PictureBoxSizeMode.Zoom;                     UserPicture.Image = resized;                 }                 else if (photoSubId==1)                 {                     village.Image2Path = fileName;                     Bitmap bitmap = new Bitmap(fileName);                     Bitmap resized = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 600);                     UserPicture.Height = resized.Height;                     UserPicture.Width = resized.Width;                     UserPicture.Image = resized;                     Bitmap thumbnail = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 128);                     villageForm.pictureBox2.Image = thumbnail;                     villageForm.pictureBox2.SizeMode = PictureBoxSizeMode.Zoom;                     UserPicture.Image = resized;                 }              }                else if (groupUserControl!=null)              {                  if (photoSubId==0)                  {                      group.ImagePath = fileName;                      Bitmap bitmap = new Bitmap(fileName);                      Bitmap resized = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 600);                      UserPicture.Height = resized.Height;                      UserPicture.Width = resized.Width;                      UserPicture.Image = resized;                      Bitmap thumbnail = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 128);                      groupUserControl.pictureBox1.Image = thumbnail;                      groupUserControl.pictureBox1.SizeMode = PictureBoxSizeMode.Zoom;                      UserPicture.Image = resized;                  }                  else if (photoSubId==1)                  {                      group.Image2Path = fileName;                      Bitmap bitmap=new Bitmap(fileName);                      Bitmap resized = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 600);                      UserPicture.Height = resized.Height;                      UserPicture.Width = resized.Width;                      UserPicture.Image = resized;                      Bitmap thumbnail = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 128);                      groupUserControl.pictureBox2.Image = thumbnail;                      groupUserControl.pictureBox2.SizeMode = PictureBoxSizeMode.Zoom;                      UserPicture.Image = resized;                  }              }              else if (corporateUserControl!=null)              {                  if (photoSubId==0)                  {                      corporate.ImagePath = fileName;                      Bitmap bitmap = new Bitmap(fileName);                      Bitmap resized = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 600);                      UserPicture.Height = resized.Height;                      UserPicture.Width = resized.Width;                      UserPicture.Image = resized;                      Bitmap thumbnail = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 128);                      corporateUserControl.pictureBox1.Image = thumbnail;                      corporateUserControl.pictureBox1.SizeMode = PictureBoxSizeMode.Zoom;                      UserPicture.Image = resized;                  }                  else if (photoSubId==1)                  {                      corporate.Image2Path = fileName;                      Bitmap bitmap = new Bitmap(fileName);                      Bitmap resized = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 600);                      UserPicture.Height = resized.Height;                      UserPicture.Width = resized.Width;                      UserPicture.Image = resized;                      Bitmap thumbnail = ServicesProvider.GetInstance().GetPicturesServices().Resize(bitmap' 128);                      corporateUserControl.pictureBox2.Image = thumbnail;                      corporateUserControl.pictureBox2.SizeMode = PictureBoxSizeMode.Zoom;                      UserPicture.Image = resized;                  }              }
Magic Number,OpenCBS.GUI.Tools,ShowPictureForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Tools\ShowPictureForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel2.SetRowSpan(this.gpPicture' 5);
Magic Number,OpenCBS.GUI.Tools,ShowPictureForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Tools\ShowPictureForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(81))))' ((int)(((byte)(152)))));
Magic Number,OpenCBS.GUI.Tools,ShowPictureForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Tools\ShowPictureForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(81))))' ((int)(((byte)(152)))));
Magic Number,OpenCBS.GUI.Tools,ShowPictureForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Tools\ShowPictureForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel2.Controls.Add(this.deletePhotoButton' 1' 2);
Magic Number,OpenCBS.GUI.Tools,OMonthCalendar,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Tools\OMonthCalendar.cs,OnPaint,The following statement contains a magic number: if ( (WarningDates.Count > 0) || (WarningDates1.Count > 0))              {                  SelectionRange calendarRange = GetDisplayRange(false);                    // Create a list of those dates that actually should be marked as warnings.                   List<DateTime> visibleWarningDates = new List<DateTime>();                  foreach (DateTime date in WarningDates)                  {                      if (date >= calendarRange.Start && date <= calendarRange.End)                      {                          visibleWarningDates.Add(date);                      }                  }                    // Create a list of those dates that actually should be marked as warnings.                   List<DateTime> visibleWarningDates1 = new List<DateTime>();                  foreach (DateTime date in WarningDates1)                  {                      if (date >= calendarRange.Start && date <= calendarRange.End)                      {                          visibleWarningDates1.Add(date);                      }                  }                    if ((visibleWarningDates.Count > 0) || (visibleWarningDates1.Count > 0))                  {                      HitArea hit = HitTest(25' firstWeekPosition).HitArea;                      while ((HitTest(25' firstWeekPosition).HitArea != HitArea.PrevMonthDate                          && HitTest(25' firstWeekPosition).HitArea != HitArea.Date)                          && firstWeekPosition < Height)                      {                          firstWeekPosition++;                      }                      //graphics.DrawLine(Pens.Red' 0' firstWeekPosition' 100' firstWeekPosition);                        while ((HitTest(25' lastWeekPosition).HitArea != HitArea.NextMonthDate && HitTest(25' lastWeekPosition).HitArea != HitArea.Date) && lastWeekPosition >= 0)                      {                          lastWeekPosition--;                      }                        //graphics.DrawLine(Pens.Red' 0' lastWeekPosition' 100' lastWeekPosition);                        if (firstWeekPosition > 0 && lastWeekPosition > 0)                      {                          dayBoxWidth = Width / (ShowWeekNumbers ? 8 : 7);                          dayBoxHeight = (((float)(lastWeekPosition - firstWeekPosition)) / 6.0f);                            using (Brush brushWarning = new SolidBrush(Color.FromArgb(255' WarningBackColor)))                          {                              using (Brush brushWarning1 = new SolidBrush(Color.FromArgb(255' WarningBackColor1)))                              {                                  foreach (DateTime visDate in visibleWarningDates)                                  {                                      DrawCell(graphics' dayBoxWidth' dayBoxHeight' firstWeekPosition' calendarRange' brushWarning'                                               visDate);                                  }                                  foreach (DateTime visDate in visibleWarningDates1)                                  {                                      DrawCell(graphics' dayBoxWidth' dayBoxHeight' firstWeekPosition' calendarRange'                                               brushWarning1' visDate);                                  }                              }                          }                      }                  }              }
Magic Number,OpenCBS.GUI.Tools,OMonthCalendar,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Tools\OMonthCalendar.cs,OnPaint,The following statement contains a magic number: if ( (WarningDates.Count > 0) || (WarningDates1.Count > 0))              {                  SelectionRange calendarRange = GetDisplayRange(false);                    // Create a list of those dates that actually should be marked as warnings.                   List<DateTime> visibleWarningDates = new List<DateTime>();                  foreach (DateTime date in WarningDates)                  {                      if (date >= calendarRange.Start && date <= calendarRange.End)                      {                          visibleWarningDates.Add(date);                      }                  }                    // Create a list of those dates that actually should be marked as warnings.                   List<DateTime> visibleWarningDates1 = new List<DateTime>();                  foreach (DateTime date in WarningDates1)                  {                      if (date >= calendarRange.Start && date <= calendarRange.End)                      {                          visibleWarningDates1.Add(date);                      }                  }                    if ((visibleWarningDates.Count > 0) || (visibleWarningDates1.Count > 0))                  {                      HitArea hit = HitTest(25' firstWeekPosition).HitArea;                      while ((HitTest(25' firstWeekPosition).HitArea != HitArea.PrevMonthDate                          && HitTest(25' firstWeekPosition).HitArea != HitArea.Date)                          && firstWeekPosition < Height)                      {                          firstWeekPosition++;                      }                      //graphics.DrawLine(Pens.Red' 0' firstWeekPosition' 100' firstWeekPosition);                        while ((HitTest(25' lastWeekPosition).HitArea != HitArea.NextMonthDate && HitTest(25' lastWeekPosition).HitArea != HitArea.Date) && lastWeekPosition >= 0)                      {                          lastWeekPosition--;                      }                        //graphics.DrawLine(Pens.Red' 0' lastWeekPosition' 100' lastWeekPosition);                        if (firstWeekPosition > 0 && lastWeekPosition > 0)                      {                          dayBoxWidth = Width / (ShowWeekNumbers ? 8 : 7);                          dayBoxHeight = (((float)(lastWeekPosition - firstWeekPosition)) / 6.0f);                            using (Brush brushWarning = new SolidBrush(Color.FromArgb(255' WarningBackColor)))                          {                              using (Brush brushWarning1 = new SolidBrush(Color.FromArgb(255' WarningBackColor1)))                              {                                  foreach (DateTime visDate in visibleWarningDates)                                  {                                      DrawCell(graphics' dayBoxWidth' dayBoxHeight' firstWeekPosition' calendarRange' brushWarning'                                               visDate);                                  }                                  foreach (DateTime visDate in visibleWarningDates1)                                  {                                      DrawCell(graphics' dayBoxWidth' dayBoxHeight' firstWeekPosition' calendarRange'                                               brushWarning1' visDate);                                  }                              }                          }                      }                  }              }
Magic Number,OpenCBS.GUI.Tools,OMonthCalendar,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Tools\OMonthCalendar.cs,OnPaint,The following statement contains a magic number: if ( (WarningDates.Count > 0) || (WarningDates1.Count > 0))              {                  SelectionRange calendarRange = GetDisplayRange(false);                    // Create a list of those dates that actually should be marked as warnings.                   List<DateTime> visibleWarningDates = new List<DateTime>();                  foreach (DateTime date in WarningDates)                  {                      if (date >= calendarRange.Start && date <= calendarRange.End)                      {                          visibleWarningDates.Add(date);                      }                  }                    // Create a list of those dates that actually should be marked as warnings.                   List<DateTime> visibleWarningDates1 = new List<DateTime>();                  foreach (DateTime date in WarningDates1)                  {                      if (date >= calendarRange.Start && date <= calendarRange.End)                      {                          visibleWarningDates1.Add(date);                      }                  }                    if ((visibleWarningDates.Count > 0) || (visibleWarningDates1.Count > 0))                  {                      HitArea hit = HitTest(25' firstWeekPosition).HitArea;                      while ((HitTest(25' firstWeekPosition).HitArea != HitArea.PrevMonthDate                          && HitTest(25' firstWeekPosition).HitArea != HitArea.Date)                          && firstWeekPosition < Height)                      {                          firstWeekPosition++;                      }                      //graphics.DrawLine(Pens.Red' 0' firstWeekPosition' 100' firstWeekPosition);                        while ((HitTest(25' lastWeekPosition).HitArea != HitArea.NextMonthDate && HitTest(25' lastWeekPosition).HitArea != HitArea.Date) && lastWeekPosition >= 0)                      {                          lastWeekPosition--;                      }                        //graphics.DrawLine(Pens.Red' 0' lastWeekPosition' 100' lastWeekPosition);                        if (firstWeekPosition > 0 && lastWeekPosition > 0)                      {                          dayBoxWidth = Width / (ShowWeekNumbers ? 8 : 7);                          dayBoxHeight = (((float)(lastWeekPosition - firstWeekPosition)) / 6.0f);                            using (Brush brushWarning = new SolidBrush(Color.FromArgb(255' WarningBackColor)))                          {                              using (Brush brushWarning1 = new SolidBrush(Color.FromArgb(255' WarningBackColor1)))                              {                                  foreach (DateTime visDate in visibleWarningDates)                                  {                                      DrawCell(graphics' dayBoxWidth' dayBoxHeight' firstWeekPosition' calendarRange' brushWarning'                                               visDate);                                  }                                  foreach (DateTime visDate in visibleWarningDates1)                                  {                                      DrawCell(graphics' dayBoxWidth' dayBoxHeight' firstWeekPosition' calendarRange'                                               brushWarning1' visDate);                                  }                              }                          }                      }                  }              }
Magic Number,OpenCBS.GUI.Tools,OMonthCalendar,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Tools\OMonthCalendar.cs,OnPaint,The following statement contains a magic number: if ( (WarningDates.Count > 0) || (WarningDates1.Count > 0))              {                  SelectionRange calendarRange = GetDisplayRange(false);                    // Create a list of those dates that actually should be marked as warnings.                   List<DateTime> visibleWarningDates = new List<DateTime>();                  foreach (DateTime date in WarningDates)                  {                      if (date >= calendarRange.Start && date <= calendarRange.End)                      {                          visibleWarningDates.Add(date);                      }                  }                    // Create a list of those dates that actually should be marked as warnings.                   List<DateTime> visibleWarningDates1 = new List<DateTime>();                  foreach (DateTime date in WarningDates1)                  {                      if (date >= calendarRange.Start && date <= calendarRange.End)                      {                          visibleWarningDates1.Add(date);                      }                  }                    if ((visibleWarningDates.Count > 0) || (visibleWarningDates1.Count > 0))                  {                      HitArea hit = HitTest(25' firstWeekPosition).HitArea;                      while ((HitTest(25' firstWeekPosition).HitArea != HitArea.PrevMonthDate                          && HitTest(25' firstWeekPosition).HitArea != HitArea.Date)                          && firstWeekPosition < Height)                      {                          firstWeekPosition++;                      }                      //graphics.DrawLine(Pens.Red' 0' firstWeekPosition' 100' firstWeekPosition);                        while ((HitTest(25' lastWeekPosition).HitArea != HitArea.NextMonthDate && HitTest(25' lastWeekPosition).HitArea != HitArea.Date) && lastWeekPosition >= 0)                      {                          lastWeekPosition--;                      }                        //graphics.DrawLine(Pens.Red' 0' lastWeekPosition' 100' lastWeekPosition);                        if (firstWeekPosition > 0 && lastWeekPosition > 0)                      {                          dayBoxWidth = Width / (ShowWeekNumbers ? 8 : 7);                          dayBoxHeight = (((float)(lastWeekPosition - firstWeekPosition)) / 6.0f);                            using (Brush brushWarning = new SolidBrush(Color.FromArgb(255' WarningBackColor)))                          {                              using (Brush brushWarning1 = new SolidBrush(Color.FromArgb(255' WarningBackColor1)))                              {                                  foreach (DateTime visDate in visibleWarningDates)                                  {                                      DrawCell(graphics' dayBoxWidth' dayBoxHeight' firstWeekPosition' calendarRange' brushWarning'                                               visDate);                                  }                                  foreach (DateTime visDate in visibleWarningDates1)                                  {                                      DrawCell(graphics' dayBoxWidth' dayBoxHeight' firstWeekPosition' calendarRange'                                               brushWarning1' visDate);                                  }                              }                          }                      }                  }              }
Magic Number,OpenCBS.GUI.Tools,OMonthCalendar,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Tools\OMonthCalendar.cs,OnPaint,The following statement contains a magic number: if ( (WarningDates.Count > 0) || (WarningDates1.Count > 0))              {                  SelectionRange calendarRange = GetDisplayRange(false);                    // Create a list of those dates that actually should be marked as warnings.                   List<DateTime> visibleWarningDates = new List<DateTime>();                  foreach (DateTime date in WarningDates)                  {                      if (date >= calendarRange.Start && date <= calendarRange.End)                      {                          visibleWarningDates.Add(date);                      }                  }                    // Create a list of those dates that actually should be marked as warnings.                   List<DateTime> visibleWarningDates1 = new List<DateTime>();                  foreach (DateTime date in WarningDates1)                  {                      if (date >= calendarRange.Start && date <= calendarRange.End)                      {                          visibleWarningDates1.Add(date);                      }                  }                    if ((visibleWarningDates.Count > 0) || (visibleWarningDates1.Count > 0))                  {                      HitArea hit = HitTest(25' firstWeekPosition).HitArea;                      while ((HitTest(25' firstWeekPosition).HitArea != HitArea.PrevMonthDate                          && HitTest(25' firstWeekPosition).HitArea != HitArea.Date)                          && firstWeekPosition < Height)                      {                          firstWeekPosition++;                      }                      //graphics.DrawLine(Pens.Red' 0' firstWeekPosition' 100' firstWeekPosition);                        while ((HitTest(25' lastWeekPosition).HitArea != HitArea.NextMonthDate && HitTest(25' lastWeekPosition).HitArea != HitArea.Date) && lastWeekPosition >= 0)                      {                          lastWeekPosition--;                      }                        //graphics.DrawLine(Pens.Red' 0' lastWeekPosition' 100' lastWeekPosition);                        if (firstWeekPosition > 0 && lastWeekPosition > 0)                      {                          dayBoxWidth = Width / (ShowWeekNumbers ? 8 : 7);                          dayBoxHeight = (((float)(lastWeekPosition - firstWeekPosition)) / 6.0f);                            using (Brush brushWarning = new SolidBrush(Color.FromArgb(255' WarningBackColor)))                          {                              using (Brush brushWarning1 = new SolidBrush(Color.FromArgb(255' WarningBackColor1)))                              {                                  foreach (DateTime visDate in visibleWarningDates)                                  {                                      DrawCell(graphics' dayBoxWidth' dayBoxHeight' firstWeekPosition' calendarRange' brushWarning'                                               visDate);                                  }                                  foreach (DateTime visDate in visibleWarningDates1)                                  {                                      DrawCell(graphics' dayBoxWidth' dayBoxHeight' firstWeekPosition' calendarRange'                                               brushWarning1' visDate);                                  }                              }                          }                      }                  }              }
Magic Number,OpenCBS.GUI.Tools,OMonthCalendar,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Tools\OMonthCalendar.cs,OnPaint,The following statement contains a magic number: if ( (WarningDates.Count > 0) || (WarningDates1.Count > 0))              {                  SelectionRange calendarRange = GetDisplayRange(false);                    // Create a list of those dates that actually should be marked as warnings.                   List<DateTime> visibleWarningDates = new List<DateTime>();                  foreach (DateTime date in WarningDates)                  {                      if (date >= calendarRange.Start && date <= calendarRange.End)                      {                          visibleWarningDates.Add(date);                      }                  }                    // Create a list of those dates that actually should be marked as warnings.                   List<DateTime> visibleWarningDates1 = new List<DateTime>();                  foreach (DateTime date in WarningDates1)                  {                      if (date >= calendarRange.Start && date <= calendarRange.End)                      {                          visibleWarningDates1.Add(date);                      }                  }                    if ((visibleWarningDates.Count > 0) || (visibleWarningDates1.Count > 0))                  {                      HitArea hit = HitTest(25' firstWeekPosition).HitArea;                      while ((HitTest(25' firstWeekPosition).HitArea != HitArea.PrevMonthDate                          && HitTest(25' firstWeekPosition).HitArea != HitArea.Date)                          && firstWeekPosition < Height)                      {                          firstWeekPosition++;                      }                      //graphics.DrawLine(Pens.Red' 0' firstWeekPosition' 100' firstWeekPosition);                        while ((HitTest(25' lastWeekPosition).HitArea != HitArea.NextMonthDate && HitTest(25' lastWeekPosition).HitArea != HitArea.Date) && lastWeekPosition >= 0)                      {                          lastWeekPosition--;                      }                        //graphics.DrawLine(Pens.Red' 0' lastWeekPosition' 100' lastWeekPosition);                        if (firstWeekPosition > 0 && lastWeekPosition > 0)                      {                          dayBoxWidth = Width / (ShowWeekNumbers ? 8 : 7);                          dayBoxHeight = (((float)(lastWeekPosition - firstWeekPosition)) / 6.0f);                            using (Brush brushWarning = new SolidBrush(Color.FromArgb(255' WarningBackColor)))                          {                              using (Brush brushWarning1 = new SolidBrush(Color.FromArgb(255' WarningBackColor1)))                              {                                  foreach (DateTime visDate in visibleWarningDates)                                  {                                      DrawCell(graphics' dayBoxWidth' dayBoxHeight' firstWeekPosition' calendarRange' brushWarning'                                               visDate);                                  }                                  foreach (DateTime visDate in visibleWarningDates1)                                  {                                      DrawCell(graphics' dayBoxWidth' dayBoxHeight' firstWeekPosition' calendarRange'                                               brushWarning1' visDate);                                  }                              }                          }                      }                  }              }
Magic Number,OpenCBS.GUI.Tools,OMonthCalendar,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Tools\OMonthCalendar.cs,OnPaint,The following statement contains a magic number: if ( (WarningDates.Count > 0) || (WarningDates1.Count > 0))              {                  SelectionRange calendarRange = GetDisplayRange(false);                    // Create a list of those dates that actually should be marked as warnings.                   List<DateTime> visibleWarningDates = new List<DateTime>();                  foreach (DateTime date in WarningDates)                  {                      if (date >= calendarRange.Start && date <= calendarRange.End)                      {                          visibleWarningDates.Add(date);                      }                  }                    // Create a list of those dates that actually should be marked as warnings.                   List<DateTime> visibleWarningDates1 = new List<DateTime>();                  foreach (DateTime date in WarningDates1)                  {                      if (date >= calendarRange.Start && date <= calendarRange.End)                      {                          visibleWarningDates1.Add(date);                      }                  }                    if ((visibleWarningDates.Count > 0) || (visibleWarningDates1.Count > 0))                  {                      HitArea hit = HitTest(25' firstWeekPosition).HitArea;                      while ((HitTest(25' firstWeekPosition).HitArea != HitArea.PrevMonthDate                          && HitTest(25' firstWeekPosition).HitArea != HitArea.Date)                          && firstWeekPosition < Height)                      {                          firstWeekPosition++;                      }                      //graphics.DrawLine(Pens.Red' 0' firstWeekPosition' 100' firstWeekPosition);                        while ((HitTest(25' lastWeekPosition).HitArea != HitArea.NextMonthDate && HitTest(25' lastWeekPosition).HitArea != HitArea.Date) && lastWeekPosition >= 0)                      {                          lastWeekPosition--;                      }                        //graphics.DrawLine(Pens.Red' 0' lastWeekPosition' 100' lastWeekPosition);                        if (firstWeekPosition > 0 && lastWeekPosition > 0)                      {                          dayBoxWidth = Width / (ShowWeekNumbers ? 8 : 7);                          dayBoxHeight = (((float)(lastWeekPosition - firstWeekPosition)) / 6.0f);                            using (Brush brushWarning = new SolidBrush(Color.FromArgb(255' WarningBackColor)))                          {                              using (Brush brushWarning1 = new SolidBrush(Color.FromArgb(255' WarningBackColor1)))                              {                                  foreach (DateTime visDate in visibleWarningDates)                                  {                                      DrawCell(graphics' dayBoxWidth' dayBoxHeight' firstWeekPosition' calendarRange' brushWarning'                                               visDate);                                  }                                  foreach (DateTime visDate in visibleWarningDates1)                                  {                                      DrawCell(graphics' dayBoxWidth' dayBoxHeight' firstWeekPosition' calendarRange'                                               brushWarning1' visDate);                                  }                              }                          }                      }                  }              }
Magic Number,OpenCBS.GUI.Tools,OMonthCalendar,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Tools\OMonthCalendar.cs,OnPaint,The following statement contains a magic number: if ( (WarningDates.Count > 0) || (WarningDates1.Count > 0))              {                  SelectionRange calendarRange = GetDisplayRange(false);                    // Create a list of those dates that actually should be marked as warnings.                   List<DateTime> visibleWarningDates = new List<DateTime>();                  foreach (DateTime date in WarningDates)                  {                      if (date >= calendarRange.Start && date <= calendarRange.End)                      {                          visibleWarningDates.Add(date);                      }                  }                    // Create a list of those dates that actually should be marked as warnings.                   List<DateTime> visibleWarningDates1 = new List<DateTime>();                  foreach (DateTime date in WarningDates1)                  {                      if (date >= calendarRange.Start && date <= calendarRange.End)                      {                          visibleWarningDates1.Add(date);                      }                  }                    if ((visibleWarningDates.Count > 0) || (visibleWarningDates1.Count > 0))                  {                      HitArea hit = HitTest(25' firstWeekPosition).HitArea;                      while ((HitTest(25' firstWeekPosition).HitArea != HitArea.PrevMonthDate                          && HitTest(25' firstWeekPosition).HitArea != HitArea.Date)                          && firstWeekPosition < Height)                      {                          firstWeekPosition++;                      }                      //graphics.DrawLine(Pens.Red' 0' firstWeekPosition' 100' firstWeekPosition);                        while ((HitTest(25' lastWeekPosition).HitArea != HitArea.NextMonthDate && HitTest(25' lastWeekPosition).HitArea != HitArea.Date) && lastWeekPosition >= 0)                      {                          lastWeekPosition--;                      }                        //graphics.DrawLine(Pens.Red' 0' lastWeekPosition' 100' lastWeekPosition);                        if (firstWeekPosition > 0 && lastWeekPosition > 0)                      {                          dayBoxWidth = Width / (ShowWeekNumbers ? 8 : 7);                          dayBoxHeight = (((float)(lastWeekPosition - firstWeekPosition)) / 6.0f);                            using (Brush brushWarning = new SolidBrush(Color.FromArgb(255' WarningBackColor)))                          {                              using (Brush brushWarning1 = new SolidBrush(Color.FromArgb(255' WarningBackColor1)))                              {                                  foreach (DateTime visDate in visibleWarningDates)                                  {                                      DrawCell(graphics' dayBoxWidth' dayBoxHeight' firstWeekPosition' calendarRange' brushWarning'                                               visDate);                                  }                                  foreach (DateTime visDate in visibleWarningDates1)                                  {                                      DrawCell(graphics' dayBoxWidth' dayBoxHeight' firstWeekPosition' calendarRange'                                               brushWarning1' visDate);                                  }                              }                          }                      }                  }              }
Magic Number,OpenCBS.GUI.Tools,OMonthCalendar,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Tools\OMonthCalendar.cs,OnPaint,The following statement contains a magic number: if ( (WarningDates.Count > 0) || (WarningDates1.Count > 0))              {                  SelectionRange calendarRange = GetDisplayRange(false);                    // Create a list of those dates that actually should be marked as warnings.                   List<DateTime> visibleWarningDates = new List<DateTime>();                  foreach (DateTime date in WarningDates)                  {                      if (date >= calendarRange.Start && date <= calendarRange.End)                      {                          visibleWarningDates.Add(date);                      }                  }                    // Create a list of those dates that actually should be marked as warnings.                   List<DateTime> visibleWarningDates1 = new List<DateTime>();                  foreach (DateTime date in WarningDates1)                  {                      if (date >= calendarRange.Start && date <= calendarRange.End)                      {                          visibleWarningDates1.Add(date);                      }                  }                    if ((visibleWarningDates.Count > 0) || (visibleWarningDates1.Count > 0))                  {                      HitArea hit = HitTest(25' firstWeekPosition).HitArea;                      while ((HitTest(25' firstWeekPosition).HitArea != HitArea.PrevMonthDate                          && HitTest(25' firstWeekPosition).HitArea != HitArea.Date)                          && firstWeekPosition < Height)                      {                          firstWeekPosition++;                      }                      //graphics.DrawLine(Pens.Red' 0' firstWeekPosition' 100' firstWeekPosition);                        while ((HitTest(25' lastWeekPosition).HitArea != HitArea.NextMonthDate && HitTest(25' lastWeekPosition).HitArea != HitArea.Date) && lastWeekPosition >= 0)                      {                          lastWeekPosition--;                      }                        //graphics.DrawLine(Pens.Red' 0' lastWeekPosition' 100' lastWeekPosition);                        if (firstWeekPosition > 0 && lastWeekPosition > 0)                      {                          dayBoxWidth = Width / (ShowWeekNumbers ? 8 : 7);                          dayBoxHeight = (((float)(lastWeekPosition - firstWeekPosition)) / 6.0f);                            using (Brush brushWarning = new SolidBrush(Color.FromArgb(255' WarningBackColor)))                          {                              using (Brush brushWarning1 = new SolidBrush(Color.FromArgb(255' WarningBackColor1)))                              {                                  foreach (DateTime visDate in visibleWarningDates)                                  {                                      DrawCell(graphics' dayBoxWidth' dayBoxHeight' firstWeekPosition' calendarRange' brushWarning'                                               visDate);                                  }                                  foreach (DateTime visDate in visibleWarningDates1)                                  {                                      DrawCell(graphics' dayBoxWidth' dayBoxHeight' firstWeekPosition' calendarRange'                                               brushWarning1' visDate);                                  }                              }                          }                      }                  }              }
Magic Number,OpenCBS.GUI.Tools,OMonthCalendar,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Tools\OMonthCalendar.cs,DrawCell,The following statement contains a magic number: row = span.Days / 7;
Magic Number,OpenCBS.GUI.Tools,OMonthCalendar,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Tools\OMonthCalendar.cs,DrawCell,The following statement contains a magic number: col = span.Days % 7;
Magic Number,OpenCBS.GUI.Tools,OMonthCalendar,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Tools\OMonthCalendar.cs,DrawCell,The following statement contains a magic number: int x = (col + (ShowWeekNumbers ? 1 : 0)) * dayBoxWidth + 2;
Magic Number,OpenCBS.GUI.Tools,OMonthCalendar,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Tools\OMonthCalendar.cs,DrawCell,The following statement contains a magic number: if (HitTest(x + 3' y + 3).HitArea != HitArea.Date) return;
Magic Number,OpenCBS.GUI.Tools,OMonthCalendar,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Tools\OMonthCalendar.cs,DrawCell,The following statement contains a magic number: if (HitTest(x + 3' y + 3).HitArea != HitArea.Date) return;
Magic Number,OpenCBS.GUI.Tools,OMonthCalendar,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Tools\OMonthCalendar.cs,DrawCell,The following statement contains a magic number: Rectangle fillRect = new Rectangle(x' y' dayBoxWidth - 2' Convert.ToInt32(dayBoxHeight) - 2);
Magic Number,OpenCBS.GUI.Tools,OMonthCalendar,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Tools\OMonthCalendar.cs,DrawCell,The following statement contains a magic number: Rectangle fillRect = new Rectangle(x' y' dayBoxWidth - 2' Convert.ToInt32(dayBoxHeight) - 2);
Magic Number,OpenCBS.GUI.Tools,OMonthCalendar,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Tools\OMonthCalendar.cs,DrawCell,The following statement contains a magic number: using (Font textFont = new Font(Font' (makeDateBolded ? FontStyle.Bold : FontStyle.Regular)))              {                  TextRenderer.DrawText(graphics' visDate.Day.ToString()' textFont' fillRect' Color.FromArgb(255' 128' 0' 0)' TextFormatFlags.HorizontalCenter | TextFormatFlags.VerticalCenter);              }
Magic Number,OpenCBS.GUI.Tools,OMonthCalendar,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Tools\OMonthCalendar.cs,DrawCell,The following statement contains a magic number: using (Font textFont = new Font(Font' (makeDateBolded ? FontStyle.Bold : FontStyle.Regular)))              {                  TextRenderer.DrawText(graphics' visDate.Day.ToString()' textFont' fillRect' Color.FromArgb(255' 128' 0' 0)' TextFormatFlags.HorizontalCenter | TextFormatFlags.VerticalCenter);              }
Magic Number,OpenCBS.GUI.Tools,OMonthCalendar,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Tools\OMonthCalendar.cs,DrawCell,The following statement contains a magic number: if ((ShowTodayCircle) && (visDate == TimeProvider.Today))              {                  graphics.DrawRectangle(Pens.Red' x - 1' y - 1' dayBoxWidth ' Convert.ToInt32(dayBoxHeight));                  graphics.DrawRectangle(Pens.Red' x - 2' y - 2' dayBoxWidth' Convert.ToInt32(dayBoxHeight));              }
Magic Number,OpenCBS.GUI.Tools,OMonthCalendar,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Tools\OMonthCalendar.cs,DrawCell,The following statement contains a magic number: if ((ShowTodayCircle) && (visDate == TimeProvider.Today))              {                  graphics.DrawRectangle(Pens.Red' x - 1' y - 1' dayBoxWidth ' Convert.ToInt32(dayBoxHeight));                  graphics.DrawRectangle(Pens.Red' x - 2' y - 2' dayBoxWidth' Convert.ToInt32(dayBoxHeight));              }
Magic Number,OpenCBS.GUI.UserControl,ClientControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\ClientControl.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(1020' 643);
Magic Number,OpenCBS.GUI.UserControl,ClientControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\ClientControl.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(1020' 643);
Magic Number,OpenCBS.GUI.UserControl,EconomicActivityControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\EconomicActivityControl.cs,EconomicActivityControlLoad,The following statement contains a magic number: btnSelect.Width = 25;
Magic Number,OpenCBS.GUI.UserControl,PrintButton,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\PrintButton.cs,LoadReports,The following statement contains a magic number: if (reports.Count == 0)              {                  ToolStripMenuItem item = new ToolStripMenuItem(MultiLanguageStrings.GetString(OpenCBS.MultiLanguageRessources.Ressource.PrintButton' "noAvailableReportsCaption.Text"));                  {                      ForeColor = Color.FromArgb(0' 81' 152);                  };                  Menu.Items.Add(item);              }
Magic Number,OpenCBS.GUI.UserControl,PrintButton,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\PrintButton.cs,LoadReports,The following statement contains a magic number: if (reports.Count == 0)              {                  ToolStripMenuItem item = new ToolStripMenuItem(MultiLanguageStrings.GetString(OpenCBS.MultiLanguageRessources.Ressource.PrintButton' "noAvailableReportsCaption.Text"));                  {                      ForeColor = Color.FromArgb(0' 81' 152);                  };                  Menu.Items.Add(item);              }
Magic Number,OpenCBS.GUI.UserControl,PrintButton,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\PrintButton.cs,LoadReports,The following statement contains a magic number: foreach (Report report in reports)              {                  ToolStripMenuItem item = new ToolStripMenuItem(report.Title)                  {                      ForeColor = Color.FromArgb(0' 81' 152)'                      Tag = report.Guid                  };                  item.Click += PrintReportFromMenuItem;                  Menu.Items.Add(item);              }
Magic Number,OpenCBS.GUI.UserControl,PrintButton,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\PrintButton.cs,LoadReports,The following statement contains a magic number: foreach (Report report in reports)              {                  ToolStripMenuItem item = new ToolStripMenuItem(report.Title)                  {                      ForeColor = Color.FromArgb(0' 81' 152)'                      Tag = report.Guid                  };                  item.Click += PrintReportFromMenuItem;                  Menu.Items.Add(item);              }
Magic Number,OpenCBS.GUI.UserControl,PrintButton,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\PrintButton.cs,InitializeComponent,The following statement contains a magic number: this._menu.Size = new System.Drawing.Size(61' 4);
Magic Number,OpenCBS.GUI.UserControl,PrintButton,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\PrintButton.cs,InitializeComponent,The following statement contains a magic number: this._menu.Size = new System.Drawing.Size(61' 4);
Magic Number,OpenCBS.GUI.UserControl,SweetBaseForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\SweetBaseForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(282' 255);
Magic Number,OpenCBS.GUI.UserControl,SweetBaseForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\SweetBaseForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(282' 255);
Magic Number,OpenCBS.GUI.UserControl,CollapsibleSplitter,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CollapsibleSplitter.cs,OnPaint,The following statement contains a magic number: if(this.Dock == DockStyle.Left || this.Dock == DockStyle.Right)  			{  				// create a new rectangle in the vertical center of the splitter for our collapse control button  				rr = new Rectangle(r.X' (int)r.Y + ((r.Height - 115)/2)' 8' 115);  				// force the width to 8px so that everything always draws correctly  				this.Width = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}    				// draw the top & bottom lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y' rr.X + rr.Width - 2' rr.Y);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y + rr.Height' rr.X + rr.Width - 2' rr.Y + rr.Height);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + 3));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + rr.Height - 9));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 3;  				int y = rr.Y + 14;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y + (i*3)' x+1' y + 1 + (i*3));  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x+1' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  						}  						break;    					case VisualStyles.DoubleDots:  						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x - 1' y +(i*3)' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 2' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + 1' y  + (i*3)' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 2' y);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x'y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 2' y' x + 2' y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 90' x + 2' y + 90);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x' y + (i*5)' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1' y + 1 + (i*5)' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x' y +(i*5)' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x' y + (i*5) + 1);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x + 1' y + (i*5));  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*2)' x + 2' y + (i*2));  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Left);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Right);  				}  			}    				#endregion    				// Horizontal Splitter support added in v1.2    				#region Horizontal Splitter    			else if (this.Dock == DockStyle.Top || this.Dock == DockStyle.Bottom)  			{  				// create a new rectangle in the horizontal center of the splitter for our collapse control button  				rr = new Rectangle((int)r.X + ((r.Width - 115)/2)' r.Y' 115' 8);  				// force the height to 8px  				this.Height = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}    				// draw the left & right lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X' rr.Y + 1' rr.X' rr.Y + rr.Height - 2);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + rr.Width' rr.Y + 1' rr.X + rr.Width' rr.Y + rr.Height - 2);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 3' rr.Y + 2));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X +  rr.Width - 9' rr.Y + 2));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 14;  				int y = rr.Y + 3;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x + (i*3)' y' x + 1 + (i*3)' y + 1);  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x + 1 + (i*3)' y + 1' x + 2 + (i*3)' y + 2);  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)'  x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  						}  						break;    					case VisualStyles.DoubleDots:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y - 1' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y + 2' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y + 1' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 88' y);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 2' x + 88' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 88' y' x + 88' y + 2);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x + (i*5)' y' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*5)' y + 1' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x +(i*5)' y' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5) + 1' y);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5)' y + 1);  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*2)' y' x + (i*2)' y + 2);  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Top);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Bottom);  				}  			}    				#endregion    			else  			{  				throw new Exception("The Collapsible Splitter control cannot have the Filled or None Dockstyle property");  			}
Magic Number,OpenCBS.GUI.UserControl,CollapsibleSplitter,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CollapsibleSplitter.cs,OnPaint,The following statement contains a magic number: if(this.Dock == DockStyle.Left || this.Dock == DockStyle.Right)  			{  				// create a new rectangle in the vertical center of the splitter for our collapse control button  				rr = new Rectangle(r.X' (int)r.Y + ((r.Height - 115)/2)' 8' 115);  				// force the width to 8px so that everything always draws correctly  				this.Width = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}    				// draw the top & bottom lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y' rr.X + rr.Width - 2' rr.Y);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y + rr.Height' rr.X + rr.Width - 2' rr.Y + rr.Height);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + 3));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + rr.Height - 9));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 3;  				int y = rr.Y + 14;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y + (i*3)' x+1' y + 1 + (i*3));  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x+1' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  						}  						break;    					case VisualStyles.DoubleDots:  						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x - 1' y +(i*3)' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 2' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + 1' y  + (i*3)' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 2' y);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x'y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 2' y' x + 2' y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 90' x + 2' y + 90);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x' y + (i*5)' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1' y + 1 + (i*5)' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x' y +(i*5)' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x' y + (i*5) + 1);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x + 1' y + (i*5));  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*2)' x + 2' y + (i*2));  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Left);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Right);  				}  			}    				#endregion    				// Horizontal Splitter support added in v1.2    				#region Horizontal Splitter    			else if (this.Dock == DockStyle.Top || this.Dock == DockStyle.Bottom)  			{  				// create a new rectangle in the horizontal center of the splitter for our collapse control button  				rr = new Rectangle((int)r.X + ((r.Width - 115)/2)' r.Y' 115' 8);  				// force the height to 8px  				this.Height = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}    				// draw the left & right lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X' rr.Y + 1' rr.X' rr.Y + rr.Height - 2);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + rr.Width' rr.Y + 1' rr.X + rr.Width' rr.Y + rr.Height - 2);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 3' rr.Y + 2));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X +  rr.Width - 9' rr.Y + 2));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 14;  				int y = rr.Y + 3;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x + (i*3)' y' x + 1 + (i*3)' y + 1);  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x + 1 + (i*3)' y + 1' x + 2 + (i*3)' y + 2);  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)'  x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  						}  						break;    					case VisualStyles.DoubleDots:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y - 1' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y + 2' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y + 1' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 88' y);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 2' x + 88' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 88' y' x + 88' y + 2);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x + (i*5)' y' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*5)' y + 1' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x +(i*5)' y' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5) + 1' y);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5)' y + 1);  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*2)' y' x + (i*2)' y + 2);  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Top);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Bottom);  				}  			}    				#endregion    			else  			{  				throw new Exception("The Collapsible Splitter control cannot have the Filled or None Dockstyle property");  			}
Magic Number,OpenCBS.GUI.UserControl,CollapsibleSplitter,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CollapsibleSplitter.cs,OnPaint,The following statement contains a magic number: if(this.Dock == DockStyle.Left || this.Dock == DockStyle.Right)  			{  				// create a new rectangle in the vertical center of the splitter for our collapse control button  				rr = new Rectangle(r.X' (int)r.Y + ((r.Height - 115)/2)' 8' 115);  				// force the width to 8px so that everything always draws correctly  				this.Width = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}    				// draw the top & bottom lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y' rr.X + rr.Width - 2' rr.Y);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y + rr.Height' rr.X + rr.Width - 2' rr.Y + rr.Height);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + 3));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + rr.Height - 9));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 3;  				int y = rr.Y + 14;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y + (i*3)' x+1' y + 1 + (i*3));  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x+1' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  						}  						break;    					case VisualStyles.DoubleDots:  						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x - 1' y +(i*3)' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 2' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + 1' y  + (i*3)' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 2' y);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x'y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 2' y' x + 2' y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 90' x + 2' y + 90);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x' y + (i*5)' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1' y + 1 + (i*5)' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x' y +(i*5)' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x' y + (i*5) + 1);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x + 1' y + (i*5));  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*2)' x + 2' y + (i*2));  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Left);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Right);  				}  			}    				#endregion    				// Horizontal Splitter support added in v1.2    				#region Horizontal Splitter    			else if (this.Dock == DockStyle.Top || this.Dock == DockStyle.Bottom)  			{  				// create a new rectangle in the horizontal center of the splitter for our collapse control button  				rr = new Rectangle((int)r.X + ((r.Width - 115)/2)' r.Y' 115' 8);  				// force the height to 8px  				this.Height = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}    				// draw the left & right lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X' rr.Y + 1' rr.X' rr.Y + rr.Height - 2);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + rr.Width' rr.Y + 1' rr.X + rr.Width' rr.Y + rr.Height - 2);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 3' rr.Y + 2));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X +  rr.Width - 9' rr.Y + 2));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 14;  				int y = rr.Y + 3;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x + (i*3)' y' x + 1 + (i*3)' y + 1);  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x + 1 + (i*3)' y + 1' x + 2 + (i*3)' y + 2);  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)'  x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  						}  						break;    					case VisualStyles.DoubleDots:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y - 1' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y + 2' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y + 1' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 88' y);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 2' x + 88' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 88' y' x + 88' y + 2);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x + (i*5)' y' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*5)' y + 1' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x +(i*5)' y' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5) + 1' y);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5)' y + 1);  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*2)' y' x + (i*2)' y + 2);  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Top);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Bottom);  				}  			}    				#endregion    			else  			{  				throw new Exception("The Collapsible Splitter control cannot have the Filled or None Dockstyle property");  			}
Magic Number,OpenCBS.GUI.UserControl,CollapsibleSplitter,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CollapsibleSplitter.cs,OnPaint,The following statement contains a magic number: if(this.Dock == DockStyle.Left || this.Dock == DockStyle.Right)  			{  				// create a new rectangle in the vertical center of the splitter for our collapse control button  				rr = new Rectangle(r.X' (int)r.Y + ((r.Height - 115)/2)' 8' 115);  				// force the width to 8px so that everything always draws correctly  				this.Width = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}    				// draw the top & bottom lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y' rr.X + rr.Width - 2' rr.Y);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y + rr.Height' rr.X + rr.Width - 2' rr.Y + rr.Height);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + 3));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + rr.Height - 9));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 3;  				int y = rr.Y + 14;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y + (i*3)' x+1' y + 1 + (i*3));  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x+1' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  						}  						break;    					case VisualStyles.DoubleDots:  						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x - 1' y +(i*3)' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 2' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + 1' y  + (i*3)' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 2' y);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x'y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 2' y' x + 2' y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 90' x + 2' y + 90);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x' y + (i*5)' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1' y + 1 + (i*5)' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x' y +(i*5)' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x' y + (i*5) + 1);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x + 1' y + (i*5));  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*2)' x + 2' y + (i*2));  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Left);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Right);  				}  			}    				#endregion    				// Horizontal Splitter support added in v1.2    				#region Horizontal Splitter    			else if (this.Dock == DockStyle.Top || this.Dock == DockStyle.Bottom)  			{  				// create a new rectangle in the horizontal center of the splitter for our collapse control button  				rr = new Rectangle((int)r.X + ((r.Width - 115)/2)' r.Y' 115' 8);  				// force the height to 8px  				this.Height = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}    				// draw the left & right lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X' rr.Y + 1' rr.X' rr.Y + rr.Height - 2);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + rr.Width' rr.Y + 1' rr.X + rr.Width' rr.Y + rr.Height - 2);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 3' rr.Y + 2));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X +  rr.Width - 9' rr.Y + 2));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 14;  				int y = rr.Y + 3;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x + (i*3)' y' x + 1 + (i*3)' y + 1);  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x + 1 + (i*3)' y + 1' x + 2 + (i*3)' y + 2);  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)'  x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  						}  						break;    					case VisualStyles.DoubleDots:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y - 1' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y + 2' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y + 1' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 88' y);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 2' x + 88' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 88' y' x + 88' y + 2);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x + (i*5)' y' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*5)' y + 1' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x +(i*5)' y' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5) + 1' y);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5)' y + 1);  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*2)' y' x + (i*2)' y + 2);  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Top);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Bottom);  				}  			}    				#endregion    			else  			{  				throw new Exception("The Collapsible Splitter control cannot have the Filled or None Dockstyle property");  			}
Magic Number,OpenCBS.GUI.UserControl,CollapsibleSplitter,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CollapsibleSplitter.cs,OnPaint,The following statement contains a magic number: if(this.Dock == DockStyle.Left || this.Dock == DockStyle.Right)  			{  				// create a new rectangle in the vertical center of the splitter for our collapse control button  				rr = new Rectangle(r.X' (int)r.Y + ((r.Height - 115)/2)' 8' 115);  				// force the width to 8px so that everything always draws correctly  				this.Width = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}    				// draw the top & bottom lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y' rr.X + rr.Width - 2' rr.Y);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y + rr.Height' rr.X + rr.Width - 2' rr.Y + rr.Height);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + 3));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + rr.Height - 9));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 3;  				int y = rr.Y + 14;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y + (i*3)' x+1' y + 1 + (i*3));  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x+1' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  						}  						break;    					case VisualStyles.DoubleDots:  						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x - 1' y +(i*3)' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 2' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + 1' y  + (i*3)' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 2' y);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x'y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 2' y' x + 2' y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 90' x + 2' y + 90);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x' y + (i*5)' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1' y + 1 + (i*5)' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x' y +(i*5)' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x' y + (i*5) + 1);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x + 1' y + (i*5));  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*2)' x + 2' y + (i*2));  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Left);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Right);  				}  			}    				#endregion    				// Horizontal Splitter support added in v1.2    				#region Horizontal Splitter    			else if (this.Dock == DockStyle.Top || this.Dock == DockStyle.Bottom)  			{  				// create a new rectangle in the horizontal center of the splitter for our collapse control button  				rr = new Rectangle((int)r.X + ((r.Width - 115)/2)' r.Y' 115' 8);  				// force the height to 8px  				this.Height = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}    				// draw the left & right lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X' rr.Y + 1' rr.X' rr.Y + rr.Height - 2);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + rr.Width' rr.Y + 1' rr.X + rr.Width' rr.Y + rr.Height - 2);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 3' rr.Y + 2));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X +  rr.Width - 9' rr.Y + 2));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 14;  				int y = rr.Y + 3;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x + (i*3)' y' x + 1 + (i*3)' y + 1);  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x + 1 + (i*3)' y + 1' x + 2 + (i*3)' y + 2);  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)'  x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  						}  						break;    					case VisualStyles.DoubleDots:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y - 1' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y + 2' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y + 1' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 88' y);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 2' x + 88' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 88' y' x + 88' y + 2);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x + (i*5)' y' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*5)' y + 1' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x +(i*5)' y' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5) + 1' y);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5)' y + 1);  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*2)' y' x + (i*2)' y + 2);  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Top);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Bottom);  				}  			}    				#endregion    			else  			{  				throw new Exception("The Collapsible Splitter control cannot have the Filled or None Dockstyle property");  			}
Magic Number,OpenCBS.GUI.UserControl,CollapsibleSplitter,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CollapsibleSplitter.cs,OnPaint,The following statement contains a magic number: if(this.Dock == DockStyle.Left || this.Dock == DockStyle.Right)  			{  				// create a new rectangle in the vertical center of the splitter for our collapse control button  				rr = new Rectangle(r.X' (int)r.Y + ((r.Height - 115)/2)' 8' 115);  				// force the width to 8px so that everything always draws correctly  				this.Width = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}    				// draw the top & bottom lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y' rr.X + rr.Width - 2' rr.Y);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y + rr.Height' rr.X + rr.Width - 2' rr.Y + rr.Height);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + 3));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + rr.Height - 9));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 3;  				int y = rr.Y + 14;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y + (i*3)' x+1' y + 1 + (i*3));  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x+1' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  						}  						break;    					case VisualStyles.DoubleDots:  						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x - 1' y +(i*3)' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 2' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + 1' y  + (i*3)' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 2' y);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x'y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 2' y' x + 2' y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 90' x + 2' y + 90);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x' y + (i*5)' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1' y + 1 + (i*5)' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x' y +(i*5)' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x' y + (i*5) + 1);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x + 1' y + (i*5));  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*2)' x + 2' y + (i*2));  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Left);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Right);  				}  			}    				#endregion    				// Horizontal Splitter support added in v1.2    				#region Horizontal Splitter    			else if (this.Dock == DockStyle.Top || this.Dock == DockStyle.Bottom)  			{  				// create a new rectangle in the horizontal center of the splitter for our collapse control button  				rr = new Rectangle((int)r.X + ((r.Width - 115)/2)' r.Y' 115' 8);  				// force the height to 8px  				this.Height = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}    				// draw the left & right lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X' rr.Y + 1' rr.X' rr.Y + rr.Height - 2);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + rr.Width' rr.Y + 1' rr.X + rr.Width' rr.Y + rr.Height - 2);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 3' rr.Y + 2));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X +  rr.Width - 9' rr.Y + 2));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 14;  				int y = rr.Y + 3;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x + (i*3)' y' x + 1 + (i*3)' y + 1);  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x + 1 + (i*3)' y + 1' x + 2 + (i*3)' y + 2);  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)'  x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  						}  						break;    					case VisualStyles.DoubleDots:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y - 1' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y + 2' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y + 1' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 88' y);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 2' x + 88' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 88' y' x + 88' y + 2);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x + (i*5)' y' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*5)' y + 1' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x +(i*5)' y' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5) + 1' y);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5)' y + 1);  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*2)' y' x + (i*2)' y + 2);  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Top);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Bottom);  				}  			}    				#endregion    			else  			{  				throw new Exception("The Collapsible Splitter control cannot have the Filled or None Dockstyle property");  			}
Magic Number,OpenCBS.GUI.UserControl,CollapsibleSplitter,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CollapsibleSplitter.cs,OnPaint,The following statement contains a magic number: if(this.Dock == DockStyle.Left || this.Dock == DockStyle.Right)  			{  				// create a new rectangle in the vertical center of the splitter for our collapse control button  				rr = new Rectangle(r.X' (int)r.Y + ((r.Height - 115)/2)' 8' 115);  				// force the width to 8px so that everything always draws correctly  				this.Width = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}    				// draw the top & bottom lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y' rr.X + rr.Width - 2' rr.Y);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y + rr.Height' rr.X + rr.Width - 2' rr.Y + rr.Height);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + 3));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + rr.Height - 9));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 3;  				int y = rr.Y + 14;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y + (i*3)' x+1' y + 1 + (i*3));  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x+1' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  						}  						break;    					case VisualStyles.DoubleDots:  						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x - 1' y +(i*3)' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 2' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + 1' y  + (i*3)' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 2' y);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x'y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 2' y' x + 2' y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 90' x + 2' y + 90);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x' y + (i*5)' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1' y + 1 + (i*5)' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x' y +(i*5)' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x' y + (i*5) + 1);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x + 1' y + (i*5));  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*2)' x + 2' y + (i*2));  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Left);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Right);  				}  			}    				#endregion    				// Horizontal Splitter support added in v1.2    				#region Horizontal Splitter    			else if (this.Dock == DockStyle.Top || this.Dock == DockStyle.Bottom)  			{  				// create a new rectangle in the horizontal center of the splitter for our collapse control button  				rr = new Rectangle((int)r.X + ((r.Width - 115)/2)' r.Y' 115' 8);  				// force the height to 8px  				this.Height = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}    				// draw the left & right lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X' rr.Y + 1' rr.X' rr.Y + rr.Height - 2);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + rr.Width' rr.Y + 1' rr.X + rr.Width' rr.Y + rr.Height - 2);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 3' rr.Y + 2));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X +  rr.Width - 9' rr.Y + 2));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 14;  				int y = rr.Y + 3;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x + (i*3)' y' x + 1 + (i*3)' y + 1);  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x + 1 + (i*3)' y + 1' x + 2 + (i*3)' y + 2);  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)'  x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  						}  						break;    					case VisualStyles.DoubleDots:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y - 1' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y + 2' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y + 1' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 88' y);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 2' x + 88' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 88' y' x + 88' y + 2);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x + (i*5)' y' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*5)' y + 1' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x +(i*5)' y' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5) + 1' y);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5)' y + 1);  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*2)' y' x + (i*2)' y + 2);  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Top);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Bottom);  				}  			}    				#endregion    			else  			{  				throw new Exception("The Collapsible Splitter control cannot have the Filled or None Dockstyle property");  			}
Magic Number,OpenCBS.GUI.UserControl,CollapsibleSplitter,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CollapsibleSplitter.cs,OnPaint,The following statement contains a magic number: if(this.Dock == DockStyle.Left || this.Dock == DockStyle.Right)  			{  				// create a new rectangle in the vertical center of the splitter for our collapse control button  				rr = new Rectangle(r.X' (int)r.Y + ((r.Height - 115)/2)' 8' 115);  				// force the width to 8px so that everything always draws correctly  				this.Width = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}    				// draw the top & bottom lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y' rr.X + rr.Width - 2' rr.Y);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y + rr.Height' rr.X + rr.Width - 2' rr.Y + rr.Height);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + 3));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + rr.Height - 9));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 3;  				int y = rr.Y + 14;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y + (i*3)' x+1' y + 1 + (i*3));  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x+1' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  						}  						break;    					case VisualStyles.DoubleDots:  						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x - 1' y +(i*3)' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 2' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + 1' y  + (i*3)' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 2' y);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x'y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 2' y' x + 2' y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 90' x + 2' y + 90);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x' y + (i*5)' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1' y + 1 + (i*5)' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x' y +(i*5)' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x' y + (i*5) + 1);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x + 1' y + (i*5));  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*2)' x + 2' y + (i*2));  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Left);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Right);  				}  			}    				#endregion    				// Horizontal Splitter support added in v1.2    				#region Horizontal Splitter    			else if (this.Dock == DockStyle.Top || this.Dock == DockStyle.Bottom)  			{  				// create a new rectangle in the horizontal center of the splitter for our collapse control button  				rr = new Rectangle((int)r.X + ((r.Width - 115)/2)' r.Y' 115' 8);  				// force the height to 8px  				this.Height = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}    				// draw the left & right lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X' rr.Y + 1' rr.X' rr.Y + rr.Height - 2);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + rr.Width' rr.Y + 1' rr.X + rr.Width' rr.Y + rr.Height - 2);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 3' rr.Y + 2));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X +  rr.Width - 9' rr.Y + 2));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 14;  				int y = rr.Y + 3;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x + (i*3)' y' x + 1 + (i*3)' y + 1);  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x + 1 + (i*3)' y + 1' x + 2 + (i*3)' y + 2);  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)'  x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  						}  						break;    					case VisualStyles.DoubleDots:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y - 1' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y + 2' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y + 1' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 88' y);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 2' x + 88' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 88' y' x + 88' y + 2);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x + (i*5)' y' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*5)' y + 1' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x +(i*5)' y' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5) + 1' y);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5)' y + 1);  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*2)' y' x + (i*2)' y + 2);  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Top);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Bottom);  				}  			}    				#endregion    			else  			{  				throw new Exception("The Collapsible Splitter control cannot have the Filled or None Dockstyle property");  			}
Magic Number,OpenCBS.GUI.UserControl,CollapsibleSplitter,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CollapsibleSplitter.cs,OnPaint,The following statement contains a magic number: if(this.Dock == DockStyle.Left || this.Dock == DockStyle.Right)  			{  				// create a new rectangle in the vertical center of the splitter for our collapse control button  				rr = new Rectangle(r.X' (int)r.Y + ((r.Height - 115)/2)' 8' 115);  				// force the width to 8px so that everything always draws correctly  				this.Width = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}    				// draw the top & bottom lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y' rr.X + rr.Width - 2' rr.Y);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y + rr.Height' rr.X + rr.Width - 2' rr.Y + rr.Height);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + 3));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + rr.Height - 9));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 3;  				int y = rr.Y + 14;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y + (i*3)' x+1' y + 1 + (i*3));  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x+1' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  						}  						break;    					case VisualStyles.DoubleDots:  						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x - 1' y +(i*3)' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 2' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + 1' y  + (i*3)' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 2' y);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x'y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 2' y' x + 2' y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 90' x + 2' y + 90);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x' y + (i*5)' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1' y + 1 + (i*5)' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x' y +(i*5)' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x' y + (i*5) + 1);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x + 1' y + (i*5));  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*2)' x + 2' y + (i*2));  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Left);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Right);  				}  			}    				#endregion    				// Horizontal Splitter support added in v1.2    				#region Horizontal Splitter    			else if (this.Dock == DockStyle.Top || this.Dock == DockStyle.Bottom)  			{  				// create a new rectangle in the horizontal center of the splitter for our collapse control button  				rr = new Rectangle((int)r.X + ((r.Width - 115)/2)' r.Y' 115' 8);  				// force the height to 8px  				this.Height = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}    				// draw the left & right lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X' rr.Y + 1' rr.X' rr.Y + rr.Height - 2);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + rr.Width' rr.Y + 1' rr.X + rr.Width' rr.Y + rr.Height - 2);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 3' rr.Y + 2));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X +  rr.Width - 9' rr.Y + 2));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 14;  				int y = rr.Y + 3;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x + (i*3)' y' x + 1 + (i*3)' y + 1);  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x + 1 + (i*3)' y + 1' x + 2 + (i*3)' y + 2);  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)'  x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  						}  						break;    					case VisualStyles.DoubleDots:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y - 1' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y + 2' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y + 1' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 88' y);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 2' x + 88' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 88' y' x + 88' y + 2);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x + (i*5)' y' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*5)' y + 1' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x +(i*5)' y' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5) + 1' y);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5)' y + 1);  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*2)' y' x + (i*2)' y + 2);  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Top);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Bottom);  				}  			}    				#endregion    			else  			{  				throw new Exception("The Collapsible Splitter control cannot have the Filled or None Dockstyle property");  			}
Magic Number,OpenCBS.GUI.UserControl,CollapsibleSplitter,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CollapsibleSplitter.cs,OnPaint,The following statement contains a magic number: if(this.Dock == DockStyle.Left || this.Dock == DockStyle.Right)  			{  				// create a new rectangle in the vertical center of the splitter for our collapse control button  				rr = new Rectangle(r.X' (int)r.Y + ((r.Height - 115)/2)' 8' 115);  				// force the width to 8px so that everything always draws correctly  				this.Width = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}    				// draw the top & bottom lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y' rr.X + rr.Width - 2' rr.Y);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y + rr.Height' rr.X + rr.Width - 2' rr.Y + rr.Height);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + 3));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + rr.Height - 9));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 3;  				int y = rr.Y + 14;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y + (i*3)' x+1' y + 1 + (i*3));  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x+1' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  						}  						break;    					case VisualStyles.DoubleDots:  						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x - 1' y +(i*3)' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 2' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + 1' y  + (i*3)' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 2' y);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x'y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 2' y' x + 2' y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 90' x + 2' y + 90);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x' y + (i*5)' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1' y + 1 + (i*5)' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x' y +(i*5)' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x' y + (i*5) + 1);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x + 1' y + (i*5));  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*2)' x + 2' y + (i*2));  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Left);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Right);  				}  			}    				#endregion    				// Horizontal Splitter support added in v1.2    				#region Horizontal Splitter    			else if (this.Dock == DockStyle.Top || this.Dock == DockStyle.Bottom)  			{  				// create a new rectangle in the horizontal center of the splitter for our collapse control button  				rr = new Rectangle((int)r.X + ((r.Width - 115)/2)' r.Y' 115' 8);  				// force the height to 8px  				this.Height = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}    				// draw the left & right lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X' rr.Y + 1' rr.X' rr.Y + rr.Height - 2);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + rr.Width' rr.Y + 1' rr.X + rr.Width' rr.Y + rr.Height - 2);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 3' rr.Y + 2));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X +  rr.Width - 9' rr.Y + 2));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 14;  				int y = rr.Y + 3;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x + (i*3)' y' x + 1 + (i*3)' y + 1);  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x + 1 + (i*3)' y + 1' x + 2 + (i*3)' y + 2);  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)'  x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  						}  						break;    					case VisualStyles.DoubleDots:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y - 1' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y + 2' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y + 1' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 88' y);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 2' x + 88' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 88' y' x + 88' y + 2);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x + (i*5)' y' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*5)' y + 1' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x +(i*5)' y' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5) + 1' y);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5)' y + 1);  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*2)' y' x + (i*2)' y + 2);  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Top);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Bottom);  				}  			}    				#endregion    			else  			{  				throw new Exception("The Collapsible Splitter control cannot have the Filled or None Dockstyle property");  			}
Magic Number,OpenCBS.GUI.UserControl,CollapsibleSplitter,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CollapsibleSplitter.cs,OnPaint,The following statement contains a magic number: if(this.Dock == DockStyle.Left || this.Dock == DockStyle.Right)  			{  				// create a new rectangle in the vertical center of the splitter for our collapse control button  				rr = new Rectangle(r.X' (int)r.Y + ((r.Height - 115)/2)' 8' 115);  				// force the width to 8px so that everything always draws correctly  				this.Width = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}    				// draw the top & bottom lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y' rr.X + rr.Width - 2' rr.Y);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y + rr.Height' rr.X + rr.Width - 2' rr.Y + rr.Height);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + 3));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + rr.Height - 9));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 3;  				int y = rr.Y + 14;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y + (i*3)' x+1' y + 1 + (i*3));  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x+1' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  						}  						break;    					case VisualStyles.DoubleDots:  						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x - 1' y +(i*3)' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 2' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + 1' y  + (i*3)' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 2' y);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x'y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 2' y' x + 2' y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 90' x + 2' y + 90);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x' y + (i*5)' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1' y + 1 + (i*5)' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x' y +(i*5)' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x' y + (i*5) + 1);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x + 1' y + (i*5));  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*2)' x + 2' y + (i*2));  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Left);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Right);  				}  			}    				#endregion    				// Horizontal Splitter support added in v1.2    				#region Horizontal Splitter    			else if (this.Dock == DockStyle.Top || this.Dock == DockStyle.Bottom)  			{  				// create a new rectangle in the horizontal center of the splitter for our collapse control button  				rr = new Rectangle((int)r.X + ((r.Width - 115)/2)' r.Y' 115' 8);  				// force the height to 8px  				this.Height = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}    				// draw the left & right lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X' rr.Y + 1' rr.X' rr.Y + rr.Height - 2);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + rr.Width' rr.Y + 1' rr.X + rr.Width' rr.Y + rr.Height - 2);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 3' rr.Y + 2));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X +  rr.Width - 9' rr.Y + 2));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 14;  				int y = rr.Y + 3;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x + (i*3)' y' x + 1 + (i*3)' y + 1);  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x + 1 + (i*3)' y + 1' x + 2 + (i*3)' y + 2);  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)'  x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  						}  						break;    					case VisualStyles.DoubleDots:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y - 1' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y + 2' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y + 1' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 88' y);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 2' x + 88' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 88' y' x + 88' y + 2);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x + (i*5)' y' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*5)' y + 1' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x +(i*5)' y' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5) + 1' y);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5)' y + 1);  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*2)' y' x + (i*2)' y + 2);  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Top);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Bottom);  				}  			}    				#endregion    			else  			{  				throw new Exception("The Collapsible Splitter control cannot have the Filled or None Dockstyle property");  			}
Magic Number,OpenCBS.GUI.UserControl,CollapsibleSplitter,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CollapsibleSplitter.cs,OnPaint,The following statement contains a magic number: if(this.Dock == DockStyle.Left || this.Dock == DockStyle.Right)  			{  				// create a new rectangle in the vertical center of the splitter for our collapse control button  				rr = new Rectangle(r.X' (int)r.Y + ((r.Height - 115)/2)' 8' 115);  				// force the width to 8px so that everything always draws correctly  				this.Width = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}    				// draw the top & bottom lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y' rr.X + rr.Width - 2' rr.Y);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y + rr.Height' rr.X + rr.Width - 2' rr.Y + rr.Height);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + 3));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + rr.Height - 9));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 3;  				int y = rr.Y + 14;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y + (i*3)' x+1' y + 1 + (i*3));  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x+1' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  						}  						break;    					case VisualStyles.DoubleDots:  						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x - 1' y +(i*3)' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 2' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + 1' y  + (i*3)' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 2' y);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x'y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 2' y' x + 2' y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 90' x + 2' y + 90);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x' y + (i*5)' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1' y + 1 + (i*5)' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x' y +(i*5)' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x' y + (i*5) + 1);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x + 1' y + (i*5));  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*2)' x + 2' y + (i*2));  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Left);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Right);  				}  			}    				#endregion    				// Horizontal Splitter support added in v1.2    				#region Horizontal Splitter    			else if (this.Dock == DockStyle.Top || this.Dock == DockStyle.Bottom)  			{  				// create a new rectangle in the horizontal center of the splitter for our collapse control button  				rr = new Rectangle((int)r.X + ((r.Width - 115)/2)' r.Y' 115' 8);  				// force the height to 8px  				this.Height = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}    				// draw the left & right lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X' rr.Y + 1' rr.X' rr.Y + rr.Height - 2);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + rr.Width' rr.Y + 1' rr.X + rr.Width' rr.Y + rr.Height - 2);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 3' rr.Y + 2));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X +  rr.Width - 9' rr.Y + 2));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 14;  				int y = rr.Y + 3;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x + (i*3)' y' x + 1 + (i*3)' y + 1);  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x + 1 + (i*3)' y + 1' x + 2 + (i*3)' y + 2);  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)'  x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  						}  						break;    					case VisualStyles.DoubleDots:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y - 1' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y + 2' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y + 1' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 88' y);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 2' x + 88' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 88' y' x + 88' y + 2);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x + (i*5)' y' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*5)' y + 1' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x +(i*5)' y' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5) + 1' y);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5)' y + 1);  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*2)' y' x + (i*2)' y + 2);  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Top);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Bottom);  				}  			}    				#endregion    			else  			{  				throw new Exception("The Collapsible Splitter control cannot have the Filled or None Dockstyle property");  			}
Magic Number,OpenCBS.GUI.UserControl,CollapsibleSplitter,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CollapsibleSplitter.cs,OnPaint,The following statement contains a magic number: if(this.Dock == DockStyle.Left || this.Dock == DockStyle.Right)  			{  				// create a new rectangle in the vertical center of the splitter for our collapse control button  				rr = new Rectangle(r.X' (int)r.Y + ((r.Height - 115)/2)' 8' 115);  				// force the width to 8px so that everything always draws correctly  				this.Width = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}    				// draw the top & bottom lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y' rr.X + rr.Width - 2' rr.Y);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y + rr.Height' rr.X + rr.Width - 2' rr.Y + rr.Height);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + 3));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + rr.Height - 9));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 3;  				int y = rr.Y + 14;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y + (i*3)' x+1' y + 1 + (i*3));  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x+1' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  						}  						break;    					case VisualStyles.DoubleDots:  						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x - 1' y +(i*3)' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 2' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + 1' y  + (i*3)' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 2' y);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x'y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 2' y' x + 2' y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 90' x + 2' y + 90);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x' y + (i*5)' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1' y + 1 + (i*5)' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x' y +(i*5)' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x' y + (i*5) + 1);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x + 1' y + (i*5));  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*2)' x + 2' y + (i*2));  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Left);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Right);  				}  			}    				#endregion    				// Horizontal Splitter support added in v1.2    				#region Horizontal Splitter    			else if (this.Dock == DockStyle.Top || this.Dock == DockStyle.Bottom)  			{  				// create a new rectangle in the horizontal center of the splitter for our collapse control button  				rr = new Rectangle((int)r.X + ((r.Width - 115)/2)' r.Y' 115' 8);  				// force the height to 8px  				this.Height = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}    				// draw the left & right lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X' rr.Y + 1' rr.X' rr.Y + rr.Height - 2);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + rr.Width' rr.Y + 1' rr.X + rr.Width' rr.Y + rr.Height - 2);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 3' rr.Y + 2));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X +  rr.Width - 9' rr.Y + 2));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 14;  				int y = rr.Y + 3;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x + (i*3)' y' x + 1 + (i*3)' y + 1);  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x + 1 + (i*3)' y + 1' x + 2 + (i*3)' y + 2);  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)'  x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  						}  						break;    					case VisualStyles.DoubleDots:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y - 1' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y + 2' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y + 1' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 88' y);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 2' x + 88' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 88' y' x + 88' y + 2);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x + (i*5)' y' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*5)' y + 1' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x +(i*5)' y' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5) + 1' y);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5)' y + 1);  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*2)' y' x + (i*2)' y + 2);  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Top);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Bottom);  				}  			}    				#endregion    			else  			{  				throw new Exception("The Collapsible Splitter control cannot have the Filled or None Dockstyle property");  			}
Magic Number,OpenCBS.GUI.UserControl,CollapsibleSplitter,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CollapsibleSplitter.cs,OnPaint,The following statement contains a magic number: if(this.Dock == DockStyle.Left || this.Dock == DockStyle.Right)  			{  				// create a new rectangle in the vertical center of the splitter for our collapse control button  				rr = new Rectangle(r.X' (int)r.Y + ((r.Height - 115)/2)' 8' 115);  				// force the width to 8px so that everything always draws correctly  				this.Width = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}    				// draw the top & bottom lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y' rr.X + rr.Width - 2' rr.Y);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y + rr.Height' rr.X + rr.Width - 2' rr.Y + rr.Height);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + 3));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + rr.Height - 9));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 3;  				int y = rr.Y + 14;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y + (i*3)' x+1' y + 1 + (i*3));  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x+1' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  						}  						break;    					case VisualStyles.DoubleDots:  						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x - 1' y +(i*3)' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 2' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + 1' y  + (i*3)' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 2' y);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x'y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 2' y' x + 2' y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 90' x + 2' y + 90);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x' y + (i*5)' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1' y + 1 + (i*5)' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x' y +(i*5)' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x' y + (i*5) + 1);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x + 1' y + (i*5));  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*2)' x + 2' y + (i*2));  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Left);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Right);  				}  			}    				#endregion    				// Horizontal Splitter support added in v1.2    				#region Horizontal Splitter    			else if (this.Dock == DockStyle.Top || this.Dock == DockStyle.Bottom)  			{  				// create a new rectangle in the horizontal center of the splitter for our collapse control button  				rr = new Rectangle((int)r.X + ((r.Width - 115)/2)' r.Y' 115' 8);  				// force the height to 8px  				this.Height = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}    				// draw the left & right lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X' rr.Y + 1' rr.X' rr.Y + rr.Height - 2);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + rr.Width' rr.Y + 1' rr.X + rr.Width' rr.Y + rr.Height - 2);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 3' rr.Y + 2));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X +  rr.Width - 9' rr.Y + 2));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 14;  				int y = rr.Y + 3;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x + (i*3)' y' x + 1 + (i*3)' y + 1);  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x + 1 + (i*3)' y + 1' x + 2 + (i*3)' y + 2);  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)'  x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  						}  						break;    					case VisualStyles.DoubleDots:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y - 1' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y + 2' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y + 1' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 88' y);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 2' x + 88' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 88' y' x + 88' y + 2);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x + (i*5)' y' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*5)' y + 1' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x +(i*5)' y' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5) + 1' y);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5)' y + 1);  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*2)' y' x + (i*2)' y + 2);  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Top);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Bottom);  				}  			}    				#endregion    			else  			{  				throw new Exception("The Collapsible Splitter control cannot have the Filled or None Dockstyle property");  			}
Magic Number,OpenCBS.GUI.UserControl,CollapsibleSplitter,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CollapsibleSplitter.cs,OnPaint,The following statement contains a magic number: if(this.Dock == DockStyle.Left || this.Dock == DockStyle.Right)  			{  				// create a new rectangle in the vertical center of the splitter for our collapse control button  				rr = new Rectangle(r.X' (int)r.Y + ((r.Height - 115)/2)' 8' 115);  				// force the width to 8px so that everything always draws correctly  				this.Width = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}    				// draw the top & bottom lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y' rr.X + rr.Width - 2' rr.Y);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y + rr.Height' rr.X + rr.Width - 2' rr.Y + rr.Height);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + 3));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + rr.Height - 9));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 3;  				int y = rr.Y + 14;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y + (i*3)' x+1' y + 1 + (i*3));  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x+1' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  						}  						break;    					case VisualStyles.DoubleDots:  						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x - 1' y +(i*3)' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 2' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + 1' y  + (i*3)' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 2' y);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x'y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 2' y' x + 2' y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 90' x + 2' y + 90);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x' y + (i*5)' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1' y + 1 + (i*5)' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x' y +(i*5)' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x' y + (i*5) + 1);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x + 1' y + (i*5));  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*2)' x + 2' y + (i*2));  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Left);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Right);  				}  			}    				#endregion    				// Horizontal Splitter support added in v1.2    				#region Horizontal Splitter    			else if (this.Dock == DockStyle.Top || this.Dock == DockStyle.Bottom)  			{  				// create a new rectangle in the horizontal center of the splitter for our collapse control button  				rr = new Rectangle((int)r.X + ((r.Width - 115)/2)' r.Y' 115' 8);  				// force the height to 8px  				this.Height = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}    				// draw the left & right lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X' rr.Y + 1' rr.X' rr.Y + rr.Height - 2);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + rr.Width' rr.Y + 1' rr.X + rr.Width' rr.Y + rr.Height - 2);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 3' rr.Y + 2));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X +  rr.Width - 9' rr.Y + 2));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 14;  				int y = rr.Y + 3;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x + (i*3)' y' x + 1 + (i*3)' y + 1);  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x + 1 + (i*3)' y + 1' x + 2 + (i*3)' y + 2);  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)'  x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  						}  						break;    					case VisualStyles.DoubleDots:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y - 1' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y + 2' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y + 1' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 88' y);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 2' x + 88' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 88' y' x + 88' y + 2);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x + (i*5)' y' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*5)' y + 1' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x +(i*5)' y' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5) + 1' y);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5)' y + 1);  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*2)' y' x + (i*2)' y + 2);  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Top);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Bottom);  				}  			}    				#endregion    			else  			{  				throw new Exception("The Collapsible Splitter control cannot have the Filled or None Dockstyle property");  			}
Magic Number,OpenCBS.GUI.UserControl,CollapsibleSplitter,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CollapsibleSplitter.cs,OnPaint,The following statement contains a magic number: if(this.Dock == DockStyle.Left || this.Dock == DockStyle.Right)  			{  				// create a new rectangle in the vertical center of the splitter for our collapse control button  				rr = new Rectangle(r.X' (int)r.Y + ((r.Height - 115)/2)' 8' 115);  				// force the width to 8px so that everything always draws correctly  				this.Width = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}    				// draw the top & bottom lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y' rr.X + rr.Width - 2' rr.Y);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y + rr.Height' rr.X + rr.Width - 2' rr.Y + rr.Height);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + 3));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + rr.Height - 9));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 3;  				int y = rr.Y + 14;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y + (i*3)' x+1' y + 1 + (i*3));  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x+1' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  						}  						break;    					case VisualStyles.DoubleDots:  						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x - 1' y +(i*3)' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 2' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + 1' y  + (i*3)' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 2' y);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x'y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 2' y' x + 2' y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 90' x + 2' y + 90);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x' y + (i*5)' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1' y + 1 + (i*5)' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x' y +(i*5)' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x' y + (i*5) + 1);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x + 1' y + (i*5));  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*2)' x + 2' y + (i*2));  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Left);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Right);  				}  			}    				#endregion    				// Horizontal Splitter support added in v1.2    				#region Horizontal Splitter    			else if (this.Dock == DockStyle.Top || this.Dock == DockStyle.Bottom)  			{  				// create a new rectangle in the horizontal center of the splitter for our collapse control button  				rr = new Rectangle((int)r.X + ((r.Width - 115)/2)' r.Y' 115' 8);  				// force the height to 8px  				this.Height = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}    				// draw the left & right lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X' rr.Y + 1' rr.X' rr.Y + rr.Height - 2);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + rr.Width' rr.Y + 1' rr.X + rr.Width' rr.Y + rr.Height - 2);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 3' rr.Y + 2));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X +  rr.Width - 9' rr.Y + 2));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 14;  				int y = rr.Y + 3;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x + (i*3)' y' x + 1 + (i*3)' y + 1);  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x + 1 + (i*3)' y + 1' x + 2 + (i*3)' y + 2);  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)'  x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  						}  						break;    					case VisualStyles.DoubleDots:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y - 1' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y + 2' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y + 1' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 88' y);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 2' x + 88' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 88' y' x + 88' y + 2);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x + (i*5)' y' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*5)' y + 1' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x +(i*5)' y' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5) + 1' y);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5)' y + 1);  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*2)' y' x + (i*2)' y + 2);  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Top);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Bottom);  				}  			}    				#endregion    			else  			{  				throw new Exception("The Collapsible Splitter control cannot have the Filled or None Dockstyle property");  			}
Magic Number,OpenCBS.GUI.UserControl,CollapsibleSplitter,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CollapsibleSplitter.cs,OnPaint,The following statement contains a magic number: if(this.Dock == DockStyle.Left || this.Dock == DockStyle.Right)  			{  				// create a new rectangle in the vertical center of the splitter for our collapse control button  				rr = new Rectangle(r.X' (int)r.Y + ((r.Height - 115)/2)' 8' 115);  				// force the width to 8px so that everything always draws correctly  				this.Width = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}    				// draw the top & bottom lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y' rr.X + rr.Width - 2' rr.Y);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y + rr.Height' rr.X + rr.Width - 2' rr.Y + rr.Height);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + 3));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + rr.Height - 9));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 3;  				int y = rr.Y + 14;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y + (i*3)' x+1' y + 1 + (i*3));  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x+1' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  						}  						break;    					case VisualStyles.DoubleDots:  						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x - 1' y +(i*3)' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 2' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + 1' y  + (i*3)' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 2' y);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x'y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 2' y' x + 2' y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 90' x + 2' y + 90);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x' y + (i*5)' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1' y + 1 + (i*5)' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x' y +(i*5)' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x' y + (i*5) + 1);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x + 1' y + (i*5));  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*2)' x + 2' y + (i*2));  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Left);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Right);  				}  			}    				#endregion    				// Horizontal Splitter support added in v1.2    				#region Horizontal Splitter    			else if (this.Dock == DockStyle.Top || this.Dock == DockStyle.Bottom)  			{  				// create a new rectangle in the horizontal center of the splitter for our collapse control button  				rr = new Rectangle((int)r.X + ((r.Width - 115)/2)' r.Y' 115' 8);  				// force the height to 8px  				this.Height = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}    				// draw the left & right lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X' rr.Y + 1' rr.X' rr.Y + rr.Height - 2);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + rr.Width' rr.Y + 1' rr.X + rr.Width' rr.Y + rr.Height - 2);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 3' rr.Y + 2));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X +  rr.Width - 9' rr.Y + 2));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 14;  				int y = rr.Y + 3;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x + (i*3)' y' x + 1 + (i*3)' y + 1);  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x + 1 + (i*3)' y + 1' x + 2 + (i*3)' y + 2);  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)'  x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  						}  						break;    					case VisualStyles.DoubleDots:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y - 1' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y + 2' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y + 1' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 88' y);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 2' x + 88' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 88' y' x + 88' y + 2);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x + (i*5)' y' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*5)' y + 1' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x +(i*5)' y' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5) + 1' y);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5)' y + 1);  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*2)' y' x + (i*2)' y + 2);  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Top);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Bottom);  				}  			}    				#endregion    			else  			{  				throw new Exception("The Collapsible Splitter control cannot have the Filled or None Dockstyle property");  			}
Magic Number,OpenCBS.GUI.UserControl,CollapsibleSplitter,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CollapsibleSplitter.cs,OnPaint,The following statement contains a magic number: if(this.Dock == DockStyle.Left || this.Dock == DockStyle.Right)  			{  				// create a new rectangle in the vertical center of the splitter for our collapse control button  				rr = new Rectangle(r.X' (int)r.Y + ((r.Height - 115)/2)' 8' 115);  				// force the width to 8px so that everything always draws correctly  				this.Width = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}    				// draw the top & bottom lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y' rr.X + rr.Width - 2' rr.Y);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y + rr.Height' rr.X + rr.Width - 2' rr.Y + rr.Height);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + 3));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + rr.Height - 9));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 3;  				int y = rr.Y + 14;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y + (i*3)' x+1' y + 1 + (i*3));  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x+1' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  						}  						break;    					case VisualStyles.DoubleDots:  						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x - 1' y +(i*3)' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 2' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + 1' y  + (i*3)' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 2' y);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x'y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 2' y' x + 2' y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 90' x + 2' y + 90);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x' y + (i*5)' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1' y + 1 + (i*5)' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x' y +(i*5)' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x' y + (i*5) + 1);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x + 1' y + (i*5));  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*2)' x + 2' y + (i*2));  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Left);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Right);  				}  			}    				#endregion    				// Horizontal Splitter support added in v1.2    				#region Horizontal Splitter    			else if (this.Dock == DockStyle.Top || this.Dock == DockStyle.Bottom)  			{  				// create a new rectangle in the horizontal center of the splitter for our collapse control button  				rr = new Rectangle((int)r.X + ((r.Width - 115)/2)' r.Y' 115' 8);  				// force the height to 8px  				this.Height = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}    				// draw the left & right lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X' rr.Y + 1' rr.X' rr.Y + rr.Height - 2);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + rr.Width' rr.Y + 1' rr.X + rr.Width' rr.Y + rr.Height - 2);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 3' rr.Y + 2));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X +  rr.Width - 9' rr.Y + 2));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 14;  				int y = rr.Y + 3;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x + (i*3)' y' x + 1 + (i*3)' y + 1);  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x + 1 + (i*3)' y + 1' x + 2 + (i*3)' y + 2);  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)'  x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  						}  						break;    					case VisualStyles.DoubleDots:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y - 1' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y + 2' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y + 1' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 88' y);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 2' x + 88' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 88' y' x + 88' y + 2);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x + (i*5)' y' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*5)' y + 1' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x +(i*5)' y' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5) + 1' y);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5)' y + 1);  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*2)' y' x + (i*2)' y + 2);  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Top);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Bottom);  				}  			}    				#endregion    			else  			{  				throw new Exception("The Collapsible Splitter control cannot have the Filled or None Dockstyle property");  			}
Magic Number,OpenCBS.GUI.UserControl,CollapsibleSplitter,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CollapsibleSplitter.cs,OnPaint,The following statement contains a magic number: if(this.Dock == DockStyle.Left || this.Dock == DockStyle.Right)  			{  				// create a new rectangle in the vertical center of the splitter for our collapse control button  				rr = new Rectangle(r.X' (int)r.Y + ((r.Height - 115)/2)' 8' 115);  				// force the width to 8px so that everything always draws correctly  				this.Width = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}    				// draw the top & bottom lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y' rr.X + rr.Width - 2' rr.Y);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y + rr.Height' rr.X + rr.Width - 2' rr.Y + rr.Height);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + 3));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + rr.Height - 9));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 3;  				int y = rr.Y + 14;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y + (i*3)' x+1' y + 1 + (i*3));  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x+1' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  						}  						break;    					case VisualStyles.DoubleDots:  						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x - 1' y +(i*3)' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 2' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + 1' y  + (i*3)' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 2' y);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x'y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 2' y' x + 2' y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 90' x + 2' y + 90);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x' y + (i*5)' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1' y + 1 + (i*5)' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x' y +(i*5)' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x' y + (i*5) + 1);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x + 1' y + (i*5));  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*2)' x + 2' y + (i*2));  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Left);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Right);  				}  			}    				#endregion    				// Horizontal Splitter support added in v1.2    				#region Horizontal Splitter    			else if (this.Dock == DockStyle.Top || this.Dock == DockStyle.Bottom)  			{  				// create a new rectangle in the horizontal center of the splitter for our collapse control button  				rr = new Rectangle((int)r.X + ((r.Width - 115)/2)' r.Y' 115' 8);  				// force the height to 8px  				this.Height = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}    				// draw the left & right lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X' rr.Y + 1' rr.X' rr.Y + rr.Height - 2);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + rr.Width' rr.Y + 1' rr.X + rr.Width' rr.Y + rr.Height - 2);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 3' rr.Y + 2));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X +  rr.Width - 9' rr.Y + 2));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 14;  				int y = rr.Y + 3;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x + (i*3)' y' x + 1 + (i*3)' y + 1);  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x + 1 + (i*3)' y + 1' x + 2 + (i*3)' y + 2);  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)'  x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  						}  						break;    					case VisualStyles.DoubleDots:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y - 1' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y + 2' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y + 1' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 88' y);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 2' x + 88' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 88' y' x + 88' y + 2);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x + (i*5)' y' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*5)' y + 1' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x +(i*5)' y' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5) + 1' y);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5)' y + 1);  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*2)' y' x + (i*2)' y + 2);  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Top);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Bottom);  				}  			}    				#endregion    			else  			{  				throw new Exception("The Collapsible Splitter control cannot have the Filled or None Dockstyle property");  			}
Magic Number,OpenCBS.GUI.UserControl,CollapsibleSplitter,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CollapsibleSplitter.cs,OnPaint,The following statement contains a magic number: if(this.Dock == DockStyle.Left || this.Dock == DockStyle.Right)  			{  				// create a new rectangle in the vertical center of the splitter for our collapse control button  				rr = new Rectangle(r.X' (int)r.Y + ((r.Height - 115)/2)' 8' 115);  				// force the width to 8px so that everything always draws correctly  				this.Width = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}    				// draw the top & bottom lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y' rr.X + rr.Width - 2' rr.Y);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y + rr.Height' rr.X + rr.Width - 2' rr.Y + rr.Height);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + 3));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + rr.Height - 9));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 3;  				int y = rr.Y + 14;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y + (i*3)' x+1' y + 1 + (i*3));  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x+1' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  						}  						break;    					case VisualStyles.DoubleDots:  						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x - 1' y +(i*3)' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 2' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + 1' y  + (i*3)' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 2' y);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x'y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 2' y' x + 2' y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 90' x + 2' y + 90);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x' y + (i*5)' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1' y + 1 + (i*5)' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x' y +(i*5)' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x' y + (i*5) + 1);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x + 1' y + (i*5));  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*2)' x + 2' y + (i*2));  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Left);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Right);  				}  			}    				#endregion    				// Horizontal Splitter support added in v1.2    				#region Horizontal Splitter    			else if (this.Dock == DockStyle.Top || this.Dock == DockStyle.Bottom)  			{  				// create a new rectangle in the horizontal center of the splitter for our collapse control button  				rr = new Rectangle((int)r.X + ((r.Width - 115)/2)' r.Y' 115' 8);  				// force the height to 8px  				this.Height = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}    				// draw the left & right lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X' rr.Y + 1' rr.X' rr.Y + rr.Height - 2);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + rr.Width' rr.Y + 1' rr.X + rr.Width' rr.Y + rr.Height - 2);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 3' rr.Y + 2));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X +  rr.Width - 9' rr.Y + 2));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 14;  				int y = rr.Y + 3;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x + (i*3)' y' x + 1 + (i*3)' y + 1);  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x + 1 + (i*3)' y + 1' x + 2 + (i*3)' y + 2);  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)'  x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  						}  						break;    					case VisualStyles.DoubleDots:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y - 1' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y + 2' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y + 1' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 88' y);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 2' x + 88' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 88' y' x + 88' y + 2);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x + (i*5)' y' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*5)' y + 1' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x +(i*5)' y' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5) + 1' y);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5)' y + 1);  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*2)' y' x + (i*2)' y + 2);  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Top);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Bottom);  				}  			}    				#endregion    			else  			{  				throw new Exception("The Collapsible Splitter control cannot have the Filled or None Dockstyle property");  			}
Magic Number,OpenCBS.GUI.UserControl,CollapsibleSplitter,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CollapsibleSplitter.cs,OnPaint,The following statement contains a magic number: if(this.Dock == DockStyle.Left || this.Dock == DockStyle.Right)  			{  				// create a new rectangle in the vertical center of the splitter for our collapse control button  				rr = new Rectangle(r.X' (int)r.Y + ((r.Height - 115)/2)' 8' 115);  				// force the width to 8px so that everything always draws correctly  				this.Width = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}    				// draw the top & bottom lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y' rr.X + rr.Width - 2' rr.Y);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y + rr.Height' rr.X + rr.Width - 2' rr.Y + rr.Height);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + 3));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + rr.Height - 9));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 3;  				int y = rr.Y + 14;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y + (i*3)' x+1' y + 1 + (i*3));  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x+1' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  						}  						break;    					case VisualStyles.DoubleDots:  						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x - 1' y +(i*3)' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 2' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + 1' y  + (i*3)' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 2' y);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x'y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 2' y' x + 2' y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 90' x + 2' y + 90);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x' y + (i*5)' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1' y + 1 + (i*5)' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x' y +(i*5)' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x' y + (i*5) + 1);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x + 1' y + (i*5));  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*2)' x + 2' y + (i*2));  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Left);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Right);  				}  			}    				#endregion    				// Horizontal Splitter support added in v1.2    				#region Horizontal Splitter    			else if (this.Dock == DockStyle.Top || this.Dock == DockStyle.Bottom)  			{  				// create a new rectangle in the horizontal center of the splitter for our collapse control button  				rr = new Rectangle((int)r.X + ((r.Width - 115)/2)' r.Y' 115' 8);  				// force the height to 8px  				this.Height = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}    				// draw the left & right lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X' rr.Y + 1' rr.X' rr.Y + rr.Height - 2);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + rr.Width' rr.Y + 1' rr.X + rr.Width' rr.Y + rr.Height - 2);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 3' rr.Y + 2));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X +  rr.Width - 9' rr.Y + 2));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 14;  				int y = rr.Y + 3;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x + (i*3)' y' x + 1 + (i*3)' y + 1);  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x + 1 + (i*3)' y + 1' x + 2 + (i*3)' y + 2);  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)'  x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  						}  						break;    					case VisualStyles.DoubleDots:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y - 1' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y + 2' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y + 1' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 88' y);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 2' x + 88' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 88' y' x + 88' y + 2);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x + (i*5)' y' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*5)' y + 1' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x +(i*5)' y' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5) + 1' y);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5)' y + 1);  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*2)' y' x + (i*2)' y + 2);  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Top);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Bottom);  				}  			}    				#endregion    			else  			{  				throw new Exception("The Collapsible Splitter control cannot have the Filled or None Dockstyle property");  			}
Magic Number,OpenCBS.GUI.UserControl,CollapsibleSplitter,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CollapsibleSplitter.cs,OnPaint,The following statement contains a magic number: if(this.Dock == DockStyle.Left || this.Dock == DockStyle.Right)  			{  				// create a new rectangle in the vertical center of the splitter for our collapse control button  				rr = new Rectangle(r.X' (int)r.Y + ((r.Height - 115)/2)' 8' 115);  				// force the width to 8px so that everything always draws correctly  				this.Width = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}    				// draw the top & bottom lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y' rr.X + rr.Width - 2' rr.Y);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y + rr.Height' rr.X + rr.Width - 2' rr.Y + rr.Height);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + 3));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + rr.Height - 9));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 3;  				int y = rr.Y + 14;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y + (i*3)' x+1' y + 1 + (i*3));  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x+1' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  						}  						break;    					case VisualStyles.DoubleDots:  						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x - 1' y +(i*3)' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 2' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + 1' y  + (i*3)' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 2' y);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x'y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 2' y' x + 2' y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 90' x + 2' y + 90);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x' y + (i*5)' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1' y + 1 + (i*5)' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x' y +(i*5)' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x' y + (i*5) + 1);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x + 1' y + (i*5));  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*2)' x + 2' y + (i*2));  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Left);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Right);  				}  			}    				#endregion    				// Horizontal Splitter support added in v1.2    				#region Horizontal Splitter    			else if (this.Dock == DockStyle.Top || this.Dock == DockStyle.Bottom)  			{  				// create a new rectangle in the horizontal center of the splitter for our collapse control button  				rr = new Rectangle((int)r.X + ((r.Width - 115)/2)' r.Y' 115' 8);  				// force the height to 8px  				this.Height = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}    				// draw the left & right lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X' rr.Y + 1' rr.X' rr.Y + rr.Height - 2);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + rr.Width' rr.Y + 1' rr.X + rr.Width' rr.Y + rr.Height - 2);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 3' rr.Y + 2));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X +  rr.Width - 9' rr.Y + 2));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 14;  				int y = rr.Y + 3;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x + (i*3)' y' x + 1 + (i*3)' y + 1);  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x + 1 + (i*3)' y + 1' x + 2 + (i*3)' y + 2);  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)'  x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  						}  						break;    					case VisualStyles.DoubleDots:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y - 1' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y + 2' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y + 1' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 88' y);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 2' x + 88' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 88' y' x + 88' y + 2);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x + (i*5)' y' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*5)' y + 1' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x +(i*5)' y' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5) + 1' y);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5)' y + 1);  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*2)' y' x + (i*2)' y + 2);  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Top);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Bottom);  				}  			}    				#endregion    			else  			{  				throw new Exception("The Collapsible Splitter control cannot have the Filled or None Dockstyle property");  			}
Magic Number,OpenCBS.GUI.UserControl,CollapsibleSplitter,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CollapsibleSplitter.cs,OnPaint,The following statement contains a magic number: if(this.Dock == DockStyle.Left || this.Dock == DockStyle.Right)  			{  				// create a new rectangle in the vertical center of the splitter for our collapse control button  				rr = new Rectangle(r.X' (int)r.Y + ((r.Height - 115)/2)' 8' 115);  				// force the width to 8px so that everything always draws correctly  				this.Width = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}    				// draw the top & bottom lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y' rr.X + rr.Width - 2' rr.Y);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y + rr.Height' rr.X + rr.Width - 2' rr.Y + rr.Height);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + 3));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + rr.Height - 9));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 3;  				int y = rr.Y + 14;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y + (i*3)' x+1' y + 1 + (i*3));  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x+1' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  						}  						break;    					case VisualStyles.DoubleDots:  						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x - 1' y +(i*3)' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 2' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + 1' y  + (i*3)' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 2' y);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x'y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 2' y' x + 2' y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 90' x + 2' y + 90);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x' y + (i*5)' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1' y + 1 + (i*5)' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x' y +(i*5)' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x' y + (i*5) + 1);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x + 1' y + (i*5));  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*2)' x + 2' y + (i*2));  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Left);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Right);  				}  			}    				#endregion    				// Horizontal Splitter support added in v1.2    				#region Horizontal Splitter    			else if (this.Dock == DockStyle.Top || this.Dock == DockStyle.Bottom)  			{  				// create a new rectangle in the horizontal center of the splitter for our collapse control button  				rr = new Rectangle((int)r.X + ((r.Width - 115)/2)' r.Y' 115' 8);  				// force the height to 8px  				this.Height = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}    				// draw the left & right lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X' rr.Y + 1' rr.X' rr.Y + rr.Height - 2);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + rr.Width' rr.Y + 1' rr.X + rr.Width' rr.Y + rr.Height - 2);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 3' rr.Y + 2));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X +  rr.Width - 9' rr.Y + 2));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 14;  				int y = rr.Y + 3;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x + (i*3)' y' x + 1 + (i*3)' y + 1);  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x + 1 + (i*3)' y + 1' x + 2 + (i*3)' y + 2);  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)'  x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  						}  						break;    					case VisualStyles.DoubleDots:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y - 1' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y + 2' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y + 1' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 88' y);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 2' x + 88' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 88' y' x + 88' y + 2);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x + (i*5)' y' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*5)' y + 1' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x +(i*5)' y' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5) + 1' y);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5)' y + 1);  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*2)' y' x + (i*2)' y + 2);  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Top);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Bottom);  				}  			}    				#endregion    			else  			{  				throw new Exception("The Collapsible Splitter control cannot have the Filled or None Dockstyle property");  			}
Magic Number,OpenCBS.GUI.UserControl,CollapsibleSplitter,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CollapsibleSplitter.cs,OnPaint,The following statement contains a magic number: if(this.Dock == DockStyle.Left || this.Dock == DockStyle.Right)  			{  				// create a new rectangle in the vertical center of the splitter for our collapse control button  				rr = new Rectangle(r.X' (int)r.Y + ((r.Height - 115)/2)' 8' 115);  				// force the width to 8px so that everything always draws correctly  				this.Width = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}    				// draw the top & bottom lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y' rr.X + rr.Width - 2' rr.Y);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y + rr.Height' rr.X + rr.Width - 2' rr.Y + rr.Height);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + 3));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + rr.Height - 9));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 3;  				int y = rr.Y + 14;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y + (i*3)' x+1' y + 1 + (i*3));  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x+1' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  						}  						break;    					case VisualStyles.DoubleDots:  						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x - 1' y +(i*3)' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 2' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + 1' y  + (i*3)' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 2' y);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x'y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 2' y' x + 2' y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 90' x + 2' y + 90);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x' y + (i*5)' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1' y + 1 + (i*5)' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x' y +(i*5)' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x' y + (i*5) + 1);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x + 1' y + (i*5));  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*2)' x + 2' y + (i*2));  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Left);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Right);  				}  			}    				#endregion    				// Horizontal Splitter support added in v1.2    				#region Horizontal Splitter    			else if (this.Dock == DockStyle.Top || this.Dock == DockStyle.Bottom)  			{  				// create a new rectangle in the horizontal center of the splitter for our collapse control button  				rr = new Rectangle((int)r.X + ((r.Width - 115)/2)' r.Y' 115' 8);  				// force the height to 8px  				this.Height = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}    				// draw the left & right lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X' rr.Y + 1' rr.X' rr.Y + rr.Height - 2);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + rr.Width' rr.Y + 1' rr.X + rr.Width' rr.Y + rr.Height - 2);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 3' rr.Y + 2));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X +  rr.Width - 9' rr.Y + 2));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 14;  				int y = rr.Y + 3;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x + (i*3)' y' x + 1 + (i*3)' y + 1);  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x + 1 + (i*3)' y + 1' x + 2 + (i*3)' y + 2);  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)'  x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  						}  						break;    					case VisualStyles.DoubleDots:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y - 1' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y + 2' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y + 1' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 88' y);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 2' x + 88' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 88' y' x + 88' y + 2);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x + (i*5)' y' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*5)' y + 1' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x +(i*5)' y' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5) + 1' y);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5)' y + 1);  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*2)' y' x + (i*2)' y + 2);  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Top);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Bottom);  				}  			}    				#endregion    			else  			{  				throw new Exception("The Collapsible Splitter control cannot have the Filled or None Dockstyle property");  			}
Magic Number,OpenCBS.GUI.UserControl,CollapsibleSplitter,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CollapsibleSplitter.cs,OnPaint,The following statement contains a magic number: if(this.Dock == DockStyle.Left || this.Dock == DockStyle.Right)  			{  				// create a new rectangle in the vertical center of the splitter for our collapse control button  				rr = new Rectangle(r.X' (int)r.Y + ((r.Height - 115)/2)' 8' 115);  				// force the width to 8px so that everything always draws correctly  				this.Width = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}    				// draw the top & bottom lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y' rr.X + rr.Width - 2' rr.Y);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y + rr.Height' rr.X + rr.Width - 2' rr.Y + rr.Height);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + 3));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + rr.Height - 9));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 3;  				int y = rr.Y + 14;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y + (i*3)' x+1' y + 1 + (i*3));  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x+1' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  						}  						break;    					case VisualStyles.DoubleDots:  						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x - 1' y +(i*3)' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 2' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + 1' y  + (i*3)' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 2' y);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x'y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 2' y' x + 2' y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 90' x + 2' y + 90);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x' y + (i*5)' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1' y + 1 + (i*5)' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x' y +(i*5)' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x' y + (i*5) + 1);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x + 1' y + (i*5));  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*2)' x + 2' y + (i*2));  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Left);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Right);  				}  			}    				#endregion    				// Horizontal Splitter support added in v1.2    				#region Horizontal Splitter    			else if (this.Dock == DockStyle.Top || this.Dock == DockStyle.Bottom)  			{  				// create a new rectangle in the horizontal center of the splitter for our collapse control button  				rr = new Rectangle((int)r.X + ((r.Width - 115)/2)' r.Y' 115' 8);  				// force the height to 8px  				this.Height = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}    				// draw the left & right lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X' rr.Y + 1' rr.X' rr.Y + rr.Height - 2);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + rr.Width' rr.Y + 1' rr.X + rr.Width' rr.Y + rr.Height - 2);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 3' rr.Y + 2));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X +  rr.Width - 9' rr.Y + 2));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 14;  				int y = rr.Y + 3;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x + (i*3)' y' x + 1 + (i*3)' y + 1);  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x + 1 + (i*3)' y + 1' x + 2 + (i*3)' y + 2);  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)'  x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  						}  						break;    					case VisualStyles.DoubleDots:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y - 1' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y + 2' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y + 1' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 88' y);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 2' x + 88' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 88' y' x + 88' y + 2);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x + (i*5)' y' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*5)' y + 1' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x +(i*5)' y' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5) + 1' y);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5)' y + 1);  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*2)' y' x + (i*2)' y + 2);  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Top);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Bottom);  				}  			}    				#endregion    			else  			{  				throw new Exception("The Collapsible Splitter control cannot have the Filled or None Dockstyle property");  			}
Magic Number,OpenCBS.GUI.UserControl,CollapsibleSplitter,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CollapsibleSplitter.cs,OnPaint,The following statement contains a magic number: if(this.Dock == DockStyle.Left || this.Dock == DockStyle.Right)  			{  				// create a new rectangle in the vertical center of the splitter for our collapse control button  				rr = new Rectangle(r.X' (int)r.Y + ((r.Height - 115)/2)' 8' 115);  				// force the width to 8px so that everything always draws correctly  				this.Width = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}    				// draw the top & bottom lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y' rr.X + rr.Width - 2' rr.Y);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y + rr.Height' rr.X + rr.Width - 2' rr.Y + rr.Height);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + 3));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + rr.Height - 9));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 3;  				int y = rr.Y + 14;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y + (i*3)' x+1' y + 1 + (i*3));  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x+1' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  						}  						break;    					case VisualStyles.DoubleDots:  						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x - 1' y +(i*3)' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 2' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + 1' y  + (i*3)' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 2' y);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x'y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 2' y' x + 2' y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 90' x + 2' y + 90);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x' y + (i*5)' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1' y + 1 + (i*5)' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x' y +(i*5)' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x' y + (i*5) + 1);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x + 1' y + (i*5));  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*2)' x + 2' y + (i*2));  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Left);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Right);  				}  			}    				#endregion    				// Horizontal Splitter support added in v1.2    				#region Horizontal Splitter    			else if (this.Dock == DockStyle.Top || this.Dock == DockStyle.Bottom)  			{  				// create a new rectangle in the horizontal center of the splitter for our collapse control button  				rr = new Rectangle((int)r.X + ((r.Width - 115)/2)' r.Y' 115' 8);  				// force the height to 8px  				this.Height = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}    				// draw the left & right lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X' rr.Y + 1' rr.X' rr.Y + rr.Height - 2);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + rr.Width' rr.Y + 1' rr.X + rr.Width' rr.Y + rr.Height - 2);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 3' rr.Y + 2));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X +  rr.Width - 9' rr.Y + 2));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 14;  				int y = rr.Y + 3;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x + (i*3)' y' x + 1 + (i*3)' y + 1);  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x + 1 + (i*3)' y + 1' x + 2 + (i*3)' y + 2);  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)'  x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  						}  						break;    					case VisualStyles.DoubleDots:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y - 1' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y + 2' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y + 1' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 88' y);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 2' x + 88' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 88' y' x + 88' y + 2);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x + (i*5)' y' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*5)' y + 1' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x +(i*5)' y' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5) + 1' y);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5)' y + 1);  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*2)' y' x + (i*2)' y + 2);  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Top);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Bottom);  				}  			}    				#endregion    			else  			{  				throw new Exception("The Collapsible Splitter control cannot have the Filled or None Dockstyle property");  			}
Magic Number,OpenCBS.GUI.UserControl,CollapsibleSplitter,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CollapsibleSplitter.cs,OnPaint,The following statement contains a magic number: if(this.Dock == DockStyle.Left || this.Dock == DockStyle.Right)  			{  				// create a new rectangle in the vertical center of the splitter for our collapse control button  				rr = new Rectangle(r.X' (int)r.Y + ((r.Height - 115)/2)' 8' 115);  				// force the width to 8px so that everything always draws correctly  				this.Width = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}    				// draw the top & bottom lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y' rr.X + rr.Width - 2' rr.Y);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y + rr.Height' rr.X + rr.Width - 2' rr.Y + rr.Height);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + 3));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + rr.Height - 9));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 3;  				int y = rr.Y + 14;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y + (i*3)' x+1' y + 1 + (i*3));  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x+1' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  						}  						break;    					case VisualStyles.DoubleDots:  						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x - 1' y +(i*3)' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 2' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + 1' y  + (i*3)' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 2' y);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x'y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 2' y' x + 2' y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 90' x + 2' y + 90);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x' y + (i*5)' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1' y + 1 + (i*5)' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x' y +(i*5)' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x' y + (i*5) + 1);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x + 1' y + (i*5));  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*2)' x + 2' y + (i*2));  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Left);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Right);  				}  			}    				#endregion    				// Horizontal Splitter support added in v1.2    				#region Horizontal Splitter    			else if (this.Dock == DockStyle.Top || this.Dock == DockStyle.Bottom)  			{  				// create a new rectangle in the horizontal center of the splitter for our collapse control button  				rr = new Rectangle((int)r.X + ((r.Width - 115)/2)' r.Y' 115' 8);  				// force the height to 8px  				this.Height = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}    				// draw the left & right lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X' rr.Y + 1' rr.X' rr.Y + rr.Height - 2);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + rr.Width' rr.Y + 1' rr.X + rr.Width' rr.Y + rr.Height - 2);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 3' rr.Y + 2));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X +  rr.Width - 9' rr.Y + 2));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 14;  				int y = rr.Y + 3;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x + (i*3)' y' x + 1 + (i*3)' y + 1);  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x + 1 + (i*3)' y + 1' x + 2 + (i*3)' y + 2);  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)'  x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  						}  						break;    					case VisualStyles.DoubleDots:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y - 1' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y + 2' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y + 1' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 88' y);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 2' x + 88' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 88' y' x + 88' y + 2);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x + (i*5)' y' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*5)' y + 1' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x +(i*5)' y' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5) + 1' y);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5)' y + 1);  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*2)' y' x + (i*2)' y + 2);  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Top);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Bottom);  				}  			}    				#endregion    			else  			{  				throw new Exception("The Collapsible Splitter control cannot have the Filled or None Dockstyle property");  			}
Magic Number,OpenCBS.GUI.UserControl,CollapsibleSplitter,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CollapsibleSplitter.cs,OnPaint,The following statement contains a magic number: if(this.Dock == DockStyle.Left || this.Dock == DockStyle.Right)  			{  				// create a new rectangle in the vertical center of the splitter for our collapse control button  				rr = new Rectangle(r.X' (int)r.Y + ((r.Height - 115)/2)' 8' 115);  				// force the width to 8px so that everything always draws correctly  				this.Width = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}    				// draw the top & bottom lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y' rr.X + rr.Width - 2' rr.Y);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y + rr.Height' rr.X + rr.Width - 2' rr.Y + rr.Height);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + 3));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + rr.Height - 9));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 3;  				int y = rr.Y + 14;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y + (i*3)' x+1' y + 1 + (i*3));  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x+1' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  						}  						break;    					case VisualStyles.DoubleDots:  						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x - 1' y +(i*3)' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 2' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + 1' y  + (i*3)' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 2' y);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x'y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 2' y' x + 2' y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 90' x + 2' y + 90);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x' y + (i*5)' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1' y + 1 + (i*5)' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x' y +(i*5)' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x' y + (i*5) + 1);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x + 1' y + (i*5));  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*2)' x + 2' y + (i*2));  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Left);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Right);  				}  			}    				#endregion    				// Horizontal Splitter support added in v1.2    				#region Horizontal Splitter    			else if (this.Dock == DockStyle.Top || this.Dock == DockStyle.Bottom)  			{  				// create a new rectangle in the horizontal center of the splitter for our collapse control button  				rr = new Rectangle((int)r.X + ((r.Width - 115)/2)' r.Y' 115' 8);  				// force the height to 8px  				this.Height = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}    				// draw the left & right lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X' rr.Y + 1' rr.X' rr.Y + rr.Height - 2);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + rr.Width' rr.Y + 1' rr.X + rr.Width' rr.Y + rr.Height - 2);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 3' rr.Y + 2));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X +  rr.Width - 9' rr.Y + 2));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 14;  				int y = rr.Y + 3;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x + (i*3)' y' x + 1 + (i*3)' y + 1);  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x + 1 + (i*3)' y + 1' x + 2 + (i*3)' y + 2);  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)'  x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  						}  						break;    					case VisualStyles.DoubleDots:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y - 1' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y + 2' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y + 1' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 88' y);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 2' x + 88' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 88' y' x + 88' y + 2);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x + (i*5)' y' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*5)' y + 1' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x +(i*5)' y' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5) + 1' y);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5)' y + 1);  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*2)' y' x + (i*2)' y + 2);  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Top);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Bottom);  				}  			}    				#endregion    			else  			{  				throw new Exception("The Collapsible Splitter control cannot have the Filled or None Dockstyle property");  			}
Magic Number,OpenCBS.GUI.UserControl,CollapsibleSplitter,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CollapsibleSplitter.cs,OnPaint,The following statement contains a magic number: if(this.Dock == DockStyle.Left || this.Dock == DockStyle.Right)  			{  				// create a new rectangle in the vertical center of the splitter for our collapse control button  				rr = new Rectangle(r.X' (int)r.Y + ((r.Height - 115)/2)' 8' 115);  				// force the width to 8px so that everything always draws correctly  				this.Width = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}    				// draw the top & bottom lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y' rr.X + rr.Width - 2' rr.Y);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y + rr.Height' rr.X + rr.Width - 2' rr.Y + rr.Height);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + 3));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + rr.Height - 9));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 3;  				int y = rr.Y + 14;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y + (i*3)' x+1' y + 1 + (i*3));  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x+1' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  						}  						break;    					case VisualStyles.DoubleDots:  						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x - 1' y +(i*3)' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 2' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + 1' y  + (i*3)' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 2' y);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x'y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 2' y' x + 2' y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 90' x + 2' y + 90);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x' y + (i*5)' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1' y + 1 + (i*5)' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x' y +(i*5)' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x' y + (i*5) + 1);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x + 1' y + (i*5));  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*2)' x + 2' y + (i*2));  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Left);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Right);  				}  			}    				#endregion    				// Horizontal Splitter support added in v1.2    				#region Horizontal Splitter    			else if (this.Dock == DockStyle.Top || this.Dock == DockStyle.Bottom)  			{  				// create a new rectangle in the horizontal center of the splitter for our collapse control button  				rr = new Rectangle((int)r.X + ((r.Width - 115)/2)' r.Y' 115' 8);  				// force the height to 8px  				this.Height = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}    				// draw the left & right lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X' rr.Y + 1' rr.X' rr.Y + rr.Height - 2);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + rr.Width' rr.Y + 1' rr.X + rr.Width' rr.Y + rr.Height - 2);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 3' rr.Y + 2));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X +  rr.Width - 9' rr.Y + 2));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 14;  				int y = rr.Y + 3;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x + (i*3)' y' x + 1 + (i*3)' y + 1);  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x + 1 + (i*3)' y + 1' x + 2 + (i*3)' y + 2);  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)'  x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  						}  						break;    					case VisualStyles.DoubleDots:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y - 1' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y + 2' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y + 1' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 88' y);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 2' x + 88' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 88' y' x + 88' y + 2);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x + (i*5)' y' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*5)' y + 1' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x +(i*5)' y' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5) + 1' y);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5)' y + 1);  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*2)' y' x + (i*2)' y + 2);  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Top);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Bottom);  				}  			}    				#endregion    			else  			{  				throw new Exception("The Collapsible Splitter control cannot have the Filled or None Dockstyle property");  			}
Magic Number,OpenCBS.GUI.UserControl,CollapsibleSplitter,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CollapsibleSplitter.cs,OnPaint,The following statement contains a magic number: if(this.Dock == DockStyle.Left || this.Dock == DockStyle.Right)  			{  				// create a new rectangle in the vertical center of the splitter for our collapse control button  				rr = new Rectangle(r.X' (int)r.Y + ((r.Height - 115)/2)' 8' 115);  				// force the width to 8px so that everything always draws correctly  				this.Width = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}    				// draw the top & bottom lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y' rr.X + rr.Width - 2' rr.Y);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y + rr.Height' rr.X + rr.Width - 2' rr.Y + rr.Height);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + 3));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + rr.Height - 9));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 3;  				int y = rr.Y + 14;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y + (i*3)' x+1' y + 1 + (i*3));  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x+1' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  						}  						break;    					case VisualStyles.DoubleDots:  						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x - 1' y +(i*3)' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 2' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + 1' y  + (i*3)' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 2' y);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x'y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 2' y' x + 2' y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 90' x + 2' y + 90);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x' y + (i*5)' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1' y + 1 + (i*5)' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x' y +(i*5)' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x' y + (i*5) + 1);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x + 1' y + (i*5));  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*2)' x + 2' y + (i*2));  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Left);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Right);  				}  			}    				#endregion    				// Horizontal Splitter support added in v1.2    				#region Horizontal Splitter    			else if (this.Dock == DockStyle.Top || this.Dock == DockStyle.Bottom)  			{  				// create a new rectangle in the horizontal center of the splitter for our collapse control button  				rr = new Rectangle((int)r.X + ((r.Width - 115)/2)' r.Y' 115' 8);  				// force the height to 8px  				this.Height = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}    				// draw the left & right lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X' rr.Y + 1' rr.X' rr.Y + rr.Height - 2);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + rr.Width' rr.Y + 1' rr.X + rr.Width' rr.Y + rr.Height - 2);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 3' rr.Y + 2));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X +  rr.Width - 9' rr.Y + 2));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 14;  				int y = rr.Y + 3;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x + (i*3)' y' x + 1 + (i*3)' y + 1);  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x + 1 + (i*3)' y + 1' x + 2 + (i*3)' y + 2);  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)'  x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  						}  						break;    					case VisualStyles.DoubleDots:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y - 1' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y + 2' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y + 1' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 88' y);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 2' x + 88' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 88' y' x + 88' y + 2);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x + (i*5)' y' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*5)' y + 1' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x +(i*5)' y' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5) + 1' y);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5)' y + 1);  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*2)' y' x + (i*2)' y + 2);  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Top);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Bottom);  				}  			}    				#endregion    			else  			{  				throw new Exception("The Collapsible Splitter control cannot have the Filled or None Dockstyle property");  			}
Magic Number,OpenCBS.GUI.UserControl,CollapsibleSplitter,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CollapsibleSplitter.cs,OnPaint,The following statement contains a magic number: if(this.Dock == DockStyle.Left || this.Dock == DockStyle.Right)  			{  				// create a new rectangle in the vertical center of the splitter for our collapse control button  				rr = new Rectangle(r.X' (int)r.Y + ((r.Height - 115)/2)' 8' 115);  				// force the width to 8px so that everything always draws correctly  				this.Width = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}    				// draw the top & bottom lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y' rr.X + rr.Width - 2' rr.Y);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y + rr.Height' rr.X + rr.Width - 2' rr.Y + rr.Height);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + 3));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + rr.Height - 9));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 3;  				int y = rr.Y + 14;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y + (i*3)' x+1' y + 1 + (i*3));  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x+1' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  						}  						break;    					case VisualStyles.DoubleDots:  						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x - 1' y +(i*3)' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 2' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + 1' y  + (i*3)' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 2' y);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x'y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 2' y' x + 2' y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 90' x + 2' y + 90);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x' y + (i*5)' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1' y + 1 + (i*5)' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x' y +(i*5)' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x' y + (i*5) + 1);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x + 1' y + (i*5));  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*2)' x + 2' y + (i*2));  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Left);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Right);  				}  			}    				#endregion    				// Horizontal Splitter support added in v1.2    				#region Horizontal Splitter    			else if (this.Dock == DockStyle.Top || this.Dock == DockStyle.Bottom)  			{  				// create a new rectangle in the horizontal center of the splitter for our collapse control button  				rr = new Rectangle((int)r.X + ((r.Width - 115)/2)' r.Y' 115' 8);  				// force the height to 8px  				this.Height = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}    				// draw the left & right lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X' rr.Y + 1' rr.X' rr.Y + rr.Height - 2);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + rr.Width' rr.Y + 1' rr.X + rr.Width' rr.Y + rr.Height - 2);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 3' rr.Y + 2));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X +  rr.Width - 9' rr.Y + 2));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 14;  				int y = rr.Y + 3;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x + (i*3)' y' x + 1 + (i*3)' y + 1);  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x + 1 + (i*3)' y + 1' x + 2 + (i*3)' y + 2);  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)'  x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  						}  						break;    					case VisualStyles.DoubleDots:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y - 1' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y + 2' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y + 1' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 88' y);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 2' x + 88' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 88' y' x + 88' y + 2);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x + (i*5)' y' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*5)' y + 1' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x +(i*5)' y' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5) + 1' y);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5)' y + 1);  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*2)' y' x + (i*2)' y + 2);  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Top);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Bottom);  				}  			}    				#endregion    			else  			{  				throw new Exception("The Collapsible Splitter control cannot have the Filled or None Dockstyle property");  			}
Magic Number,OpenCBS.GUI.UserControl,CollapsibleSplitter,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CollapsibleSplitter.cs,OnPaint,The following statement contains a magic number: if(this.Dock == DockStyle.Left || this.Dock == DockStyle.Right)  			{  				// create a new rectangle in the vertical center of the splitter for our collapse control button  				rr = new Rectangle(r.X' (int)r.Y + ((r.Height - 115)/2)' 8' 115);  				// force the width to 8px so that everything always draws correctly  				this.Width = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}    				// draw the top & bottom lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y' rr.X + rr.Width - 2' rr.Y);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y + rr.Height' rr.X + rr.Width - 2' rr.Y + rr.Height);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + 3));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + rr.Height - 9));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 3;  				int y = rr.Y + 14;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y + (i*3)' x+1' y + 1 + (i*3));  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x+1' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  						}  						break;    					case VisualStyles.DoubleDots:  						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x - 1' y +(i*3)' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 2' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + 1' y  + (i*3)' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 2' y);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x'y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 2' y' x + 2' y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 90' x + 2' y + 90);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x' y + (i*5)' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1' y + 1 + (i*5)' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x' y +(i*5)' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x' y + (i*5) + 1);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x + 1' y + (i*5));  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*2)' x + 2' y + (i*2));  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Left);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Right);  				}  			}    				#endregion    				// Horizontal Splitter support added in v1.2    				#region Horizontal Splitter    			else if (this.Dock == DockStyle.Top || this.Dock == DockStyle.Bottom)  			{  				// create a new rectangle in the horizontal center of the splitter for our collapse control button  				rr = new Rectangle((int)r.X + ((r.Width - 115)/2)' r.Y' 115' 8);  				// force the height to 8px  				this.Height = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}    				// draw the left & right lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X' rr.Y + 1' rr.X' rr.Y + rr.Height - 2);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + rr.Width' rr.Y + 1' rr.X + rr.Width' rr.Y + rr.Height - 2);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 3' rr.Y + 2));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X +  rr.Width - 9' rr.Y + 2));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 14;  				int y = rr.Y + 3;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x + (i*3)' y' x + 1 + (i*3)' y + 1);  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x + 1 + (i*3)' y + 1' x + 2 + (i*3)' y + 2);  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)'  x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  						}  						break;    					case VisualStyles.DoubleDots:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y - 1' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y + 2' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y + 1' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 88' y);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 2' x + 88' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 88' y' x + 88' y + 2);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x + (i*5)' y' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*5)' y + 1' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x +(i*5)' y' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5) + 1' y);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5)' y + 1);  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*2)' y' x + (i*2)' y + 2);  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Top);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Bottom);  				}  			}    				#endregion    			else  			{  				throw new Exception("The Collapsible Splitter control cannot have the Filled or None Dockstyle property");  			}
Magic Number,OpenCBS.GUI.UserControl,CollapsibleSplitter,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CollapsibleSplitter.cs,OnPaint,The following statement contains a magic number: if(this.Dock == DockStyle.Left || this.Dock == DockStyle.Right)  			{  				// create a new rectangle in the vertical center of the splitter for our collapse control button  				rr = new Rectangle(r.X' (int)r.Y + ((r.Height - 115)/2)' 8' 115);  				// force the width to 8px so that everything always draws correctly  				this.Width = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}    				// draw the top & bottom lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y' rr.X + rr.Width - 2' rr.Y);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y + rr.Height' rr.X + rr.Width - 2' rr.Y + rr.Height);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + 3));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + rr.Height - 9));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 3;  				int y = rr.Y + 14;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y + (i*3)' x+1' y + 1 + (i*3));  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x+1' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  						}  						break;    					case VisualStyles.DoubleDots:  						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x - 1' y +(i*3)' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 2' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + 1' y  + (i*3)' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 2' y);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x'y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 2' y' x + 2' y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 90' x + 2' y + 90);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x' y + (i*5)' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1' y + 1 + (i*5)' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x' y +(i*5)' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x' y + (i*5) + 1);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x + 1' y + (i*5));  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*2)' x + 2' y + (i*2));  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Left);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Right);  				}  			}    				#endregion    				// Horizontal Splitter support added in v1.2    				#region Horizontal Splitter    			else if (this.Dock == DockStyle.Top || this.Dock == DockStyle.Bottom)  			{  				// create a new rectangle in the horizontal center of the splitter for our collapse control button  				rr = new Rectangle((int)r.X + ((r.Width - 115)/2)' r.Y' 115' 8);  				// force the height to 8px  				this.Height = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}    				// draw the left & right lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X' rr.Y + 1' rr.X' rr.Y + rr.Height - 2);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + rr.Width' rr.Y + 1' rr.X + rr.Width' rr.Y + rr.Height - 2);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 3' rr.Y + 2));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X +  rr.Width - 9' rr.Y + 2));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 14;  				int y = rr.Y + 3;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x + (i*3)' y' x + 1 + (i*3)' y + 1);  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x + 1 + (i*3)' y + 1' x + 2 + (i*3)' y + 2);  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)'  x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  						}  						break;    					case VisualStyles.DoubleDots:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y - 1' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y + 2' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y + 1' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 88' y);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 2' x + 88' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 88' y' x + 88' y + 2);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x + (i*5)' y' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*5)' y + 1' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x +(i*5)' y' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5) + 1' y);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5)' y + 1);  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*2)' y' x + (i*2)' y + 2);  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Top);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Bottom);  				}  			}    				#endregion    			else  			{  				throw new Exception("The Collapsible Splitter control cannot have the Filled or None Dockstyle property");  			}
Magic Number,OpenCBS.GUI.UserControl,CollapsibleSplitter,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CollapsibleSplitter.cs,OnPaint,The following statement contains a magic number: if(this.Dock == DockStyle.Left || this.Dock == DockStyle.Right)  			{  				// create a new rectangle in the vertical center of the splitter for our collapse control button  				rr = new Rectangle(r.X' (int)r.Y + ((r.Height - 115)/2)' 8' 115);  				// force the width to 8px so that everything always draws correctly  				this.Width = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}    				// draw the top & bottom lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y' rr.X + rr.Width - 2' rr.Y);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y + rr.Height' rr.X + rr.Width - 2' rr.Y + rr.Height);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + 3));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + rr.Height - 9));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 3;  				int y = rr.Y + 14;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y + (i*3)' x+1' y + 1 + (i*3));  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x+1' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  						}  						break;    					case VisualStyles.DoubleDots:  						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x - 1' y +(i*3)' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 2' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + 1' y  + (i*3)' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 2' y);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x'y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 2' y' x + 2' y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 90' x + 2' y + 90);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x' y + (i*5)' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1' y + 1 + (i*5)' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x' y +(i*5)' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x' y + (i*5) + 1);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x + 1' y + (i*5));  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*2)' x + 2' y + (i*2));  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Left);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Right);  				}  			}    				#endregion    				// Horizontal Splitter support added in v1.2    				#region Horizontal Splitter    			else if (this.Dock == DockStyle.Top || this.Dock == DockStyle.Bottom)  			{  				// create a new rectangle in the horizontal center of the splitter for our collapse control button  				rr = new Rectangle((int)r.X + ((r.Width - 115)/2)' r.Y' 115' 8);  				// force the height to 8px  				this.Height = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}    				// draw the left & right lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X' rr.Y + 1' rr.X' rr.Y + rr.Height - 2);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + rr.Width' rr.Y + 1' rr.X + rr.Width' rr.Y + rr.Height - 2);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 3' rr.Y + 2));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X +  rr.Width - 9' rr.Y + 2));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 14;  				int y = rr.Y + 3;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x + (i*3)' y' x + 1 + (i*3)' y + 1);  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x + 1 + (i*3)' y + 1' x + 2 + (i*3)' y + 2);  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)'  x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  						}  						break;    					case VisualStyles.DoubleDots:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y - 1' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y + 2' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y + 1' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 88' y);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 2' x + 88' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 88' y' x + 88' y + 2);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x + (i*5)' y' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*5)' y + 1' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x +(i*5)' y' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5) + 1' y);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5)' y + 1);  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*2)' y' x + (i*2)' y + 2);  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Top);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Bottom);  				}  			}    				#endregion    			else  			{  				throw new Exception("The Collapsible Splitter control cannot have the Filled or None Dockstyle property");  			}
Magic Number,OpenCBS.GUI.UserControl,CollapsibleSplitter,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CollapsibleSplitter.cs,OnPaint,The following statement contains a magic number: if(this.Dock == DockStyle.Left || this.Dock == DockStyle.Right)  			{  				// create a new rectangle in the vertical center of the splitter for our collapse control button  				rr = new Rectangle(r.X' (int)r.Y + ((r.Height - 115)/2)' 8' 115);  				// force the width to 8px so that everything always draws correctly  				this.Width = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}    				// draw the top & bottom lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y' rr.X + rr.Width - 2' rr.Y);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y + rr.Height' rr.X + rr.Width - 2' rr.Y + rr.Height);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + 3));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + rr.Height - 9));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 3;  				int y = rr.Y + 14;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y + (i*3)' x+1' y + 1 + (i*3));  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x+1' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  						}  						break;    					case VisualStyles.DoubleDots:  						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x - 1' y +(i*3)' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 2' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + 1' y  + (i*3)' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 2' y);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x'y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 2' y' x + 2' y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 90' x + 2' y + 90);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x' y + (i*5)' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1' y + 1 + (i*5)' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x' y +(i*5)' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x' y + (i*5) + 1);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x + 1' y + (i*5));  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*2)' x + 2' y + (i*2));  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Left);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Right);  				}  			}    				#endregion    				// Horizontal Splitter support added in v1.2    				#region Horizontal Splitter    			else if (this.Dock == DockStyle.Top || this.Dock == DockStyle.Bottom)  			{  				// create a new rectangle in the horizontal center of the splitter for our collapse control button  				rr = new Rectangle((int)r.X + ((r.Width - 115)/2)' r.Y' 115' 8);  				// force the height to 8px  				this.Height = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}    				// draw the left & right lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X' rr.Y + 1' rr.X' rr.Y + rr.Height - 2);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + rr.Width' rr.Y + 1' rr.X + rr.Width' rr.Y + rr.Height - 2);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 3' rr.Y + 2));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X +  rr.Width - 9' rr.Y + 2));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 14;  				int y = rr.Y + 3;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x + (i*3)' y' x + 1 + (i*3)' y + 1);  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x + 1 + (i*3)' y + 1' x + 2 + (i*3)' y + 2);  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)'  x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  						}  						break;    					case VisualStyles.DoubleDots:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y - 1' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y + 2' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y + 1' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 88' y);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 2' x + 88' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 88' y' x + 88' y + 2);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x + (i*5)' y' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*5)' y + 1' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x +(i*5)' y' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5) + 1' y);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5)' y + 1);  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*2)' y' x + (i*2)' y + 2);  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Top);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Bottom);  				}  			}    				#endregion    			else  			{  				throw new Exception("The Collapsible Splitter control cannot have the Filled or None Dockstyle property");  			}
Magic Number,OpenCBS.GUI.UserControl,CollapsibleSplitter,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CollapsibleSplitter.cs,OnPaint,The following statement contains a magic number: if(this.Dock == DockStyle.Left || this.Dock == DockStyle.Right)  			{  				// create a new rectangle in the vertical center of the splitter for our collapse control button  				rr = new Rectangle(r.X' (int)r.Y + ((r.Height - 115)/2)' 8' 115);  				// force the width to 8px so that everything always draws correctly  				this.Width = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}    				// draw the top & bottom lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y' rr.X + rr.Width - 2' rr.Y);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y + rr.Height' rr.X + rr.Width - 2' rr.Y + rr.Height);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + 3));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + rr.Height - 9));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 3;  				int y = rr.Y + 14;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y + (i*3)' x+1' y + 1 + (i*3));  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x+1' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  						}  						break;    					case VisualStyles.DoubleDots:  						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x - 1' y +(i*3)' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 2' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + 1' y  + (i*3)' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 2' y);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x'y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 2' y' x + 2' y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 90' x + 2' y + 90);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x' y + (i*5)' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1' y + 1 + (i*5)' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x' y +(i*5)' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x' y + (i*5) + 1);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x + 1' y + (i*5));  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*2)' x + 2' y + (i*2));  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Left);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Right);  				}  			}    				#endregion    				// Horizontal Splitter support added in v1.2    				#region Horizontal Splitter    			else if (this.Dock == DockStyle.Top || this.Dock == DockStyle.Bottom)  			{  				// create a new rectangle in the horizontal center of the splitter for our collapse control button  				rr = new Rectangle((int)r.X + ((r.Width - 115)/2)' r.Y' 115' 8);  				// force the height to 8px  				this.Height = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}    				// draw the left & right lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X' rr.Y + 1' rr.X' rr.Y + rr.Height - 2);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + rr.Width' rr.Y + 1' rr.X + rr.Width' rr.Y + rr.Height - 2);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 3' rr.Y + 2));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X +  rr.Width - 9' rr.Y + 2));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 14;  				int y = rr.Y + 3;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x + (i*3)' y' x + 1 + (i*3)' y + 1);  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x + 1 + (i*3)' y + 1' x + 2 + (i*3)' y + 2);  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)'  x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  						}  						break;    					case VisualStyles.DoubleDots:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y - 1' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y + 2' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y + 1' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 88' y);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 2' x + 88' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 88' y' x + 88' y + 2);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x + (i*5)' y' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*5)' y + 1' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x +(i*5)' y' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5) + 1' y);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5)' y + 1);  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*2)' y' x + (i*2)' y + 2);  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Top);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Bottom);  				}  			}    				#endregion    			else  			{  				throw new Exception("The Collapsible Splitter control cannot have the Filled or None Dockstyle property");  			}
Magic Number,OpenCBS.GUI.UserControl,CollapsibleSplitter,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CollapsibleSplitter.cs,OnPaint,The following statement contains a magic number: if(this.Dock == DockStyle.Left || this.Dock == DockStyle.Right)  			{  				// create a new rectangle in the vertical center of the splitter for our collapse control button  				rr = new Rectangle(r.X' (int)r.Y + ((r.Height - 115)/2)' 8' 115);  				// force the width to 8px so that everything always draws correctly  				this.Width = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}    				// draw the top & bottom lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y' rr.X + rr.Width - 2' rr.Y);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y + rr.Height' rr.X + rr.Width - 2' rr.Y + rr.Height);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + 3));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + rr.Height - 9));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 3;  				int y = rr.Y + 14;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y + (i*3)' x+1' y + 1 + (i*3));  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x+1' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  						}  						break;    					case VisualStyles.DoubleDots:  						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x - 1' y +(i*3)' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 2' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + 1' y  + (i*3)' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 2' y);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x'y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 2' y' x + 2' y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 90' x + 2' y + 90);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x' y + (i*5)' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1' y + 1 + (i*5)' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x' y +(i*5)' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x' y + (i*5) + 1);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x + 1' y + (i*5));  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*2)' x + 2' y + (i*2));  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Left);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Right);  				}  			}    				#endregion    				// Horizontal Splitter support added in v1.2    				#region Horizontal Splitter    			else if (this.Dock == DockStyle.Top || this.Dock == DockStyle.Bottom)  			{  				// create a new rectangle in the horizontal center of the splitter for our collapse control button  				rr = new Rectangle((int)r.X + ((r.Width - 115)/2)' r.Y' 115' 8);  				// force the height to 8px  				this.Height = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}    				// draw the left & right lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X' rr.Y + 1' rr.X' rr.Y + rr.Height - 2);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + rr.Width' rr.Y + 1' rr.X + rr.Width' rr.Y + rr.Height - 2);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 3' rr.Y + 2));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X +  rr.Width - 9' rr.Y + 2));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 14;  				int y = rr.Y + 3;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x + (i*3)' y' x + 1 + (i*3)' y + 1);  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x + 1 + (i*3)' y + 1' x + 2 + (i*3)' y + 2);  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)'  x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  						}  						break;    					case VisualStyles.DoubleDots:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y - 1' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y + 2' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y + 1' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 88' y);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 2' x + 88' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 88' y' x + 88' y + 2);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x + (i*5)' y' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*5)' y + 1' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x +(i*5)' y' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5) + 1' y);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5)' y + 1);  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*2)' y' x + (i*2)' y + 2);  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Top);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Bottom);  				}  			}    				#endregion    			else  			{  				throw new Exception("The Collapsible Splitter control cannot have the Filled or None Dockstyle property");  			}
Magic Number,OpenCBS.GUI.UserControl,CollapsibleSplitter,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CollapsibleSplitter.cs,OnPaint,The following statement contains a magic number: if(this.Dock == DockStyle.Left || this.Dock == DockStyle.Right)  			{  				// create a new rectangle in the vertical center of the splitter for our collapse control button  				rr = new Rectangle(r.X' (int)r.Y + ((r.Height - 115)/2)' 8' 115);  				// force the width to 8px so that everything always draws correctly  				this.Width = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}    				// draw the top & bottom lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y' rr.X + rr.Width - 2' rr.Y);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y + rr.Height' rr.X + rr.Width - 2' rr.Y + rr.Height);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + 3));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + rr.Height - 9));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 3;  				int y = rr.Y + 14;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y + (i*3)' x+1' y + 1 + (i*3));  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x+1' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  						}  						break;    					case VisualStyles.DoubleDots:  						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x - 1' y +(i*3)' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 2' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + 1' y  + (i*3)' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 2' y);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x'y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 2' y' x + 2' y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 90' x + 2' y + 90);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x' y + (i*5)' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1' y + 1 + (i*5)' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x' y +(i*5)' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x' y + (i*5) + 1);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x + 1' y + (i*5));  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*2)' x + 2' y + (i*2));  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Left);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Right);  				}  			}    				#endregion    				// Horizontal Splitter support added in v1.2    				#region Horizontal Splitter    			else if (this.Dock == DockStyle.Top || this.Dock == DockStyle.Bottom)  			{  				// create a new rectangle in the horizontal center of the splitter for our collapse control button  				rr = new Rectangle((int)r.X + ((r.Width - 115)/2)' r.Y' 115' 8);  				// force the height to 8px  				this.Height = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}    				// draw the left & right lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X' rr.Y + 1' rr.X' rr.Y + rr.Height - 2);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + rr.Width' rr.Y + 1' rr.X + rr.Width' rr.Y + rr.Height - 2);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 3' rr.Y + 2));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X +  rr.Width - 9' rr.Y + 2));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 14;  				int y = rr.Y + 3;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x + (i*3)' y' x + 1 + (i*3)' y + 1);  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x + 1 + (i*3)' y + 1' x + 2 + (i*3)' y + 2);  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)'  x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  						}  						break;    					case VisualStyles.DoubleDots:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y - 1' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y + 2' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y + 1' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 88' y);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 2' x + 88' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 88' y' x + 88' y + 2);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x + (i*5)' y' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*5)' y + 1' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x +(i*5)' y' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5) + 1' y);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5)' y + 1);  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*2)' y' x + (i*2)' y + 2);  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Top);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Bottom);  				}  			}    				#endregion    			else  			{  				throw new Exception("The Collapsible Splitter control cannot have the Filled or None Dockstyle property");  			}
Magic Number,OpenCBS.GUI.UserControl,CollapsibleSplitter,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CollapsibleSplitter.cs,OnPaint,The following statement contains a magic number: if(this.Dock == DockStyle.Left || this.Dock == DockStyle.Right)  			{  				// create a new rectangle in the vertical center of the splitter for our collapse control button  				rr = new Rectangle(r.X' (int)r.Y + ((r.Height - 115)/2)' 8' 115);  				// force the width to 8px so that everything always draws correctly  				this.Width = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}    				// draw the top & bottom lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y' rr.X + rr.Width - 2' rr.Y);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y + rr.Height' rr.X + rr.Width - 2' rr.Y + rr.Height);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + 3));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + rr.Height - 9));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 3;  				int y = rr.Y + 14;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y + (i*3)' x+1' y + 1 + (i*3));  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x+1' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  						}  						break;    					case VisualStyles.DoubleDots:  						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x - 1' y +(i*3)' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 2' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + 1' y  + (i*3)' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 2' y);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x'y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 2' y' x + 2' y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 90' x + 2' y + 90);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x' y + (i*5)' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1' y + 1 + (i*5)' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x' y +(i*5)' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x' y + (i*5) + 1);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x + 1' y + (i*5));  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*2)' x + 2' y + (i*2));  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Left);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Right);  				}  			}    				#endregion    				// Horizontal Splitter support added in v1.2    				#region Horizontal Splitter    			else if (this.Dock == DockStyle.Top || this.Dock == DockStyle.Bottom)  			{  				// create a new rectangle in the horizontal center of the splitter for our collapse control button  				rr = new Rectangle((int)r.X + ((r.Width - 115)/2)' r.Y' 115' 8);  				// force the height to 8px  				this.Height = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}    				// draw the left & right lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X' rr.Y + 1' rr.X' rr.Y + rr.Height - 2);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + rr.Width' rr.Y + 1' rr.X + rr.Width' rr.Y + rr.Height - 2);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 3' rr.Y + 2));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X +  rr.Width - 9' rr.Y + 2));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 14;  				int y = rr.Y + 3;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x + (i*3)' y' x + 1 + (i*3)' y + 1);  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x + 1 + (i*3)' y + 1' x + 2 + (i*3)' y + 2);  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)'  x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  						}  						break;    					case VisualStyles.DoubleDots:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y - 1' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y + 2' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y + 1' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 88' y);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 2' x + 88' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 88' y' x + 88' y + 2);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x + (i*5)' y' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*5)' y + 1' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x +(i*5)' y' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5) + 1' y);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5)' y + 1);  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*2)' y' x + (i*2)' y + 2);  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Top);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Bottom);  				}  			}    				#endregion    			else  			{  				throw new Exception("The Collapsible Splitter control cannot have the Filled or None Dockstyle property");  			}
Magic Number,OpenCBS.GUI.UserControl,CollapsibleSplitter,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CollapsibleSplitter.cs,OnPaint,The following statement contains a magic number: if(this.Dock == DockStyle.Left || this.Dock == DockStyle.Right)  			{  				// create a new rectangle in the vertical center of the splitter for our collapse control button  				rr = new Rectangle(r.X' (int)r.Y + ((r.Height - 115)/2)' 8' 115);  				// force the width to 8px so that everything always draws correctly  				this.Width = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}    				// draw the top & bottom lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y' rr.X + rr.Width - 2' rr.Y);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y + rr.Height' rr.X + rr.Width - 2' rr.Y + rr.Height);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + 3));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + rr.Height - 9));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 3;  				int y = rr.Y + 14;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y + (i*3)' x+1' y + 1 + (i*3));  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x+1' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  						}  						break;    					case VisualStyles.DoubleDots:  						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x - 1' y +(i*3)' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 2' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + 1' y  + (i*3)' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 2' y);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x'y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 2' y' x + 2' y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 90' x + 2' y + 90);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x' y + (i*5)' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1' y + 1 + (i*5)' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x' y +(i*5)' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x' y + (i*5) + 1);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x + 1' y + (i*5));  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*2)' x + 2' y + (i*2));  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Left);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Right);  				}  			}    				#endregion    				// Horizontal Splitter support added in v1.2    				#region Horizontal Splitter    			else if (this.Dock == DockStyle.Top || this.Dock == DockStyle.Bottom)  			{  				// create a new rectangle in the horizontal center of the splitter for our collapse control button  				rr = new Rectangle((int)r.X + ((r.Width - 115)/2)' r.Y' 115' 8);  				// force the height to 8px  				this.Height = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}    				// draw the left & right lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X' rr.Y + 1' rr.X' rr.Y + rr.Height - 2);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + rr.Width' rr.Y + 1' rr.X + rr.Width' rr.Y + rr.Height - 2);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 3' rr.Y + 2));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X +  rr.Width - 9' rr.Y + 2));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 14;  				int y = rr.Y + 3;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x + (i*3)' y' x + 1 + (i*3)' y + 1);  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x + 1 + (i*3)' y + 1' x + 2 + (i*3)' y + 2);  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)'  x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  						}  						break;    					case VisualStyles.DoubleDots:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y - 1' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y + 2' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y + 1' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 88' y);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 2' x + 88' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 88' y' x + 88' y + 2);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x + (i*5)' y' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*5)' y + 1' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x +(i*5)' y' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5) + 1' y);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5)' y + 1);  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*2)' y' x + (i*2)' y + 2);  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Top);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Bottom);  				}  			}    				#endregion    			else  			{  				throw new Exception("The Collapsible Splitter control cannot have the Filled or None Dockstyle property");  			}
Magic Number,OpenCBS.GUI.UserControl,CollapsibleSplitter,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CollapsibleSplitter.cs,OnPaint,The following statement contains a magic number: if(this.Dock == DockStyle.Left || this.Dock == DockStyle.Right)  			{  				// create a new rectangle in the vertical center of the splitter for our collapse control button  				rr = new Rectangle(r.X' (int)r.Y + ((r.Height - 115)/2)' 8' 115);  				// force the width to 8px so that everything always draws correctly  				this.Width = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}    				// draw the top & bottom lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y' rr.X + rr.Width - 2' rr.Y);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y + rr.Height' rr.X + rr.Width - 2' rr.Y + rr.Height);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + 3));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + rr.Height - 9));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 3;  				int y = rr.Y + 14;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y + (i*3)' x+1' y + 1 + (i*3));  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x+1' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  						}  						break;    					case VisualStyles.DoubleDots:  						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x - 1' y +(i*3)' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 2' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + 1' y  + (i*3)' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 2' y);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x'y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 2' y' x + 2' y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 90' x + 2' y + 90);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x' y + (i*5)' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1' y + 1 + (i*5)' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x' y +(i*5)' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x' y + (i*5) + 1);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x + 1' y + (i*5));  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*2)' x + 2' y + (i*2));  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Left);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Right);  				}  			}    				#endregion    				// Horizontal Splitter support added in v1.2    				#region Horizontal Splitter    			else if (this.Dock == DockStyle.Top || this.Dock == DockStyle.Bottom)  			{  				// create a new rectangle in the horizontal center of the splitter for our collapse control button  				rr = new Rectangle((int)r.X + ((r.Width - 115)/2)' r.Y' 115' 8);  				// force the height to 8px  				this.Height = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}    				// draw the left & right lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X' rr.Y + 1' rr.X' rr.Y + rr.Height - 2);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + rr.Width' rr.Y + 1' rr.X + rr.Width' rr.Y + rr.Height - 2);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 3' rr.Y + 2));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X +  rr.Width - 9' rr.Y + 2));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 14;  				int y = rr.Y + 3;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x + (i*3)' y' x + 1 + (i*3)' y + 1);  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x + 1 + (i*3)' y + 1' x + 2 + (i*3)' y + 2);  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)'  x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  						}  						break;    					case VisualStyles.DoubleDots:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y - 1' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y + 2' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y + 1' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 88' y);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 2' x + 88' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 88' y' x + 88' y + 2);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x + (i*5)' y' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*5)' y + 1' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x +(i*5)' y' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5) + 1' y);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5)' y + 1);  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*2)' y' x + (i*2)' y + 2);  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Top);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Bottom);  				}  			}    				#endregion    			else  			{  				throw new Exception("The Collapsible Splitter control cannot have the Filled or None Dockstyle property");  			}
Magic Number,OpenCBS.GUI.UserControl,CollapsibleSplitter,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CollapsibleSplitter.cs,OnPaint,The following statement contains a magic number: if(this.Dock == DockStyle.Left || this.Dock == DockStyle.Right)  			{  				// create a new rectangle in the vertical center of the splitter for our collapse control button  				rr = new Rectangle(r.X' (int)r.Y + ((r.Height - 115)/2)' 8' 115);  				// force the width to 8px so that everything always draws correctly  				this.Width = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}    				// draw the top & bottom lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y' rr.X + rr.Width - 2' rr.Y);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y + rr.Height' rr.X + rr.Width - 2' rr.Y + rr.Height);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + 3));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + rr.Height - 9));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 3;  				int y = rr.Y + 14;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y + (i*3)' x+1' y + 1 + (i*3));  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x+1' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  						}  						break;    					case VisualStyles.DoubleDots:  						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x - 1' y +(i*3)' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 2' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + 1' y  + (i*3)' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 2' y);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x'y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 2' y' x + 2' y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 90' x + 2' y + 90);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x' y + (i*5)' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1' y + 1 + (i*5)' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x' y +(i*5)' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x' y + (i*5) + 1);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x + 1' y + (i*5));  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*2)' x + 2' y + (i*2));  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Left);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Right);  				}  			}    				#endregion    				// Horizontal Splitter support added in v1.2    				#region Horizontal Splitter    			else if (this.Dock == DockStyle.Top || this.Dock == DockStyle.Bottom)  			{  				// create a new rectangle in the horizontal center of the splitter for our collapse control button  				rr = new Rectangle((int)r.X + ((r.Width - 115)/2)' r.Y' 115' 8);  				// force the height to 8px  				this.Height = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}    				// draw the left & right lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X' rr.Y + 1' rr.X' rr.Y + rr.Height - 2);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + rr.Width' rr.Y + 1' rr.X + rr.Width' rr.Y + rr.Height - 2);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 3' rr.Y + 2));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X +  rr.Width - 9' rr.Y + 2));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 14;  				int y = rr.Y + 3;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x + (i*3)' y' x + 1 + (i*3)' y + 1);  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x + 1 + (i*3)' y + 1' x + 2 + (i*3)' y + 2);  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)'  x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  						}  						break;    					case VisualStyles.DoubleDots:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y - 1' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y + 2' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y + 1' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 88' y);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 2' x + 88' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 88' y' x + 88' y + 2);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x + (i*5)' y' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*5)' y + 1' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x +(i*5)' y' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5) + 1' y);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5)' y + 1);  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*2)' y' x + (i*2)' y + 2);  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Top);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Bottom);  				}  			}    				#endregion    			else  			{  				throw new Exception("The Collapsible Splitter control cannot have the Filled or None Dockstyle property");  			}
Magic Number,OpenCBS.GUI.UserControl,CollapsibleSplitter,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CollapsibleSplitter.cs,OnPaint,The following statement contains a magic number: if(this.Dock == DockStyle.Left || this.Dock == DockStyle.Right)  			{  				// create a new rectangle in the vertical center of the splitter for our collapse control button  				rr = new Rectangle(r.X' (int)r.Y + ((r.Height - 115)/2)' 8' 115);  				// force the width to 8px so that everything always draws correctly  				this.Width = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}    				// draw the top & bottom lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y' rr.X + rr.Width - 2' rr.Y);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y + rr.Height' rr.X + rr.Width - 2' rr.Y + rr.Height);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + 3));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + rr.Height - 9));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 3;  				int y = rr.Y + 14;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y + (i*3)' x+1' y + 1 + (i*3));  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x+1' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  						}  						break;    					case VisualStyles.DoubleDots:  						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x - 1' y +(i*3)' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 2' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + 1' y  + (i*3)' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 2' y);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x'y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 2' y' x + 2' y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 90' x + 2' y + 90);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x' y + (i*5)' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1' y + 1 + (i*5)' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x' y +(i*5)' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x' y + (i*5) + 1);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x + 1' y + (i*5));  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*2)' x + 2' y + (i*2));  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Left);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Right);  				}  			}    				#endregion    				// Horizontal Splitter support added in v1.2    				#region Horizontal Splitter    			else if (this.Dock == DockStyle.Top || this.Dock == DockStyle.Bottom)  			{  				// create a new rectangle in the horizontal center of the splitter for our collapse control button  				rr = new Rectangle((int)r.X + ((r.Width - 115)/2)' r.Y' 115' 8);  				// force the height to 8px  				this.Height = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}    				// draw the left & right lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X' rr.Y + 1' rr.X' rr.Y + rr.Height - 2);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + rr.Width' rr.Y + 1' rr.X + rr.Width' rr.Y + rr.Height - 2);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 3' rr.Y + 2));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X +  rr.Width - 9' rr.Y + 2));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 14;  				int y = rr.Y + 3;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x + (i*3)' y' x + 1 + (i*3)' y + 1);  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x + 1 + (i*3)' y + 1' x + 2 + (i*3)' y + 2);  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)'  x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  						}  						break;    					case VisualStyles.DoubleDots:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y - 1' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y + 2' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y + 1' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 88' y);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 2' x + 88' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 88' y' x + 88' y + 2);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x + (i*5)' y' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*5)' y + 1' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x +(i*5)' y' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5) + 1' y);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5)' y + 1);  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*2)' y' x + (i*2)' y + 2);  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Top);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Bottom);  				}  			}    				#endregion    			else  			{  				throw new Exception("The Collapsible Splitter control cannot have the Filled or None Dockstyle property");  			}
Magic Number,OpenCBS.GUI.UserControl,CollapsibleSplitter,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CollapsibleSplitter.cs,OnPaint,The following statement contains a magic number: if(this.Dock == DockStyle.Left || this.Dock == DockStyle.Right)  			{  				// create a new rectangle in the vertical center of the splitter for our collapse control button  				rr = new Rectangle(r.X' (int)r.Y + ((r.Height - 115)/2)' 8' 115);  				// force the width to 8px so that everything always draws correctly  				this.Width = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}    				// draw the top & bottom lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y' rr.X + rr.Width - 2' rr.Y);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y + rr.Height' rr.X + rr.Width - 2' rr.Y + rr.Height);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + 3));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + rr.Height - 9));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 3;  				int y = rr.Y + 14;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y + (i*3)' x+1' y + 1 + (i*3));  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x+1' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  						}  						break;    					case VisualStyles.DoubleDots:  						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x - 1' y +(i*3)' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 2' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + 1' y  + (i*3)' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 2' y);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x'y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 2' y' x + 2' y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 90' x + 2' y + 90);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x' y + (i*5)' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1' y + 1 + (i*5)' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x' y +(i*5)' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x' y + (i*5) + 1);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x + 1' y + (i*5));  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*2)' x + 2' y + (i*2));  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Left);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Right);  				}  			}    				#endregion    				// Horizontal Splitter support added in v1.2    				#region Horizontal Splitter    			else if (this.Dock == DockStyle.Top || this.Dock == DockStyle.Bottom)  			{  				// create a new rectangle in the horizontal center of the splitter for our collapse control button  				rr = new Rectangle((int)r.X + ((r.Width - 115)/2)' r.Y' 115' 8);  				// force the height to 8px  				this.Height = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}    				// draw the left & right lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X' rr.Y + 1' rr.X' rr.Y + rr.Height - 2);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + rr.Width' rr.Y + 1' rr.X + rr.Width' rr.Y + rr.Height - 2);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 3' rr.Y + 2));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X +  rr.Width - 9' rr.Y + 2));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 14;  				int y = rr.Y + 3;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x + (i*3)' y' x + 1 + (i*3)' y + 1);  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x + 1 + (i*3)' y + 1' x + 2 + (i*3)' y + 2);  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)'  x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  						}  						break;    					case VisualStyles.DoubleDots:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y - 1' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y + 2' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y + 1' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 88' y);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 2' x + 88' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 88' y' x + 88' y + 2);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x + (i*5)' y' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*5)' y + 1' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x +(i*5)' y' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5) + 1' y);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5)' y + 1);  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*2)' y' x + (i*2)' y + 2);  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Top);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Bottom);  				}  			}    				#endregion    			else  			{  				throw new Exception("The Collapsible Splitter control cannot have the Filled or None Dockstyle property");  			}
Magic Number,OpenCBS.GUI.UserControl,CollapsibleSplitter,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CollapsibleSplitter.cs,OnPaint,The following statement contains a magic number: if(this.Dock == DockStyle.Left || this.Dock == DockStyle.Right)  			{  				// create a new rectangle in the vertical center of the splitter for our collapse control button  				rr = new Rectangle(r.X' (int)r.Y + ((r.Height - 115)/2)' 8' 115);  				// force the width to 8px so that everything always draws correctly  				this.Width = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}    				// draw the top & bottom lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y' rr.X + rr.Width - 2' rr.Y);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y + rr.Height' rr.X + rr.Width - 2' rr.Y + rr.Height);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + 3));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + rr.Height - 9));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 3;  				int y = rr.Y + 14;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y + (i*3)' x+1' y + 1 + (i*3));  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x+1' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  						}  						break;    					case VisualStyles.DoubleDots:  						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x - 1' y +(i*3)' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 2' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + 1' y  + (i*3)' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 2' y);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x'y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 2' y' x + 2' y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 90' x + 2' y + 90);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x' y + (i*5)' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1' y + 1 + (i*5)' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x' y +(i*5)' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x' y + (i*5) + 1);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x + 1' y + (i*5));  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*2)' x + 2' y + (i*2));  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Left);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Right);  				}  			}    				#endregion    				// Horizontal Splitter support added in v1.2    				#region Horizontal Splitter    			else if (this.Dock == DockStyle.Top || this.Dock == DockStyle.Bottom)  			{  				// create a new rectangle in the horizontal center of the splitter for our collapse control button  				rr = new Rectangle((int)r.X + ((r.Width - 115)/2)' r.Y' 115' 8);  				// force the height to 8px  				this.Height = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}    				// draw the left & right lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X' rr.Y + 1' rr.X' rr.Y + rr.Height - 2);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + rr.Width' rr.Y + 1' rr.X + rr.Width' rr.Y + rr.Height - 2);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 3' rr.Y + 2));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X +  rr.Width - 9' rr.Y + 2));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 14;  				int y = rr.Y + 3;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x + (i*3)' y' x + 1 + (i*3)' y + 1);  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x + 1 + (i*3)' y + 1' x + 2 + (i*3)' y + 2);  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)'  x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  						}  						break;    					case VisualStyles.DoubleDots:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y - 1' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y + 2' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y + 1' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 88' y);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 2' x + 88' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 88' y' x + 88' y + 2);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x + (i*5)' y' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*5)' y + 1' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x +(i*5)' y' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5) + 1' y);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5)' y + 1);  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*2)' y' x + (i*2)' y + 2);  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Top);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Bottom);  				}  			}    				#endregion    			else  			{  				throw new Exception("The Collapsible Splitter control cannot have the Filled or None Dockstyle property");  			}
Magic Number,OpenCBS.GUI.UserControl,CollapsibleSplitter,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CollapsibleSplitter.cs,OnPaint,The following statement contains a magic number: if(this.Dock == DockStyle.Left || this.Dock == DockStyle.Right)  			{  				// create a new rectangle in the vertical center of the splitter for our collapse control button  				rr = new Rectangle(r.X' (int)r.Y + ((r.Height - 115)/2)' 8' 115);  				// force the width to 8px so that everything always draws correctly  				this.Width = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}    				// draw the top & bottom lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y' rr.X + rr.Width - 2' rr.Y);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y + rr.Height' rr.X + rr.Width - 2' rr.Y + rr.Height);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + 3));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + rr.Height - 9));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 3;  				int y = rr.Y + 14;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y + (i*3)' x+1' y + 1 + (i*3));  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x+1' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  						}  						break;    					case VisualStyles.DoubleDots:  						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x - 1' y +(i*3)' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 2' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + 1' y  + (i*3)' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 2' y);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x'y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 2' y' x + 2' y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 90' x + 2' y + 90);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x' y + (i*5)' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1' y + 1 + (i*5)' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x' y +(i*5)' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x' y + (i*5) + 1);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x + 1' y + (i*5));  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*2)' x + 2' y + (i*2));  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Left);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Right);  				}  			}    				#endregion    				// Horizontal Splitter support added in v1.2    				#region Horizontal Splitter    			else if (this.Dock == DockStyle.Top || this.Dock == DockStyle.Bottom)  			{  				// create a new rectangle in the horizontal center of the splitter for our collapse control button  				rr = new Rectangle((int)r.X + ((r.Width - 115)/2)' r.Y' 115' 8);  				// force the height to 8px  				this.Height = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}    				// draw the left & right lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X' rr.Y + 1' rr.X' rr.Y + rr.Height - 2);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + rr.Width' rr.Y + 1' rr.X + rr.Width' rr.Y + rr.Height - 2);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 3' rr.Y + 2));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X +  rr.Width - 9' rr.Y + 2));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 14;  				int y = rr.Y + 3;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x + (i*3)' y' x + 1 + (i*3)' y + 1);  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x + 1 + (i*3)' y + 1' x + 2 + (i*3)' y + 2);  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)'  x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  						}  						break;    					case VisualStyles.DoubleDots:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y - 1' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y + 2' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y + 1' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 88' y);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 2' x + 88' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 88' y' x + 88' y + 2);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x + (i*5)' y' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*5)' y + 1' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x +(i*5)' y' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5) + 1' y);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5)' y + 1);  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*2)' y' x + (i*2)' y + 2);  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Top);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Bottom);  				}  			}    				#endregion    			else  			{  				throw new Exception("The Collapsible Splitter control cannot have the Filled or None Dockstyle property");  			}
Magic Number,OpenCBS.GUI.UserControl,CollapsibleSplitter,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CollapsibleSplitter.cs,OnPaint,The following statement contains a magic number: if(this.Dock == DockStyle.Left || this.Dock == DockStyle.Right)  			{  				// create a new rectangle in the vertical center of the splitter for our collapse control button  				rr = new Rectangle(r.X' (int)r.Y + ((r.Height - 115)/2)' 8' 115);  				// force the width to 8px so that everything always draws correctly  				this.Width = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}    				// draw the top & bottom lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y' rr.X + rr.Width - 2' rr.Y);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y + rr.Height' rr.X + rr.Width - 2' rr.Y + rr.Height);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + 3));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + rr.Height - 9));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 3;  				int y = rr.Y + 14;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y + (i*3)' x+1' y + 1 + (i*3));  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x+1' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  						}  						break;    					case VisualStyles.DoubleDots:  						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x - 1' y +(i*3)' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 2' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + 1' y  + (i*3)' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 2' y);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x'y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 2' y' x + 2' y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 90' x + 2' y + 90);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x' y + (i*5)' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1' y + 1 + (i*5)' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x' y +(i*5)' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x' y + (i*5) + 1);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x + 1' y + (i*5));  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*2)' x + 2' y + (i*2));  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Left);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Right);  				}  			}    				#endregion    				// Horizontal Splitter support added in v1.2    				#region Horizontal Splitter    			else if (this.Dock == DockStyle.Top || this.Dock == DockStyle.Bottom)  			{  				// create a new rectangle in the horizontal center of the splitter for our collapse control button  				rr = new Rectangle((int)r.X + ((r.Width - 115)/2)' r.Y' 115' 8);  				// force the height to 8px  				this.Height = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}    				// draw the left & right lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X' rr.Y + 1' rr.X' rr.Y + rr.Height - 2);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + rr.Width' rr.Y + 1' rr.X + rr.Width' rr.Y + rr.Height - 2);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 3' rr.Y + 2));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X +  rr.Width - 9' rr.Y + 2));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 14;  				int y = rr.Y + 3;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x + (i*3)' y' x + 1 + (i*3)' y + 1);  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x + 1 + (i*3)' y + 1' x + 2 + (i*3)' y + 2);  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)'  x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  						}  						break;    					case VisualStyles.DoubleDots:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y - 1' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y + 2' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y + 1' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 88' y);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 2' x + 88' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 88' y' x + 88' y + 2);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x + (i*5)' y' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*5)' y + 1' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x +(i*5)' y' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5) + 1' y);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5)' y + 1);  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*2)' y' x + (i*2)' y + 2);  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Top);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Bottom);  				}  			}    				#endregion    			else  			{  				throw new Exception("The Collapsible Splitter control cannot have the Filled or None Dockstyle property");  			}
Magic Number,OpenCBS.GUI.UserControl,CollapsibleSplitter,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CollapsibleSplitter.cs,OnPaint,The following statement contains a magic number: if(this.Dock == DockStyle.Left || this.Dock == DockStyle.Right)  			{  				// create a new rectangle in the vertical center of the splitter for our collapse control button  				rr = new Rectangle(r.X' (int)r.Y + ((r.Height - 115)/2)' 8' 115);  				// force the width to 8px so that everything always draws correctly  				this.Width = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}    				// draw the top & bottom lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y' rr.X + rr.Width - 2' rr.Y);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y + rr.Height' rr.X + rr.Width - 2' rr.Y + rr.Height);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + 3));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + rr.Height - 9));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 3;  				int y = rr.Y + 14;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y + (i*3)' x+1' y + 1 + (i*3));  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x+1' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  						}  						break;    					case VisualStyles.DoubleDots:  						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x - 1' y +(i*3)' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 2' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + 1' y  + (i*3)' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 2' y);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x'y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 2' y' x + 2' y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 90' x + 2' y + 90);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x' y + (i*5)' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1' y + 1 + (i*5)' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x' y +(i*5)' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x' y + (i*5) + 1);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x + 1' y + (i*5));  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*2)' x + 2' y + (i*2));  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Left);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Right);  				}  			}    				#endregion    				// Horizontal Splitter support added in v1.2    				#region Horizontal Splitter    			else if (this.Dock == DockStyle.Top || this.Dock == DockStyle.Bottom)  			{  				// create a new rectangle in the horizontal center of the splitter for our collapse control button  				rr = new Rectangle((int)r.X + ((r.Width - 115)/2)' r.Y' 115' 8);  				// force the height to 8px  				this.Height = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}    				// draw the left & right lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X' rr.Y + 1' rr.X' rr.Y + rr.Height - 2);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + rr.Width' rr.Y + 1' rr.X + rr.Width' rr.Y + rr.Height - 2);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 3' rr.Y + 2));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X +  rr.Width - 9' rr.Y + 2));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 14;  				int y = rr.Y + 3;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x + (i*3)' y' x + 1 + (i*3)' y + 1);  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x + 1 + (i*3)' y + 1' x + 2 + (i*3)' y + 2);  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)'  x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  						}  						break;    					case VisualStyles.DoubleDots:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y - 1' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y + 2' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y + 1' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 88' y);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 2' x + 88' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 88' y' x + 88' y + 2);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x + (i*5)' y' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*5)' y + 1' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x +(i*5)' y' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5) + 1' y);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5)' y + 1);  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*2)' y' x + (i*2)' y + 2);  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Top);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Bottom);  				}  			}    				#endregion    			else  			{  				throw new Exception("The Collapsible Splitter control cannot have the Filled or None Dockstyle property");  			}
Magic Number,OpenCBS.GUI.UserControl,CollapsibleSplitter,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CollapsibleSplitter.cs,OnPaint,The following statement contains a magic number: if(this.Dock == DockStyle.Left || this.Dock == DockStyle.Right)  			{  				// create a new rectangle in the vertical center of the splitter for our collapse control button  				rr = new Rectangle(r.X' (int)r.Y + ((r.Height - 115)/2)' 8' 115);  				// force the width to 8px so that everything always draws correctly  				this.Width = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}    				// draw the top & bottom lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y' rr.X + rr.Width - 2' rr.Y);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y + rr.Height' rr.X + rr.Width - 2' rr.Y + rr.Height);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + 3));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + rr.Height - 9));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 3;  				int y = rr.Y + 14;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y + (i*3)' x+1' y + 1 + (i*3));  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x+1' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  						}  						break;    					case VisualStyles.DoubleDots:  						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x - 1' y +(i*3)' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 2' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + 1' y  + (i*3)' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 2' y);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x'y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 2' y' x + 2' y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 90' x + 2' y + 90);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x' y + (i*5)' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1' y + 1 + (i*5)' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x' y +(i*5)' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x' y + (i*5) + 1);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x + 1' y + (i*5));  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*2)' x + 2' y + (i*2));  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Left);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Right);  				}  			}    				#endregion    				// Horizontal Splitter support added in v1.2    				#region Horizontal Splitter    			else if (this.Dock == DockStyle.Top || this.Dock == DockStyle.Bottom)  			{  				// create a new rectangle in the horizontal center of the splitter for our collapse control button  				rr = new Rectangle((int)r.X + ((r.Width - 115)/2)' r.Y' 115' 8);  				// force the height to 8px  				this.Height = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}    				// draw the left & right lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X' rr.Y + 1' rr.X' rr.Y + rr.Height - 2);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + rr.Width' rr.Y + 1' rr.X + rr.Width' rr.Y + rr.Height - 2);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 3' rr.Y + 2));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X +  rr.Width - 9' rr.Y + 2));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 14;  				int y = rr.Y + 3;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x + (i*3)' y' x + 1 + (i*3)' y + 1);  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x + 1 + (i*3)' y + 1' x + 2 + (i*3)' y + 2);  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)'  x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  						}  						break;    					case VisualStyles.DoubleDots:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y - 1' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y + 2' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y + 1' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 88' y);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 2' x + 88' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 88' y' x + 88' y + 2);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x + (i*5)' y' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*5)' y + 1' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x +(i*5)' y' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5) + 1' y);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5)' y + 1);  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*2)' y' x + (i*2)' y + 2);  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Top);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Bottom);  				}  			}    				#endregion    			else  			{  				throw new Exception("The Collapsible Splitter control cannot have the Filled or None Dockstyle property");  			}
Magic Number,OpenCBS.GUI.UserControl,CollapsibleSplitter,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CollapsibleSplitter.cs,OnPaint,The following statement contains a magic number: if(this.Dock == DockStyle.Left || this.Dock == DockStyle.Right)  			{  				// create a new rectangle in the vertical center of the splitter for our collapse control button  				rr = new Rectangle(r.X' (int)r.Y + ((r.Height - 115)/2)' 8' 115);  				// force the width to 8px so that everything always draws correctly  				this.Width = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}    				// draw the top & bottom lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y' rr.X + rr.Width - 2' rr.Y);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y + rr.Height' rr.X + rr.Width - 2' rr.Y + rr.Height);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + 3));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + rr.Height - 9));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 3;  				int y = rr.Y + 14;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y + (i*3)' x+1' y + 1 + (i*3));  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x+1' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  						}  						break;    					case VisualStyles.DoubleDots:  						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x - 1' y +(i*3)' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 2' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + 1' y  + (i*3)' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 2' y);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x'y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 2' y' x + 2' y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 90' x + 2' y + 90);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x' y + (i*5)' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1' y + 1 + (i*5)' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x' y +(i*5)' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x' y + (i*5) + 1);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x + 1' y + (i*5));  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*2)' x + 2' y + (i*2));  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Left);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Right);  				}  			}    				#endregion    				// Horizontal Splitter support added in v1.2    				#region Horizontal Splitter    			else if (this.Dock == DockStyle.Top || this.Dock == DockStyle.Bottom)  			{  				// create a new rectangle in the horizontal center of the splitter for our collapse control button  				rr = new Rectangle((int)r.X + ((r.Width - 115)/2)' r.Y' 115' 8);  				// force the height to 8px  				this.Height = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}    				// draw the left & right lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X' rr.Y + 1' rr.X' rr.Y + rr.Height - 2);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + rr.Width' rr.Y + 1' rr.X + rr.Width' rr.Y + rr.Height - 2);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 3' rr.Y + 2));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X +  rr.Width - 9' rr.Y + 2));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 14;  				int y = rr.Y + 3;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x + (i*3)' y' x + 1 + (i*3)' y + 1);  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x + 1 + (i*3)' y + 1' x + 2 + (i*3)' y + 2);  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)'  x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  						}  						break;    					case VisualStyles.DoubleDots:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y - 1' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y + 2' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y + 1' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 88' y);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 2' x + 88' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 88' y' x + 88' y + 2);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x + (i*5)' y' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*5)' y + 1' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x +(i*5)' y' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5) + 1' y);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5)' y + 1);  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*2)' y' x + (i*2)' y + 2);  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Top);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Bottom);  				}  			}    				#endregion    			else  			{  				throw new Exception("The Collapsible Splitter control cannot have the Filled or None Dockstyle property");  			}
Magic Number,OpenCBS.GUI.UserControl,CollapsibleSplitter,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CollapsibleSplitter.cs,OnPaint,The following statement contains a magic number: if(this.Dock == DockStyle.Left || this.Dock == DockStyle.Right)  			{  				// create a new rectangle in the vertical center of the splitter for our collapse control button  				rr = new Rectangle(r.X' (int)r.Y + ((r.Height - 115)/2)' 8' 115);  				// force the width to 8px so that everything always draws correctly  				this.Width = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}    				// draw the top & bottom lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y' rr.X + rr.Width - 2' rr.Y);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y + rr.Height' rr.X + rr.Width - 2' rr.Y + rr.Height);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + 3));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + rr.Height - 9));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 3;  				int y = rr.Y + 14;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y + (i*3)' x+1' y + 1 + (i*3));  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x+1' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  						}  						break;    					case VisualStyles.DoubleDots:  						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x - 1' y +(i*3)' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 2' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + 1' y  + (i*3)' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 2' y);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x'y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 2' y' x + 2' y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 90' x + 2' y + 90);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x' y + (i*5)' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1' y + 1 + (i*5)' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x' y +(i*5)' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x' y + (i*5) + 1);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x + 1' y + (i*5));  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*2)' x + 2' y + (i*2));  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Left);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Right);  				}  			}    				#endregion    				// Horizontal Splitter support added in v1.2    				#region Horizontal Splitter    			else if (this.Dock == DockStyle.Top || this.Dock == DockStyle.Bottom)  			{  				// create a new rectangle in the horizontal center of the splitter for our collapse control button  				rr = new Rectangle((int)r.X + ((r.Width - 115)/2)' r.Y' 115' 8);  				// force the height to 8px  				this.Height = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}    				// draw the left & right lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X' rr.Y + 1' rr.X' rr.Y + rr.Height - 2);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + rr.Width' rr.Y + 1' rr.X + rr.Width' rr.Y + rr.Height - 2);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 3' rr.Y + 2));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X +  rr.Width - 9' rr.Y + 2));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 14;  				int y = rr.Y + 3;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x + (i*3)' y' x + 1 + (i*3)' y + 1);  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x + 1 + (i*3)' y + 1' x + 2 + (i*3)' y + 2);  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)'  x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  						}  						break;    					case VisualStyles.DoubleDots:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y - 1' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y + 2' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y + 1' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 88' y);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 2' x + 88' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 88' y' x + 88' y + 2);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x + (i*5)' y' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*5)' y + 1' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x +(i*5)' y' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5) + 1' y);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5)' y + 1);  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*2)' y' x + (i*2)' y + 2);  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Top);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Bottom);  				}  			}    				#endregion    			else  			{  				throw new Exception("The Collapsible Splitter control cannot have the Filled or None Dockstyle property");  			}
Magic Number,OpenCBS.GUI.UserControl,CollapsibleSplitter,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CollapsibleSplitter.cs,OnPaint,The following statement contains a magic number: if(this.Dock == DockStyle.Left || this.Dock == DockStyle.Right)  			{  				// create a new rectangle in the vertical center of the splitter for our collapse control button  				rr = new Rectangle(r.X' (int)r.Y + ((r.Height - 115)/2)' 8' 115);  				// force the width to 8px so that everything always draws correctly  				this.Width = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}    				// draw the top & bottom lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y' rr.X + rr.Width - 2' rr.Y);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y + rr.Height' rr.X + rr.Width - 2' rr.Y + rr.Height);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + 3));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + rr.Height - 9));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 3;  				int y = rr.Y + 14;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y + (i*3)' x+1' y + 1 + (i*3));  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x+1' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  						}  						break;    					case VisualStyles.DoubleDots:  						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x - 1' y +(i*3)' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 2' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + 1' y  + (i*3)' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 2' y);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x'y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 2' y' x + 2' y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 90' x + 2' y + 90);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x' y + (i*5)' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1' y + 1 + (i*5)' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x' y +(i*5)' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x' y + (i*5) + 1);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x + 1' y + (i*5));  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*2)' x + 2' y + (i*2));  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Left);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Right);  				}  			}    				#endregion    				// Horizontal Splitter support added in v1.2    				#region Horizontal Splitter    			else if (this.Dock == DockStyle.Top || this.Dock == DockStyle.Bottom)  			{  				// create a new rectangle in the horizontal center of the splitter for our collapse control button  				rr = new Rectangle((int)r.X + ((r.Width - 115)/2)' r.Y' 115' 8);  				// force the height to 8px  				this.Height = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}    				// draw the left & right lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X' rr.Y + 1' rr.X' rr.Y + rr.Height - 2);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + rr.Width' rr.Y + 1' rr.X + rr.Width' rr.Y + rr.Height - 2);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 3' rr.Y + 2));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X +  rr.Width - 9' rr.Y + 2));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 14;  				int y = rr.Y + 3;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x + (i*3)' y' x + 1 + (i*3)' y + 1);  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x + 1 + (i*3)' y + 1' x + 2 + (i*3)' y + 2);  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)'  x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  						}  						break;    					case VisualStyles.DoubleDots:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y - 1' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y + 2' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y + 1' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 88' y);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 2' x + 88' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 88' y' x + 88' y + 2);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x + (i*5)' y' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*5)' y + 1' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x +(i*5)' y' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5) + 1' y);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5)' y + 1);  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*2)' y' x + (i*2)' y + 2);  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Top);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Bottom);  				}  			}    				#endregion    			else  			{  				throw new Exception("The Collapsible Splitter control cannot have the Filled or None Dockstyle property");  			}
Magic Number,OpenCBS.GUI.UserControl,CollapsibleSplitter,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CollapsibleSplitter.cs,OnPaint,The following statement contains a magic number: if(this.Dock == DockStyle.Left || this.Dock == DockStyle.Right)  			{  				// create a new rectangle in the vertical center of the splitter for our collapse control button  				rr = new Rectangle(r.X' (int)r.Y + ((r.Height - 115)/2)' 8' 115);  				// force the width to 8px so that everything always draws correctly  				this.Width = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}    				// draw the top & bottom lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y' rr.X + rr.Width - 2' rr.Y);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y + rr.Height' rr.X + rr.Width - 2' rr.Y + rr.Height);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + 3));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + rr.Height - 9));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 3;  				int y = rr.Y + 14;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y + (i*3)' x+1' y + 1 + (i*3));  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x+1' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  						}  						break;    					case VisualStyles.DoubleDots:  						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x - 1' y +(i*3)' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 2' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + 1' y  + (i*3)' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 2' y);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x'y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 2' y' x + 2' y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 90' x + 2' y + 90);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x' y + (i*5)' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1' y + 1 + (i*5)' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x' y +(i*5)' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x' y + (i*5) + 1);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x + 1' y + (i*5));  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*2)' x + 2' y + (i*2));  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Left);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Right);  				}  			}    				#endregion    				// Horizontal Splitter support added in v1.2    				#region Horizontal Splitter    			else if (this.Dock == DockStyle.Top || this.Dock == DockStyle.Bottom)  			{  				// create a new rectangle in the horizontal center of the splitter for our collapse control button  				rr = new Rectangle((int)r.X + ((r.Width - 115)/2)' r.Y' 115' 8);  				// force the height to 8px  				this.Height = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}    				// draw the left & right lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X' rr.Y + 1' rr.X' rr.Y + rr.Height - 2);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + rr.Width' rr.Y + 1' rr.X + rr.Width' rr.Y + rr.Height - 2);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 3' rr.Y + 2));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X +  rr.Width - 9' rr.Y + 2));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 14;  				int y = rr.Y + 3;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x + (i*3)' y' x + 1 + (i*3)' y + 1);  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x + 1 + (i*3)' y + 1' x + 2 + (i*3)' y + 2);  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)'  x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  						}  						break;    					case VisualStyles.DoubleDots:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y - 1' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y + 2' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y + 1' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 88' y);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 2' x + 88' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 88' y' x + 88' y + 2);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x + (i*5)' y' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*5)' y + 1' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x +(i*5)' y' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5) + 1' y);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5)' y + 1);  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*2)' y' x + (i*2)' y + 2);  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Top);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Bottom);  				}  			}    				#endregion    			else  			{  				throw new Exception("The Collapsible Splitter control cannot have the Filled or None Dockstyle property");  			}
Magic Number,OpenCBS.GUI.UserControl,CollapsibleSplitter,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CollapsibleSplitter.cs,OnPaint,The following statement contains a magic number: if(this.Dock == DockStyle.Left || this.Dock == DockStyle.Right)  			{  				// create a new rectangle in the vertical center of the splitter for our collapse control button  				rr = new Rectangle(r.X' (int)r.Y + ((r.Height - 115)/2)' 8' 115);  				// force the width to 8px so that everything always draws correctly  				this.Width = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}    				// draw the top & bottom lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y' rr.X + rr.Width - 2' rr.Y);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y + rr.Height' rr.X + rr.Width - 2' rr.Y + rr.Height);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + 3));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + rr.Height - 9));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 3;  				int y = rr.Y + 14;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y + (i*3)' x+1' y + 1 + (i*3));  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x+1' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  						}  						break;    					case VisualStyles.DoubleDots:  						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x - 1' y +(i*3)' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 2' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + 1' y  + (i*3)' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 2' y);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x'y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 2' y' x + 2' y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 90' x + 2' y + 90);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x' y + (i*5)' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1' y + 1 + (i*5)' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x' y +(i*5)' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x' y + (i*5) + 1);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x + 1' y + (i*5));  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*2)' x + 2' y + (i*2));  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Left);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Right);  				}  			}    				#endregion    				// Horizontal Splitter support added in v1.2    				#region Horizontal Splitter    			else if (this.Dock == DockStyle.Top || this.Dock == DockStyle.Bottom)  			{  				// create a new rectangle in the horizontal center of the splitter for our collapse control button  				rr = new Rectangle((int)r.X + ((r.Width - 115)/2)' r.Y' 115' 8);  				// force the height to 8px  				this.Height = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}    				// draw the left & right lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X' rr.Y + 1' rr.X' rr.Y + rr.Height - 2);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + rr.Width' rr.Y + 1' rr.X + rr.Width' rr.Y + rr.Height - 2);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 3' rr.Y + 2));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X +  rr.Width - 9' rr.Y + 2));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 14;  				int y = rr.Y + 3;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x + (i*3)' y' x + 1 + (i*3)' y + 1);  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x + 1 + (i*3)' y + 1' x + 2 + (i*3)' y + 2);  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)'  x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  						}  						break;    					case VisualStyles.DoubleDots:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y - 1' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y + 2' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y + 1' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 88' y);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 2' x + 88' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 88' y' x + 88' y + 2);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x + (i*5)' y' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*5)' y + 1' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x +(i*5)' y' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5) + 1' y);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5)' y + 1);  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*2)' y' x + (i*2)' y + 2);  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Top);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Bottom);  				}  			}    				#endregion    			else  			{  				throw new Exception("The Collapsible Splitter control cannot have the Filled or None Dockstyle property");  			}
Magic Number,OpenCBS.GUI.UserControl,CollapsibleSplitter,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CollapsibleSplitter.cs,OnPaint,The following statement contains a magic number: if(this.Dock == DockStyle.Left || this.Dock == DockStyle.Right)  			{  				// create a new rectangle in the vertical center of the splitter for our collapse control button  				rr = new Rectangle(r.X' (int)r.Y + ((r.Height - 115)/2)' 8' 115);  				// force the width to 8px so that everything always draws correctly  				this.Width = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}    				// draw the top & bottom lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y' rr.X + rr.Width - 2' rr.Y);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y + rr.Height' rr.X + rr.Width - 2' rr.Y + rr.Height);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + 3));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + rr.Height - 9));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 3;  				int y = rr.Y + 14;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y + (i*3)' x+1' y + 1 + (i*3));  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x+1' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  						}  						break;    					case VisualStyles.DoubleDots:  						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x - 1' y +(i*3)' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 2' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + 1' y  + (i*3)' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 2' y);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x'y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 2' y' x + 2' y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 90' x + 2' y + 90);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x' y + (i*5)' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1' y + 1 + (i*5)' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x' y +(i*5)' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x' y + (i*5) + 1);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x + 1' y + (i*5));  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*2)' x + 2' y + (i*2));  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Left);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Right);  				}  			}    				#endregion    				// Horizontal Splitter support added in v1.2    				#region Horizontal Splitter    			else if (this.Dock == DockStyle.Top || this.Dock == DockStyle.Bottom)  			{  				// create a new rectangle in the horizontal center of the splitter for our collapse control button  				rr = new Rectangle((int)r.X + ((r.Width - 115)/2)' r.Y' 115' 8);  				// force the height to 8px  				this.Height = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}    				// draw the left & right lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X' rr.Y + 1' rr.X' rr.Y + rr.Height - 2);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + rr.Width' rr.Y + 1' rr.X + rr.Width' rr.Y + rr.Height - 2);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 3' rr.Y + 2));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X +  rr.Width - 9' rr.Y + 2));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 14;  				int y = rr.Y + 3;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x + (i*3)' y' x + 1 + (i*3)' y + 1);  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x + 1 + (i*3)' y + 1' x + 2 + (i*3)' y + 2);  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)'  x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  						}  						break;    					case VisualStyles.DoubleDots:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y - 1' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y + 2' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y + 1' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 88' y);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 2' x + 88' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 88' y' x + 88' y + 2);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x + (i*5)' y' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*5)' y + 1' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x +(i*5)' y' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5) + 1' y);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5)' y + 1);  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*2)' y' x + (i*2)' y + 2);  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Top);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Bottom);  				}  			}    				#endregion    			else  			{  				throw new Exception("The Collapsible Splitter control cannot have the Filled or None Dockstyle property");  			}
Magic Number,OpenCBS.GUI.UserControl,CollapsibleSplitter,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CollapsibleSplitter.cs,OnPaint,The following statement contains a magic number: if(this.Dock == DockStyle.Left || this.Dock == DockStyle.Right)  			{  				// create a new rectangle in the vertical center of the splitter for our collapse control button  				rr = new Rectangle(r.X' (int)r.Y + ((r.Height - 115)/2)' 8' 115);  				// force the width to 8px so that everything always draws correctly  				this.Width = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}    				// draw the top & bottom lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y' rr.X + rr.Width - 2' rr.Y);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y + rr.Height' rr.X + rr.Width - 2' rr.Y + rr.Height);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + 3));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + rr.Height - 9));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 3;  				int y = rr.Y + 14;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y + (i*3)' x+1' y + 1 + (i*3));  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x+1' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  						}  						break;    					case VisualStyles.DoubleDots:  						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x - 1' y +(i*3)' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 2' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + 1' y  + (i*3)' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 2' y);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x'y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 2' y' x + 2' y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 90' x + 2' y + 90);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x' y + (i*5)' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1' y + 1 + (i*5)' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x' y +(i*5)' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x' y + (i*5) + 1);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x + 1' y + (i*5));  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*2)' x + 2' y + (i*2));  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Left);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Right);  				}  			}    				#endregion    				// Horizontal Splitter support added in v1.2    				#region Horizontal Splitter    			else if (this.Dock == DockStyle.Top || this.Dock == DockStyle.Bottom)  			{  				// create a new rectangle in the horizontal center of the splitter for our collapse control button  				rr = new Rectangle((int)r.X + ((r.Width - 115)/2)' r.Y' 115' 8);  				// force the height to 8px  				this.Height = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}    				// draw the left & right lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X' rr.Y + 1' rr.X' rr.Y + rr.Height - 2);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + rr.Width' rr.Y + 1' rr.X + rr.Width' rr.Y + rr.Height - 2);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 3' rr.Y + 2));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X +  rr.Width - 9' rr.Y + 2));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 14;  				int y = rr.Y + 3;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x + (i*3)' y' x + 1 + (i*3)' y + 1);  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x + 1 + (i*3)' y + 1' x + 2 + (i*3)' y + 2);  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)'  x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  						}  						break;    					case VisualStyles.DoubleDots:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y - 1' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y + 2' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y + 1' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 88' y);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 2' x + 88' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 88' y' x + 88' y + 2);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x + (i*5)' y' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*5)' y + 1' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x +(i*5)' y' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5) + 1' y);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5)' y + 1);  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*2)' y' x + (i*2)' y + 2);  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Top);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Bottom);  				}  			}    				#endregion    			else  			{  				throw new Exception("The Collapsible Splitter control cannot have the Filled or None Dockstyle property");  			}
Magic Number,OpenCBS.GUI.UserControl,CollapsibleSplitter,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CollapsibleSplitter.cs,OnPaint,The following statement contains a magic number: if(this.Dock == DockStyle.Left || this.Dock == DockStyle.Right)  			{  				// create a new rectangle in the vertical center of the splitter for our collapse control button  				rr = new Rectangle(r.X' (int)r.Y + ((r.Height - 115)/2)' 8' 115);  				// force the width to 8px so that everything always draws correctly  				this.Width = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}    				// draw the top & bottom lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y' rr.X + rr.Width - 2' rr.Y);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y + rr.Height' rr.X + rr.Width - 2' rr.Y + rr.Height);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + 3));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + rr.Height - 9));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 3;  				int y = rr.Y + 14;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y + (i*3)' x+1' y + 1 + (i*3));  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x+1' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  						}  						break;    					case VisualStyles.DoubleDots:  						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x - 1' y +(i*3)' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 2' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + 1' y  + (i*3)' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 2' y);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x'y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 2' y' x + 2' y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 90' x + 2' y + 90);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x' y + (i*5)' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1' y + 1 + (i*5)' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x' y +(i*5)' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x' y + (i*5) + 1);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x + 1' y + (i*5));  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*2)' x + 2' y + (i*2));  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Left);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Right);  				}  			}    				#endregion    				// Horizontal Splitter support added in v1.2    				#region Horizontal Splitter    			else if (this.Dock == DockStyle.Top || this.Dock == DockStyle.Bottom)  			{  				// create a new rectangle in the horizontal center of the splitter for our collapse control button  				rr = new Rectangle((int)r.X + ((r.Width - 115)/2)' r.Y' 115' 8);  				// force the height to 8px  				this.Height = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}    				// draw the left & right lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X' rr.Y + 1' rr.X' rr.Y + rr.Height - 2);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + rr.Width' rr.Y + 1' rr.X + rr.Width' rr.Y + rr.Height - 2);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 3' rr.Y + 2));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X +  rr.Width - 9' rr.Y + 2));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 14;  				int y = rr.Y + 3;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x + (i*3)' y' x + 1 + (i*3)' y + 1);  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x + 1 + (i*3)' y + 1' x + 2 + (i*3)' y + 2);  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)'  x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  						}  						break;    					case VisualStyles.DoubleDots:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y - 1' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y + 2' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y + 1' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 88' y);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 2' x + 88' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 88' y' x + 88' y + 2);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x + (i*5)' y' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*5)' y + 1' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x +(i*5)' y' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5) + 1' y);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5)' y + 1);  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*2)' y' x + (i*2)' y + 2);  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Top);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Bottom);  				}  			}    				#endregion    			else  			{  				throw new Exception("The Collapsible Splitter control cannot have the Filled or None Dockstyle property");  			}
Magic Number,OpenCBS.GUI.UserControl,CollapsibleSplitter,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CollapsibleSplitter.cs,OnPaint,The following statement contains a magic number: if(this.Dock == DockStyle.Left || this.Dock == DockStyle.Right)  			{  				// create a new rectangle in the vertical center of the splitter for our collapse control button  				rr = new Rectangle(r.X' (int)r.Y + ((r.Height - 115)/2)' 8' 115);  				// force the width to 8px so that everything always draws correctly  				this.Width = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}    				// draw the top & bottom lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y' rr.X + rr.Width - 2' rr.Y);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y + rr.Height' rr.X + rr.Width - 2' rr.Y + rr.Height);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + 3));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + rr.Height - 9));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 3;  				int y = rr.Y + 14;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y + (i*3)' x+1' y + 1 + (i*3));  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x+1' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  						}  						break;    					case VisualStyles.DoubleDots:  						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x - 1' y +(i*3)' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 2' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + 1' y  + (i*3)' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 2' y);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x'y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 2' y' x + 2' y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 90' x + 2' y + 90);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x' y + (i*5)' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1' y + 1 + (i*5)' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x' y +(i*5)' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x' y + (i*5) + 1);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x + 1' y + (i*5));  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*2)' x + 2' y + (i*2));  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Left);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Right);  				}  			}    				#endregion    				// Horizontal Splitter support added in v1.2    				#region Horizontal Splitter    			else if (this.Dock == DockStyle.Top || this.Dock == DockStyle.Bottom)  			{  				// create a new rectangle in the horizontal center of the splitter for our collapse control button  				rr = new Rectangle((int)r.X + ((r.Width - 115)/2)' r.Y' 115' 8);  				// force the height to 8px  				this.Height = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}    				// draw the left & right lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X' rr.Y + 1' rr.X' rr.Y + rr.Height - 2);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + rr.Width' rr.Y + 1' rr.X + rr.Width' rr.Y + rr.Height - 2);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 3' rr.Y + 2));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X +  rr.Width - 9' rr.Y + 2));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 14;  				int y = rr.Y + 3;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x + (i*3)' y' x + 1 + (i*3)' y + 1);  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x + 1 + (i*3)' y + 1' x + 2 + (i*3)' y + 2);  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)'  x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  						}  						break;    					case VisualStyles.DoubleDots:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y - 1' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y + 2' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y + 1' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 88' y);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 2' x + 88' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 88' y' x + 88' y + 2);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x + (i*5)' y' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*5)' y + 1' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x +(i*5)' y' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5) + 1' y);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5)' y + 1);  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*2)' y' x + (i*2)' y + 2);  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Top);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Bottom);  				}  			}    				#endregion    			else  			{  				throw new Exception("The Collapsible Splitter control cannot have the Filled or None Dockstyle property");  			}
Magic Number,OpenCBS.GUI.UserControl,CollapsibleSplitter,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CollapsibleSplitter.cs,OnPaint,The following statement contains a magic number: if(this.Dock == DockStyle.Left || this.Dock == DockStyle.Right)  			{  				// create a new rectangle in the vertical center of the splitter for our collapse control button  				rr = new Rectangle(r.X' (int)r.Y + ((r.Height - 115)/2)' 8' 115);  				// force the width to 8px so that everything always draws correctly  				this.Width = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}    				// draw the top & bottom lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y' rr.X + rr.Width - 2' rr.Y);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y + rr.Height' rr.X + rr.Width - 2' rr.Y + rr.Height);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + 3));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + rr.Height - 9));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 3;  				int y = rr.Y + 14;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y + (i*3)' x+1' y + 1 + (i*3));  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x+1' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  						}  						break;    					case VisualStyles.DoubleDots:  						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x - 1' y +(i*3)' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 2' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + 1' y  + (i*3)' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 2' y);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x'y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 2' y' x + 2' y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 90' x + 2' y + 90);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x' y + (i*5)' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1' y + 1 + (i*5)' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x' y +(i*5)' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x' y + (i*5) + 1);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x + 1' y + (i*5));  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*2)' x + 2' y + (i*2));  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Left);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Right);  				}  			}    				#endregion    				// Horizontal Splitter support added in v1.2    				#region Horizontal Splitter    			else if (this.Dock == DockStyle.Top || this.Dock == DockStyle.Bottom)  			{  				// create a new rectangle in the horizontal center of the splitter for our collapse control button  				rr = new Rectangle((int)r.X + ((r.Width - 115)/2)' r.Y' 115' 8);  				// force the height to 8px  				this.Height = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}    				// draw the left & right lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X' rr.Y + 1' rr.X' rr.Y + rr.Height - 2);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + rr.Width' rr.Y + 1' rr.X + rr.Width' rr.Y + rr.Height - 2);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 3' rr.Y + 2));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X +  rr.Width - 9' rr.Y + 2));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 14;  				int y = rr.Y + 3;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x + (i*3)' y' x + 1 + (i*3)' y + 1);  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x + 1 + (i*3)' y + 1' x + 2 + (i*3)' y + 2);  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)'  x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  						}  						break;    					case VisualStyles.DoubleDots:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y - 1' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y + 2' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y + 1' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 88' y);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 2' x + 88' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 88' y' x + 88' y + 2);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x + (i*5)' y' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*5)' y + 1' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x +(i*5)' y' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5) + 1' y);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5)' y + 1);  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*2)' y' x + (i*2)' y + 2);  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Top);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Bottom);  				}  			}    				#endregion    			else  			{  				throw new Exception("The Collapsible Splitter control cannot have the Filled or None Dockstyle property");  			}
Magic Number,OpenCBS.GUI.UserControl,CollapsibleSplitter,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CollapsibleSplitter.cs,OnPaint,The following statement contains a magic number: if(this.Dock == DockStyle.Left || this.Dock == DockStyle.Right)  			{  				// create a new rectangle in the vertical center of the splitter for our collapse control button  				rr = new Rectangle(r.X' (int)r.Y + ((r.Height - 115)/2)' 8' 115);  				// force the width to 8px so that everything always draws correctly  				this.Width = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}    				// draw the top & bottom lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y' rr.X + rr.Width - 2' rr.Y);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y + rr.Height' rr.X + rr.Width - 2' rr.Y + rr.Height);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + 3));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + rr.Height - 9));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 3;  				int y = rr.Y + 14;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y + (i*3)' x+1' y + 1 + (i*3));  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x+1' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  						}  						break;    					case VisualStyles.DoubleDots:  						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x - 1' y +(i*3)' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 2' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + 1' y  + (i*3)' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 2' y);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x'y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 2' y' x + 2' y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 90' x + 2' y + 90);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x' y + (i*5)' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1' y + 1 + (i*5)' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x' y +(i*5)' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x' y + (i*5) + 1);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x + 1' y + (i*5));  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*2)' x + 2' y + (i*2));  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Left);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Right);  				}  			}    				#endregion    				// Horizontal Splitter support added in v1.2    				#region Horizontal Splitter    			else if (this.Dock == DockStyle.Top || this.Dock == DockStyle.Bottom)  			{  				// create a new rectangle in the horizontal center of the splitter for our collapse control button  				rr = new Rectangle((int)r.X + ((r.Width - 115)/2)' r.Y' 115' 8);  				// force the height to 8px  				this.Height = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}    				// draw the left & right lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X' rr.Y + 1' rr.X' rr.Y + rr.Height - 2);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + rr.Width' rr.Y + 1' rr.X + rr.Width' rr.Y + rr.Height - 2);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 3' rr.Y + 2));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X +  rr.Width - 9' rr.Y + 2));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 14;  				int y = rr.Y + 3;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x + (i*3)' y' x + 1 + (i*3)' y + 1);  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x + 1 + (i*3)' y + 1' x + 2 + (i*3)' y + 2);  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)'  x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  						}  						break;    					case VisualStyles.DoubleDots:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y - 1' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y + 2' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y + 1' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 88' y);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 2' x + 88' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 88' y' x + 88' y + 2);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x + (i*5)' y' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*5)' y + 1' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x +(i*5)' y' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5) + 1' y);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5)' y + 1);  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*2)' y' x + (i*2)' y + 2);  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Top);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Bottom);  				}  			}    				#endregion    			else  			{  				throw new Exception("The Collapsible Splitter control cannot have the Filled or None Dockstyle property");  			}
Magic Number,OpenCBS.GUI.UserControl,CollapsibleSplitter,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CollapsibleSplitter.cs,OnPaint,The following statement contains a magic number: if(this.Dock == DockStyle.Left || this.Dock == DockStyle.Right)  			{  				// create a new rectangle in the vertical center of the splitter for our collapse control button  				rr = new Rectangle(r.X' (int)r.Y + ((r.Height - 115)/2)' 8' 115);  				// force the width to 8px so that everything always draws correctly  				this.Width = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}    				// draw the top & bottom lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y' rr.X + rr.Width - 2' rr.Y);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y + rr.Height' rr.X + rr.Width - 2' rr.Y + rr.Height);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + 3));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + rr.Height - 9));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 3;  				int y = rr.Y + 14;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y + (i*3)' x+1' y + 1 + (i*3));  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x+1' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  						}  						break;    					case VisualStyles.DoubleDots:  						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x - 1' y +(i*3)' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 2' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + 1' y  + (i*3)' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 2' y);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x'y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 2' y' x + 2' y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 90' x + 2' y + 90);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x' y + (i*5)' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1' y + 1 + (i*5)' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x' y +(i*5)' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x' y + (i*5) + 1);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x + 1' y + (i*5));  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*2)' x + 2' y + (i*2));  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Left);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Right);  				}  			}    				#endregion    				// Horizontal Splitter support added in v1.2    				#region Horizontal Splitter    			else if (this.Dock == DockStyle.Top || this.Dock == DockStyle.Bottom)  			{  				// create a new rectangle in the horizontal center of the splitter for our collapse control button  				rr = new Rectangle((int)r.X + ((r.Width - 115)/2)' r.Y' 115' 8);  				// force the height to 8px  				this.Height = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}    				// draw the left & right lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X' rr.Y + 1' rr.X' rr.Y + rr.Height - 2);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + rr.Width' rr.Y + 1' rr.X + rr.Width' rr.Y + rr.Height - 2);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 3' rr.Y + 2));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X +  rr.Width - 9' rr.Y + 2));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 14;  				int y = rr.Y + 3;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x + (i*3)' y' x + 1 + (i*3)' y + 1);  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x + 1 + (i*3)' y + 1' x + 2 + (i*3)' y + 2);  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)'  x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  						}  						break;    					case VisualStyles.DoubleDots:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y - 1' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y + 2' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y + 1' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 88' y);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 2' x + 88' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 88' y' x + 88' y + 2);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x + (i*5)' y' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*5)' y + 1' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x +(i*5)' y' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5) + 1' y);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5)' y + 1);  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*2)' y' x + (i*2)' y + 2);  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Top);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Bottom);  				}  			}    				#endregion    			else  			{  				throw new Exception("The Collapsible Splitter control cannot have the Filled or None Dockstyle property");  			}
Magic Number,OpenCBS.GUI.UserControl,CollapsibleSplitter,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CollapsibleSplitter.cs,OnPaint,The following statement contains a magic number: if(this.Dock == DockStyle.Left || this.Dock == DockStyle.Right)  			{  				// create a new rectangle in the vertical center of the splitter for our collapse control button  				rr = new Rectangle(r.X' (int)r.Y + ((r.Height - 115)/2)' 8' 115);  				// force the width to 8px so that everything always draws correctly  				this.Width = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}    				// draw the top & bottom lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y' rr.X + rr.Width - 2' rr.Y);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y + rr.Height' rr.X + rr.Width - 2' rr.Y + rr.Height);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + 3));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + rr.Height - 9));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 3;  				int y = rr.Y + 14;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y + (i*3)' x+1' y + 1 + (i*3));  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x+1' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  						}  						break;    					case VisualStyles.DoubleDots:  						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x - 1' y +(i*3)' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 2' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + 1' y  + (i*3)' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 2' y);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x'y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 2' y' x + 2' y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 90' x + 2' y + 90);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x' y + (i*5)' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1' y + 1 + (i*5)' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x' y +(i*5)' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x' y + (i*5) + 1);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x + 1' y + (i*5));  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*2)' x + 2' y + (i*2));  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Left);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Right);  				}  			}    				#endregion    				// Horizontal Splitter support added in v1.2    				#region Horizontal Splitter    			else if (this.Dock == DockStyle.Top || this.Dock == DockStyle.Bottom)  			{  				// create a new rectangle in the horizontal center of the splitter for our collapse control button  				rr = new Rectangle((int)r.X + ((r.Width - 115)/2)' r.Y' 115' 8);  				// force the height to 8px  				this.Height = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}    				// draw the left & right lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X' rr.Y + 1' rr.X' rr.Y + rr.Height - 2);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + rr.Width' rr.Y + 1' rr.X + rr.Width' rr.Y + rr.Height - 2);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 3' rr.Y + 2));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X +  rr.Width - 9' rr.Y + 2));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 14;  				int y = rr.Y + 3;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x + (i*3)' y' x + 1 + (i*3)' y + 1);  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x + 1 + (i*3)' y + 1' x + 2 + (i*3)' y + 2);  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)'  x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  						}  						break;    					case VisualStyles.DoubleDots:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y - 1' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y + 2' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y + 1' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 88' y);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 2' x + 88' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 88' y' x + 88' y + 2);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x + (i*5)' y' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*5)' y + 1' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x +(i*5)' y' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5) + 1' y);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5)' y + 1);  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*2)' y' x + (i*2)' y + 2);  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Top);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Bottom);  				}  			}    				#endregion    			else  			{  				throw new Exception("The Collapsible Splitter control cannot have the Filled or None Dockstyle property");  			}
Magic Number,OpenCBS.GUI.UserControl,CollapsibleSplitter,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CollapsibleSplitter.cs,OnPaint,The following statement contains a magic number: if(this.Dock == DockStyle.Left || this.Dock == DockStyle.Right)  			{  				// create a new rectangle in the vertical center of the splitter for our collapse control button  				rr = new Rectangle(r.X' (int)r.Y + ((r.Height - 115)/2)' 8' 115);  				// force the width to 8px so that everything always draws correctly  				this.Width = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}    				// draw the top & bottom lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y' rr.X + rr.Width - 2' rr.Y);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y + rr.Height' rr.X + rr.Width - 2' rr.Y + rr.Height);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + 3));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + rr.Height - 9));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 3;  				int y = rr.Y + 14;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y + (i*3)' x+1' y + 1 + (i*3));  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x+1' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  						}  						break;    					case VisualStyles.DoubleDots:  						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x - 1' y +(i*3)' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 2' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + 1' y  + (i*3)' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 2' y);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x'y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 2' y' x + 2' y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 90' x + 2' y + 90);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x' y + (i*5)' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1' y + 1 + (i*5)' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x' y +(i*5)' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x' y + (i*5) + 1);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x + 1' y + (i*5));  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*2)' x + 2' y + (i*2));  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Left);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Right);  				}  			}    				#endregion    				// Horizontal Splitter support added in v1.2    				#region Horizontal Splitter    			else if (this.Dock == DockStyle.Top || this.Dock == DockStyle.Bottom)  			{  				// create a new rectangle in the horizontal center of the splitter for our collapse control button  				rr = new Rectangle((int)r.X + ((r.Width - 115)/2)' r.Y' 115' 8);  				// force the height to 8px  				this.Height = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}    				// draw the left & right lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X' rr.Y + 1' rr.X' rr.Y + rr.Height - 2);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + rr.Width' rr.Y + 1' rr.X + rr.Width' rr.Y + rr.Height - 2);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 3' rr.Y + 2));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X +  rr.Width - 9' rr.Y + 2));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 14;  				int y = rr.Y + 3;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x + (i*3)' y' x + 1 + (i*3)' y + 1);  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x + 1 + (i*3)' y + 1' x + 2 + (i*3)' y + 2);  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)'  x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  						}  						break;    					case VisualStyles.DoubleDots:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y - 1' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y + 2' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y + 1' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 88' y);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 2' x + 88' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 88' y' x + 88' y + 2);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x + (i*5)' y' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*5)' y + 1' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x +(i*5)' y' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5) + 1' y);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5)' y + 1);  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*2)' y' x + (i*2)' y + 2);  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Top);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Bottom);  				}  			}    				#endregion    			else  			{  				throw new Exception("The Collapsible Splitter control cannot have the Filled or None Dockstyle property");  			}
Magic Number,OpenCBS.GUI.UserControl,CollapsibleSplitter,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CollapsibleSplitter.cs,OnPaint,The following statement contains a magic number: if(this.Dock == DockStyle.Left || this.Dock == DockStyle.Right)  			{  				// create a new rectangle in the vertical center of the splitter for our collapse control button  				rr = new Rectangle(r.X' (int)r.Y + ((r.Height - 115)/2)' 8' 115);  				// force the width to 8px so that everything always draws correctly  				this.Width = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}    				// draw the top & bottom lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y' rr.X + rr.Width - 2' rr.Y);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y + rr.Height' rr.X + rr.Width - 2' rr.Y + rr.Height);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + 3));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + rr.Height - 9));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 3;  				int y = rr.Y + 14;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y + (i*3)' x+1' y + 1 + (i*3));  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x+1' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  						}  						break;    					case VisualStyles.DoubleDots:  						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x - 1' y +(i*3)' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 2' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + 1' y  + (i*3)' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 2' y);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x'y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 2' y' x + 2' y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 90' x + 2' y + 90);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x' y + (i*5)' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1' y + 1 + (i*5)' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x' y +(i*5)' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x' y + (i*5) + 1);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x + 1' y + (i*5));  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*2)' x + 2' y + (i*2));  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Left);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Right);  				}  			}    				#endregion    				// Horizontal Splitter support added in v1.2    				#region Horizontal Splitter    			else if (this.Dock == DockStyle.Top || this.Dock == DockStyle.Bottom)  			{  				// create a new rectangle in the horizontal center of the splitter for our collapse control button  				rr = new Rectangle((int)r.X + ((r.Width - 115)/2)' r.Y' 115' 8);  				// force the height to 8px  				this.Height = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}    				// draw the left & right lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X' rr.Y + 1' rr.X' rr.Y + rr.Height - 2);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + rr.Width' rr.Y + 1' rr.X + rr.Width' rr.Y + rr.Height - 2);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 3' rr.Y + 2));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X +  rr.Width - 9' rr.Y + 2));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 14;  				int y = rr.Y + 3;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x + (i*3)' y' x + 1 + (i*3)' y + 1);  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x + 1 + (i*3)' y + 1' x + 2 + (i*3)' y + 2);  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)'  x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  						}  						break;    					case VisualStyles.DoubleDots:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y - 1' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y + 2' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y + 1' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 88' y);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 2' x + 88' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 88' y' x + 88' y + 2);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x + (i*5)' y' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*5)' y + 1' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x +(i*5)' y' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5) + 1' y);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5)' y + 1);  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*2)' y' x + (i*2)' y + 2);  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Top);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Bottom);  				}  			}    				#endregion    			else  			{  				throw new Exception("The Collapsible Splitter control cannot have the Filled or None Dockstyle property");  			}
Magic Number,OpenCBS.GUI.UserControl,CollapsibleSplitter,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CollapsibleSplitter.cs,OnPaint,The following statement contains a magic number: if(this.Dock == DockStyle.Left || this.Dock == DockStyle.Right)  			{  				// create a new rectangle in the vertical center of the splitter for our collapse control button  				rr = new Rectangle(r.X' (int)r.Y + ((r.Height - 115)/2)' 8' 115);  				// force the width to 8px so that everything always draws correctly  				this.Width = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}    				// draw the top & bottom lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y' rr.X + rr.Width - 2' rr.Y);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y + rr.Height' rr.X + rr.Width - 2' rr.Y + rr.Height);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + 3));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + rr.Height - 9));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 3;  				int y = rr.Y + 14;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y + (i*3)' x+1' y + 1 + (i*3));  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x+1' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  						}  						break;    					case VisualStyles.DoubleDots:  						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x - 1' y +(i*3)' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 2' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + 1' y  + (i*3)' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 2' y);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x'y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 2' y' x + 2' y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 90' x + 2' y + 90);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x' y + (i*5)' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1' y + 1 + (i*5)' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x' y +(i*5)' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x' y + (i*5) + 1);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x + 1' y + (i*5));  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*2)' x + 2' y + (i*2));  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Left);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Right);  				}  			}    				#endregion    				// Horizontal Splitter support added in v1.2    				#region Horizontal Splitter    			else if (this.Dock == DockStyle.Top || this.Dock == DockStyle.Bottom)  			{  				// create a new rectangle in the horizontal center of the splitter for our collapse control button  				rr = new Rectangle((int)r.X + ((r.Width - 115)/2)' r.Y' 115' 8);  				// force the height to 8px  				this.Height = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}    				// draw the left & right lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X' rr.Y + 1' rr.X' rr.Y + rr.Height - 2);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + rr.Width' rr.Y + 1' rr.X + rr.Width' rr.Y + rr.Height - 2);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 3' rr.Y + 2));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X +  rr.Width - 9' rr.Y + 2));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 14;  				int y = rr.Y + 3;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x + (i*3)' y' x + 1 + (i*3)' y + 1);  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x + 1 + (i*3)' y + 1' x + 2 + (i*3)' y + 2);  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)'  x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  						}  						break;    					case VisualStyles.DoubleDots:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y - 1' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y + 2' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y + 1' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 88' y);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 2' x + 88' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 88' y' x + 88' y + 2);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x + (i*5)' y' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*5)' y + 1' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x +(i*5)' y' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5) + 1' y);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5)' y + 1);  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*2)' y' x + (i*2)' y + 2);  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Top);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Bottom);  				}  			}    				#endregion    			else  			{  				throw new Exception("The Collapsible Splitter control cannot have the Filled or None Dockstyle property");  			}
Magic Number,OpenCBS.GUI.UserControl,CollapsibleSplitter,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CollapsibleSplitter.cs,OnPaint,The following statement contains a magic number: if(this.Dock == DockStyle.Left || this.Dock == DockStyle.Right)  			{  				// create a new rectangle in the vertical center of the splitter for our collapse control button  				rr = new Rectangle(r.X' (int)r.Y + ((r.Height - 115)/2)' 8' 115);  				// force the width to 8px so that everything always draws correctly  				this.Width = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}    				// draw the top & bottom lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y' rr.X + rr.Width - 2' rr.Y);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y + rr.Height' rr.X + rr.Width - 2' rr.Y + rr.Height);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + 3));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + rr.Height - 9));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 3;  				int y = rr.Y + 14;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y + (i*3)' x+1' y + 1 + (i*3));  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x+1' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  						}  						break;    					case VisualStyles.DoubleDots:  						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x - 1' y +(i*3)' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 2' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + 1' y  + (i*3)' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 2' y);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x'y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 2' y' x + 2' y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 90' x + 2' y + 90);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x' y + (i*5)' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1' y + 1 + (i*5)' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x' y +(i*5)' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x' y + (i*5) + 1);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x + 1' y + (i*5));  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*2)' x + 2' y + (i*2));  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Left);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Right);  				}  			}    				#endregion    				// Horizontal Splitter support added in v1.2    				#region Horizontal Splitter    			else if (this.Dock == DockStyle.Top || this.Dock == DockStyle.Bottom)  			{  				// create a new rectangle in the horizontal center of the splitter for our collapse control button  				rr = new Rectangle((int)r.X + ((r.Width - 115)/2)' r.Y' 115' 8);  				// force the height to 8px  				this.Height = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}    				// draw the left & right lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X' rr.Y + 1' rr.X' rr.Y + rr.Height - 2);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + rr.Width' rr.Y + 1' rr.X + rr.Width' rr.Y + rr.Height - 2);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 3' rr.Y + 2));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X +  rr.Width - 9' rr.Y + 2));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 14;  				int y = rr.Y + 3;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x + (i*3)' y' x + 1 + (i*3)' y + 1);  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x + 1 + (i*3)' y + 1' x + 2 + (i*3)' y + 2);  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)'  x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  						}  						break;    					case VisualStyles.DoubleDots:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y - 1' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y + 2' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y + 1' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 88' y);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 2' x + 88' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 88' y' x + 88' y + 2);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x + (i*5)' y' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*5)' y + 1' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x +(i*5)' y' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5) + 1' y);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5)' y + 1);  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*2)' y' x + (i*2)' y + 2);  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Top);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Bottom);  				}  			}    				#endregion    			else  			{  				throw new Exception("The Collapsible Splitter control cannot have the Filled or None Dockstyle property");  			}
Magic Number,OpenCBS.GUI.UserControl,CollapsibleSplitter,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CollapsibleSplitter.cs,OnPaint,The following statement contains a magic number: if(this.Dock == DockStyle.Left || this.Dock == DockStyle.Right)  			{  				// create a new rectangle in the vertical center of the splitter for our collapse control button  				rr = new Rectangle(r.X' (int)r.Y + ((r.Height - 115)/2)' 8' 115);  				// force the width to 8px so that everything always draws correctly  				this.Width = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}    				// draw the top & bottom lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y' rr.X + rr.Width - 2' rr.Y);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y + rr.Height' rr.X + rr.Width - 2' rr.Y + rr.Height);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + 3));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + rr.Height - 9));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 3;  				int y = rr.Y + 14;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y + (i*3)' x+1' y + 1 + (i*3));  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x+1' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  						}  						break;    					case VisualStyles.DoubleDots:  						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x - 1' y +(i*3)' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 2' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + 1' y  + (i*3)' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 2' y);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x'y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 2' y' x + 2' y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 90' x + 2' y + 90);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x' y + (i*5)' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1' y + 1 + (i*5)' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x' y +(i*5)' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x' y + (i*5) + 1);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x + 1' y + (i*5));  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*2)' x + 2' y + (i*2));  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Left);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Right);  				}  			}    				#endregion    				// Horizontal Splitter support added in v1.2    				#region Horizontal Splitter    			else if (this.Dock == DockStyle.Top || this.Dock == DockStyle.Bottom)  			{  				// create a new rectangle in the horizontal center of the splitter for our collapse control button  				rr = new Rectangle((int)r.X + ((r.Width - 115)/2)' r.Y' 115' 8);  				// force the height to 8px  				this.Height = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}    				// draw the left & right lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X' rr.Y + 1' rr.X' rr.Y + rr.Height - 2);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + rr.Width' rr.Y + 1' rr.X + rr.Width' rr.Y + rr.Height - 2);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 3' rr.Y + 2));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X +  rr.Width - 9' rr.Y + 2));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 14;  				int y = rr.Y + 3;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x + (i*3)' y' x + 1 + (i*3)' y + 1);  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x + 1 + (i*3)' y + 1' x + 2 + (i*3)' y + 2);  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)'  x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  						}  						break;    					case VisualStyles.DoubleDots:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y - 1' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y + 2' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y + 1' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 88' y);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 2' x + 88' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 88' y' x + 88' y + 2);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x + (i*5)' y' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*5)' y + 1' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x +(i*5)' y' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5) + 1' y);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5)' y + 1);  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*2)' y' x + (i*2)' y + 2);  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Top);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Bottom);  				}  			}    				#endregion    			else  			{  				throw new Exception("The Collapsible Splitter control cannot have the Filled or None Dockstyle property");  			}
Magic Number,OpenCBS.GUI.UserControl,CollapsibleSplitter,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CollapsibleSplitter.cs,OnPaint,The following statement contains a magic number: if(this.Dock == DockStyle.Left || this.Dock == DockStyle.Right)  			{  				// create a new rectangle in the vertical center of the splitter for our collapse control button  				rr = new Rectangle(r.X' (int)r.Y + ((r.Height - 115)/2)' 8' 115);  				// force the width to 8px so that everything always draws correctly  				this.Width = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}    				// draw the top & bottom lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y' rr.X + rr.Width - 2' rr.Y);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y + rr.Height' rr.X + rr.Width - 2' rr.Y + rr.Height);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + 3));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + rr.Height - 9));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 3;  				int y = rr.Y + 14;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y + (i*3)' x+1' y + 1 + (i*3));  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x+1' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  						}  						break;    					case VisualStyles.DoubleDots:  						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x - 1' y +(i*3)' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 2' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + 1' y  + (i*3)' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 2' y);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x'y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 2' y' x + 2' y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 90' x + 2' y + 90);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x' y + (i*5)' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1' y + 1 + (i*5)' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x' y +(i*5)' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x' y + (i*5) + 1);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x + 1' y + (i*5));  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*2)' x + 2' y + (i*2));  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Left);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Right);  				}  			}    				#endregion    				// Horizontal Splitter support added in v1.2    				#region Horizontal Splitter    			else if (this.Dock == DockStyle.Top || this.Dock == DockStyle.Bottom)  			{  				// create a new rectangle in the horizontal center of the splitter for our collapse control button  				rr = new Rectangle((int)r.X + ((r.Width - 115)/2)' r.Y' 115' 8);  				// force the height to 8px  				this.Height = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}    				// draw the left & right lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X' rr.Y + 1' rr.X' rr.Y + rr.Height - 2);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + rr.Width' rr.Y + 1' rr.X + rr.Width' rr.Y + rr.Height - 2);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 3' rr.Y + 2));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X +  rr.Width - 9' rr.Y + 2));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 14;  				int y = rr.Y + 3;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x + (i*3)' y' x + 1 + (i*3)' y + 1);  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x + 1 + (i*3)' y + 1' x + 2 + (i*3)' y + 2);  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)'  x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  						}  						break;    					case VisualStyles.DoubleDots:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y - 1' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y + 2' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y + 1' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 88' y);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 2' x + 88' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 88' y' x + 88' y + 2);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x + (i*5)' y' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*5)' y + 1' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x +(i*5)' y' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5) + 1' y);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5)' y + 1);  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*2)' y' x + (i*2)' y + 2);  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Top);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Bottom);  				}  			}    				#endregion    			else  			{  				throw new Exception("The Collapsible Splitter control cannot have the Filled or None Dockstyle property");  			}
Magic Number,OpenCBS.GUI.UserControl,CollapsibleSplitter,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CollapsibleSplitter.cs,OnPaint,The following statement contains a magic number: if(this.Dock == DockStyle.Left || this.Dock == DockStyle.Right)  			{  				// create a new rectangle in the vertical center of the splitter for our collapse control button  				rr = new Rectangle(r.X' (int)r.Y + ((r.Height - 115)/2)' 8' 115);  				// force the width to 8px so that everything always draws correctly  				this.Width = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}    				// draw the top & bottom lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y' rr.X + rr.Width - 2' rr.Y);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y + rr.Height' rr.X + rr.Width - 2' rr.Y + rr.Height);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + 3));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + rr.Height - 9));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 3;  				int y = rr.Y + 14;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y + (i*3)' x+1' y + 1 + (i*3));  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x+1' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  						}  						break;    					case VisualStyles.DoubleDots:  						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x - 1' y +(i*3)' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 2' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + 1' y  + (i*3)' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 2' y);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x'y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 2' y' x + 2' y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 90' x + 2' y + 90);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x' y + (i*5)' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1' y + 1 + (i*5)' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x' y +(i*5)' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x' y + (i*5) + 1);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x + 1' y + (i*5));  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*2)' x + 2' y + (i*2));  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Left);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Right);  				}  			}    				#endregion    				// Horizontal Splitter support added in v1.2    				#region Horizontal Splitter    			else if (this.Dock == DockStyle.Top || this.Dock == DockStyle.Bottom)  			{  				// create a new rectangle in the horizontal center of the splitter for our collapse control button  				rr = new Rectangle((int)r.X + ((r.Width - 115)/2)' r.Y' 115' 8);  				// force the height to 8px  				this.Height = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}    				// draw the left & right lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X' rr.Y + 1' rr.X' rr.Y + rr.Height - 2);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + rr.Width' rr.Y + 1' rr.X + rr.Width' rr.Y + rr.Height - 2);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 3' rr.Y + 2));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X +  rr.Width - 9' rr.Y + 2));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 14;  				int y = rr.Y + 3;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x + (i*3)' y' x + 1 + (i*3)' y + 1);  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x + 1 + (i*3)' y + 1' x + 2 + (i*3)' y + 2);  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)'  x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  						}  						break;    					case VisualStyles.DoubleDots:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y - 1' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y + 2' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y + 1' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 88' y);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 2' x + 88' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 88' y' x + 88' y + 2);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x + (i*5)' y' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*5)' y + 1' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x +(i*5)' y' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5) + 1' y);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5)' y + 1);  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*2)' y' x + (i*2)' y + 2);  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Top);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Bottom);  				}  			}    				#endregion    			else  			{  				throw new Exception("The Collapsible Splitter control cannot have the Filled or None Dockstyle property");  			}
Magic Number,OpenCBS.GUI.UserControl,CollapsibleSplitter,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CollapsibleSplitter.cs,OnPaint,The following statement contains a magic number: if(this.Dock == DockStyle.Left || this.Dock == DockStyle.Right)  			{  				// create a new rectangle in the vertical center of the splitter for our collapse control button  				rr = new Rectangle(r.X' (int)r.Y + ((r.Height - 115)/2)' 8' 115);  				// force the width to 8px so that everything always draws correctly  				this.Width = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}    				// draw the top & bottom lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y' rr.X + rr.Width - 2' rr.Y);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y + rr.Height' rr.X + rr.Width - 2' rr.Y + rr.Height);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + 3));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + rr.Height - 9));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 3;  				int y = rr.Y + 14;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y + (i*3)' x+1' y + 1 + (i*3));  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x+1' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  						}  						break;    					case VisualStyles.DoubleDots:  						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x - 1' y +(i*3)' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 2' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + 1' y  + (i*3)' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 2' y);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x'y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 2' y' x + 2' y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 90' x + 2' y + 90);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x' y + (i*5)' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1' y + 1 + (i*5)' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x' y +(i*5)' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x' y + (i*5) + 1);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x + 1' y + (i*5));  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*2)' x + 2' y + (i*2));  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Left);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Right);  				}  			}    				#endregion    				// Horizontal Splitter support added in v1.2    				#region Horizontal Splitter    			else if (this.Dock == DockStyle.Top || this.Dock == DockStyle.Bottom)  			{  				// create a new rectangle in the horizontal center of the splitter for our collapse control button  				rr = new Rectangle((int)r.X + ((r.Width - 115)/2)' r.Y' 115' 8);  				// force the height to 8px  				this.Height = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}    				// draw the left & right lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X' rr.Y + 1' rr.X' rr.Y + rr.Height - 2);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + rr.Width' rr.Y + 1' rr.X + rr.Width' rr.Y + rr.Height - 2);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 3' rr.Y + 2));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X +  rr.Width - 9' rr.Y + 2));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 14;  				int y = rr.Y + 3;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x + (i*3)' y' x + 1 + (i*3)' y + 1);  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x + 1 + (i*3)' y + 1' x + 2 + (i*3)' y + 2);  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)'  x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  						}  						break;    					case VisualStyles.DoubleDots:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y - 1' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y + 2' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y + 1' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 88' y);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 2' x + 88' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 88' y' x + 88' y + 2);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x + (i*5)' y' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*5)' y + 1' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x +(i*5)' y' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5) + 1' y);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5)' y + 1);  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*2)' y' x + (i*2)' y + 2);  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Top);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Bottom);  				}  			}    				#endregion    			else  			{  				throw new Exception("The Collapsible Splitter control cannot have the Filled or None Dockstyle property");  			}
Magic Number,OpenCBS.GUI.UserControl,CollapsibleSplitter,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CollapsibleSplitter.cs,OnPaint,The following statement contains a magic number: if(this.Dock == DockStyle.Left || this.Dock == DockStyle.Right)  			{  				// create a new rectangle in the vertical center of the splitter for our collapse control button  				rr = new Rectangle(r.X' (int)r.Y + ((r.Height - 115)/2)' 8' 115);  				// force the width to 8px so that everything always draws correctly  				this.Width = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}    				// draw the top & bottom lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y' rr.X + rr.Width - 2' rr.Y);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y + rr.Height' rr.X + rr.Width - 2' rr.Y + rr.Height);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + 3));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + rr.Height - 9));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 3;  				int y = rr.Y + 14;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y + (i*3)' x+1' y + 1 + (i*3));  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x+1' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  						}  						break;    					case VisualStyles.DoubleDots:  						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x - 1' y +(i*3)' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 2' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + 1' y  + (i*3)' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 2' y);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x'y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 2' y' x + 2' y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 90' x + 2' y + 90);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x' y + (i*5)' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1' y + 1 + (i*5)' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x' y +(i*5)' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x' y + (i*5) + 1);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x + 1' y + (i*5));  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*2)' x + 2' y + (i*2));  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Left);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Right);  				}  			}    				#endregion    				// Horizontal Splitter support added in v1.2    				#region Horizontal Splitter    			else if (this.Dock == DockStyle.Top || this.Dock == DockStyle.Bottom)  			{  				// create a new rectangle in the horizontal center of the splitter for our collapse control button  				rr = new Rectangle((int)r.X + ((r.Width - 115)/2)' r.Y' 115' 8);  				// force the height to 8px  				this.Height = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}    				// draw the left & right lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X' rr.Y + 1' rr.X' rr.Y + rr.Height - 2);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + rr.Width' rr.Y + 1' rr.X + rr.Width' rr.Y + rr.Height - 2);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 3' rr.Y + 2));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X +  rr.Width - 9' rr.Y + 2));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 14;  				int y = rr.Y + 3;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x + (i*3)' y' x + 1 + (i*3)' y + 1);  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x + 1 + (i*3)' y + 1' x + 2 + (i*3)' y + 2);  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)'  x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  						}  						break;    					case VisualStyles.DoubleDots:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y - 1' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y + 2' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y + 1' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 88' y);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 2' x + 88' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 88' y' x + 88' y + 2);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x + (i*5)' y' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*5)' y + 1' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x +(i*5)' y' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5) + 1' y);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5)' y + 1);  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*2)' y' x + (i*2)' y + 2);  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Top);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Bottom);  				}  			}    				#endregion    			else  			{  				throw new Exception("The Collapsible Splitter control cannot have the Filled or None Dockstyle property");  			}
Magic Number,OpenCBS.GUI.UserControl,CollapsibleSplitter,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CollapsibleSplitter.cs,OnPaint,The following statement contains a magic number: if(this.Dock == DockStyle.Left || this.Dock == DockStyle.Right)  			{  				// create a new rectangle in the vertical center of the splitter for our collapse control button  				rr = new Rectangle(r.X' (int)r.Y + ((r.Height - 115)/2)' 8' 115);  				// force the width to 8px so that everything always draws correctly  				this.Width = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}    				// draw the top & bottom lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y' rr.X + rr.Width - 2' rr.Y);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y + rr.Height' rr.X + rr.Width - 2' rr.Y + rr.Height);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + 3));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + rr.Height - 9));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 3;  				int y = rr.Y + 14;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y + (i*3)' x+1' y + 1 + (i*3));  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x+1' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  						}  						break;    					case VisualStyles.DoubleDots:  						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x - 1' y +(i*3)' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 2' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + 1' y  + (i*3)' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 2' y);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x'y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 2' y' x + 2' y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 90' x + 2' y + 90);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x' y + (i*5)' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1' y + 1 + (i*5)' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x' y +(i*5)' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x' y + (i*5) + 1);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x + 1' y + (i*5));  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*2)' x + 2' y + (i*2));  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Left);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Right);  				}  			}    				#endregion    				// Horizontal Splitter support added in v1.2    				#region Horizontal Splitter    			else if (this.Dock == DockStyle.Top || this.Dock == DockStyle.Bottom)  			{  				// create a new rectangle in the horizontal center of the splitter for our collapse control button  				rr = new Rectangle((int)r.X + ((r.Width - 115)/2)' r.Y' 115' 8);  				// force the height to 8px  				this.Height = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}    				// draw the left & right lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X' rr.Y + 1' rr.X' rr.Y + rr.Height - 2);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + rr.Width' rr.Y + 1' rr.X + rr.Width' rr.Y + rr.Height - 2);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 3' rr.Y + 2));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X +  rr.Width - 9' rr.Y + 2));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 14;  				int y = rr.Y + 3;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x + (i*3)' y' x + 1 + (i*3)' y + 1);  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x + 1 + (i*3)' y + 1' x + 2 + (i*3)' y + 2);  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)'  x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  						}  						break;    					case VisualStyles.DoubleDots:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y - 1' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y + 2' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y + 1' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 88' y);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 2' x + 88' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 88' y' x + 88' y + 2);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x + (i*5)' y' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*5)' y + 1' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x +(i*5)' y' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5) + 1' y);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5)' y + 1);  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*2)' y' x + (i*2)' y + 2);  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Top);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Bottom);  				}  			}    				#endregion    			else  			{  				throw new Exception("The Collapsible Splitter control cannot have the Filled or None Dockstyle property");  			}
Magic Number,OpenCBS.GUI.UserControl,CollapsibleSplitter,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CollapsibleSplitter.cs,OnPaint,The following statement contains a magic number: if(this.Dock == DockStyle.Left || this.Dock == DockStyle.Right)  			{  				// create a new rectangle in the vertical center of the splitter for our collapse control button  				rr = new Rectangle(r.X' (int)r.Y + ((r.Height - 115)/2)' 8' 115);  				// force the width to 8px so that everything always draws correctly  				this.Width = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}    				// draw the top & bottom lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y' rr.X + rr.Width - 2' rr.Y);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y + rr.Height' rr.X + rr.Width - 2' rr.Y + rr.Height);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + 3));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + rr.Height - 9));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 3;  				int y = rr.Y + 14;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y + (i*3)' x+1' y + 1 + (i*3));  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x+1' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  						}  						break;    					case VisualStyles.DoubleDots:  						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x - 1' y +(i*3)' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 2' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + 1' y  + (i*3)' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 2' y);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x'y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 2' y' x + 2' y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 90' x + 2' y + 90);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x' y + (i*5)' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1' y + 1 + (i*5)' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x' y +(i*5)' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x' y + (i*5) + 1);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x + 1' y + (i*5));  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*2)' x + 2' y + (i*2));  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Left);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Right);  				}  			}    				#endregion    				// Horizontal Splitter support added in v1.2    				#region Horizontal Splitter    			else if (this.Dock == DockStyle.Top || this.Dock == DockStyle.Bottom)  			{  				// create a new rectangle in the horizontal center of the splitter for our collapse control button  				rr = new Rectangle((int)r.X + ((r.Width - 115)/2)' r.Y' 115' 8);  				// force the height to 8px  				this.Height = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}    				// draw the left & right lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X' rr.Y + 1' rr.X' rr.Y + rr.Height - 2);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + rr.Width' rr.Y + 1' rr.X + rr.Width' rr.Y + rr.Height - 2);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 3' rr.Y + 2));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X +  rr.Width - 9' rr.Y + 2));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 14;  				int y = rr.Y + 3;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x + (i*3)' y' x + 1 + (i*3)' y + 1);  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x + 1 + (i*3)' y + 1' x + 2 + (i*3)' y + 2);  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)'  x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  						}  						break;    					case VisualStyles.DoubleDots:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y - 1' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y + 2' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y + 1' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 88' y);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 2' x + 88' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 88' y' x + 88' y + 2);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x + (i*5)' y' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*5)' y + 1' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x +(i*5)' y' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5) + 1' y);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5)' y + 1);  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*2)' y' x + (i*2)' y + 2);  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Top);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Bottom);  				}  			}    				#endregion    			else  			{  				throw new Exception("The Collapsible Splitter control cannot have the Filled or None Dockstyle property");  			}
Magic Number,OpenCBS.GUI.UserControl,CollapsibleSplitter,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CollapsibleSplitter.cs,OnPaint,The following statement contains a magic number: if(this.Dock == DockStyle.Left || this.Dock == DockStyle.Right)  			{  				// create a new rectangle in the vertical center of the splitter for our collapse control button  				rr = new Rectangle(r.X' (int)r.Y + ((r.Height - 115)/2)' 8' 115);  				// force the width to 8px so that everything always draws correctly  				this.Width = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}    				// draw the top & bottom lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y' rr.X + rr.Width - 2' rr.Y);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y + rr.Height' rr.X + rr.Width - 2' rr.Y + rr.Height);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + 3));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + rr.Height - 9));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 3;  				int y = rr.Y + 14;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y + (i*3)' x+1' y + 1 + (i*3));  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x+1' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  						}  						break;    					case VisualStyles.DoubleDots:  						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x - 1' y +(i*3)' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 2' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + 1' y  + (i*3)' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 2' y);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x'y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 2' y' x + 2' y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 90' x + 2' y + 90);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x' y + (i*5)' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1' y + 1 + (i*5)' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x' y +(i*5)' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x' y + (i*5) + 1);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x + 1' y + (i*5));  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*2)' x + 2' y + (i*2));  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Left);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Right);  				}  			}    				#endregion    				// Horizontal Splitter support added in v1.2    				#region Horizontal Splitter    			else if (this.Dock == DockStyle.Top || this.Dock == DockStyle.Bottom)  			{  				// create a new rectangle in the horizontal center of the splitter for our collapse control button  				rr = new Rectangle((int)r.X + ((r.Width - 115)/2)' r.Y' 115' 8);  				// force the height to 8px  				this.Height = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}    				// draw the left & right lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X' rr.Y + 1' rr.X' rr.Y + rr.Height - 2);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + rr.Width' rr.Y + 1' rr.X + rr.Width' rr.Y + rr.Height - 2);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 3' rr.Y + 2));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X +  rr.Width - 9' rr.Y + 2));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 14;  				int y = rr.Y + 3;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x + (i*3)' y' x + 1 + (i*3)' y + 1);  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x + 1 + (i*3)' y + 1' x + 2 + (i*3)' y + 2);  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)'  x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  						}  						break;    					case VisualStyles.DoubleDots:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y - 1' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y + 2' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y + 1' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 88' y);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 2' x + 88' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 88' y' x + 88' y + 2);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x + (i*5)' y' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*5)' y + 1' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x +(i*5)' y' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5) + 1' y);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5)' y + 1);  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*2)' y' x + (i*2)' y + 2);  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Top);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Bottom);  				}  			}    				#endregion    			else  			{  				throw new Exception("The Collapsible Splitter control cannot have the Filled or None Dockstyle property");  			}
Magic Number,OpenCBS.GUI.UserControl,CollapsibleSplitter,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CollapsibleSplitter.cs,OnPaint,The following statement contains a magic number: if(this.Dock == DockStyle.Left || this.Dock == DockStyle.Right)  			{  				// create a new rectangle in the vertical center of the splitter for our collapse control button  				rr = new Rectangle(r.X' (int)r.Y + ((r.Height - 115)/2)' 8' 115);  				// force the width to 8px so that everything always draws correctly  				this.Width = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}    				// draw the top & bottom lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y' rr.X + rr.Width - 2' rr.Y);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y + rr.Height' rr.X + rr.Width - 2' rr.Y + rr.Height);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + 3));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + rr.Height - 9));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 3;  				int y = rr.Y + 14;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y + (i*3)' x+1' y + 1 + (i*3));  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x+1' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  						}  						break;    					case VisualStyles.DoubleDots:  						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x - 1' y +(i*3)' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 2' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + 1' y  + (i*3)' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 2' y);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x'y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 2' y' x + 2' y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 90' x + 2' y + 90);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x' y + (i*5)' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1' y + 1 + (i*5)' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x' y +(i*5)' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x' y + (i*5) + 1);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x + 1' y + (i*5));  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*2)' x + 2' y + (i*2));  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Left);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Right);  				}  			}    				#endregion    				// Horizontal Splitter support added in v1.2    				#region Horizontal Splitter    			else if (this.Dock == DockStyle.Top || this.Dock == DockStyle.Bottom)  			{  				// create a new rectangle in the horizontal center of the splitter for our collapse control button  				rr = new Rectangle((int)r.X + ((r.Width - 115)/2)' r.Y' 115' 8);  				// force the height to 8px  				this.Height = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}    				// draw the left & right lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X' rr.Y + 1' rr.X' rr.Y + rr.Height - 2);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + rr.Width' rr.Y + 1' rr.X + rr.Width' rr.Y + rr.Height - 2);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 3' rr.Y + 2));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X +  rr.Width - 9' rr.Y + 2));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 14;  				int y = rr.Y + 3;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x + (i*3)' y' x + 1 + (i*3)' y + 1);  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x + 1 + (i*3)' y + 1' x + 2 + (i*3)' y + 2);  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)'  x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  						}  						break;    					case VisualStyles.DoubleDots:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y - 1' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y + 2' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y + 1' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 88' y);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 2' x + 88' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 88' y' x + 88' y + 2);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x + (i*5)' y' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*5)' y + 1' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x +(i*5)' y' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5) + 1' y);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5)' y + 1);  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*2)' y' x + (i*2)' y + 2);  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Top);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Bottom);  				}  			}    				#endregion    			else  			{  				throw new Exception("The Collapsible Splitter control cannot have the Filled or None Dockstyle property");  			}
Magic Number,OpenCBS.GUI.UserControl,CollapsibleSplitter,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CollapsibleSplitter.cs,OnPaint,The following statement contains a magic number: if(this.Dock == DockStyle.Left || this.Dock == DockStyle.Right)  			{  				// create a new rectangle in the vertical center of the splitter for our collapse control button  				rr = new Rectangle(r.X' (int)r.Y + ((r.Height - 115)/2)' 8' 115);  				// force the width to 8px so that everything always draws correctly  				this.Width = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}    				// draw the top & bottom lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y' rr.X + rr.Width - 2' rr.Y);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y + rr.Height' rr.X + rr.Width - 2' rr.Y + rr.Height);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + 3));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + rr.Height - 9));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 3;  				int y = rr.Y + 14;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y + (i*3)' x+1' y + 1 + (i*3));  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x+1' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  						}  						break;    					case VisualStyles.DoubleDots:  						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x - 1' y +(i*3)' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 2' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + 1' y  + (i*3)' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 2' y);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x'y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 2' y' x + 2' y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 90' x + 2' y + 90);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x' y + (i*5)' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1' y + 1 + (i*5)' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x' y +(i*5)' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x' y + (i*5) + 1);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x + 1' y + (i*5));  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*2)' x + 2' y + (i*2));  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Left);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Right);  				}  			}    				#endregion    				// Horizontal Splitter support added in v1.2    				#region Horizontal Splitter    			else if (this.Dock == DockStyle.Top || this.Dock == DockStyle.Bottom)  			{  				// create a new rectangle in the horizontal center of the splitter for our collapse control button  				rr = new Rectangle((int)r.X + ((r.Width - 115)/2)' r.Y' 115' 8);  				// force the height to 8px  				this.Height = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}    				// draw the left & right lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X' rr.Y + 1' rr.X' rr.Y + rr.Height - 2);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + rr.Width' rr.Y + 1' rr.X + rr.Width' rr.Y + rr.Height - 2);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 3' rr.Y + 2));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X +  rr.Width - 9' rr.Y + 2));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 14;  				int y = rr.Y + 3;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x + (i*3)' y' x + 1 + (i*3)' y + 1);  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x + 1 + (i*3)' y + 1' x + 2 + (i*3)' y + 2);  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)'  x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  						}  						break;    					case VisualStyles.DoubleDots:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y - 1' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y + 2' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y + 1' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 88' y);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 2' x + 88' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 88' y' x + 88' y + 2);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x + (i*5)' y' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*5)' y + 1' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x +(i*5)' y' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5) + 1' y);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5)' y + 1);  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*2)' y' x + (i*2)' y + 2);  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Top);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Bottom);  				}  			}    				#endregion    			else  			{  				throw new Exception("The Collapsible Splitter control cannot have the Filled or None Dockstyle property");  			}
Magic Number,OpenCBS.GUI.UserControl,CollapsibleSplitter,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CollapsibleSplitter.cs,OnPaint,The following statement contains a magic number: if(this.Dock == DockStyle.Left || this.Dock == DockStyle.Right)  			{  				// create a new rectangle in the vertical center of the splitter for our collapse control button  				rr = new Rectangle(r.X' (int)r.Y + ((r.Height - 115)/2)' 8' 115);  				// force the width to 8px so that everything always draws correctly  				this.Width = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}    				// draw the top & bottom lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y' rr.X + rr.Width - 2' rr.Y);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y + rr.Height' rr.X + rr.Width - 2' rr.Y + rr.Height);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + 3));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + rr.Height - 9));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 3;  				int y = rr.Y + 14;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y + (i*3)' x+1' y + 1 + (i*3));  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x+1' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  						}  						break;    					case VisualStyles.DoubleDots:  						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x - 1' y +(i*3)' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 2' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + 1' y  + (i*3)' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 2' y);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x'y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 2' y' x + 2' y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 90' x + 2' y + 90);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x' y + (i*5)' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1' y + 1 + (i*5)' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x' y +(i*5)' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x' y + (i*5) + 1);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x + 1' y + (i*5));  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*2)' x + 2' y + (i*2));  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Left);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Right);  				}  			}    				#endregion    				// Horizontal Splitter support added in v1.2    				#region Horizontal Splitter    			else if (this.Dock == DockStyle.Top || this.Dock == DockStyle.Bottom)  			{  				// create a new rectangle in the horizontal center of the splitter for our collapse control button  				rr = new Rectangle((int)r.X + ((r.Width - 115)/2)' r.Y' 115' 8);  				// force the height to 8px  				this.Height = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}    				// draw the left & right lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X' rr.Y + 1' rr.X' rr.Y + rr.Height - 2);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + rr.Width' rr.Y + 1' rr.X + rr.Width' rr.Y + rr.Height - 2);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 3' rr.Y + 2));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X +  rr.Width - 9' rr.Y + 2));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 14;  				int y = rr.Y + 3;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x + (i*3)' y' x + 1 + (i*3)' y + 1);  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x + 1 + (i*3)' y + 1' x + 2 + (i*3)' y + 2);  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)'  x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  						}  						break;    					case VisualStyles.DoubleDots:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y - 1' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y + 2' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y + 1' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 88' y);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 2' x + 88' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 88' y' x + 88' y + 2);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x + (i*5)' y' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*5)' y + 1' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x +(i*5)' y' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5) + 1' y);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5)' y + 1);  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*2)' y' x + (i*2)' y + 2);  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Top);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Bottom);  				}  			}    				#endregion    			else  			{  				throw new Exception("The Collapsible Splitter control cannot have the Filled or None Dockstyle property");  			}
Magic Number,OpenCBS.GUI.UserControl,CollapsibleSplitter,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CollapsibleSplitter.cs,OnPaint,The following statement contains a magic number: if(this.Dock == DockStyle.Left || this.Dock == DockStyle.Right)  			{  				// create a new rectangle in the vertical center of the splitter for our collapse control button  				rr = new Rectangle(r.X' (int)r.Y + ((r.Height - 115)/2)' 8' 115);  				// force the width to 8px so that everything always draws correctly  				this.Width = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}    				// draw the top & bottom lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y' rr.X + rr.Width - 2' rr.Y);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y + rr.Height' rr.X + rr.Width - 2' rr.Y + rr.Height);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + 3));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + rr.Height - 9));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 3;  				int y = rr.Y + 14;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y + (i*3)' x+1' y + 1 + (i*3));  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x+1' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  						}  						break;    					case VisualStyles.DoubleDots:  						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x - 1' y +(i*3)' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 2' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + 1' y  + (i*3)' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 2' y);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x'y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 2' y' x + 2' y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 90' x + 2' y + 90);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x' y + (i*5)' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1' y + 1 + (i*5)' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x' y +(i*5)' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x' y + (i*5) + 1);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x + 1' y + (i*5));  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*2)' x + 2' y + (i*2));  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Left);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Right);  				}  			}    				#endregion    				// Horizontal Splitter support added in v1.2    				#region Horizontal Splitter    			else if (this.Dock == DockStyle.Top || this.Dock == DockStyle.Bottom)  			{  				// create a new rectangle in the horizontal center of the splitter for our collapse control button  				rr = new Rectangle((int)r.X + ((r.Width - 115)/2)' r.Y' 115' 8);  				// force the height to 8px  				this.Height = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}    				// draw the left & right lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X' rr.Y + 1' rr.X' rr.Y + rr.Height - 2);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + rr.Width' rr.Y + 1' rr.X + rr.Width' rr.Y + rr.Height - 2);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 3' rr.Y + 2));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X +  rr.Width - 9' rr.Y + 2));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 14;  				int y = rr.Y + 3;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x + (i*3)' y' x + 1 + (i*3)' y + 1);  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x + 1 + (i*3)' y + 1' x + 2 + (i*3)' y + 2);  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)'  x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  						}  						break;    					case VisualStyles.DoubleDots:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y - 1' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y + 2' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y + 1' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 88' y);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 2' x + 88' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 88' y' x + 88' y + 2);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x + (i*5)' y' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*5)' y + 1' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x +(i*5)' y' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5) + 1' y);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5)' y + 1);  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*2)' y' x + (i*2)' y + 2);  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Top);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Bottom);  				}  			}    				#endregion    			else  			{  				throw new Exception("The Collapsible Splitter control cannot have the Filled or None Dockstyle property");  			}
Magic Number,OpenCBS.GUI.UserControl,CollapsibleSplitter,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CollapsibleSplitter.cs,OnPaint,The following statement contains a magic number: if(this.Dock == DockStyle.Left || this.Dock == DockStyle.Right)  			{  				// create a new rectangle in the vertical center of the splitter for our collapse control button  				rr = new Rectangle(r.X' (int)r.Y + ((r.Height - 115)/2)' 8' 115);  				// force the width to 8px so that everything always draws correctly  				this.Width = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}    				// draw the top & bottom lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y' rr.X + rr.Width - 2' rr.Y);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y + rr.Height' rr.X + rr.Width - 2' rr.Y + rr.Height);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + 3));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + rr.Height - 9));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 3;  				int y = rr.Y + 14;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y + (i*3)' x+1' y + 1 + (i*3));  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x+1' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  						}  						break;    					case VisualStyles.DoubleDots:  						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x - 1' y +(i*3)' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 2' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + 1' y  + (i*3)' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 2' y);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x'y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 2' y' x + 2' y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 90' x + 2' y + 90);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x' y + (i*5)' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1' y + 1 + (i*5)' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x' y +(i*5)' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x' y + (i*5) + 1);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x + 1' y + (i*5));  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*2)' x + 2' y + (i*2));  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Left);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Right);  				}  			}    				#endregion    				// Horizontal Splitter support added in v1.2    				#region Horizontal Splitter    			else if (this.Dock == DockStyle.Top || this.Dock == DockStyle.Bottom)  			{  				// create a new rectangle in the horizontal center of the splitter for our collapse control button  				rr = new Rectangle((int)r.X + ((r.Width - 115)/2)' r.Y' 115' 8);  				// force the height to 8px  				this.Height = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}    				// draw the left & right lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X' rr.Y + 1' rr.X' rr.Y + rr.Height - 2);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + rr.Width' rr.Y + 1' rr.X + rr.Width' rr.Y + rr.Height - 2);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 3' rr.Y + 2));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X +  rr.Width - 9' rr.Y + 2));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 14;  				int y = rr.Y + 3;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x + (i*3)' y' x + 1 + (i*3)' y + 1);  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x + 1 + (i*3)' y + 1' x + 2 + (i*3)' y + 2);  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)'  x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  						}  						break;    					case VisualStyles.DoubleDots:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y - 1' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y + 2' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y + 1' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 88' y);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 2' x + 88' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 88' y' x + 88' y + 2);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x + (i*5)' y' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*5)' y + 1' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x +(i*5)' y' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5) + 1' y);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5)' y + 1);  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*2)' y' x + (i*2)' y + 2);  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Top);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Bottom);  				}  			}    				#endregion    			else  			{  				throw new Exception("The Collapsible Splitter control cannot have the Filled or None Dockstyle property");  			}
Magic Number,OpenCBS.GUI.UserControl,CollapsibleSplitter,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CollapsibleSplitter.cs,OnPaint,The following statement contains a magic number: if(this.Dock == DockStyle.Left || this.Dock == DockStyle.Right)  			{  				// create a new rectangle in the vertical center of the splitter for our collapse control button  				rr = new Rectangle(r.X' (int)r.Y + ((r.Height - 115)/2)' 8' 115);  				// force the width to 8px so that everything always draws correctly  				this.Width = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}    				// draw the top & bottom lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y' rr.X + rr.Width - 2' rr.Y);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y + rr.Height' rr.X + rr.Width - 2' rr.Y + rr.Height);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + 3));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + rr.Height - 9));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 3;  				int y = rr.Y + 14;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y + (i*3)' x+1' y + 1 + (i*3));  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x+1' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  						}  						break;    					case VisualStyles.DoubleDots:  						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x - 1' y +(i*3)' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 2' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + 1' y  + (i*3)' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 2' y);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x'y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 2' y' x + 2' y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 90' x + 2' y + 90);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x' y + (i*5)' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1' y + 1 + (i*5)' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x' y +(i*5)' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x' y + (i*5) + 1);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x + 1' y + (i*5));  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*2)' x + 2' y + (i*2));  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Left);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Right);  				}  			}    				#endregion    				// Horizontal Splitter support added in v1.2    				#region Horizontal Splitter    			else if (this.Dock == DockStyle.Top || this.Dock == DockStyle.Bottom)  			{  				// create a new rectangle in the horizontal center of the splitter for our collapse control button  				rr = new Rectangle((int)r.X + ((r.Width - 115)/2)' r.Y' 115' 8);  				// force the height to 8px  				this.Height = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}    				// draw the left & right lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X' rr.Y + 1' rr.X' rr.Y + rr.Height - 2);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + rr.Width' rr.Y + 1' rr.X + rr.Width' rr.Y + rr.Height - 2);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 3' rr.Y + 2));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X +  rr.Width - 9' rr.Y + 2));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 14;  				int y = rr.Y + 3;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x + (i*3)' y' x + 1 + (i*3)' y + 1);  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x + 1 + (i*3)' y + 1' x + 2 + (i*3)' y + 2);  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)'  x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  						}  						break;    					case VisualStyles.DoubleDots:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y - 1' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y + 2' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y + 1' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 88' y);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 2' x + 88' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 88' y' x + 88' y + 2);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x + (i*5)' y' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*5)' y + 1' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x +(i*5)' y' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5) + 1' y);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5)' y + 1);  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*2)' y' x + (i*2)' y + 2);  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Top);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Bottom);  				}  			}    				#endregion    			else  			{  				throw new Exception("The Collapsible Splitter control cannot have the Filled or None Dockstyle property");  			}
Magic Number,OpenCBS.GUI.UserControl,CollapsibleSplitter,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CollapsibleSplitter.cs,OnPaint,The following statement contains a magic number: if(this.Dock == DockStyle.Left || this.Dock == DockStyle.Right)  			{  				// create a new rectangle in the vertical center of the splitter for our collapse control button  				rr = new Rectangle(r.X' (int)r.Y + ((r.Height - 115)/2)' 8' 115);  				// force the width to 8px so that everything always draws correctly  				this.Width = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}    				// draw the top & bottom lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y' rr.X + rr.Width - 2' rr.Y);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y + rr.Height' rr.X + rr.Width - 2' rr.Y + rr.Height);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + 3));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + rr.Height - 9));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 3;  				int y = rr.Y + 14;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y + (i*3)' x+1' y + 1 + (i*3));  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x+1' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  						}  						break;    					case VisualStyles.DoubleDots:  						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x - 1' y +(i*3)' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 2' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + 1' y  + (i*3)' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 2' y);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x'y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 2' y' x + 2' y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 90' x + 2' y + 90);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x' y + (i*5)' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1' y + 1 + (i*5)' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x' y +(i*5)' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x' y + (i*5) + 1);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x + 1' y + (i*5));  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*2)' x + 2' y + (i*2));  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Left);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Right);  				}  			}    				#endregion    				// Horizontal Splitter support added in v1.2    				#region Horizontal Splitter    			else if (this.Dock == DockStyle.Top || this.Dock == DockStyle.Bottom)  			{  				// create a new rectangle in the horizontal center of the splitter for our collapse control button  				rr = new Rectangle((int)r.X + ((r.Width - 115)/2)' r.Y' 115' 8);  				// force the height to 8px  				this.Height = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}    				// draw the left & right lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X' rr.Y + 1' rr.X' rr.Y + rr.Height - 2);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + rr.Width' rr.Y + 1' rr.X + rr.Width' rr.Y + rr.Height - 2);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 3' rr.Y + 2));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X +  rr.Width - 9' rr.Y + 2));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 14;  				int y = rr.Y + 3;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x + (i*3)' y' x + 1 + (i*3)' y + 1);  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x + 1 + (i*3)' y + 1' x + 2 + (i*3)' y + 2);  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)'  x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  						}  						break;    					case VisualStyles.DoubleDots:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y - 1' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y + 2' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y + 1' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 88' y);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 2' x + 88' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 88' y' x + 88' y + 2);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x + (i*5)' y' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*5)' y + 1' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x +(i*5)' y' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5) + 1' y);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5)' y + 1);  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*2)' y' x + (i*2)' y + 2);  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Top);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Bottom);  				}  			}    				#endregion    			else  			{  				throw new Exception("The Collapsible Splitter control cannot have the Filled or None Dockstyle property");  			}
Magic Number,OpenCBS.GUI.UserControl,CollapsibleSplitter,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CollapsibleSplitter.cs,OnPaint,The following statement contains a magic number: if(this.Dock == DockStyle.Left || this.Dock == DockStyle.Right)  			{  				// create a new rectangle in the vertical center of the splitter for our collapse control button  				rr = new Rectangle(r.X' (int)r.Y + ((r.Height - 115)/2)' 8' 115);  				// force the width to 8px so that everything always draws correctly  				this.Width = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}    				// draw the top & bottom lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y' rr.X + rr.Width - 2' rr.Y);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y + rr.Height' rr.X + rr.Width - 2' rr.Y + rr.Height);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + 3));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + rr.Height - 9));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 3;  				int y = rr.Y + 14;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y + (i*3)' x+1' y + 1 + (i*3));  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x+1' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  						}  						break;    					case VisualStyles.DoubleDots:  						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x - 1' y +(i*3)' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 2' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + 1' y  + (i*3)' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 2' y);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x'y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 2' y' x + 2' y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 90' x + 2' y + 90);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x' y + (i*5)' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1' y + 1 + (i*5)' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x' y +(i*5)' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x' y + (i*5) + 1);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x + 1' y + (i*5));  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*2)' x + 2' y + (i*2));  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Left);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Right);  				}  			}    				#endregion    				// Horizontal Splitter support added in v1.2    				#region Horizontal Splitter    			else if (this.Dock == DockStyle.Top || this.Dock == DockStyle.Bottom)  			{  				// create a new rectangle in the horizontal center of the splitter for our collapse control button  				rr = new Rectangle((int)r.X + ((r.Width - 115)/2)' r.Y' 115' 8);  				// force the height to 8px  				this.Height = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}    				// draw the left & right lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X' rr.Y + 1' rr.X' rr.Y + rr.Height - 2);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + rr.Width' rr.Y + 1' rr.X + rr.Width' rr.Y + rr.Height - 2);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 3' rr.Y + 2));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X +  rr.Width - 9' rr.Y + 2));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 14;  				int y = rr.Y + 3;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x + (i*3)' y' x + 1 + (i*3)' y + 1);  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x + 1 + (i*3)' y + 1' x + 2 + (i*3)' y + 2);  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)'  x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  						}  						break;    					case VisualStyles.DoubleDots:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y - 1' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y + 2' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y + 1' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 88' y);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 2' x + 88' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 88' y' x + 88' y + 2);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x + (i*5)' y' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*5)' y + 1' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x +(i*5)' y' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5) + 1' y);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5)' y + 1);  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*2)' y' x + (i*2)' y + 2);  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Top);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Bottom);  				}  			}    				#endregion    			else  			{  				throw new Exception("The Collapsible Splitter control cannot have the Filled or None Dockstyle property");  			}
Magic Number,OpenCBS.GUI.UserControl,CollapsibleSplitter,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CollapsibleSplitter.cs,OnPaint,The following statement contains a magic number: if(this.Dock == DockStyle.Left || this.Dock == DockStyle.Right)  			{  				// create a new rectangle in the vertical center of the splitter for our collapse control button  				rr = new Rectangle(r.X' (int)r.Y + ((r.Height - 115)/2)' 8' 115);  				// force the width to 8px so that everything always draws correctly  				this.Width = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}    				// draw the top & bottom lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y' rr.X + rr.Width - 2' rr.Y);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y + rr.Height' rr.X + rr.Width - 2' rr.Y + rr.Height);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + 3));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + rr.Height - 9));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 3;  				int y = rr.Y + 14;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y + (i*3)' x+1' y + 1 + (i*3));  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x+1' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  						}  						break;    					case VisualStyles.DoubleDots:  						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x - 1' y +(i*3)' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 2' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + 1' y  + (i*3)' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 2' y);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x'y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 2' y' x + 2' y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 90' x + 2' y + 90);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x' y + (i*5)' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1' y + 1 + (i*5)' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x' y +(i*5)' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x' y + (i*5) + 1);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x + 1' y + (i*5));  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*2)' x + 2' y + (i*2));  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Left);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Right);  				}  			}    				#endregion    				// Horizontal Splitter support added in v1.2    				#region Horizontal Splitter    			else if (this.Dock == DockStyle.Top || this.Dock == DockStyle.Bottom)  			{  				// create a new rectangle in the horizontal center of the splitter for our collapse control button  				rr = new Rectangle((int)r.X + ((r.Width - 115)/2)' r.Y' 115' 8);  				// force the height to 8px  				this.Height = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}    				// draw the left & right lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X' rr.Y + 1' rr.X' rr.Y + rr.Height - 2);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + rr.Width' rr.Y + 1' rr.X + rr.Width' rr.Y + rr.Height - 2);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 3' rr.Y + 2));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X +  rr.Width - 9' rr.Y + 2));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 14;  				int y = rr.Y + 3;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x + (i*3)' y' x + 1 + (i*3)' y + 1);  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x + 1 + (i*3)' y + 1' x + 2 + (i*3)' y + 2);  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)'  x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  						}  						break;    					case VisualStyles.DoubleDots:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y - 1' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y + 2' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y + 1' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 88' y);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 2' x + 88' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 88' y' x + 88' y + 2);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x + (i*5)' y' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*5)' y + 1' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x +(i*5)' y' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5) + 1' y);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5)' y + 1);  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*2)' y' x + (i*2)' y + 2);  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Top);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Bottom);  				}  			}    				#endregion    			else  			{  				throw new Exception("The Collapsible Splitter control cannot have the Filled or None Dockstyle property");  			}
Magic Number,OpenCBS.GUI.UserControl,CollapsibleSplitter,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CollapsibleSplitter.cs,OnPaint,The following statement contains a magic number: if(this.Dock == DockStyle.Left || this.Dock == DockStyle.Right)  			{  				// create a new rectangle in the vertical center of the splitter for our collapse control button  				rr = new Rectangle(r.X' (int)r.Y + ((r.Height - 115)/2)' 8' 115);  				// force the width to 8px so that everything always draws correctly  				this.Width = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}    				// draw the top & bottom lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y' rr.X + rr.Width - 2' rr.Y);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y + rr.Height' rr.X + rr.Width - 2' rr.Y + rr.Height);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + 3));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + rr.Height - 9));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 3;  				int y = rr.Y + 14;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y + (i*3)' x+1' y + 1 + (i*3));  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x+1' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  						}  						break;    					case VisualStyles.DoubleDots:  						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x - 1' y +(i*3)' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 2' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + 1' y  + (i*3)' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 2' y);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x'y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 2' y' x + 2' y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 90' x + 2' y + 90);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x' y + (i*5)' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1' y + 1 + (i*5)' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x' y +(i*5)' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x' y + (i*5) + 1);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x + 1' y + (i*5));  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*2)' x + 2' y + (i*2));  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Left);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Right);  				}  			}    				#endregion    				// Horizontal Splitter support added in v1.2    				#region Horizontal Splitter    			else if (this.Dock == DockStyle.Top || this.Dock == DockStyle.Bottom)  			{  				// create a new rectangle in the horizontal center of the splitter for our collapse control button  				rr = new Rectangle((int)r.X + ((r.Width - 115)/2)' r.Y' 115' 8);  				// force the height to 8px  				this.Height = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}    				// draw the left & right lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X' rr.Y + 1' rr.X' rr.Y + rr.Height - 2);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + rr.Width' rr.Y + 1' rr.X + rr.Width' rr.Y + rr.Height - 2);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 3' rr.Y + 2));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X +  rr.Width - 9' rr.Y + 2));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 14;  				int y = rr.Y + 3;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x + (i*3)' y' x + 1 + (i*3)' y + 1);  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x + 1 + (i*3)' y + 1' x + 2 + (i*3)' y + 2);  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)'  x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  						}  						break;    					case VisualStyles.DoubleDots:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y - 1' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y + 2' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y + 1' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 88' y);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 2' x + 88' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 88' y' x + 88' y + 2);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x + (i*5)' y' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*5)' y + 1' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x +(i*5)' y' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5) + 1' y);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5)' y + 1);  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*2)' y' x + (i*2)' y + 2);  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Top);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Bottom);  				}  			}    				#endregion    			else  			{  				throw new Exception("The Collapsible Splitter control cannot have the Filled or None Dockstyle property");  			}
Magic Number,OpenCBS.GUI.UserControl,CollapsibleSplitter,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CollapsibleSplitter.cs,OnPaint,The following statement contains a magic number: if(this.Dock == DockStyle.Left || this.Dock == DockStyle.Right)  			{  				// create a new rectangle in the vertical center of the splitter for our collapse control button  				rr = new Rectangle(r.X' (int)r.Y + ((r.Height - 115)/2)' 8' 115);  				// force the width to 8px so that everything always draws correctly  				this.Width = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}    				// draw the top & bottom lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y' rr.X + rr.Width - 2' rr.Y);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y + rr.Height' rr.X + rr.Width - 2' rr.Y + rr.Height);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + 3));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + rr.Height - 9));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 3;  				int y = rr.Y + 14;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y + (i*3)' x+1' y + 1 + (i*3));  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x+1' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  						}  						break;    					case VisualStyles.DoubleDots:  						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x - 1' y +(i*3)' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 2' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + 1' y  + (i*3)' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 2' y);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x'y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 2' y' x + 2' y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 90' x + 2' y + 90);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x' y + (i*5)' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1' y + 1 + (i*5)' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x' y +(i*5)' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x' y + (i*5) + 1);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x + 1' y + (i*5));  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*2)' x + 2' y + (i*2));  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Left);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Right);  				}  			}    				#endregion    				// Horizontal Splitter support added in v1.2    				#region Horizontal Splitter    			else if (this.Dock == DockStyle.Top || this.Dock == DockStyle.Bottom)  			{  				// create a new rectangle in the horizontal center of the splitter for our collapse control button  				rr = new Rectangle((int)r.X + ((r.Width - 115)/2)' r.Y' 115' 8);  				// force the height to 8px  				this.Height = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}    				// draw the left & right lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X' rr.Y + 1' rr.X' rr.Y + rr.Height - 2);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + rr.Width' rr.Y + 1' rr.X + rr.Width' rr.Y + rr.Height - 2);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 3' rr.Y + 2));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X +  rr.Width - 9' rr.Y + 2));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 14;  				int y = rr.Y + 3;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x + (i*3)' y' x + 1 + (i*3)' y + 1);  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x + 1 + (i*3)' y + 1' x + 2 + (i*3)' y + 2);  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)'  x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  						}  						break;    					case VisualStyles.DoubleDots:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y - 1' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y + 2' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y + 1' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 88' y);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 2' x + 88' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 88' y' x + 88' y + 2);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x + (i*5)' y' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*5)' y + 1' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x +(i*5)' y' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5) + 1' y);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5)' y + 1);  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*2)' y' x + (i*2)' y + 2);  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Top);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Bottom);  				}  			}    				#endregion    			else  			{  				throw new Exception("The Collapsible Splitter control cannot have the Filled or None Dockstyle property");  			}
Magic Number,OpenCBS.GUI.UserControl,CollapsibleSplitter,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CollapsibleSplitter.cs,OnPaint,The following statement contains a magic number: if(this.Dock == DockStyle.Left || this.Dock == DockStyle.Right)  			{  				// create a new rectangle in the vertical center of the splitter for our collapse control button  				rr = new Rectangle(r.X' (int)r.Y + ((r.Height - 115)/2)' 8' 115);  				// force the width to 8px so that everything always draws correctly  				this.Width = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}    				// draw the top & bottom lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y' rr.X + rr.Width - 2' rr.Y);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y + rr.Height' rr.X + rr.Width - 2' rr.Y + rr.Height);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + 3));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + rr.Height - 9));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 3;  				int y = rr.Y + 14;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y + (i*3)' x+1' y + 1 + (i*3));  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x+1' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  						}  						break;    					case VisualStyles.DoubleDots:  						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x - 1' y +(i*3)' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 2' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + 1' y  + (i*3)' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 2' y);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x'y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 2' y' x + 2' y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 90' x + 2' y + 90);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x' y + (i*5)' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1' y + 1 + (i*5)' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x' y +(i*5)' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x' y + (i*5) + 1);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x + 1' y + (i*5));  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*2)' x + 2' y + (i*2));  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Left);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Right);  				}  			}    				#endregion    				// Horizontal Splitter support added in v1.2    				#region Horizontal Splitter    			else if (this.Dock == DockStyle.Top || this.Dock == DockStyle.Bottom)  			{  				// create a new rectangle in the horizontal center of the splitter for our collapse control button  				rr = new Rectangle((int)r.X + ((r.Width - 115)/2)' r.Y' 115' 8);  				// force the height to 8px  				this.Height = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}    				// draw the left & right lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X' rr.Y + 1' rr.X' rr.Y + rr.Height - 2);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + rr.Width' rr.Y + 1' rr.X + rr.Width' rr.Y + rr.Height - 2);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 3' rr.Y + 2));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X +  rr.Width - 9' rr.Y + 2));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 14;  				int y = rr.Y + 3;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x + (i*3)' y' x + 1 + (i*3)' y + 1);  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x + 1 + (i*3)' y + 1' x + 2 + (i*3)' y + 2);  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)'  x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  						}  						break;    					case VisualStyles.DoubleDots:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y - 1' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y + 2' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y + 1' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 88' y);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 2' x + 88' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 88' y' x + 88' y + 2);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x + (i*5)' y' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*5)' y + 1' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x +(i*5)' y' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5) + 1' y);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5)' y + 1);  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*2)' y' x + (i*2)' y + 2);  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Top);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Bottom);  				}  			}    				#endregion    			else  			{  				throw new Exception("The Collapsible Splitter control cannot have the Filled or None Dockstyle property");  			}
Magic Number,OpenCBS.GUI.UserControl,CollapsibleSplitter,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CollapsibleSplitter.cs,OnPaint,The following statement contains a magic number: if(this.Dock == DockStyle.Left || this.Dock == DockStyle.Right)  			{  				// create a new rectangle in the vertical center of the splitter for our collapse control button  				rr = new Rectangle(r.X' (int)r.Y + ((r.Height - 115)/2)' 8' 115);  				// force the width to 8px so that everything always draws correctly  				this.Width = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}    				// draw the top & bottom lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y' rr.X + rr.Width - 2' rr.Y);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y + rr.Height' rr.X + rr.Width - 2' rr.Y + rr.Height);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + 3));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + rr.Height - 9));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 3;  				int y = rr.Y + 14;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y + (i*3)' x+1' y + 1 + (i*3));  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x+1' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  						}  						break;    					case VisualStyles.DoubleDots:  						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x - 1' y +(i*3)' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 2' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + 1' y  + (i*3)' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 2' y);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x'y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 2' y' x + 2' y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 90' x + 2' y + 90);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x' y + (i*5)' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1' y + 1 + (i*5)' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x' y +(i*5)' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x' y + (i*5) + 1);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x + 1' y + (i*5));  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*2)' x + 2' y + (i*2));  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Left);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Right);  				}  			}    				#endregion    				// Horizontal Splitter support added in v1.2    				#region Horizontal Splitter    			else if (this.Dock == DockStyle.Top || this.Dock == DockStyle.Bottom)  			{  				// create a new rectangle in the horizontal center of the splitter for our collapse control button  				rr = new Rectangle((int)r.X + ((r.Width - 115)/2)' r.Y' 115' 8);  				// force the height to 8px  				this.Height = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}    				// draw the left & right lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X' rr.Y + 1' rr.X' rr.Y + rr.Height - 2);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + rr.Width' rr.Y + 1' rr.X + rr.Width' rr.Y + rr.Height - 2);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 3' rr.Y + 2));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X +  rr.Width - 9' rr.Y + 2));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 14;  				int y = rr.Y + 3;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x + (i*3)' y' x + 1 + (i*3)' y + 1);  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x + 1 + (i*3)' y + 1' x + 2 + (i*3)' y + 2);  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)'  x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  						}  						break;    					case VisualStyles.DoubleDots:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y - 1' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y + 2' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y + 1' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 88' y);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 2' x + 88' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 88' y' x + 88' y + 2);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x + (i*5)' y' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*5)' y + 1' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x +(i*5)' y' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5) + 1' y);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5)' y + 1);  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*2)' y' x + (i*2)' y + 2);  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Top);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Bottom);  				}  			}    				#endregion    			else  			{  				throw new Exception("The Collapsible Splitter control cannot have the Filled or None Dockstyle property");  			}
Magic Number,OpenCBS.GUI.UserControl,CollapsibleSplitter,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CollapsibleSplitter.cs,OnPaint,The following statement contains a magic number: if(this.Dock == DockStyle.Left || this.Dock == DockStyle.Right)  			{  				// create a new rectangle in the vertical center of the splitter for our collapse control button  				rr = new Rectangle(r.X' (int)r.Y + ((r.Height - 115)/2)' 8' 115);  				// force the width to 8px so that everything always draws correctly  				this.Width = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}    				// draw the top & bottom lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y' rr.X + rr.Width - 2' rr.Y);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y + rr.Height' rr.X + rr.Width - 2' rr.Y + rr.Height);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + 3));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + rr.Height - 9));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 3;  				int y = rr.Y + 14;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y + (i*3)' x+1' y + 1 + (i*3));  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x+1' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  						}  						break;    					case VisualStyles.DoubleDots:  						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x - 1' y +(i*3)' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 2' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + 1' y  + (i*3)' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 2' y);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x'y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 2' y' x + 2' y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 90' x + 2' y + 90);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x' y + (i*5)' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1' y + 1 + (i*5)' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x' y +(i*5)' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x' y + (i*5) + 1);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x + 1' y + (i*5));  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*2)' x + 2' y + (i*2));  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Left);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Right);  				}  			}    				#endregion    				// Horizontal Splitter support added in v1.2    				#region Horizontal Splitter    			else if (this.Dock == DockStyle.Top || this.Dock == DockStyle.Bottom)  			{  				// create a new rectangle in the horizontal center of the splitter for our collapse control button  				rr = new Rectangle((int)r.X + ((r.Width - 115)/2)' r.Y' 115' 8);  				// force the height to 8px  				this.Height = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}    				// draw the left & right lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X' rr.Y + 1' rr.X' rr.Y + rr.Height - 2);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + rr.Width' rr.Y + 1' rr.X + rr.Width' rr.Y + rr.Height - 2);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 3' rr.Y + 2));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X +  rr.Width - 9' rr.Y + 2));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 14;  				int y = rr.Y + 3;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x + (i*3)' y' x + 1 + (i*3)' y + 1);  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x + 1 + (i*3)' y + 1' x + 2 + (i*3)' y + 2);  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)'  x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  						}  						break;    					case VisualStyles.DoubleDots:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y - 1' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y + 2' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y + 1' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 88' y);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 2' x + 88' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 88' y' x + 88' y + 2);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x + (i*5)' y' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*5)' y + 1' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x +(i*5)' y' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5) + 1' y);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5)' y + 1);  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*2)' y' x + (i*2)' y + 2);  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Top);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Bottom);  				}  			}    				#endregion    			else  			{  				throw new Exception("The Collapsible Splitter control cannot have the Filled or None Dockstyle property");  			}
Magic Number,OpenCBS.GUI.UserControl,CollapsibleSplitter,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CollapsibleSplitter.cs,OnPaint,The following statement contains a magic number: if(this.Dock == DockStyle.Left || this.Dock == DockStyle.Right)  			{  				// create a new rectangle in the vertical center of the splitter for our collapse control button  				rr = new Rectangle(r.X' (int)r.Y + ((r.Height - 115)/2)' 8' 115);  				// force the width to 8px so that everything always draws correctly  				this.Width = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}    				// draw the top & bottom lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y' rr.X + rr.Width - 2' rr.Y);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y + rr.Height' rr.X + rr.Width - 2' rr.Y + rr.Height);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + 3));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + rr.Height - 9));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 3;  				int y = rr.Y + 14;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y + (i*3)' x+1' y + 1 + (i*3));  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x+1' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  						}  						break;    					case VisualStyles.DoubleDots:  						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x - 1' y +(i*3)' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 2' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + 1' y  + (i*3)' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 2' y);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x'y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 2' y' x + 2' y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 90' x + 2' y + 90);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x' y + (i*5)' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1' y + 1 + (i*5)' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x' y +(i*5)' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x' y + (i*5) + 1);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x + 1' y + (i*5));  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*2)' x + 2' y + (i*2));  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Left);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Right);  				}  			}    				#endregion    				// Horizontal Splitter support added in v1.2    				#region Horizontal Splitter    			else if (this.Dock == DockStyle.Top || this.Dock == DockStyle.Bottom)  			{  				// create a new rectangle in the horizontal center of the splitter for our collapse control button  				rr = new Rectangle((int)r.X + ((r.Width - 115)/2)' r.Y' 115' 8);  				// force the height to 8px  				this.Height = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}    				// draw the left & right lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X' rr.Y + 1' rr.X' rr.Y + rr.Height - 2);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + rr.Width' rr.Y + 1' rr.X + rr.Width' rr.Y + rr.Height - 2);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 3' rr.Y + 2));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X +  rr.Width - 9' rr.Y + 2));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 14;  				int y = rr.Y + 3;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x + (i*3)' y' x + 1 + (i*3)' y + 1);  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x + 1 + (i*3)' y + 1' x + 2 + (i*3)' y + 2);  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)'  x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  						}  						break;    					case VisualStyles.DoubleDots:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y - 1' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y + 2' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y + 1' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 88' y);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 2' x + 88' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 88' y' x + 88' y + 2);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x + (i*5)' y' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*5)' y + 1' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x +(i*5)' y' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5) + 1' y);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5)' y + 1);  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*2)' y' x + (i*2)' y + 2);  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Top);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Bottom);  				}  			}    				#endregion    			else  			{  				throw new Exception("The Collapsible Splitter control cannot have the Filled or None Dockstyle property");  			}
Magic Number,OpenCBS.GUI.UserControl,CollapsibleSplitter,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CollapsibleSplitter.cs,OnPaint,The following statement contains a magic number: if(this.Dock == DockStyle.Left || this.Dock == DockStyle.Right)  			{  				// create a new rectangle in the vertical center of the splitter for our collapse control button  				rr = new Rectangle(r.X' (int)r.Y + ((r.Height - 115)/2)' 8' 115);  				// force the width to 8px so that everything always draws correctly  				this.Width = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}    				// draw the top & bottom lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y' rr.X + rr.Width - 2' rr.Y);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y + rr.Height' rr.X + rr.Width - 2' rr.Y + rr.Height);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + 3));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + rr.Height - 9));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 3;  				int y = rr.Y + 14;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y + (i*3)' x+1' y + 1 + (i*3));  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x+1' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  						}  						break;    					case VisualStyles.DoubleDots:  						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x - 1' y +(i*3)' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 2' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + 1' y  + (i*3)' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 2' y);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x'y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 2' y' x + 2' y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 90' x + 2' y + 90);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x' y + (i*5)' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1' y + 1 + (i*5)' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x' y +(i*5)' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x' y + (i*5) + 1);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x + 1' y + (i*5));  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*2)' x + 2' y + (i*2));  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Left);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Right);  				}  			}    				#endregion    				// Horizontal Splitter support added in v1.2    				#region Horizontal Splitter    			else if (this.Dock == DockStyle.Top || this.Dock == DockStyle.Bottom)  			{  				// create a new rectangle in the horizontal center of the splitter for our collapse control button  				rr = new Rectangle((int)r.X + ((r.Width - 115)/2)' r.Y' 115' 8);  				// force the height to 8px  				this.Height = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}    				// draw the left & right lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X' rr.Y + 1' rr.X' rr.Y + rr.Height - 2);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + rr.Width' rr.Y + 1' rr.X + rr.Width' rr.Y + rr.Height - 2);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 3' rr.Y + 2));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X +  rr.Width - 9' rr.Y + 2));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 14;  				int y = rr.Y + 3;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x + (i*3)' y' x + 1 + (i*3)' y + 1);  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x + 1 + (i*3)' y + 1' x + 2 + (i*3)' y + 2);  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)'  x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  						}  						break;    					case VisualStyles.DoubleDots:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y - 1' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y + 2' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y + 1' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 88' y);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 2' x + 88' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 88' y' x + 88' y + 2);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x + (i*5)' y' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*5)' y + 1' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x +(i*5)' y' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5) + 1' y);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5)' y + 1);  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*2)' y' x + (i*2)' y + 2);  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Top);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Bottom);  				}  			}    				#endregion    			else  			{  				throw new Exception("The Collapsible Splitter control cannot have the Filled or None Dockstyle property");  			}
Magic Number,OpenCBS.GUI.UserControl,CollapsibleSplitter,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CollapsibleSplitter.cs,OnPaint,The following statement contains a magic number: if(this.Dock == DockStyle.Left || this.Dock == DockStyle.Right)  			{  				// create a new rectangle in the vertical center of the splitter for our collapse control button  				rr = new Rectangle(r.X' (int)r.Y + ((r.Height - 115)/2)' 8' 115);  				// force the width to 8px so that everything always draws correctly  				this.Width = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}    				// draw the top & bottom lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y' rr.X + rr.Width - 2' rr.Y);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y + rr.Height' rr.X + rr.Width - 2' rr.Y + rr.Height);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + 3));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + rr.Height - 9));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 3;  				int y = rr.Y + 14;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y + (i*3)' x+1' y + 1 + (i*3));  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x+1' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  						}  						break;    					case VisualStyles.DoubleDots:  						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x - 1' y +(i*3)' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 2' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + 1' y  + (i*3)' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 2' y);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x'y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 2' y' x + 2' y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 90' x + 2' y + 90);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x' y + (i*5)' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1' y + 1 + (i*5)' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x' y +(i*5)' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x' y + (i*5) + 1);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x + 1' y + (i*5));  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*2)' x + 2' y + (i*2));  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Left);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Right);  				}  			}    				#endregion    				// Horizontal Splitter support added in v1.2    				#region Horizontal Splitter    			else if (this.Dock == DockStyle.Top || this.Dock == DockStyle.Bottom)  			{  				// create a new rectangle in the horizontal center of the splitter for our collapse control button  				rr = new Rectangle((int)r.X + ((r.Width - 115)/2)' r.Y' 115' 8);  				// force the height to 8px  				this.Height = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}    				// draw the left & right lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X' rr.Y + 1' rr.X' rr.Y + rr.Height - 2);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + rr.Width' rr.Y + 1' rr.X + rr.Width' rr.Y + rr.Height - 2);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 3' rr.Y + 2));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X +  rr.Width - 9' rr.Y + 2));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 14;  				int y = rr.Y + 3;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x + (i*3)' y' x + 1 + (i*3)' y + 1);  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x + 1 + (i*3)' y + 1' x + 2 + (i*3)' y + 2);  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)'  x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  						}  						break;    					case VisualStyles.DoubleDots:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y - 1' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y + 2' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y + 1' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 88' y);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 2' x + 88' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 88' y' x + 88' y + 2);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x + (i*5)' y' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*5)' y + 1' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x +(i*5)' y' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5) + 1' y);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5)' y + 1);  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*2)' y' x + (i*2)' y + 2);  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Top);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Bottom);  				}  			}    				#endregion    			else  			{  				throw new Exception("The Collapsible Splitter control cannot have the Filled or None Dockstyle property");  			}
Magic Number,OpenCBS.GUI.UserControl,CollapsibleSplitter,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CollapsibleSplitter.cs,OnPaint,The following statement contains a magic number: if(this.Dock == DockStyle.Left || this.Dock == DockStyle.Right)  			{  				// create a new rectangle in the vertical center of the splitter for our collapse control button  				rr = new Rectangle(r.X' (int)r.Y + ((r.Height - 115)/2)' 8' 115);  				// force the width to 8px so that everything always draws correctly  				this.Width = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}    				// draw the top & bottom lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y' rr.X + rr.Width - 2' rr.Y);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y + rr.Height' rr.X + rr.Width - 2' rr.Y + rr.Height);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + 3));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + rr.Height - 9));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 3;  				int y = rr.Y + 14;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y + (i*3)' x+1' y + 1 + (i*3));  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x+1' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  						}  						break;    					case VisualStyles.DoubleDots:  						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x - 1' y +(i*3)' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 2' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + 1' y  + (i*3)' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 2' y);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x'y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 2' y' x + 2' y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 90' x + 2' y + 90);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x' y + (i*5)' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1' y + 1 + (i*5)' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x' y +(i*5)' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x' y + (i*5) + 1);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x + 1' y + (i*5));  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*2)' x + 2' y + (i*2));  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Left);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Right);  				}  			}    				#endregion    				// Horizontal Splitter support added in v1.2    				#region Horizontal Splitter    			else if (this.Dock == DockStyle.Top || this.Dock == DockStyle.Bottom)  			{  				// create a new rectangle in the horizontal center of the splitter for our collapse control button  				rr = new Rectangle((int)r.X + ((r.Width - 115)/2)' r.Y' 115' 8);  				// force the height to 8px  				this.Height = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}    				// draw the left & right lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X' rr.Y + 1' rr.X' rr.Y + rr.Height - 2);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + rr.Width' rr.Y + 1' rr.X + rr.Width' rr.Y + rr.Height - 2);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 3' rr.Y + 2));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X +  rr.Width - 9' rr.Y + 2));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 14;  				int y = rr.Y + 3;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x + (i*3)' y' x + 1 + (i*3)' y + 1);  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x + 1 + (i*3)' y + 1' x + 2 + (i*3)' y + 2);  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)'  x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  						}  						break;    					case VisualStyles.DoubleDots:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y - 1' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y + 2' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y + 1' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 88' y);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 2' x + 88' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 88' y' x + 88' y + 2);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x + (i*5)' y' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*5)' y + 1' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x +(i*5)' y' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5) + 1' y);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5)' y + 1);  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*2)' y' x + (i*2)' y + 2);  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Top);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Bottom);  				}  			}    				#endregion    			else  			{  				throw new Exception("The Collapsible Splitter control cannot have the Filled or None Dockstyle property");  			}
Magic Number,OpenCBS.GUI.UserControl,CollapsibleSplitter,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CollapsibleSplitter.cs,OnPaint,The following statement contains a magic number: if(this.Dock == DockStyle.Left || this.Dock == DockStyle.Right)  			{  				// create a new rectangle in the vertical center of the splitter for our collapse control button  				rr = new Rectangle(r.X' (int)r.Y + ((r.Height - 115)/2)' 8' 115);  				// force the width to 8px so that everything always draws correctly  				this.Width = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}    				// draw the top & bottom lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y' rr.X + rr.Width - 2' rr.Y);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y + rr.Height' rr.X + rr.Width - 2' rr.Y + rr.Height);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + 3));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + rr.Height - 9));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 3;  				int y = rr.Y + 14;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y + (i*3)' x+1' y + 1 + (i*3));  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x+1' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  						}  						break;    					case VisualStyles.DoubleDots:  						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x - 1' y +(i*3)' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 2' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + 1' y  + (i*3)' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 2' y);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x'y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 2' y' x + 2' y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 90' x + 2' y + 90);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x' y + (i*5)' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1' y + 1 + (i*5)' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x' y +(i*5)' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x' y + (i*5) + 1);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x + 1' y + (i*5));  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*2)' x + 2' y + (i*2));  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Left);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Right);  				}  			}    				#endregion    				// Horizontal Splitter support added in v1.2    				#region Horizontal Splitter    			else if (this.Dock == DockStyle.Top || this.Dock == DockStyle.Bottom)  			{  				// create a new rectangle in the horizontal center of the splitter for our collapse control button  				rr = new Rectangle((int)r.X + ((r.Width - 115)/2)' r.Y' 115' 8);  				// force the height to 8px  				this.Height = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}    				// draw the left & right lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X' rr.Y + 1' rr.X' rr.Y + rr.Height - 2);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + rr.Width' rr.Y + 1' rr.X + rr.Width' rr.Y + rr.Height - 2);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 3' rr.Y + 2));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X +  rr.Width - 9' rr.Y + 2));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 14;  				int y = rr.Y + 3;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x + (i*3)' y' x + 1 + (i*3)' y + 1);  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x + 1 + (i*3)' y + 1' x + 2 + (i*3)' y + 2);  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)'  x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  						}  						break;    					case VisualStyles.DoubleDots:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y - 1' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y + 2' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y + 1' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 88' y);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 2' x + 88' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 88' y' x + 88' y + 2);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x + (i*5)' y' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*5)' y + 1' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x +(i*5)' y' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5) + 1' y);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5)' y + 1);  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*2)' y' x + (i*2)' y + 2);  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Top);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Bottom);  				}  			}    				#endregion    			else  			{  				throw new Exception("The Collapsible Splitter control cannot have the Filled or None Dockstyle property");  			}
Magic Number,OpenCBS.GUI.UserControl,CollapsibleSplitter,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CollapsibleSplitter.cs,OnPaint,The following statement contains a magic number: if(this.Dock == DockStyle.Left || this.Dock == DockStyle.Right)  			{  				// create a new rectangle in the vertical center of the splitter for our collapse control button  				rr = new Rectangle(r.X' (int)r.Y + ((r.Height - 115)/2)' 8' 115);  				// force the width to 8px so that everything always draws correctly  				this.Width = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}    				// draw the top & bottom lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y' rr.X + rr.Width - 2' rr.Y);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y + rr.Height' rr.X + rr.Width - 2' rr.Y + rr.Height);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + 3));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + rr.Height - 9));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 3;  				int y = rr.Y + 14;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y + (i*3)' x+1' y + 1 + (i*3));  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x+1' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  						}  						break;    					case VisualStyles.DoubleDots:  						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x - 1' y +(i*3)' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 2' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + 1' y  + (i*3)' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 2' y);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x'y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 2' y' x + 2' y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 90' x + 2' y + 90);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x' y + (i*5)' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1' y + 1 + (i*5)' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x' y +(i*5)' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x' y + (i*5) + 1);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x + 1' y + (i*5));  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*2)' x + 2' y + (i*2));  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Left);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Right);  				}  			}    				#endregion    				// Horizontal Splitter support added in v1.2    				#region Horizontal Splitter    			else if (this.Dock == DockStyle.Top || this.Dock == DockStyle.Bottom)  			{  				// create a new rectangle in the horizontal center of the splitter for our collapse control button  				rr = new Rectangle((int)r.X + ((r.Width - 115)/2)' r.Y' 115' 8);  				// force the height to 8px  				this.Height = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}    				// draw the left & right lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X' rr.Y + 1' rr.X' rr.Y + rr.Height - 2);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + rr.Width' rr.Y + 1' rr.X + rr.Width' rr.Y + rr.Height - 2);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 3' rr.Y + 2));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X +  rr.Width - 9' rr.Y + 2));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 14;  				int y = rr.Y + 3;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x + (i*3)' y' x + 1 + (i*3)' y + 1);  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x + 1 + (i*3)' y + 1' x + 2 + (i*3)' y + 2);  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)'  x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  						}  						break;    					case VisualStyles.DoubleDots:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y - 1' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y + 2' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y + 1' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 88' y);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 2' x + 88' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 88' y' x + 88' y + 2);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x + (i*5)' y' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*5)' y + 1' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x +(i*5)' y' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5) + 1' y);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5)' y + 1);  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*2)' y' x + (i*2)' y + 2);  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Top);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Bottom);  				}  			}    				#endregion    			else  			{  				throw new Exception("The Collapsible Splitter control cannot have the Filled or None Dockstyle property");  			}
Magic Number,OpenCBS.GUI.UserControl,CollapsibleSplitter,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CollapsibleSplitter.cs,OnPaint,The following statement contains a magic number: if(this.Dock == DockStyle.Left || this.Dock == DockStyle.Right)  			{  				// create a new rectangle in the vertical center of the splitter for our collapse control button  				rr = new Rectangle(r.X' (int)r.Y + ((r.Height - 115)/2)' 8' 115);  				// force the width to 8px so that everything always draws correctly  				this.Width = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}    				// draw the top & bottom lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y' rr.X + rr.Width - 2' rr.Y);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y + rr.Height' rr.X + rr.Width - 2' rr.Y + rr.Height);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + 3));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + rr.Height - 9));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 3;  				int y = rr.Y + 14;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y + (i*3)' x+1' y + 1 + (i*3));  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x+1' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  						}  						break;    					case VisualStyles.DoubleDots:  						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x - 1' y +(i*3)' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 2' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + 1' y  + (i*3)' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 2' y);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x'y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 2' y' x + 2' y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 90' x + 2' y + 90);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x' y + (i*5)' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1' y + 1 + (i*5)' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x' y +(i*5)' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x' y + (i*5) + 1);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x + 1' y + (i*5));  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*2)' x + 2' y + (i*2));  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Left);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Right);  				}  			}    				#endregion    				// Horizontal Splitter support added in v1.2    				#region Horizontal Splitter    			else if (this.Dock == DockStyle.Top || this.Dock == DockStyle.Bottom)  			{  				// create a new rectangle in the horizontal center of the splitter for our collapse control button  				rr = new Rectangle((int)r.X + ((r.Width - 115)/2)' r.Y' 115' 8);  				// force the height to 8px  				this.Height = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}    				// draw the left & right lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X' rr.Y + 1' rr.X' rr.Y + rr.Height - 2);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + rr.Width' rr.Y + 1' rr.X + rr.Width' rr.Y + rr.Height - 2);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 3' rr.Y + 2));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X +  rr.Width - 9' rr.Y + 2));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 14;  				int y = rr.Y + 3;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x + (i*3)' y' x + 1 + (i*3)' y + 1);  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x + 1 + (i*3)' y + 1' x + 2 + (i*3)' y + 2);  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)'  x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  						}  						break;    					case VisualStyles.DoubleDots:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y - 1' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y + 2' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y + 1' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 88' y);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 2' x + 88' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 88' y' x + 88' y + 2);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x + (i*5)' y' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*5)' y + 1' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x +(i*5)' y' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5) + 1' y);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5)' y + 1);  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*2)' y' x + (i*2)' y + 2);  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Top);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Bottom);  				}  			}    				#endregion    			else  			{  				throw new Exception("The Collapsible Splitter control cannot have the Filled or None Dockstyle property");  			}
Magic Number,OpenCBS.GUI.UserControl,CollapsibleSplitter,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CollapsibleSplitter.cs,OnPaint,The following statement contains a magic number: if(this.Dock == DockStyle.Left || this.Dock == DockStyle.Right)  			{  				// create a new rectangle in the vertical center of the splitter for our collapse control button  				rr = new Rectangle(r.X' (int)r.Y + ((r.Height - 115)/2)' 8' 115);  				// force the width to 8px so that everything always draws correctly  				this.Width = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}    				// draw the top & bottom lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y' rr.X + rr.Width - 2' rr.Y);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y + rr.Height' rr.X + rr.Width - 2' rr.Y + rr.Height);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + 3));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + rr.Height - 9));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 3;  				int y = rr.Y + 14;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y + (i*3)' x+1' y + 1 + (i*3));  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x+1' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  						}  						break;    					case VisualStyles.DoubleDots:  						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x - 1' y +(i*3)' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 2' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + 1' y  + (i*3)' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 2' y);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x'y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 2' y' x + 2' y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 90' x + 2' y + 90);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x' y + (i*5)' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1' y + 1 + (i*5)' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x' y +(i*5)' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x' y + (i*5) + 1);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x + 1' y + (i*5));  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*2)' x + 2' y + (i*2));  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Left);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Right);  				}  			}    				#endregion    				// Horizontal Splitter support added in v1.2    				#region Horizontal Splitter    			else if (this.Dock == DockStyle.Top || this.Dock == DockStyle.Bottom)  			{  				// create a new rectangle in the horizontal center of the splitter for our collapse control button  				rr = new Rectangle((int)r.X + ((r.Width - 115)/2)' r.Y' 115' 8);  				// force the height to 8px  				this.Height = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}    				// draw the left & right lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X' rr.Y + 1' rr.X' rr.Y + rr.Height - 2);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + rr.Width' rr.Y + 1' rr.X + rr.Width' rr.Y + rr.Height - 2);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 3' rr.Y + 2));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X +  rr.Width - 9' rr.Y + 2));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 14;  				int y = rr.Y + 3;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x + (i*3)' y' x + 1 + (i*3)' y + 1);  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x + 1 + (i*3)' y + 1' x + 2 + (i*3)' y + 2);  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)'  x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  						}  						break;    					case VisualStyles.DoubleDots:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y - 1' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y + 2' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y + 1' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 88' y);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 2' x + 88' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 88' y' x + 88' y + 2);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x + (i*5)' y' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*5)' y + 1' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x +(i*5)' y' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5) + 1' y);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5)' y + 1);  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*2)' y' x + (i*2)' y + 2);  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Top);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Bottom);  				}  			}    				#endregion    			else  			{  				throw new Exception("The Collapsible Splitter control cannot have the Filled or None Dockstyle property");  			}
Magic Number,OpenCBS.GUI.UserControl,CollapsibleSplitter,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CollapsibleSplitter.cs,OnPaint,The following statement contains a magic number: if(this.Dock == DockStyle.Left || this.Dock == DockStyle.Right)  			{  				// create a new rectangle in the vertical center of the splitter for our collapse control button  				rr = new Rectangle(r.X' (int)r.Y + ((r.Height - 115)/2)' 8' 115);  				// force the width to 8px so that everything always draws correctly  				this.Width = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}    				// draw the top & bottom lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y' rr.X + rr.Width - 2' rr.Y);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y + rr.Height' rr.X + rr.Width - 2' rr.Y + rr.Height);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + 3));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + rr.Height - 9));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 3;  				int y = rr.Y + 14;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y + (i*3)' x+1' y + 1 + (i*3));  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x+1' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  						}  						break;    					case VisualStyles.DoubleDots:  						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x - 1' y +(i*3)' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 2' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + 1' y  + (i*3)' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 2' y);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x'y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 2' y' x + 2' y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 90' x + 2' y + 90);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x' y + (i*5)' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1' y + 1 + (i*5)' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x' y +(i*5)' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x' y + (i*5) + 1);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x + 1' y + (i*5));  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*2)' x + 2' y + (i*2));  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Left);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Right);  				}  			}    				#endregion    				// Horizontal Splitter support added in v1.2    				#region Horizontal Splitter    			else if (this.Dock == DockStyle.Top || this.Dock == DockStyle.Bottom)  			{  				// create a new rectangle in the horizontal center of the splitter for our collapse control button  				rr = new Rectangle((int)r.X + ((r.Width - 115)/2)' r.Y' 115' 8);  				// force the height to 8px  				this.Height = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}    				// draw the left & right lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X' rr.Y + 1' rr.X' rr.Y + rr.Height - 2);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + rr.Width' rr.Y + 1' rr.X + rr.Width' rr.Y + rr.Height - 2);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 3' rr.Y + 2));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X +  rr.Width - 9' rr.Y + 2));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 14;  				int y = rr.Y + 3;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x + (i*3)' y' x + 1 + (i*3)' y + 1);  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x + 1 + (i*3)' y + 1' x + 2 + (i*3)' y + 2);  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)'  x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  						}  						break;    					case VisualStyles.DoubleDots:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y - 1' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y + 2' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y + 1' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 88' y);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 2' x + 88' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 88' y' x + 88' y + 2);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x + (i*5)' y' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*5)' y + 1' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x +(i*5)' y' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5) + 1' y);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5)' y + 1);  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*2)' y' x + (i*2)' y + 2);  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Top);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Bottom);  				}  			}    				#endregion    			else  			{  				throw new Exception("The Collapsible Splitter control cannot have the Filled or None Dockstyle property");  			}
Magic Number,OpenCBS.GUI.UserControl,CollapsibleSplitter,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CollapsibleSplitter.cs,OnPaint,The following statement contains a magic number: if(this.Dock == DockStyle.Left || this.Dock == DockStyle.Right)  			{  				// create a new rectangle in the vertical center of the splitter for our collapse control button  				rr = new Rectangle(r.X' (int)r.Y + ((r.Height - 115)/2)' 8' 115);  				// force the width to 8px so that everything always draws correctly  				this.Width = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}    				// draw the top & bottom lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y' rr.X + rr.Width - 2' rr.Y);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y + rr.Height' rr.X + rr.Width - 2' rr.Y + rr.Height);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + 3));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + rr.Height - 9));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 3;  				int y = rr.Y + 14;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y + (i*3)' x+1' y + 1 + (i*3));  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x+1' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  						}  						break;    					case VisualStyles.DoubleDots:  						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x - 1' y +(i*3)' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 2' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + 1' y  + (i*3)' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 2' y);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x'y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 2' y' x + 2' y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 90' x + 2' y + 90);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x' y + (i*5)' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1' y + 1 + (i*5)' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x' y +(i*5)' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x' y + (i*5) + 1);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x + 1' y + (i*5));  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*2)' x + 2' y + (i*2));  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Left);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Right);  				}  			}    				#endregion    				// Horizontal Splitter support added in v1.2    				#region Horizontal Splitter    			else if (this.Dock == DockStyle.Top || this.Dock == DockStyle.Bottom)  			{  				// create a new rectangle in the horizontal center of the splitter for our collapse control button  				rr = new Rectangle((int)r.X + ((r.Width - 115)/2)' r.Y' 115' 8);  				// force the height to 8px  				this.Height = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}    				// draw the left & right lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X' rr.Y + 1' rr.X' rr.Y + rr.Height - 2);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + rr.Width' rr.Y + 1' rr.X + rr.Width' rr.Y + rr.Height - 2);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 3' rr.Y + 2));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X +  rr.Width - 9' rr.Y + 2));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 14;  				int y = rr.Y + 3;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x + (i*3)' y' x + 1 + (i*3)' y + 1);  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x + 1 + (i*3)' y + 1' x + 2 + (i*3)' y + 2);  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)'  x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  						}  						break;    					case VisualStyles.DoubleDots:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y - 1' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y + 2' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y + 1' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 88' y);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 2' x + 88' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 88' y' x + 88' y + 2);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x + (i*5)' y' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*5)' y + 1' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x +(i*5)' y' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5) + 1' y);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5)' y + 1);  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*2)' y' x + (i*2)' y + 2);  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Top);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Bottom);  				}  			}    				#endregion    			else  			{  				throw new Exception("The Collapsible Splitter control cannot have the Filled or None Dockstyle property");  			}
Magic Number,OpenCBS.GUI.UserControl,CollapsibleSplitter,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CollapsibleSplitter.cs,OnPaint,The following statement contains a magic number: if(this.Dock == DockStyle.Left || this.Dock == DockStyle.Right)  			{  				// create a new rectangle in the vertical center of the splitter for our collapse control button  				rr = new Rectangle(r.X' (int)r.Y + ((r.Height - 115)/2)' 8' 115);  				// force the width to 8px so that everything always draws correctly  				this.Width = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}    				// draw the top & bottom lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y' rr.X + rr.Width - 2' rr.Y);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y + rr.Height' rr.X + rr.Width - 2' rr.Y + rr.Height);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + 3));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + rr.Height - 9));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 3;  				int y = rr.Y + 14;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y + (i*3)' x+1' y + 1 + (i*3));  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x+1' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  						}  						break;    					case VisualStyles.DoubleDots:  						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x - 1' y +(i*3)' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 2' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + 1' y  + (i*3)' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 2' y);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x'y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 2' y' x + 2' y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 90' x + 2' y + 90);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x' y + (i*5)' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1' y + 1 + (i*5)' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x' y +(i*5)' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x' y + (i*5) + 1);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x + 1' y + (i*5));  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*2)' x + 2' y + (i*2));  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Left);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Right);  				}  			}    				#endregion    				// Horizontal Splitter support added in v1.2    				#region Horizontal Splitter    			else if (this.Dock == DockStyle.Top || this.Dock == DockStyle.Bottom)  			{  				// create a new rectangle in the horizontal center of the splitter for our collapse control button  				rr = new Rectangle((int)r.X + ((r.Width - 115)/2)' r.Y' 115' 8);  				// force the height to 8px  				this.Height = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}    				// draw the left & right lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X' rr.Y + 1' rr.X' rr.Y + rr.Height - 2);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + rr.Width' rr.Y + 1' rr.X + rr.Width' rr.Y + rr.Height - 2);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 3' rr.Y + 2));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X +  rr.Width - 9' rr.Y + 2));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 14;  				int y = rr.Y + 3;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x + (i*3)' y' x + 1 + (i*3)' y + 1);  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x + 1 + (i*3)' y + 1' x + 2 + (i*3)' y + 2);  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)'  x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  						}  						break;    					case VisualStyles.DoubleDots:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y - 1' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y + 2' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y + 1' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 88' y);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 2' x + 88' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 88' y' x + 88' y + 2);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x + (i*5)' y' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*5)' y + 1' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x +(i*5)' y' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5) + 1' y);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5)' y + 1);  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*2)' y' x + (i*2)' y + 2);  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Top);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Bottom);  				}  			}    				#endregion    			else  			{  				throw new Exception("The Collapsible Splitter control cannot have the Filled or None Dockstyle property");  			}
Magic Number,OpenCBS.GUI.UserControl,CollapsibleSplitter,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CollapsibleSplitter.cs,OnPaint,The following statement contains a magic number: if(this.Dock == DockStyle.Left || this.Dock == DockStyle.Right)  			{  				// create a new rectangle in the vertical center of the splitter for our collapse control button  				rr = new Rectangle(r.X' (int)r.Y + ((r.Height - 115)/2)' 8' 115);  				// force the width to 8px so that everything always draws correctly  				this.Width = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}    				// draw the top & bottom lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y' rr.X + rr.Width - 2' rr.Y);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y + rr.Height' rr.X + rr.Width - 2' rr.Y + rr.Height);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + 3));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + rr.Height - 9));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 3;  				int y = rr.Y + 14;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y + (i*3)' x+1' y + 1 + (i*3));  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x+1' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  						}  						break;    					case VisualStyles.DoubleDots:  						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x - 1' y +(i*3)' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 2' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + 1' y  + (i*3)' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 2' y);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x'y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 2' y' x + 2' y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 90' x + 2' y + 90);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x' y + (i*5)' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1' y + 1 + (i*5)' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x' y +(i*5)' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x' y + (i*5) + 1);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x + 1' y + (i*5));  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*2)' x + 2' y + (i*2));  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Left);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Right);  				}  			}    				#endregion    				// Horizontal Splitter support added in v1.2    				#region Horizontal Splitter    			else if (this.Dock == DockStyle.Top || this.Dock == DockStyle.Bottom)  			{  				// create a new rectangle in the horizontal center of the splitter for our collapse control button  				rr = new Rectangle((int)r.X + ((r.Width - 115)/2)' r.Y' 115' 8);  				// force the height to 8px  				this.Height = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}    				// draw the left & right lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X' rr.Y + 1' rr.X' rr.Y + rr.Height - 2);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + rr.Width' rr.Y + 1' rr.X + rr.Width' rr.Y + rr.Height - 2);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 3' rr.Y + 2));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X +  rr.Width - 9' rr.Y + 2));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 14;  				int y = rr.Y + 3;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x + (i*3)' y' x + 1 + (i*3)' y + 1);  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x + 1 + (i*3)' y + 1' x + 2 + (i*3)' y + 2);  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)'  x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  						}  						break;    					case VisualStyles.DoubleDots:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y - 1' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y + 2' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y + 1' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 88' y);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 2' x + 88' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 88' y' x + 88' y + 2);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x + (i*5)' y' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*5)' y + 1' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x +(i*5)' y' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5) + 1' y);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5)' y + 1);  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*2)' y' x + (i*2)' y + 2);  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Top);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Bottom);  				}  			}    				#endregion    			else  			{  				throw new Exception("The Collapsible Splitter control cannot have the Filled or None Dockstyle property");  			}
Magic Number,OpenCBS.GUI.UserControl,CollapsibleSplitter,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CollapsibleSplitter.cs,OnPaint,The following statement contains a magic number: if(this.Dock == DockStyle.Left || this.Dock == DockStyle.Right)  			{  				// create a new rectangle in the vertical center of the splitter for our collapse control button  				rr = new Rectangle(r.X' (int)r.Y + ((r.Height - 115)/2)' 8' 115);  				// force the width to 8px so that everything always draws correctly  				this.Width = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}    				// draw the top & bottom lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y' rr.X + rr.Width - 2' rr.Y);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y + rr.Height' rr.X + rr.Width - 2' rr.Y + rr.Height);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + 3));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + rr.Height - 9));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 3;  				int y = rr.Y + 14;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y + (i*3)' x+1' y + 1 + (i*3));  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x+1' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  						}  						break;    					case VisualStyles.DoubleDots:  						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x - 1' y +(i*3)' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 2' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + 1' y  + (i*3)' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 2' y);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x'y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 2' y' x + 2' y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 90' x + 2' y + 90);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x' y + (i*5)' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1' y + 1 + (i*5)' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x' y +(i*5)' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x' y + (i*5) + 1);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x + 1' y + (i*5));  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*2)' x + 2' y + (i*2));  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Left);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Right);  				}  			}    				#endregion    				// Horizontal Splitter support added in v1.2    				#region Horizontal Splitter    			else if (this.Dock == DockStyle.Top || this.Dock == DockStyle.Bottom)  			{  				// create a new rectangle in the horizontal center of the splitter for our collapse control button  				rr = new Rectangle((int)r.X + ((r.Width - 115)/2)' r.Y' 115' 8);  				// force the height to 8px  				this.Height = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}    				// draw the left & right lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X' rr.Y + 1' rr.X' rr.Y + rr.Height - 2);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + rr.Width' rr.Y + 1' rr.X + rr.Width' rr.Y + rr.Height - 2);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 3' rr.Y + 2));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X +  rr.Width - 9' rr.Y + 2));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 14;  				int y = rr.Y + 3;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x + (i*3)' y' x + 1 + (i*3)' y + 1);  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x + 1 + (i*3)' y + 1' x + 2 + (i*3)' y + 2);  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)'  x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  						}  						break;    					case VisualStyles.DoubleDots:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y - 1' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y + 2' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y + 1' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 88' y);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 2' x + 88' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 88' y' x + 88' y + 2);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x + (i*5)' y' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*5)' y + 1' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x +(i*5)' y' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5) + 1' y);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5)' y + 1);  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*2)' y' x + (i*2)' y + 2);  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Top);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Bottom);  				}  			}    				#endregion    			else  			{  				throw new Exception("The Collapsible Splitter control cannot have the Filled or None Dockstyle property");  			}
Magic Number,OpenCBS.GUI.UserControl,CollapsibleSplitter,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CollapsibleSplitter.cs,OnPaint,The following statement contains a magic number: if(this.Dock == DockStyle.Left || this.Dock == DockStyle.Right)  			{  				// create a new rectangle in the vertical center of the splitter for our collapse control button  				rr = new Rectangle(r.X' (int)r.Y + ((r.Height - 115)/2)' 8' 115);  				// force the width to 8px so that everything always draws correctly  				this.Width = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}    				// draw the top & bottom lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y' rr.X + rr.Width - 2' rr.Y);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y + rr.Height' rr.X + rr.Width - 2' rr.Y + rr.Height);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + 3));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + rr.Height - 9));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 3;  				int y = rr.Y + 14;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y + (i*3)' x+1' y + 1 + (i*3));  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x+1' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  						}  						break;    					case VisualStyles.DoubleDots:  						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x - 1' y +(i*3)' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 2' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + 1' y  + (i*3)' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 2' y);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x'y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 2' y' x + 2' y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 90' x + 2' y + 90);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x' y + (i*5)' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1' y + 1 + (i*5)' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x' y +(i*5)' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x' y + (i*5) + 1);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x + 1' y + (i*5));  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*2)' x + 2' y + (i*2));  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Left);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Right);  				}  			}    				#endregion    				// Horizontal Splitter support added in v1.2    				#region Horizontal Splitter    			else if (this.Dock == DockStyle.Top || this.Dock == DockStyle.Bottom)  			{  				// create a new rectangle in the horizontal center of the splitter for our collapse control button  				rr = new Rectangle((int)r.X + ((r.Width - 115)/2)' r.Y' 115' 8);  				// force the height to 8px  				this.Height = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}    				// draw the left & right lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X' rr.Y + 1' rr.X' rr.Y + rr.Height - 2);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + rr.Width' rr.Y + 1' rr.X + rr.Width' rr.Y + rr.Height - 2);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 3' rr.Y + 2));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X +  rr.Width - 9' rr.Y + 2));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 14;  				int y = rr.Y + 3;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x + (i*3)' y' x + 1 + (i*3)' y + 1);  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x + 1 + (i*3)' y + 1' x + 2 + (i*3)' y + 2);  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)'  x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  						}  						break;    					case VisualStyles.DoubleDots:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y - 1' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y + 2' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y + 1' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 88' y);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 2' x + 88' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 88' y' x + 88' y + 2);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x + (i*5)' y' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*5)' y + 1' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x +(i*5)' y' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5) + 1' y);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5)' y + 1);  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*2)' y' x + (i*2)' y + 2);  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Top);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Bottom);  				}  			}    				#endregion    			else  			{  				throw new Exception("The Collapsible Splitter control cannot have the Filled or None Dockstyle property");  			}
Magic Number,OpenCBS.GUI.UserControl,CollapsibleSplitter,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CollapsibleSplitter.cs,OnPaint,The following statement contains a magic number: if(this.Dock == DockStyle.Left || this.Dock == DockStyle.Right)  			{  				// create a new rectangle in the vertical center of the splitter for our collapse control button  				rr = new Rectangle(r.X' (int)r.Y + ((r.Height - 115)/2)' 8' 115);  				// force the width to 8px so that everything always draws correctly  				this.Width = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}    				// draw the top & bottom lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y' rr.X + rr.Width - 2' rr.Y);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y + rr.Height' rr.X + rr.Width - 2' rr.Y + rr.Height);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + 3));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + rr.Height - 9));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 3;  				int y = rr.Y + 14;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y + (i*3)' x+1' y + 1 + (i*3));  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x+1' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  						}  						break;    					case VisualStyles.DoubleDots:  						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x - 1' y +(i*3)' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 2' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + 1' y  + (i*3)' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 2' y);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x'y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 2' y' x + 2' y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 90' x + 2' y + 90);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x' y + (i*5)' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1' y + 1 + (i*5)' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x' y +(i*5)' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x' y + (i*5) + 1);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x + 1' y + (i*5));  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*2)' x + 2' y + (i*2));  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Left);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Right);  				}  			}    				#endregion    				// Horizontal Splitter support added in v1.2    				#region Horizontal Splitter    			else if (this.Dock == DockStyle.Top || this.Dock == DockStyle.Bottom)  			{  				// create a new rectangle in the horizontal center of the splitter for our collapse control button  				rr = new Rectangle((int)r.X + ((r.Width - 115)/2)' r.Y' 115' 8);  				// force the height to 8px  				this.Height = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}    				// draw the left & right lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X' rr.Y + 1' rr.X' rr.Y + rr.Height - 2);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + rr.Width' rr.Y + 1' rr.X + rr.Width' rr.Y + rr.Height - 2);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 3' rr.Y + 2));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X +  rr.Width - 9' rr.Y + 2));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 14;  				int y = rr.Y + 3;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x + (i*3)' y' x + 1 + (i*3)' y + 1);  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x + 1 + (i*3)' y + 1' x + 2 + (i*3)' y + 2);  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)'  x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  						}  						break;    					case VisualStyles.DoubleDots:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y - 1' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y + 2' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y + 1' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 88' y);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 2' x + 88' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 88' y' x + 88' y + 2);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x + (i*5)' y' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*5)' y + 1' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x +(i*5)' y' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5) + 1' y);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5)' y + 1);  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*2)' y' x + (i*2)' y + 2);  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Top);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Bottom);  				}  			}    				#endregion    			else  			{  				throw new Exception("The Collapsible Splitter control cannot have the Filled or None Dockstyle property");  			}
Magic Number,OpenCBS.GUI.UserControl,CollapsibleSplitter,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CollapsibleSplitter.cs,OnPaint,The following statement contains a magic number: if(this.Dock == DockStyle.Left || this.Dock == DockStyle.Right)  			{  				// create a new rectangle in the vertical center of the splitter for our collapse control button  				rr = new Rectangle(r.X' (int)r.Y + ((r.Height - 115)/2)' 8' 115);  				// force the width to 8px so that everything always draws correctly  				this.Width = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}    				// draw the top & bottom lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y' rr.X + rr.Width - 2' rr.Y);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y + rr.Height' rr.X + rr.Width - 2' rr.Y + rr.Height);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + 3));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + rr.Height - 9));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 3;  				int y = rr.Y + 14;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y + (i*3)' x+1' y + 1 + (i*3));  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x+1' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  						}  						break;    					case VisualStyles.DoubleDots:  						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x - 1' y +(i*3)' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 2' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + 1' y  + (i*3)' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 2' y);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x'y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 2' y' x + 2' y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 90' x + 2' y + 90);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x' y + (i*5)' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1' y + 1 + (i*5)' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x' y +(i*5)' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x' y + (i*5) + 1);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x + 1' y + (i*5));  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*2)' x + 2' y + (i*2));  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Left);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Right);  				}  			}    				#endregion    				// Horizontal Splitter support added in v1.2    				#region Horizontal Splitter    			else if (this.Dock == DockStyle.Top || this.Dock == DockStyle.Bottom)  			{  				// create a new rectangle in the horizontal center of the splitter for our collapse control button  				rr = new Rectangle((int)r.X + ((r.Width - 115)/2)' r.Y' 115' 8);  				// force the height to 8px  				this.Height = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}    				// draw the left & right lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X' rr.Y + 1' rr.X' rr.Y + rr.Height - 2);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + rr.Width' rr.Y + 1' rr.X + rr.Width' rr.Y + rr.Height - 2);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 3' rr.Y + 2));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X +  rr.Width - 9' rr.Y + 2));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 14;  				int y = rr.Y + 3;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x + (i*3)' y' x + 1 + (i*3)' y + 1);  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x + 1 + (i*3)' y + 1' x + 2 + (i*3)' y + 2);  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)'  x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  						}  						break;    					case VisualStyles.DoubleDots:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y - 1' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y + 2' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y + 1' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 88' y);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 2' x + 88' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 88' y' x + 88' y + 2);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x + (i*5)' y' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*5)' y + 1' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x +(i*5)' y' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5) + 1' y);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5)' y + 1);  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*2)' y' x + (i*2)' y + 2);  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Top);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Bottom);  				}  			}    				#endregion    			else  			{  				throw new Exception("The Collapsible Splitter control cannot have the Filled or None Dockstyle property");  			}
Magic Number,OpenCBS.GUI.UserControl,CollapsibleSplitter,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CollapsibleSplitter.cs,OnPaint,The following statement contains a magic number: if(this.Dock == DockStyle.Left || this.Dock == DockStyle.Right)  			{  				// create a new rectangle in the vertical center of the splitter for our collapse control button  				rr = new Rectangle(r.X' (int)r.Y + ((r.Height - 115)/2)' 8' 115);  				// force the width to 8px so that everything always draws correctly  				this.Width = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}    				// draw the top & bottom lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y' rr.X + rr.Width - 2' rr.Y);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y + rr.Height' rr.X + rr.Width - 2' rr.Y + rr.Height);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + 3));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + rr.Height - 9));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 3;  				int y = rr.Y + 14;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y + (i*3)' x+1' y + 1 + (i*3));  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x+1' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  						}  						break;    					case VisualStyles.DoubleDots:  						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x - 1' y +(i*3)' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 2' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + 1' y  + (i*3)' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 2' y);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x'y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 2' y' x + 2' y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 90' x + 2' y + 90);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x' y + (i*5)' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1' y + 1 + (i*5)' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x' y +(i*5)' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x' y + (i*5) + 1);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x + 1' y + (i*5));  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*2)' x + 2' y + (i*2));  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Left);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Right);  				}  			}    				#endregion    				// Horizontal Splitter support added in v1.2    				#region Horizontal Splitter    			else if (this.Dock == DockStyle.Top || this.Dock == DockStyle.Bottom)  			{  				// create a new rectangle in the horizontal center of the splitter for our collapse control button  				rr = new Rectangle((int)r.X + ((r.Width - 115)/2)' r.Y' 115' 8);  				// force the height to 8px  				this.Height = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}    				// draw the left & right lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X' rr.Y + 1' rr.X' rr.Y + rr.Height - 2);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + rr.Width' rr.Y + 1' rr.X + rr.Width' rr.Y + rr.Height - 2);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 3' rr.Y + 2));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X +  rr.Width - 9' rr.Y + 2));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 14;  				int y = rr.Y + 3;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x + (i*3)' y' x + 1 + (i*3)' y + 1);  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x + 1 + (i*3)' y + 1' x + 2 + (i*3)' y + 2);  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)'  x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  						}  						break;    					case VisualStyles.DoubleDots:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y - 1' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y + 2' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y + 1' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 88' y);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 2' x + 88' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 88' y' x + 88' y + 2);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x + (i*5)' y' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*5)' y + 1' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x +(i*5)' y' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5) + 1' y);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5)' y + 1);  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*2)' y' x + (i*2)' y + 2);  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Top);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Bottom);  				}  			}    				#endregion    			else  			{  				throw new Exception("The Collapsible Splitter control cannot have the Filled or None Dockstyle property");  			}
Magic Number,OpenCBS.GUI.UserControl,CollapsibleSplitter,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CollapsibleSplitter.cs,OnPaint,The following statement contains a magic number: if(this.Dock == DockStyle.Left || this.Dock == DockStyle.Right)  			{  				// create a new rectangle in the vertical center of the splitter for our collapse control button  				rr = new Rectangle(r.X' (int)r.Y + ((r.Height - 115)/2)' 8' 115);  				// force the width to 8px so that everything always draws correctly  				this.Width = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}    				// draw the top & bottom lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y' rr.X + rr.Width - 2' rr.Y);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y + rr.Height' rr.X + rr.Width - 2' rr.Y + rr.Height);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + 3));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + rr.Height - 9));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 3;  				int y = rr.Y + 14;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y + (i*3)' x+1' y + 1 + (i*3));  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x+1' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  						}  						break;    					case VisualStyles.DoubleDots:  						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x - 1' y +(i*3)' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 2' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + 1' y  + (i*3)' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 2' y);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x'y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 2' y' x + 2' y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 90' x + 2' y + 90);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x' y + (i*5)' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1' y + 1 + (i*5)' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x' y +(i*5)' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x' y + (i*5) + 1);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x + 1' y + (i*5));  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*2)' x + 2' y + (i*2));  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Left);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Right);  				}  			}    				#endregion    				// Horizontal Splitter support added in v1.2    				#region Horizontal Splitter    			else if (this.Dock == DockStyle.Top || this.Dock == DockStyle.Bottom)  			{  				// create a new rectangle in the horizontal center of the splitter for our collapse control button  				rr = new Rectangle((int)r.X + ((r.Width - 115)/2)' r.Y' 115' 8);  				// force the height to 8px  				this.Height = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}    				// draw the left & right lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X' rr.Y + 1' rr.X' rr.Y + rr.Height - 2);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + rr.Width' rr.Y + 1' rr.X + rr.Width' rr.Y + rr.Height - 2);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 3' rr.Y + 2));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X +  rr.Width - 9' rr.Y + 2));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 14;  				int y = rr.Y + 3;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x + (i*3)' y' x + 1 + (i*3)' y + 1);  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x + 1 + (i*3)' y + 1' x + 2 + (i*3)' y + 2);  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)'  x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  						}  						break;    					case VisualStyles.DoubleDots:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y - 1' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y + 2' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y + 1' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 88' y);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 2' x + 88' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 88' y' x + 88' y + 2);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x + (i*5)' y' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*5)' y + 1' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x +(i*5)' y' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5) + 1' y);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5)' y + 1);  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*2)' y' x + (i*2)' y + 2);  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Top);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Bottom);  				}  			}    				#endregion    			else  			{  				throw new Exception("The Collapsible Splitter control cannot have the Filled or None Dockstyle property");  			}
Magic Number,OpenCBS.GUI.UserControl,CollapsibleSplitter,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CollapsibleSplitter.cs,OnPaint,The following statement contains a magic number: if(this.Dock == DockStyle.Left || this.Dock == DockStyle.Right)  			{  				// create a new rectangle in the vertical center of the splitter for our collapse control button  				rr = new Rectangle(r.X' (int)r.Y + ((r.Height - 115)/2)' 8' 115);  				// force the width to 8px so that everything always draws correctly  				this.Width = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}    				// draw the top & bottom lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y' rr.X + rr.Width - 2' rr.Y);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y + rr.Height' rr.X + rr.Width - 2' rr.Y + rr.Height);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + 3));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + rr.Height - 9));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 3;  				int y = rr.Y + 14;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y + (i*3)' x+1' y + 1 + (i*3));  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x+1' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  						}  						break;    					case VisualStyles.DoubleDots:  						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x - 1' y +(i*3)' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 2' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + 1' y  + (i*3)' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 2' y);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x'y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 2' y' x + 2' y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 90' x + 2' y + 90);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x' y + (i*5)' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1' y + 1 + (i*5)' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x' y +(i*5)' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x' y + (i*5) + 1);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x + 1' y + (i*5));  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*2)' x + 2' y + (i*2));  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Left);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Right);  				}  			}    				#endregion    				// Horizontal Splitter support added in v1.2    				#region Horizontal Splitter    			else if (this.Dock == DockStyle.Top || this.Dock == DockStyle.Bottom)  			{  				// create a new rectangle in the horizontal center of the splitter for our collapse control button  				rr = new Rectangle((int)r.X + ((r.Width - 115)/2)' r.Y' 115' 8);  				// force the height to 8px  				this.Height = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}    				// draw the left & right lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X' rr.Y + 1' rr.X' rr.Y + rr.Height - 2);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + rr.Width' rr.Y + 1' rr.X + rr.Width' rr.Y + rr.Height - 2);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 3' rr.Y + 2));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X +  rr.Width - 9' rr.Y + 2));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 14;  				int y = rr.Y + 3;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x + (i*3)' y' x + 1 + (i*3)' y + 1);  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x + 1 + (i*3)' y + 1' x + 2 + (i*3)' y + 2);  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)'  x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  						}  						break;    					case VisualStyles.DoubleDots:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y - 1' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y + 2' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y + 1' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 88' y);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 2' x + 88' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 88' y' x + 88' y + 2);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x + (i*5)' y' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*5)' y + 1' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x +(i*5)' y' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5) + 1' y);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5)' y + 1);  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*2)' y' x + (i*2)' y + 2);  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Top);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Bottom);  				}  			}    				#endregion    			else  			{  				throw new Exception("The Collapsible Splitter control cannot have the Filled or None Dockstyle property");  			}
Magic Number,OpenCBS.GUI.UserControl,CollapsibleSplitter,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CollapsibleSplitter.cs,OnPaint,The following statement contains a magic number: if(this.Dock == DockStyle.Left || this.Dock == DockStyle.Right)  			{  				// create a new rectangle in the vertical center of the splitter for our collapse control button  				rr = new Rectangle(r.X' (int)r.Y + ((r.Height - 115)/2)' 8' 115);  				// force the width to 8px so that everything always draws correctly  				this.Width = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}    				// draw the top & bottom lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y' rr.X + rr.Width - 2' rr.Y);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y + rr.Height' rr.X + rr.Width - 2' rr.Y + rr.Height);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + 3));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + rr.Height - 9));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 3;  				int y = rr.Y + 14;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y + (i*3)' x+1' y + 1 + (i*3));  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x+1' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  						}  						break;    					case VisualStyles.DoubleDots:  						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x - 1' y +(i*3)' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 2' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + 1' y  + (i*3)' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 2' y);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x'y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 2' y' x + 2' y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 90' x + 2' y + 90);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x' y + (i*5)' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1' y + 1 + (i*5)' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x' y +(i*5)' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x' y + (i*5) + 1);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x + 1' y + (i*5));  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*2)' x + 2' y + (i*2));  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Left);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Right);  				}  			}    				#endregion    				// Horizontal Splitter support added in v1.2    				#region Horizontal Splitter    			else if (this.Dock == DockStyle.Top || this.Dock == DockStyle.Bottom)  			{  				// create a new rectangle in the horizontal center of the splitter for our collapse control button  				rr = new Rectangle((int)r.X + ((r.Width - 115)/2)' r.Y' 115' 8);  				// force the height to 8px  				this.Height = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}    				// draw the left & right lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X' rr.Y + 1' rr.X' rr.Y + rr.Height - 2);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + rr.Width' rr.Y + 1' rr.X + rr.Width' rr.Y + rr.Height - 2);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 3' rr.Y + 2));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X +  rr.Width - 9' rr.Y + 2));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 14;  				int y = rr.Y + 3;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x + (i*3)' y' x + 1 + (i*3)' y + 1);  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x + 1 + (i*3)' y + 1' x + 2 + (i*3)' y + 2);  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)'  x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  						}  						break;    					case VisualStyles.DoubleDots:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y - 1' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y + 2' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y + 1' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 88' y);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 2' x + 88' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 88' y' x + 88' y + 2);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x + (i*5)' y' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*5)' y + 1' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x +(i*5)' y' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5) + 1' y);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5)' y + 1);  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*2)' y' x + (i*2)' y + 2);  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Top);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Bottom);  				}  			}    				#endregion    			else  			{  				throw new Exception("The Collapsible Splitter control cannot have the Filled or None Dockstyle property");  			}
Magic Number,OpenCBS.GUI.UserControl,CollapsibleSplitter,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CollapsibleSplitter.cs,OnPaint,The following statement contains a magic number: if(this.Dock == DockStyle.Left || this.Dock == DockStyle.Right)  			{  				// create a new rectangle in the vertical center of the splitter for our collapse control button  				rr = new Rectangle(r.X' (int)r.Y + ((r.Height - 115)/2)' 8' 115);  				// force the width to 8px so that everything always draws correctly  				this.Width = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}    				// draw the top & bottom lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y' rr.X + rr.Width - 2' rr.Y);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y + rr.Height' rr.X + rr.Width - 2' rr.Y + rr.Height);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + 3));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + rr.Height - 9));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 3;  				int y = rr.Y + 14;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y + (i*3)' x+1' y + 1 + (i*3));  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x+1' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  						}  						break;    					case VisualStyles.DoubleDots:  						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x - 1' y +(i*3)' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 2' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + 1' y  + (i*3)' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 2' y);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x'y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 2' y' x + 2' y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 90' x + 2' y + 90);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x' y + (i*5)' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1' y + 1 + (i*5)' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x' y +(i*5)' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x' y + (i*5) + 1);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x + 1' y + (i*5));  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*2)' x + 2' y + (i*2));  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Left);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Right);  				}  			}    				#endregion    				// Horizontal Splitter support added in v1.2    				#region Horizontal Splitter    			else if (this.Dock == DockStyle.Top || this.Dock == DockStyle.Bottom)  			{  				// create a new rectangle in the horizontal center of the splitter for our collapse control button  				rr = new Rectangle((int)r.X + ((r.Width - 115)/2)' r.Y' 115' 8);  				// force the height to 8px  				this.Height = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}    				// draw the left & right lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X' rr.Y + 1' rr.X' rr.Y + rr.Height - 2);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + rr.Width' rr.Y + 1' rr.X + rr.Width' rr.Y + rr.Height - 2);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 3' rr.Y + 2));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X +  rr.Width - 9' rr.Y + 2));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 14;  				int y = rr.Y + 3;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x + (i*3)' y' x + 1 + (i*3)' y + 1);  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x + 1 + (i*3)' y + 1' x + 2 + (i*3)' y + 2);  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)'  x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  						}  						break;    					case VisualStyles.DoubleDots:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y - 1' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y + 2' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y + 1' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 88' y);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 2' x + 88' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 88' y' x + 88' y + 2);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x + (i*5)' y' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*5)' y + 1' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x +(i*5)' y' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5) + 1' y);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5)' y + 1);  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*2)' y' x + (i*2)' y + 2);  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Top);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Bottom);  				}  			}    				#endregion    			else  			{  				throw new Exception("The Collapsible Splitter control cannot have the Filled or None Dockstyle property");  			}
Magic Number,OpenCBS.GUI.UserControl,CollapsibleSplitter,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CollapsibleSplitter.cs,OnPaint,The following statement contains a magic number: if(this.Dock == DockStyle.Left || this.Dock == DockStyle.Right)  			{  				// create a new rectangle in the vertical center of the splitter for our collapse control button  				rr = new Rectangle(r.X' (int)r.Y + ((r.Height - 115)/2)' 8' 115);  				// force the width to 8px so that everything always draws correctly  				this.Width = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}    				// draw the top & bottom lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y' rr.X + rr.Width - 2' rr.Y);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y + rr.Height' rr.X + rr.Width - 2' rr.Y + rr.Height);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + 3));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + rr.Height - 9));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 3;  				int y = rr.Y + 14;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y + (i*3)' x+1' y + 1 + (i*3));  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x+1' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  						}  						break;    					case VisualStyles.DoubleDots:  						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x - 1' y +(i*3)' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 2' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + 1' y  + (i*3)' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 2' y);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x'y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 2' y' x + 2' y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 90' x + 2' y + 90);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x' y + (i*5)' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1' y + 1 + (i*5)' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x' y +(i*5)' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x' y + (i*5) + 1);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x + 1' y + (i*5));  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*2)' x + 2' y + (i*2));  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Left);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Right);  				}  			}    				#endregion    				// Horizontal Splitter support added in v1.2    				#region Horizontal Splitter    			else if (this.Dock == DockStyle.Top || this.Dock == DockStyle.Bottom)  			{  				// create a new rectangle in the horizontal center of the splitter for our collapse control button  				rr = new Rectangle((int)r.X + ((r.Width - 115)/2)' r.Y' 115' 8);  				// force the height to 8px  				this.Height = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}    				// draw the left & right lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X' rr.Y + 1' rr.X' rr.Y + rr.Height - 2);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + rr.Width' rr.Y + 1' rr.X + rr.Width' rr.Y + rr.Height - 2);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 3' rr.Y + 2));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X +  rr.Width - 9' rr.Y + 2));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 14;  				int y = rr.Y + 3;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x + (i*3)' y' x + 1 + (i*3)' y + 1);  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x + 1 + (i*3)' y + 1' x + 2 + (i*3)' y + 2);  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)'  x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  						}  						break;    					case VisualStyles.DoubleDots:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y - 1' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y + 2' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y + 1' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 88' y);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 2' x + 88' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 88' y' x + 88' y + 2);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x + (i*5)' y' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*5)' y + 1' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x +(i*5)' y' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5) + 1' y);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5)' y + 1);  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*2)' y' x + (i*2)' y + 2);  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Top);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Bottom);  				}  			}    				#endregion    			else  			{  				throw new Exception("The Collapsible Splitter control cannot have the Filled or None Dockstyle property");  			}
Magic Number,OpenCBS.GUI.UserControl,CollapsibleSplitter,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CollapsibleSplitter.cs,OnPaint,The following statement contains a magic number: if(this.Dock == DockStyle.Left || this.Dock == DockStyle.Right)  			{  				// create a new rectangle in the vertical center of the splitter for our collapse control button  				rr = new Rectangle(r.X' (int)r.Y + ((r.Height - 115)/2)' 8' 115);  				// force the width to 8px so that everything always draws correctly  				this.Width = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}    				// draw the top & bottom lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y' rr.X + rr.Width - 2' rr.Y);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y + rr.Height' rr.X + rr.Width - 2' rr.Y + rr.Height);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + 3));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + rr.Height - 9));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 3;  				int y = rr.Y + 14;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y + (i*3)' x+1' y + 1 + (i*3));  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x+1' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  						}  						break;    					case VisualStyles.DoubleDots:  						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x - 1' y +(i*3)' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 2' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + 1' y  + (i*3)' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 2' y);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x'y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 2' y' x + 2' y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 90' x + 2' y + 90);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x' y + (i*5)' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1' y + 1 + (i*5)' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x' y +(i*5)' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x' y + (i*5) + 1);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x + 1' y + (i*5));  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*2)' x + 2' y + (i*2));  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Left);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Right);  				}  			}    				#endregion    				// Horizontal Splitter support added in v1.2    				#region Horizontal Splitter    			else if (this.Dock == DockStyle.Top || this.Dock == DockStyle.Bottom)  			{  				// create a new rectangle in the horizontal center of the splitter for our collapse control button  				rr = new Rectangle((int)r.X + ((r.Width - 115)/2)' r.Y' 115' 8);  				// force the height to 8px  				this.Height = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}    				// draw the left & right lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X' rr.Y + 1' rr.X' rr.Y + rr.Height - 2);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + rr.Width' rr.Y + 1' rr.X + rr.Width' rr.Y + rr.Height - 2);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 3' rr.Y + 2));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X +  rr.Width - 9' rr.Y + 2));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 14;  				int y = rr.Y + 3;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x + (i*3)' y' x + 1 + (i*3)' y + 1);  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x + 1 + (i*3)' y + 1' x + 2 + (i*3)' y + 2);  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)'  x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  						}  						break;    					case VisualStyles.DoubleDots:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y - 1' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y + 2' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y + 1' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 88' y);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 2' x + 88' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 88' y' x + 88' y + 2);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x + (i*5)' y' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*5)' y + 1' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x +(i*5)' y' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5) + 1' y);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5)' y + 1);  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*2)' y' x + (i*2)' y + 2);  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Top);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Bottom);  				}  			}    				#endregion    			else  			{  				throw new Exception("The Collapsible Splitter control cannot have the Filled or None Dockstyle property");  			}
Magic Number,OpenCBS.GUI.UserControl,CollapsibleSplitter,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CollapsibleSplitter.cs,OnPaint,The following statement contains a magic number: if(this.Dock == DockStyle.Left || this.Dock == DockStyle.Right)  			{  				// create a new rectangle in the vertical center of the splitter for our collapse control button  				rr = new Rectangle(r.X' (int)r.Y + ((r.Height - 115)/2)' 8' 115);  				// force the width to 8px so that everything always draws correctly  				this.Width = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}    				// draw the top & bottom lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y' rr.X + rr.Width - 2' rr.Y);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y + rr.Height' rr.X + rr.Width - 2' rr.Y + rr.Height);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + 3));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + rr.Height - 9));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 3;  				int y = rr.Y + 14;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y + (i*3)' x+1' y + 1 + (i*3));  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x+1' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  						}  						break;    					case VisualStyles.DoubleDots:  						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x - 1' y +(i*3)' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 2' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + 1' y  + (i*3)' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 2' y);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x'y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 2' y' x + 2' y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 90' x + 2' y + 90);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x' y + (i*5)' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1' y + 1 + (i*5)' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x' y +(i*5)' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x' y + (i*5) + 1);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x + 1' y + (i*5));  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*2)' x + 2' y + (i*2));  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Left);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Right);  				}  			}    				#endregion    				// Horizontal Splitter support added in v1.2    				#region Horizontal Splitter    			else if (this.Dock == DockStyle.Top || this.Dock == DockStyle.Bottom)  			{  				// create a new rectangle in the horizontal center of the splitter for our collapse control button  				rr = new Rectangle((int)r.X + ((r.Width - 115)/2)' r.Y' 115' 8);  				// force the height to 8px  				this.Height = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}    				// draw the left & right lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X' rr.Y + 1' rr.X' rr.Y + rr.Height - 2);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + rr.Width' rr.Y + 1' rr.X + rr.Width' rr.Y + rr.Height - 2);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 3' rr.Y + 2));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X +  rr.Width - 9' rr.Y + 2));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 14;  				int y = rr.Y + 3;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x + (i*3)' y' x + 1 + (i*3)' y + 1);  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x + 1 + (i*3)' y + 1' x + 2 + (i*3)' y + 2);  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)'  x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  						}  						break;    					case VisualStyles.DoubleDots:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y - 1' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y + 2' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y + 1' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 88' y);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 2' x + 88' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 88' y' x + 88' y + 2);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x + (i*5)' y' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*5)' y + 1' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x +(i*5)' y' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5) + 1' y);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5)' y + 1);  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*2)' y' x + (i*2)' y + 2);  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Top);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Bottom);  				}  			}    				#endregion    			else  			{  				throw new Exception("The Collapsible Splitter control cannot have the Filled or None Dockstyle property");  			}
Magic Number,OpenCBS.GUI.UserControl,CollapsibleSplitter,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CollapsibleSplitter.cs,OnPaint,The following statement contains a magic number: if(this.Dock == DockStyle.Left || this.Dock == DockStyle.Right)  			{  				// create a new rectangle in the vertical center of the splitter for our collapse control button  				rr = new Rectangle(r.X' (int)r.Y + ((r.Height - 115)/2)' 8' 115);  				// force the width to 8px so that everything always draws correctly  				this.Width = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}    				// draw the top & bottom lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y' rr.X + rr.Width - 2' rr.Y);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y + rr.Height' rr.X + rr.Width - 2' rr.Y + rr.Height);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + 3));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + rr.Height - 9));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 3;  				int y = rr.Y + 14;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y + (i*3)' x+1' y + 1 + (i*3));  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x+1' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  						}  						break;    					case VisualStyles.DoubleDots:  						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x - 1' y +(i*3)' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 2' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + 1' y  + (i*3)' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 2' y);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x'y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 2' y' x + 2' y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 90' x + 2' y + 90);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x' y + (i*5)' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1' y + 1 + (i*5)' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x' y +(i*5)' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x' y + (i*5) + 1);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x + 1' y + (i*5));  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*2)' x + 2' y + (i*2));  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Left);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Right);  				}  			}    				#endregion    				// Horizontal Splitter support added in v1.2    				#region Horizontal Splitter    			else if (this.Dock == DockStyle.Top || this.Dock == DockStyle.Bottom)  			{  				// create a new rectangle in the horizontal center of the splitter for our collapse control button  				rr = new Rectangle((int)r.X + ((r.Width - 115)/2)' r.Y' 115' 8);  				// force the height to 8px  				this.Height = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}    				// draw the left & right lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X' rr.Y + 1' rr.X' rr.Y + rr.Height - 2);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + rr.Width' rr.Y + 1' rr.X + rr.Width' rr.Y + rr.Height - 2);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 3' rr.Y + 2));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X +  rr.Width - 9' rr.Y + 2));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 14;  				int y = rr.Y + 3;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x + (i*3)' y' x + 1 + (i*3)' y + 1);  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x + 1 + (i*3)' y + 1' x + 2 + (i*3)' y + 2);  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)'  x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  						}  						break;    					case VisualStyles.DoubleDots:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y - 1' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y + 2' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y + 1' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 88' y);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 2' x + 88' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 88' y' x + 88' y + 2);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x + (i*5)' y' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*5)' y + 1' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x +(i*5)' y' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5) + 1' y);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5)' y + 1);  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*2)' y' x + (i*2)' y + 2);  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Top);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Bottom);  				}  			}    				#endregion    			else  			{  				throw new Exception("The Collapsible Splitter control cannot have the Filled or None Dockstyle property");  			}
Magic Number,OpenCBS.GUI.UserControl,CollapsibleSplitter,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CollapsibleSplitter.cs,OnPaint,The following statement contains a magic number: if(this.Dock == DockStyle.Left || this.Dock == DockStyle.Right)  			{  				// create a new rectangle in the vertical center of the splitter for our collapse control button  				rr = new Rectangle(r.X' (int)r.Y + ((r.Height - 115)/2)' 8' 115);  				// force the width to 8px so that everything always draws correctly  				this.Width = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}    				// draw the top & bottom lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y' rr.X + rr.Width - 2' rr.Y);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y + rr.Height' rr.X + rr.Width - 2' rr.Y + rr.Height);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + 3));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + rr.Height - 9));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 3;  				int y = rr.Y + 14;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y + (i*3)' x+1' y + 1 + (i*3));  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x+1' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  						}  						break;    					case VisualStyles.DoubleDots:  						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x - 1' y +(i*3)' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 2' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + 1' y  + (i*3)' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 2' y);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x'y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 2' y' x + 2' y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 90' x + 2' y + 90);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x' y + (i*5)' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1' y + 1 + (i*5)' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x' y +(i*5)' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x' y + (i*5) + 1);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x + 1' y + (i*5));  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*2)' x + 2' y + (i*2));  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Left);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Right);  				}  			}    				#endregion    				// Horizontal Splitter support added in v1.2    				#region Horizontal Splitter    			else if (this.Dock == DockStyle.Top || this.Dock == DockStyle.Bottom)  			{  				// create a new rectangle in the horizontal center of the splitter for our collapse control button  				rr = new Rectangle((int)r.X + ((r.Width - 115)/2)' r.Y' 115' 8);  				// force the height to 8px  				this.Height = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}    				// draw the left & right lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X' rr.Y + 1' rr.X' rr.Y + rr.Height - 2);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + rr.Width' rr.Y + 1' rr.X + rr.Width' rr.Y + rr.Height - 2);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 3' rr.Y + 2));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X +  rr.Width - 9' rr.Y + 2));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 14;  				int y = rr.Y + 3;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x + (i*3)' y' x + 1 + (i*3)' y + 1);  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x + 1 + (i*3)' y + 1' x + 2 + (i*3)' y + 2);  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)'  x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  						}  						break;    					case VisualStyles.DoubleDots:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y - 1' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y + 2' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y + 1' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 88' y);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 2' x + 88' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 88' y' x + 88' y + 2);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x + (i*5)' y' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*5)' y + 1' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x +(i*5)' y' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5) + 1' y);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5)' y + 1);  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*2)' y' x + (i*2)' y + 2);  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Top);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Bottom);  				}  			}    				#endregion    			else  			{  				throw new Exception("The Collapsible Splitter control cannot have the Filled or None Dockstyle property");  			}
Magic Number,OpenCBS.GUI.UserControl,CollapsibleSplitter,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CollapsibleSplitter.cs,OnPaint,The following statement contains a magic number: if(this.Dock == DockStyle.Left || this.Dock == DockStyle.Right)  			{  				// create a new rectangle in the vertical center of the splitter for our collapse control button  				rr = new Rectangle(r.X' (int)r.Y + ((r.Height - 115)/2)' 8' 115);  				// force the width to 8px so that everything always draws correctly  				this.Width = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}    				// draw the top & bottom lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y' rr.X + rr.Width - 2' rr.Y);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y + rr.Height' rr.X + rr.Width - 2' rr.Y + rr.Height);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + 3));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + rr.Height - 9));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 3;  				int y = rr.Y + 14;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y + (i*3)' x+1' y + 1 + (i*3));  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x+1' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  						}  						break;    					case VisualStyles.DoubleDots:  						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x - 1' y +(i*3)' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 2' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + 1' y  + (i*3)' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 2' y);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x'y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 2' y' x + 2' y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 90' x + 2' y + 90);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x' y + (i*5)' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1' y + 1 + (i*5)' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x' y +(i*5)' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x' y + (i*5) + 1);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x + 1' y + (i*5));  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*2)' x + 2' y + (i*2));  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Left);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Right);  				}  			}    				#endregion    				// Horizontal Splitter support added in v1.2    				#region Horizontal Splitter    			else if (this.Dock == DockStyle.Top || this.Dock == DockStyle.Bottom)  			{  				// create a new rectangle in the horizontal center of the splitter for our collapse control button  				rr = new Rectangle((int)r.X + ((r.Width - 115)/2)' r.Y' 115' 8);  				// force the height to 8px  				this.Height = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}    				// draw the left & right lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X' rr.Y + 1' rr.X' rr.Y + rr.Height - 2);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + rr.Width' rr.Y + 1' rr.X + rr.Width' rr.Y + rr.Height - 2);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 3' rr.Y + 2));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X +  rr.Width - 9' rr.Y + 2));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 14;  				int y = rr.Y + 3;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x + (i*3)' y' x + 1 + (i*3)' y + 1);  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x + 1 + (i*3)' y + 1' x + 2 + (i*3)' y + 2);  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)'  x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  						}  						break;    					case VisualStyles.DoubleDots:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y - 1' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y + 2' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y + 1' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 88' y);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 2' x + 88' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 88' y' x + 88' y + 2);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x + (i*5)' y' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*5)' y + 1' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x +(i*5)' y' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5) + 1' y);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5)' y + 1);  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*2)' y' x + (i*2)' y + 2);  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Top);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Bottom);  				}  			}    				#endregion    			else  			{  				throw new Exception("The Collapsible Splitter control cannot have the Filled or None Dockstyle property");  			}
Magic Number,OpenCBS.GUI.UserControl,CollapsibleSplitter,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CollapsibleSplitter.cs,OnPaint,The following statement contains a magic number: if(this.Dock == DockStyle.Left || this.Dock == DockStyle.Right)  			{  				// create a new rectangle in the vertical center of the splitter for our collapse control button  				rr = new Rectangle(r.X' (int)r.Y + ((r.Height - 115)/2)' 8' 115);  				// force the width to 8px so that everything always draws correctly  				this.Width = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}    				// draw the top & bottom lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y' rr.X + rr.Width - 2' rr.Y);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y + rr.Height' rr.X + rr.Width - 2' rr.Y + rr.Height);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + 3));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + rr.Height - 9));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 3;  				int y = rr.Y + 14;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y + (i*3)' x+1' y + 1 + (i*3));  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x+1' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  						}  						break;    					case VisualStyles.DoubleDots:  						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x - 1' y +(i*3)' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 2' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + 1' y  + (i*3)' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 2' y);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x'y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 2' y' x + 2' y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 90' x + 2' y + 90);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x' y + (i*5)' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1' y + 1 + (i*5)' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x' y +(i*5)' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x' y + (i*5) + 1);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x + 1' y + (i*5));  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*2)' x + 2' y + (i*2));  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Left);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Right);  				}  			}    				#endregion    				// Horizontal Splitter support added in v1.2    				#region Horizontal Splitter    			else if (this.Dock == DockStyle.Top || this.Dock == DockStyle.Bottom)  			{  				// create a new rectangle in the horizontal center of the splitter for our collapse control button  				rr = new Rectangle((int)r.X + ((r.Width - 115)/2)' r.Y' 115' 8);  				// force the height to 8px  				this.Height = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}    				// draw the left & right lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X' rr.Y + 1' rr.X' rr.Y + rr.Height - 2);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + rr.Width' rr.Y + 1' rr.X + rr.Width' rr.Y + rr.Height - 2);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 3' rr.Y + 2));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X +  rr.Width - 9' rr.Y + 2));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 14;  				int y = rr.Y + 3;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x + (i*3)' y' x + 1 + (i*3)' y + 1);  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x + 1 + (i*3)' y + 1' x + 2 + (i*3)' y + 2);  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)'  x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  						}  						break;    					case VisualStyles.DoubleDots:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y - 1' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y + 2' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y + 1' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 88' y);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 2' x + 88' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 88' y' x + 88' y + 2);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x + (i*5)' y' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*5)' y + 1' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x +(i*5)' y' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5) + 1' y);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5)' y + 1);  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*2)' y' x + (i*2)' y + 2);  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Top);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Bottom);  				}  			}    				#endregion    			else  			{  				throw new Exception("The Collapsible Splitter control cannot have the Filled or None Dockstyle property");  			}
Magic Number,OpenCBS.GUI.UserControl,CollapsibleSplitter,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CollapsibleSplitter.cs,OnPaint,The following statement contains a magic number: if(this.Dock == DockStyle.Left || this.Dock == DockStyle.Right)  			{  				// create a new rectangle in the vertical center of the splitter for our collapse control button  				rr = new Rectangle(r.X' (int)r.Y + ((r.Height - 115)/2)' 8' 115);  				// force the width to 8px so that everything always draws correctly  				this.Width = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}    				// draw the top & bottom lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y' rr.X + rr.Width - 2' rr.Y);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y + rr.Height' rr.X + rr.Width - 2' rr.Y + rr.Height);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + 3));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + rr.Height - 9));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 3;  				int y = rr.Y + 14;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y + (i*3)' x+1' y + 1 + (i*3));  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x+1' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  						}  						break;    					case VisualStyles.DoubleDots:  						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x - 1' y +(i*3)' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 2' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + 1' y  + (i*3)' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 2' y);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x'y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 2' y' x + 2' y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 90' x + 2' y + 90);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x' y + (i*5)' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1' y + 1 + (i*5)' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x' y +(i*5)' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x' y + (i*5) + 1);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x + 1' y + (i*5));  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*2)' x + 2' y + (i*2));  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Left);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Right);  				}  			}    				#endregion    				// Horizontal Splitter support added in v1.2    				#region Horizontal Splitter    			else if (this.Dock == DockStyle.Top || this.Dock == DockStyle.Bottom)  			{  				// create a new rectangle in the horizontal center of the splitter for our collapse control button  				rr = new Rectangle((int)r.X + ((r.Width - 115)/2)' r.Y' 115' 8);  				// force the height to 8px  				this.Height = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}    				// draw the left & right lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X' rr.Y + 1' rr.X' rr.Y + rr.Height - 2);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + rr.Width' rr.Y + 1' rr.X + rr.Width' rr.Y + rr.Height - 2);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 3' rr.Y + 2));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X +  rr.Width - 9' rr.Y + 2));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 14;  				int y = rr.Y + 3;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x + (i*3)' y' x + 1 + (i*3)' y + 1);  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x + 1 + (i*3)' y + 1' x + 2 + (i*3)' y + 2);  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)'  x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  						}  						break;    					case VisualStyles.DoubleDots:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y - 1' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y + 2' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y + 1' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 88' y);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 2' x + 88' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 88' y' x + 88' y + 2);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x + (i*5)' y' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*5)' y + 1' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x +(i*5)' y' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5) + 1' y);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5)' y + 1);  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*2)' y' x + (i*2)' y + 2);  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Top);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Bottom);  				}  			}    				#endregion    			else  			{  				throw new Exception("The Collapsible Splitter control cannot have the Filled or None Dockstyle property");  			}
Magic Number,OpenCBS.GUI.UserControl,CollapsibleSplitter,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CollapsibleSplitter.cs,OnPaint,The following statement contains a magic number: if(this.Dock == DockStyle.Left || this.Dock == DockStyle.Right)  			{  				// create a new rectangle in the vertical center of the splitter for our collapse control button  				rr = new Rectangle(r.X' (int)r.Y + ((r.Height - 115)/2)' 8' 115);  				// force the width to 8px so that everything always draws correctly  				this.Width = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}    				// draw the top & bottom lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y' rr.X + rr.Width - 2' rr.Y);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y + rr.Height' rr.X + rr.Width - 2' rr.Y + rr.Height);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + 3));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + rr.Height - 9));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 3;  				int y = rr.Y + 14;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y + (i*3)' x+1' y + 1 + (i*3));  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x+1' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  						}  						break;    					case VisualStyles.DoubleDots:  						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x - 1' y +(i*3)' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 2' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + 1' y  + (i*3)' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 2' y);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x'y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 2' y' x + 2' y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 90' x + 2' y + 90);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x' y + (i*5)' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1' y + 1 + (i*5)' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x' y +(i*5)' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x' y + (i*5) + 1);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x + 1' y + (i*5));  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*2)' x + 2' y + (i*2));  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Left);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Right);  				}  			}    				#endregion    				// Horizontal Splitter support added in v1.2    				#region Horizontal Splitter    			else if (this.Dock == DockStyle.Top || this.Dock == DockStyle.Bottom)  			{  				// create a new rectangle in the horizontal center of the splitter for our collapse control button  				rr = new Rectangle((int)r.X + ((r.Width - 115)/2)' r.Y' 115' 8);  				// force the height to 8px  				this.Height = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}    				// draw the left & right lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X' rr.Y + 1' rr.X' rr.Y + rr.Height - 2);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + rr.Width' rr.Y + 1' rr.X + rr.Width' rr.Y + rr.Height - 2);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 3' rr.Y + 2));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X +  rr.Width - 9' rr.Y + 2));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 14;  				int y = rr.Y + 3;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x + (i*3)' y' x + 1 + (i*3)' y + 1);  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x + 1 + (i*3)' y + 1' x + 2 + (i*3)' y + 2);  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)'  x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  						}  						break;    					case VisualStyles.DoubleDots:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y - 1' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y + 2' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y + 1' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 88' y);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 2' x + 88' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 88' y' x + 88' y + 2);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x + (i*5)' y' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*5)' y + 1' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x +(i*5)' y' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5) + 1' y);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5)' y + 1);  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*2)' y' x + (i*2)' y + 2);  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Top);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Bottom);  				}  			}    				#endregion    			else  			{  				throw new Exception("The Collapsible Splitter control cannot have the Filled or None Dockstyle property");  			}
Magic Number,OpenCBS.GUI.UserControl,CollapsibleSplitter,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CollapsibleSplitter.cs,OnPaint,The following statement contains a magic number: if(this.Dock == DockStyle.Left || this.Dock == DockStyle.Right)  			{  				// create a new rectangle in the vertical center of the splitter for our collapse control button  				rr = new Rectangle(r.X' (int)r.Y + ((r.Height - 115)/2)' 8' 115);  				// force the width to 8px so that everything always draws correctly  				this.Width = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}    				// draw the top & bottom lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y' rr.X + rr.Width - 2' rr.Y);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y + rr.Height' rr.X + rr.Width - 2' rr.Y + rr.Height);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + 3));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + rr.Height - 9));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 3;  				int y = rr.Y + 14;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y + (i*3)' x+1' y + 1 + (i*3));  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x+1' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  						}  						break;    					case VisualStyles.DoubleDots:  						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x - 1' y +(i*3)' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 2' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + 1' y  + (i*3)' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 2' y);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x'y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 2' y' x + 2' y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 90' x + 2' y + 90);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x' y + (i*5)' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1' y + 1 + (i*5)' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x' y +(i*5)' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x' y + (i*5) + 1);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x + 1' y + (i*5));  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*2)' x + 2' y + (i*2));  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Left);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Right);  				}  			}    				#endregion    				// Horizontal Splitter support added in v1.2    				#region Horizontal Splitter    			else if (this.Dock == DockStyle.Top || this.Dock == DockStyle.Bottom)  			{  				// create a new rectangle in the horizontal center of the splitter for our collapse control button  				rr = new Rectangle((int)r.X + ((r.Width - 115)/2)' r.Y' 115' 8);  				// force the height to 8px  				this.Height = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}    				// draw the left & right lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X' rr.Y + 1' rr.X' rr.Y + rr.Height - 2);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + rr.Width' rr.Y + 1' rr.X + rr.Width' rr.Y + rr.Height - 2);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 3' rr.Y + 2));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X +  rr.Width - 9' rr.Y + 2));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 14;  				int y = rr.Y + 3;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x + (i*3)' y' x + 1 + (i*3)' y + 1);  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x + 1 + (i*3)' y + 1' x + 2 + (i*3)' y + 2);  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)'  x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  						}  						break;    					case VisualStyles.DoubleDots:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y - 1' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y + 2' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y + 1' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 88' y);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 2' x + 88' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 88' y' x + 88' y + 2);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x + (i*5)' y' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*5)' y + 1' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x +(i*5)' y' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5) + 1' y);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5)' y + 1);  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*2)' y' x + (i*2)' y + 2);  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Top);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Bottom);  				}  			}    				#endregion    			else  			{  				throw new Exception("The Collapsible Splitter control cannot have the Filled or None Dockstyle property");  			}
Magic Number,OpenCBS.GUI.UserControl,CollapsibleSplitter,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CollapsibleSplitter.cs,OnPaint,The following statement contains a magic number: if(this.Dock == DockStyle.Left || this.Dock == DockStyle.Right)  			{  				// create a new rectangle in the vertical center of the splitter for our collapse control button  				rr = new Rectangle(r.X' (int)r.Y + ((r.Height - 115)/2)' 8' 115);  				// force the width to 8px so that everything always draws correctly  				this.Width = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}    				// draw the top & bottom lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y' rr.X + rr.Width - 2' rr.Y);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y + rr.Height' rr.X + rr.Width - 2' rr.Y + rr.Height);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + 3));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + rr.Height - 9));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 3;  				int y = rr.Y + 14;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y + (i*3)' x+1' y + 1 + (i*3));  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x+1' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  						}  						break;    					case VisualStyles.DoubleDots:  						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x - 1' y +(i*3)' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 2' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + 1' y  + (i*3)' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 2' y);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x'y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 2' y' x + 2' y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 90' x + 2' y + 90);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x' y + (i*5)' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1' y + 1 + (i*5)' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x' y +(i*5)' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x' y + (i*5) + 1);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x + 1' y + (i*5));  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*2)' x + 2' y + (i*2));  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Left);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Right);  				}  			}    				#endregion    				// Horizontal Splitter support added in v1.2    				#region Horizontal Splitter    			else if (this.Dock == DockStyle.Top || this.Dock == DockStyle.Bottom)  			{  				// create a new rectangle in the horizontal center of the splitter for our collapse control button  				rr = new Rectangle((int)r.X + ((r.Width - 115)/2)' r.Y' 115' 8);  				// force the height to 8px  				this.Height = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}    				// draw the left & right lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X' rr.Y + 1' rr.X' rr.Y + rr.Height - 2);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + rr.Width' rr.Y + 1' rr.X + rr.Width' rr.Y + rr.Height - 2);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 3' rr.Y + 2));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X +  rr.Width - 9' rr.Y + 2));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 14;  				int y = rr.Y + 3;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x + (i*3)' y' x + 1 + (i*3)' y + 1);  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x + 1 + (i*3)' y + 1' x + 2 + (i*3)' y + 2);  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)'  x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  						}  						break;    					case VisualStyles.DoubleDots:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y - 1' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y + 2' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y + 1' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 88' y);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 2' x + 88' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 88' y' x + 88' y + 2);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x + (i*5)' y' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*5)' y + 1' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x +(i*5)' y' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5) + 1' y);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5)' y + 1);  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*2)' y' x + (i*2)' y + 2);  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Top);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Bottom);  				}  			}    				#endregion    			else  			{  				throw new Exception("The Collapsible Splitter control cannot have the Filled or None Dockstyle property");  			}
Magic Number,OpenCBS.GUI.UserControl,CollapsibleSplitter,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CollapsibleSplitter.cs,OnPaint,The following statement contains a magic number: if(this.Dock == DockStyle.Left || this.Dock == DockStyle.Right)  			{  				// create a new rectangle in the vertical center of the splitter for our collapse control button  				rr = new Rectangle(r.X' (int)r.Y + ((r.Height - 115)/2)' 8' 115);  				// force the width to 8px so that everything always draws correctly  				this.Width = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}    				// draw the top & bottom lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y' rr.X + rr.Width - 2' rr.Y);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y + rr.Height' rr.X + rr.Width - 2' rr.Y + rr.Height);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + 3));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + rr.Height - 9));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 3;  				int y = rr.Y + 14;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y + (i*3)' x+1' y + 1 + (i*3));  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x+1' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  						}  						break;    					case VisualStyles.DoubleDots:  						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x - 1' y +(i*3)' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 2' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + 1' y  + (i*3)' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 2' y);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x'y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 2' y' x + 2' y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 90' x + 2' y + 90);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x' y + (i*5)' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1' y + 1 + (i*5)' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x' y +(i*5)' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x' y + (i*5) + 1);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x + 1' y + (i*5));  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*2)' x + 2' y + (i*2));  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Left);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Right);  				}  			}    				#endregion    				// Horizontal Splitter support added in v1.2    				#region Horizontal Splitter    			else if (this.Dock == DockStyle.Top || this.Dock == DockStyle.Bottom)  			{  				// create a new rectangle in the horizontal center of the splitter for our collapse control button  				rr = new Rectangle((int)r.X + ((r.Width - 115)/2)' r.Y' 115' 8);  				// force the height to 8px  				this.Height = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}    				// draw the left & right lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X' rr.Y + 1' rr.X' rr.Y + rr.Height - 2);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + rr.Width' rr.Y + 1' rr.X + rr.Width' rr.Y + rr.Height - 2);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 3' rr.Y + 2));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X +  rr.Width - 9' rr.Y + 2));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 14;  				int y = rr.Y + 3;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x + (i*3)' y' x + 1 + (i*3)' y + 1);  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x + 1 + (i*3)' y + 1' x + 2 + (i*3)' y + 2);  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)'  x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  						}  						break;    					case VisualStyles.DoubleDots:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y - 1' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y + 2' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y + 1' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 88' y);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 2' x + 88' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 88' y' x + 88' y + 2);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x + (i*5)' y' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*5)' y + 1' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x +(i*5)' y' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5) + 1' y);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5)' y + 1);  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*2)' y' x + (i*2)' y + 2);  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Top);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Bottom);  				}  			}    				#endregion    			else  			{  				throw new Exception("The Collapsible Splitter control cannot have the Filled or None Dockstyle property");  			}
Magic Number,OpenCBS.GUI.UserControl,CollapsibleSplitter,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CollapsibleSplitter.cs,OnPaint,The following statement contains a magic number: if(this.Dock == DockStyle.Left || this.Dock == DockStyle.Right)  			{  				// create a new rectangle in the vertical center of the splitter for our collapse control button  				rr = new Rectangle(r.X' (int)r.Y + ((r.Height - 115)/2)' 8' 115);  				// force the width to 8px so that everything always draws correctly  				this.Width = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}    				// draw the top & bottom lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y' rr.X + rr.Width - 2' rr.Y);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y + rr.Height' rr.X + rr.Width - 2' rr.Y + rr.Height);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + 3));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + rr.Height - 9));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 3;  				int y = rr.Y + 14;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y + (i*3)' x+1' y + 1 + (i*3));  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x+1' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  						}  						break;    					case VisualStyles.DoubleDots:  						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x - 1' y +(i*3)' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 2' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + 1' y  + (i*3)' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 2' y);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x'y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 2' y' x + 2' y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 90' x + 2' y + 90);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x' y + (i*5)' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1' y + 1 + (i*5)' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x' y +(i*5)' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x' y + (i*5) + 1);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x + 1' y + (i*5));  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*2)' x + 2' y + (i*2));  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Left);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Right);  				}  			}    				#endregion    				// Horizontal Splitter support added in v1.2    				#region Horizontal Splitter    			else if (this.Dock == DockStyle.Top || this.Dock == DockStyle.Bottom)  			{  				// create a new rectangle in the horizontal center of the splitter for our collapse control button  				rr = new Rectangle((int)r.X + ((r.Width - 115)/2)' r.Y' 115' 8);  				// force the height to 8px  				this.Height = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}    				// draw the left & right lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X' rr.Y + 1' rr.X' rr.Y + rr.Height - 2);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + rr.Width' rr.Y + 1' rr.X + rr.Width' rr.Y + rr.Height - 2);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 3' rr.Y + 2));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X +  rr.Width - 9' rr.Y + 2));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 14;  				int y = rr.Y + 3;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x + (i*3)' y' x + 1 + (i*3)' y + 1);  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x + 1 + (i*3)' y + 1' x + 2 + (i*3)' y + 2);  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)'  x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  						}  						break;    					case VisualStyles.DoubleDots:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y - 1' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y + 2' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y + 1' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 88' y);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 2' x + 88' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 88' y' x + 88' y + 2);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x + (i*5)' y' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*5)' y + 1' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x +(i*5)' y' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5) + 1' y);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5)' y + 1);  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*2)' y' x + (i*2)' y + 2);  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Top);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Bottom);  				}  			}    				#endregion    			else  			{  				throw new Exception("The Collapsible Splitter control cannot have the Filled or None Dockstyle property");  			}
Magic Number,OpenCBS.GUI.UserControl,CollapsibleSplitter,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CollapsibleSplitter.cs,OnPaint,The following statement contains a magic number: if(this.Dock == DockStyle.Left || this.Dock == DockStyle.Right)  			{  				// create a new rectangle in the vertical center of the splitter for our collapse control button  				rr = new Rectangle(r.X' (int)r.Y + ((r.Height - 115)/2)' 8' 115);  				// force the width to 8px so that everything always draws correctly  				this.Width = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}    				// draw the top & bottom lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y' rr.X + rr.Width - 2' rr.Y);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y + rr.Height' rr.X + rr.Width - 2' rr.Y + rr.Height);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + 3));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + rr.Height - 9));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 3;  				int y = rr.Y + 14;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y + (i*3)' x+1' y + 1 + (i*3));  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x+1' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  						}  						break;    					case VisualStyles.DoubleDots:  						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x - 1' y +(i*3)' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 2' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + 1' y  + (i*3)' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 2' y);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x'y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 2' y' x + 2' y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 90' x + 2' y + 90);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x' y + (i*5)' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1' y + 1 + (i*5)' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x' y +(i*5)' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x' y + (i*5) + 1);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x + 1' y + (i*5));  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*2)' x + 2' y + (i*2));  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Left);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Right);  				}  			}    				#endregion    				// Horizontal Splitter support added in v1.2    				#region Horizontal Splitter    			else if (this.Dock == DockStyle.Top || this.Dock == DockStyle.Bottom)  			{  				// create a new rectangle in the horizontal center of the splitter for our collapse control button  				rr = new Rectangle((int)r.X + ((r.Width - 115)/2)' r.Y' 115' 8);  				// force the height to 8px  				this.Height = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}    				// draw the left & right lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X' rr.Y + 1' rr.X' rr.Y + rr.Height - 2);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + rr.Width' rr.Y + 1' rr.X + rr.Width' rr.Y + rr.Height - 2);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 3' rr.Y + 2));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X +  rr.Width - 9' rr.Y + 2));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 14;  				int y = rr.Y + 3;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x + (i*3)' y' x + 1 + (i*3)' y + 1);  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x + 1 + (i*3)' y + 1' x + 2 + (i*3)' y + 2);  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)'  x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  						}  						break;    					case VisualStyles.DoubleDots:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y - 1' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y + 2' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y + 1' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 88' y);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 2' x + 88' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 88' y' x + 88' y + 2);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x + (i*5)' y' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*5)' y + 1' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x +(i*5)' y' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5) + 1' y);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5)' y + 1);  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*2)' y' x + (i*2)' y + 2);  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Top);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Bottom);  				}  			}    				#endregion    			else  			{  				throw new Exception("The Collapsible Splitter control cannot have the Filled or None Dockstyle property");  			}
Magic Number,OpenCBS.GUI.UserControl,CollapsibleSplitter,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CollapsibleSplitter.cs,OnPaint,The following statement contains a magic number: if(this.Dock == DockStyle.Left || this.Dock == DockStyle.Right)  			{  				// create a new rectangle in the vertical center of the splitter for our collapse control button  				rr = new Rectangle(r.X' (int)r.Y + ((r.Height - 115)/2)' 8' 115);  				// force the width to 8px so that everything always draws correctly  				this.Width = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X + 1' rr.Y' 6' 115));  				}    				// draw the top & bottom lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y' rr.X + rr.Width - 2' rr.Y);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + 1' rr.Y + rr.Height' rr.X + rr.Width - 2' rr.Y + rr.Height);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + 3));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 2' rr.Y + rr.Height - 9));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 3;  				int y = rr.Y + 14;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y + (i*3)' x+1' y + 1 + (i*3));  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x+1' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  						}  						break;    					case VisualStyles.DoubleDots:  						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x - 1' y +(i*3)' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 2' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + 1' y  + (i*3)' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 2' y);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x'y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 2' y' x + 2' y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 90' x + 2' y + 90);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x' y + (i*5)' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1' y + 1 + (i*5)' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x' y +(i*5)' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x' y + (i*5) + 1);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x + 1' y + (i*5));  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*2)' x + 2' y + (i*2));  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Left);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Right);  				}  			}    				#endregion    				// Horizontal Splitter support added in v1.2    				#region Horizontal Splitter    			else if (this.Dock == DockStyle.Top || this.Dock == DockStyle.Bottom)  			{  				// create a new rectangle in the horizontal center of the splitter for our collapse control button  				rr = new Rectangle((int)r.X + ((r.Width - 115)/2)' r.Y' 115' 8);  				// force the height to 8px  				this.Height = 8;    				// draw the background color for our control image  				if(hot)  				{  					g.FillRectangle(new SolidBrush(hotColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}  				else  				{  					g.FillRectangle(new SolidBrush(this.BackColor)' new Rectangle(rr.X' rr.Y + 1' 115' 6));  				}    				// draw the left & right lines for our control image  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X' rr.Y + 1' rr.X' rr.Y + rr.Height - 2);  				g.DrawLine(new Pen(SystemColors.ControlDark' 1)' rr.X + rr.Width' rr.Y + 1' rr.X + rr.Width' rr.Y + rr.Height - 2);    				if(this.Enabled)  				{  					// draw the arrows for our control image  					// the ArrowPointArray is a point array that defines an arrow shaped polygon  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X + 3' rr.Y + 2));  					g.FillPolygon(new SolidBrush(SystemColors.ControlDarkDark)' ArrowPointArray(rr.X +  rr.Width - 9' rr.Y + 2));  				}    				// draw the dots for our control image using a loop  				int x = rr.X + 14;  				int y = rr.Y + 3;    				// Visual Styles added in version 1.1  				switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x + (i*3)' y' x + 1 + (i*3)' y + 1);  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x + 1 + (i*3)' y + 1' x + 2 + (i*3)' y + 2);  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)'  x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  						}  						break;    					case VisualStyles.DoubleDots:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y - 1' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y + 2' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y + 1' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 88' y);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 2' x + 88' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 88' y' x + 88' y + 2);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x + (i*5)' y' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*5)' y + 1' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x +(i*5)' y' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5) + 1' y);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5)' y + 1);  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*2)' y' x + (i*2)' y + 2);  						}    						break;  				}    				// Added in version 1.3  				if(this.borderStyle != System.Windows.Forms.Border3DStyle.Flat)  				{  					// Paint the control border  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Top);  					ControlPaint.DrawBorder3D(e.Graphics' this.ClientRectangle' this.borderStyle' Border3DSide.Bottom);  				}  			}    				#endregion    			else  			{  				throw new Exception("The Collapsible Splitter control cannot have the Filled or None Dockstyle property");  			}
Magic Number,OpenCBS.GUI.UserControl,CollapsibleSplitter,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CollapsibleSplitter.cs,ArrowPointArray,The following statement contains a magic number: Point[] point = new Point[3];
Magic Number,OpenCBS.GUI.UserControl,CollapsibleSplitter,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CollapsibleSplitter.cs,ArrowPointArray,The following statement contains a magic number: if(controlToHide!= null)  			{  				// decide which direction the arrow will point  				if (  					(this.Dock == DockStyle.Right && controlToHide.Visible)   					|| (this.Dock == DockStyle.Left && !controlToHide.Visible)  					)  				{  					// right arrow  					point[0] = new Point(x'y);  					point[1] = new Point(x + 3' y + 3);  					point[2] = new Point(x' y + 6);  				}  				else if (  					(this.Dock == DockStyle.Right && !controlToHide.Visible)   					|| (this.Dock == DockStyle.Left && controlToHide.Visible)  					)  				{  					// left arrow  					point[0] = new Point(x + 3 'y);  					point[1] = new Point(x' y + 3);  					point[2] = new Point(x + 3' y + 6);  				}    					// Up/Down arrows added in v1.2    				else if (  					(this.Dock == DockStyle.Top && controlToHide.Visible)   					|| (this.Dock == DockStyle.Bottom && !controlToHide.Visible)  					)  				{  					// up arrow  					point[0] = new Point(x + 3' y);  					point[1] = new Point(x + 6' y + 4);  					point[2] = new Point(x' y + 4);  				}  				else if (  					(this.Dock == DockStyle.Top && !controlToHide.Visible)   					|| (this.Dock == DockStyle.Bottom && controlToHide.Visible)  					)  				{  					// down arrow  					point[0] = new Point(x'y);  					point[1] = new Point(x + 6' y);  					point[2] = new Point(x + 3' y + 3);  				}  			}
Magic Number,OpenCBS.GUI.UserControl,CollapsibleSplitter,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CollapsibleSplitter.cs,ArrowPointArray,The following statement contains a magic number: if(controlToHide!= null)  			{  				// decide which direction the arrow will point  				if (  					(this.Dock == DockStyle.Right && controlToHide.Visible)   					|| (this.Dock == DockStyle.Left && !controlToHide.Visible)  					)  				{  					// right arrow  					point[0] = new Point(x'y);  					point[1] = new Point(x + 3' y + 3);  					point[2] = new Point(x' y + 6);  				}  				else if (  					(this.Dock == DockStyle.Right && !controlToHide.Visible)   					|| (this.Dock == DockStyle.Left && controlToHide.Visible)  					)  				{  					// left arrow  					point[0] = new Point(x + 3 'y);  					point[1] = new Point(x' y + 3);  					point[2] = new Point(x + 3' y + 6);  				}    					// Up/Down arrows added in v1.2    				else if (  					(this.Dock == DockStyle.Top && controlToHide.Visible)   					|| (this.Dock == DockStyle.Bottom && !controlToHide.Visible)  					)  				{  					// up arrow  					point[0] = new Point(x + 3' y);  					point[1] = new Point(x + 6' y + 4);  					point[2] = new Point(x' y + 4);  				}  				else if (  					(this.Dock == DockStyle.Top && !controlToHide.Visible)   					|| (this.Dock == DockStyle.Bottom && controlToHide.Visible)  					)  				{  					// down arrow  					point[0] = new Point(x'y);  					point[1] = new Point(x + 6' y);  					point[2] = new Point(x + 3' y + 3);  				}  			}
Magic Number,OpenCBS.GUI.UserControl,CollapsibleSplitter,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CollapsibleSplitter.cs,ArrowPointArray,The following statement contains a magic number: if(controlToHide!= null)  			{  				// decide which direction the arrow will point  				if (  					(this.Dock == DockStyle.Right && controlToHide.Visible)   					|| (this.Dock == DockStyle.Left && !controlToHide.Visible)  					)  				{  					// right arrow  					point[0] = new Point(x'y);  					point[1] = new Point(x + 3' y + 3);  					point[2] = new Point(x' y + 6);  				}  				else if (  					(this.Dock == DockStyle.Right && !controlToHide.Visible)   					|| (this.Dock == DockStyle.Left && controlToHide.Visible)  					)  				{  					// left arrow  					point[0] = new Point(x + 3 'y);  					point[1] = new Point(x' y + 3);  					point[2] = new Point(x + 3' y + 6);  				}    					// Up/Down arrows added in v1.2    				else if (  					(this.Dock == DockStyle.Top && controlToHide.Visible)   					|| (this.Dock == DockStyle.Bottom && !controlToHide.Visible)  					)  				{  					// up arrow  					point[0] = new Point(x + 3' y);  					point[1] = new Point(x + 6' y + 4);  					point[2] = new Point(x' y + 4);  				}  				else if (  					(this.Dock == DockStyle.Top && !controlToHide.Visible)   					|| (this.Dock == DockStyle.Bottom && controlToHide.Visible)  					)  				{  					// down arrow  					point[0] = new Point(x'y);  					point[1] = new Point(x + 6' y);  					point[2] = new Point(x + 3' y + 3);  				}  			}
Magic Number,OpenCBS.GUI.UserControl,CollapsibleSplitter,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CollapsibleSplitter.cs,ArrowPointArray,The following statement contains a magic number: if(controlToHide!= null)  			{  				// decide which direction the arrow will point  				if (  					(this.Dock == DockStyle.Right && controlToHide.Visible)   					|| (this.Dock == DockStyle.Left && !controlToHide.Visible)  					)  				{  					// right arrow  					point[0] = new Point(x'y);  					point[1] = new Point(x + 3' y + 3);  					point[2] = new Point(x' y + 6);  				}  				else if (  					(this.Dock == DockStyle.Right && !controlToHide.Visible)   					|| (this.Dock == DockStyle.Left && controlToHide.Visible)  					)  				{  					// left arrow  					point[0] = new Point(x + 3 'y);  					point[1] = new Point(x' y + 3);  					point[2] = new Point(x + 3' y + 6);  				}    					// Up/Down arrows added in v1.2    				else if (  					(this.Dock == DockStyle.Top && controlToHide.Visible)   					|| (this.Dock == DockStyle.Bottom && !controlToHide.Visible)  					)  				{  					// up arrow  					point[0] = new Point(x + 3' y);  					point[1] = new Point(x + 6' y + 4);  					point[2] = new Point(x' y + 4);  				}  				else if (  					(this.Dock == DockStyle.Top && !controlToHide.Visible)   					|| (this.Dock == DockStyle.Bottom && controlToHide.Visible)  					)  				{  					// down arrow  					point[0] = new Point(x'y);  					point[1] = new Point(x + 6' y);  					point[2] = new Point(x + 3' y + 3);  				}  			}
Magic Number,OpenCBS.GUI.UserControl,CollapsibleSplitter,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CollapsibleSplitter.cs,ArrowPointArray,The following statement contains a magic number: if(controlToHide!= null)  			{  				// decide which direction the arrow will point  				if (  					(this.Dock == DockStyle.Right && controlToHide.Visible)   					|| (this.Dock == DockStyle.Left && !controlToHide.Visible)  					)  				{  					// right arrow  					point[0] = new Point(x'y);  					point[1] = new Point(x + 3' y + 3);  					point[2] = new Point(x' y + 6);  				}  				else if (  					(this.Dock == DockStyle.Right && !controlToHide.Visible)   					|| (this.Dock == DockStyle.Left && controlToHide.Visible)  					)  				{  					// left arrow  					point[0] = new Point(x + 3 'y);  					point[1] = new Point(x' y + 3);  					point[2] = new Point(x + 3' y + 6);  				}    					// Up/Down arrows added in v1.2    				else if (  					(this.Dock == DockStyle.Top && controlToHide.Visible)   					|| (this.Dock == DockStyle.Bottom && !controlToHide.Visible)  					)  				{  					// up arrow  					point[0] = new Point(x + 3' y);  					point[1] = new Point(x + 6' y + 4);  					point[2] = new Point(x' y + 4);  				}  				else if (  					(this.Dock == DockStyle.Top && !controlToHide.Visible)   					|| (this.Dock == DockStyle.Bottom && controlToHide.Visible)  					)  				{  					// down arrow  					point[0] = new Point(x'y);  					point[1] = new Point(x + 6' y);  					point[2] = new Point(x + 3' y + 3);  				}  			}
Magic Number,OpenCBS.GUI.UserControl,CollapsibleSplitter,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CollapsibleSplitter.cs,ArrowPointArray,The following statement contains a magic number: if(controlToHide!= null)  			{  				// decide which direction the arrow will point  				if (  					(this.Dock == DockStyle.Right && controlToHide.Visible)   					|| (this.Dock == DockStyle.Left && !controlToHide.Visible)  					)  				{  					// right arrow  					point[0] = new Point(x'y);  					point[1] = new Point(x + 3' y + 3);  					point[2] = new Point(x' y + 6);  				}  				else if (  					(this.Dock == DockStyle.Right && !controlToHide.Visible)   					|| (this.Dock == DockStyle.Left && controlToHide.Visible)  					)  				{  					// left arrow  					point[0] = new Point(x + 3 'y);  					point[1] = new Point(x' y + 3);  					point[2] = new Point(x + 3' y + 6);  				}    					// Up/Down arrows added in v1.2    				else if (  					(this.Dock == DockStyle.Top && controlToHide.Visible)   					|| (this.Dock == DockStyle.Bottom && !controlToHide.Visible)  					)  				{  					// up arrow  					point[0] = new Point(x + 3' y);  					point[1] = new Point(x + 6' y + 4);  					point[2] = new Point(x' y + 4);  				}  				else if (  					(this.Dock == DockStyle.Top && !controlToHide.Visible)   					|| (this.Dock == DockStyle.Bottom && controlToHide.Visible)  					)  				{  					// down arrow  					point[0] = new Point(x'y);  					point[1] = new Point(x + 6' y);  					point[2] = new Point(x + 3' y + 3);  				}  			}
Magic Number,OpenCBS.GUI.UserControl,CollapsibleSplitter,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CollapsibleSplitter.cs,ArrowPointArray,The following statement contains a magic number: if(controlToHide!= null)  			{  				// decide which direction the arrow will point  				if (  					(this.Dock == DockStyle.Right && controlToHide.Visible)   					|| (this.Dock == DockStyle.Left && !controlToHide.Visible)  					)  				{  					// right arrow  					point[0] = new Point(x'y);  					point[1] = new Point(x + 3' y + 3);  					point[2] = new Point(x' y + 6);  				}  				else if (  					(this.Dock == DockStyle.Right && !controlToHide.Visible)   					|| (this.Dock == DockStyle.Left && controlToHide.Visible)  					)  				{  					// left arrow  					point[0] = new Point(x + 3 'y);  					point[1] = new Point(x' y + 3);  					point[2] = new Point(x + 3' y + 6);  				}    					// Up/Down arrows added in v1.2    				else if (  					(this.Dock == DockStyle.Top && controlToHide.Visible)   					|| (this.Dock == DockStyle.Bottom && !controlToHide.Visible)  					)  				{  					// up arrow  					point[0] = new Point(x + 3' y);  					point[1] = new Point(x + 6' y + 4);  					point[2] = new Point(x' y + 4);  				}  				else if (  					(this.Dock == DockStyle.Top && !controlToHide.Visible)   					|| (this.Dock == DockStyle.Bottom && controlToHide.Visible)  					)  				{  					// down arrow  					point[0] = new Point(x'y);  					point[1] = new Point(x + 6' y);  					point[2] = new Point(x + 3' y + 3);  				}  			}
Magic Number,OpenCBS.GUI.UserControl,CollapsibleSplitter,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CollapsibleSplitter.cs,ArrowPointArray,The following statement contains a magic number: if(controlToHide!= null)  			{  				// decide which direction the arrow will point  				if (  					(this.Dock == DockStyle.Right && controlToHide.Visible)   					|| (this.Dock == DockStyle.Left && !controlToHide.Visible)  					)  				{  					// right arrow  					point[0] = new Point(x'y);  					point[1] = new Point(x + 3' y + 3);  					point[2] = new Point(x' y + 6);  				}  				else if (  					(this.Dock == DockStyle.Right && !controlToHide.Visible)   					|| (this.Dock == DockStyle.Left && controlToHide.Visible)  					)  				{  					// left arrow  					point[0] = new Point(x + 3 'y);  					point[1] = new Point(x' y + 3);  					point[2] = new Point(x + 3' y + 6);  				}    					// Up/Down arrows added in v1.2    				else if (  					(this.Dock == DockStyle.Top && controlToHide.Visible)   					|| (this.Dock == DockStyle.Bottom && !controlToHide.Visible)  					)  				{  					// up arrow  					point[0] = new Point(x + 3' y);  					point[1] = new Point(x + 6' y + 4);  					point[2] = new Point(x' y + 4);  				}  				else if (  					(this.Dock == DockStyle.Top && !controlToHide.Visible)   					|| (this.Dock == DockStyle.Bottom && controlToHide.Visible)  					)  				{  					// down arrow  					point[0] = new Point(x'y);  					point[1] = new Point(x + 6' y);  					point[2] = new Point(x + 3' y + 3);  				}  			}
Magic Number,OpenCBS.GUI.UserControl,CollapsibleSplitter,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CollapsibleSplitter.cs,ArrowPointArray,The following statement contains a magic number: if(controlToHide!= null)  			{  				// decide which direction the arrow will point  				if (  					(this.Dock == DockStyle.Right && controlToHide.Visible)   					|| (this.Dock == DockStyle.Left && !controlToHide.Visible)  					)  				{  					// right arrow  					point[0] = new Point(x'y);  					point[1] = new Point(x + 3' y + 3);  					point[2] = new Point(x' y + 6);  				}  				else if (  					(this.Dock == DockStyle.Right && !controlToHide.Visible)   					|| (this.Dock == DockStyle.Left && controlToHide.Visible)  					)  				{  					// left arrow  					point[0] = new Point(x + 3 'y);  					point[1] = new Point(x' y + 3);  					point[2] = new Point(x + 3' y + 6);  				}    					// Up/Down arrows added in v1.2    				else if (  					(this.Dock == DockStyle.Top && controlToHide.Visible)   					|| (this.Dock == DockStyle.Bottom && !controlToHide.Visible)  					)  				{  					// up arrow  					point[0] = new Point(x + 3' y);  					point[1] = new Point(x + 6' y + 4);  					point[2] = new Point(x' y + 4);  				}  				else if (  					(this.Dock == DockStyle.Top && !controlToHide.Visible)   					|| (this.Dock == DockStyle.Bottom && controlToHide.Visible)  					)  				{  					// down arrow  					point[0] = new Point(x'y);  					point[1] = new Point(x + 6' y);  					point[2] = new Point(x + 3' y + 3);  				}  			}
Magic Number,OpenCBS.GUI.UserControl,CollapsibleSplitter,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CollapsibleSplitter.cs,ArrowPointArray,The following statement contains a magic number: if(controlToHide!= null)  			{  				// decide which direction the arrow will point  				if (  					(this.Dock == DockStyle.Right && controlToHide.Visible)   					|| (this.Dock == DockStyle.Left && !controlToHide.Visible)  					)  				{  					// right arrow  					point[0] = new Point(x'y);  					point[1] = new Point(x + 3' y + 3);  					point[2] = new Point(x' y + 6);  				}  				else if (  					(this.Dock == DockStyle.Right && !controlToHide.Visible)   					|| (this.Dock == DockStyle.Left && controlToHide.Visible)  					)  				{  					// left arrow  					point[0] = new Point(x + 3 'y);  					point[1] = new Point(x' y + 3);  					point[2] = new Point(x + 3' y + 6);  				}    					// Up/Down arrows added in v1.2    				else if (  					(this.Dock == DockStyle.Top && controlToHide.Visible)   					|| (this.Dock == DockStyle.Bottom && !controlToHide.Visible)  					)  				{  					// up arrow  					point[0] = new Point(x + 3' y);  					point[1] = new Point(x + 6' y + 4);  					point[2] = new Point(x' y + 4);  				}  				else if (  					(this.Dock == DockStyle.Top && !controlToHide.Visible)   					|| (this.Dock == DockStyle.Bottom && controlToHide.Visible)  					)  				{  					// down arrow  					point[0] = new Point(x'y);  					point[1] = new Point(x + 6' y);  					point[2] = new Point(x + 3' y + 3);  				}  			}
Magic Number,OpenCBS.GUI.UserControl,CollapsibleSplitter,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CollapsibleSplitter.cs,ArrowPointArray,The following statement contains a magic number: if(controlToHide!= null)  			{  				// decide which direction the arrow will point  				if (  					(this.Dock == DockStyle.Right && controlToHide.Visible)   					|| (this.Dock == DockStyle.Left && !controlToHide.Visible)  					)  				{  					// right arrow  					point[0] = new Point(x'y);  					point[1] = new Point(x + 3' y + 3);  					point[2] = new Point(x' y + 6);  				}  				else if (  					(this.Dock == DockStyle.Right && !controlToHide.Visible)   					|| (this.Dock == DockStyle.Left && controlToHide.Visible)  					)  				{  					// left arrow  					point[0] = new Point(x + 3 'y);  					point[1] = new Point(x' y + 3);  					point[2] = new Point(x + 3' y + 6);  				}    					// Up/Down arrows added in v1.2    				else if (  					(this.Dock == DockStyle.Top && controlToHide.Visible)   					|| (this.Dock == DockStyle.Bottom && !controlToHide.Visible)  					)  				{  					// up arrow  					point[0] = new Point(x + 3' y);  					point[1] = new Point(x + 6' y + 4);  					point[2] = new Point(x' y + 4);  				}  				else if (  					(this.Dock == DockStyle.Top && !controlToHide.Visible)   					|| (this.Dock == DockStyle.Bottom && controlToHide.Visible)  					)  				{  					// down arrow  					point[0] = new Point(x'y);  					point[1] = new Point(x + 6' y);  					point[2] = new Point(x + 3' y + 3);  				}  			}
Magic Number,OpenCBS.GUI.UserControl,CollapsibleSplitter,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CollapsibleSplitter.cs,ArrowPointArray,The following statement contains a magic number: if(controlToHide!= null)  			{  				// decide which direction the arrow will point  				if (  					(this.Dock == DockStyle.Right && controlToHide.Visible)   					|| (this.Dock == DockStyle.Left && !controlToHide.Visible)  					)  				{  					// right arrow  					point[0] = new Point(x'y);  					point[1] = new Point(x + 3' y + 3);  					point[2] = new Point(x' y + 6);  				}  				else if (  					(this.Dock == DockStyle.Right && !controlToHide.Visible)   					|| (this.Dock == DockStyle.Left && controlToHide.Visible)  					)  				{  					// left arrow  					point[0] = new Point(x + 3 'y);  					point[1] = new Point(x' y + 3);  					point[2] = new Point(x + 3' y + 6);  				}    					// Up/Down arrows added in v1.2    				else if (  					(this.Dock == DockStyle.Top && controlToHide.Visible)   					|| (this.Dock == DockStyle.Bottom && !controlToHide.Visible)  					)  				{  					// up arrow  					point[0] = new Point(x + 3' y);  					point[1] = new Point(x + 6' y + 4);  					point[2] = new Point(x' y + 4);  				}  				else if (  					(this.Dock == DockStyle.Top && !controlToHide.Visible)   					|| (this.Dock == DockStyle.Bottom && controlToHide.Visible)  					)  				{  					// down arrow  					point[0] = new Point(x'y);  					point[1] = new Point(x + 6' y);  					point[2] = new Point(x + 3' y + 3);  				}  			}
Magic Number,OpenCBS.GUI.UserControl,CollapsibleSplitter,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CollapsibleSplitter.cs,ArrowPointArray,The following statement contains a magic number: if(controlToHide!= null)  			{  				// decide which direction the arrow will point  				if (  					(this.Dock == DockStyle.Right && controlToHide.Visible)   					|| (this.Dock == DockStyle.Left && !controlToHide.Visible)  					)  				{  					// right arrow  					point[0] = new Point(x'y);  					point[1] = new Point(x + 3' y + 3);  					point[2] = new Point(x' y + 6);  				}  				else if (  					(this.Dock == DockStyle.Right && !controlToHide.Visible)   					|| (this.Dock == DockStyle.Left && controlToHide.Visible)  					)  				{  					// left arrow  					point[0] = new Point(x + 3 'y);  					point[1] = new Point(x' y + 3);  					point[2] = new Point(x + 3' y + 6);  				}    					// Up/Down arrows added in v1.2    				else if (  					(this.Dock == DockStyle.Top && controlToHide.Visible)   					|| (this.Dock == DockStyle.Bottom && !controlToHide.Visible)  					)  				{  					// up arrow  					point[0] = new Point(x + 3' y);  					point[1] = new Point(x + 6' y + 4);  					point[2] = new Point(x' y + 4);  				}  				else if (  					(this.Dock == DockStyle.Top && !controlToHide.Visible)   					|| (this.Dock == DockStyle.Bottom && controlToHide.Visible)  					)  				{  					// down arrow  					point[0] = new Point(x'y);  					point[1] = new Point(x + 6' y);  					point[2] = new Point(x + 3' y + 3);  				}  			}
Magic Number,OpenCBS.GUI.UserControl,CollapsibleSplitter,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CollapsibleSplitter.cs,ArrowPointArray,The following statement contains a magic number: if(controlToHide!= null)  			{  				// decide which direction the arrow will point  				if (  					(this.Dock == DockStyle.Right && controlToHide.Visible)   					|| (this.Dock == DockStyle.Left && !controlToHide.Visible)  					)  				{  					// right arrow  					point[0] = new Point(x'y);  					point[1] = new Point(x + 3' y + 3);  					point[2] = new Point(x' y + 6);  				}  				else if (  					(this.Dock == DockStyle.Right && !controlToHide.Visible)   					|| (this.Dock == DockStyle.Left && controlToHide.Visible)  					)  				{  					// left arrow  					point[0] = new Point(x + 3 'y);  					point[1] = new Point(x' y + 3);  					point[2] = new Point(x + 3' y + 6);  				}    					// Up/Down arrows added in v1.2    				else if (  					(this.Dock == DockStyle.Top && controlToHide.Visible)   					|| (this.Dock == DockStyle.Bottom && !controlToHide.Visible)  					)  				{  					// up arrow  					point[0] = new Point(x + 3' y);  					point[1] = new Point(x + 6' y + 4);  					point[2] = new Point(x' y + 4);  				}  				else if (  					(this.Dock == DockStyle.Top && !controlToHide.Visible)   					|| (this.Dock == DockStyle.Bottom && controlToHide.Visible)  					)  				{  					// down arrow  					point[0] = new Point(x'y);  					point[1] = new Point(x + 6' y);  					point[2] = new Point(x + 3' y + 3);  				}  			}
Magic Number,OpenCBS.GUI.UserControl,CollapsibleSplitter,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CollapsibleSplitter.cs,ArrowPointArray,The following statement contains a magic number: if(controlToHide!= null)  			{  				// decide which direction the arrow will point  				if (  					(this.Dock == DockStyle.Right && controlToHide.Visible)   					|| (this.Dock == DockStyle.Left && !controlToHide.Visible)  					)  				{  					// right arrow  					point[0] = new Point(x'y);  					point[1] = new Point(x + 3' y + 3);  					point[2] = new Point(x' y + 6);  				}  				else if (  					(this.Dock == DockStyle.Right && !controlToHide.Visible)   					|| (this.Dock == DockStyle.Left && controlToHide.Visible)  					)  				{  					// left arrow  					point[0] = new Point(x + 3 'y);  					point[1] = new Point(x' y + 3);  					point[2] = new Point(x + 3' y + 6);  				}    					// Up/Down arrows added in v1.2    				else if (  					(this.Dock == DockStyle.Top && controlToHide.Visible)   					|| (this.Dock == DockStyle.Bottom && !controlToHide.Visible)  					)  				{  					// up arrow  					point[0] = new Point(x + 3' y);  					point[1] = new Point(x + 6' y + 4);  					point[2] = new Point(x' y + 4);  				}  				else if (  					(this.Dock == DockStyle.Top && !controlToHide.Visible)   					|| (this.Dock == DockStyle.Bottom && controlToHide.Visible)  					)  				{  					// down arrow  					point[0] = new Point(x'y);  					point[1] = new Point(x + 6' y);  					point[2] = new Point(x + 3' y + 3);  				}  			}
Magic Number,OpenCBS.GUI.UserControl,CollapsibleSplitter,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CollapsibleSplitter.cs,ArrowPointArray,The following statement contains a magic number: if(controlToHide!= null)  			{  				// decide which direction the arrow will point  				if (  					(this.Dock == DockStyle.Right && controlToHide.Visible)   					|| (this.Dock == DockStyle.Left && !controlToHide.Visible)  					)  				{  					// right arrow  					point[0] = new Point(x'y);  					point[1] = new Point(x + 3' y + 3);  					point[2] = new Point(x' y + 6);  				}  				else if (  					(this.Dock == DockStyle.Right && !controlToHide.Visible)   					|| (this.Dock == DockStyle.Left && controlToHide.Visible)  					)  				{  					// left arrow  					point[0] = new Point(x + 3 'y);  					point[1] = new Point(x' y + 3);  					point[2] = new Point(x + 3' y + 6);  				}    					// Up/Down arrows added in v1.2    				else if (  					(this.Dock == DockStyle.Top && controlToHide.Visible)   					|| (this.Dock == DockStyle.Bottom && !controlToHide.Visible)  					)  				{  					// up arrow  					point[0] = new Point(x + 3' y);  					point[1] = new Point(x + 6' y + 4);  					point[2] = new Point(x' y + 4);  				}  				else if (  					(this.Dock == DockStyle.Top && !controlToHide.Visible)   					|| (this.Dock == DockStyle.Bottom && controlToHide.Visible)  					)  				{  					// down arrow  					point[0] = new Point(x'y);  					point[1] = new Point(x + 6' y);  					point[2] = new Point(x + 3' y + 3);  				}  			}
Magic Number,OpenCBS.GUI.UserControl,CollapsibleSplitter,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CollapsibleSplitter.cs,ArrowPointArray,The following statement contains a magic number: if(controlToHide!= null)  			{  				// decide which direction the arrow will point  				if (  					(this.Dock == DockStyle.Right && controlToHide.Visible)   					|| (this.Dock == DockStyle.Left && !controlToHide.Visible)  					)  				{  					// right arrow  					point[0] = new Point(x'y);  					point[1] = new Point(x + 3' y + 3);  					point[2] = new Point(x' y + 6);  				}  				else if (  					(this.Dock == DockStyle.Right && !controlToHide.Visible)   					|| (this.Dock == DockStyle.Left && controlToHide.Visible)  					)  				{  					// left arrow  					point[0] = new Point(x + 3 'y);  					point[1] = new Point(x' y + 3);  					point[2] = new Point(x + 3' y + 6);  				}    					// Up/Down arrows added in v1.2    				else if (  					(this.Dock == DockStyle.Top && controlToHide.Visible)   					|| (this.Dock == DockStyle.Bottom && !controlToHide.Visible)  					)  				{  					// up arrow  					point[0] = new Point(x + 3' y);  					point[1] = new Point(x + 6' y + 4);  					point[2] = new Point(x' y + 4);  				}  				else if (  					(this.Dock == DockStyle.Top && !controlToHide.Visible)   					|| (this.Dock == DockStyle.Bottom && controlToHide.Visible)  					)  				{  					// down arrow  					point[0] = new Point(x'y);  					point[1] = new Point(x + 6' y);  					point[2] = new Point(x + 3' y + 3);  				}  			}
Magic Number,OpenCBS.GUI.UserControl,CollapsibleSplitter,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CollapsibleSplitter.cs,ArrowPointArray,The following statement contains a magic number: if(controlToHide!= null)  			{  				// decide which direction the arrow will point  				if (  					(this.Dock == DockStyle.Right && controlToHide.Visible)   					|| (this.Dock == DockStyle.Left && !controlToHide.Visible)  					)  				{  					// right arrow  					point[0] = new Point(x'y);  					point[1] = new Point(x + 3' y + 3);  					point[2] = new Point(x' y + 6);  				}  				else if (  					(this.Dock == DockStyle.Right && !controlToHide.Visible)   					|| (this.Dock == DockStyle.Left && controlToHide.Visible)  					)  				{  					// left arrow  					point[0] = new Point(x + 3 'y);  					point[1] = new Point(x' y + 3);  					point[2] = new Point(x + 3' y + 6);  				}    					// Up/Down arrows added in v1.2    				else if (  					(this.Dock == DockStyle.Top && controlToHide.Visible)   					|| (this.Dock == DockStyle.Bottom && !controlToHide.Visible)  					)  				{  					// up arrow  					point[0] = new Point(x + 3' y);  					point[1] = new Point(x + 6' y + 4);  					point[2] = new Point(x' y + 4);  				}  				else if (  					(this.Dock == DockStyle.Top && !controlToHide.Visible)   					|| (this.Dock == DockStyle.Bottom && controlToHide.Visible)  					)  				{  					// down arrow  					point[0] = new Point(x'y);  					point[1] = new Point(x + 6' y);  					point[2] = new Point(x + 3' y + 3);  				}  			}
Magic Number,OpenCBS.GUI.UserControl,CollapsibleSplitter,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CollapsibleSplitter.cs,CalculateColor,The following statement contains a magic number: Color frontColor = Color.FromArgb(255' front);
Magic Number,OpenCBS.GUI.UserControl,CollapsibleSplitter,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CollapsibleSplitter.cs,CalculateColor,The following statement contains a magic number: Color backColor = Color.FromArgb(255' back);
Magic Number,OpenCBS.GUI.UserControl,CollapsibleSplitter,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CollapsibleSplitter.cs,CalculateColor,The following statement contains a magic number: float fRed = frontRed*alpha/255 + backRed*((float)(255-alpha)/255);
Magic Number,OpenCBS.GUI.UserControl,CollapsibleSplitter,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CollapsibleSplitter.cs,CalculateColor,The following statement contains a magic number: float fRed = frontRed*alpha/255 + backRed*((float)(255-alpha)/255);
Magic Number,OpenCBS.GUI.UserControl,CollapsibleSplitter,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CollapsibleSplitter.cs,CalculateColor,The following statement contains a magic number: float fRed = frontRed*alpha/255 + backRed*((float)(255-alpha)/255);
Magic Number,OpenCBS.GUI.UserControl,CollapsibleSplitter,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CollapsibleSplitter.cs,CalculateColor,The following statement contains a magic number: float fGreen = frontGreen*alpha/255 + backGreen*((float)(255-alpha)/255);
Magic Number,OpenCBS.GUI.UserControl,CollapsibleSplitter,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CollapsibleSplitter.cs,CalculateColor,The following statement contains a magic number: float fGreen = frontGreen*alpha/255 + backGreen*((float)(255-alpha)/255);
Magic Number,OpenCBS.GUI.UserControl,CollapsibleSplitter,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CollapsibleSplitter.cs,CalculateColor,The following statement contains a magic number: float fGreen = frontGreen*alpha/255 + backGreen*((float)(255-alpha)/255);
Magic Number,OpenCBS.GUI.UserControl,CollapsibleSplitter,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CollapsibleSplitter.cs,CalculateColor,The following statement contains a magic number: float fBlue = frontBlue*alpha/255 + backBlue*((float)(255-alpha)/255);
Magic Number,OpenCBS.GUI.UserControl,CollapsibleSplitter,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CollapsibleSplitter.cs,CalculateColor,The following statement contains a magic number: float fBlue = frontBlue*alpha/255 + backBlue*((float)(255-alpha)/255);
Magic Number,OpenCBS.GUI.UserControl,CollapsibleSplitter,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CollapsibleSplitter.cs,CalculateColor,The following statement contains a magic number: float fBlue = frontBlue*alpha/255 + backBlue*((float)(255-alpha)/255);
Magic Number,OpenCBS.GUI.UserControl,CollapsibleSplitter,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CollapsibleSplitter.cs,CalculateColor,The following statement contains a magic number: return  Color.FromArgb(255' newRed' newGreen' newBlue);
Magic Number,OpenCBS.GUI.UserControl,CorporateUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CorporateUserControl.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Controls.Add(this.eacCorporate' 2' 5);
Magic Number,OpenCBS.GUI.UserControl,CorporateUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CorporateUserControl.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Controls.Add(this.eacCorporate' 2' 5);
Magic Number,OpenCBS.GUI.UserControl,CorporateUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CorporateUserControl.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Controls.Add(this.lblEconomicActivity' 0' 5);
Magic Number,OpenCBS.GUI.UserControl,CorporateUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CorporateUserControl.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Controls.Add(this.cbBranch' 1' 4);
Magic Number,OpenCBS.GUI.UserControl,CorporateUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CorporateUserControl.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Controls.Add(this.labelCorpCycle' 0' 3);
Magic Number,OpenCBS.GUI.UserControl,CorporateUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CorporateUserControl.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Controls.Add(this.label3' 0' 4);
Magic Number,OpenCBS.GUI.UserControl,CorporateUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CorporateUserControl.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Controls.Add(this.textBoxCorpLoanCycle' 1' 3);
Magic Number,OpenCBS.GUI.UserControl,CorporateUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CorporateUserControl.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Controls.Add(this.textBoxSmallNameCorporate' 1' 2);
Magic Number,OpenCBS.GUI.UserControl,CorporateUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CorporateUserControl.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Controls.Add(this.labelSmallNameCorporate' 0' 2);
Magic Number,OpenCBS.GUI.UserControl,CorporateUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CorporateUserControl.cs,InitializeComponent,The following statement contains a magic number: this.dateTimePickerDateOfCreate.Value = new System.DateTime(2006' 5' 15' 0' 0' 0' 0);
Magic Number,OpenCBS.GUI.UserControl,CorporateUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CorporateUserControl.cs,InitializeComponent,The following statement contains a magic number: this.dateTimePickerDateOfCreate.Value = new System.DateTime(2006' 5' 15' 0' 0' 0' 0);
Magic Number,OpenCBS.GUI.UserControl,CorporateUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CorporateUserControl.cs,InitializeComponent,The following statement contains a magic number: this.dateTimePickerDateOfCreate.Value = new System.DateTime(2006' 5' 15' 0' 0' 0' 0);
Magic Number,OpenCBS.GUI.UserControl,CorporateUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CorporateUserControl.cs,InitializeComponent,The following statement contains a magic number: this.pictureBox2.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(224))))' ((int)(((byte)(224))))' ((int)(((byte)(224)))));
Magic Number,OpenCBS.GUI.UserControl,CorporateUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CorporateUserControl.cs,InitializeComponent,The following statement contains a magic number: this.pictureBox2.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(224))))' ((int)(((byte)(224))))' ((int)(((byte)(224)))));
Magic Number,OpenCBS.GUI.UserControl,CorporateUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CorporateUserControl.cs,InitializeComponent,The following statement contains a magic number: this.pictureBox2.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(224))))' ((int)(((byte)(224))))' ((int)(((byte)(224)))));
Magic Number,OpenCBS.GUI.UserControl,CorporateUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CorporateUserControl.cs,InitializeComponent,The following statement contains a magic number: this.pictureBox1.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(224))))' ((int)(((byte)(224))))' ((int)(((byte)(224)))));
Magic Number,OpenCBS.GUI.UserControl,CorporateUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CorporateUserControl.cs,InitializeComponent,The following statement contains a magic number: this.pictureBox1.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(224))))' ((int)(((byte)(224))))' ((int)(((byte)(224)))));
Magic Number,OpenCBS.GUI.UserControl,CorporateUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CorporateUserControl.cs,InitializeComponent,The following statement contains a magic number: this.pictureBox1.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(224))))' ((int)(((byte)(224))))' ((int)(((byte)(224)))));
Magic Number,OpenCBS.GUI.UserControl,ElemMvtUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\ElemMvtUserControl.cs,SetFocus,The following statement contains a magic number: if (val)  			{  				_selected = true;  				groupBoxMvts.BackColor = Color.FromArgb(153' 204' 153);  			}  			else  			{                  _selected = false;  				groupBoxMvts.BackColor = Color.White;  			}
Magic Number,OpenCBS.GUI.UserControl,ElemMvtUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\ElemMvtUserControl.cs,SetFocus,The following statement contains a magic number: if (val)  			{  				_selected = true;  				groupBoxMvts.BackColor = Color.FromArgb(153' 204' 153);  			}  			else  			{                  _selected = false;  				groupBoxMvts.BackColor = Color.White;  			}
Magic Number,OpenCBS.GUI.UserControl,ElemMvtUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\ElemMvtUserControl.cs,SetFocus,The following statement contains a magic number: if (val)  			{  				_selected = true;  				groupBoxMvts.BackColor = Color.FromArgb(153' 204' 153);  			}  			else  			{                  _selected = false;  				groupBoxMvts.BackColor = Color.White;  			}
Magic Number,OpenCBS.GUI.UserControl,ElemMvtUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\ElemMvtUserControl.cs,txbAmount_KeyPress,The following statement contains a magic number: if ((keyCode >= 48 && keyCode <= 57) || (keyCode == 8) || (Char.IsControl(e.KeyChar) && e.KeyChar                  != ((char)Keys.V | (char)Keys.ControlKey)) || (Char.IsControl(e.KeyChar) && e.KeyChar !=                  ((char)Keys.C | (char)Keys.ControlKey)) || (e.KeyChar.ToString() ==                  System.Globalization.NumberFormatInfo.CurrentInfo.NumberDecimalSeparator))              {                  e.Handled = false;              }              else                  e.Handled = true;
Magic Number,OpenCBS.GUI.UserControl,ElemMvtUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\ElemMvtUserControl.cs,txbAmount_KeyPress,The following statement contains a magic number: if ((keyCode >= 48 && keyCode <= 57) || (keyCode == 8) || (Char.IsControl(e.KeyChar) && e.KeyChar                  != ((char)Keys.V | (char)Keys.ControlKey)) || (Char.IsControl(e.KeyChar) && e.KeyChar !=                  ((char)Keys.C | (char)Keys.ControlKey)) || (e.KeyChar.ToString() ==                  System.Globalization.NumberFormatInfo.CurrentInfo.NumberDecimalSeparator))              {                  e.Handled = false;              }              else                  e.Handled = true;
Magic Number,OpenCBS.GUI.UserControl,ElemMvtUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\ElemMvtUserControl.cs,txbAmount_KeyPress,The following statement contains a magic number: if ((keyCode >= 48 && keyCode <= 57) || (keyCode == 8) || (Char.IsControl(e.KeyChar) && e.KeyChar                  != ((char)Keys.V | (char)Keys.ControlKey)) || (Char.IsControl(e.KeyChar) && e.KeyChar !=                  ((char)Keys.C | (char)Keys.ControlKey)) || (e.KeyChar.ToString() ==                  System.Globalization.NumberFormatInfo.CurrentInfo.NumberDecimalSeparator))              {                  e.Handled = false;              }              else                  e.Handled = true;
Magic Number,OpenCBS.GUI.UserControl,GroupUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\GroupUserControl.cs,InitializeComponent,The following statement contains a magic number: this.imageListTab.Images.SetKeyName(2' "");
Magic Number,OpenCBS.GUI.UserControl,GroupUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\GroupUserControl.cs,InitializeComponent,The following statement contains a magic number: this.imageListTab.Images.SetKeyName(3' "");
Magic Number,OpenCBS.GUI.UserControl,GroupUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\GroupUserControl.cs,InitializeComponent,The following statement contains a magic number: this.imageListTab.Images.SetKeyName(4' "");
Magic Number,OpenCBS.GUI.UserControl,GroupUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\GroupUserControl.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel4.Controls.Add(this.groupBoxButtonBottom' 0' 3);
Magic Number,OpenCBS.GUI.UserControl,GroupUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\GroupUserControl.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel4.Controls.Add(this.tabControlGroupInfo' 0' 2);
Magic Number,OpenCBS.GUI.UserControl,GroupUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\GroupUserControl.cs,InitializeComponent,The following statement contains a magic number: this.tlpGroupControls.Controls.Add(this.cbBranch' 1' 4);
Magic Number,OpenCBS.GUI.UserControl,GroupUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\GroupUserControl.cs,InitializeComponent,The following statement contains a magic number: this.tlpGroupControls.Controls.Add(this.label2' 0' 4);
Magic Number,OpenCBS.GUI.UserControl,GroupUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\GroupUserControl.cs,InitializeComponent,The following statement contains a magic number: this.tlpGroupControls.Controls.Add(this.textBoxGroupLoanCycle' 1' 3);
Magic Number,OpenCBS.GUI.UserControl,GroupUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\GroupUserControl.cs,InitializeComponent,The following statement contains a magic number: this.tlpGroupControls.Controls.Add(this.labelGroupCycle' 0' 3);
Magic Number,OpenCBS.GUI.UserControl,GroupUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\GroupUserControl.cs,InitializeComponent,The following statement contains a magic number: this.tlpGroupControls.Controls.Add(this.dateTimePickerDateOfEstablishment' 1' 2);
Magic Number,OpenCBS.GUI.UserControl,GroupUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\GroupUserControl.cs,InitializeComponent,The following statement contains a magic number: this.tlpGroupControls.Controls.Add(this.labelDateOfEstablishment' 0' 2);
Magic Number,OpenCBS.GUI.UserControl,GroupUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\GroupUserControl.cs,InitializeComponent,The following statement contains a magic number: this.tlpGroupControls.Controls.Add(this.cbMeetingDay' 2' 1);
Magic Number,OpenCBS.GUI.UserControl,GroupUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\GroupUserControl.cs,InitializeComponent,The following statement contains a magic number: this.dateTimePickerDateOfEstablishment.Value = new System.DateTime(2006' 5' 19' 0' 0' 0' 0);
Magic Number,OpenCBS.GUI.UserControl,GroupUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\GroupUserControl.cs,InitializeComponent,The following statement contains a magic number: this.dateTimePickerDateOfEstablishment.Value = new System.DateTime(2006' 5' 19' 0' 0' 0' 0);
Magic Number,OpenCBS.GUI.UserControl,GroupUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\GroupUserControl.cs,InitializeComponent,The following statement contains a magic number: this.dateTimePickerDateOfEstablishment.Value = new System.DateTime(2006' 5' 19' 0' 0' 0' 0);
Magic Number,OpenCBS.GUI.UserControl,GroupUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\GroupUserControl.cs,InitializeComponent,The following statement contains a magic number: this.tlpGroupControls.SetColumnSpan(this.textBoxName' 2);
Magic Number,OpenCBS.GUI.UserControl,GroupUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\GroupUserControl.cs,InitializeComponent,The following statement contains a magic number: this.pictureBox2.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(224))))' ((int)(((byte)(224))))' ((int)(((byte)(224)))));
Magic Number,OpenCBS.GUI.UserControl,GroupUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\GroupUserControl.cs,InitializeComponent,The following statement contains a magic number: this.pictureBox2.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(224))))' ((int)(((byte)(224))))' ((int)(((byte)(224)))));
Magic Number,OpenCBS.GUI.UserControl,GroupUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\GroupUserControl.cs,InitializeComponent,The following statement contains a magic number: this.pictureBox2.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(224))))' ((int)(((byte)(224))))' ((int)(((byte)(224)))));
Magic Number,OpenCBS.GUI.UserControl,GroupUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\GroupUserControl.cs,InitializeComponent,The following statement contains a magic number: this.pictureBox1.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(224))))' ((int)(((byte)(224))))' ((int)(((byte)(224)))));
Magic Number,OpenCBS.GUI.UserControl,GroupUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\GroupUserControl.cs,InitializeComponent,The following statement contains a magic number: this.pictureBox1.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(224))))' ((int)(((byte)(224))))' ((int)(((byte)(224)))));
Magic Number,OpenCBS.GUI.UserControl,GroupUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\GroupUserControl.cs,InitializeComponent,The following statement contains a magic number: this.pictureBox1.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(224))))' ((int)(((byte)(224))))' ((int)(((byte)(224)))));
Magic Number,OpenCBS.GUI.UserControl,GroupUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\GroupUserControl.cs,GetDayOfWeek,The following statement contains a magic number: switch (cmbWeekDay.SelectedIndex)              {                  case 0: dayOfWeek = DayOfWeek.Sunday;                      break;                  case 1: dayOfWeek = DayOfWeek.Monday;                      break;                  case 2: dayOfWeek = DayOfWeek.Tuesday;                      break;                  case 3: dayOfWeek = DayOfWeek.Wednesday;                      break;                  case 4: dayOfWeek = DayOfWeek.Thursday;                      break;                  case 5: dayOfWeek = DayOfWeek.Friday;                      break;                  case 6: dayOfWeek = DayOfWeek.Saturday;                      break;              }
Magic Number,OpenCBS.GUI.UserControl,GroupUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\GroupUserControl.cs,GetDayOfWeek,The following statement contains a magic number: switch (cmbWeekDay.SelectedIndex)              {                  case 0: dayOfWeek = DayOfWeek.Sunday;                      break;                  case 1: dayOfWeek = DayOfWeek.Monday;                      break;                  case 2: dayOfWeek = DayOfWeek.Tuesday;                      break;                  case 3: dayOfWeek = DayOfWeek.Wednesday;                      break;                  case 4: dayOfWeek = DayOfWeek.Thursday;                      break;                  case 5: dayOfWeek = DayOfWeek.Friday;                      break;                  case 6: dayOfWeek = DayOfWeek.Saturday;                      break;              }
Magic Number,OpenCBS.GUI.UserControl,GroupUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\GroupUserControl.cs,GetDayOfWeek,The following statement contains a magic number: switch (cmbWeekDay.SelectedIndex)              {                  case 0: dayOfWeek = DayOfWeek.Sunday;                      break;                  case 1: dayOfWeek = DayOfWeek.Monday;                      break;                  case 2: dayOfWeek = DayOfWeek.Tuesday;                      break;                  case 3: dayOfWeek = DayOfWeek.Wednesday;                      break;                  case 4: dayOfWeek = DayOfWeek.Thursday;                      break;                  case 5: dayOfWeek = DayOfWeek.Friday;                      break;                  case 6: dayOfWeek = DayOfWeek.Saturday;                      break;              }
Magic Number,OpenCBS.GUI.UserControl,GroupUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\GroupUserControl.cs,GetDayOfWeek,The following statement contains a magic number: switch (cmbWeekDay.SelectedIndex)              {                  case 0: dayOfWeek = DayOfWeek.Sunday;                      break;                  case 1: dayOfWeek = DayOfWeek.Monday;                      break;                  case 2: dayOfWeek = DayOfWeek.Tuesday;                      break;                  case 3: dayOfWeek = DayOfWeek.Wednesday;                      break;                  case 4: dayOfWeek = DayOfWeek.Thursday;                      break;                  case 5: dayOfWeek = DayOfWeek.Friday;                      break;                  case 6: dayOfWeek = DayOfWeek.Saturday;                      break;              }
Magic Number,OpenCBS.GUI.UserControl,GroupUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\GroupUserControl.cs,GetDayOfWeek,The following statement contains a magic number: switch (cmbWeekDay.SelectedIndex)              {                  case 0: dayOfWeek = DayOfWeek.Sunday;                      break;                  case 1: dayOfWeek = DayOfWeek.Monday;                      break;                  case 2: dayOfWeek = DayOfWeek.Tuesday;                      break;                  case 3: dayOfWeek = DayOfWeek.Wednesday;                      break;                  case 4: dayOfWeek = DayOfWeek.Thursday;                      break;                  case 5: dayOfWeek = DayOfWeek.Friday;                      break;                  case 6: dayOfWeek = DayOfWeek.Saturday;                      break;              }
Magic Number,OpenCBS.GUI.UserControl,GroupUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\GroupUserControl.cs,DisplayMembers,The following statement contains a magic number: foreach (Member entry in Group.Members)              {                  Person person = (Person)entry.Tiers;                  ListViewItem listViewItem = new ListViewItem(person.Name) { Tag = entry };                  listViewItem.SubItems.Add(person.IdentificationData);                    if (!person.DateOfBirth.HasValue)                      listViewItem.SubItems.Add("-");                  else                      listViewItem.SubItems.Add(person.DateOfBirth.Value.ToShortDateString());                    listViewItem.SubItems.Add(person.Sex.ToString());                                    listViewItem.SubItems.Add(person.LoanCycle.ToString());                  listViewItem.SubItems.Add(entry.JoinedDate.ToShortDateString());                  listViewItem.SubItems.Add(person.BadClient.ToString());                    if (group.Leader != null)                  {                      if (person.Id == group.Leader.Tiers.Id)                      {                          listViewItem.BackColor = Color.FromArgb(0' 88' 56);                          listViewItem.ForeColor = Color.White;                      }                      else                          listViewItem.BackColor = Color.White;                  }                  listViewOtherMembres.Items.Add(listViewItem);              }
Magic Number,OpenCBS.GUI.UserControl,GroupUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\GroupUserControl.cs,DisplayMembers,The following statement contains a magic number: foreach (Member entry in Group.Members)              {                  Person person = (Person)entry.Tiers;                  ListViewItem listViewItem = new ListViewItem(person.Name) { Tag = entry };                  listViewItem.SubItems.Add(person.IdentificationData);                    if (!person.DateOfBirth.HasValue)                      listViewItem.SubItems.Add("-");                  else                      listViewItem.SubItems.Add(person.DateOfBirth.Value.ToShortDateString());                    listViewItem.SubItems.Add(person.Sex.ToString());                                    listViewItem.SubItems.Add(person.LoanCycle.ToString());                  listViewItem.SubItems.Add(entry.JoinedDate.ToShortDateString());                  listViewItem.SubItems.Add(person.BadClient.ToString());                    if (group.Leader != null)                  {                      if (person.Id == group.Leader.Tiers.Id)                      {                          listViewItem.BackColor = Color.FromArgb(0' 88' 56);                          listViewItem.ForeColor = Color.White;                      }                      else                          listViewItem.BackColor = Color.White;                  }                  listViewOtherMembres.Items.Add(listViewItem);              }
Magic Number,OpenCBS.GUI.UserControl,GroupUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\GroupUserControl.cs,GroupUserControl_Load,The following statement contains a magic number: groupBoxFirstAddress.Size = new Size(tabPageBusinessAddress.Width / 2' tabPageBusinessAddress.Height);
Magic Number,OpenCBS.GUI.UserControl,PersonUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\PersonUserControl.cs,ResetAllComponents,The following statement contains a magic number: dateTimePickerDateOfBirth.Value = new DateTime(1980' 1' 1);
Magic Number,OpenCBS.GUI.UserControl,PersonUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\PersonUserControl.cs,PersonUserControl_Load,The following statement contains a magic number: groupBoxFirstAddress.Size = new Size(tabPageAddress.Width / 2' tabPageAddress.Height);
Magic Number,OpenCBS.GUI.UserControl,PersonUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\PersonUserControl.cs,InitializeComponent,The following statement contains a magic number: this.buttonProjectAddGuarantee.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56)))));
Magic Number,OpenCBS.GUI.UserControl,PersonUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\PersonUserControl.cs,InitializeComponent,The following statement contains a magic number: this.buttonProjectAddGuarantee.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56)))));
Magic Number,OpenCBS.GUI.UserControl,PersonUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\PersonUserControl.cs,InitializeComponent,The following statement contains a magic number: this.buttonProjectViewContract.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56)))));
Magic Number,OpenCBS.GUI.UserControl,PersonUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\PersonUserControl.cs,InitializeComponent,The following statement contains a magic number: this.buttonProjectViewContract.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56)))));
Magic Number,OpenCBS.GUI.UserControl,PersonUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\PersonUserControl.cs,InitializeComponent,The following statement contains a magic number: this.buttonProjectAddContract.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56)))));
Magic Number,OpenCBS.GUI.UserControl,PersonUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\PersonUserControl.cs,InitializeComponent,The following statement contains a magic number: this.buttonProjectAddContract.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56)))));
Magic Number,OpenCBS.GUI.UserControl,PersonUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\PersonUserControl.cs,InitializeComponent,The following statement contains a magic number: this.imageListEconomicInfo.Images.SetKeyName(2' "");
Magic Number,OpenCBS.GUI.UserControl,PersonUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\PersonUserControl.cs,InitializeComponent,The following statement contains a magic number: this.imageListEconomicInfo.Images.SetKeyName(3' "");
Magic Number,OpenCBS.GUI.UserControl,PersonUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\PersonUserControl.cs,InitializeComponent,The following statement contains a magic number: this.imageListEconomicInfo.Images.SetKeyName(4' "");
Magic Number,OpenCBS.GUI.UserControl,PersonUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\PersonUserControl.cs,InitializeComponent,The following statement contains a magic number: this.imageListEconomicInfo.Images.SetKeyName(5' "");
Magic Number,OpenCBS.GUI.UserControl,PersonUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\PersonUserControl.cs,InitializeComponent,The following statement contains a magic number: this.imageListEconomicInfo.Images.SetKeyName(6' "group_32x32.png");
Magic Number,OpenCBS.GUI.UserControl,PersonUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\PersonUserControl.cs,InitializeComponent,The following statement contains a magic number: this.button1.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56)))));
Magic Number,OpenCBS.GUI.UserControl,PersonUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\PersonUserControl.cs,InitializeComponent,The following statement contains a magic number: this.button1.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56)))));
Magic Number,OpenCBS.GUI.UserControl,PersonUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\PersonUserControl.cs,InitializeComponent,The following statement contains a magic number: this.button2.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56)))));
Magic Number,OpenCBS.GUI.UserControl,PersonUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\PersonUserControl.cs,InitializeComponent,The following statement contains a magic number: this.button2.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56)))));
Magic Number,OpenCBS.GUI.UserControl,PersonUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\PersonUserControl.cs,InitializeComponent,The following statement contains a magic number: this.button3.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56)))));
Magic Number,OpenCBS.GUI.UserControl,PersonUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\PersonUserControl.cs,InitializeComponent,The following statement contains a magic number: this.button3.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56)))));
Magic Number,OpenCBS.GUI.UserControl,PersonUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\PersonUserControl.cs,InitializeComponent,The following statement contains a magic number: this.button4.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56)))));
Magic Number,OpenCBS.GUI.UserControl,PersonUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\PersonUserControl.cs,InitializeComponent,The following statement contains a magic number: this.button4.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56)))));
Magic Number,OpenCBS.GUI.UserControl,PersonUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\PersonUserControl.cs,InitializeComponent,The following statement contains a magic number: this.button5.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56)))));
Magic Number,OpenCBS.GUI.UserControl,PersonUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\PersonUserControl.cs,InitializeComponent,The following statement contains a magic number: this.button5.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56)))));
Magic Number,OpenCBS.GUI.UserControl,PersonUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\PersonUserControl.cs,InitializeComponent,The following statement contains a magic number: this.button6.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56)))));
Magic Number,OpenCBS.GUI.UserControl,PersonUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\PersonUserControl.cs,InitializeComponent,The following statement contains a magic number: this.button6.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56)))));
Magic Number,OpenCBS.GUI.UserControl,PersonUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\PersonUserControl.cs,InitializeComponent,The following statement contains a magic number: this.button7.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56)))));
Magic Number,OpenCBS.GUI.UserControl,PersonUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\PersonUserControl.cs,InitializeComponent,The following statement contains a magic number: this.button7.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56)))));
Magic Number,OpenCBS.GUI.UserControl,PersonUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\PersonUserControl.cs,InitializeComponent,The following statement contains a magic number: this.button8.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56)))));
Magic Number,OpenCBS.GUI.UserControl,PersonUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\PersonUserControl.cs,InitializeComponent,The following statement contains a magic number: this.button8.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56)))));
Magic Number,OpenCBS.GUI.UserControl,PersonUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\PersonUserControl.cs,InitializeComponent,The following statement contains a magic number: this.button9.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56)))));
Magic Number,OpenCBS.GUI.UserControl,PersonUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\PersonUserControl.cs,InitializeComponent,The following statement contains a magic number: this.button9.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56)))));
Magic Number,OpenCBS.GUI.UserControl,PersonUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\PersonUserControl.cs,InitializeComponent,The following statement contains a magic number: this.button10.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56)))));
Magic Number,OpenCBS.GUI.UserControl,PersonUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\PersonUserControl.cs,InitializeComponent,The following statement contains a magic number: this.button10.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56)))));
Magic Number,OpenCBS.GUI.UserControl,PersonUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\PersonUserControl.cs,InitializeComponent,The following statement contains a magic number: this.button11.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56)))));
Magic Number,OpenCBS.GUI.UserControl,PersonUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\PersonUserControl.cs,InitializeComponent,The following statement contains a magic number: this.button11.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56)))));
Magic Number,OpenCBS.GUI.UserControl,PersonUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\PersonUserControl.cs,InitializeComponent,The following statement contains a magic number: this.button12.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56)))));
Magic Number,OpenCBS.GUI.UserControl,PersonUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\PersonUserControl.cs,InitializeComponent,The following statement contains a magic number: this.button12.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56)))));
Magic Number,OpenCBS.GUI.UserControl,PersonUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\PersonUserControl.cs,InitializeComponent,The following statement contains a magic number: this.button13.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56)))));
Magic Number,OpenCBS.GUI.UserControl,PersonUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\PersonUserControl.cs,InitializeComponent,The following statement contains a magic number: this.button13.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56)))));
Magic Number,OpenCBS.GUI.UserControl,PersonUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\PersonUserControl.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel3.Controls.Add(this.panelBottom' 0' 2);
Magic Number,OpenCBS.GUI.UserControl,PersonUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\PersonUserControl.cs,InitializeComponent,The following statement contains a magic number: this.pictureBox2.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(224))))' ((int)(((byte)(224))))' ((int)(((byte)(224)))));
Magic Number,OpenCBS.GUI.UserControl,PersonUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\PersonUserControl.cs,InitializeComponent,The following statement contains a magic number: this.pictureBox2.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(224))))' ((int)(((byte)(224))))' ((int)(((byte)(224)))));
Magic Number,OpenCBS.GUI.UserControl,PersonUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\PersonUserControl.cs,InitializeComponent,The following statement contains a magic number: this.pictureBox2.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(224))))' ((int)(((byte)(224))))' ((int)(((byte)(224)))));
Magic Number,OpenCBS.GUI.UserControl,PersonUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\PersonUserControl.cs,InitializeComponent,The following statement contains a magic number: this.pictureBox.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(224))))' ((int)(((byte)(224))))' ((int)(((byte)(224)))));
Magic Number,OpenCBS.GUI.UserControl,PersonUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\PersonUserControl.cs,InitializeComponent,The following statement contains a magic number: this.pictureBox.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(224))))' ((int)(((byte)(224))))' ((int)(((byte)(224)))));
Magic Number,OpenCBS.GUI.UserControl,PersonUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\PersonUserControl.cs,InitializeComponent,The following statement contains a magic number: this.pictureBox.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(224))))' ((int)(((byte)(224))))' ((int)(((byte)(224)))));
Magic Number,OpenCBS.GUI.UserControl,PersonUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\PersonUserControl.cs,InitializeComponent,The following statement contains a magic number: this.dateTimePickerDateOfBirth.Value = new System.DateTime(2009' 10' 7' 0' 0' 0' 0);
Magic Number,OpenCBS.GUI.UserControl,PersonUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\PersonUserControl.cs,InitializeComponent,The following statement contains a magic number: this.dateTimePickerDateOfBirth.Value = new System.DateTime(2009' 10' 7' 0' 0' 0' 0);
Magic Number,OpenCBS.GUI.UserControl,PersonUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\PersonUserControl.cs,InitializeComponent,The following statement contains a magic number: this.dateTimePickerDateOfBirth.Value = new System.DateTime(2009' 10' 7' 0' 0' 0' 0);
Magic Number,OpenCBS.GUI.UserControl,SimilarIDForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\SimilarIDForm.cs,InitializeComponent,The following statement contains a magic number: this.label1.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(64))))' ((int)(((byte)(0)))));
Magic Number,OpenCBS.GUI.UserControl,SplitButton,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\SplitButton.cs,InitDefaultSplitImages,The following statement contains a magic number: if (_DefaultSplitImages.Images.Count == 0 || refresh)              {                  if (_DefaultSplitImages.Images.Count > 0)                  {                      _DefaultSplitImages.Images.Clear();                  }                    try                  {                      int w = 0;                      int h = 0;                        if (!_CalculateSplitRect && _SplitWidth > 0)                      {                          w = _SplitWidth;                      }                      else                      {                          w = 18;                      }                        if (!CalculateSplitRect && SplitHeight > 0)                      {                          h = SplitHeight;                      }                      else                      {                          h = Height;                      }                        h -= 8;                        _DefaultSplitImages.ImageSize = new Size(w' h);                        int mw = w / 2;                      mw += (mw % 2);                      int mh = h / 2;                        Pen fPen = new Pen(ForeColor' 1);                      SolidBrush fBrush = new SolidBrush(ForeColor);                        Bitmap imgN = new Bitmap(w' h);                      Graphics g = Graphics.FromImage(imgN);                        g.CompositingQuality = CompositingQuality.HighQuality;                        //g.DrawLine(SystemPens.ButtonShadow' new Point(1' 1)' new Point(1' h - 2));                      //g.DrawLine(SystemPens.ButtonFace' new Point(2' 1)' new Point(2' h));                        g.FillPolygon(fBrush' new Point[] { new Point(mw - 2' mh - 1)'                                                            new Point(mw + 3' mh - 1)'                                                           new Point(mw' mh + 2) });                        g.Dispose();                        Bitmap imgH = new Bitmap(w' h);                      g = Graphics.FromImage(imgH);                        g.CompositingQuality = CompositingQuality.HighQuality;                        //g.DrawLine(SystemPens.ButtonShadow' new Point(1' 1)' new Point(1' h - 2));                      //g.DrawLine(SystemPens.ButtonFace' new Point(2' 1)' new Point(2' h));                        g.FillPolygon(fBrush' new Point[] { new Point(mw - 3' mh - 2)'                                                            new Point(mw + 4' mh - 2)'                                                           new Point(mw' mh + 2) });                        g.Dispose();                        Bitmap imgC = new Bitmap(w' h);                      g = Graphics.FromImage(imgC);                        g.CompositingQuality = CompositingQuality.HighQuality;                        //g.DrawLine(SystemPens.ButtonShadow' new Point(1' 1)' new Point(1' h - 2));                      //g.DrawLine(SystemPens.ButtonFace' new Point(2' 1)' new Point(2' h));                        g.FillPolygon(fBrush' new Point[] { new Point(mw - 2' mh - 1)'                                                            new Point(mw + 3' mh - 1)'                                                           new Point(mw' mh + 2) });                        g.Dispose();                        Bitmap imgD = new Bitmap(w' h);                      g = Graphics.FromImage(imgD);                        g.CompositingQuality = CompositingQuality.HighQuality;                        //g.DrawLine(SystemPens.GrayText' new Point(1' 1)' new Point(1' h - 2));                        g.FillPolygon(new SolidBrush(SystemColors.GrayText)' new Point[] { new Point(mw - 2' mh - 1)'                                                            new Point(mw + 3' mh - 1)'                                                           new Point(mw' mh + 2) });                        g.Dispose();                        Bitmap imgF = new Bitmap(w' h);                      g = Graphics.FromImage(imgF);                        g.CompositingQuality = CompositingQuality.HighQuality;                        //g.DrawLine(SystemPens.ButtonShadow' new Point(1' 1)' new Point(1' h - 2));                      //g.DrawLine(SystemPens.ButtonFace' new Point(2' 1)' new Point(2' h));                        g.FillPolygon(fBrush' new Point[] { new Point(mw - 2' mh - 1)'                                                            new Point(mw + 3' mh - 1)'                                                           new Point(mw' mh + 2) });                        g.Dispose();                        fPen.Dispose();                      fBrush.Dispose();                        _DefaultSplitImages.Images.Add(_NormalImage' imgN);                      _DefaultSplitImages.Images.Add(_HoverImage' imgH);                      _DefaultSplitImages.Images.Add(_ClickedImage' imgC);                      _DefaultSplitImages.Images.Add(_DisabledImage' imgD);                      _DefaultSplitImages.Images.Add(_FocusedImage' imgF);                  }                  catch                  { }              }
Magic Number,OpenCBS.GUI.UserControl,SplitButton,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\SplitButton.cs,InitDefaultSplitImages,The following statement contains a magic number: if (_DefaultSplitImages.Images.Count == 0 || refresh)              {                  if (_DefaultSplitImages.Images.Count > 0)                  {                      _DefaultSplitImages.Images.Clear();                  }                    try                  {                      int w = 0;                      int h = 0;                        if (!_CalculateSplitRect && _SplitWidth > 0)                      {                          w = _SplitWidth;                      }                      else                      {                          w = 18;                      }                        if (!CalculateSplitRect && SplitHeight > 0)                      {                          h = SplitHeight;                      }                      else                      {                          h = Height;                      }                        h -= 8;                        _DefaultSplitImages.ImageSize = new Size(w' h);                        int mw = w / 2;                      mw += (mw % 2);                      int mh = h / 2;                        Pen fPen = new Pen(ForeColor' 1);                      SolidBrush fBrush = new SolidBrush(ForeColor);                        Bitmap imgN = new Bitmap(w' h);                      Graphics g = Graphics.FromImage(imgN);                        g.CompositingQuality = CompositingQuality.HighQuality;                        //g.DrawLine(SystemPens.ButtonShadow' new Point(1' 1)' new Point(1' h - 2));                      //g.DrawLine(SystemPens.ButtonFace' new Point(2' 1)' new Point(2' h));                        g.FillPolygon(fBrush' new Point[] { new Point(mw - 2' mh - 1)'                                                            new Point(mw + 3' mh - 1)'                                                           new Point(mw' mh + 2) });                        g.Dispose();                        Bitmap imgH = new Bitmap(w' h);                      g = Graphics.FromImage(imgH);                        g.CompositingQuality = CompositingQuality.HighQuality;                        //g.DrawLine(SystemPens.ButtonShadow' new Point(1' 1)' new Point(1' h - 2));                      //g.DrawLine(SystemPens.ButtonFace' new Point(2' 1)' new Point(2' h));                        g.FillPolygon(fBrush' new Point[] { new Point(mw - 3' mh - 2)'                                                            new Point(mw + 4' mh - 2)'                                                           new Point(mw' mh + 2) });                        g.Dispose();                        Bitmap imgC = new Bitmap(w' h);                      g = Graphics.FromImage(imgC);                        g.CompositingQuality = CompositingQuality.HighQuality;                        //g.DrawLine(SystemPens.ButtonShadow' new Point(1' 1)' new Point(1' h - 2));                      //g.DrawLine(SystemPens.ButtonFace' new Point(2' 1)' new Point(2' h));                        g.FillPolygon(fBrush' new Point[] { new Point(mw - 2' mh - 1)'                                                            new Point(mw + 3' mh - 1)'                                                           new Point(mw' mh + 2) });                        g.Dispose();                        Bitmap imgD = new Bitmap(w' h);                      g = Graphics.FromImage(imgD);                        g.CompositingQuality = CompositingQuality.HighQuality;                        //g.DrawLine(SystemPens.GrayText' new Point(1' 1)' new Point(1' h - 2));                        g.FillPolygon(new SolidBrush(SystemColors.GrayText)' new Point[] { new Point(mw - 2' mh - 1)'                                                            new Point(mw + 3' mh - 1)'                                                           new Point(mw' mh + 2) });                        g.Dispose();                        Bitmap imgF = new Bitmap(w' h);                      g = Graphics.FromImage(imgF);                        g.CompositingQuality = CompositingQuality.HighQuality;                        //g.DrawLine(SystemPens.ButtonShadow' new Point(1' 1)' new Point(1' h - 2));                      //g.DrawLine(SystemPens.ButtonFace' new Point(2' 1)' new Point(2' h));                        g.FillPolygon(fBrush' new Point[] { new Point(mw - 2' mh - 1)'                                                            new Point(mw + 3' mh - 1)'                                                           new Point(mw' mh + 2) });                        g.Dispose();                        fPen.Dispose();                      fBrush.Dispose();                        _DefaultSplitImages.Images.Add(_NormalImage' imgN);                      _DefaultSplitImages.Images.Add(_HoverImage' imgH);                      _DefaultSplitImages.Images.Add(_ClickedImage' imgC);                      _DefaultSplitImages.Images.Add(_DisabledImage' imgD);                      _DefaultSplitImages.Images.Add(_FocusedImage' imgF);                  }                  catch                  { }              }
Magic Number,OpenCBS.GUI.UserControl,SplitButton,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\SplitButton.cs,InitDefaultSplitImages,The following statement contains a magic number: if (_DefaultSplitImages.Images.Count == 0 || refresh)              {                  if (_DefaultSplitImages.Images.Count > 0)                  {                      _DefaultSplitImages.Images.Clear();                  }                    try                  {                      int w = 0;                      int h = 0;                        if (!_CalculateSplitRect && _SplitWidth > 0)                      {                          w = _SplitWidth;                      }                      else                      {                          w = 18;                      }                        if (!CalculateSplitRect && SplitHeight > 0)                      {                          h = SplitHeight;                      }                      else                      {                          h = Height;                      }                        h -= 8;                        _DefaultSplitImages.ImageSize = new Size(w' h);                        int mw = w / 2;                      mw += (mw % 2);                      int mh = h / 2;                        Pen fPen = new Pen(ForeColor' 1);                      SolidBrush fBrush = new SolidBrush(ForeColor);                        Bitmap imgN = new Bitmap(w' h);                      Graphics g = Graphics.FromImage(imgN);                        g.CompositingQuality = CompositingQuality.HighQuality;                        //g.DrawLine(SystemPens.ButtonShadow' new Point(1' 1)' new Point(1' h - 2));                      //g.DrawLine(SystemPens.ButtonFace' new Point(2' 1)' new Point(2' h));                        g.FillPolygon(fBrush' new Point[] { new Point(mw - 2' mh - 1)'                                                            new Point(mw + 3' mh - 1)'                                                           new Point(mw' mh + 2) });                        g.Dispose();                        Bitmap imgH = new Bitmap(w' h);                      g = Graphics.FromImage(imgH);                        g.CompositingQuality = CompositingQuality.HighQuality;                        //g.DrawLine(SystemPens.ButtonShadow' new Point(1' 1)' new Point(1' h - 2));                      //g.DrawLine(SystemPens.ButtonFace' new Point(2' 1)' new Point(2' h));                        g.FillPolygon(fBrush' new Point[] { new Point(mw - 3' mh - 2)'                                                            new Point(mw + 4' mh - 2)'                                                           new Point(mw' mh + 2) });                        g.Dispose();                        Bitmap imgC = new Bitmap(w' h);                      g = Graphics.FromImage(imgC);                        g.CompositingQuality = CompositingQuality.HighQuality;                        //g.DrawLine(SystemPens.ButtonShadow' new Point(1' 1)' new Point(1' h - 2));                      //g.DrawLine(SystemPens.ButtonFace' new Point(2' 1)' new Point(2' h));                        g.FillPolygon(fBrush' new Point[] { new Point(mw - 2' mh - 1)'                                                            new Point(mw + 3' mh - 1)'                                                           new Point(mw' mh + 2) });                        g.Dispose();                        Bitmap imgD = new Bitmap(w' h);                      g = Graphics.FromImage(imgD);                        g.CompositingQuality = CompositingQuality.HighQuality;                        //g.DrawLine(SystemPens.GrayText' new Point(1' 1)' new Point(1' h - 2));                        g.FillPolygon(new SolidBrush(SystemColors.GrayText)' new Point[] { new Point(mw - 2' mh - 1)'                                                            new Point(mw + 3' mh - 1)'                                                           new Point(mw' mh + 2) });                        g.Dispose();                        Bitmap imgF = new Bitmap(w' h);                      g = Graphics.FromImage(imgF);                        g.CompositingQuality = CompositingQuality.HighQuality;                        //g.DrawLine(SystemPens.ButtonShadow' new Point(1' 1)' new Point(1' h - 2));                      //g.DrawLine(SystemPens.ButtonFace' new Point(2' 1)' new Point(2' h));                        g.FillPolygon(fBrush' new Point[] { new Point(mw - 2' mh - 1)'                                                            new Point(mw + 3' mh - 1)'                                                           new Point(mw' mh + 2) });                        g.Dispose();                        fPen.Dispose();                      fBrush.Dispose();                        _DefaultSplitImages.Images.Add(_NormalImage' imgN);                      _DefaultSplitImages.Images.Add(_HoverImage' imgH);                      _DefaultSplitImages.Images.Add(_ClickedImage' imgC);                      _DefaultSplitImages.Images.Add(_DisabledImage' imgD);                      _DefaultSplitImages.Images.Add(_FocusedImage' imgF);                  }                  catch                  { }              }
Magic Number,OpenCBS.GUI.UserControl,SplitButton,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\SplitButton.cs,InitDefaultSplitImages,The following statement contains a magic number: if (_DefaultSplitImages.Images.Count == 0 || refresh)              {                  if (_DefaultSplitImages.Images.Count > 0)                  {                      _DefaultSplitImages.Images.Clear();                  }                    try                  {                      int w = 0;                      int h = 0;                        if (!_CalculateSplitRect && _SplitWidth > 0)                      {                          w = _SplitWidth;                      }                      else                      {                          w = 18;                      }                        if (!CalculateSplitRect && SplitHeight > 0)                      {                          h = SplitHeight;                      }                      else                      {                          h = Height;                      }                        h -= 8;                        _DefaultSplitImages.ImageSize = new Size(w' h);                        int mw = w / 2;                      mw += (mw % 2);                      int mh = h / 2;                        Pen fPen = new Pen(ForeColor' 1);                      SolidBrush fBrush = new SolidBrush(ForeColor);                        Bitmap imgN = new Bitmap(w' h);                      Graphics g = Graphics.FromImage(imgN);                        g.CompositingQuality = CompositingQuality.HighQuality;                        //g.DrawLine(SystemPens.ButtonShadow' new Point(1' 1)' new Point(1' h - 2));                      //g.DrawLine(SystemPens.ButtonFace' new Point(2' 1)' new Point(2' h));                        g.FillPolygon(fBrush' new Point[] { new Point(mw - 2' mh - 1)'                                                            new Point(mw + 3' mh - 1)'                                                           new Point(mw' mh + 2) });                        g.Dispose();                        Bitmap imgH = new Bitmap(w' h);                      g = Graphics.FromImage(imgH);                        g.CompositingQuality = CompositingQuality.HighQuality;                        //g.DrawLine(SystemPens.ButtonShadow' new Point(1' 1)' new Point(1' h - 2));                      //g.DrawLine(SystemPens.ButtonFace' new Point(2' 1)' new Point(2' h));                        g.FillPolygon(fBrush' new Point[] { new Point(mw - 3' mh - 2)'                                                            new Point(mw + 4' mh - 2)'                                                           new Point(mw' mh + 2) });                        g.Dispose();                        Bitmap imgC = new Bitmap(w' h);                      g = Graphics.FromImage(imgC);                        g.CompositingQuality = CompositingQuality.HighQuality;                        //g.DrawLine(SystemPens.ButtonShadow' new Point(1' 1)' new Point(1' h - 2));                      //g.DrawLine(SystemPens.ButtonFace' new Point(2' 1)' new Point(2' h));                        g.FillPolygon(fBrush' new Point[] { new Point(mw - 2' mh - 1)'                                                            new Point(mw + 3' mh - 1)'                                                           new Point(mw' mh + 2) });                        g.Dispose();                        Bitmap imgD = new Bitmap(w' h);                      g = Graphics.FromImage(imgD);                        g.CompositingQuality = CompositingQuality.HighQuality;                        //g.DrawLine(SystemPens.GrayText' new Point(1' 1)' new Point(1' h - 2));                        g.FillPolygon(new SolidBrush(SystemColors.GrayText)' new Point[] { new Point(mw - 2' mh - 1)'                                                            new Point(mw + 3' mh - 1)'                                                           new Point(mw' mh + 2) });                        g.Dispose();                        Bitmap imgF = new Bitmap(w' h);                      g = Graphics.FromImage(imgF);                        g.CompositingQuality = CompositingQuality.HighQuality;                        //g.DrawLine(SystemPens.ButtonShadow' new Point(1' 1)' new Point(1' h - 2));                      //g.DrawLine(SystemPens.ButtonFace' new Point(2' 1)' new Point(2' h));                        g.FillPolygon(fBrush' new Point[] { new Point(mw - 2' mh - 1)'                                                            new Point(mw + 3' mh - 1)'                                                           new Point(mw' mh + 2) });                        g.Dispose();                        fPen.Dispose();                      fBrush.Dispose();                        _DefaultSplitImages.Images.Add(_NormalImage' imgN);                      _DefaultSplitImages.Images.Add(_HoverImage' imgH);                      _DefaultSplitImages.Images.Add(_ClickedImage' imgC);                      _DefaultSplitImages.Images.Add(_DisabledImage' imgD);                      _DefaultSplitImages.Images.Add(_FocusedImage' imgF);                  }                  catch                  { }              }
Magic Number,OpenCBS.GUI.UserControl,SplitButton,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\SplitButton.cs,InitDefaultSplitImages,The following statement contains a magic number: if (_DefaultSplitImages.Images.Count == 0 || refresh)              {                  if (_DefaultSplitImages.Images.Count > 0)                  {                      _DefaultSplitImages.Images.Clear();                  }                    try                  {                      int w = 0;                      int h = 0;                        if (!_CalculateSplitRect && _SplitWidth > 0)                      {                          w = _SplitWidth;                      }                      else                      {                          w = 18;                      }                        if (!CalculateSplitRect && SplitHeight > 0)                      {                          h = SplitHeight;                      }                      else                      {                          h = Height;                      }                        h -= 8;                        _DefaultSplitImages.ImageSize = new Size(w' h);                        int mw = w / 2;                      mw += (mw % 2);                      int mh = h / 2;                        Pen fPen = new Pen(ForeColor' 1);                      SolidBrush fBrush = new SolidBrush(ForeColor);                        Bitmap imgN = new Bitmap(w' h);                      Graphics g = Graphics.FromImage(imgN);                        g.CompositingQuality = CompositingQuality.HighQuality;                        //g.DrawLine(SystemPens.ButtonShadow' new Point(1' 1)' new Point(1' h - 2));                      //g.DrawLine(SystemPens.ButtonFace' new Point(2' 1)' new Point(2' h));                        g.FillPolygon(fBrush' new Point[] { new Point(mw - 2' mh - 1)'                                                            new Point(mw + 3' mh - 1)'                                                           new Point(mw' mh + 2) });                        g.Dispose();                        Bitmap imgH = new Bitmap(w' h);                      g = Graphics.FromImage(imgH);                        g.CompositingQuality = CompositingQuality.HighQuality;                        //g.DrawLine(SystemPens.ButtonShadow' new Point(1' 1)' new Point(1' h - 2));                      //g.DrawLine(SystemPens.ButtonFace' new Point(2' 1)' new Point(2' h));                        g.FillPolygon(fBrush' new Point[] { new Point(mw - 3' mh - 2)'                                                            new Point(mw + 4' mh - 2)'                                                           new Point(mw' mh + 2) });                        g.Dispose();                        Bitmap imgC = new Bitmap(w' h);                      g = Graphics.FromImage(imgC);                        g.CompositingQuality = CompositingQuality.HighQuality;                        //g.DrawLine(SystemPens.ButtonShadow' new Point(1' 1)' new Point(1' h - 2));                      //g.DrawLine(SystemPens.ButtonFace' new Point(2' 1)' new Point(2' h));                        g.FillPolygon(fBrush' new Point[] { new Point(mw - 2' mh - 1)'                                                            new Point(mw + 3' mh - 1)'                                                           new Point(mw' mh + 2) });                        g.Dispose();                        Bitmap imgD = new Bitmap(w' h);                      g = Graphics.FromImage(imgD);                        g.CompositingQuality = CompositingQuality.HighQuality;                        //g.DrawLine(SystemPens.GrayText' new Point(1' 1)' new Point(1' h - 2));                        g.FillPolygon(new SolidBrush(SystemColors.GrayText)' new Point[] { new Point(mw - 2' mh - 1)'                                                            new Point(mw + 3' mh - 1)'                                                           new Point(mw' mh + 2) });                        g.Dispose();                        Bitmap imgF = new Bitmap(w' h);                      g = Graphics.FromImage(imgF);                        g.CompositingQuality = CompositingQuality.HighQuality;                        //g.DrawLine(SystemPens.ButtonShadow' new Point(1' 1)' new Point(1' h - 2));                      //g.DrawLine(SystemPens.ButtonFace' new Point(2' 1)' new Point(2' h));                        g.FillPolygon(fBrush' new Point[] { new Point(mw - 2' mh - 1)'                                                            new Point(mw + 3' mh - 1)'                                                           new Point(mw' mh + 2) });                        g.Dispose();                        fPen.Dispose();                      fBrush.Dispose();                        _DefaultSplitImages.Images.Add(_NormalImage' imgN);                      _DefaultSplitImages.Images.Add(_HoverImage' imgH);                      _DefaultSplitImages.Images.Add(_ClickedImage' imgC);                      _DefaultSplitImages.Images.Add(_DisabledImage' imgD);                      _DefaultSplitImages.Images.Add(_FocusedImage' imgF);                  }                  catch                  { }              }
Magic Number,OpenCBS.GUI.UserControl,SplitButton,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\SplitButton.cs,InitDefaultSplitImages,The following statement contains a magic number: if (_DefaultSplitImages.Images.Count == 0 || refresh)              {                  if (_DefaultSplitImages.Images.Count > 0)                  {                      _DefaultSplitImages.Images.Clear();                  }                    try                  {                      int w = 0;                      int h = 0;                        if (!_CalculateSplitRect && _SplitWidth > 0)                      {                          w = _SplitWidth;                      }                      else                      {                          w = 18;                      }                        if (!CalculateSplitRect && SplitHeight > 0)                      {                          h = SplitHeight;                      }                      else                      {                          h = Height;                      }                        h -= 8;                        _DefaultSplitImages.ImageSize = new Size(w' h);                        int mw = w / 2;                      mw += (mw % 2);                      int mh = h / 2;                        Pen fPen = new Pen(ForeColor' 1);                      SolidBrush fBrush = new SolidBrush(ForeColor);                        Bitmap imgN = new Bitmap(w' h);                      Graphics g = Graphics.FromImage(imgN);                        g.CompositingQuality = CompositingQuality.HighQuality;                        //g.DrawLine(SystemPens.ButtonShadow' new Point(1' 1)' new Point(1' h - 2));                      //g.DrawLine(SystemPens.ButtonFace' new Point(2' 1)' new Point(2' h));                        g.FillPolygon(fBrush' new Point[] { new Point(mw - 2' mh - 1)'                                                            new Point(mw + 3' mh - 1)'                                                           new Point(mw' mh + 2) });                        g.Dispose();                        Bitmap imgH = new Bitmap(w' h);                      g = Graphics.FromImage(imgH);                        g.CompositingQuality = CompositingQuality.HighQuality;                        //g.DrawLine(SystemPens.ButtonShadow' new Point(1' 1)' new Point(1' h - 2));                      //g.DrawLine(SystemPens.ButtonFace' new Point(2' 1)' new Point(2' h));                        g.FillPolygon(fBrush' new Point[] { new Point(mw - 3' mh - 2)'                                                            new Point(mw + 4' mh - 2)'                                                           new Point(mw' mh + 2) });                        g.Dispose();                        Bitmap imgC = new Bitmap(w' h);                      g = Graphics.FromImage(imgC);                        g.CompositingQuality = CompositingQuality.HighQuality;                        //g.DrawLine(SystemPens.ButtonShadow' new Point(1' 1)' new Point(1' h - 2));                      //g.DrawLine(SystemPens.ButtonFace' new Point(2' 1)' new Point(2' h));                        g.FillPolygon(fBrush' new Point[] { new Point(mw - 2' mh - 1)'                                                            new Point(mw + 3' mh - 1)'                                                           new Point(mw' mh + 2) });                        g.Dispose();                        Bitmap imgD = new Bitmap(w' h);                      g = Graphics.FromImage(imgD);                        g.CompositingQuality = CompositingQuality.HighQuality;                        //g.DrawLine(SystemPens.GrayText' new Point(1' 1)' new Point(1' h - 2));                        g.FillPolygon(new SolidBrush(SystemColors.GrayText)' new Point[] { new Point(mw - 2' mh - 1)'                                                            new Point(mw + 3' mh - 1)'                                                           new Point(mw' mh + 2) });                        g.Dispose();                        Bitmap imgF = new Bitmap(w' h);                      g = Graphics.FromImage(imgF);                        g.CompositingQuality = CompositingQuality.HighQuality;                        //g.DrawLine(SystemPens.ButtonShadow' new Point(1' 1)' new Point(1' h - 2));                      //g.DrawLine(SystemPens.ButtonFace' new Point(2' 1)' new Point(2' h));                        g.FillPolygon(fBrush' new Point[] { new Point(mw - 2' mh - 1)'                                                            new Point(mw + 3' mh - 1)'                                                           new Point(mw' mh + 2) });                        g.Dispose();                        fPen.Dispose();                      fBrush.Dispose();                        _DefaultSplitImages.Images.Add(_NormalImage' imgN);                      _DefaultSplitImages.Images.Add(_HoverImage' imgH);                      _DefaultSplitImages.Images.Add(_ClickedImage' imgC);                      _DefaultSplitImages.Images.Add(_DisabledImage' imgD);                      _DefaultSplitImages.Images.Add(_FocusedImage' imgF);                  }                  catch                  { }              }
Magic Number,OpenCBS.GUI.UserControl,SplitButton,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\SplitButton.cs,InitDefaultSplitImages,The following statement contains a magic number: if (_DefaultSplitImages.Images.Count == 0 || refresh)              {                  if (_DefaultSplitImages.Images.Count > 0)                  {                      _DefaultSplitImages.Images.Clear();                  }                    try                  {                      int w = 0;                      int h = 0;                        if (!_CalculateSplitRect && _SplitWidth > 0)                      {                          w = _SplitWidth;                      }                      else                      {                          w = 18;                      }                        if (!CalculateSplitRect && SplitHeight > 0)                      {                          h = SplitHeight;                      }                      else                      {                          h = Height;                      }                        h -= 8;                        _DefaultSplitImages.ImageSize = new Size(w' h);                        int mw = w / 2;                      mw += (mw % 2);                      int mh = h / 2;                        Pen fPen = new Pen(ForeColor' 1);                      SolidBrush fBrush = new SolidBrush(ForeColor);                        Bitmap imgN = new Bitmap(w' h);                      Graphics g = Graphics.FromImage(imgN);                        g.CompositingQuality = CompositingQuality.HighQuality;                        //g.DrawLine(SystemPens.ButtonShadow' new Point(1' 1)' new Point(1' h - 2));                      //g.DrawLine(SystemPens.ButtonFace' new Point(2' 1)' new Point(2' h));                        g.FillPolygon(fBrush' new Point[] { new Point(mw - 2' mh - 1)'                                                            new Point(mw + 3' mh - 1)'                                                           new Point(mw' mh + 2) });                        g.Dispose();                        Bitmap imgH = new Bitmap(w' h);                      g = Graphics.FromImage(imgH);                        g.CompositingQuality = CompositingQuality.HighQuality;                        //g.DrawLine(SystemPens.ButtonShadow' new Point(1' 1)' new Point(1' h - 2));                      //g.DrawLine(SystemPens.ButtonFace' new Point(2' 1)' new Point(2' h));                        g.FillPolygon(fBrush' new Point[] { new Point(mw - 3' mh - 2)'                                                            new Point(mw + 4' mh - 2)'                                                           new Point(mw' mh + 2) });                        g.Dispose();                        Bitmap imgC = new Bitmap(w' h);                      g = Graphics.FromImage(imgC);                        g.CompositingQuality = CompositingQuality.HighQuality;                        //g.DrawLine(SystemPens.ButtonShadow' new Point(1' 1)' new Point(1' h - 2));                      //g.DrawLine(SystemPens.ButtonFace' new Point(2' 1)' new Point(2' h));                        g.FillPolygon(fBrush' new Point[] { new Point(mw - 2' mh - 1)'                                                            new Point(mw + 3' mh - 1)'                                                           new Point(mw' mh + 2) });                        g.Dispose();                        Bitmap imgD = new Bitmap(w' h);                      g = Graphics.FromImage(imgD);                        g.CompositingQuality = CompositingQuality.HighQuality;                        //g.DrawLine(SystemPens.GrayText' new Point(1' 1)' new Point(1' h - 2));                        g.FillPolygon(new SolidBrush(SystemColors.GrayText)' new Point[] { new Point(mw - 2' mh - 1)'                                                            new Point(mw + 3' mh - 1)'                                                           new Point(mw' mh + 2) });                        g.Dispose();                        Bitmap imgF = new Bitmap(w' h);                      g = Graphics.FromImage(imgF);                        g.CompositingQuality = CompositingQuality.HighQuality;                        //g.DrawLine(SystemPens.ButtonShadow' new Point(1' 1)' new Point(1' h - 2));                      //g.DrawLine(SystemPens.ButtonFace' new Point(2' 1)' new Point(2' h));                        g.FillPolygon(fBrush' new Point[] { new Point(mw - 2' mh - 1)'                                                            new Point(mw + 3' mh - 1)'                                                           new Point(mw' mh + 2) });                        g.Dispose();                        fPen.Dispose();                      fBrush.Dispose();                        _DefaultSplitImages.Images.Add(_NormalImage' imgN);                      _DefaultSplitImages.Images.Add(_HoverImage' imgH);                      _DefaultSplitImages.Images.Add(_ClickedImage' imgC);                      _DefaultSplitImages.Images.Add(_DisabledImage' imgD);                      _DefaultSplitImages.Images.Add(_FocusedImage' imgF);                  }                  catch                  { }              }
Magic Number,OpenCBS.GUI.UserControl,SplitButton,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\SplitButton.cs,InitDefaultSplitImages,The following statement contains a magic number: if (_DefaultSplitImages.Images.Count == 0 || refresh)              {                  if (_DefaultSplitImages.Images.Count > 0)                  {                      _DefaultSplitImages.Images.Clear();                  }                    try                  {                      int w = 0;                      int h = 0;                        if (!_CalculateSplitRect && _SplitWidth > 0)                      {                          w = _SplitWidth;                      }                      else                      {                          w = 18;                      }                        if (!CalculateSplitRect && SplitHeight > 0)                      {                          h = SplitHeight;                      }                      else                      {                          h = Height;                      }                        h -= 8;                        _DefaultSplitImages.ImageSize = new Size(w' h);                        int mw = w / 2;                      mw += (mw % 2);                      int mh = h / 2;                        Pen fPen = new Pen(ForeColor' 1);                      SolidBrush fBrush = new SolidBrush(ForeColor);                        Bitmap imgN = new Bitmap(w' h);                      Graphics g = Graphics.FromImage(imgN);                        g.CompositingQuality = CompositingQuality.HighQuality;                        //g.DrawLine(SystemPens.ButtonShadow' new Point(1' 1)' new Point(1' h - 2));                      //g.DrawLine(SystemPens.ButtonFace' new Point(2' 1)' new Point(2' h));                        g.FillPolygon(fBrush' new Point[] { new Point(mw - 2' mh - 1)'                                                            new Point(mw + 3' mh - 1)'                                                           new Point(mw' mh + 2) });                        g.Dispose();                        Bitmap imgH = new Bitmap(w' h);                      g = Graphics.FromImage(imgH);                        g.CompositingQuality = CompositingQuality.HighQuality;                        //g.DrawLine(SystemPens.ButtonShadow' new Point(1' 1)' new Point(1' h - 2));                      //g.DrawLine(SystemPens.ButtonFace' new Point(2' 1)' new Point(2' h));                        g.FillPolygon(fBrush' new Point[] { new Point(mw - 3' mh - 2)'                                                            new Point(mw + 4' mh - 2)'                                                           new Point(mw' mh + 2) });                        g.Dispose();                        Bitmap imgC = new Bitmap(w' h);                      g = Graphics.FromImage(imgC);                        g.CompositingQuality = CompositingQuality.HighQuality;                        //g.DrawLine(SystemPens.ButtonShadow' new Point(1' 1)' new Point(1' h - 2));                      //g.DrawLine(SystemPens.ButtonFace' new Point(2' 1)' new Point(2' h));                        g.FillPolygon(fBrush' new Point[] { new Point(mw - 2' mh - 1)'                                                            new Point(mw + 3' mh - 1)'                                                           new Point(mw' mh + 2) });                        g.Dispose();                        Bitmap imgD = new Bitmap(w' h);                      g = Graphics.FromImage(imgD);                        g.CompositingQuality = CompositingQuality.HighQuality;                        //g.DrawLine(SystemPens.GrayText' new Point(1' 1)' new Point(1' h - 2));                        g.FillPolygon(new SolidBrush(SystemColors.GrayText)' new Point[] { new Point(mw - 2' mh - 1)'                                                            new Point(mw + 3' mh - 1)'                                                           new Point(mw' mh + 2) });                        g.Dispose();                        Bitmap imgF = new Bitmap(w' h);                      g = Graphics.FromImage(imgF);                        g.CompositingQuality = CompositingQuality.HighQuality;                        //g.DrawLine(SystemPens.ButtonShadow' new Point(1' 1)' new Point(1' h - 2));                      //g.DrawLine(SystemPens.ButtonFace' new Point(2' 1)' new Point(2' h));                        g.FillPolygon(fBrush' new Point[] { new Point(mw - 2' mh - 1)'                                                            new Point(mw + 3' mh - 1)'                                                           new Point(mw' mh + 2) });                        g.Dispose();                        fPen.Dispose();                      fBrush.Dispose();                        _DefaultSplitImages.Images.Add(_NormalImage' imgN);                      _DefaultSplitImages.Images.Add(_HoverImage' imgH);                      _DefaultSplitImages.Images.Add(_ClickedImage' imgC);                      _DefaultSplitImages.Images.Add(_DisabledImage' imgD);                      _DefaultSplitImages.Images.Add(_FocusedImage' imgF);                  }                  catch                  { }              }
Magic Number,OpenCBS.GUI.UserControl,SplitButton,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\SplitButton.cs,InitDefaultSplitImages,The following statement contains a magic number: if (_DefaultSplitImages.Images.Count == 0 || refresh)              {                  if (_DefaultSplitImages.Images.Count > 0)                  {                      _DefaultSplitImages.Images.Clear();                  }                    try                  {                      int w = 0;                      int h = 0;                        if (!_CalculateSplitRect && _SplitWidth > 0)                      {                          w = _SplitWidth;                      }                      else                      {                          w = 18;                      }                        if (!CalculateSplitRect && SplitHeight > 0)                      {                          h = SplitHeight;                      }                      else                      {                          h = Height;                      }                        h -= 8;                        _DefaultSplitImages.ImageSize = new Size(w' h);                        int mw = w / 2;                      mw += (mw % 2);                      int mh = h / 2;                        Pen fPen = new Pen(ForeColor' 1);                      SolidBrush fBrush = new SolidBrush(ForeColor);                        Bitmap imgN = new Bitmap(w' h);                      Graphics g = Graphics.FromImage(imgN);                        g.CompositingQuality = CompositingQuality.HighQuality;                        //g.DrawLine(SystemPens.ButtonShadow' new Point(1' 1)' new Point(1' h - 2));                      //g.DrawLine(SystemPens.ButtonFace' new Point(2' 1)' new Point(2' h));                        g.FillPolygon(fBrush' new Point[] { new Point(mw - 2' mh - 1)'                                                            new Point(mw + 3' mh - 1)'                                                           new Point(mw' mh + 2) });                        g.Dispose();                        Bitmap imgH = new Bitmap(w' h);                      g = Graphics.FromImage(imgH);                        g.CompositingQuality = CompositingQuality.HighQuality;                        //g.DrawLine(SystemPens.ButtonShadow' new Point(1' 1)' new Point(1' h - 2));                      //g.DrawLine(SystemPens.ButtonFace' new Point(2' 1)' new Point(2' h));                        g.FillPolygon(fBrush' new Point[] { new Point(mw - 3' mh - 2)'                                                            new Point(mw + 4' mh - 2)'                                                           new Point(mw' mh + 2) });                        g.Dispose();                        Bitmap imgC = new Bitmap(w' h);                      g = Graphics.FromImage(imgC);                        g.CompositingQuality = CompositingQuality.HighQuality;                        //g.DrawLine(SystemPens.ButtonShadow' new Point(1' 1)' new Point(1' h - 2));                      //g.DrawLine(SystemPens.ButtonFace' new Point(2' 1)' new Point(2' h));                        g.FillPolygon(fBrush' new Point[] { new Point(mw - 2' mh - 1)'                                                            new Point(mw + 3' mh - 1)'                                                           new Point(mw' mh + 2) });                        g.Dispose();                        Bitmap imgD = new Bitmap(w' h);                      g = Graphics.FromImage(imgD);                        g.CompositingQuality = CompositingQuality.HighQuality;                        //g.DrawLine(SystemPens.GrayText' new Point(1' 1)' new Point(1' h - 2));                        g.FillPolygon(new SolidBrush(SystemColors.GrayText)' new Point[] { new Point(mw - 2' mh - 1)'                                                            new Point(mw + 3' mh - 1)'                                                           new Point(mw' mh + 2) });                        g.Dispose();                        Bitmap imgF = new Bitmap(w' h);                      g = Graphics.FromImage(imgF);                        g.CompositingQuality = CompositingQuality.HighQuality;                        //g.DrawLine(SystemPens.ButtonShadow' new Point(1' 1)' new Point(1' h - 2));                      //g.DrawLine(SystemPens.ButtonFace' new Point(2' 1)' new Point(2' h));                        g.FillPolygon(fBrush' new Point[] { new Point(mw - 2' mh - 1)'                                                            new Point(mw + 3' mh - 1)'                                                           new Point(mw' mh + 2) });                        g.Dispose();                        fPen.Dispose();                      fBrush.Dispose();                        _DefaultSplitImages.Images.Add(_NormalImage' imgN);                      _DefaultSplitImages.Images.Add(_HoverImage' imgH);                      _DefaultSplitImages.Images.Add(_ClickedImage' imgC);                      _DefaultSplitImages.Images.Add(_DisabledImage' imgD);                      _DefaultSplitImages.Images.Add(_FocusedImage' imgF);                  }                  catch                  { }              }
Magic Number,OpenCBS.GUI.UserControl,SplitButton,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\SplitButton.cs,InitDefaultSplitImages,The following statement contains a magic number: if (_DefaultSplitImages.Images.Count == 0 || refresh)              {                  if (_DefaultSplitImages.Images.Count > 0)                  {                      _DefaultSplitImages.Images.Clear();                  }                    try                  {                      int w = 0;                      int h = 0;                        if (!_CalculateSplitRect && _SplitWidth > 0)                      {                          w = _SplitWidth;                      }                      else                      {                          w = 18;                      }                        if (!CalculateSplitRect && SplitHeight > 0)                      {                          h = SplitHeight;                      }                      else                      {                          h = Height;                      }                        h -= 8;                        _DefaultSplitImages.ImageSize = new Size(w' h);                        int mw = w / 2;                      mw += (mw % 2);                      int mh = h / 2;                        Pen fPen = new Pen(ForeColor' 1);                      SolidBrush fBrush = new SolidBrush(ForeColor);                        Bitmap imgN = new Bitmap(w' h);                      Graphics g = Graphics.FromImage(imgN);                        g.CompositingQuality = CompositingQuality.HighQuality;                        //g.DrawLine(SystemPens.ButtonShadow' new Point(1' 1)' new Point(1' h - 2));                      //g.DrawLine(SystemPens.ButtonFace' new Point(2' 1)' new Point(2' h));                        g.FillPolygon(fBrush' new Point[] { new Point(mw - 2' mh - 1)'                                                            new Point(mw + 3' mh - 1)'                                                           new Point(mw' mh + 2) });                        g.Dispose();                        Bitmap imgH = new Bitmap(w' h);                      g = Graphics.FromImage(imgH);                        g.CompositingQuality = CompositingQuality.HighQuality;                        //g.DrawLine(SystemPens.ButtonShadow' new Point(1' 1)' new Point(1' h - 2));                      //g.DrawLine(SystemPens.ButtonFace' new Point(2' 1)' new Point(2' h));                        g.FillPolygon(fBrush' new Point[] { new Point(mw - 3' mh - 2)'                                                            new Point(mw + 4' mh - 2)'                                                           new Point(mw' mh + 2) });                        g.Dispose();                        Bitmap imgC = new Bitmap(w' h);                      g = Graphics.FromImage(imgC);                        g.CompositingQuality = CompositingQuality.HighQuality;                        //g.DrawLine(SystemPens.ButtonShadow' new Point(1' 1)' new Point(1' h - 2));                      //g.DrawLine(SystemPens.ButtonFace' new Point(2' 1)' new Point(2' h));                        g.FillPolygon(fBrush' new Point[] { new Point(mw - 2' mh - 1)'                                                            new Point(mw + 3' mh - 1)'                                                           new Point(mw' mh + 2) });                        g.Dispose();                        Bitmap imgD = new Bitmap(w' h);                      g = Graphics.FromImage(imgD);                        g.CompositingQuality = CompositingQuality.HighQuality;                        //g.DrawLine(SystemPens.GrayText' new Point(1' 1)' new Point(1' h - 2));                        g.FillPolygon(new SolidBrush(SystemColors.GrayText)' new Point[] { new Point(mw - 2' mh - 1)'                                                            new Point(mw + 3' mh - 1)'                                                           new Point(mw' mh + 2) });                        g.Dispose();                        Bitmap imgF = new Bitmap(w' h);                      g = Graphics.FromImage(imgF);                        g.CompositingQuality = CompositingQuality.HighQuality;                        //g.DrawLine(SystemPens.ButtonShadow' new Point(1' 1)' new Point(1' h - 2));                      //g.DrawLine(SystemPens.ButtonFace' new Point(2' 1)' new Point(2' h));                        g.FillPolygon(fBrush' new Point[] { new Point(mw - 2' mh - 1)'                                                            new Point(mw + 3' mh - 1)'                                                           new Point(mw' mh + 2) });                        g.Dispose();                        fPen.Dispose();                      fBrush.Dispose();                        _DefaultSplitImages.Images.Add(_NormalImage' imgN);                      _DefaultSplitImages.Images.Add(_HoverImage' imgH);                      _DefaultSplitImages.Images.Add(_ClickedImage' imgC);                      _DefaultSplitImages.Images.Add(_DisabledImage' imgD);                      _DefaultSplitImages.Images.Add(_FocusedImage' imgF);                  }                  catch                  { }              }
Magic Number,OpenCBS.GUI.UserControl,SplitButton,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\SplitButton.cs,InitDefaultSplitImages,The following statement contains a magic number: if (_DefaultSplitImages.Images.Count == 0 || refresh)              {                  if (_DefaultSplitImages.Images.Count > 0)                  {                      _DefaultSplitImages.Images.Clear();                  }                    try                  {                      int w = 0;                      int h = 0;                        if (!_CalculateSplitRect && _SplitWidth > 0)                      {                          w = _SplitWidth;                      }                      else                      {                          w = 18;                      }                        if (!CalculateSplitRect && SplitHeight > 0)                      {                          h = SplitHeight;                      }                      else                      {                          h = Height;                      }                        h -= 8;                        _DefaultSplitImages.ImageSize = new Size(w' h);                        int mw = w / 2;                      mw += (mw % 2);                      int mh = h / 2;                        Pen fPen = new Pen(ForeColor' 1);                      SolidBrush fBrush = new SolidBrush(ForeColor);                        Bitmap imgN = new Bitmap(w' h);                      Graphics g = Graphics.FromImage(imgN);                        g.CompositingQuality = CompositingQuality.HighQuality;                        //g.DrawLine(SystemPens.ButtonShadow' new Point(1' 1)' new Point(1' h - 2));                      //g.DrawLine(SystemPens.ButtonFace' new Point(2' 1)' new Point(2' h));                        g.FillPolygon(fBrush' new Point[] { new Point(mw - 2' mh - 1)'                                                            new Point(mw + 3' mh - 1)'                                                           new Point(mw' mh + 2) });                        g.Dispose();                        Bitmap imgH = new Bitmap(w' h);                      g = Graphics.FromImage(imgH);                        g.CompositingQuality = CompositingQuality.HighQuality;                        //g.DrawLine(SystemPens.ButtonShadow' new Point(1' 1)' new Point(1' h - 2));                      //g.DrawLine(SystemPens.ButtonFace' new Point(2' 1)' new Point(2' h));                        g.FillPolygon(fBrush' new Point[] { new Point(mw - 3' mh - 2)'                                                            new Point(mw + 4' mh - 2)'                                                           new Point(mw' mh + 2) });                        g.Dispose();                        Bitmap imgC = new Bitmap(w' h);                      g = Graphics.FromImage(imgC);                        g.CompositingQuality = CompositingQuality.HighQuality;                        //g.DrawLine(SystemPens.ButtonShadow' new Point(1' 1)' new Point(1' h - 2));                      //g.DrawLine(SystemPens.ButtonFace' new Point(2' 1)' new Point(2' h));                        g.FillPolygon(fBrush' new Point[] { new Point(mw - 2' mh - 1)'                                                            new Point(mw + 3' mh - 1)'                                                           new Point(mw' mh + 2) });                        g.Dispose();                        Bitmap imgD = new Bitmap(w' h);                      g = Graphics.FromImage(imgD);                        g.CompositingQuality = CompositingQuality.HighQuality;                        //g.DrawLine(SystemPens.GrayText' new Point(1' 1)' new Point(1' h - 2));                        g.FillPolygon(new SolidBrush(SystemColors.GrayText)' new Point[] { new Point(mw - 2' mh - 1)'                                                            new Point(mw + 3' mh - 1)'                                                           new Point(mw' mh + 2) });                        g.Dispose();                        Bitmap imgF = new Bitmap(w' h);                      g = Graphics.FromImage(imgF);                        g.CompositingQuality = CompositingQuality.HighQuality;                        //g.DrawLine(SystemPens.ButtonShadow' new Point(1' 1)' new Point(1' h - 2));                      //g.DrawLine(SystemPens.ButtonFace' new Point(2' 1)' new Point(2' h));                        g.FillPolygon(fBrush' new Point[] { new Point(mw - 2' mh - 1)'                                                            new Point(mw + 3' mh - 1)'                                                           new Point(mw' mh + 2) });                        g.Dispose();                        fPen.Dispose();                      fBrush.Dispose();                        _DefaultSplitImages.Images.Add(_NormalImage' imgN);                      _DefaultSplitImages.Images.Add(_HoverImage' imgH);                      _DefaultSplitImages.Images.Add(_ClickedImage' imgC);                      _DefaultSplitImages.Images.Add(_DisabledImage' imgD);                      _DefaultSplitImages.Images.Add(_FocusedImage' imgF);                  }                  catch                  { }              }
Magic Number,OpenCBS.GUI.UserControl,SplitButton,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\SplitButton.cs,InitDefaultSplitImages,The following statement contains a magic number: if (_DefaultSplitImages.Images.Count == 0 || refresh)              {                  if (_DefaultSplitImages.Images.Count > 0)                  {                      _DefaultSplitImages.Images.Clear();                  }                    try                  {                      int w = 0;                      int h = 0;                        if (!_CalculateSplitRect && _SplitWidth > 0)                      {                          w = _SplitWidth;                      }                      else                      {                          w = 18;                      }                        if (!CalculateSplitRect && SplitHeight > 0)                      {                          h = SplitHeight;                      }                      else                      {                          h = Height;                      }                        h -= 8;                        _DefaultSplitImages.ImageSize = new Size(w' h);                        int mw = w / 2;                      mw += (mw % 2);                      int mh = h / 2;                        Pen fPen = new Pen(ForeColor' 1);                      SolidBrush fBrush = new SolidBrush(ForeColor);                        Bitmap imgN = new Bitmap(w' h);                      Graphics g = Graphics.FromImage(imgN);                        g.CompositingQuality = CompositingQuality.HighQuality;                        //g.DrawLine(SystemPens.ButtonShadow' new Point(1' 1)' new Point(1' h - 2));                      //g.DrawLine(SystemPens.ButtonFace' new Point(2' 1)' new Point(2' h));                        g.FillPolygon(fBrush' new Point[] { new Point(mw - 2' mh - 1)'                                                            new Point(mw + 3' mh - 1)'                                                           new Point(mw' mh + 2) });                        g.Dispose();                        Bitmap imgH = new Bitmap(w' h);                      g = Graphics.FromImage(imgH);                        g.CompositingQuality = CompositingQuality.HighQuality;                        //g.DrawLine(SystemPens.ButtonShadow' new Point(1' 1)' new Point(1' h - 2));                      //g.DrawLine(SystemPens.ButtonFace' new Point(2' 1)' new Point(2' h));                        g.FillPolygon(fBrush' new Point[] { new Point(mw - 3' mh - 2)'                                                            new Point(mw + 4' mh - 2)'                                                           new Point(mw' mh + 2) });                        g.Dispose();                        Bitmap imgC = new Bitmap(w' h);                      g = Graphics.FromImage(imgC);                        g.CompositingQuality = CompositingQuality.HighQuality;                        //g.DrawLine(SystemPens.ButtonShadow' new Point(1' 1)' new Point(1' h - 2));                      //g.DrawLine(SystemPens.ButtonFace' new Point(2' 1)' new Point(2' h));                        g.FillPolygon(fBrush' new Point[] { new Point(mw - 2' mh - 1)'                                                            new Point(mw + 3' mh - 1)'                                                           new Point(mw' mh + 2) });                        g.Dispose();                        Bitmap imgD = new Bitmap(w' h);                      g = Graphics.FromImage(imgD);                        g.CompositingQuality = CompositingQuality.HighQuality;                        //g.DrawLine(SystemPens.GrayText' new Point(1' 1)' new Point(1' h - 2));                        g.FillPolygon(new SolidBrush(SystemColors.GrayText)' new Point[] { new Point(mw - 2' mh - 1)'                                                            new Point(mw + 3' mh - 1)'                                                           new Point(mw' mh + 2) });                        g.Dispose();                        Bitmap imgF = new Bitmap(w' h);                      g = Graphics.FromImage(imgF);                        g.CompositingQuality = CompositingQuality.HighQuality;                        //g.DrawLine(SystemPens.ButtonShadow' new Point(1' 1)' new Point(1' h - 2));                      //g.DrawLine(SystemPens.ButtonFace' new Point(2' 1)' new Point(2' h));                        g.FillPolygon(fBrush' new Point[] { new Point(mw - 2' mh - 1)'                                                            new Point(mw + 3' mh - 1)'                                                           new Point(mw' mh + 2) });                        g.Dispose();                        fPen.Dispose();                      fBrush.Dispose();                        _DefaultSplitImages.Images.Add(_NormalImage' imgN);                      _DefaultSplitImages.Images.Add(_HoverImage' imgH);                      _DefaultSplitImages.Images.Add(_ClickedImage' imgC);                      _DefaultSplitImages.Images.Add(_DisabledImage' imgD);                      _DefaultSplitImages.Images.Add(_FocusedImage' imgF);                  }                  catch                  { }              }
Magic Number,OpenCBS.GUI.UserControl,SplitButton,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\SplitButton.cs,InitDefaultSplitImages,The following statement contains a magic number: if (_DefaultSplitImages.Images.Count == 0 || refresh)              {                  if (_DefaultSplitImages.Images.Count > 0)                  {                      _DefaultSplitImages.Images.Clear();                  }                    try                  {                      int w = 0;                      int h = 0;                        if (!_CalculateSplitRect && _SplitWidth > 0)                      {                          w = _SplitWidth;                      }                      else                      {                          w = 18;                      }                        if (!CalculateSplitRect && SplitHeight > 0)                      {                          h = SplitHeight;                      }                      else                      {                          h = Height;                      }                        h -= 8;                        _DefaultSplitImages.ImageSize = new Size(w' h);                        int mw = w / 2;                      mw += (mw % 2);                      int mh = h / 2;                        Pen fPen = new Pen(ForeColor' 1);                      SolidBrush fBrush = new SolidBrush(ForeColor);                        Bitmap imgN = new Bitmap(w' h);                      Graphics g = Graphics.FromImage(imgN);                        g.CompositingQuality = CompositingQuality.HighQuality;                        //g.DrawLine(SystemPens.ButtonShadow' new Point(1' 1)' new Point(1' h - 2));                      //g.DrawLine(SystemPens.ButtonFace' new Point(2' 1)' new Point(2' h));                        g.FillPolygon(fBrush' new Point[] { new Point(mw - 2' mh - 1)'                                                            new Point(mw + 3' mh - 1)'                                                           new Point(mw' mh + 2) });                        g.Dispose();                        Bitmap imgH = new Bitmap(w' h);                      g = Graphics.FromImage(imgH);                        g.CompositingQuality = CompositingQuality.HighQuality;                        //g.DrawLine(SystemPens.ButtonShadow' new Point(1' 1)' new Point(1' h - 2));                      //g.DrawLine(SystemPens.ButtonFace' new Point(2' 1)' new Point(2' h));                        g.FillPolygon(fBrush' new Point[] { new Point(mw - 3' mh - 2)'                                                            new Point(mw + 4' mh - 2)'                                                           new Point(mw' mh + 2) });                        g.Dispose();                        Bitmap imgC = new Bitmap(w' h);                      g = Graphics.FromImage(imgC);                        g.CompositingQuality = CompositingQuality.HighQuality;                        //g.DrawLine(SystemPens.ButtonShadow' new Point(1' 1)' new Point(1' h - 2));                      //g.DrawLine(SystemPens.ButtonFace' new Point(2' 1)' new Point(2' h));                        g.FillPolygon(fBrush' new Point[] { new Point(mw - 2' mh - 1)'                                                            new Point(mw + 3' mh - 1)'                                                           new Point(mw' mh + 2) });                        g.Dispose();                        Bitmap imgD = new Bitmap(w' h);                      g = Graphics.FromImage(imgD);                        g.CompositingQuality = CompositingQuality.HighQuality;                        //g.DrawLine(SystemPens.GrayText' new Point(1' 1)' new Point(1' h - 2));                        g.FillPolygon(new SolidBrush(SystemColors.GrayText)' new Point[] { new Point(mw - 2' mh - 1)'                                                            new Point(mw + 3' mh - 1)'                                                           new Point(mw' mh + 2) });                        g.Dispose();                        Bitmap imgF = new Bitmap(w' h);                      g = Graphics.FromImage(imgF);                        g.CompositingQuality = CompositingQuality.HighQuality;                        //g.DrawLine(SystemPens.ButtonShadow' new Point(1' 1)' new Point(1' h - 2));                      //g.DrawLine(SystemPens.ButtonFace' new Point(2' 1)' new Point(2' h));                        g.FillPolygon(fBrush' new Point[] { new Point(mw - 2' mh - 1)'                                                            new Point(mw + 3' mh - 1)'                                                           new Point(mw' mh + 2) });                        g.Dispose();                        fPen.Dispose();                      fBrush.Dispose();                        _DefaultSplitImages.Images.Add(_NormalImage' imgN);                      _DefaultSplitImages.Images.Add(_HoverImage' imgH);                      _DefaultSplitImages.Images.Add(_ClickedImage' imgC);                      _DefaultSplitImages.Images.Add(_DisabledImage' imgD);                      _DefaultSplitImages.Images.Add(_FocusedImage' imgF);                  }                  catch                  { }              }
Magic Number,OpenCBS.GUI.UserControl,SplitButton,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\SplitButton.cs,InitDefaultSplitImages,The following statement contains a magic number: if (_DefaultSplitImages.Images.Count == 0 || refresh)              {                  if (_DefaultSplitImages.Images.Count > 0)                  {                      _DefaultSplitImages.Images.Clear();                  }                    try                  {                      int w = 0;                      int h = 0;                        if (!_CalculateSplitRect && _SplitWidth > 0)                      {                          w = _SplitWidth;                      }                      else                      {                          w = 18;                      }                        if (!CalculateSplitRect && SplitHeight > 0)                      {                          h = SplitHeight;                      }                      else                      {                          h = Height;                      }                        h -= 8;                        _DefaultSplitImages.ImageSize = new Size(w' h);                        int mw = w / 2;                      mw += (mw % 2);                      int mh = h / 2;                        Pen fPen = new Pen(ForeColor' 1);                      SolidBrush fBrush = new SolidBrush(ForeColor);                        Bitmap imgN = new Bitmap(w' h);                      Graphics g = Graphics.FromImage(imgN);                        g.CompositingQuality = CompositingQuality.HighQuality;                        //g.DrawLine(SystemPens.ButtonShadow' new Point(1' 1)' new Point(1' h - 2));                      //g.DrawLine(SystemPens.ButtonFace' new Point(2' 1)' new Point(2' h));                        g.FillPolygon(fBrush' new Point[] { new Point(mw - 2' mh - 1)'                                                            new Point(mw + 3' mh - 1)'                                                           new Point(mw' mh + 2) });                        g.Dispose();                        Bitmap imgH = new Bitmap(w' h);                      g = Graphics.FromImage(imgH);                        g.CompositingQuality = CompositingQuality.HighQuality;                        //g.DrawLine(SystemPens.ButtonShadow' new Point(1' 1)' new Point(1' h - 2));                      //g.DrawLine(SystemPens.ButtonFace' new Point(2' 1)' new Point(2' h));                        g.FillPolygon(fBrush' new Point[] { new Point(mw - 3' mh - 2)'                                                            new Point(mw + 4' mh - 2)'                                                           new Point(mw' mh + 2) });                        g.Dispose();                        Bitmap imgC = new Bitmap(w' h);                      g = Graphics.FromImage(imgC);                        g.CompositingQuality = CompositingQuality.HighQuality;                        //g.DrawLine(SystemPens.ButtonShadow' new Point(1' 1)' new Point(1' h - 2));                      //g.DrawLine(SystemPens.ButtonFace' new Point(2' 1)' new Point(2' h));                        g.FillPolygon(fBrush' new Point[] { new Point(mw - 2' mh - 1)'                                                            new Point(mw + 3' mh - 1)'                                                           new Point(mw' mh + 2) });                        g.Dispose();                        Bitmap imgD = new Bitmap(w' h);                      g = Graphics.FromImage(imgD);                        g.CompositingQuality = CompositingQuality.HighQuality;                        //g.DrawLine(SystemPens.GrayText' new Point(1' 1)' new Point(1' h - 2));                        g.FillPolygon(new SolidBrush(SystemColors.GrayText)' new Point[] { new Point(mw - 2' mh - 1)'                                                            new Point(mw + 3' mh - 1)'                                                           new Point(mw' mh + 2) });                        g.Dispose();                        Bitmap imgF = new Bitmap(w' h);                      g = Graphics.FromImage(imgF);                        g.CompositingQuality = CompositingQuality.HighQuality;                        //g.DrawLine(SystemPens.ButtonShadow' new Point(1' 1)' new Point(1' h - 2));                      //g.DrawLine(SystemPens.ButtonFace' new Point(2' 1)' new Point(2' h));                        g.FillPolygon(fBrush' new Point[] { new Point(mw - 2' mh - 1)'                                                            new Point(mw + 3' mh - 1)'                                                           new Point(mw' mh + 2) });                        g.Dispose();                        fPen.Dispose();                      fBrush.Dispose();                        _DefaultSplitImages.Images.Add(_NormalImage' imgN);                      _DefaultSplitImages.Images.Add(_HoverImage' imgH);                      _DefaultSplitImages.Images.Add(_ClickedImage' imgC);                      _DefaultSplitImages.Images.Add(_DisabledImage' imgD);                      _DefaultSplitImages.Images.Add(_FocusedImage' imgF);                  }                  catch                  { }              }
Magic Number,OpenCBS.GUI.UserControl,SplitButton,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\SplitButton.cs,InitDefaultSplitImages,The following statement contains a magic number: if (_DefaultSplitImages.Images.Count == 0 || refresh)              {                  if (_DefaultSplitImages.Images.Count > 0)                  {                      _DefaultSplitImages.Images.Clear();                  }                    try                  {                      int w = 0;                      int h = 0;                        if (!_CalculateSplitRect && _SplitWidth > 0)                      {                          w = _SplitWidth;                      }                      else                      {                          w = 18;                      }                        if (!CalculateSplitRect && SplitHeight > 0)                      {                          h = SplitHeight;                      }                      else                      {                          h = Height;                      }                        h -= 8;                        _DefaultSplitImages.ImageSize = new Size(w' h);                        int mw = w / 2;                      mw += (mw % 2);                      int mh = h / 2;                        Pen fPen = new Pen(ForeColor' 1);                      SolidBrush fBrush = new SolidBrush(ForeColor);                        Bitmap imgN = new Bitmap(w' h);                      Graphics g = Graphics.FromImage(imgN);                        g.CompositingQuality = CompositingQuality.HighQuality;                        //g.DrawLine(SystemPens.ButtonShadow' new Point(1' 1)' new Point(1' h - 2));                      //g.DrawLine(SystemPens.ButtonFace' new Point(2' 1)' new Point(2' h));                        g.FillPolygon(fBrush' new Point[] { new Point(mw - 2' mh - 1)'                                                            new Point(mw + 3' mh - 1)'                                                           new Point(mw' mh + 2) });                        g.Dispose();                        Bitmap imgH = new Bitmap(w' h);                      g = Graphics.FromImage(imgH);                        g.CompositingQuality = CompositingQuality.HighQuality;                        //g.DrawLine(SystemPens.ButtonShadow' new Point(1' 1)' new Point(1' h - 2));                      //g.DrawLine(SystemPens.ButtonFace' new Point(2' 1)' new Point(2' h));                        g.FillPolygon(fBrush' new Point[] { new Point(mw - 3' mh - 2)'                                                            new Point(mw + 4' mh - 2)'                                                           new Point(mw' mh + 2) });                        g.Dispose();                        Bitmap imgC = new Bitmap(w' h);                      g = Graphics.FromImage(imgC);                        g.CompositingQuality = CompositingQuality.HighQuality;                        //g.DrawLine(SystemPens.ButtonShadow' new Point(1' 1)' new Point(1' h - 2));                      //g.DrawLine(SystemPens.ButtonFace' new Point(2' 1)' new Point(2' h));                        g.FillPolygon(fBrush' new Point[] { new Point(mw - 2' mh - 1)'                                                            new Point(mw + 3' mh - 1)'                                                           new Point(mw' mh + 2) });                        g.Dispose();                        Bitmap imgD = new Bitmap(w' h);                      g = Graphics.FromImage(imgD);                        g.CompositingQuality = CompositingQuality.HighQuality;                        //g.DrawLine(SystemPens.GrayText' new Point(1' 1)' new Point(1' h - 2));                        g.FillPolygon(new SolidBrush(SystemColors.GrayText)' new Point[] { new Point(mw - 2' mh - 1)'                                                            new Point(mw + 3' mh - 1)'                                                           new Point(mw' mh + 2) });                        g.Dispose();                        Bitmap imgF = new Bitmap(w' h);                      g = Graphics.FromImage(imgF);                        g.CompositingQuality = CompositingQuality.HighQuality;                        //g.DrawLine(SystemPens.ButtonShadow' new Point(1' 1)' new Point(1' h - 2));                      //g.DrawLine(SystemPens.ButtonFace' new Point(2' 1)' new Point(2' h));                        g.FillPolygon(fBrush' new Point[] { new Point(mw - 2' mh - 1)'                                                            new Point(mw + 3' mh - 1)'                                                           new Point(mw' mh + 2) });                        g.Dispose();                        fPen.Dispose();                      fBrush.Dispose();                        _DefaultSplitImages.Images.Add(_NormalImage' imgN);                      _DefaultSplitImages.Images.Add(_HoverImage' imgH);                      _DefaultSplitImages.Images.Add(_ClickedImage' imgC);                      _DefaultSplitImages.Images.Add(_DisabledImage' imgD);                      _DefaultSplitImages.Images.Add(_FocusedImage' imgF);                  }                  catch                  { }              }
Magic Number,OpenCBS.GUI.UserControl,SplitButton,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\SplitButton.cs,InitDefaultSplitImages,The following statement contains a magic number: if (_DefaultSplitImages.Images.Count == 0 || refresh)              {                  if (_DefaultSplitImages.Images.Count > 0)                  {                      _DefaultSplitImages.Images.Clear();                  }                    try                  {                      int w = 0;                      int h = 0;                        if (!_CalculateSplitRect && _SplitWidth > 0)                      {                          w = _SplitWidth;                      }                      else                      {                          w = 18;                      }                        if (!CalculateSplitRect && SplitHeight > 0)                      {                          h = SplitHeight;                      }                      else                      {                          h = Height;                      }                        h -= 8;                        _DefaultSplitImages.ImageSize = new Size(w' h);                        int mw = w / 2;                      mw += (mw % 2);                      int mh = h / 2;                        Pen fPen = new Pen(ForeColor' 1);                      SolidBrush fBrush = new SolidBrush(ForeColor);                        Bitmap imgN = new Bitmap(w' h);                      Graphics g = Graphics.FromImage(imgN);                        g.CompositingQuality = CompositingQuality.HighQuality;                        //g.DrawLine(SystemPens.ButtonShadow' new Point(1' 1)' new Point(1' h - 2));                      //g.DrawLine(SystemPens.ButtonFace' new Point(2' 1)' new Point(2' h));                        g.FillPolygon(fBrush' new Point[] { new Point(mw - 2' mh - 1)'                                                            new Point(mw + 3' mh - 1)'                                                           new Point(mw' mh + 2) });                        g.Dispose();                        Bitmap imgH = new Bitmap(w' h);                      g = Graphics.FromImage(imgH);                        g.CompositingQuality = CompositingQuality.HighQuality;                        //g.DrawLine(SystemPens.ButtonShadow' new Point(1' 1)' new Point(1' h - 2));                      //g.DrawLine(SystemPens.ButtonFace' new Point(2' 1)' new Point(2' h));                        g.FillPolygon(fBrush' new Point[] { new Point(mw - 3' mh - 2)'                                                            new Point(mw + 4' mh - 2)'                                                           new Point(mw' mh + 2) });                        g.Dispose();                        Bitmap imgC = new Bitmap(w' h);                      g = Graphics.FromImage(imgC);                        g.CompositingQuality = CompositingQuality.HighQuality;                        //g.DrawLine(SystemPens.ButtonShadow' new Point(1' 1)' new Point(1' h - 2));                      //g.DrawLine(SystemPens.ButtonFace' new Point(2' 1)' new Point(2' h));                        g.FillPolygon(fBrush' new Point[] { new Point(mw - 2' mh - 1)'                                                            new Point(mw + 3' mh - 1)'                                                           new Point(mw' mh + 2) });                        g.Dispose();                        Bitmap imgD = new Bitmap(w' h);                      g = Graphics.FromImage(imgD);                        g.CompositingQuality = CompositingQuality.HighQuality;                        //g.DrawLine(SystemPens.GrayText' new Point(1' 1)' new Point(1' h - 2));                        g.FillPolygon(new SolidBrush(SystemColors.GrayText)' new Point[] { new Point(mw - 2' mh - 1)'                                                            new Point(mw + 3' mh - 1)'                                                           new Point(mw' mh + 2) });                        g.Dispose();                        Bitmap imgF = new Bitmap(w' h);                      g = Graphics.FromImage(imgF);                        g.CompositingQuality = CompositingQuality.HighQuality;                        //g.DrawLine(SystemPens.ButtonShadow' new Point(1' 1)' new Point(1' h - 2));                      //g.DrawLine(SystemPens.ButtonFace' new Point(2' 1)' new Point(2' h));                        g.FillPolygon(fBrush' new Point[] { new Point(mw - 2' mh - 1)'                                                            new Point(mw + 3' mh - 1)'                                                           new Point(mw' mh + 2) });                        g.Dispose();                        fPen.Dispose();                      fBrush.Dispose();                        _DefaultSplitImages.Images.Add(_NormalImage' imgN);                      _DefaultSplitImages.Images.Add(_HoverImage' imgH);                      _DefaultSplitImages.Images.Add(_ClickedImage' imgC);                      _DefaultSplitImages.Images.Add(_DisabledImage' imgD);                      _DefaultSplitImages.Images.Add(_FocusedImage' imgF);                  }                  catch                  { }              }
Magic Number,OpenCBS.GUI.UserControl,SplitButton,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\SplitButton.cs,InitDefaultSplitImages,The following statement contains a magic number: if (_DefaultSplitImages.Images.Count == 0 || refresh)              {                  if (_DefaultSplitImages.Images.Count > 0)                  {                      _DefaultSplitImages.Images.Clear();                  }                    try                  {                      int w = 0;                      int h = 0;                        if (!_CalculateSplitRect && _SplitWidth > 0)                      {                          w = _SplitWidth;                      }                      else                      {                          w = 18;                      }                        if (!CalculateSplitRect && SplitHeight > 0)                      {                          h = SplitHeight;                      }                      else                      {                          h = Height;                      }                        h -= 8;                        _DefaultSplitImages.ImageSize = new Size(w' h);                        int mw = w / 2;                      mw += (mw % 2);                      int mh = h / 2;                        Pen fPen = new Pen(ForeColor' 1);                      SolidBrush fBrush = new SolidBrush(ForeColor);                        Bitmap imgN = new Bitmap(w' h);                      Graphics g = Graphics.FromImage(imgN);                        g.CompositingQuality = CompositingQuality.HighQuality;                        //g.DrawLine(SystemPens.ButtonShadow' new Point(1' 1)' new Point(1' h - 2));                      //g.DrawLine(SystemPens.ButtonFace' new Point(2' 1)' new Point(2' h));                        g.FillPolygon(fBrush' new Point[] { new Point(mw - 2' mh - 1)'                                                            new Point(mw + 3' mh - 1)'                                                           new Point(mw' mh + 2) });                        g.Dispose();                        Bitmap imgH = new Bitmap(w' h);                      g = Graphics.FromImage(imgH);                        g.CompositingQuality = CompositingQuality.HighQuality;                        //g.DrawLine(SystemPens.ButtonShadow' new Point(1' 1)' new Point(1' h - 2));                      //g.DrawLine(SystemPens.ButtonFace' new Point(2' 1)' new Point(2' h));                        g.FillPolygon(fBrush' new Point[] { new Point(mw - 3' mh - 2)'                                                            new Point(mw + 4' mh - 2)'                                                           new Point(mw' mh + 2) });                        g.Dispose();                        Bitmap imgC = new Bitmap(w' h);                      g = Graphics.FromImage(imgC);                        g.CompositingQuality = CompositingQuality.HighQuality;                        //g.DrawLine(SystemPens.ButtonShadow' new Point(1' 1)' new Point(1' h - 2));                      //g.DrawLine(SystemPens.ButtonFace' new Point(2' 1)' new Point(2' h));                        g.FillPolygon(fBrush' new Point[] { new Point(mw - 2' mh - 1)'                                                            new Point(mw + 3' mh - 1)'                                                           new Point(mw' mh + 2) });                        g.Dispose();                        Bitmap imgD = new Bitmap(w' h);                      g = Graphics.FromImage(imgD);                        g.CompositingQuality = CompositingQuality.HighQuality;                        //g.DrawLine(SystemPens.GrayText' new Point(1' 1)' new Point(1' h - 2));                        g.FillPolygon(new SolidBrush(SystemColors.GrayText)' new Point[] { new Point(mw - 2' mh - 1)'                                                            new Point(mw + 3' mh - 1)'                                                           new Point(mw' mh + 2) });                        g.Dispose();                        Bitmap imgF = new Bitmap(w' h);                      g = Graphics.FromImage(imgF);                        g.CompositingQuality = CompositingQuality.HighQuality;                        //g.DrawLine(SystemPens.ButtonShadow' new Point(1' 1)' new Point(1' h - 2));                      //g.DrawLine(SystemPens.ButtonFace' new Point(2' 1)' new Point(2' h));                        g.FillPolygon(fBrush' new Point[] { new Point(mw - 2' mh - 1)'                                                            new Point(mw + 3' mh - 1)'                                                           new Point(mw' mh + 2) });                        g.Dispose();                        fPen.Dispose();                      fBrush.Dispose();                        _DefaultSplitImages.Images.Add(_NormalImage' imgN);                      _DefaultSplitImages.Images.Add(_HoverImage' imgH);                      _DefaultSplitImages.Images.Add(_ClickedImage' imgC);                      _DefaultSplitImages.Images.Add(_DisabledImage' imgD);                      _DefaultSplitImages.Images.Add(_FocusedImage' imgF);                  }                  catch                  { }              }
Magic Number,OpenCBS.GUI.UserControl,SplitButton,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\SplitButton.cs,InitDefaultSplitImages,The following statement contains a magic number: if (_DefaultSplitImages.Images.Count == 0 || refresh)              {                  if (_DefaultSplitImages.Images.Count > 0)                  {                      _DefaultSplitImages.Images.Clear();                  }                    try                  {                      int w = 0;                      int h = 0;                        if (!_CalculateSplitRect && _SplitWidth > 0)                      {                          w = _SplitWidth;                      }                      else                      {                          w = 18;                      }                        if (!CalculateSplitRect && SplitHeight > 0)                      {                          h = SplitHeight;                      }                      else                      {                          h = Height;                      }                        h -= 8;                        _DefaultSplitImages.ImageSize = new Size(w' h);                        int mw = w / 2;                      mw += (mw % 2);                      int mh = h / 2;                        Pen fPen = new Pen(ForeColor' 1);                      SolidBrush fBrush = new SolidBrush(ForeColor);                        Bitmap imgN = new Bitmap(w' h);                      Graphics g = Graphics.FromImage(imgN);                        g.CompositingQuality = CompositingQuality.HighQuality;                        //g.DrawLine(SystemPens.ButtonShadow' new Point(1' 1)' new Point(1' h - 2));                      //g.DrawLine(SystemPens.ButtonFace' new Point(2' 1)' new Point(2' h));                        g.FillPolygon(fBrush' new Point[] { new Point(mw - 2' mh - 1)'                                                            new Point(mw + 3' mh - 1)'                                                           new Point(mw' mh + 2) });                        g.Dispose();                        Bitmap imgH = new Bitmap(w' h);                      g = Graphics.FromImage(imgH);                        g.CompositingQuality = CompositingQuality.HighQuality;                        //g.DrawLine(SystemPens.ButtonShadow' new Point(1' 1)' new Point(1' h - 2));                      //g.DrawLine(SystemPens.ButtonFace' new Point(2' 1)' new Point(2' h));                        g.FillPolygon(fBrush' new Point[] { new Point(mw - 3' mh - 2)'                                                            new Point(mw + 4' mh - 2)'                                                           new Point(mw' mh + 2) });                        g.Dispose();                        Bitmap imgC = new Bitmap(w' h);                      g = Graphics.FromImage(imgC);                        g.CompositingQuality = CompositingQuality.HighQuality;                        //g.DrawLine(SystemPens.ButtonShadow' new Point(1' 1)' new Point(1' h - 2));                      //g.DrawLine(SystemPens.ButtonFace' new Point(2' 1)' new Point(2' h));                        g.FillPolygon(fBrush' new Point[] { new Point(mw - 2' mh - 1)'                                                            new Point(mw + 3' mh - 1)'                                                           new Point(mw' mh + 2) });                        g.Dispose();                        Bitmap imgD = new Bitmap(w' h);                      g = Graphics.FromImage(imgD);                        g.CompositingQuality = CompositingQuality.HighQuality;                        //g.DrawLine(SystemPens.GrayText' new Point(1' 1)' new Point(1' h - 2));                        g.FillPolygon(new SolidBrush(SystemColors.GrayText)' new Point[] { new Point(mw - 2' mh - 1)'                                                            new Point(mw + 3' mh - 1)'                                                           new Point(mw' mh + 2) });                        g.Dispose();                        Bitmap imgF = new Bitmap(w' h);                      g = Graphics.FromImage(imgF);                        g.CompositingQuality = CompositingQuality.HighQuality;                        //g.DrawLine(SystemPens.ButtonShadow' new Point(1' 1)' new Point(1' h - 2));                      //g.DrawLine(SystemPens.ButtonFace' new Point(2' 1)' new Point(2' h));                        g.FillPolygon(fBrush' new Point[] { new Point(mw - 2' mh - 1)'                                                            new Point(mw + 3' mh - 1)'                                                           new Point(mw' mh + 2) });                        g.Dispose();                        fPen.Dispose();                      fBrush.Dispose();                        _DefaultSplitImages.Images.Add(_NormalImage' imgN);                      _DefaultSplitImages.Images.Add(_HoverImage' imgH);                      _DefaultSplitImages.Images.Add(_ClickedImage' imgC);                      _DefaultSplitImages.Images.Add(_DisabledImage' imgD);                      _DefaultSplitImages.Images.Add(_FocusedImage' imgF);                  }                  catch                  { }              }
Magic Number,OpenCBS.GUI.UserControl,SplitButton,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\SplitButton.cs,InitDefaultSplitImages,The following statement contains a magic number: if (_DefaultSplitImages.Images.Count == 0 || refresh)              {                  if (_DefaultSplitImages.Images.Count > 0)                  {                      _DefaultSplitImages.Images.Clear();                  }                    try                  {                      int w = 0;                      int h = 0;                        if (!_CalculateSplitRect && _SplitWidth > 0)                      {                          w = _SplitWidth;                      }                      else                      {                          w = 18;                      }                        if (!CalculateSplitRect && SplitHeight > 0)                      {                          h = SplitHeight;                      }                      else                      {                          h = Height;                      }                        h -= 8;                        _DefaultSplitImages.ImageSize = new Size(w' h);                        int mw = w / 2;                      mw += (mw % 2);                      int mh = h / 2;                        Pen fPen = new Pen(ForeColor' 1);                      SolidBrush fBrush = new SolidBrush(ForeColor);                        Bitmap imgN = new Bitmap(w' h);                      Graphics g = Graphics.FromImage(imgN);                        g.CompositingQuality = CompositingQuality.HighQuality;                        //g.DrawLine(SystemPens.ButtonShadow' new Point(1' 1)' new Point(1' h - 2));                      //g.DrawLine(SystemPens.ButtonFace' new Point(2' 1)' new Point(2' h));                        g.FillPolygon(fBrush' new Point[] { new Point(mw - 2' mh - 1)'                                                            new Point(mw + 3' mh - 1)'                                                           new Point(mw' mh + 2) });                        g.Dispose();                        Bitmap imgH = new Bitmap(w' h);                      g = Graphics.FromImage(imgH);                        g.CompositingQuality = CompositingQuality.HighQuality;                        //g.DrawLine(SystemPens.ButtonShadow' new Point(1' 1)' new Point(1' h - 2));                      //g.DrawLine(SystemPens.ButtonFace' new Point(2' 1)' new Point(2' h));                        g.FillPolygon(fBrush' new Point[] { new Point(mw - 3' mh - 2)'                                                            new Point(mw + 4' mh - 2)'                                                           new Point(mw' mh + 2) });                        g.Dispose();                        Bitmap imgC = new Bitmap(w' h);                      g = Graphics.FromImage(imgC);                        g.CompositingQuality = CompositingQuality.HighQuality;                        //g.DrawLine(SystemPens.ButtonShadow' new Point(1' 1)' new Point(1' h - 2));                      //g.DrawLine(SystemPens.ButtonFace' new Point(2' 1)' new Point(2' h));                        g.FillPolygon(fBrush' new Point[] { new Point(mw - 2' mh - 1)'                                                            new Point(mw + 3' mh - 1)'                                                           new Point(mw' mh + 2) });                        g.Dispose();                        Bitmap imgD = new Bitmap(w' h);                      g = Graphics.FromImage(imgD);                        g.CompositingQuality = CompositingQuality.HighQuality;                        //g.DrawLine(SystemPens.GrayText' new Point(1' 1)' new Point(1' h - 2));                        g.FillPolygon(new SolidBrush(SystemColors.GrayText)' new Point[] { new Point(mw - 2' mh - 1)'                                                            new Point(mw + 3' mh - 1)'                                                           new Point(mw' mh + 2) });                        g.Dispose();                        Bitmap imgF = new Bitmap(w' h);                      g = Graphics.FromImage(imgF);                        g.CompositingQuality = CompositingQuality.HighQuality;                        //g.DrawLine(SystemPens.ButtonShadow' new Point(1' 1)' new Point(1' h - 2));                      //g.DrawLine(SystemPens.ButtonFace' new Point(2' 1)' new Point(2' h));                        g.FillPolygon(fBrush' new Point[] { new Point(mw - 2' mh - 1)'                                                            new Point(mw + 3' mh - 1)'                                                           new Point(mw' mh + 2) });                        g.Dispose();                        fPen.Dispose();                      fBrush.Dispose();                        _DefaultSplitImages.Images.Add(_NormalImage' imgN);                      _DefaultSplitImages.Images.Add(_HoverImage' imgH);                      _DefaultSplitImages.Images.Add(_ClickedImage' imgC);                      _DefaultSplitImages.Images.Add(_DisabledImage' imgD);                      _DefaultSplitImages.Images.Add(_FocusedImage' imgF);                  }                  catch                  { }              }
Magic Number,OpenCBS.GUI.UserControl,SplitButton,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\SplitButton.cs,InitDefaultSplitImages,The following statement contains a magic number: if (_DefaultSplitImages.Images.Count == 0 || refresh)              {                  if (_DefaultSplitImages.Images.Count > 0)                  {                      _DefaultSplitImages.Images.Clear();                  }                    try                  {                      int w = 0;                      int h = 0;                        if (!_CalculateSplitRect && _SplitWidth > 0)                      {                          w = _SplitWidth;                      }                      else                      {                          w = 18;                      }                        if (!CalculateSplitRect && SplitHeight > 0)                      {                          h = SplitHeight;                      }                      else                      {                          h = Height;                      }                        h -= 8;                        _DefaultSplitImages.ImageSize = new Size(w' h);                        int mw = w / 2;                      mw += (mw % 2);                      int mh = h / 2;                        Pen fPen = new Pen(ForeColor' 1);                      SolidBrush fBrush = new SolidBrush(ForeColor);                        Bitmap imgN = new Bitmap(w' h);                      Graphics g = Graphics.FromImage(imgN);                        g.CompositingQuality = CompositingQuality.HighQuality;                        //g.DrawLine(SystemPens.ButtonShadow' new Point(1' 1)' new Point(1' h - 2));                      //g.DrawLine(SystemPens.ButtonFace' new Point(2' 1)' new Point(2' h));                        g.FillPolygon(fBrush' new Point[] { new Point(mw - 2' mh - 1)'                                                            new Point(mw + 3' mh - 1)'                                                           new Point(mw' mh + 2) });                        g.Dispose();                        Bitmap imgH = new Bitmap(w' h);                      g = Graphics.FromImage(imgH);                        g.CompositingQuality = CompositingQuality.HighQuality;                        //g.DrawLine(SystemPens.ButtonShadow' new Point(1' 1)' new Point(1' h - 2));                      //g.DrawLine(SystemPens.ButtonFace' new Point(2' 1)' new Point(2' h));                        g.FillPolygon(fBrush' new Point[] { new Point(mw - 3' mh - 2)'                                                            new Point(mw + 4' mh - 2)'                                                           new Point(mw' mh + 2) });                        g.Dispose();                        Bitmap imgC = new Bitmap(w' h);                      g = Graphics.FromImage(imgC);                        g.CompositingQuality = CompositingQuality.HighQuality;                        //g.DrawLine(SystemPens.ButtonShadow' new Point(1' 1)' new Point(1' h - 2));                      //g.DrawLine(SystemPens.ButtonFace' new Point(2' 1)' new Point(2' h));                        g.FillPolygon(fBrush' new Point[] { new Point(mw - 2' mh - 1)'                                                            new Point(mw + 3' mh - 1)'                                                           new Point(mw' mh + 2) });                        g.Dispose();                        Bitmap imgD = new Bitmap(w' h);                      g = Graphics.FromImage(imgD);                        g.CompositingQuality = CompositingQuality.HighQuality;                        //g.DrawLine(SystemPens.GrayText' new Point(1' 1)' new Point(1' h - 2));                        g.FillPolygon(new SolidBrush(SystemColors.GrayText)' new Point[] { new Point(mw - 2' mh - 1)'                                                            new Point(mw + 3' mh - 1)'                                                           new Point(mw' mh + 2) });                        g.Dispose();                        Bitmap imgF = new Bitmap(w' h);                      g = Graphics.FromImage(imgF);                        g.CompositingQuality = CompositingQuality.HighQuality;                        //g.DrawLine(SystemPens.ButtonShadow' new Point(1' 1)' new Point(1' h - 2));                      //g.DrawLine(SystemPens.ButtonFace' new Point(2' 1)' new Point(2' h));                        g.FillPolygon(fBrush' new Point[] { new Point(mw - 2' mh - 1)'                                                            new Point(mw + 3' mh - 1)'                                                           new Point(mw' mh + 2) });                        g.Dispose();                        fPen.Dispose();                      fBrush.Dispose();                        _DefaultSplitImages.Images.Add(_NormalImage' imgN);                      _DefaultSplitImages.Images.Add(_HoverImage' imgH);                      _DefaultSplitImages.Images.Add(_ClickedImage' imgC);                      _DefaultSplitImages.Images.Add(_DisabledImage' imgD);                      _DefaultSplitImages.Images.Add(_FocusedImage' imgF);                  }                  catch                  { }              }
Magic Number,OpenCBS.GUI.UserControl,SplitButton,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\SplitButton.cs,InitDefaultSplitImages,The following statement contains a magic number: if (_DefaultSplitImages.Images.Count == 0 || refresh)              {                  if (_DefaultSplitImages.Images.Count > 0)                  {                      _DefaultSplitImages.Images.Clear();                  }                    try                  {                      int w = 0;                      int h = 0;                        if (!_CalculateSplitRect && _SplitWidth > 0)                      {                          w = _SplitWidth;                      }                      else                      {                          w = 18;                      }                        if (!CalculateSplitRect && SplitHeight > 0)                      {                          h = SplitHeight;                      }                      else                      {                          h = Height;                      }                        h -= 8;                        _DefaultSplitImages.ImageSize = new Size(w' h);                        int mw = w / 2;                      mw += (mw % 2);                      int mh = h / 2;                        Pen fPen = new Pen(ForeColor' 1);                      SolidBrush fBrush = new SolidBrush(ForeColor);                        Bitmap imgN = new Bitmap(w' h);                      Graphics g = Graphics.FromImage(imgN);                        g.CompositingQuality = CompositingQuality.HighQuality;                        //g.DrawLine(SystemPens.ButtonShadow' new Point(1' 1)' new Point(1' h - 2));                      //g.DrawLine(SystemPens.ButtonFace' new Point(2' 1)' new Point(2' h));                        g.FillPolygon(fBrush' new Point[] { new Point(mw - 2' mh - 1)'                                                            new Point(mw + 3' mh - 1)'                                                           new Point(mw' mh + 2) });                        g.Dispose();                        Bitmap imgH = new Bitmap(w' h);                      g = Graphics.FromImage(imgH);                        g.CompositingQuality = CompositingQuality.HighQuality;                        //g.DrawLine(SystemPens.ButtonShadow' new Point(1' 1)' new Point(1' h - 2));                      //g.DrawLine(SystemPens.ButtonFace' new Point(2' 1)' new Point(2' h));                        g.FillPolygon(fBrush' new Point[] { new Point(mw - 3' mh - 2)'                                                            new Point(mw + 4' mh - 2)'                                                           new Point(mw' mh + 2) });                        g.Dispose();                        Bitmap imgC = new Bitmap(w' h);                      g = Graphics.FromImage(imgC);                        g.CompositingQuality = CompositingQuality.HighQuality;                        //g.DrawLine(SystemPens.ButtonShadow' new Point(1' 1)' new Point(1' h - 2));                      //g.DrawLine(SystemPens.ButtonFace' new Point(2' 1)' new Point(2' h));                        g.FillPolygon(fBrush' new Point[] { new Point(mw - 2' mh - 1)'                                                            new Point(mw + 3' mh - 1)'                                                           new Point(mw' mh + 2) });                        g.Dispose();                        Bitmap imgD = new Bitmap(w' h);                      g = Graphics.FromImage(imgD);                        g.CompositingQuality = CompositingQuality.HighQuality;                        //g.DrawLine(SystemPens.GrayText' new Point(1' 1)' new Point(1' h - 2));                        g.FillPolygon(new SolidBrush(SystemColors.GrayText)' new Point[] { new Point(mw - 2' mh - 1)'                                                            new Point(mw + 3' mh - 1)'                                                           new Point(mw' mh + 2) });                        g.Dispose();                        Bitmap imgF = new Bitmap(w' h);                      g = Graphics.FromImage(imgF);                        g.CompositingQuality = CompositingQuality.HighQuality;                        //g.DrawLine(SystemPens.ButtonShadow' new Point(1' 1)' new Point(1' h - 2));                      //g.DrawLine(SystemPens.ButtonFace' new Point(2' 1)' new Point(2' h));                        g.FillPolygon(fBrush' new Point[] { new Point(mw - 2' mh - 1)'                                                            new Point(mw + 3' mh - 1)'                                                           new Point(mw' mh + 2) });                        g.Dispose();                        fPen.Dispose();                      fBrush.Dispose();                        _DefaultSplitImages.Images.Add(_NormalImage' imgN);                      _DefaultSplitImages.Images.Add(_HoverImage' imgH);                      _DefaultSplitImages.Images.Add(_ClickedImage' imgC);                      _DefaultSplitImages.Images.Add(_DisabledImage' imgD);                      _DefaultSplitImages.Images.Add(_FocusedImage' imgF);                  }                  catch                  { }              }
Magic Number,OpenCBS.GUI.UserControl,SplitButton,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\SplitButton.cs,InitDefaultSplitImages,The following statement contains a magic number: if (_DefaultSplitImages.Images.Count == 0 || refresh)              {                  if (_DefaultSplitImages.Images.Count > 0)                  {                      _DefaultSplitImages.Images.Clear();                  }                    try                  {                      int w = 0;                      int h = 0;                        if (!_CalculateSplitRect && _SplitWidth > 0)                      {                          w = _SplitWidth;                      }                      else                      {                          w = 18;                      }                        if (!CalculateSplitRect && SplitHeight > 0)                      {                          h = SplitHeight;                      }                      else                      {                          h = Height;                      }                        h -= 8;                        _DefaultSplitImages.ImageSize = new Size(w' h);                        int mw = w / 2;                      mw += (mw % 2);                      int mh = h / 2;                        Pen fPen = new Pen(ForeColor' 1);                      SolidBrush fBrush = new SolidBrush(ForeColor);                        Bitmap imgN = new Bitmap(w' h);                      Graphics g = Graphics.FromImage(imgN);                        g.CompositingQuality = CompositingQuality.HighQuality;                        //g.DrawLine(SystemPens.ButtonShadow' new Point(1' 1)' new Point(1' h - 2));                      //g.DrawLine(SystemPens.ButtonFace' new Point(2' 1)' new Point(2' h));                        g.FillPolygon(fBrush' new Point[] { new Point(mw - 2' mh - 1)'                                                            new Point(mw + 3' mh - 1)'                                                           new Point(mw' mh + 2) });                        g.Dispose();                        Bitmap imgH = new Bitmap(w' h);                      g = Graphics.FromImage(imgH);                        g.CompositingQuality = CompositingQuality.HighQuality;                        //g.DrawLine(SystemPens.ButtonShadow' new Point(1' 1)' new Point(1' h - 2));                      //g.DrawLine(SystemPens.ButtonFace' new Point(2' 1)' new Point(2' h));                        g.FillPolygon(fBrush' new Point[] { new Point(mw - 3' mh - 2)'                                                            new Point(mw + 4' mh - 2)'                                                           new Point(mw' mh + 2) });                        g.Dispose();                        Bitmap imgC = new Bitmap(w' h);                      g = Graphics.FromImage(imgC);                        g.CompositingQuality = CompositingQuality.HighQuality;                        //g.DrawLine(SystemPens.ButtonShadow' new Point(1' 1)' new Point(1' h - 2));                      //g.DrawLine(SystemPens.ButtonFace' new Point(2' 1)' new Point(2' h));                        g.FillPolygon(fBrush' new Point[] { new Point(mw - 2' mh - 1)'                                                            new Point(mw + 3' mh - 1)'                                                           new Point(mw' mh + 2) });                        g.Dispose();                        Bitmap imgD = new Bitmap(w' h);                      g = Graphics.FromImage(imgD);                        g.CompositingQuality = CompositingQuality.HighQuality;                        //g.DrawLine(SystemPens.GrayText' new Point(1' 1)' new Point(1' h - 2));                        g.FillPolygon(new SolidBrush(SystemColors.GrayText)' new Point[] { new Point(mw - 2' mh - 1)'                                                            new Point(mw + 3' mh - 1)'                                                           new Point(mw' mh + 2) });                        g.Dispose();                        Bitmap imgF = new Bitmap(w' h);                      g = Graphics.FromImage(imgF);                        g.CompositingQuality = CompositingQuality.HighQuality;                        //g.DrawLine(SystemPens.ButtonShadow' new Point(1' 1)' new Point(1' h - 2));                      //g.DrawLine(SystemPens.ButtonFace' new Point(2' 1)' new Point(2' h));                        g.FillPolygon(fBrush' new Point[] { new Point(mw - 2' mh - 1)'                                                            new Point(mw + 3' mh - 1)'                                                           new Point(mw' mh + 2) });                        g.Dispose();                        fPen.Dispose();                      fBrush.Dispose();                        _DefaultSplitImages.Images.Add(_NormalImage' imgN);                      _DefaultSplitImages.Images.Add(_HoverImage' imgH);                      _DefaultSplitImages.Images.Add(_ClickedImage' imgC);                      _DefaultSplitImages.Images.Add(_DisabledImage' imgD);                      _DefaultSplitImages.Images.Add(_FocusedImage' imgF);                  }                  catch                  { }              }
Magic Number,OpenCBS.GUI.UserControl,SplitButton,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\SplitButton.cs,GetImageRect,The following statement contains a magic number: if (currImg != null)                  {                      int x = 0'                          y = 0'                          w = currImg.Width+1'                          h = currImg.Height+1;                        if (w > this.Width)                      {                          w = this.Width;                      }                        if (h > this.Width)                      {                          h = this.Width;                      }                        switch (ImageAlign)                      {                          case ContentAlignment.TopLeft:                              {                                  x = 0;                                  y = 0;                                    break;                              }                          case ContentAlignment.TopCenter:                              {                                  x = (this.Width - w) / 2;                                  y = 0;                                    if ((this.Width - w) % 2 > 0)                                  {                                      x += 1;                                  }                                    break;                              }                          case ContentAlignment.TopRight:                              {                                  x = this.Width - w;                                  y = 0;                                    break;                              }                          case ContentAlignment.MiddleLeft:                              {                                  x = 0;                                  y = (this.Height - h) / 2;                                    if ((this.Height - h) % 2 > 0)                                  {                                      y += 1;                                  }                                    break;                              }                          case ContentAlignment.MiddleCenter:                              {                                  x = (this.Width - w) / 2;                                  y = (this.Height - h) / 2;                                    if ((this.Width - w) % 2 > 0)                                  {                                      x += 1;                                  }                                  if ((this.Height - h) % 2 > 0)                                  {                                      y += 1;                                  }                                    break;                              }                          case ContentAlignment.MiddleRight:                              {                                  x = this.Width - w;                                  y = (this.Height - h) / 2;                                    if ((this.Height - h) % 2 > 0)                                  {                                      y += 1;                                  }                                    break;                              }                          case ContentAlignment.BottomLeft:                              {                                  x = 0;                                  y = this.Height - h;                                    if ((this.Height - h) % 2 > 0)                                  {                                      y += 1;                                  }                                    break;                              }                          case ContentAlignment.BottomCenter:                              {                                  x = (this.Width - w) / 2;                                  y = this.Height - h;                                    if ((this.Width - w) % 2 > 0)                                  {                                      x += 1;                                  }                                    break;                              }                          case ContentAlignment.BottomRight:                              {                                  x = this.Width - w;                                  y = this.Height - h;                                    break;                              }                      }                        if (_FillSplitHeight && h < this.Height)                      {                          h = this.Height;                      }                        if (x > 0)                      {                          x -= 1;                      }                      if (y > 0)                      {                          y -= 1;                      }                        return new Rectangle(x' y' w' h);                  }
Magic Number,OpenCBS.GUI.UserControl,SplitButton,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\SplitButton.cs,GetImageRect,The following statement contains a magic number: if (currImg != null)                  {                      int x = 0'                          y = 0'                          w = currImg.Width+1'                          h = currImg.Height+1;                        if (w > this.Width)                      {                          w = this.Width;                      }                        if (h > this.Width)                      {                          h = this.Width;                      }                        switch (ImageAlign)                      {                          case ContentAlignment.TopLeft:                              {                                  x = 0;                                  y = 0;                                    break;                              }                          case ContentAlignment.TopCenter:                              {                                  x = (this.Width - w) / 2;                                  y = 0;                                    if ((this.Width - w) % 2 > 0)                                  {                                      x += 1;                                  }                                    break;                              }                          case ContentAlignment.TopRight:                              {                                  x = this.Width - w;                                  y = 0;                                    break;                              }                          case ContentAlignment.MiddleLeft:                              {                                  x = 0;                                  y = (this.Height - h) / 2;                                    if ((this.Height - h) % 2 > 0)                                  {                                      y += 1;                                  }                                    break;                              }                          case ContentAlignment.MiddleCenter:                              {                                  x = (this.Width - w) / 2;                                  y = (this.Height - h) / 2;                                    if ((this.Width - w) % 2 > 0)                                  {                                      x += 1;                                  }                                  if ((this.Height - h) % 2 > 0)                                  {                                      y += 1;                                  }                                    break;                              }                          case ContentAlignment.MiddleRight:                              {                                  x = this.Width - w;                                  y = (this.Height - h) / 2;                                    if ((this.Height - h) % 2 > 0)                                  {                                      y += 1;                                  }                                    break;                              }                          case ContentAlignment.BottomLeft:                              {                                  x = 0;                                  y = this.Height - h;                                    if ((this.Height - h) % 2 > 0)                                  {                                      y += 1;                                  }                                    break;                              }                          case ContentAlignment.BottomCenter:                              {                                  x = (this.Width - w) / 2;                                  y = this.Height - h;                                    if ((this.Width - w) % 2 > 0)                                  {                                      x += 1;                                  }                                    break;                              }                          case ContentAlignment.BottomRight:                              {                                  x = this.Width - w;                                  y = this.Height - h;                                    break;                              }                      }                        if (_FillSplitHeight && h < this.Height)                      {                          h = this.Height;                      }                        if (x > 0)                      {                          x -= 1;                      }                      if (y > 0)                      {                          y -= 1;                      }                        return new Rectangle(x' y' w' h);                  }
Magic Number,OpenCBS.GUI.UserControl,SplitButton,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\SplitButton.cs,GetImageRect,The following statement contains a magic number: if (currImg != null)                  {                      int x = 0'                          y = 0'                          w = currImg.Width+1'                          h = currImg.Height+1;                        if (w > this.Width)                      {                          w = this.Width;                      }                        if (h > this.Width)                      {                          h = this.Width;                      }                        switch (ImageAlign)                      {                          case ContentAlignment.TopLeft:                              {                                  x = 0;                                  y = 0;                                    break;                              }                          case ContentAlignment.TopCenter:                              {                                  x = (this.Width - w) / 2;                                  y = 0;                                    if ((this.Width - w) % 2 > 0)                                  {                                      x += 1;                                  }                                    break;                              }                          case ContentAlignment.TopRight:                              {                                  x = this.Width - w;                                  y = 0;                                    break;                              }                          case ContentAlignment.MiddleLeft:                              {                                  x = 0;                                  y = (this.Height - h) / 2;                                    if ((this.Height - h) % 2 > 0)                                  {                                      y += 1;                                  }                                    break;                              }                          case ContentAlignment.MiddleCenter:                              {                                  x = (this.Width - w) / 2;                                  y = (this.Height - h) / 2;                                    if ((this.Width - w) % 2 > 0)                                  {                                      x += 1;                                  }                                  if ((this.Height - h) % 2 > 0)                                  {                                      y += 1;                                  }                                    break;                              }                          case ContentAlignment.MiddleRight:                              {                                  x = this.Width - w;                                  y = (this.Height - h) / 2;                                    if ((this.Height - h) % 2 > 0)                                  {                                      y += 1;                                  }                                    break;                              }                          case ContentAlignment.BottomLeft:                              {                                  x = 0;                                  y = this.Height - h;                                    if ((this.Height - h) % 2 > 0)                                  {                                      y += 1;                                  }                                    break;                              }                          case ContentAlignment.BottomCenter:                              {                                  x = (this.Width - w) / 2;                                  y = this.Height - h;                                    if ((this.Width - w) % 2 > 0)                                  {                                      x += 1;                                  }                                    break;                              }                          case ContentAlignment.BottomRight:                              {                                  x = this.Width - w;                                  y = this.Height - h;                                    break;                              }                      }                        if (_FillSplitHeight && h < this.Height)                      {                          h = this.Height;                      }                        if (x > 0)                      {                          x -= 1;                      }                      if (y > 0)                      {                          y -= 1;                      }                        return new Rectangle(x' y' w' h);                  }
Magic Number,OpenCBS.GUI.UserControl,SplitButton,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\SplitButton.cs,GetImageRect,The following statement contains a magic number: if (currImg != null)                  {                      int x = 0'                          y = 0'                          w = currImg.Width+1'                          h = currImg.Height+1;                        if (w > this.Width)                      {                          w = this.Width;                      }                        if (h > this.Width)                      {                          h = this.Width;                      }                        switch (ImageAlign)                      {                          case ContentAlignment.TopLeft:                              {                                  x = 0;                                  y = 0;                                    break;                              }                          case ContentAlignment.TopCenter:                              {                                  x = (this.Width - w) / 2;                                  y = 0;                                    if ((this.Width - w) % 2 > 0)                                  {                                      x += 1;                                  }                                    break;                              }                          case ContentAlignment.TopRight:                              {                                  x = this.Width - w;                                  y = 0;                                    break;                              }                          case ContentAlignment.MiddleLeft:                              {                                  x = 0;                                  y = (this.Height - h) / 2;                                    if ((this.Height - h) % 2 > 0)                                  {                                      y += 1;                                  }                                    break;                              }                          case ContentAlignment.MiddleCenter:                              {                                  x = (this.Width - w) / 2;                                  y = (this.Height - h) / 2;                                    if ((this.Width - w) % 2 > 0)                                  {                                      x += 1;                                  }                                  if ((this.Height - h) % 2 > 0)                                  {                                      y += 1;                                  }                                    break;                              }                          case ContentAlignment.MiddleRight:                              {                                  x = this.Width - w;                                  y = (this.Height - h) / 2;                                    if ((this.Height - h) % 2 > 0)                                  {                                      y += 1;                                  }                                    break;                              }                          case ContentAlignment.BottomLeft:                              {                                  x = 0;                                  y = this.Height - h;                                    if ((this.Height - h) % 2 > 0)                                  {                                      y += 1;                                  }                                    break;                              }                          case ContentAlignment.BottomCenter:                              {                                  x = (this.Width - w) / 2;                                  y = this.Height - h;                                    if ((this.Width - w) % 2 > 0)                                  {                                      x += 1;                                  }                                    break;                              }                          case ContentAlignment.BottomRight:                              {                                  x = this.Width - w;                                  y = this.Height - h;                                    break;                              }                      }                        if (_FillSplitHeight && h < this.Height)                      {                          h = this.Height;                      }                        if (x > 0)                      {                          x -= 1;                      }                      if (y > 0)                      {                          y -= 1;                      }                        return new Rectangle(x' y' w' h);                  }
Magic Number,OpenCBS.GUI.UserControl,SplitButton,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\SplitButton.cs,GetImageRect,The following statement contains a magic number: if (currImg != null)                  {                      int x = 0'                          y = 0'                          w = currImg.Width+1'                          h = currImg.Height+1;                        if (w > this.Width)                      {                          w = this.Width;                      }                        if (h > this.Width)                      {                          h = this.Width;                      }                        switch (ImageAlign)                      {                          case ContentAlignment.TopLeft:                              {                                  x = 0;                                  y = 0;                                    break;                              }                          case ContentAlignment.TopCenter:                              {                                  x = (this.Width - w) / 2;                                  y = 0;                                    if ((this.Width - w) % 2 > 0)                                  {                                      x += 1;                                  }                                    break;                              }                          case ContentAlignment.TopRight:                              {                                  x = this.Width - w;                                  y = 0;                                    break;                              }                          case ContentAlignment.MiddleLeft:                              {                                  x = 0;                                  y = (this.Height - h) / 2;                                    if ((this.Height - h) % 2 > 0)                                  {                                      y += 1;                                  }                                    break;                              }                          case ContentAlignment.MiddleCenter:                              {                                  x = (this.Width - w) / 2;                                  y = (this.Height - h) / 2;                                    if ((this.Width - w) % 2 > 0)                                  {                                      x += 1;                                  }                                  if ((this.Height - h) % 2 > 0)                                  {                                      y += 1;                                  }                                    break;                              }                          case ContentAlignment.MiddleRight:                              {                                  x = this.Width - w;                                  y = (this.Height - h) / 2;                                    if ((this.Height - h) % 2 > 0)                                  {                                      y += 1;                                  }                                    break;                              }                          case ContentAlignment.BottomLeft:                              {                                  x = 0;                                  y = this.Height - h;                                    if ((this.Height - h) % 2 > 0)                                  {                                      y += 1;                                  }                                    break;                              }                          case ContentAlignment.BottomCenter:                              {                                  x = (this.Width - w) / 2;                                  y = this.Height - h;                                    if ((this.Width - w) % 2 > 0)                                  {                                      x += 1;                                  }                                    break;                              }                          case ContentAlignment.BottomRight:                              {                                  x = this.Width - w;                                  y = this.Height - h;                                    break;                              }                      }                        if (_FillSplitHeight && h < this.Height)                      {                          h = this.Height;                      }                        if (x > 0)                      {                          x -= 1;                      }                      if (y > 0)                      {                          y -= 1;                      }                        return new Rectangle(x' y' w' h);                  }
Magic Number,OpenCBS.GUI.UserControl,SplitButton,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\SplitButton.cs,GetImageRect,The following statement contains a magic number: if (currImg != null)                  {                      int x = 0'                          y = 0'                          w = currImg.Width+1'                          h = currImg.Height+1;                        if (w > this.Width)                      {                          w = this.Width;                      }                        if (h > this.Width)                      {                          h = this.Width;                      }                        switch (ImageAlign)                      {                          case ContentAlignment.TopLeft:                              {                                  x = 0;                                  y = 0;                                    break;                              }                          case ContentAlignment.TopCenter:                              {                                  x = (this.Width - w) / 2;                                  y = 0;                                    if ((this.Width - w) % 2 > 0)                                  {                                      x += 1;                                  }                                    break;                              }                          case ContentAlignment.TopRight:                              {                                  x = this.Width - w;                                  y = 0;                                    break;                              }                          case ContentAlignment.MiddleLeft:                              {                                  x = 0;                                  y = (this.Height - h) / 2;                                    if ((this.Height - h) % 2 > 0)                                  {                                      y += 1;                                  }                                    break;                              }                          case ContentAlignment.MiddleCenter:                              {                                  x = (this.Width - w) / 2;                                  y = (this.Height - h) / 2;                                    if ((this.Width - w) % 2 > 0)                                  {                                      x += 1;                                  }                                  if ((this.Height - h) % 2 > 0)                                  {                                      y += 1;                                  }                                    break;                              }                          case ContentAlignment.MiddleRight:                              {                                  x = this.Width - w;                                  y = (this.Height - h) / 2;                                    if ((this.Height - h) % 2 > 0)                                  {                                      y += 1;                                  }                                    break;                              }                          case ContentAlignment.BottomLeft:                              {                                  x = 0;                                  y = this.Height - h;                                    if ((this.Height - h) % 2 > 0)                                  {                                      y += 1;                                  }                                    break;                              }                          case ContentAlignment.BottomCenter:                              {                                  x = (this.Width - w) / 2;                                  y = this.Height - h;                                    if ((this.Width - w) % 2 > 0)                                  {                                      x += 1;                                  }                                    break;                              }                          case ContentAlignment.BottomRight:                              {                                  x = this.Width - w;                                  y = this.Height - h;                                    break;                              }                      }                        if (_FillSplitHeight && h < this.Height)                      {                          h = this.Height;                      }                        if (x > 0)                      {                          x -= 1;                      }                      if (y > 0)                      {                          y -= 1;                      }                        return new Rectangle(x' y' w' h);                  }
Magic Number,OpenCBS.GUI.UserControl,SplitButton,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\SplitButton.cs,GetImageRect,The following statement contains a magic number: if (currImg != null)                  {                      int x = 0'                          y = 0'                          w = currImg.Width+1'                          h = currImg.Height+1;                        if (w > this.Width)                      {                          w = this.Width;                      }                        if (h > this.Width)                      {                          h = this.Width;                      }                        switch (ImageAlign)                      {                          case ContentAlignment.TopLeft:                              {                                  x = 0;                                  y = 0;                                    break;                              }                          case ContentAlignment.TopCenter:                              {                                  x = (this.Width - w) / 2;                                  y = 0;                                    if ((this.Width - w) % 2 > 0)                                  {                                      x += 1;                                  }                                    break;                              }                          case ContentAlignment.TopRight:                              {                                  x = this.Width - w;                                  y = 0;                                    break;                              }                          case ContentAlignment.MiddleLeft:                              {                                  x = 0;                                  y = (this.Height - h) / 2;                                    if ((this.Height - h) % 2 > 0)                                  {                                      y += 1;                                  }                                    break;                              }                          case ContentAlignment.MiddleCenter:                              {                                  x = (this.Width - w) / 2;                                  y = (this.Height - h) / 2;                                    if ((this.Width - w) % 2 > 0)                                  {                                      x += 1;                                  }                                  if ((this.Height - h) % 2 > 0)                                  {                                      y += 1;                                  }                                    break;                              }                          case ContentAlignment.MiddleRight:                              {                                  x = this.Width - w;                                  y = (this.Height - h) / 2;                                    if ((this.Height - h) % 2 > 0)                                  {                                      y += 1;                                  }                                    break;                              }                          case ContentAlignment.BottomLeft:                              {                                  x = 0;                                  y = this.Height - h;                                    if ((this.Height - h) % 2 > 0)                                  {                                      y += 1;                                  }                                    break;                              }                          case ContentAlignment.BottomCenter:                              {                                  x = (this.Width - w) / 2;                                  y = this.Height - h;                                    if ((this.Width - w) % 2 > 0)                                  {                                      x += 1;                                  }                                    break;                              }                          case ContentAlignment.BottomRight:                              {                                  x = this.Width - w;                                  y = this.Height - h;                                    break;                              }                      }                        if (_FillSplitHeight && h < this.Height)                      {                          h = this.Height;                      }                        if (x > 0)                      {                          x -= 1;                      }                      if (y > 0)                      {                          y -= 1;                      }                        return new Rectangle(x' y' w' h);                  }
Magic Number,OpenCBS.GUI.UserControl,SplitButton,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\SplitButton.cs,GetImageRect,The following statement contains a magic number: if (currImg != null)                  {                      int x = 0'                          y = 0'                          w = currImg.Width+1'                          h = currImg.Height+1;                        if (w > this.Width)                      {                          w = this.Width;                      }                        if (h > this.Width)                      {                          h = this.Width;                      }                        switch (ImageAlign)                      {                          case ContentAlignment.TopLeft:                              {                                  x = 0;                                  y = 0;                                    break;                              }                          case ContentAlignment.TopCenter:                              {                                  x = (this.Width - w) / 2;                                  y = 0;                                    if ((this.Width - w) % 2 > 0)                                  {                                      x += 1;                                  }                                    break;                              }                          case ContentAlignment.TopRight:                              {                                  x = this.Width - w;                                  y = 0;                                    break;                              }                          case ContentAlignment.MiddleLeft:                              {                                  x = 0;                                  y = (this.Height - h) / 2;                                    if ((this.Height - h) % 2 > 0)                                  {                                      y += 1;                                  }                                    break;                              }                          case ContentAlignment.MiddleCenter:                              {                                  x = (this.Width - w) / 2;                                  y = (this.Height - h) / 2;                                    if ((this.Width - w) % 2 > 0)                                  {                                      x += 1;                                  }                                  if ((this.Height - h) % 2 > 0)                                  {                                      y += 1;                                  }                                    break;                              }                          case ContentAlignment.MiddleRight:                              {                                  x = this.Width - w;                                  y = (this.Height - h) / 2;                                    if ((this.Height - h) % 2 > 0)                                  {                                      y += 1;                                  }                                    break;                              }                          case ContentAlignment.BottomLeft:                              {                                  x = 0;                                  y = this.Height - h;                                    if ((this.Height - h) % 2 > 0)                                  {                                      y += 1;                                  }                                    break;                              }                          case ContentAlignment.BottomCenter:                              {                                  x = (this.Width - w) / 2;                                  y = this.Height - h;                                    if ((this.Width - w) % 2 > 0)                                  {                                      x += 1;                                  }                                    break;                              }                          case ContentAlignment.BottomRight:                              {                                  x = this.Width - w;                                  y = this.Height - h;                                    break;                              }                      }                        if (_FillSplitHeight && h < this.Height)                      {                          h = this.Height;                      }                        if (x > 0)                      {                          x -= 1;                      }                      if (y > 0)                      {                          y -= 1;                      }                        return new Rectangle(x' y' w' h);                  }
Magic Number,OpenCBS.GUI.UserControl,SplitButton,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\SplitButton.cs,GetImageRect,The following statement contains a magic number: if (currImg != null)                  {                      int x = 0'                          y = 0'                          w = currImg.Width+1'                          h = currImg.Height+1;                        if (w > this.Width)                      {                          w = this.Width;                      }                        if (h > this.Width)                      {                          h = this.Width;                      }                        switch (ImageAlign)                      {                          case ContentAlignment.TopLeft:                              {                                  x = 0;                                  y = 0;                                    break;                              }                          case ContentAlignment.TopCenter:                              {                                  x = (this.Width - w) / 2;                                  y = 0;                                    if ((this.Width - w) % 2 > 0)                                  {                                      x += 1;                                  }                                    break;                              }                          case ContentAlignment.TopRight:                              {                                  x = this.Width - w;                                  y = 0;                                    break;                              }                          case ContentAlignment.MiddleLeft:                              {                                  x = 0;                                  y = (this.Height - h) / 2;                                    if ((this.Height - h) % 2 > 0)                                  {                                      y += 1;                                  }                                    break;                              }                          case ContentAlignment.MiddleCenter:                              {                                  x = (this.Width - w) / 2;                                  y = (this.Height - h) / 2;                                    if ((this.Width - w) % 2 > 0)                                  {                                      x += 1;                                  }                                  if ((this.Height - h) % 2 > 0)                                  {                                      y += 1;                                  }                                    break;                              }                          case ContentAlignment.MiddleRight:                              {                                  x = this.Width - w;                                  y = (this.Height - h) / 2;                                    if ((this.Height - h) % 2 > 0)                                  {                                      y += 1;                                  }                                    break;                              }                          case ContentAlignment.BottomLeft:                              {                                  x = 0;                                  y = this.Height - h;                                    if ((this.Height - h) % 2 > 0)                                  {                                      y += 1;                                  }                                    break;                              }                          case ContentAlignment.BottomCenter:                              {                                  x = (this.Width - w) / 2;                                  y = this.Height - h;                                    if ((this.Width - w) % 2 > 0)                                  {                                      x += 1;                                  }                                    break;                              }                          case ContentAlignment.BottomRight:                              {                                  x = this.Width - w;                                  y = this.Height - h;                                    break;                              }                      }                        if (_FillSplitHeight && h < this.Height)                      {                          h = this.Height;                      }                        if (x > 0)                      {                          x -= 1;                      }                      if (y > 0)                      {                          y -= 1;                      }                        return new Rectangle(x' y' w' h);                  }
Magic Number,OpenCBS.GUI.UserControl,SplitButton,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\SplitButton.cs,GetImageRect,The following statement contains a magic number: if (currImg != null)                  {                      int x = 0'                          y = 0'                          w = currImg.Width+1'                          h = currImg.Height+1;                        if (w > this.Width)                      {                          w = this.Width;                      }                        if (h > this.Width)                      {                          h = this.Width;                      }                        switch (ImageAlign)                      {                          case ContentAlignment.TopLeft:                              {                                  x = 0;                                  y = 0;                                    break;                              }                          case ContentAlignment.TopCenter:                              {                                  x = (this.Width - w) / 2;                                  y = 0;                                    if ((this.Width - w) % 2 > 0)                                  {                                      x += 1;                                  }                                    break;                              }                          case ContentAlignment.TopRight:                              {                                  x = this.Width - w;                                  y = 0;                                    break;                              }                          case ContentAlignment.MiddleLeft:                              {                                  x = 0;                                  y = (this.Height - h) / 2;                                    if ((this.Height - h) % 2 > 0)                                  {                                      y += 1;                                  }                                    break;                              }                          case ContentAlignment.MiddleCenter:                              {                                  x = (this.Width - w) / 2;                                  y = (this.Height - h) / 2;                                    if ((this.Width - w) % 2 > 0)                                  {                                      x += 1;                                  }                                  if ((this.Height - h) % 2 > 0)                                  {                                      y += 1;                                  }                                    break;                              }                          case ContentAlignment.MiddleRight:                              {                                  x = this.Width - w;                                  y = (this.Height - h) / 2;                                    if ((this.Height - h) % 2 > 0)                                  {                                      y += 1;                                  }                                    break;                              }                          case ContentAlignment.BottomLeft:                              {                                  x = 0;                                  y = this.Height - h;                                    if ((this.Height - h) % 2 > 0)                                  {                                      y += 1;                                  }                                    break;                              }                          case ContentAlignment.BottomCenter:                              {                                  x = (this.Width - w) / 2;                                  y = this.Height - h;                                    if ((this.Width - w) % 2 > 0)                                  {                                      x += 1;                                  }                                    break;                              }                          case ContentAlignment.BottomRight:                              {                                  x = this.Width - w;                                  y = this.Height - h;                                    break;                              }                      }                        if (_FillSplitHeight && h < this.Height)                      {                          h = this.Height;                      }                        if (x > 0)                      {                          x -= 1;                      }                      if (y > 0)                      {                          y -= 1;                      }                        return new Rectangle(x' y' w' h);                  }
Magic Number,OpenCBS.GUI.UserControl,SplitButton,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\SplitButton.cs,GetImageRect,The following statement contains a magic number: if (currImg != null)                  {                      int x = 0'                          y = 0'                          w = currImg.Width+1'                          h = currImg.Height+1;                        if (w > this.Width)                      {                          w = this.Width;                      }                        if (h > this.Width)                      {                          h = this.Width;                      }                        switch (ImageAlign)                      {                          case ContentAlignment.TopLeft:                              {                                  x = 0;                                  y = 0;                                    break;                              }                          case ContentAlignment.TopCenter:                              {                                  x = (this.Width - w) / 2;                                  y = 0;                                    if ((this.Width - w) % 2 > 0)                                  {                                      x += 1;                                  }                                    break;                              }                          case ContentAlignment.TopRight:                              {                                  x = this.Width - w;                                  y = 0;                                    break;                              }                          case ContentAlignment.MiddleLeft:                              {                                  x = 0;                                  y = (this.Height - h) / 2;                                    if ((this.Height - h) % 2 > 0)                                  {                                      y += 1;                                  }                                    break;                              }                          case ContentAlignment.MiddleCenter:                              {                                  x = (this.Width - w) / 2;                                  y = (this.Height - h) / 2;                                    if ((this.Width - w) % 2 > 0)                                  {                                      x += 1;                                  }                                  if ((this.Height - h) % 2 > 0)                                  {                                      y += 1;                                  }                                    break;                              }                          case ContentAlignment.MiddleRight:                              {                                  x = this.Width - w;                                  y = (this.Height - h) / 2;                                    if ((this.Height - h) % 2 > 0)                                  {                                      y += 1;                                  }                                    break;                              }                          case ContentAlignment.BottomLeft:                              {                                  x = 0;                                  y = this.Height - h;                                    if ((this.Height - h) % 2 > 0)                                  {                                      y += 1;                                  }                                    break;                              }                          case ContentAlignment.BottomCenter:                              {                                  x = (this.Width - w) / 2;                                  y = this.Height - h;                                    if ((this.Width - w) % 2 > 0)                                  {                                      x += 1;                                  }                                    break;                              }                          case ContentAlignment.BottomRight:                              {                                  x = this.Width - w;                                  y = this.Height - h;                                    break;                              }                      }                        if (_FillSplitHeight && h < this.Height)                      {                          h = this.Height;                      }                        if (x > 0)                      {                          x -= 1;                      }                      if (y > 0)                      {                          y -= 1;                      }                        return new Rectangle(x' y' w' h);                  }
Magic Number,OpenCBS.GUI.UserControl,SplitButton,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\SplitButton.cs,GetImageRect,The following statement contains a magic number: if (currImg != null)                  {                      int x = 0'                          y = 0'                          w = currImg.Width+1'                          h = currImg.Height+1;                        if (w > this.Width)                      {                          w = this.Width;                      }                        if (h > this.Width)                      {                          h = this.Width;                      }                        switch (ImageAlign)                      {                          case ContentAlignment.TopLeft:                              {                                  x = 0;                                  y = 0;                                    break;                              }                          case ContentAlignment.TopCenter:                              {                                  x = (this.Width - w) / 2;                                  y = 0;                                    if ((this.Width - w) % 2 > 0)                                  {                                      x += 1;                                  }                                    break;                              }                          case ContentAlignment.TopRight:                              {                                  x = this.Width - w;                                  y = 0;                                    break;                              }                          case ContentAlignment.MiddleLeft:                              {                                  x = 0;                                  y = (this.Height - h) / 2;                                    if ((this.Height - h) % 2 > 0)                                  {                                      y += 1;                                  }                                    break;                              }                          case ContentAlignment.MiddleCenter:                              {                                  x = (this.Width - w) / 2;                                  y = (this.Height - h) / 2;                                    if ((this.Width - w) % 2 > 0)                                  {                                      x += 1;                                  }                                  if ((this.Height - h) % 2 > 0)                                  {                                      y += 1;                                  }                                    break;                              }                          case ContentAlignment.MiddleRight:                              {                                  x = this.Width - w;                                  y = (this.Height - h) / 2;                                    if ((this.Height - h) % 2 > 0)                                  {                                      y += 1;                                  }                                    break;                              }                          case ContentAlignment.BottomLeft:                              {                                  x = 0;                                  y = this.Height - h;                                    if ((this.Height - h) % 2 > 0)                                  {                                      y += 1;                                  }                                    break;                              }                          case ContentAlignment.BottomCenter:                              {                                  x = (this.Width - w) / 2;                                  y = this.Height - h;                                    if ((this.Width - w) % 2 > 0)                                  {                                      x += 1;                                  }                                    break;                              }                          case ContentAlignment.BottomRight:                              {                                  x = this.Width - w;                                  y = this.Height - h;                                    break;                              }                      }                        if (_FillSplitHeight && h < this.Height)                      {                          h = this.Height;                      }                        if (x > 0)                      {                          x -= 1;                      }                      if (y > 0)                      {                          y -= 1;                      }                        return new Rectangle(x' y' w' h);                  }
Magic Number,OpenCBS.GUI.UserControl,SplitButton,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\SplitButton.cs,GetImageRect,The following statement contains a magic number: if (currImg != null)                  {                      int x = 0'                          y = 0'                          w = currImg.Width+1'                          h = currImg.Height+1;                        if (w > this.Width)                      {                          w = this.Width;                      }                        if (h > this.Width)                      {                          h = this.Width;                      }                        switch (ImageAlign)                      {                          case ContentAlignment.TopLeft:                              {                                  x = 0;                                  y = 0;                                    break;                              }                          case ContentAlignment.TopCenter:                              {                                  x = (this.Width - w) / 2;                                  y = 0;                                    if ((this.Width - w) % 2 > 0)                                  {                                      x += 1;                                  }                                    break;                              }                          case ContentAlignment.TopRight:                              {                                  x = this.Width - w;                                  y = 0;                                    break;                              }                          case ContentAlignment.MiddleLeft:                              {                                  x = 0;                                  y = (this.Height - h) / 2;                                    if ((this.Height - h) % 2 > 0)                                  {                                      y += 1;                                  }                                    break;                              }                          case ContentAlignment.MiddleCenter:                              {                                  x = (this.Width - w) / 2;                                  y = (this.Height - h) / 2;                                    if ((this.Width - w) % 2 > 0)                                  {                                      x += 1;                                  }                                  if ((this.Height - h) % 2 > 0)                                  {                                      y += 1;                                  }                                    break;                              }                          case ContentAlignment.MiddleRight:                              {                                  x = this.Width - w;                                  y = (this.Height - h) / 2;                                    if ((this.Height - h) % 2 > 0)                                  {                                      y += 1;                                  }                                    break;                              }                          case ContentAlignment.BottomLeft:                              {                                  x = 0;                                  y = this.Height - h;                                    if ((this.Height - h) % 2 > 0)                                  {                                      y += 1;                                  }                                    break;                              }                          case ContentAlignment.BottomCenter:                              {                                  x = (this.Width - w) / 2;                                  y = this.Height - h;                                    if ((this.Width - w) % 2 > 0)                                  {                                      x += 1;                                  }                                    break;                              }                          case ContentAlignment.BottomRight:                              {                                  x = this.Width - w;                                  y = this.Height - h;                                    break;                              }                      }                        if (_FillSplitHeight && h < this.Height)                      {                          h = this.Height;                      }                        if (x > 0)                      {                          x -= 1;                      }                      if (y > 0)                      {                          y -= 1;                      }                        return new Rectangle(x' y' w' h);                  }
Magic Number,OpenCBS.GUI.UserControl,SweetForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\SweetForm.cs,InitializeComponent,The following statement contains a magic number: this.tabHeader.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(81))))' ((int)(((byte)(152)))));
Magic Number,OpenCBS.GUI.UserControl,SweetForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\SweetForm.cs,InitializeComponent,The following statement contains a magic number: this.tabHeader.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(81))))' ((int)(((byte)(152)))));
Magic Number,OpenCBS.GUI.UserControl,SweetForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\SweetForm.cs,InitializeComponent,The following statement contains a magic number: this.lblTitle.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(81))))' ((int)(((byte)(152)))));
Magic Number,OpenCBS.GUI.UserControl,SweetForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\SweetForm.cs,InitializeComponent,The following statement contains a magic number: this.lblTitle.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(81))))' ((int)(((byte)(152)))));
Magic Number,OpenCBS.GUI.UserControl,CityTextBox,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CityTextBox.cs,UpdateDropDownSize,The following statement contains a magic number: Size len' maxLen = new Size(this.Width - 2' _box.Height);
Magic Number,OpenCBS.GUI.UserControl,CityTextBox,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CityTextBox.cs,UpdateDropDownSize,The following statement contains a magic number: if (_box.Items.Count < 10)                  _box.Height = _box.ItemHeight*(_box.Items.Count + 1);              else _box.Height = _box.ItemHeight*10;
Magic Number,OpenCBS.GUI.UserControl,CityTextBox,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CityTextBox.cs,UpdateDropDownSize,The following statement contains a magic number: if (_box.Items.Count < 10)                  _box.Height = _box.ItemHeight*(_box.Items.Count + 1);              else _box.Height = _box.ItemHeight*10;
Magic Number,OpenCBS.GUI.UserControl,CityTextBox,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CityTextBox.cs,OnHandleCreated,The following statement contains a magic number: _box.Width = this.Width - 2;
Magic Number,OpenCBS.GUI.UserControl,TextCurrencyUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\TextCurrencyUserControl.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(109' 6);
Magic Number,OpenCBS.GUI.UserControl,TextCurrencyUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\TextCurrencyUserControl.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(109' 6);
Magic Number,OpenCBS.GUI.UserControl,TextCurrencyUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\TextCurrencyUserControl.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(21' 13);
Magic Number,OpenCBS.GUI.UserControl,TextCurrencyUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\TextCurrencyUserControl.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(21' 13);
Magic Number,OpenCBS.GUI.UserControl,TextCurrencyUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\TextCurrencyUserControl.cs,InitializeComponent,The following statement contains a magic number: this.textBoxExternalCurrency.Location = new System.Drawing.Point(3' 3);
Magic Number,OpenCBS.GUI.UserControl,TextCurrencyUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\TextCurrencyUserControl.cs,InitializeComponent,The following statement contains a magic number: this.textBoxExternalCurrency.Location = new System.Drawing.Point(3' 3);
Magic Number,OpenCBS.GUI.UserControl,TextCurrencyUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\TextCurrencyUserControl.cs,InitializeComponent,The following statement contains a magic number: this.textBoxExternalCurrency.Size = new System.Drawing.Size(100' 20);
Magic Number,OpenCBS.GUI.UserControl,TextCurrencyUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\TextCurrencyUserControl.cs,InitializeComponent,The following statement contains a magic number: this.textBoxExternalCurrency.Size = new System.Drawing.Size(100' 20);
Magic Number,OpenCBS.GUI.UserControl,TextCurrencyUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\TextCurrencyUserControl.cs,InitializeComponent,The following statement contains a magic number: this.textBoxInternalCurrency.Location = new System.Drawing.Point(177' 3);
Magic Number,OpenCBS.GUI.UserControl,TextCurrencyUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\TextCurrencyUserControl.cs,InitializeComponent,The following statement contains a magic number: this.textBoxInternalCurrency.Location = new System.Drawing.Point(177' 3);
Magic Number,OpenCBS.GUI.UserControl,TextCurrencyUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\TextCurrencyUserControl.cs,InitializeComponent,The following statement contains a magic number: this.textBoxInternalCurrency.Size = new System.Drawing.Size(100' 20);
Magic Number,OpenCBS.GUI.UserControl,TextCurrencyUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\TextCurrencyUserControl.cs,InitializeComponent,The following statement contains a magic number: this.textBoxInternalCurrency.Size = new System.Drawing.Size(100' 20);
Magic Number,OpenCBS.GUI.UserControl,TextCurrencyUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\TextCurrencyUserControl.cs,InitializeComponent,The following statement contains a magic number: this.textBoxInternalCurrency.TabIndex = 2;
Magic Number,OpenCBS.GUI.UserControl,TextCurrencyUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\TextCurrencyUserControl.cs,InitializeComponent,The following statement contains a magic number: this.label2.Location = new System.Drawing.Point(283' 6);
Magic Number,OpenCBS.GUI.UserControl,TextCurrencyUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\TextCurrencyUserControl.cs,InitializeComponent,The following statement contains a magic number: this.label2.Location = new System.Drawing.Point(283' 6);
Magic Number,OpenCBS.GUI.UserControl,TextCurrencyUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\TextCurrencyUserControl.cs,InitializeComponent,The following statement contains a magic number: this.label2.Size = new System.Drawing.Size(17' 13);
Magic Number,OpenCBS.GUI.UserControl,TextCurrencyUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\TextCurrencyUserControl.cs,InitializeComponent,The following statement contains a magic number: this.label2.Size = new System.Drawing.Size(17' 13);
Magic Number,OpenCBS.GUI.UserControl,TextCurrencyUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\TextCurrencyUserControl.cs,InitializeComponent,The following statement contains a magic number: this.label2.TabIndex = 3;
Magic Number,OpenCBS.GUI.UserControl,TextCurrencyUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\TextCurrencyUserControl.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(327' 27);
Magic Number,OpenCBS.GUI.UserControl,TextCurrencyUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\TextCurrencyUserControl.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(327' 27);
Magic Number,OpenCBS.GUI.UserControl,TextDecimalNumericUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\TextDecimalNumericUserControl.cs,textBoxNumeric_KeyPress,The following statement contains a magic number: if ((keyCode >= 48 && keyCode <= 57) || (keyCode == 8) || (Char.IsControl(e.KeyChar) && e.KeyChar                  != ((char)Keys.V | (char)Keys.ControlKey)) || (Char.IsControl(e.KeyChar) && e.KeyChar !=                  ((char)Keys.C | (char)Keys.ControlKey)) || (e.KeyChar.ToString() == NumberFormatInfo.CurrentInfo.NumberDecimalSeparator))              {                  e.Handled = false;              }              else                  e.Handled = true;
Magic Number,OpenCBS.GUI.UserControl,TextDecimalNumericUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\TextDecimalNumericUserControl.cs,textBoxNumeric_KeyPress,The following statement contains a magic number: if ((keyCode >= 48 && keyCode <= 57) || (keyCode == 8) || (Char.IsControl(e.KeyChar) && e.KeyChar                  != ((char)Keys.V | (char)Keys.ControlKey)) || (Char.IsControl(e.KeyChar) && e.KeyChar !=                  ((char)Keys.C | (char)Keys.ControlKey)) || (e.KeyChar.ToString() == NumberFormatInfo.CurrentInfo.NumberDecimalSeparator))              {                  e.Handled = false;              }              else                  e.Handled = true;
Magic Number,OpenCBS.GUI.UserControl,TextDecimalNumericUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\TextDecimalNumericUserControl.cs,textBoxNumeric_KeyPress,The following statement contains a magic number: if ((keyCode >= 48 && keyCode <= 57) || (keyCode == 8) || (Char.IsControl(e.KeyChar) && e.KeyChar                  != ((char)Keys.V | (char)Keys.ControlKey)) || (Char.IsControl(e.KeyChar) && e.KeyChar !=                  ((char)Keys.C | (char)Keys.ControlKey)) || (e.KeyChar.ToString() == NumberFormatInfo.CurrentInfo.NumberDecimalSeparator))              {                  e.Handled = false;              }              else                  e.Handled = true;
Magic Number,OpenCBS.GUI.UserControl,TextDecimalNumericUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\TextDecimalNumericUserControl.cs,InitializeComponent,The following statement contains a magic number: this.textBoxNumeric.Size = new System.Drawing.Size(100' 20);
Magic Number,OpenCBS.GUI.UserControl,TextDecimalNumericUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\TextDecimalNumericUserControl.cs,InitializeComponent,The following statement contains a magic number: this.textBoxNumeric.Size = new System.Drawing.Size(100' 20);
Magic Number,OpenCBS.GUI.UserControl,TextDecimalNumericUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\TextDecimalNumericUserControl.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(100' 20);
Magic Number,OpenCBS.GUI.UserControl,TextDecimalNumericUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\TextDecimalNumericUserControl.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(100' 20);
Magic Number,OpenCBS.GUI.UserControl,TextNumericUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\TextNumericUserControl.cs,textBoxNumeric_KeyPress,The following statement contains a magic number: if (e.KeyChar < 48 || e.KeyChar > 57)              {                  e.Handled = (e.KeyChar != 8);              }
Magic Number,OpenCBS.GUI.UserControl,TextNumericUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\TextNumericUserControl.cs,textBoxNumeric_KeyPress,The following statement contains a magic number: if (e.KeyChar < 48 || e.KeyChar > 57)              {                  e.Handled = (e.KeyChar != 8);              }
Magic Number,OpenCBS.GUI.UserControl,TextNumericUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\TextNumericUserControl.cs,textBoxNumeric_KeyPress,The following statement contains a magic number: if (e.KeyChar < 48 || e.KeyChar > 57)              {                  e.Handled = (e.KeyChar != 8);              }
Magic Number,OpenCBS.GUI.UserControl,TextNumericUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\TextNumericUserControl.cs,InitializeComponent,The following statement contains a magic number: this.textBoxNumeric.Size = new System.Drawing.Size(100' 20);
Magic Number,OpenCBS.GUI.UserControl,TextNumericUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\TextNumericUserControl.cs,InitializeComponent,The following statement contains a magic number: this.textBoxNumeric.Size = new System.Drawing.Size(100' 20);
Magic Number,OpenCBS.GUI.UserControl,TextNumericUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\TextNumericUserControl.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(100' 20);
Magic Number,OpenCBS.GUI.UserControl,TextNumericUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\TextNumericUserControl.cs,InitializeComponent,The following statement contains a magic number: this.Size = new System.Drawing.Size(100' 20);
Magic Number,OpenCBS.GUI.Products,FrmAvailableSavingProducts,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAvailableSavingProducts.Designer.cs,InitializeComponent,The following statement contains a magic number: this.savingBookProductToolStripMenuItem.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56)))));
Magic Number,OpenCBS.GUI.Products,FrmAvailableSavingProducts,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAvailableSavingProducts.Designer.cs,InitializeComponent,The following statement contains a magic number: this.savingBookProductToolStripMenuItem.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56)))));
Magic Number,OpenCBS.GUI.Products,FrmAvailableSavingProducts,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAvailableSavingProducts.Designer.cs,InitializePackages,The following statement contains a magic number: foreach (ISavingProduct s in packageList)              {                  ListViewItem lvi = new ListViewItem(s.Name);                  lvi.SubItems.Add(Convert.ToString(s.ClientType));                  lvi.SubItems.Add(s.InterestRate == null ? String.Format("{0:N2}% - {1:N2}%"' s.InterestRateMin * 100' s.InterestRateMax * 100) : String.Format("{0:N2}%"' s.InterestRate * 100));                  lvi.SubItems.Add(s.Periodicity == null ? "No" : "Yes"); //TermDeposit                  lvi.Tag = s;                  determineRowColor(s' lvi);                  descriptionListView.Items.Add(lvi);              }
Magic Number,OpenCBS.GUI.Products,FrmAvailableSavingProducts,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAvailableSavingProducts.Designer.cs,InitializePackages,The following statement contains a magic number: foreach (ISavingProduct s in packageList)              {                  ListViewItem lvi = new ListViewItem(s.Name);                  lvi.SubItems.Add(Convert.ToString(s.ClientType));                  lvi.SubItems.Add(s.InterestRate == null ? String.Format("{0:N2}% - {1:N2}%"' s.InterestRateMin * 100' s.InterestRateMax * 100) : String.Format("{0:N2}%"' s.InterestRate * 100));                  lvi.SubItems.Add(s.Periodicity == null ? "No" : "Yes"); //TermDeposit                  lvi.Tag = s;                  determineRowColor(s' lvi);                  descriptionListView.Items.Add(lvi);              }
Magic Number,OpenCBS.GUI.Products,FrmAvailableSavingProducts,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAvailableSavingProducts.Designer.cs,InitializePackages,The following statement contains a magic number: foreach (ISavingProduct s in packageList)              {                  ListViewItem lvi = new ListViewItem(s.Name);                  lvi.SubItems.Add(Convert.ToString(s.ClientType));                  lvi.SubItems.Add(s.InterestRate == null ? String.Format("{0:N2}% - {1:N2}%"' s.InterestRateMin * 100' s.InterestRateMax * 100) : String.Format("{0:N2}%"' s.InterestRate * 100));                  lvi.SubItems.Add(s.Periodicity == null ? "No" : "Yes"); //TermDeposit                  lvi.Tag = s;                  determineRowColor(s' lvi);                  descriptionListView.Items.Add(lvi);              }
Magic Number,OpenCBS.GUI.Products,FrmAvalaibleLoanProducts,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAvalaibleLoanProducts.Designer.cs,InitializePackages,The following statement contains a magic number: foreach (LoanProduct p in packageList)              {                  ListViewItem lvi = new ListViewItem(p.Name);                  lvi.SubItems.Add(Convert.ToString(p.LoanType));                  lvi.SubItems.Add(p.InterestRate == null ? String.Format("{0:N2}% - {1:N2}%"' p.InterestRateMin * 100' p.InterestRateMax * 100) : String.Format("{0:N2}%"' p.InterestRate * 100));                  if (p.InstallmentType.Id == 0)                  {                      lvi.SubItems.Add(GetString("FrmAddLoanProduct"' "allInstallmentTypes"));                  }                  else                  {                      lvi.SubItems.Add(Convert.ToString(p.InstallmentType));                  }                  lvi.Tag = p;                  determineRowColor(p' lvi);                  descriptionListView.Items.Add(lvi);              }
Magic Number,OpenCBS.GUI.Products,FrmAvalaibleLoanProducts,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAvalaibleLoanProducts.Designer.cs,InitializePackages,The following statement contains a magic number: foreach (LoanProduct p in packageList)              {                  ListViewItem lvi = new ListViewItem(p.Name);                  lvi.SubItems.Add(Convert.ToString(p.LoanType));                  lvi.SubItems.Add(p.InterestRate == null ? String.Format("{0:N2}% - {1:N2}%"' p.InterestRateMin * 100' p.InterestRateMax * 100) : String.Format("{0:N2}%"' p.InterestRate * 100));                  if (p.InstallmentType.Id == 0)                  {                      lvi.SubItems.Add(GetString("FrmAddLoanProduct"' "allInstallmentTypes"));                  }                  else                  {                      lvi.SubItems.Add(Convert.ToString(p.InstallmentType));                  }                  lvi.Tag = p;                  determineRowColor(p' lvi);                  descriptionListView.Items.Add(lvi);              }
Magic Number,OpenCBS.GUI.Products,FrmAvalaibleLoanProducts,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAvalaibleLoanProducts.Designer.cs,InitializePackages,The following statement contains a magic number: foreach (LoanProduct p in packageList)              {                  ListViewItem lvi = new ListViewItem(p.Name);                  lvi.SubItems.Add(Convert.ToString(p.LoanType));                  lvi.SubItems.Add(p.InterestRate == null ? String.Format("{0:N2}% - {1:N2}%"' p.InterestRateMin * 100' p.InterestRateMax * 100) : String.Format("{0:N2}%"' p.InterestRate * 100));                  if (p.InstallmentType.Id == 0)                  {                      lvi.SubItems.Add(GetString("FrmAddLoanProduct"' "allInstallmentTypes"));                  }                  else                  {                      lvi.SubItems.Add(Convert.ToString(p.InstallmentType));                  }                  lvi.Tag = p;                  determineRowColor(p' lvi);                  descriptionListView.Items.Add(lvi);              }
Magic Number,OpenCBS.GUI.Products,FrmAddLoanProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddLoanProduct.Designer.cs,InitializeComponent,The following statement contains a magic number: this.cbxCycleObjects.DropDownWidth = 175;
Magic Number,OpenCBS.GUI.Products,FrmAddLoanProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddLoanProduct.Designer.cs,InitializeComponent,The following statement contains a magic number: this.listViewExoticInstallments.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(80))))' ((int)(((byte)(56)))));
Magic Number,OpenCBS.GUI.Products,FrmAddLoanProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddLoanProduct.Designer.cs,InitializeComponent,The following statement contains a magic number: this.listViewExoticInstallments.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(80))))' ((int)(((byte)(56)))));
Magic Number,OpenCBS.GUI.Products,FrmAddLoanProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddLoanProduct.Designer.cs,FrmAddLoanProduct,The following statement contains a magic number: foreach (RateCycle cycle in _product.RateCycleParams)              {                  cycle.Min = cycle.Min * 100;                  cycle.Max = cycle.Max * 100;              }
Magic Number,OpenCBS.GUI.Products,FrmAddLoanProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddLoanProduct.Designer.cs,FrmAddLoanProduct,The following statement contains a magic number: foreach (RateCycle cycle in _product.RateCycleParams)              {                  cycle.Min = cycle.Min * 100;                  cycle.Max = cycle.Max * 100;              }
Magic Number,OpenCBS.GUI.Products,FrmAddLoanProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddLoanProduct.Designer.cs,InitializeAdditionalEmptyRowInListView,The following statement contains a magic number: if (lvEntryFees.Items.Count < 11)              {                  EntryFee entryFee = new EntryFee();                  ListViewItem tItem = new ListViewItem("") { Tag = entryFee };                  tItem.SubItems.Add("");                  tItem.SubItems.Add("");                  tItem.SubItems.Add("");                  tItem.SubItems.Add("");                  tItem.SubItems.Add("");                  tItem.SubItems.Add("");                  tItem.SubItems.Add("");                  tItem.SubItems.Add("");                  tItem.SubItems.Add(lvEntryFees.Items.Count.ToString(CultureInfo.CurrentCulture));                  lvEntryFees.Items.Add(tItem);              }
Magic Number,OpenCBS.GUI.Products,FrmAddLoanProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddLoanProduct.Designer.cs,InitializeComboBoxInterestRateType,The following statement contains a magic number: if (index < 4)              {                  cmbInterestRateType.SelectedIndex = index;              }              else              {                  cmbInterestRateType.SelectedItem = pack.ScriptName;              }
Magic Number,OpenCBS.GUI.Products,FrmAddLoanProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddLoanProduct.Designer.cs,InitializePackageValues,The following statement contains a magic number: if (!pack.AnticipatedTotalRepaymentPenalties.HasValue)              {                  textBoxAnticipatedRepaymentPenaltiesMin.Text = (pack.AnticipatedTotalRepaymentPenaltiesMin * 100).ToString();                  textBoxAnticipatedRepaymentPenaltiesMax.Text = (pack.AnticipatedTotalRepaymentPenaltiesMax * 100).ToString();              }              else                  textBoxAnticipatedRepaymentPenalties.Text = (pack.AnticipatedTotalRepaymentPenalties * 100).ToString();
Magic Number,OpenCBS.GUI.Products,FrmAddLoanProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddLoanProduct.Designer.cs,InitializePackageValues,The following statement contains a magic number: if (!pack.AnticipatedTotalRepaymentPenalties.HasValue)              {                  textBoxAnticipatedRepaymentPenaltiesMin.Text = (pack.AnticipatedTotalRepaymentPenaltiesMin * 100).ToString();                  textBoxAnticipatedRepaymentPenaltiesMax.Text = (pack.AnticipatedTotalRepaymentPenaltiesMax * 100).ToString();              }              else                  textBoxAnticipatedRepaymentPenalties.Text = (pack.AnticipatedTotalRepaymentPenalties * 100).ToString();
Magic Number,OpenCBS.GUI.Products,FrmAddLoanProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddLoanProduct.Designer.cs,InitializePackageValues,The following statement contains a magic number: if (!pack.AnticipatedTotalRepaymentPenalties.HasValue)              {                  textBoxAnticipatedRepaymentPenaltiesMin.Text = (pack.AnticipatedTotalRepaymentPenaltiesMin * 100).ToString();                  textBoxAnticipatedRepaymentPenaltiesMax.Text = (pack.AnticipatedTotalRepaymentPenaltiesMax * 100).ToString();              }              else                  textBoxAnticipatedRepaymentPenalties.Text = (pack.AnticipatedTotalRepaymentPenalties * 100).ToString();
Magic Number,OpenCBS.GUI.Products,FrmAddLoanProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddLoanProduct.Designer.cs,InitializePackageValues,The following statement contains a magic number: if (!pack.AnticipatedPartialRepaymentPenalties.HasValue)              {                  textBoxAnticipatedPartialRepaimentMin.Text = (pack.AnticipatedPartialRepaymentPenaltiesMin * 100).ToString();                  textBoxAnticipatedPartialRepaimentMax.Text = (pack.AnticipatedPartialRepaymentPenaltiesMax * 100).ToString();              }              else                  textBoxAnticipatedPartialRepaiment.Text = (pack.AnticipatedPartialRepaymentPenalties * 100).ToString();
Magic Number,OpenCBS.GUI.Products,FrmAddLoanProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddLoanProduct.Designer.cs,InitializePackageValues,The following statement contains a magic number: if (!pack.AnticipatedPartialRepaymentPenalties.HasValue)              {                  textBoxAnticipatedPartialRepaimentMin.Text = (pack.AnticipatedPartialRepaymentPenaltiesMin * 100).ToString();                  textBoxAnticipatedPartialRepaimentMax.Text = (pack.AnticipatedPartialRepaymentPenaltiesMax * 100).ToString();              }              else                  textBoxAnticipatedPartialRepaiment.Text = (pack.AnticipatedPartialRepaymentPenalties * 100).ToString();
Magic Number,OpenCBS.GUI.Products,FrmAddLoanProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddLoanProduct.Designer.cs,InitializePackageValues,The following statement contains a magic number: if (!pack.AnticipatedPartialRepaymentPenalties.HasValue)              {                  textBoxAnticipatedPartialRepaimentMin.Text = (pack.AnticipatedPartialRepaymentPenaltiesMin * 100).ToString();                  textBoxAnticipatedPartialRepaimentMax.Text = (pack.AnticipatedPartialRepaymentPenaltiesMax * 100).ToString();              }              else                  textBoxAnticipatedPartialRepaiment.Text = (pack.AnticipatedPartialRepaymentPenalties * 100).ToString();
Magic Number,OpenCBS.GUI.Products,FrmAddLoanProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddLoanProduct.Designer.cs,InitializePackageValues,The following statement contains a magic number: if (pack.NonRepaymentPenalties.InitialAmount.HasValue)              {                  tBInitialAmountValue.Text = (pack.NonRepaymentPenalties.InitialAmount.Value * 100).ToString();              }              else              {                  tBInitialAmountMax.Text = (pack.NonRepaymentPenaltiesMax.InitialAmount.Value * 100).ToString();                  tBInitialAmountMin.Text = (pack.NonRepaymentPenaltiesMin.InitialAmount.Value * 100).ToString();              }
Magic Number,OpenCBS.GUI.Products,FrmAddLoanProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddLoanProduct.Designer.cs,InitializePackageValues,The following statement contains a magic number: if (pack.NonRepaymentPenalties.InitialAmount.HasValue)              {                  tBInitialAmountValue.Text = (pack.NonRepaymentPenalties.InitialAmount.Value * 100).ToString();              }              else              {                  tBInitialAmountMax.Text = (pack.NonRepaymentPenaltiesMax.InitialAmount.Value * 100).ToString();                  tBInitialAmountMin.Text = (pack.NonRepaymentPenaltiesMin.InitialAmount.Value * 100).ToString();              }
Magic Number,OpenCBS.GUI.Products,FrmAddLoanProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddLoanProduct.Designer.cs,InitializePackageValues,The following statement contains a magic number: if (pack.NonRepaymentPenalties.InitialAmount.HasValue)              {                  tBInitialAmountValue.Text = (pack.NonRepaymentPenalties.InitialAmount.Value * 100).ToString();              }              else              {                  tBInitialAmountMax.Text = (pack.NonRepaymentPenaltiesMax.InitialAmount.Value * 100).ToString();                  tBInitialAmountMin.Text = (pack.NonRepaymentPenaltiesMin.InitialAmount.Value * 100).ToString();              }
Magic Number,OpenCBS.GUI.Products,FrmAddLoanProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddLoanProduct.Designer.cs,InitializePackageValues,The following statement contains a magic number: if (pack.NonRepaymentPenalties.OverDuePrincipal.HasValue)              {                  tBOverduePrincipalValue.Text = (pack.NonRepaymentPenalties.OverDuePrincipal.Value * 100).ToString();              }              else              {                  tBOverduePrincipalMax.Text = (pack.NonRepaymentPenaltiesMax.OverDuePrincipal.Value * 100).ToString();                  tBOverduePrincipalMin.Text = (pack.NonRepaymentPenaltiesMin.OverDuePrincipal.Value * 100).ToString();              }
Magic Number,OpenCBS.GUI.Products,FrmAddLoanProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddLoanProduct.Designer.cs,InitializePackageValues,The following statement contains a magic number: if (pack.NonRepaymentPenalties.OverDuePrincipal.HasValue)              {                  tBOverduePrincipalValue.Text = (pack.NonRepaymentPenalties.OverDuePrincipal.Value * 100).ToString();              }              else              {                  tBOverduePrincipalMax.Text = (pack.NonRepaymentPenaltiesMax.OverDuePrincipal.Value * 100).ToString();                  tBOverduePrincipalMin.Text = (pack.NonRepaymentPenaltiesMin.OverDuePrincipal.Value * 100).ToString();              }
Magic Number,OpenCBS.GUI.Products,FrmAddLoanProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddLoanProduct.Designer.cs,InitializePackageValues,The following statement contains a magic number: if (pack.NonRepaymentPenalties.OverDuePrincipal.HasValue)              {                  tBOverduePrincipalValue.Text = (pack.NonRepaymentPenalties.OverDuePrincipal.Value * 100).ToString();              }              else              {                  tBOverduePrincipalMax.Text = (pack.NonRepaymentPenaltiesMax.OverDuePrincipal.Value * 100).ToString();                  tBOverduePrincipalMin.Text = (pack.NonRepaymentPenaltiesMin.OverDuePrincipal.Value * 100).ToString();              }
Magic Number,OpenCBS.GUI.Products,FrmAddLoanProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddLoanProduct.Designer.cs,InitializePackageValues,The following statement contains a magic number: if (pack.NonRepaymentPenalties.OLB.HasValue)              {                  tBOLBValue.Text = (pack.NonRepaymentPenalties.OLB.Value * 100).ToString();              }              else              {                  tBOLBMax.Text = (pack.NonRepaymentPenaltiesMax.OLB.Value * 100).ToString();                  tBOLBMin.Text = (pack.NonRepaymentPenaltiesMin.OLB.Value * 100).ToString();              }
Magic Number,OpenCBS.GUI.Products,FrmAddLoanProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddLoanProduct.Designer.cs,InitializePackageValues,The following statement contains a magic number: if (pack.NonRepaymentPenalties.OLB.HasValue)              {                  tBOLBValue.Text = (pack.NonRepaymentPenalties.OLB.Value * 100).ToString();              }              else              {                  tBOLBMax.Text = (pack.NonRepaymentPenaltiesMax.OLB.Value * 100).ToString();                  tBOLBMin.Text = (pack.NonRepaymentPenaltiesMin.OLB.Value * 100).ToString();              }
Magic Number,OpenCBS.GUI.Products,FrmAddLoanProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddLoanProduct.Designer.cs,InitializePackageValues,The following statement contains a magic number: if (pack.NonRepaymentPenalties.OLB.HasValue)              {                  tBOLBValue.Text = (pack.NonRepaymentPenalties.OLB.Value * 100).ToString();              }              else              {                  tBOLBMax.Text = (pack.NonRepaymentPenaltiesMax.OLB.Value * 100).ToString();                  tBOLBMin.Text = (pack.NonRepaymentPenaltiesMin.OLB.Value * 100).ToString();              }
Magic Number,OpenCBS.GUI.Products,FrmAddLoanProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddLoanProduct.Designer.cs,InitializePackageValues,The following statement contains a magic number: if (pack.NonRepaymentPenalties.OverDueInterest.HasValue)              {                  tBOverdueInterestValue.Text = (pack.NonRepaymentPenalties.OverDueInterest.Value * 100).ToString();              }              else              {                  tBOverdueInterestMax.Text = (pack.NonRepaymentPenaltiesMax.OverDueInterest.Value * 100).ToString();                  tBOverdueInterestMin.Text = (pack.NonRepaymentPenaltiesMin.OverDueInterest.Value * 100).ToString();              }
Magic Number,OpenCBS.GUI.Products,FrmAddLoanProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddLoanProduct.Designer.cs,InitializePackageValues,The following statement contains a magic number: if (pack.NonRepaymentPenalties.OverDueInterest.HasValue)              {                  tBOverdueInterestValue.Text = (pack.NonRepaymentPenalties.OverDueInterest.Value * 100).ToString();              }              else              {                  tBOverdueInterestMax.Text = (pack.NonRepaymentPenaltiesMax.OverDueInterest.Value * 100).ToString();                  tBOverdueInterestMin.Text = (pack.NonRepaymentPenaltiesMin.OverDueInterest.Value * 100).ToString();              }
Magic Number,OpenCBS.GUI.Products,FrmAddLoanProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddLoanProduct.Designer.cs,InitializePackageValues,The following statement contains a magic number: if (pack.NonRepaymentPenalties.OverDueInterest.HasValue)              {                  tBOverdueInterestValue.Text = (pack.NonRepaymentPenalties.OverDueInterest.Value * 100).ToString();              }              else              {                  tBOverdueInterestMax.Text = (pack.NonRepaymentPenaltiesMax.OverDueInterest.Value * 100).ToString();                  tBOverdueInterestMin.Text = (pack.NonRepaymentPenaltiesMin.OverDueInterest.Value * 100).ToString();              }
Magic Number,OpenCBS.GUI.Products,FrmAddLoanProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddLoanProduct.Designer.cs,comboBoxInstallmentType_SelectionChangeCommitted,The following statement contains a magic number: if (_product.InstallmentType.NbOfMonths != 1 || _product.InstallmentType.NbOfDays != 0)              {                  if (index > 1)                      index -= 2;              }
Magic Number,OpenCBS.GUI.Products,FrmAddLoanProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddLoanProduct.Designer.cs,_CancelExoticProduct,The following statement contains a magic number: groupBoxExoticProducts.Size = new Size(754' 298);
Magic Number,OpenCBS.GUI.Products,FrmAddLoanProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddLoanProduct.Designer.cs,_CancelExoticProduct,The following statement contains a magic number: groupBoxExoticProducts.Size = new Size(754' 298);
Magic Number,OpenCBS.GUI.Products,FrmAddLoanProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddLoanProduct.Designer.cs,_InitializeListViewExoticInstallments,The following statement contains a magic number: for (int i = 0; i < pExoticProduct.GetNumberOfInstallments; i++)              {                  ExoticInstallment exoInstallment = pExoticProduct.GetExoticInstallment(i);                  ListViewItem listViewItem = new ListViewItem(exoInstallment.Number.ToString());                    listViewItem.SubItems.Add((exoInstallment.PrincipalCoeff * 100).ToString());                    listViewItem.SubItems.Add(_product.IsDeclining                                                ? "-"                                                : (exoInstallment.InterestCoeff.Value * 100).ToString());                    listViewItem.Tag = exoInstallment;                  listViewItem.BackColor = Color.White;                  listViewExoticInstallments.Items.Add(listViewItem);              }
Magic Number,OpenCBS.GUI.Products,FrmAddLoanProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddLoanProduct.Designer.cs,_InitializeListViewExoticInstallments,The following statement contains a magic number: for (int i = 0; i < pExoticProduct.GetNumberOfInstallments; i++)              {                  ExoticInstallment exoInstallment = pExoticProduct.GetExoticInstallment(i);                  ListViewItem listViewItem = new ListViewItem(exoInstallment.Number.ToString());                    listViewItem.SubItems.Add((exoInstallment.PrincipalCoeff * 100).ToString());                    listViewItem.SubItems.Add(_product.IsDeclining                                                ? "-"                                                : (exoInstallment.InterestCoeff.Value * 100).ToString());                    listViewItem.Tag = exoInstallment;                  listViewItem.BackColor = Color.White;                  listViewExoticInstallments.Items.Add(listViewItem);              }
Magic Number,OpenCBS.GUI.Products,FrmAddLoanProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddLoanProduct.Designer.cs,_InitializeListViewExoticInstallments,The following statement contains a magic number: labelTotalPrincipal.Text = string.Format("{0} %"' (pExoticProduct.SumOfPrincipalCoeff * 100));
Magic Number,OpenCBS.GUI.Products,FrmAddLoanProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddLoanProduct.Designer.cs,_InitializeListViewExoticInstallments,The following statement contains a magic number: labelTotalInterest.Text = _product.IsDeclining ? " - " : string.Format("{0} %"' pExoticProduct.SumOfInterestCoeff * 100);
Magic Number,OpenCBS.GUI.Products,FrmAddLoanProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddLoanProduct.Designer.cs,buttonAddAmountCycle_Click,The following statement contains a magic number: switch (cycleObjectId)              {                  case 1:                      var parameter = new LoanAmountCycle                      {                          CycleId = ((LoanCycle)comboBoxLoanCyclesName.SelectedItem).Id'                          CycleObjectId = cycleObjectId'                          Min = 0'                          Max = 0'                          LoanCycle = loanCycle                      };                      var amountCycleItem = new ListViewItem((parameter.LoanCycle + 1).ToString()) { Tag = parameter };                      amountCycleItem.SubItems.Add(parameter.Min.ToString());                      amountCycleItem.SubItems.Add(parameter.Max.ToString());                      listViewLoanCycles.Items.Add(amountCycleItem);                      _product.LoanAmountCycleParams.Add(parameter);                      break;                  case 2:                      var rateCycleParam = new RateCycle                      {                          CycleId = ((LoanCycle)comboBoxLoanCyclesName.SelectedItem).Id'                          CycleObjectId = cycleObjectId'                          Min = 0'                          Max = 0'                          LoanCycle = loanCycle                      };                      var interestRateCycleItem = new ListViewItem((rateCycleParam.LoanCycle + 1).ToString()) { Tag = rateCycleParam };                      interestRateCycleItem.SubItems.Add(rateCycleParam.Min.ToString());                      interestRateCycleItem.SubItems.Add(rateCycleParam.Max.ToString());                      listViewLoanCycles.Items.Add(interestRateCycleItem);                      _product.RateCycleParams.Add(rateCycleParam);                      break;                  case 3:                      var maturityCycleParam = new MaturityCycle                      {                          CycleId = ((LoanCycle)comboBoxLoanCyclesName.SelectedItem).Id'                          CycleObjectId = cycleObjectId'                          Min = 0'                          Max = 0'                          LoanCycle = loanCycle                      };                      var maturityCycleItem = new ListViewItem((maturityCycleParam.LoanCycle + 1).ToString()) { Tag = maturityCycleParam };                      maturityCycleItem.SubItems.Add(maturityCycleParam.Min.ToString());                      maturityCycleItem.SubItems.Add(maturityCycleParam.Max.ToString());                      listViewLoanCycles.Items.Add(maturityCycleItem);                      _product.MaturityCycleParams.Add(maturityCycleParam);                      break;                  default: break;              }
Magic Number,OpenCBS.GUI.Products,FrmAddLoanProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddLoanProduct.Designer.cs,buttonAddAmountCycle_Click,The following statement contains a magic number: switch (cycleObjectId)              {                  case 1:                      var parameter = new LoanAmountCycle                      {                          CycleId = ((LoanCycle)comboBoxLoanCyclesName.SelectedItem).Id'                          CycleObjectId = cycleObjectId'                          Min = 0'                          Max = 0'                          LoanCycle = loanCycle                      };                      var amountCycleItem = new ListViewItem((parameter.LoanCycle + 1).ToString()) { Tag = parameter };                      amountCycleItem.SubItems.Add(parameter.Min.ToString());                      amountCycleItem.SubItems.Add(parameter.Max.ToString());                      listViewLoanCycles.Items.Add(amountCycleItem);                      _product.LoanAmountCycleParams.Add(parameter);                      break;                  case 2:                      var rateCycleParam = new RateCycle                      {                          CycleId = ((LoanCycle)comboBoxLoanCyclesName.SelectedItem).Id'                          CycleObjectId = cycleObjectId'                          Min = 0'                          Max = 0'                          LoanCycle = loanCycle                      };                      var interestRateCycleItem = new ListViewItem((rateCycleParam.LoanCycle + 1).ToString()) { Tag = rateCycleParam };                      interestRateCycleItem.SubItems.Add(rateCycleParam.Min.ToString());                      interestRateCycleItem.SubItems.Add(rateCycleParam.Max.ToString());                      listViewLoanCycles.Items.Add(interestRateCycleItem);                      _product.RateCycleParams.Add(rateCycleParam);                      break;                  case 3:                      var maturityCycleParam = new MaturityCycle                      {                          CycleId = ((LoanCycle)comboBoxLoanCyclesName.SelectedItem).Id'                          CycleObjectId = cycleObjectId'                          Min = 0'                          Max = 0'                          LoanCycle = loanCycle                      };                      var maturityCycleItem = new ListViewItem((maturityCycleParam.LoanCycle + 1).ToString()) { Tag = maturityCycleParam };                      maturityCycleItem.SubItems.Add(maturityCycleParam.Min.ToString());                      maturityCycleItem.SubItems.Add(maturityCycleParam.Max.ToString());                      listViewLoanCycles.Items.Add(maturityCycleItem);                      _product.MaturityCycleParams.Add(maturityCycleParam);                      break;                  default: break;              }
Magic Number,OpenCBS.GUI.Products,FrmAddLoanProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddLoanProduct.Designer.cs,textBoxCycleMin_TextChanged,The following statement contains a magic number: switch (cycleObjectId)              {                  case 1:                      ((LoanAmountCycle)listViewLoanCycles.SelectedItems[0].Tag).Min = decimal.Parse(textBoxCycleMin.Text);                      listViewLoanCycles.SelectedItems[0].SubItems[1].Text = textBoxCycleMin.Text;                      break;                  case 2:                      ((RateCycle)listViewLoanCycles.SelectedItems[0].Tag).Min = decimal.Parse(textBoxCycleMin.Text);                      listViewLoanCycles.SelectedItems[0].SubItems[1].Text = textBoxCycleMin.Text;                      break;                  case 3:                      ((MaturityCycle)listViewLoanCycles.SelectedItems[0].Tag).Min = decimal.Parse(textBoxCycleMin.Text);                      listViewLoanCycles.SelectedItems[0].SubItems[1].Text = textBoxCycleMin.Text;                      break;                  default:                      break;              }
Magic Number,OpenCBS.GUI.Products,FrmAddLoanProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddLoanProduct.Designer.cs,textBoxCycleMin_TextChanged,The following statement contains a magic number: switch (cycleObjectId)              {                  case 1:                      ((LoanAmountCycle)listViewLoanCycles.SelectedItems[0].Tag).Min = decimal.Parse(textBoxCycleMin.Text);                      listViewLoanCycles.SelectedItems[0].SubItems[1].Text = textBoxCycleMin.Text;                      break;                  case 2:                      ((RateCycle)listViewLoanCycles.SelectedItems[0].Tag).Min = decimal.Parse(textBoxCycleMin.Text);                      listViewLoanCycles.SelectedItems[0].SubItems[1].Text = textBoxCycleMin.Text;                      break;                  case 3:                      ((MaturityCycle)listViewLoanCycles.SelectedItems[0].Tag).Min = decimal.Parse(textBoxCycleMin.Text);                      listViewLoanCycles.SelectedItems[0].SubItems[1].Text = textBoxCycleMin.Text;                      break;                  default:                      break;              }
Magic Number,OpenCBS.GUI.Products,FrmAddLoanProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddLoanProduct.Designer.cs,textBoxCycleMax_TextChanged,The following statement contains a magic number: switch (cycleObjectId)              {                  case 1:                      ((LoanAmountCycle)listViewLoanCycles.SelectedItems[0].Tag).Max = decimal.Parse(textBoxCycleMax.Text);                      listViewLoanCycles.SelectedItems[0].SubItems[2].Text = textBoxCycleMax.Text;                      break;                  case 2:                      ((RateCycle)listViewLoanCycles.SelectedItems[0].Tag).Max = decimal.Parse(textBoxCycleMax.Text);                      listViewLoanCycles.SelectedItems[0].SubItems[2].Text = textBoxCycleMax.Text;                      break;                  case 3:                      ((MaturityCycle)listViewLoanCycles.SelectedItems[0].Tag).Max = decimal.Parse(textBoxCycleMax.Text);                      listViewLoanCycles.SelectedItems[0].SubItems[2].Text = textBoxCycleMax.Text;                      break;                  default:                      break;              }
Magic Number,OpenCBS.GUI.Products,FrmAddLoanProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddLoanProduct.Designer.cs,textBoxCycleMax_TextChanged,The following statement contains a magic number: switch (cycleObjectId)              {                  case 1:                      ((LoanAmountCycle)listViewLoanCycles.SelectedItems[0].Tag).Max = decimal.Parse(textBoxCycleMax.Text);                      listViewLoanCycles.SelectedItems[0].SubItems[2].Text = textBoxCycleMax.Text;                      break;                  case 2:                      ((RateCycle)listViewLoanCycles.SelectedItems[0].Tag).Max = decimal.Parse(textBoxCycleMax.Text);                      listViewLoanCycles.SelectedItems[0].SubItems[2].Text = textBoxCycleMax.Text;                      break;                  case 3:                      ((MaturityCycle)listViewLoanCycles.SelectedItems[0].Tag).Max = decimal.Parse(textBoxCycleMax.Text);                      listViewLoanCycles.SelectedItems[0].SubItems[2].Text = textBoxCycleMax.Text;                      break;                  default:                      break;              }
Magic Number,OpenCBS.GUI.Products,FrmAddLoanProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddLoanProduct.Designer.cs,textBoxCycleMax_TextChanged,The following statement contains a magic number: switch (cycleObjectId)              {                  case 1:                      ((LoanAmountCycle)listViewLoanCycles.SelectedItems[0].Tag).Max = decimal.Parse(textBoxCycleMax.Text);                      listViewLoanCycles.SelectedItems[0].SubItems[2].Text = textBoxCycleMax.Text;                      break;                  case 2:                      ((RateCycle)listViewLoanCycles.SelectedItems[0].Tag).Max = decimal.Parse(textBoxCycleMax.Text);                      listViewLoanCycles.SelectedItems[0].SubItems[2].Text = textBoxCycleMax.Text;                      break;                  case 3:                      ((MaturityCycle)listViewLoanCycles.SelectedItems[0].Tag).Max = decimal.Parse(textBoxCycleMax.Text);                      listViewLoanCycles.SelectedItems[0].SubItems[2].Text = textBoxCycleMax.Text;                      break;                  default:                      break;              }
Magic Number,OpenCBS.GUI.Products,FrmAddLoanProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddLoanProduct.Designer.cs,textBoxCycleMax_TextChanged,The following statement contains a magic number: switch (cycleObjectId)              {                  case 1:                      ((LoanAmountCycle)listViewLoanCycles.SelectedItems[0].Tag).Max = decimal.Parse(textBoxCycleMax.Text);                      listViewLoanCycles.SelectedItems[0].SubItems[2].Text = textBoxCycleMax.Text;                      break;                  case 2:                      ((RateCycle)listViewLoanCycles.SelectedItems[0].Tag).Max = decimal.Parse(textBoxCycleMax.Text);                      listViewLoanCycles.SelectedItems[0].SubItems[2].Text = textBoxCycleMax.Text;                      break;                  case 3:                      ((MaturityCycle)listViewLoanCycles.SelectedItems[0].Tag).Max = decimal.Parse(textBoxCycleMax.Text);                      listViewLoanCycles.SelectedItems[0].SubItems[2].Text = textBoxCycleMax.Text;                      break;                  default:                      break;              }
Magic Number,OpenCBS.GUI.Products,FrmAddLoanProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddLoanProduct.Designer.cs,textBoxCycleMax_TextChanged,The following statement contains a magic number: switch (cycleObjectId)              {                  case 1:                      ((LoanAmountCycle)listViewLoanCycles.SelectedItems[0].Tag).Max = decimal.Parse(textBoxCycleMax.Text);                      listViewLoanCycles.SelectedItems[0].SubItems[2].Text = textBoxCycleMax.Text;                      break;                  case 2:                      ((RateCycle)listViewLoanCycles.SelectedItems[0].Tag).Max = decimal.Parse(textBoxCycleMax.Text);                      listViewLoanCycles.SelectedItems[0].SubItems[2].Text = textBoxCycleMax.Text;                      break;                  case 3:                      ((MaturityCycle)listViewLoanCycles.SelectedItems[0].Tag).Max = decimal.Parse(textBoxCycleMax.Text);                      listViewLoanCycles.SelectedItems[0].SubItems[2].Text = textBoxCycleMax.Text;                      break;                  default:                      break;              }
Magic Number,OpenCBS.GUI.Products,FrmAddLoanProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddLoanProduct.Designer.cs,buttonRemoveAmountCycles_Click,The following statement contains a magic number: switch (cycleObjectId)              {                  case 1:                      listViewLoanCycles.Items.RemoveAt(listViewLoanCycles.Items.Count - 1);                      _product.LoanAmountCycleParams.RemoveAt(_product.LoanAmountCycleParams.Count - 1);                      break;                  case 2:                      listViewLoanCycles.Items.RemoveAt(listViewLoanCycles.Items.Count - 1);                      _product.RateCycleParams.RemoveAt(_product.RateCycleParams.Count - 1);                      break;                  case 3:                      listViewLoanCycles.Items.RemoveAt(listViewLoanCycles.Items.Count - 1);                      _product.MaturityCycleParams.RemoveAt(_product.MaturityCycleParams.Count - 1);                      break;                  default: break;              }
Magic Number,OpenCBS.GUI.Products,FrmAddLoanProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddLoanProduct.Designer.cs,buttonRemoveAmountCycles_Click,The following statement contains a magic number: switch (cycleObjectId)              {                  case 1:                      listViewLoanCycles.Items.RemoveAt(listViewLoanCycles.Items.Count - 1);                      _product.LoanAmountCycleParams.RemoveAt(_product.LoanAmountCycleParams.Count - 1);                      break;                  case 2:                      listViewLoanCycles.Items.RemoveAt(listViewLoanCycles.Items.Count - 1);                      _product.RateCycleParams.RemoveAt(_product.RateCycleParams.Count - 1);                      break;                  case 3:                      listViewLoanCycles.Items.RemoveAt(listViewLoanCycles.Items.Count - 1);                      _product.MaturityCycleParams.RemoveAt(_product.MaturityCycleParams.Count - 1);                      break;                  default: break;              }
Magic Number,OpenCBS.GUI.Products,FrmAddLoanProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddLoanProduct.Designer.cs,comboBoxExoticProduct_SelectedIndexChanged,The following statement contains a magic number: groupBoxExoticProducts.Size = new Size(754' 298);
Magic Number,OpenCBS.GUI.Products,FrmAddLoanProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddLoanProduct.Designer.cs,comboBoxExoticProduct_SelectedIndexChanged,The following statement contains a magic number: groupBoxExoticProducts.Size = new Size(754' 298);
Magic Number,OpenCBS.GUI.Products,FrmAddLoanProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddLoanProduct.Designer.cs,listViewExoticInstallments_Click,The following statement contains a magic number: textBoxExoticInstallmentPrincipal.Text = (_exoticInstallment.PrincipalCoeff * 100).ToString();
Magic Number,OpenCBS.GUI.Products,FrmAddLoanProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddLoanProduct.Designer.cs,listViewExoticInstallments_Click,The following statement contains a magic number: if (_product.IsDeclining)              {                  textBoxExoticInstallmentInterest.Clear();                  textBoxExoticInstallmentInterest.Enabled = false;              }              else              {                  textBoxExoticInstallmentInterest.Enabled = true;                  textBoxExoticInstallmentInterest.Text = (_exoticInstallment.InterestCoeff * 100).ToString();              }
Magic Number,OpenCBS.GUI.Products,FrmAddLoanProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddLoanProduct.Designer.cs,textBoxExoticInstallmentPrincipal_TextChanged,The following statement contains a magic number: double? principal =                  ServicesHelper.ConvertStringToNullableDouble(textBoxExoticInstallmentPrincipal.Text' false) / 100;
Magic Number,OpenCBS.GUI.Products,FrmAddLoanProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddLoanProduct.Designer.cs,textBoxExoticInstallmentInterest_TextChanged,The following statement contains a magic number: if (!_product.IsDeclining)              {                  panelExoticProductNavigationButtons.Enabled = false;                  double? interest =                      ServicesHelper.ConvertStringToNullableDouble(textBoxExoticInstallmentInterest.Text' false) / 100;                    if (interest.HasValue)                  {                      textBoxExoticInstallmentInterest.BackColor = Color.White;                      _exoticInstallment.InterestCoeff = interest.Value;                      _InitializeListViewExoticInstallments(_exoticProduct);                  }                  else                  {                      textBoxExoticInstallmentInterest.BackColor = Color.Red;                      textBoxExoticInstallmentInterest.Focus();                  }              }              else              {                  textBoxExoticInstallmentInterest.BackColor = Color.White;                  _exoticInstallment.InterestCoeff = null;                  _InitializeListViewExoticInstallments(_exoticProduct);              }
Magic Number,OpenCBS.GUI.Products,FrmAddLoanProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddLoanProduct.Designer.cs,buttonNewExoticProduct_Click,The following statement contains a magic number: groupBoxExoticProducts.Size = new Size(754' 298);
Magic Number,OpenCBS.GUI.Products,FrmAddLoanProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddLoanProduct.Designer.cs,buttonNewExoticProduct_Click,The following statement contains a magic number: groupBoxExoticProducts.Size = new Size(754' 298);
Magic Number,OpenCBS.GUI.Products,FrmAddLoanProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddLoanProduct.Designer.cs,_CheckInterestRateType,The following statement contains a magic number: if (cmbInterestRateType.SelectedIndex == 0)              {                  _product.LoanType = OLoanTypes.All;              }              else if (cmbInterestRateType.SelectedIndex == 1)              {                  _product.LoanType = OLoanTypes.Flat;                  checkBoxUseExceptionalInstallmen.Enabled = true;              }              else if (cmbInterestRateType.SelectedIndex == 2)              {                  _product.LoanType = OLoanTypes.DecliningFixedPrincipal;                  checkBoxUseExceptionalInstallmen.Enabled = false;                  checkBoxUseExceptionalInstallmen.Checked = false;              }              else if (cmbInterestRateType.SelectedIndex == 3)              {                  _product.LoanType = OLoanTypes.DecliningFixedInstallments;                  checkBoxUseExceptionalInstallmen.Enabled = true;              }
Magic Number,OpenCBS.GUI.Products,FrmAddLoanProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddLoanProduct.Designer.cs,_CheckInterestRateType,The following statement contains a magic number: if (cmbInterestRateType.SelectedIndex == 0)              {                  _product.LoanType = OLoanTypes.All;              }              else if (cmbInterestRateType.SelectedIndex == 1)              {                  _product.LoanType = OLoanTypes.Flat;                  checkBoxUseExceptionalInstallmen.Enabled = true;              }              else if (cmbInterestRateType.SelectedIndex == 2)              {                  _product.LoanType = OLoanTypes.DecliningFixedPrincipal;                  checkBoxUseExceptionalInstallmen.Enabled = false;                  checkBoxUseExceptionalInstallmen.Checked = false;              }              else if (cmbInterestRateType.SelectedIndex == 3)              {                  _product.LoanType = OLoanTypes.DecliningFixedInstallments;                  checkBoxUseExceptionalInstallmen.Enabled = true;              }
Magic Number,OpenCBS.GUI.Products,FrmAddLoanProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddLoanProduct.Designer.cs,_CheckExoticProduct,The following statement contains a magic number: if (checkBoxUseExceptionalInstallmen.Checked)              {                  groupBoxExoticProducts.Enabled = true;                  groupBoxExoticProducts.Visible = true;                  groupBoxExoticProducts.Size = new Size(754' 298);                  groupBoxNumberOfInstallments.Enabled = false;                  _useExoticProduct = true;              }              else              {                  _useExoticProduct = false;                  groupBoxExoticProducts.Enabled = false;                  groupBoxExoticProducts.Visible = false;                  listViewExoticInstallments.Items.Clear();                  panelExoticInstallment.Visible = false;                  groupBoxNumberOfInstallments.Enabled = true;                    _exoticProduct = null;                  _product.ExoticProduct = null;                  comboBoxLoanCyclesName.Text = MultiLanguageStrings.GetString(Ressource.FrmAddLoanProduct' "messageSelectExotic.Text");              }
Magic Number,OpenCBS.GUI.Products,FrmAddLoanProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddLoanProduct.Designer.cs,_CheckExoticProduct,The following statement contains a magic number: if (checkBoxUseExceptionalInstallmen.Checked)              {                  groupBoxExoticProducts.Enabled = true;                  groupBoxExoticProducts.Visible = true;                  groupBoxExoticProducts.Size = new Size(754' 298);                  groupBoxNumberOfInstallments.Enabled = false;                  _useExoticProduct = true;              }              else              {                  _useExoticProduct = false;                  groupBoxExoticProducts.Enabled = false;                  groupBoxExoticProducts.Visible = false;                  listViewExoticInstallments.Items.Clear();                  panelExoticInstallment.Visible = false;                  groupBoxNumberOfInstallments.Enabled = true;                    _exoticProduct = null;                  _product.ExoticProduct = null;                  comboBoxLoanCyclesName.Text = MultiLanguageStrings.GetString(Ressource.FrmAddLoanProduct' "messageSelectExotic.Text");              }
Magic Number,OpenCBS.GUI.Products,FrmAddLoanProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddLoanProduct.Designer.cs,textBoxNumOfDrawings_KeyPress,The following statement contains a magic number: if ((keyCode >= 48 && keyCode <= 57) || (keyCode == 8) || (Char.IsControl(e.KeyChar) && e.KeyChar                  != ((char)Keys.V | (char)Keys.ControlKey)) || (Char.IsControl(e.KeyChar) && e.KeyChar !=                  ((char)Keys.C | (char)Keys.ControlKey)) || (e.KeyChar.ToString() == NumberFormatInfo.CurrentInfo.NumberDecimalSeparator))              {                  e.Handled = false;              }              else                  e.Handled = true;
Magic Number,OpenCBS.GUI.Products,FrmAddLoanProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddLoanProduct.Designer.cs,textBoxNumOfDrawings_KeyPress,The following statement contains a magic number: if ((keyCode >= 48 && keyCode <= 57) || (keyCode == 8) || (Char.IsControl(e.KeyChar) && e.KeyChar                  != ((char)Keys.V | (char)Keys.ControlKey)) || (Char.IsControl(e.KeyChar) && e.KeyChar !=                  ((char)Keys.C | (char)Keys.ControlKey)) || (e.KeyChar.ToString() == NumberFormatInfo.CurrentInfo.NumberDecimalSeparator))              {                  e.Handled = false;              }              else                  e.Handled = true;
Magic Number,OpenCBS.GUI.Products,FrmAddLoanProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddLoanProduct.Designer.cs,textBoxNumOfDrawings_KeyPress,The following statement contains a magic number: if ((keyCode >= 48 && keyCode <= 57) || (keyCode == 8) || (Char.IsControl(e.KeyChar) && e.KeyChar                  != ((char)Keys.V | (char)Keys.ControlKey)) || (Char.IsControl(e.KeyChar) && e.KeyChar !=                  ((char)Keys.C | (char)Keys.ControlKey)) || (e.KeyChar.ToString() == NumberFormatInfo.CurrentInfo.NumberDecimalSeparator))              {                  e.Handled = false;              }              else                  e.Handled = true;
Magic Number,OpenCBS.GUI.Products,FrmAddLoanProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddLoanProduct.Designer.cs,clientTypeGroupCheckBox_CheckedChanged,The following statement contains a magic number: if (recievedCheckBox.Checked)              {                  AssignClientTypeToProduct(sender);                  _checkBoxCounter++;                  if (_checkBoxCounter == 4)                      clientTypeAllCheckBox.Checked = true;              }              else              {                  recievedCheckBox.Checked = false;                  AssignClientTypeToProduct(sender);                  _checkBoxCounter--;              }
Magic Number,OpenCBS.GUI.Products,FrmAddLoanProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddLoanProduct.Designer.cs,comboBoxCycleParams_SelectedIndexChanged,The following statement contains a magic number: switch (((CycleObject)cbxCycleObjects.SelectedItem).Id)              {                  case 1:                      FillListViewLoanCycle(_product.LoanAmountCycleParams);                      break;                  case 2:                      FillListViewLoanCycle(_product.RateCycleParams);                      break;                  case 3:                      FillListViewLoanCycle(_product.MaturityCycleParams);                      break;              }
Magic Number,OpenCBS.GUI.Products,FrmAddLoanProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddLoanProduct.Designer.cs,comboBoxCycleParams_SelectedIndexChanged,The following statement contains a magic number: switch (((CycleObject)cbxCycleObjects.SelectedItem).Id)              {                  case 1:                      FillListViewLoanCycle(_product.LoanAmountCycleParams);                      break;                  case 2:                      FillListViewLoanCycle(_product.RateCycleParams);                      break;                  case 3:                      FillListViewLoanCycle(_product.MaturityCycleParams);                      break;              }
Magic Number,OpenCBS.GUI.Products,FrmAddLoanProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddLoanProduct.Designer.cs,listViewLoanCycles_Click,The following statement contains a magic number: try              {                  buttonRemoveAmountCycles.Enabled = false;                  if (cbxCycleObjects.SelectedItem == null) return;                  buttonRemoveAmountCycles.Enabled = true;                  textBoxCycleMin.TextChanged -= textBoxCycleMin_TextChanged;                  textBoxCycleMax.TextChanged -= textBoxCycleMax_TextChanged;                  switch (((CycleObject)cbxCycleObjects.SelectedItem).Id)                  {                      case 1:                          _editedParam = (LoanAmountCycle)listViewLoanCycles.SelectedItems[0].Tag;                          textBoxCycleMin.Text = _editedParam.Min.Value.ToString("0");                          textBoxCycleMax.Text = _editedParam.Max.Value.ToString("0");                          textBoxCycleMin.Enabled = true;                          textBoxCycleMax.Enabled = true;                          break;                      case 2:                          _editedParam = (RateCycle)listViewLoanCycles.SelectedItems[0].Tag;                          textBoxCycleMin.Text = _editedParam.Min.Value.ToString("0.00");                          textBoxCycleMax.Text = _editedParam.Max.Value.ToString("0.00");                          textBoxCycleMin.Enabled = true;                          textBoxCycleMax.Enabled = true;                          break;                      case 3:                          _editedParam = (MaturityCycle)listViewLoanCycles.SelectedItems[0].Tag;                          textBoxCycleMin.Text = _editedParam.Min.Value.ToString("0");                          textBoxCycleMax.Text = _editedParam.Max.Value.ToString("0");                          textBoxCycleMin.Enabled = true;                          textBoxCycleMax.Enabled = true;                          break;                      default: break;                  }              }              catch { }              finally              {                  textBoxCycleMin.TextChanged += textBoxCycleMin_TextChanged;                  textBoxCycleMax.TextChanged += textBoxCycleMax_TextChanged;              }
Magic Number,OpenCBS.GUI.Products,FrmAddLoanProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddLoanProduct.Designer.cs,listViewLoanCycles_Click,The following statement contains a magic number: try              {                  buttonRemoveAmountCycles.Enabled = false;                  if (cbxCycleObjects.SelectedItem == null) return;                  buttonRemoveAmountCycles.Enabled = true;                  textBoxCycleMin.TextChanged -= textBoxCycleMin_TextChanged;                  textBoxCycleMax.TextChanged -= textBoxCycleMax_TextChanged;                  switch (((CycleObject)cbxCycleObjects.SelectedItem).Id)                  {                      case 1:                          _editedParam = (LoanAmountCycle)listViewLoanCycles.SelectedItems[0].Tag;                          textBoxCycleMin.Text = _editedParam.Min.Value.ToString("0");                          textBoxCycleMax.Text = _editedParam.Max.Value.ToString("0");                          textBoxCycleMin.Enabled = true;                          textBoxCycleMax.Enabled = true;                          break;                      case 2:                          _editedParam = (RateCycle)listViewLoanCycles.SelectedItems[0].Tag;                          textBoxCycleMin.Text = _editedParam.Min.Value.ToString("0.00");                          textBoxCycleMax.Text = _editedParam.Max.Value.ToString("0.00");                          textBoxCycleMin.Enabled = true;                          textBoxCycleMax.Enabled = true;                          break;                      case 3:                          _editedParam = (MaturityCycle)listViewLoanCycles.SelectedItems[0].Tag;                          textBoxCycleMin.Text = _editedParam.Min.Value.ToString("0");                          textBoxCycleMax.Text = _editedParam.Max.Value.ToString("0");                          textBoxCycleMin.Enabled = true;                          textBoxCycleMax.Enabled = true;                          break;                      default: break;                  }              }              catch { }              finally              {                  textBoxCycleMin.TextChanged += textBoxCycleMin_TextChanged;                  textBoxCycleMax.TextChanged += textBoxCycleMax_TextChanged;              }
Magic Number,OpenCBS.GUI.Products,FrmAddLoanProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddLoanProduct.Designer.cs,comboBoxLoanCyclesName_SelectedIndexChanged,The following statement contains a magic number: foreach (RateCycle cycle in _product.RateCycleParams)              {                  cycle.Min = cycle.Min * 100;                  cycle.Max = cycle.Max * 100;              }
Magic Number,OpenCBS.GUI.Products,FrmAddLoanProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddLoanProduct.Designer.cs,comboBoxLoanCyclesName_SelectedIndexChanged,The following statement contains a magic number: foreach (RateCycle cycle in _product.RateCycleParams)              {                  cycle.Min = cycle.Min * 100;                  cycle.Max = cycle.Max * 100;              }
Magic Number,OpenCBS.GUI.Products,FrmAddLoanProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddLoanProduct.Designer.cs,textBoxGracePeriodMin_KeyPress,The following statement contains a magic number: if (                  (keyCode >= 48 && keyCode <= 57) ||                   (keyCode == 8) ||                   (Char.IsControl(e.KeyChar) && e.KeyChar != ((char)Keys.V | (char)Keys.ControlKey))                   ||                   (Char.IsControl(e.KeyChar) && e.KeyChar != ((char)Keys.C | (char)Keys.ControlKey))                   ||                   (e.KeyChar.ToString() == NumberFormatInfo.CurrentInfo.NumberDecimalSeparator))              {                  e.Handled = false;              }              else                  e.Handled = true;
Magic Number,OpenCBS.GUI.Products,FrmAddLoanProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddLoanProduct.Designer.cs,textBoxGracePeriodMin_KeyPress,The following statement contains a magic number: if (                  (keyCode >= 48 && keyCode <= 57) ||                   (keyCode == 8) ||                   (Char.IsControl(e.KeyChar) && e.KeyChar != ((char)Keys.V | (char)Keys.ControlKey))                   ||                   (Char.IsControl(e.KeyChar) && e.KeyChar != ((char)Keys.C | (char)Keys.ControlKey))                   ||                   (e.KeyChar.ToString() == NumberFormatInfo.CurrentInfo.NumberDecimalSeparator))              {                  e.Handled = false;              }              else                  e.Handled = true;
Magic Number,OpenCBS.GUI.Products,FrmAddLoanProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddLoanProduct.Designer.cs,textBoxGracePeriodMin_KeyPress,The following statement contains a magic number: if (                  (keyCode >= 48 && keyCode <= 57) ||                   (keyCode == 8) ||                   (Char.IsControl(e.KeyChar) && e.KeyChar != ((char)Keys.V | (char)Keys.ControlKey))                   ||                   (Char.IsControl(e.KeyChar) && e.KeyChar != ((char)Keys.C | (char)Keys.ControlKey))                   ||                   (e.KeyChar.ToString() == NumberFormatInfo.CurrentInfo.NumberDecimalSeparator))              {                  e.Handled = false;              }              else                  e.Handled = true;
Magic Number,OpenCBS.GUI.Products,FrmAddLoanProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddLoanProduct.Designer.cs,interestRateTextChanged,The following statement contains a magic number: if (cmbInterestRateType.SelectedIndex != 3)              {                  groupBoxInterestRate.Text = MultiLanguageStrings.GetString(Ressource.FrmAddLoanProduct'                                                                             "grBoxIntRatePer.Text");              }              else              {                  groupBoxInterestRate.Text = MultiLanguageStrings.GetString(Ressource.FrmAddLoanProduct'                                                                              "grBoxIntRateYear.Text");              }
Magic Number,OpenCBS.GUI.Products,FrmAddLoanProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddLoanProduct.Designer.cs,cmbInterestScheme_SelectedValueChanged,The following statement contains a magic number: switch (cmbInterestScheme.SelectedIndex + 1)              {                  case 1:                      _product.InterestScheme = OInterestScheme.ActualActual; break;                  case 2:                      _product.InterestScheme = OInterestScheme.Actual360; break;                  case 3:                      _product.InterestScheme = OInterestScheme.ThirtyActual; break;                  case 4:                      _product.InterestScheme = OInterestScheme.Thirty360; break;              }
Magic Number,OpenCBS.GUI.Products,FrmAddLoanProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddLoanProduct.Designer.cs,cmbInterestScheme_SelectedValueChanged,The following statement contains a magic number: switch (cmbInterestScheme.SelectedIndex + 1)              {                  case 1:                      _product.InterestScheme = OInterestScheme.ActualActual; break;                  case 2:                      _product.InterestScheme = OInterestScheme.Actual360; break;                  case 3:                      _product.InterestScheme = OInterestScheme.ThirtyActual; break;                  case 4:                      _product.InterestScheme = OInterestScheme.Thirty360; break;              }
Magic Number,OpenCBS.GUI.Products,FrmAddLoanProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddLoanProduct.Designer.cs,cmbInterestScheme_SelectedValueChanged,The following statement contains a magic number: switch (cmbInterestScheme.SelectedIndex + 1)              {                  case 1:                      _product.InterestScheme = OInterestScheme.ActualActual; break;                  case 2:                      _product.InterestScheme = OInterestScheme.Actual360; break;                  case 3:                      _product.InterestScheme = OInterestScheme.ThirtyActual; break;                  case 4:                      _product.InterestScheme = OInterestScheme.Thirty360; break;              }
Magic Number,OpenCBS.GUI.Products,FrmAddLoanProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddLoanProduct.Designer.cs,cmbInterestRateType_SelectedIndexChanged,The following statement contains a magic number: switch (cmbInterestRateType.SelectedIndex)              {                  case 0:                      _product.LoanType = OLoanTypes.Flat;                      break;                  case 1:                      _product.LoanType = OLoanTypes.DecliningFixedPrincipal;                      break;                  case 2:                      _product.LoanType = OLoanTypes.DecliningFixedInstallments;                      break;                  default:                      _product.LoanType = OLoanTypes.CustomLoanType;                      _product.ScriptName = (string) cmbInterestRateType.SelectedItem;                      break;              }
Magic Number,OpenCBS.GUI.Projets,SearchProjectForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Search\SearchProjectForm.cs,listViewClient_ColumnClick,The following statement contains a magic number: if (listViewClient.Items.Count > 0)                  listViewClient.Columns[Sorter.ByColumn].ImageIndex = listViewClient.Sorting == SortOrder.Ascending ? 2 : 3;
Magic Number,OpenCBS.GUI.Projets,SearchProjectForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Search\SearchProjectForm.cs,listViewClient_ColumnClick,The following statement contains a magic number: if (listViewClient.Items.Count > 0)                  listViewClient.Columns[Sorter.ByColumn].ImageIndex = listViewClient.Sorting == SortOrder.Ascending ? 2 : 3;
Magic Number,OpenCBS.GUI.Projets,SearchProjectForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Search\SearchProjectForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Controls.Add(this.groupBoxButtonBottom' 0' 3);
Magic Number,OpenCBS.GUI.Projets,SearchProjectForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Search\SearchProjectForm.cs,InitializeComponent,The following statement contains a magic number: this.tableLayoutPanel1.Controls.Add(this.listViewClient' 0' 2);
Magic Number,OpenCBS.GUI.Projets,SearchProjectForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Search\SearchProjectForm.cs,InitializeComponent,The following statement contains a magic number: this.textBoxCurrentlyPage.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56)))));
Magic Number,OpenCBS.GUI.Projets,SearchProjectForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Search\SearchProjectForm.cs,InitializeComponent,The following statement contains a magic number: this.textBoxCurrentlyPage.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56)))));
Magic Number,OpenCBS.GUI.Projets,SearchProjectForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Search\SearchProjectForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonPreview.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56)))));
Magic Number,OpenCBS.GUI.Projets,SearchProjectForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Search\SearchProjectForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonPreview.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56)))));
Magic Number,OpenCBS.GUI.Projets,SearchProjectForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Search\SearchProjectForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonNext.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56)))));
Magic Number,OpenCBS.GUI.Projets,SearchProjectForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Search\SearchProjectForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonNext.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56)))));
Magic Number,OpenCBS.GUI.Projets,SearchProjectForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Search\SearchProjectForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonCancel.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56)))));
Magic Number,OpenCBS.GUI.Projets,SearchProjectForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Search\SearchProjectForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonCancel.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56)))));
Magic Number,OpenCBS.GUI.Projets,SearchProjectForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Search\SearchProjectForm.cs,InitializeComponent,The following statement contains a magic number: this.imageListSort.Images.SetKeyName(2' "theme1.1_bouton_down_small.png");
Magic Number,OpenCBS.GUI.Projets,SearchProjectForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Search\SearchProjectForm.cs,InitializeComponent,The following statement contains a magic number: this.imageListSort.Images.SetKeyName(3' "theme1.1_bouton_up_small.png");
Magic Number,OpenCBS.GUI.Projets,SearchProjectForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Search\SearchProjectForm.cs,InitializeComponent,The following statement contains a magic number: this.btnSearch.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56)))));
Magic Number,OpenCBS.GUI.Projets,SearchProjectForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Search\SearchProjectForm.cs,InitializeComponent,The following statement contains a magic number: this.btnSearch.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56)))));
Magic Number,OpenCBS.GUI.Projets,SearchProjectForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Search\SearchProjectForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonPrintReport.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56)))));
Magic Number,OpenCBS.GUI.Projets,SearchProjectForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Search\SearchProjectForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonPrintReport.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56)))));
Magic Number,OpenCBS.GUI.Projets,SearchProjectForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Search\SearchProjectForm.cs,InitializeComponent,The following statement contains a magic number: this.textBoxQuery.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56)))));
Magic Number,OpenCBS.GUI.Projets,SearchProjectForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Search\SearchProjectForm.cs,InitializeComponent,The following statement contains a magic number: this.textBoxQuery.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56)))));
Magic Number,OpenCBS.GUI.Projets,SearchProjectForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Search\SearchProjectForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonSearch.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56)))));
Magic Number,OpenCBS.GUI.Projets,SearchProjectForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Search\SearchProjectForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonSearch.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56)))));
Magic Number,OpenCBS.GUI.Projets,SearchProjectForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Search\SearchProjectForm.cs,InitializeComponent,The following statement contains a magic number: this.labelTitleResult.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56)))));
Magic Number,OpenCBS.GUI.Projets,SearchProjectForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Search\SearchProjectForm.cs,InitializeComponent,The following statement contains a magic number: this.labelTitleResult.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(0))))' ((int)(((byte)(88))))' ((int)(((byte)(56)))));
Missing Default,OpenCBS.GUI,FrmInstallmentTypes,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Configuration\FrmInstallmentType.cs,ModifyInstallmentTypes,The following switch statement is missing a default case: switch (action)                  {                      case Action.Add:                          ServicesProvider.GetInstance().GetProductServices().AddInstallmentType(installmentType);                          break;                      case Action.Edit:                          ServicesProvider.GetInstance().GetProductServices().EditInstallmentType(installmentType);                          break;                      case Action.Delete:                          ServicesProvider.GetInstance().GetProductServices().DeleteInstallmentType(installmentType);                          break;                  }
Missing Default,OpenCBS.GUI,MainView,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\MainView.Designer.cs,DisplayFastChoiceForm,The following switch statement is missing a default case: switch (role.DefaultStartPage)              {                  case OStartPages.StartPages.START_PAGE:                      _applicationController.Execute(new ShowStartPageCommandData());                      break;                  case OStartPages.StartPages.DASHBOARD_PAGE:                      _applicationController.Execute(new ShowDashboardCommandData());                      break;                  case OStartPages.StartPages.ALERTS_PAGE:                      _applicationController.Execute(new ShowAlertsCommandData());                      break;              }
Missing Default,OpenCBS.GUI,MainView,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\MainView.Designer.cs,InitializeSavingContractForm,The following switch statement is missing a default case: switch (client.Type)              {                  case OClientTypes.Person:                      {                          var personForm = new ClientForm((Person)client' this' _applicationController)                          {                              MdiParent = this'                              Text = string.Format("{0} [{1}]"' MultiLanguageStrings.GetString(                              Ressource.ClientForm' "Person.Text")'                              ((Person)client).Name)                          };                          personForm.DisplaySaving(savingId' client);                          personForm.Show();                          break;                      }                  case OClientTypes.Group:                      {                          var personForm = new ClientForm((Group)client' this' _applicationController)                          {                              MdiParent = this'                              Text = string.Format("{0} [{1}]"' MultiLanguageStrings.GetString(Ressource.ClientForm' "Group.Text")' ((Group)client).Name)                          };                          personForm.DisplaySaving(savingId' client);                          personForm.Show();                          break;                      }                  case OClientTypes.Village:                      {                          var frm = new NonSolidaryGroupForm((Village)client' _applicationController) { MdiParent = this };                          frm.Show();                          break;                      }                  case OClientTypes.Corporate:                      {                          var corporateForm = new ClientForm((Corporate)client' this' _applicationController) { MdiParent = this };                          corporateForm.DisplaySaving(savingId' client);                          corporateForm.Show();                          break;                      }              }
Missing Default,OpenCBS.GUI.Accounting,FrmAccountingRules,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\FrmAccountingRules.cs,GetListViewItem,The following switch statement is missing a default case: switch (rule.ProductType)              {                  case OProductTypes.All:                      item.SubItems.Add(MultiLanguageStrings.GetString(Ressource.AccountingRule' @"All.Text")); break;                  case OProductTypes.Loan:                      item.SubItems.Add(rule.LoanProduct != null                                            ? rule.LoanProduct.Name                                            : MultiLanguageStrings.GetString(Ressource.AccountingRule' @"All.Text"));                      break;                  case OProductTypes.Saving:                      item.SubItems.Add(rule.SavingProduct != null                                            ? rule.SavingProduct.Name                                            : MultiLanguageStrings.GetString(Ressource.AccountingRule' @"All.Text"));                      break;              }
Missing Default,OpenCBS.GUI.Accounting,ExportBookingsForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\ExportBookingsForm.cs,BwExportToFile_DoWork,The following switch statement is missing a default case: switch (curRow.ItemArray[1].ToString())                          {                              case "L": { idSetLoan += "'" + curRow.ItemArray[0]; break; }                              case "S": { idSetSaving += "'" + curRow.ItemArray[0]; break; }                              case "M": { idSetManual += "'" + curRow.ItemArray[0]; break; }                          }
Missing Default,OpenCBS.GUI.Accounting,ExportBookingsForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\ExportBookingsForm.cs,BwExportToFile_DoWork,The following switch statement is missing a default case: switch (idRow.ItemArray[1].ToString())                      {                          case "L": { idSetLoan += "'" + idRow.ItemArray[0]; break; }                          case "S": { idSetSaving += "'" + idRow.ItemArray[0]; break; }                          case "M": { idSetManual += "'" + idRow.ItemArray[0]; break; }                      }
Missing Default,OpenCBS.GUI.Accounting,ExportBookingsForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\ExportBookingsForm.cs,cmbEncoding_SelectedIndexChanged,The following switch statement is missing a default case: switch (cmbEncoding.SelectedIndex)              {                  case 0: { _encoding = System.Text.Encoding.Unicode; break;}                       case 1: { _encoding = System.Text.Encoding.GetEncoding(1250); break;}                       case 2: { _encoding = System.Text.Encoding.GetEncoding(1251); break;}                   }
Missing Default,OpenCBS.GUI.Accounting,ExportBookingsForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\ExportBookingsForm.cs,clbxFields_ItemCheck,The following switch statement is missing a default case: switch (e.NewValue)                      {                          case CheckState.Unchecked:                              column.Width = 0;                              break;                          case CheckState.Checked:                              column.Width = 120;                              break;                      }
Missing Default,OpenCBS.GUI.Accounting,FrmAddContractAccountingRule,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\FrmAddContractAccountingRule.cs,SetAccountingRule,The following switch statement is missing a default case: switch (rule.ProductType)              {                  case OProductTypes.All: cmbProduct.SelectedIndex = 0; break;                  case OProductTypes.Loan:                      if (rule.LoanProduct != null)                      {                          var selectedItem = cmbProduct.Items.OfType<LoanProduct>().FirstOrDefault(item => item.Id == rule.LoanProduct.Id);                          cmbProduct.SelectedItem = selectedItem;                      }                      else                          cmbProduct.SelectedIndex = 0;                      break;                    case OProductTypes.Saving:                      if (rule.SavingProduct != null)                      {                          var selectedItem = cmbProduct.Items.OfType<ISavingProduct>().FirstOrDefault(item => item.Id == rule.SavingProduct.Id);                          cmbProduct.SelectedItem = selectedItem;                      }                      else                          cmbProduct.SelectedIndex = 0;                      break;              }
Missing Default,OpenCBS.GUI.Accounting,FrmAddContractAccountingRule,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Accounting\FrmAddContractAccountingRule.cs,GetAccountingRule,The following switch statement is missing a default case: switch (rule.ProductType)              {                  case OProductTypes.Loan:                      if (cmbProduct.SelectedItem is LoanProduct)                          rule.LoanProduct = cmbProduct.SelectedItem as LoanProduct;                      break;                    case OProductTypes.Saving:                      if (cmbProduct.SelectedItem is ISavingProduct)                          rule.SavingProduct = cmbProduct.SelectedItem as ISavingProduct;                      break;              }
Missing Default,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,DisplaySaving,The following switch statement is missing a default case: switch (_saving.Status)              {                  case OSavingsStatus.Pending:                      {                          groupBoxSaving.ForeColor = Color.FromArgb(246' 137' 56);                          pnlSavingsButtons.Enabled = false;                          buttonFirstDeposit.Visible = true;                          buttonCloseSaving.Visible = false;                          buttonReopenSaving.Visible = false;                          break;                      }                  case OSavingsStatus.Active:                      {                          groupBoxSaving.ForeColor = Color.FromArgb(61' 153' 57);                          pnlSavingsButtons.Enabled = true;                          buttonFirstDeposit.Visible = false;                          buttonCloseSaving.Visible = true;                          buttonReopenSaving.Visible = false;                          break;                      }                  case OSavingsStatus.Closed:                      {                          groupBoxSaving.ForeColor = Color.Red;                          pnlSavingsButtons.Enabled = true;                          buttonSavingsOperations.Enabled = false;                          buttonFirstDeposit.Visible = false;                          buttonCloseSaving.Visible = false;                          buttonReopenSaving.Visible = true;                          break;                      }              }
Missing Default,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,InitScheduleType,The following switch statement is missing a default case: switch (loanType)              {                  case OLoanTypes.All:                      _scheduleTypeComboBox.SelectedIndex = 0;                      break;                    case OLoanTypes.Flat:                      _scheduleTypeComboBox.SelectedIndex = 0;                      break;                    case OLoanTypes.DecliningFixedPrincipal:                      _scheduleTypeComboBox.SelectedIndex = 1;                      break;                    case OLoanTypes.DecliningFixedInstallments:                      _scheduleTypeComboBox.SelectedIndex = 2;                      break;                    case OLoanTypes.CustomLoanType:                      _scheduleTypeComboBox.Text = scriptName;                      break;              }
Missing Default,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,SaveContract,The following switch statement is missing a default case: switch (_oClientType)                  {                      case OClientTypes.Corporate:                          client = _corporateUserControl.Corporate;                          break;                        case OClientTypes.Person:                          client = _personUserControl.Person;                          break;                        case OClientTypes.Group:                          client = _groupUserControl.Group;                          break;                  }
Missing Default,OpenCBS.GUI.Clients,ClientForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\ClientForm.Designer.cs,SaveContract,The following switch statement is missing a default case: switch (_oClientType)                  {                      case OClientTypes.Corporate:                          _corporateUserControl.Corporate = ServicesProvider.GetInstance().GetClientServices().FindTiers(client.Id' _oClientType) as Corporate;                          break;                        case OClientTypes.Person:                          _personUserControl.Person = ServicesProvider.GetInstance().GetClientServices().FindTiers(client.Id' _oClientType) as Person;                          break;                        case OClientTypes.Group:                          _groupUserControl.Group = ServicesProvider.GetInstance().GetClientServices().FindTiers(client.Id' _oClientType) as Group;                          break;                  }
Missing Default,OpenCBS.GUI.Clients,NonSolidaryGroupForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Clients\NonSolidaryGroupForm.cs,GetDayOfWeek,The following switch statement is missing a default case: switch (cmbWeekDay.SelectedIndex)              {                  case 0: dayOfWeek = DayOfWeek.Sunday;                      break;                  case 1: dayOfWeek = DayOfWeek.Monday;                      break;                  case 2: dayOfWeek = DayOfWeek.Tuesday;                      break;                  case 3: dayOfWeek = DayOfWeek.Wednesday;                      break;                  case 4: dayOfWeek = DayOfWeek.Thursday;                      break;                  case 5: dayOfWeek = DayOfWeek.Friday;                      break;                  case 6: dayOfWeek = DayOfWeek.Saturday;                      break;              }
Missing Default,OpenCBS.GUI.Contracts,FastRepaymentForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\FastRepaymentForm.cs,CalculatePrincipalAndInterest,The following switch statement is missing a default case: switch (paymentOption)                  {                      case 1:                          keepIntialSchedule = true;                          payProportion = false;                          break;                      case 2:                          keepIntialSchedule = false;                          payProportion = false;                          break;                      case 3:                          keepIntialSchedule = false;                          payProportion = true;                          break;                  }
Missing Default,OpenCBS.GUI.Contracts,SavingsOperationForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\SavingsOperationForm.cs,Initialize,The following switch statement is missing a default case: switch (_bookingDirection)              {                  case OSavingsOperation.Credit:                      {                          Text = MultiLanguageStrings.GetString(Ressource.FrmAddSavingEvent' "Deposit.Text");                          Name = MultiLanguageStrings.GetString(Ressource.FrmAddSavingEvent' "Deposit.Text");                          btnSave.Text = MultiLanguageStrings.GetString(Ressource.FrmAddSavingEvent' "Deposit.Text");                          tbxSavingCode.Text = MultiLanguageStrings.GetString(Ressource.FrmAddSavingEvent' "Deposit.Text");                          plTransfer.Visible = false;                          pnlSavingPending.Visible = true;                          rbxDebit.Visible = false;                          rbxCredit.Visible = false;                          cbBookings.Visible = false;                          break;                      }                  case OSavingsOperation.Debit:                      {                          Text = MultiLanguageStrings.GetString(Ressource.FrmAddSavingEvent' "Withdrawal.Text");                          Name = MultiLanguageStrings.GetString(Ressource.FrmAddSavingEvent' "Withdrawal.Text");                          btnSave.Text = MultiLanguageStrings.GetString(Ressource.FrmAddSavingEvent' "Withdrawal.Text");                          tbxSavingCode.Text = MultiLanguageStrings.GetString(Ressource.FrmAddSavingEvent' "Withdrawal.Text");                          plTransfer.Visible = false;                          pnlSavingPending.Visible = true;                          //cbSavingsMethod.Visible = true;                          rbxDebit.Visible = false;                          rbxCredit.Visible = false;                          cbBookings.Visible = false;                          lblPaymentMethod.Visible = true;                          break;                      }                  case OSavingsOperation.Transfer:                      {                          Text = MultiLanguageStrings.GetString(Ressource.FrmAddSavingEvent' "Transfer.Text");                          Name = MultiLanguageStrings.GetString(Ressource.FrmAddSavingEvent' "Transfer.Text");                          btnSave.Text = MultiLanguageStrings.GetString(Ressource.FrmAddSavingEvent' "Transfer.Text");                          tbxSavingCode.Text = MultiLanguageStrings.GetString(Ressource.FrmAddSavingEvent' "Transfer.Text");                          plTransfer.Visible = true;                          tbTargetAccount.Visible = true;                          btnSearchContract.Visible = true;                          pnlSavingPending.Visible = false;                          lbTargetSavings.Visible = true;                          lblClientName.Visible = true;                          rbxDebit.Visible = false;                          rbxCredit.Visible = false;                          cbBookings.Visible = false;                          cbSavingsMethod.Visible = false;                          break;                      }                  case OSavingsOperation.SpecialOperation:                      {                          Text = MultiLanguageStrings.GetString(Ressource.FrmAddSavingEvent' "SpecialOperation.Text");                          Name = MultiLanguageStrings.GetString(Ressource.FrmAddSavingEvent' "SpecialOperation.Text");                          btnSave.Text = MultiLanguageStrings.GetString(Ressource.FrmAddSavingEvent' "ComfirmOperation.Text");                          tbxSavingCode.Text = MultiLanguageStrings.GetString(Ressource.FrmAddSavingEvent' "SpecialOperation.Text");                          lblPaymentMethod.Text = MultiLanguageStrings.GetString(Ressource.FrmAddSavingEvent' "StandardBooking.Text");                          plTransfer.Visible = true;                          pnlSavingPending.Visible = true;                          cbxPending.Visible = false;                          cbSavingsMethod.Visible = false;                          lblAmountFeesMinMax.Visible = false;                          lbAmountMinMax.Visible = false;                          rbxDebit.Visible = true;                          rbxCredit.Visible = true;                          btnSearchContract.Visible = false;                          tbTargetAccount.Visible = false;                          lblClientName.Visible = false;                          updAmountFees.Visible = false;                          lblSavingCurrencyFees.Visible = false;                          lblFees.Visible = false;                          lblTotalAmount.Visible = false;                          nudTotalAmount.Visible = false;                          lblTotalSavingCurrency.Visible = false;                          lbAmountMinMaxCurrencyPivot.Visible = false;                            cbBookings.Items.Clear();                          foreach (Booking booking in ServicesProvider.GetInstance().GetStandardBookingServices().SelectAllStandardBookings())                          {                              cbBookings.Items.Add(booking);                          }                          cbBookings.Visible = true;                            _feesMin = 0;                          _feesMax = 0;                          _rateFees = 0;                            break;                      }              }
Missing Default,OpenCBS.GUI.Contracts,SavingsOperationForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\SavingsOperationForm.cs,Initialize,The following switch statement is missing a default case: switch (_bookingDirection)              {                  case OSavingsOperation.Credit:                      {                          //switch (cbSavingsMethod.SelectedValue.ToString())                          //{                          //    case "Cheque":                          //        _flatFees = ((SavingBookContract)_saving).ChequeDepositFees;                          //        break;                          //    default:                          _flatFees = ((SavingBookContract)_saving).DepositFees;                          //  break;                          //}                          break;                      }                  case OSavingsOperation.Debit:                      {                          if (((SavingBookContract)_saving).FlatWithdrawFees.HasValue)                              _flatFees = ((SavingBookContract)_saving).FlatWithdrawFees;                          else                              _rateFees = ((SavingBookContract)_saving).RateWithdrawFees;                          break;                      }                  case OSavingsOperation.Transfer:                      {                          if (((SavingBookContract)_saving).FlatTransferFees.HasValue)                              _flatFees = ((SavingBookContract)_saving).FlatTransferFees;                          else                              _rateFees = ((SavingBookContract)_saving).RateTransferFees;                          break;                      }              }
Missing Default,OpenCBS.GUI.Contracts,SavingsOperationForm,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Contracts\SavingsOperationForm.cs,BSaveClick,The following switch statement is missing a default case: switch (_bookingDirection)                  {                      case OSavingsOperation.Credit:                          {                              OSavingsMethods savingsMethod =                                  (OSavingsMethods)                                      Enum.Parse(typeof(OSavingsMethods)' "Cash");                              var paymentMethod = (PaymentMethod)cbSavingsMethod.SelectedItem;                              if (_saving is SavingBookContract)                              {                                  if (savingsMethod == OSavingsMethods.Cheque)                                      ((SavingBookContract)_saving).ChequeDepositFees = updAmountFees.Value;                                  else ((SavingBookContract)_saving).DepositFees = updAmountFees.Value;                              }                                savingServices.Deposit(_saving' _date' _amount' _description' User.CurrentUser' pending'                                  savingsMethod' paymentMethod' null' Teller.CurrentTeller);                              break;                          }                      case OSavingsOperation.Debit:                          {                              var paymentMethod = (PaymentMethod)cbSavingsMethod.SelectedItem;                              if (_saving is SavingBookContract)                              {                                  if (_flatFees.HasValue)                                      ((SavingBookContract)_saving).FlatWithdrawFees = updAmountFees.Value;                                  else ((SavingBookContract)_saving).RateWithdrawFees = (double)(updAmountFees.Value / 100);                              }                                savingServices.Withdraw(_saving' _date' _amount' _description' User.CurrentUser'                                  Teller.CurrentTeller' paymentMethod);                              break;                          }                      case OSavingsOperation.Transfer:                          {                              if (_saving is SavingBookContract)                              {                                  if (_flatFees.HasValue)                                      ((SavingBookContract)_saving).FlatTransferFees = updAmountFees.Value;                                  else ((SavingBookContract)_saving).RateTransferFees = (double)(updAmountFees.Value / 100);                              }                              decimal fee = nudTotalAmount.Value - nudAmount.Value;                              savingServices.Transfer(_saving' _savingTarget' _date' _amount' fee' _description'                                  User.CurrentUser' false);                              break;                          }                        case OSavingsOperation.SpecialOperation:                          {                              OSavingsMethods savingsMethod =                                  (OSavingsMethods)                                      Enum.Parse(typeof(OSavingsMethods)' cbSavingsMethod.SelectedValue.ToString());                              if (cbBookings.SelectedItem != null)                              {                                  Booking booking = (Booking)cbBookings.SelectedItem;                                  booking.Branch = _saving.Branch;                                  savingServices.SpecialOperation(_saving' _date' _amount' _description' User.CurrentUser'                                      savingsMethod' rbxCredit.Checked' booking);                                  break;                              }                              throw new OpenCbsSavingException(OpenCbsSavingExceptionEnum.TransactionInvalid);                          }                  }
Missing Default,OpenCBS.GUI.UserControl,CollapsibleSplitter,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CollapsibleSplitter.cs,animationTimerTick,The following switch statement is missing a default case: switch(currentState)  			{  				case SplitterState.Collapsing:    					if(this.Dock == DockStyle.Left || this.Dock == DockStyle.Right)  					{  						// vertical splitter  						if(controlToHide.Width > animationStep)  						{  							if(expandParentForm && parentForm.WindowState != FormWindowState.Maximized  								&& parentForm != null)  							{  								parentForm.Width -= animationStep;  							}  							controlToHide.Width -= animationStep;  						}  						else  						{  							if(expandParentForm && parentForm.WindowState != FormWindowState.Maximized  								&& parentForm != null)  							{  								parentForm.Width = parentFormWidth;  							}  							controlToHide.Visible = false;  							animationTimer.Enabled = false;  							controlToHide.Width = controlWidth;  							currentState = SplitterState.Collapsed;  							this.Invalidate();  						}  					}  					else   					{  						// horizontal splitter  						if(controlToHide.Height > animationStep)  						{  							if(expandParentForm && parentForm.WindowState != FormWindowState.Maximized  								&& parentForm != null)  							{  								parentForm.Height -= animationStep;  							}  							controlToHide.Height -= animationStep;  						}  						else  						{  							if(expandParentForm && parentForm.WindowState != FormWindowState.Maximized  								&& parentForm != null)  							{  								parentForm.Height = parentFormHeight;  							}  							controlToHide.Visible = false;  							animationTimer.Enabled = false;  							controlToHide.Height = controlHeight;  							currentState = SplitterState.Collapsed;  							this.Invalidate();  						}  					}  					break;    				case SplitterState.Expanding:    					if(this.Dock == DockStyle.Left || this.Dock == DockStyle.Right)  					{  						// vertical splitter  						if(controlToHide.Width < (controlWidth - animationStep))  						{  							if(expandParentForm && parentForm.WindowState != FormWindowState.Maximized  								&& parentForm != null)  							{  								parentForm.Width += animationStep;  							}  							controlToHide.Width += animationStep;  						}  						else  						{  							if(expandParentForm && parentForm.WindowState != FormWindowState.Maximized  								&& parentForm != null)  							{  								parentForm.Width = parentFormWidth;  							}  							controlToHide.Width = controlWidth;  							controlToHide.Visible = true;  							animationTimer.Enabled = false;  							currentState = SplitterState.Expanded;  							this.Invalidate();  						}  					}  					else   					{  						// horizontal splitter  						if(controlToHide.Height < (controlHeight - animationStep))  						{  							if(expandParentForm && parentForm.WindowState != FormWindowState.Maximized  								&& parentForm != null)  							{  								parentForm.Height += animationStep;  							}  							controlToHide.Height += animationStep;  						}  						else  						{  							if(expandParentForm && parentForm.WindowState != FormWindowState.Maximized  								&& parentForm != null)  							{  								parentForm.Height = parentFormHeight;  							}  							controlToHide.Height = controlHeight;  							controlToHide.Visible = true;  							animationTimer.Enabled = false;  							currentState = SplitterState.Expanded;  							this.Invalidate();  						}    					}  					break;  			}
Missing Default,OpenCBS.GUI.UserControl,CollapsibleSplitter,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CollapsibleSplitter.cs,OnPaint,The following switch statement is missing a default case: switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y + (i*3)' x+1' y + 1 + (i*3));  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x+1' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)' x+2' y + 1 + (i*3)' x+2' y + 2 + (i*3));  							}  						}  						break;    					case VisualStyles.DoubleDots:  						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x - 1' y +(i*3)' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 2' y + 1 + (i*3)' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + 1' y  + (i*3)' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 2' y);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x'y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 2' y' x + 2' y + 90);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 90' x + 2' y + 90);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x' y + (i*5)' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1' y + 1 + (i*5)' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x' y +(i*5)' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x' y + (i*5) + 1);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*5)' x + 1' y + (i*5));  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + (i*2)' x + 2' y + (i*2));  						}    						break;  				}
Missing Default,OpenCBS.GUI.UserControl,CollapsibleSplitter,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CollapsibleSplitter.cs,OnPaint,The following switch statement is missing a default case: switch(visualStyle)  				{  					case VisualStyles.Mozilla:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawLine(new Pen(SystemColors.ControlLightLight)' x + (i*3)' y' x + 1 + (i*3)' y + 1);  							// dark dot  							g.DrawLine(new Pen(SystemColors.ControlDarkDark)' x + 1 + (i*3)' y + 1' x + 2 + (i*3)' y + 2);  							// overdraw the background color as we actually drew 2px diagonal lines' not just dots  							if(hot)  							{  								g.DrawLine(new Pen(hotColor)' x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  							else  							{  								g.DrawLine(new Pen(this.BackColor)'  x + 1 + (i*3)' y + 2' x + 2 + (i*3)' y + 2);  							}  						}  						break;    					case VisualStyles.DoubleDots:    						for(int i=0; i < 30; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y - 1' 1' 1 );  							i++;  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*3)' y + 2' 1' 1 );  							// dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDark)' x + (i*3)' y + 1' 1' 1 );  						}  						break;    					case VisualStyles.Win9x:    						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlLightLight)' x' y' x + 88' y);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x' y + 2' x + 88' y + 2);  						g.DrawLine(new Pen(SystemColors.ControlDark)' x + 88' y' x + 88' y + 2);  						break;    					case VisualStyles.XP:    						for(int i=0; i < 18; i++)  						{  							// light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLight)' x + (i*5)' y' 2' 2 );  							// light light dot  							g.DrawRectangle(new Pen(SystemColors.ControlLightLight)' x + 1 + (i*5)' y + 1' 1' 1 );  							// dark dark dot  							g.DrawRectangle(new Pen(SystemColors.ControlDarkDark)' x +(i*5)' y' 1' 1 );  							// dark fill  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5) + 1' y);  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*5)' y' x + (i*5)' y + 1);  						}  						break;    					case VisualStyles.Lines:    						for(int i=0; i < 44; i++)  						{  							g.DrawLine(new Pen(SystemColors.ControlDark)' x + (i*2)' y' x + (i*2)' y + 2);  						}    						break;  				}
Missing Default,OpenCBS.GUI.UserControl,CorporateUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\CorporateUserControl.cs,PictureBox1Click,The following switch statement is missing a default case: switch (((LinkLabel)sender).Name)                  {                      case "linkLabelChangePhoto":                          showPictureForm = new ShowPictureForm(_corporate' this' 0);                          showPictureForm.ShowDialog();                          break;                      case "linkLabelChangePhoto2":                          showPictureForm = new ShowPictureForm(_corporate' this' 1);                          showPictureForm.ShowDialog();                          break;                  }
Missing Default,OpenCBS.GUI.UserControl,GroupUserControl,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\GroupUserControl.cs,GetDayOfWeek,The following switch statement is missing a default case: switch (cmbWeekDay.SelectedIndex)              {                  case 0: dayOfWeek = DayOfWeek.Sunday;                      break;                  case 1: dayOfWeek = DayOfWeek.Monday;                      break;                  case 2: dayOfWeek = DayOfWeek.Tuesday;                      break;                  case 3: dayOfWeek = DayOfWeek.Wednesday;                      break;                  case 4: dayOfWeek = DayOfWeek.Thursday;                      break;                  case 5: dayOfWeek = DayOfWeek.Friday;                      break;                  case 6: dayOfWeek = DayOfWeek.Saturday;                      break;              }
Missing Default,OpenCBS.GUI.UserControl,ListViewEx,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\ListViewEx.cs,WndProc,The following switch statement is missing a default case: switch (msg.Msg)              {                  // Look	for	WM_VSCROLL'WM_HSCROLL or WM_SIZE messages.                  case WM_VSCROLL:                  case WM_HSCROLL:                  case WM_SIZE:                      EndEditing(false);                      break;                  case WM_NOTIFY:                      // Look for WM_NOTIFY of events that might also change the                      // editor's position/size: Column reordering or resizing                      NMHDR h = (NMHDR)Marshal.PtrToStructure(msg.LParam' typeof(NMHDR));                      if (h.code == HDN_BEGINDRAG ||                          h.code == HDN_ITEMCHANGINGA ||                          h.code == HDN_ITEMCHANGINGW)                          EndEditing(false);                      break;              }
Missing Default,OpenCBS.GUI.UserControl,ListViewEx,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\ListViewEx.cs,_editControl_KeyPress,The following switch statement is missing a default case: switch (e.KeyChar)              {                  case (char)(int)Keys.Escape:                      {                          EndEditing(false);                          break;                      }                    case (char)(int)Keys.Enter:                      {                          EndEditing(true);                          break;                      }              }
Missing Default,OpenCBS.GUI.UserControl,SplitButton,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\UserControl\SplitButton.cs,GetImageRect,The following switch statement is missing a default case: switch (ImageAlign)                      {                          case ContentAlignment.TopLeft:                              {                                  x = 0;                                  y = 0;                                    break;                              }                          case ContentAlignment.TopCenter:                              {                                  x = (this.Width - w) / 2;                                  y = 0;                                    if ((this.Width - w) % 2 > 0)                                  {                                      x += 1;                                  }                                    break;                              }                          case ContentAlignment.TopRight:                              {                                  x = this.Width - w;                                  y = 0;                                    break;                              }                          case ContentAlignment.MiddleLeft:                              {                                  x = 0;                                  y = (this.Height - h) / 2;                                    if ((this.Height - h) % 2 > 0)                                  {                                      y += 1;                                  }                                    break;                              }                          case ContentAlignment.MiddleCenter:                              {                                  x = (this.Width - w) / 2;                                  y = (this.Height - h) / 2;                                    if ((this.Width - w) % 2 > 0)                                  {                                      x += 1;                                  }                                  if ((this.Height - h) % 2 > 0)                                  {                                      y += 1;                                  }                                    break;                              }                          case ContentAlignment.MiddleRight:                              {                                  x = this.Width - w;                                  y = (this.Height - h) / 2;                                    if ((this.Height - h) % 2 > 0)                                  {                                      y += 1;                                  }                                    break;                              }                          case ContentAlignment.BottomLeft:                              {                                  x = 0;                                  y = this.Height - h;                                    if ((this.Height - h) % 2 > 0)                                  {                                      y += 1;                                  }                                    break;                              }                          case ContentAlignment.BottomCenter:                              {                                  x = (this.Width - w) / 2;                                  y = this.Height - h;                                    if ((this.Width - w) % 2 > 0)                                  {                                      x += 1;                                  }                                    break;                              }                          case ContentAlignment.BottomRight:                              {                                  x = this.Width - w;                                  y = this.Height - h;                                    break;                              }                      }
Missing Default,OpenCBS.GUI.Products,FrmAddLoanProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddLoanProduct.Designer.cs,InitializeClientTypes,The following switch statement is missing a default case: switch (clientType.TypeName)                  {                      case "All":                          clientTypeAllCheckBox.Checked = clientType.IsChecked;                          break;                      case "Group":                          clientTypeGroupCheckBox.Checked = clientType.IsChecked;                          break;                      case "Individual":                          clientTypeIndivCheckBox.Checked = clientType.IsChecked;                          break;                      case "Corporate":                          clientTypeCorpCheckBox.Checked = clientType.IsChecked;                          break;                      case "Village":                          clientTypeVillageCheckBox.Checked = clientType.IsChecked;                          break;                  }
Missing Default,OpenCBS.GUI.Products,FrmAddLoanProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddLoanProduct.Designer.cs,InitializePackageValues,The following switch statement is missing a default case: switch (pack.AnticipatedPartialRepaymentPenaltiesBase)              {                  case OAnticipatedRepaymentPenaltiesBases.RemainingOLB:                      rbPartialRemainingOLB.Checked = true;                      break;                  case OAnticipatedRepaymentPenaltiesBases.RemainingInterest:                      rbPartialRemainingInterest.Checked = true;                      break;                  case OAnticipatedRepaymentPenaltiesBases.PrepaidPrincipal:                      rbPrepaidPrincipal.Checked = true;                      break;              }
Missing Default,OpenCBS.GUI.Products,FrmAddLoanProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddLoanProduct.Designer.cs,buttonSave_Click,The following switch statement is missing a default case: switch (_product.PackageMode)                  {                      case OPackageMode.Insert:                      {                          _product.RoundingType = ORoundingType.End;                          ServicesProvider.GetInstance().GetProductServices().ParseFieldsAndCheckErrors(_product' _useExoticProduct' _checkBoxCounter);                          ServicesProvider.GetInstance().GetProductServices().AddPackage(_product);                          Close();                          break;                      }                        case OPackageMode.Edit:                      {                          ServicesProvider.GetInstance().GetProductServices().ParseFieldsAndCheckErrors(_product' _useExoticProduct' _checkBoxCounter);                            if (_ischangeFee)                          {                              ServicesProvider.GetInstance().GetProductServices().UpdatePackage(_product' MessageBox.Show(                                  MultiLanguageStrings.GetString(Ressource.FrmAddLoanProduct' "messageUpdate.Text")'                                  MultiLanguageStrings.GetString(Ressource.PackagesForm' "title.Text")'                                  MessageBoxButtons.YesNo' MessageBoxIcon.Question) == DialogResult.Yes);                          }                          else                          {                              ServicesProvider.GetInstance().GetProductServices().UpdatePackage(_product' false);                          }                            Close();                          break;                      }                  }
Missing Default,OpenCBS.GUI.Products,FrmAddLoanProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddLoanProduct.Designer.cs,comboBoxCycleParams_SelectedIndexChanged,The following switch statement is missing a default case: switch (((CycleObject)cbxCycleObjects.SelectedItem).Id)              {                  case 1:                      FillListViewLoanCycle(_product.LoanAmountCycleParams);                      break;                  case 2:                      FillListViewLoanCycle(_product.RateCycleParams);                      break;                  case 3:                      FillListViewLoanCycle(_product.MaturityCycleParams);                      break;              }
Missing Default,OpenCBS.GUI.Products,FrmAddLoanProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddLoanProduct.Designer.cs,lvEntryFees_SubItemClicked,The following switch statement is missing a default case: switch (e.SubItem)              {                  case IdxNameOfFee:                      lvEntryFees.StartEditing(tbEntryFeesValues' e.Item' e.SubItem);                      break;                    case IdxMin:                      lvEntryFees.StartEditing(tbEntryFeesValues' e.Item' e.SubItem);                      break;                    case IdxMax:                      lvEntryFees.StartEditing(tbEntryFeesValues' e.Item' e.SubItem);                      break;                    case IdxValue:                      lvEntryFees.StartEditing(tbEntryFeesValues' e.Item' e.SubItem);                      break;                    case IdxIsRate:                      lvEntryFees.StartEditing(cbRate' e.Item' e.SubItem);                      break;              }
Missing Default,OpenCBS.GUI.Products,FrmAddLoanProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddLoanProduct.Designer.cs,lvEntryFees_SubItemEndEditing,The following switch statement is missing a default case: switch (e.SubItem)              {                  case IdxNameOfFee:                      subItems[e.SubItem].Text = tbEntryFeesValues.Text;                      break;                    case IdxMin:                      subItems[e.SubItem].Text = tbEntryFeesValues.Text;                      break;                    case IdxMax:                      subItems[e.SubItem].Text = tbEntryFeesValues.Text;                      break;                    case IdxValue:                      subItems[e.SubItem].Text = tbEntryFeesValues.Text;                      break;                    case IdxIsRate:                      subItems[e.SubItem].Text = cbRate.Text;                      break;              }
Missing Default,OpenCBS.GUI.Products,FrmAddLoanProduct,C:\repos\PavelBastov_opencbs\Src\OpenCBS.GUI\Products\FrmAddLoanProduct.Designer.cs,cmbInterestScheme_SelectedValueChanged,The following switch statement is missing a default case: switch (cmbInterestScheme.SelectedIndex + 1)              {                  case 1:                      _product.InterestScheme = OInterestScheme.ActualActual; break;                  case 2:                      _product.InterestScheme = OInterestScheme.Actual360; break;                  case 3:                      _product.InterestScheme = OInterestScheme.ThirtyActual; break;                  case 4:                      _product.InterestScheme = OInterestScheme.Thirty360; break;              }
