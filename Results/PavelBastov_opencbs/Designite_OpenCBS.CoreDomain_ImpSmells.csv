Implementation smell,Namespace,Class,File,Method,Description
Long Method,OpenCBS.CoreDomain.Contracts.Loans,Loan,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\Loan.cs,Repay,The method has 162 lines of code.
Long Method,OpenCBS.CoreDomain.Contracts.Loans,Loan,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\Loan.cs,GenerateRepaymentEvents,The method has 171 lines of code.
Long Method,OpenCBS.CoreDomain.Contracts.Loans.CalculateInstallments.Flat,FlatStrategy,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\CalculateInstallments\Flat\FlatStrategy.cs,CalculateInstallments,The method has 106 lines of code.
Long Method,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.MaxRepayment,CalculateAmountToRepaySpecifiedInstallmentStrategy,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\MaxRepayment\CalculateAmountToRepaySpecifiedInstallmentStrategy.cs,MaxAmountOfRealSchedule,The method has 113 lines of code.
Long Method,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.MaxRepayment,CalculateMaximumAmountToRegradingLoanStrategy,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\MaxRepayment\CalculateMaximumAmountToRegradingLoanStrategy.cs,MaxAmountOfRealSchedule,The method has 114 lines of code.
Long Method,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.MaxRepayment,CalculateMaximumAmountToRepayStrategy,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\MaxRepayment\CalculateMaximumAmountToRepayStrategy.cs,CalculateMaximumAmountForEscapedMember,The method has 112 lines of code.
Long Method,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.Repayment.RepayLateInstallments,CalculateInstallments,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\Repayment\RepayLateInstallments\CalculateInstallments.cs,CalculateNewInstallmentsWithLateFees,The method has 101 lines of code.
Long Method,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.Repayment.RepayLateInstallments,CalculateInstallments,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\Repayment\RepayLateInstallments\CalculateInstallments.cs,CalculateAnticipateRepayment,The method has 138 lines of code.
Long Method,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.Repayment.RepayLateInstallments,CalculateInstallments,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\Repayment\RepayLateInstallments\CalculateInstallments.cs,CalculateRemainsInstallmentAfterApr,The method has 105 lines of code.
Long Method,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.Repayment.RepayNextInstallments.Flat,FlatExoticKeepNotExpectedInstallmentsWithNoCents,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\Repayment\RepayNextInstallments\Flat\FlatExoticKeepNotExpectedInstallmentsWithNoCents.cs,RepayNextInstallments,The method has 111 lines of code.
Complex Method,OpenCBS.CoreDomain.Accounting,AccountingClosure,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Accounting\AccountingClosure.cs,GetBookings,Cyclomatic complexity of the method is 12
Complex Method,OpenCBS.CoreDomain.Accounting,AccountingClosure,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Accounting\AccountingClosure.cs,GetValue,Cyclomatic complexity of the method is 16
Complex Method,OpenCBS.CoreDomain.Accounting,AccountingRuleCollection,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Accounting\AccountingRuleCollection.cs,GetSpecificAccount,Cyclomatic complexity of the method is 8
Complex Method,OpenCBS.CoreDomain.Accounting,AccountingRuleCollection,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Accounting\AccountingRuleCollection.cs,GetSpecificAccount,Cyclomatic complexity of the method is 9
Complex Method,OpenCBS.CoreDomain.Contracts.Loans.CalculateInstallments.Declining,FixedInstallmentStrategy,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\CalculateInstallments\Declining\FixedInstallmentStrategy.cs,CalculateInstallments,Cyclomatic complexity of the method is 10
Complex Method,OpenCBS.CoreDomain.Contracts.Loans,Loan,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\Loan.cs,Disburse,Cyclomatic complexity of the method is 8
Complex Method,OpenCBS.CoreDomain.Contracts.Loans,Loan,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\Loan.cs,Repay,Cyclomatic complexity of the method is 25
Complex Method,OpenCBS.CoreDomain.Contracts.Loans,Loan,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\Loan.cs,GenerateRepaymentEvents,Cyclomatic complexity of the method is 22
Complex Method,OpenCBS.CoreDomain.Contracts.Loans,Loan,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\Loan.cs,AddRecheduleTransformationEvent,Cyclomatic complexity of the method is 8
Complex Method,OpenCBS.CoreDomain.Contracts.Loans,Loan,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\Loan.cs,GetAccruedInterestEvent,Cyclomatic complexity of the method is 10
Complex Method,OpenCBS.CoreDomain.Contracts.Savings,SavingsContract,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Savings\SavingsContract.cs,EvaluateSavingsEvent,Cyclomatic complexity of the method is 9
Complex Method,OpenCBS.CoreDomain.Contracts.Loans.CalculateInstallments.Flat,FlatStrategy,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\CalculateInstallments\Flat\FlatStrategy.cs,CalculateInstallments,Cyclomatic complexity of the method is 10
Complex Method,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.MaxRepayment,CalculateAmountToRepaySpecifiedInstallmentStrategy,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\MaxRepayment\CalculateAmountToRepaySpecifiedInstallmentStrategy.cs,MaxAmountOfRealSchedule,Cyclomatic complexity of the method is 17
Complex Method,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.MaxRepayment,CalculateMaximumAmountToRegradingLoanStrategy,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\MaxRepayment\CalculateMaximumAmountToRegradingLoanStrategy.cs,MaxAmountOfRealSchedule,Cyclomatic complexity of the method is 17
Complex Method,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.MaxRepayment,CalculateMaximumAmountToRepayStrategy,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\MaxRepayment\CalculateMaximumAmountToRepayStrategy.cs,MaxAmountOfRealSchedule,Cyclomatic complexity of the method is 13
Complex Method,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.MaxRepayment,CalculateMaximumAmountToRepayStrategy,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\MaxRepayment\CalculateMaximumAmountToRepayStrategy.cs,CalculateMaximumAmountForEscapedMember,Cyclomatic complexity of the method is 15
Complex Method,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.Repayment.RepayLateInstallments,CalculationBaseForLateFees,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\Repayment\RepayLateInstallments\CalculationBaseForLateFees.cs,CalculateAnticipateRepayment,Cyclomatic complexity of the method is 9
Complex Method,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.Repayment.RepayLateInstallments,CalculationBaseForLateFees,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\Repayment\RepayLateInstallments\CalculationBaseForLateFees.cs,CalculateNonRepaymentPenalties,Cyclomatic complexity of the method is 9
Complex Method,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.Repayment.RepayLateInstallments,CalculateInstallments,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\Repayment\RepayLateInstallments\CalculateInstallments.cs,CalculateAnticipateRepayment,Cyclomatic complexity of the method is 19
Complex Method,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.Repayment.RepayLateInstallments,CalculateInstallments,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\Repayment\RepayLateInstallments\CalculateInstallments.cs,RepayInstallments,Cyclomatic complexity of the method is 13
Complex Method,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.Repayment.RepayLateInstallments,CalculateInstallments,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\Repayment\RepayLateInstallments\CalculateInstallments.cs,CalculateRemainsInstallmentAfterApr,Cyclomatic complexity of the method is 9
Complex Method,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.Repayment.RepayLateInstallments,CalculateInstallments,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\Repayment\RepayLateInstallments\CalculateInstallments.cs,RepayTotalAnticipateInstallments,Cyclomatic complexity of the method is 20
Complex Method,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.Repayment.RepayLateInstallments,CalculateInstallments,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\Repayment\RepayLateInstallments\CalculateInstallments.cs,RepayPartialAnticipateInstallments,Cyclomatic complexity of the method is 17
Complex Method,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.Repayment.RepayLateInstallments,CalculateInstallments,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\Repayment\RepayLateInstallments\CalculateInstallments.cs,RepayProportinalyInstallments,Cyclomatic complexity of the method is 24
Complex Method,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.Repayment,RepaymentMethod,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\Repayment\RepaymentMethod.cs,Repay,Cyclomatic complexity of the method is 8
Complex Method,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.Repayment.RepayNextInstallments.Declining,DecliningKeepExpectedInstallments,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\Repayment\RepayNextInstallments\Declining\DecliningKeepExpectedInstallments.cs,RepayNextInstallments,Cyclomatic complexity of the method is 10
Complex Method,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.Repayment.RepayNextInstallments.Declining,DecliningKeepNotExpectedInstallments,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\Repayment\RepayNextInstallments\Declining\DecliningKeepNotExpectedInstallments.cs,RepayNextInstallments,Cyclomatic complexity of the method is 8
Complex Method,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.Repayment.RepayNextInstallments.Flat,FlatExoticKeepNotExpectedInstallmentsWithCents,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\Repayment\RepayNextInstallments\Flat\FlatExoticKeepNotExpectedInstallmentsWithCents.cs,RepayNextInstallments,Cyclomatic complexity of the method is 14
Complex Method,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.Repayment.RepayNextInstallments.Flat,FlateKeepExpectedInstallments,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\Repayment\RepayNextInstallments\Flat\FlateKeepExpectedInstallments.cs,RepayNextInstallments,Cyclomatic complexity of the method is 9
Complex Method,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.Repayment.RepayNextInstallments.Flat,FlatExoticKeepNotExpectedInstallmentsWithNoCents,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\Repayment\RepayNextInstallments\Flat\FlatExoticKeepNotExpectedInstallmentsWithNoCents.cs,RepayNextInstallments,Cyclomatic complexity of the method is 14
Long Parameter List,OpenCBS.CoreDomain.Accounting,Account,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Accounting\Account.cs,Account,The method has 7 parameters. Parameters: accountNumber' label' balance' typeCode' debitPlus' category' pCurrencyId
Long Parameter List,OpenCBS.CoreDomain.Accounting,Account,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Accounting\Account.cs,Account,The method has 8 parameters. Parameters: accountNumber' label' balance' typeCode' debitPlus' id' category' pCurrencyId
Long Parameter List,OpenCBS.CoreDomain.Accounting,AccountingClosure,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Accounting\AccountingClosure.cs,GetBookings,The method has 6 parameters. Parameters: rules' eventStock' tellers' paymentMethods' rates' fiscalYears
Long Parameter List,OpenCBS.CoreDomain.Accounting,BookingToView,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Accounting\BookingToView.cs,BookingToView,The method has 6 parameters. Parameters: pDirection' pAmount' pDate' pExchangeRate' pContractCode' pEventCode
Long Parameter List,OpenCBS.CoreDomain.Accounting,Booking,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Accounting\Booking.cs,Booking,The method has 6 parameters. Parameters: pNumber' pCreditaccount' pAmount' pDebitaccount' pDate' branch
Long Parameter List,OpenCBS.CoreDomain.Accounting,Booking,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Accounting\Booking.cs,Booking,The method has 7 parameters. Parameters: pNumber' pCreditaccount' pAmount' pDebitaccount' pLabel' pDate' branch
Long Parameter List,OpenCBS.CoreDomain.Accounting,PaymentMethod,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Accounting\PaymentMethod.cs,PaymentMethod,The method has 8 parameters. Parameters: id' linkId' name' description' isPending' branch' date' account
Long Parameter List,OpenCBS.CoreDomain,ReportAvailableForDownload,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\ReportAvailableForDownload.cs,ReportAvailableForDownload,The method has 5 parameters. Parameters: pGuid' pTitle' pDescription' pSize' pExist
Long Parameter List,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment,CreditContractOptions,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\CreditContractOptions.cs,CreditContractOptions,The method has 8 parameters. Parameters: pLoanType' pKeepExpectedInstallments' pCancelFees' pManualFeesAmount' pManualCommissionAmount' pCancelInterests' pManualInterestsAmount' pAnticipatedTotalRepaymentPenaltiesBase
Long Parameter List,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment,CreditContractOptions,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\CreditContractOptions.cs,CreditContractOptions,The method has 10 parameters. Parameters: pLoanType' pKeepExpectedInstallments' pCancelFees' pManualFeesAmount' pManualCommissionAmount' pCancelInterests' pManualInterestsAmount' pAnticipatedTotalRepaymentPenaltiesBase' pIsForExotic' payProportional
Long Parameter List,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment,CreditContractRepayment,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\CreditContractRepayment.cs,CreditContractRepayment,The method has 7 parameters. Parameters: contract' creditOptions' pDate' pInstallmentNumber' user' pGeneralSettings' pNonWorkingDate
Long Parameter List,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment,CreditContractRepayment,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\CreditContractRepayment.cs,Repay,The method has 8 parameters. Parameters: amountPaid' penaltiesEvent' commissionsEvent' interestsEvent' iterestPrepayment' principalEvent' manualInterestAmount' paymentType
Long Parameter List,OpenCBS.CoreDomain.Contracts.Loans,Loan,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\Loan.cs,Loan,The method has 5 parameters. Parameters: pUser' pGeneralSettings' pNwds' pPt' pChartOfAccounts
Long Parameter List,OpenCBS.CoreDomain.Contracts.Loans,Loan,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\Loan.cs,Loan,The method has 11 parameters. Parameters: pAckage' pAmount' pInterestRate' pNbOfInstallments' pGracePeriod' pStartDate' pUser' pGeneralSettings' pNwds' pPt' pChartOfAccounts
Long Parameter List,OpenCBS.CoreDomain.Contracts.Loans,Loan,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\Loan.cs,Loan,The method has 11 parameters. Parameters: pAckage' pAmount' pInterestRate' pNbOfInstallments' pGracePeriod' pStartDate' pUser' pGeneralSettings' pNwds' pPt' pChartOfAccounts
Long Parameter List,OpenCBS.CoreDomain.Contracts.Loans,Loan,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\Loan.cs,Loan,The method has 12 parameters. Parameters: pAckage' pAmount' pInterestRate' pNbOfInstallments' pGracePeriod' pStartDate' pFirstInstallmentDate' pUser' pGeneralSettings' pNwds' pPt' pChartOfAccounts
Long Parameter List,OpenCBS.CoreDomain.Contracts.Loans,Loan,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\Loan.cs,Loan,The method has 12 parameters. Parameters: pAckage' pAmount' pInterestRate' pNbOfInstallments' pGracePeriod' pStartDate' meetingDay' pUser' pGeneralSettings' pNwds' pPt' pChartOfAccounts
Long Parameter List,OpenCBS.CoreDomain.Contracts.Loans,Loan,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\Loan.cs,CalculateMaximumAmountAuthorizedToRepay,The method has 8 parameters. Parameters: pNumber' pDate' pCancelFees' pManualFeesAmount' pManualCommissionAmount' pDisableInterests' pManualInterests' pKeepExpectedInstallment
Long Parameter List,OpenCBS.CoreDomain.Contracts.Loans,Loan,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\Loan.cs,CalculateMaximumAmountAuthorizedToRepay,The method has 9 parameters. Parameters: pNumber' pDate' pCancelFees' pManualFeesAmount' pManualCommissionAmount' pDisableInterests' pManualInterests' pKeepExpectedInstallment' pIsForExoticProduct
Long Parameter List,OpenCBS.CoreDomain.Contracts.Loans,Loan,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\Loan.cs,CalculateAmountToRepaySpecifiedInstallment,The method has 8 parameters. Parameters: pNumber' pDate' pCancelFees' pManualFeesAmount' pManualCommissionAmount' pDisableInterests' pManualInterests' pKeepExpectedInstallment
Long Parameter List,OpenCBS.CoreDomain.Contracts.Loans,Loan,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\Loan.cs,CalculateMaximumAmountToRegradingLoan,The method has 8 parameters. Parameters: pNumber' pDate' pCancelFees' pManualFeesAmount' pManualCommissionAmount' pDisableInterests' pManualInterests' pKeepExpectedInstallment
Long Parameter List,OpenCBS.CoreDomain.Contracts.Loans,Loan,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\Loan.cs,CalculateMaximumAmountForEscapedMember,The method has 9 parameters. Parameters: pNumber' pDate' pCancelFees' pManualFeesAmount' pManualCommissionAmount' pDisableInterests' pManualInterests' pKeepExpectedInstallment' pLoanShareAmount
Long Parameter List,OpenCBS.CoreDomain.Contracts.Loans,Loan,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\Loan.cs,Repay,The method has 5 parameters. Parameters: pNumber' pDate' pAmountPaid' cancelFees' pKeepExpectedInstallment
Long Parameter List,OpenCBS.CoreDomain.Contracts.Loans,Loan,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\Loan.cs,Repay,The method has 12 parameters. Parameters: pNumber' pDate' pAmountPaid' cancelFees' manualFeesAmount' manualCommissionAmount' disableInterests' manualInterests' keepExpectedInstallment' payProportion' isPending' paymentMethod
Long Parameter List,OpenCBS.CoreDomain.Contracts.Loans,Loan,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\Loan.cs,Repay,The method has 13 parameters. Parameters: pNumber' pDate' pAmountPaid' cancelFees' manualFeesAmount' manualCommissionAmount' disableInterests' manualInterests' keepExpectedInstallment' payProportion' paymentMethod' comment' pending
Long Parameter List,OpenCBS.CoreDomain.Contracts.Loans,Loan,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\Loan.cs,GenerateRepaymentEvents,The method has 16 parameters. Parameters: cCr' payDate' penaltiesEvent' commissionsEvent' interestEvent' interestPrepayment' principalEvent' pastDueDays' paymentType' isPending' instNumber' paymentMethod' overridePenalty' manualPenalty' manualInterestEvent' totalEvent
Long Parameter List,OpenCBS.CoreDomain.Contracts.Loans,Loan,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\Loan.cs,CreateRepaymentEvent,The method has 11 parameters. Parameters: installmentNumber' pDate' penaltiesEvent' commissionsEvent' interestEvent' interestPrepayment' pincipalEvent' overDueDays' isGroup' repaymentType' pending
Long Parameter List,OpenCBS.CoreDomain.Contracts.Savings,ISavingsContract,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Savings\ISavingsContract.cs,FirstDeposit,The method has 5 parameters. Parameters: pInitialAmount' pCreationDate' pEntryFees' pUser' teller
Long Parameter List,OpenCBS.CoreDomain.Contracts.Savings,ISavingsContract,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Savings\ISavingsContract.cs,Withdraw,The method has 7 parameters. Parameters: pAmount' pDate' pDescription' pUser' pIsDesactivateFees' teller' paymentMethod
Long Parameter List,OpenCBS.CoreDomain.Contracts.Savings,ISavingsContract,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Savings\ISavingsContract.cs,Deposit,The method has 10 parameters. Parameters: pAmount' pDate' pDescription' pUser' pIsDesactivateFees' isPending' savingsMethod' paymentMethod' pendingEventId' teller
Long Parameter List,OpenCBS.CoreDomain.Contracts.Savings,ISavingsContract,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Savings\ISavingsContract.cs,LoanDisbursement,The method has 9 parameters. Parameters: loan' date' description' user' isDesactivateFees' isPending' savingsMethod' pendingEventId' teller
Long Parameter List,OpenCBS.CoreDomain.Contracts.Savings,ISavingsContract,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Savings\ISavingsContract.cs,DebitTransfer,The method has 5 parameters. Parameters: to' amount' fee' date' description
Long Parameter List,OpenCBS.CoreDomain.Contracts.Savings,ISavingsContract,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Savings\ISavingsContract.cs,Transfer,The method has 5 parameters. Parameters: to' amount' fee' date' description
Long Parameter List,OpenCBS.CoreDomain.Contracts.Savings,ISavingsContract,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Savings\ISavingsContract.cs,SimulateClose,The method has 5 parameters. Parameters: pDate' pUser' pDescription' pIsDesactivateFees' teller
Long Parameter List,OpenCBS.CoreDomain.Contracts.Savings,ISavingsContract,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Savings\ISavingsContract.cs,Close,The method has 6 parameters. Parameters: pDate' pUser' pDescription' pIsDesactivateFees' teller' isFromClosure
Long Parameter List,OpenCBS.CoreDomain.Contracts.Savings,ISavingsContract,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Savings\ISavingsContract.cs,Reopen,The method has 5 parameters. Parameters: pAmount' pDate' pUser' pDescription' pIsDesactivateFees
Long Parameter List,OpenCBS.CoreDomain.Contracts.Savings,ISavingsContract,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Savings\ISavingsContract.cs,RefusePendingDeposit,The method has 6 parameters. Parameters: pAmount' pDate' pUser' pDescription' method' pendingEventId
Long Parameter List,OpenCBS.CoreDomain.Contracts.Savings,ISavingsContract,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Savings\ISavingsContract.cs,RepayLoanFromSaving,The method has 7 parameters. Parameters: loan' repaymentEventId' date' amount' description' user' teller
Long Parameter List,OpenCBS.CoreDomain.Contracts.Savings,SavingsContract,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Savings\SavingsContract.cs,FirstDeposit,The method has 5 parameters. Parameters: pInitialAmount' pCreationDate' pEntryFees' pUser' teller
Long Parameter List,OpenCBS.CoreDomain.Contracts.Savings,SavingsContract,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Savings\SavingsContract.cs,Withdraw,The method has 7 parameters. Parameters: pAmount' pDate' pDescription' pUser' pIsDesactivateFees' teller' paymentMethod
Long Parameter List,OpenCBS.CoreDomain.Contracts.Savings,SavingsContract,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Savings\SavingsContract.cs,LoanDisbursement,The method has 9 parameters. Parameters: loan' date' description' user' isDesactivateFees' isPending' savingsMethod' pendingEventId' teller
Long Parameter List,OpenCBS.CoreDomain.Contracts.Savings,SavingsContract,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Savings\SavingsContract.cs,RepayLoanFromSaving,The method has 7 parameters. Parameters: loan' repaymentEventId' date' amount' description' user' teller
Long Parameter List,OpenCBS.CoreDomain.Contracts.Savings,SavingsContract,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Savings\SavingsContract.cs,Deposit,The method has 10 parameters. Parameters: pAmount' pDate' pDescription' pUser' pIsDesactivateFees' isPending' savingsMethod' paymentMethod' pendingEventId' teller
Long Parameter List,OpenCBS.CoreDomain.Contracts.Savings,SavingsContract,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Savings\SavingsContract.cs,DebitTransfer,The method has 5 parameters. Parameters: to' amount' fee' date' description
Long Parameter List,OpenCBS.CoreDomain.Contracts.Savings,SavingsContract,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Savings\SavingsContract.cs,Transfer,The method has 5 parameters. Parameters: to' amount' fee' date' description
Long Parameter List,OpenCBS.CoreDomain.Contracts.Savings,SavingsContract,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Savings\SavingsContract.cs,Close,The method has 6 parameters. Parameters: pDate' pUser' pDescription' pIsDesactivateFees' teller' isFromClosure
Long Parameter List,OpenCBS.CoreDomain.Contracts.Savings,SavingsContract,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Savings\SavingsContract.cs,RefusePendingDeposit,The method has 6 parameters. Parameters: pAmount' pDate' pUser' pDescription' method' pendingEventId
Long Parameter List,OpenCBS.CoreDomain.Contracts.Savings,SavingsContract,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Savings\SavingsContract.cs,Reopen,The method has 5 parameters. Parameters: pAmount' pDate' pUser' pDescription' pIsDesactivateFees
Long Parameter List,OpenCBS.CoreDomain.Contracts.Savings,SavingsContract,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Savings\SavingsContract.cs,SimulateClose,The method has 5 parameters. Parameters: pDate' pUser' pDescription' pIsDesactivateFees' teller
Long Parameter List,OpenCBS.CoreDomain.Contracts.Savings,SavingsContract,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Savings\SavingsContract.cs,CreditTransfer,The method has 5 parameters. Parameters: pAmount' pDebitAccount' pDate' pDescription' pUser
Long Parameter List,OpenCBS.CoreDomain.Contracts.Savings,SavingsContract,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Savings\SavingsContract.cs,DebitTransfer,The method has 6 parameters. Parameters: pAmount' pCreditAccount' pDate' pDescription' pUser' pIsDesactivateFees
Long Parameter List,OpenCBS.CoreDomain.Contracts.Savings,SavingBookContract,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Savings\SavingBookContract.cs,SavingBookContract,The method has 5 parameters. Parameters: pApplicationSettings' pUser' pCreationDate' pProduct' pClient
Long Parameter List,OpenCBS.CoreDomain.Contracts.Savings,SavingBookContract,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Savings\SavingBookContract.cs,FirstDeposit,The method has 5 parameters. Parameters: pInitialAmount' pCreationDate' pEntryFees' pUser' teller
Long Parameter List,OpenCBS.CoreDomain.Contracts.Savings,SavingBookContract,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Savings\SavingBookContract.cs,LoanDisbursement,The method has 9 parameters. Parameters: loan' date' description' user' isDesactivateFees' isPending' savingsMethod' pendingEventId' teller
Long Parameter List,OpenCBS.CoreDomain.Contracts.Savings,SavingBookContract,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Savings\SavingBookContract.cs,Deposit,The method has 10 parameters. Parameters: pAmount' pDate' pDescription' pUser' pIsDesactivateFees' isPending' savingsMethod' paymentMethod' pendingEventId' teller
Long Parameter List,OpenCBS.CoreDomain.Contracts.Savings,SavingBookContract,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Savings\SavingBookContract.cs,Withdraw,The method has 7 parameters. Parameters: pAmount' pDate' pDescription' pUser' pIsDesactivateFees' teller' paymentMethod
Long Parameter List,OpenCBS.CoreDomain.Contracts.Savings,SavingBookContract,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Savings\SavingBookContract.cs,DebitTransfer,The method has 6 parameters. Parameters: pAmount' pCreditAccount' pDate' pDescription' pUser' pIsDesactivateFees
Long Parameter List,OpenCBS.CoreDomain.Contracts.Savings,SavingBookContract,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Savings\SavingBookContract.cs,RefusePendingDeposit,The method has 6 parameters. Parameters: pAmount' pDate' pUser' pDescription' method' pendingEventId
Long Parameter List,OpenCBS.CoreDomain.Contracts.Savings,SavingBookContract,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Savings\SavingBookContract.cs,Reopen,The method has 5 parameters. Parameters: pAmount' pDate' pUser' pDescription' pIsDesactivateFees
Long Parameter List,OpenCBS.CoreDomain.Contracts.Savings,SavingBookContract,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Savings\SavingBookContract.cs,Close,The method has 6 parameters. Parameters: pDate' pUser' pDescription' pIsDesactivateFees' teller' isFromClosure
Long Parameter List,OpenCBS.CoreDomain.Contracts.Savings,SavingBookContract,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Savings\SavingBookContract.cs,SimulateClose,The method has 5 parameters. Parameters: pDate' pUser' pDescription' pIsDesactivateFees' teller
Long Parameter List,OpenCBS.CoreDomain.Contracts.Savings,SavingBookContract,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Savings\SavingBookContract.cs,CloseAndTransfer,The method has 7 parameters. Parameters: from' to' date' pUser' amount' pIsDesactivateFees' teller
Long Parameter List,OpenCBS.CoreDomain.LoanCycles,Cycle,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\LoanCycles\Cycle.cs,Cycle,The method has 6 parameters. Parameters: id' loanCycle' min' max' cycleObjectId' cycleId
Long Parameter List,OpenCBS.CoreDomain.LoanCycles,RateCycle,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\LoanCycles\RateCycle.cs,RateCycle,The method has 6 parameters. Parameters: id' loanCycle' min' max' cycleObjectId' cycleId
Long Parameter List,OpenCBS.CoreDomain.LoanCycles,LoanAmountCycle,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\LoanCycles\LoanAmountCycle.cs,LoanAmountCycle,The method has 6 parameters. Parameters: id' loanCycle' min' max' cycleObjectId' cycleId
Long Parameter List,OpenCBS.CoreDomain.LoanCycles,MaturityCycle,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\LoanCycles\MaturityCycle.cs,MaturityCycle,The method has 6 parameters. Parameters: id' loanCycle' min' max' cycleObjectId' cycleId
Long Parameter List,OpenCBS.CoreDomain.Contracts.Loans.GenerateEvents,Accrual,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\GenerateEvents\Accrual.cs,GenerateLoanDisbursmentEvent,The method has 6 parameters. Parameters: pLoan' pGeneralSettings' pDisburseDate' pAlignInstallmentsDatesOnRealDisbursmentDate' pDisableFees' pUser
Long Parameter List,OpenCBS.CoreDomain.Contracts.Loans.GenerateEvents,Cash,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\GenerateEvents\Cash.cs,GenerateLoanDisbursmentEvent,The method has 6 parameters. Parameters: pLoan' pGeneralSettings' pDisburseDate' pAlignInstallmentsDatesOnRealDisbursmentDate' pDisableFees' pUser
Long Parameter List,OpenCBS.CoreDomain.Contracts.Loans.GenerateEvents,Cash,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\GenerateEvents\Cash.cs,CheckDegradeToBadLoan,The method has 7 parameters. Parameters: pLoan' settings' pProvisionTable' pDate' authorizeSeveralPastDueEventByPeriod' pPstDueDays' pUser
Long Parameter List,OpenCBS.CoreDomain.Contracts.Loans.CalculateInstallments,CalculateInstallmentsOptions,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\CalculateInstallments\CalculateInstallmentsOptions.cs,CalculateInstallmentsOptions,The method has 5 parameters. Parameters: pStartDate' pLoanType' pIsExotic' pContract' pChangeDate
Long Parameter List,OpenCBS.CoreDomain.Contracts.Loans.Installments,Installment,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\Installments\Installment.cs,Installment,The method has 8 parameters. Parameters: expectedDate' interestRepayment' capitalRepayment' paidCapital' paidInterests' paidFees' paidDate' number
Long Parameter List,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.MaxRepayment,CalculateAmountToRepaySpecifiedInstallmentStrategy,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\MaxRepayment\CalculateAmountToRepaySpecifiedInstallmentStrategy.cs,CalculateAmountToRepaySpecifiedInstallmentStrategy,The method has 5 parameters. Parameters: pCCo' pContract' pUser' pGeneralSettings' pNonWorkingDate
Long Parameter List,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.MaxRepayment,CalculateMaximumAmountToRegradingLoanStrategy,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\MaxRepayment\CalculateMaximumAmountToRegradingLoanStrategy.cs,CalculateMaximumAmountToRegradingLoanStrategy,The method has 5 parameters. Parameters: pCCo' pContract' pUser' pGeneralSettings' pNonWorkingDate
Long Parameter List,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.MaxRepayment,CalculateMaximumAmountToRepayStrategy,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\MaxRepayment\CalculateMaximumAmountToRepayStrategy.cs,CalculateMaximumAmountToRepayStrategy,The method has 5 parameters. Parameters: pCCo' pContract' pUser' pGeneralSettings' pNonWorkingDate
Long Parameter List,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.Interfaces,IRepayNextInstallments,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\Interfaces\IRepayNextInstallments.cs,RepayNextInstallments,The method has 6 parameters. Parameters: amountPaid' interestEvent' interestPrepayment' principalEvent' feesEvent' commissionsEvent
Long Parameter List,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.Repayment.RepayLateInstallments,CalculationBaseForLateFees,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\Repayment\RepayLateInstallments\CalculationBaseForLateFees.cs,FeesBasedOnInitialAmount,The method has 6 parameters. Parameters: pContract' pDate' pInstallmentNumber' pForClosure' pGeneralSettings' pNonWorkingDate
Long Parameter List,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.Repayment.RepayLateInstallments,CalculationBaseForLateFees,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\Repayment\RepayLateInstallments\CalculationBaseForLateFees.cs,FeesBasedOnOlb,The method has 6 parameters. Parameters: pContract' pDate' pInstallmentNumber' pForClosure' pGeneralSettings' pNonWorkingDate
Long Parameter List,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.Repayment.RepayLateInstallments,CalculationBaseForLateFees,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\Repayment\RepayLateInstallments\CalculationBaseForLateFees.cs,FeesBasedOnOverduePrincipal,The method has 6 parameters. Parameters: pContract' pDate' pInstallmentNumber' pForClosure' pGeneralSettings' pNonWorkingDate
Long Parameter List,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.Repayment.RepayLateInstallments,CalculationBaseForLateFees,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\Repayment\RepayLateInstallments\CalculationBaseForLateFees.cs,FeesBasedOnOverdueInterest,The method has 6 parameters. Parameters: pContract' pDate' pInstallmentNumber' pForClosure' pGeneralSettings' pNonWorkingDate
Long Parameter List,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.Repayment.RepayLateInstallments,CalculationBaseForLateFees,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\Repayment\RepayLateInstallments\CalculationBaseForLateFees.cs,AnticipateFeesBasedOnOlb,The method has 7 parameters. Parameters: pContract' pDate' pInstallmentNumber' pForClosure' pGeneralSettings' pNonWorkingDate' pPaymentType
Long Parameter List,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.Repayment.RepayLateInstallments,CalculationBaseForLateFees,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\Repayment\RepayLateInstallments\CalculationBaseForLateFees.cs,AnticipateFeesBasedOnOverdueInterest,The method has 7 parameters. Parameters: pContract' pDate' pInstallmentNumber' pForClosure' pGeneralSettings' pNonWorkingDate' pPaymentType
Long Parameter List,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.Repayment.RepayLateInstallments,CalculationBaseForLateFees,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\Repayment\RepayLateInstallments\CalculationBaseForLateFees.cs,CalculateAnticipateRepayment,The method has 5 parameters. Parameters: pContract' pDate' pGeneralSettings' pNonWorkingDate' pPaymentType
Long Parameter List,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.Repayment.RepayLateInstallments,CalculationBaseForLateFees,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\Repayment\RepayLateInstallments\CalculationBaseForLateFees.cs,_CalculateNonRepaymentPenaltiesForClosure,The method has 6 parameters. Parameters: pContract' pDate' pInstallmentNumber' repaymentType' pGeneralSettings' pNonWorkingDate
Long Parameter List,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.Repayment.RepayLateInstallments,CalculationBaseForLateFees,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\Repayment\RepayLateInstallments\CalculationBaseForLateFees.cs,CalculateNonRepaymentPenalties,The method has 6 parameters. Parameters: pContract' pDate' installmentNumber' repaymentType' pGeneralSettings' pNonWorkingDate
Long Parameter List,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.Repayment.RepayLateInstallments,CalculationBaseForLateFees,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\Repayment\RepayLateInstallments\CalculationBaseForLateFees.cs,_AnticipateCalculateNonRepaymentPenalties,The method has 5 parameters. Parameters: pContract' pDate' installmentNumber' pPaymentType' pGeneralSettings
Long Parameter List,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.Repayment.RepayLateInstallments,CalculationBaseForLateFees,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\Repayment\RepayLateInstallments\CalculationBaseForLateFees.cs,CalculateCommision,The method has 5 parameters. Parameters: pContract' pDate' number' pPaymentType' pGeneralSettings
Long Parameter List,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.Repayment.RepayLateInstallments,CalculateInstallments,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\Repayment\RepayLateInstallments\CalculateInstallments.cs,CalculateInstallments,The method has 5 parameters. Parameters: pCco' pContract' pUser' pGeneralSettings' pNonWorkingDate
Long Parameter List,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.Repayment.RepayLateInstallments,CalculateInstallments,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\Repayment\RepayLateInstallments\CalculateInstallments.cs,CalculateCommision,The method has 5 parameters. Parameters: pDate' pNumber' pPaymentType' amount' calculated
Long Parameter List,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.Repayment.RepayLateInstallments,CalculateInstallments,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\Repayment\RepayLateInstallments\CalculateInstallments.cs,RepayInstallments,The method has 6 parameters. Parameters: pDate' amountPaid' interestEvent' principalEvent' feesEvent' commissionsEvent
Long Parameter List,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.Repayment.RepayLateInstallments,CalculateInstallments,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\Repayment\RepayLateInstallments\CalculateInstallments.cs,RepayTotalAnticipateInstallments,The method has 6 parameters. Parameters: pDate' amountPaid' interestEvent' principalEvent' feesEvent' commissionsEvent
Long Parameter List,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.Repayment.RepayLateInstallments,CalculateInstallments,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\Repayment\RepayLateInstallments\CalculateInstallments.cs,RepayPartialAnticipateInstallments,The method has 6 parameters. Parameters: pDate' amountPaid' interestEvent' principalEvent' feesEvent' commissionsEvent
Long Parameter List,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.Repayment.RepayLateInstallments,CalculateInstallments,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\Repayment\RepayLateInstallments\CalculateInstallments.cs,RepayProportinalyInstallments,The method has 6 parameters. Parameters: date' amountPaid' interestEvent' principalEvent' feesEvent' commissionsEvent
Long Parameter List,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.Repayment.RepayNextInstallments.Declining,DecliningExoticKeepNotExpectedInstallmentsWithNoCents,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\Repayment\RepayNextInstallments\Declining\DecliningExoticKeepNotExpectedInstallmentsWithNoCents.cs,RepayNextInstallments,The method has 6 parameters. Parameters: amountPaid' interestEvent' interestPrepayment' principalEvent' feesEvent' commissionsEvent
Long Parameter List,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.Repayment.RepayNextInstallments.Declining,DecliningExoticKeepNotExpectedInstallmentsWithCents,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\Repayment\RepayNextInstallments\Declining\DecliningExoticKeepNotExpectedInstallmentsWithCents.cs,RepayNextInstallments,The method has 6 parameters. Parameters: amountPaid' interestEvent' interestPrepayment' principalEvent' feesEvent' commissionsEvent
Long Parameter List,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.Repayment.RepayNextInstallments.Declining,DecliningKeepExpectedInstallments,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\Repayment\RepayNextInstallments\Declining\DecliningKeepExpectedInstallments.cs,RepayNextInstallments,The method has 6 parameters. Parameters: amountPaid' interestEvent' interestPrepayment' principalEvent' feesEvent' commissionsEvent
Long Parameter List,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.Repayment.RepayNextInstallments.Declining,DecliningKeepNotExpectedInstallments,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\Repayment\RepayNextInstallments\Declining\DecliningKeepNotExpectedInstallments.cs,RepayNextInstallments,The method has 6 parameters. Parameters: amountPaid' interestEvent' interestPrepayment' principalEvent' feesEvent' commissionsEvent
Long Parameter List,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.Repayment.RepayNextInstallments.Flat,FlatExoticKeepNotExpectedInstallmentsWithCents,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\Repayment\RepayNextInstallments\Flat\FlatExoticKeepNotExpectedInstallmentsWithCents.cs,RepayNextInstallments,The method has 6 parameters. Parameters: amountPaid' interestEvent' interestPrepayment' principalEvent' feesEvent' commissionsEvent
Long Parameter List,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.Repayment.RepayNextInstallments.Flat,FlateKeepNotExpectedInstallmentsWithCents,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\Repayment\RepayNextInstallments\Flat\FlateKeepNotExpectedInstallmentsWithCents.cs,RepayNextInstallments,The method has 6 parameters. Parameters: amountPaid' interestEvent' interestPrepayment' principalEvent' feesEvent' commissionsEvent
Long Parameter List,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.Repayment.RepayNextInstallments.Flat,FlateKeepExpectedInstallments,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\Repayment\RepayNextInstallments\Flat\FlateKeepExpectedInstallments.cs,RepayNextInstallments,The method has 6 parameters. Parameters: amountPaid' interestEvent' interestPrepayment' principalEvent' feesEvent' commissionsEvent
Long Parameter List,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.Repayment.RepayNextInstallments.Flat,FlateKeepNotExpectedInstallmentsWithNoCents,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\Repayment\RepayNextInstallments\Flat\FlateKeepNotExpectedInstallmentsWithNoCents.cs,RepayNextInstallments,The method has 6 parameters. Parameters: amountPaid' interestEvent' interestPrepayment' principalEvent' feesEvent' commissionsEvent
Long Parameter List,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.Repayment.RepayNextInstallments.Flat,FlatExoticKeepNotExpectedInstallmentsWithNoCents,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\Repayment\RepayNextInstallments\Flat\FlatExoticKeepNotExpectedInstallmentsWithNoCents.cs,RepayNextInstallments,The method has 6 parameters. Parameters: amountPaid' interestEvent' interestPrepayment' principalEvent' feesEvent' commissionsEvent
Long Parameter List,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.Repayment.RepayNextInstallments,RepayNextInstallmentsStrategy,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\Repayment\RepayNextInstallments\RepayNextInstallmentsStrategy.cs,RepayNextInstallments,The method has 6 parameters. Parameters: amountPaid' interestEvent' interestPrepayment' principalEvent' feesEvent' commissionsEvent
Long Parameter List,OpenCBS.CoreDomain.SearchResult,ClientSearchResult,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\SearchResult\ClientSearchResult.cs,ClientSearchResult,The method has 10 parameters. Parameters: pId' pName' pType' pActive' pLoanCycle' pDistrict' pCity' pBadClient' pPassportNumber' pPersonGroupBelongTo
Long Identifier,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment,CreditContractOptions,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\CreditContractOptions.cs,CreditContractOptions,The length of the parameter pAnticipatedTotalRepaymentPenaltiesBase is 39.
Long Identifier,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment,CreditContractOptions,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\CreditContractOptions.cs,CreditContractOptions,The length of the parameter pAnticipatedTotalRepaymentPenaltiesBase is 39.
Long Identifier,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment,CreditContractOptions,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\CreditContractOptions.cs,,The length of the parameter _anticipatedTotalRepaymentPenaltiesBase is 39.
Long Identifier,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment,CreditContractRepayment,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\CreditContractRepayment.cs,,The length of the parameter _maximumAmountAuthorizeToRepay is 30.
Long Identifier,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment,CreditContractRepayment,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\CreditContractRepayment.cs,,The length of the parameter _maximumAmountForEscapedMember is 30.
Long Identifier,OpenCBS.CoreDomain.Contracts.Loans,Loan,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\Loan.cs,Disburse,The length of the parameter pAlignInstallmentsDatesOnRealDisbursmentDate is 44.
Long Identifier,OpenCBS.CoreDomain.Contracts.Loans,Loan,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\Loan.cs,,The length of the parameter InitialOlbOfContractBeforeRescheduling is 38.
Long Identifier,OpenCBS.CoreDomain.Contracts.Loans.GenerateEvents,Accrual,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\GenerateEvents\Accrual.cs,GenerateLoanDisbursmentEvent,The length of the parameter pAlignInstallmentsDatesOnRealDisbursmentDate is 44.
Long Identifier,OpenCBS.CoreDomain.Contracts.Loans.GenerateEvents,Cash,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\GenerateEvents\Cash.cs,GenerateLoanDisbursmentEvent,The length of the parameter pAlignInstallmentsDatesOnRealDisbursmentDate is 44.
Long Identifier,OpenCBS.CoreDomain.Contracts.Loans.GenerateEvents,Cash,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\GenerateEvents\Cash.cs,CheckDegradeToBadLoan,The length of the parameter authorizeSeveralPastDueEventByPeriod is 36.
Long Identifier,OpenCBS.CoreDomain.Contracts.Loans.CalculateInstallments.Flat,FlatStrategy,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\CalculateInstallments\Flat\FlatStrategy.cs,FlatStrategy,The length of the parameter pInitialOlbOfContractBeforeRescheduling is 39.
Long Identifier,OpenCBS.CoreDomain.Contracts.Loans.CalculateInstallments.Flat,FlatStrategy,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\CalculateInstallments\Flat\FlatStrategy.cs,CalculateInstallments,The length of the parameter nbOfInstallmentWithoutGracePeriod is 33.
Long Identifier,OpenCBS.CoreDomain.Contracts.Loans.CalculateInstallments.Flat,FlatStrategy,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\CalculateInstallments\Flat\FlatStrategy.cs,CalculateInstallments,The length of the parameter installmentNumberWithoutGracePeriodForCapital is 45.
Long Identifier,OpenCBS.CoreDomain.Contracts.Loans.CalculateInstallments.Flat,FlatStrategy,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\CalculateInstallments\Flat\FlatStrategy.cs,CalculateInstallments,The length of the parameter installmentNumberWithoutGracePeriodForInterest is 46.
Long Identifier,OpenCBS.CoreDomain.Contracts.Loans.CalculateInstallments.Flat,FlatStrategy,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\CalculateInstallments\Flat\FlatStrategy.cs,,The length of the parameter _initialOlbOfContractBeforeRescheduling is 39.
Long Statement,OpenCBS.CoreDomain.Accounting,AccountingClosure,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Accounting\AccountingClosure.cs,GetTellerBooking,The length of the statement  "                         FiscalYear = fiscalYears.First(f => f.OpenDate <= eventItem.Date.Date && f.CloseDate == null || f.CloseDate > eventItem.Date.Date) " is 130.
Long Statement,OpenCBS.CoreDomain.Accounting,AccountingClosure,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Accounting\AccountingClosure.cs,GetTellerBooking,The length of the statement  "                         FiscalYear = fiscalYears.First(f => f.OpenDate <= eventItem.Date.Date && f.CloseDate == null || f.CloseDate > eventItem.Date.Date) " is 130.
Long Statement,OpenCBS.CoreDomain.Accounting,AccountingRuleCollection,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Accounting\AccountingRuleCollection.cs,GetSpecificAccount,The length of the statement  "                    || (item.ProductType == OProductTypes.Saving && (item.SavingProduct == null || item.SavingProduct.Id == pSavings.Product.Id))).ToList(); " is 136.
Long Statement,OpenCBS.CoreDomain.Accounting,AccountingRuleCollection,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Accounting\AccountingRuleCollection.cs,GetSpecificAccount,The length of the statement  "                    || (item.ProductType == OProductTypes.Loan && (item.LoanProduct == null || item.LoanProduct.Id == pContract.Product.Id))).ToList(); " is 131.
Long Statement,OpenCBS.CoreDomain.Accounting,DefaultAccounts,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Accounting\DefaultAccounts.cs,DefaultAccount,The length of the statement  "                new Account("2032"' "Rescheduled Loans"' 0' "RESCHEDULED_LOANS"'true' OAccountCategories.BalanceSheetAsset'pCurrencyId)' " is 120.
Long Statement,OpenCBS.CoreDomain.Accounting,DefaultAccounts,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Accounting\DefaultAccounts.cs,DefaultAccount,The length of the statement  "                new Account("2037"' "Accrued interests receivable"' 0'"ACCRUED_INTERESTS_LOANS"' true'OAccountCategories.BalanceSheetAsset'pCurrencyId)' " is 136.
Long Statement,OpenCBS.CoreDomain.Accounting,DefaultAccounts,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Accounting\DefaultAccounts.cs,DefaultAccount,The length of the statement  "                new Account("2038"' "Accrued interests on rescheduled loans"' 0'"ACCRUED_INTERESTS_RESCHEDULED_LOANS"' true'OAccountCategories.BalanceSheetAsset'pCurrencyId)' " is 158.
Long Statement,OpenCBS.CoreDomain.Accounting,DefaultAccounts,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Accounting\DefaultAccounts.cs,DefaultAccount,The length of the statement  "                new Account("2921"' "Unrecoverable Bad Loans"' 0'"UNRECO_BAD_LOANS"' true'OAccountCategories.BalanceSheetAsset'pCurrencyId)' " is 124.
Long Statement,OpenCBS.CoreDomain.Accounting,DefaultAccounts,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Accounting\DefaultAccounts.cs,DefaultAccount,The length of the statement  "                new Account("2971"' "Interest on Past Due Loans"' 0'"INTERESTS_ON_PAST_DUE_LOANS"' true' OAccountCategories.BalanceSheetAsset'pCurrencyId)' " is 139.
Long Statement,OpenCBS.CoreDomain.Accounting,DefaultAccounts,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Accounting\DefaultAccounts.cs,DefaultAccount,The length of the statement  "                new Account("2972"' "Penalties on Past Due Loans"' 0' "PENALTIES_ON_PAST_DUE_LOANS_ASSET"' true' OAccountCategories.BalanceSheetAsset'pCurrencyId)' " is 147.
Long Statement,OpenCBS.CoreDomain.Accounting,DefaultAccounts,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Accounting\DefaultAccounts.cs,DefaultAccount,The length of the statement  "                new Account("2991"' "Loan Loss Reserve"' 0' "LOAN_LOSS_RESERVE"'false' OAccountCategories.BalanceSheetLiabilities'pCurrencyId)' " is 127.
Long Statement,OpenCBS.CoreDomain.Accounting,DefaultAccounts,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Accounting\DefaultAccounts.cs,DefaultAccount,The length of the statement  "                new Account("3882"' "Deferred Income"' 0' "DEFERRED_INCOME"' false'OAccountCategories.BalanceSheetLiabilities'pCurrencyId)' " is 123.
Long Statement,OpenCBS.CoreDomain.Accounting,DefaultAccounts,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Accounting\DefaultAccounts.cs,DefaultAccount,The length of the statement  "                new Account("5211"' "Loan Loss Allowance on Current Loans"' 0'"LIABILITIES_LOAN_LOSS_CURRENT"' false'OAccountCategories.BalanceSheetLiabilities'pCurrencyId)' " is 157.
Long Statement,OpenCBS.CoreDomain.Accounting,DefaultAccounts,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Accounting\DefaultAccounts.cs,DefaultAccount,The length of the statement  "                new Account("6712"' "Provision on bas loans"' 0'"PROVISION_ON_BAD_LOANS"' true'OAccountCategories.ProfitAndLossExpense'pCurrencyId)' " is 132.
Long Statement,OpenCBS.CoreDomain.Accounting,DefaultAccounts,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Accounting\DefaultAccounts.cs,DefaultAccount,The length of the statement  "                new Account("6731"' "Loan Loss Allowance on Current Loans"' 0'"EXPENSES_LOAN_LOSS_CURRENT"' true'OAccountCategories.ProfitAndLossExpense'pCurrencyId)' " is 150.
Long Statement,OpenCBS.CoreDomain.Accounting,DefaultAccounts,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Accounting\DefaultAccounts.cs,DefaultAccount,The length of the statement  "                new Account("7712"' "Provision write-off"' 0'"PROVISION_WRITE_OFF"' false'OAccountCategories.ProfitAndLossExpense'pCurrencyId)' " is 127.
Long Statement,OpenCBS.CoreDomain.Accounting,DefaultAccounts,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Accounting\DefaultAccounts.cs,DefaultAccount,The length of the statement  "                new Account("7021"' "Interests on cash credit"' 0'"INTERESTS_ON_CASH_CREDIT"' false'OAccountCategories.ProfitAndLossIncome'pCurrencyId)' " is 136.
Long Statement,OpenCBS.CoreDomain.Accounting,DefaultAccounts,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Accounting\DefaultAccounts.cs,DefaultAccount,The length of the statement  "                new Account("7022"' "Interests on rescheduled loans"' 0'"INTERESTS_ON_RESCHEDULED_LOANS"' false'OAccountCategories.ProfitAndLossIncome'pCurrencyId)' " is 148.
Long Statement,OpenCBS.CoreDomain.Accounting,DefaultAccounts,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Accounting\DefaultAccounts.cs,DefaultAccount,The length of the statement  "                new Account("7027"' "Penalties on past due loans"'0' "PENALTIES_ON_PAST_DUE_LOANS_INCOME"' false'OAccountCategories.ProfitAndLossIncome'pCurrencyId)' " is 149.
Long Statement,OpenCBS.CoreDomain.Accounting,DefaultAccounts,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Accounting\DefaultAccounts.cs,DefaultAccount,The length of the statement  "                new Account("7028"' "Interests on bad loans"' 0'"INTERESTS_ON_BAD_LOANS"' false'OAccountCategories.ProfitAndLossIncome'pCurrencyId)' " is 132.
Long Statement,OpenCBS.CoreDomain.Accounting,DefaultAccounts,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Accounting\DefaultAccounts.cs,DefaultAccount,The length of the statement  "                new Account("7731"' "Resumption of Loan Loss Allowance on Current Loan"' 0'"INCOME_LOAN_LOSS_CURRENT"' false'OAccountCategories.ProfitAndLossIncome'pCurrencyId)' " is 161.
Long Statement,OpenCBS.CoreDomain.Accounting,DefaultAccounts,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Accounting\DefaultAccounts.cs,DefaultAccount,The length of the statement  "                new Account("1322"' "Accounts and Terms Loans"' 0'"ACCOUNTS_AND_TERM_LOANS"' false'OAccountCategories.BalanceSheetLiabilities'pCurrencyId)' " is 139.
Long Statement,OpenCBS.CoreDomain.Accounting,DefaultAccounts,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Accounting\DefaultAccounts.cs,DefaultAccount,The length of the statement  "                new Account("2261"' "Account payable interests on Savings Books"' 0' "ACCOUNT_PAYABLE_INTERESTS_ON_SAVINGS_BOOKS"' false' OAccountCategories.ProfitAndLossIncome' pCurrencyId)' " is 175.
Long Statement,OpenCBS.CoreDomain.Accounting,DefaultAccounts,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Accounting\DefaultAccounts.cs,DefaultAccount,The length of the statement  "                new Account("60132"' "Interests on deposit account"' 0' "INTERESTS_ON_DEPOSIT_ACCOUNT"' true' OAccountCategories.ProfitAndLossIncome' pCurrencyId)' " is 147.
Long Statement,OpenCBS.CoreDomain.Accounting,DefaultAccounts,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Accounting\DefaultAccounts.cs,DefaultAccount,The length of the statement  "                new Account("42802"' "RECOVERY OF CHARGED OFF ASSETS"' 0' "RECOVERY_OF_CHARGED_OFF_ASSETS"' false' OAccountCategories.ProfitAndLossIncome' pCurrencyId)' " is 152.
Long Statement,OpenCBS.CoreDomain.Accounting,DefaultAccounts,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Accounting\DefaultAccounts.cs,DefaultAccount,The length of the statement  "                new Account("9330201"' "NON_BALANCE_COMMITTED_FUNDS"' 0' "NON_BALANCE_COMMITTED_FUNDS"' false' OAccountCategories.ProfitAndLossIncome' pCurrencyId)' " is 148.
Long Statement,OpenCBS.CoreDomain.Accounting,DefaultAccounts,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Accounting\DefaultAccounts.cs,DefaultAccount,The length of the statement  "                new Account("9330202"' "NON_BALANCE_VALIDATED_LOANS"' 0' "NON_BALANCE_VALIDATED_LOANS"' true' OAccountCategories.BalanceSheetAsset' pCurrencyId)' " is 145.
Long Statement,OpenCBS.CoreDomain.Accounting,DefaultAccounts,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Accounting\DefaultAccounts.cs,DefaultAccount,The length of the statement  "                new Account("223"' "Compulsory Savings"' 0' "COMPULSORY_SAVINGS"' false' OAccountCategories.BalanceSheetLiabilities' pCurrencyId)' " is 130.
Long Statement,OpenCBS.CoreDomain.Accounting,DefaultAccounts,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Accounting\DefaultAccounts.cs,DefaultAccount,The length of the statement  "                new Account("2262"' "Account payable interests on Term Deposit"' 0' "ACCOUNT_PAYABLE_INTERESTS_ON_TERM_DEPOSIT"' false' OAccountCategories.ProfitAndLossIncome' pCurrencyId)' " is 173.
Long Statement,OpenCBS.CoreDomain.Accounting,DefaultAccounts,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Accounting\DefaultAccounts.cs,DefaultAccount,The length of the statement  "                new Account("2263"' "Account payable interests on Compulsory Savings"' 0' "ACCOUNT_PAYABLE_INTERESTS_ON_COMPULSORY_SAVINGS"' false' OAccountCategories.ProfitAndLossIncome' pCurrencyId) " is 184.
Long Statement,OpenCBS.CoreDomain.Accounting,PaymentMethod,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Accounting\PaymentMethod.cs,DeterminePaymentMethodByName,The length of the statement  "            else if (Name == Enum.GetName(typeof(OPaymentMethods)' OPaymentMethods.Withdrawal)) Method = OPaymentMethods.Withdrawal; " is 120.
Long Statement,OpenCBS.CoreDomain.Accounting,PaymentMethod,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Accounting\PaymentMethod.cs,DeterminePaymentMethodByName,The length of the statement  "            else if (Name == Enum.GetName(typeof(OPaymentMethods)' OPaymentMethods.DirectDebit)) Method = OPaymentMethods.DirectDebit; " is 122.
Long Statement,OpenCBS.CoreDomain.Accounting,PaymentMethod,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Accounting\PaymentMethod.cs,DeterminePaymentMethodByName,The length of the statement  "            else if (Name == Enum.GetName(typeof(OPaymentMethods)' OPaymentMethods.WireTransfer)) Method = OPaymentMethods.WireTransfer; " is 124.
Long Statement,OpenCBS.CoreDomain,ActionItemObject,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\ActionItemObject.cs,GetHashCode,The length of the statement  "            return string.IsNullOrEmpty(_className + _methodName) != null ? (_className + _methodName).GetHashCode() : base.GetHashCode(); " is 126.
Long Statement,OpenCBS.CoreDomain.Clients,Group,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Clients\Group.cs,DeleteMember,The length of the statement  "            Member tempMember = _members.FirstOrDefault(member => ((Person)member.Tiers).IdentificationData == ((Person)pMember.Tiers).IdentificationData); " is 143.
Long Statement,OpenCBS.CoreDomain.Contracts.Loans.CalculateInstallments.Declining,ExoticStrategy,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\CalculateInstallments\Declining\ExoticStrategy.cs,CalculateInstallments,The length of the statement  "                    ExoticInstallment exoInstallment = _contract.Product.ExoticProduct.GetExoticInstallment(number - _contract.GracePeriod.Value - 1); " is 130.
Long Statement,OpenCBS.CoreDomain.Contracts.Loans.CalculateInstallments.Declining,ExoticStrategy,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\CalculateInstallments\Declining\ExoticStrategy.cs,CalculateInstallments,The length of the statement  "                    installment.InterestsRepayment = Math.Round(installment.InterestsRepayment.Value / _contract.NbOfDaysInTheInstallment * (_contract.FirstInstallmentDate - _contract.StartDate).Days' _roundingPoint); " is 197.
Long Statement,OpenCBS.CoreDomain.Contracts.Loans.CalculateInstallments.Declining,FixedPrincipalStrategy,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\CalculateInstallments\Declining\FixedPrincipalStrategy.cs,CalculateInstallments,The length of the statement  "                    installment.InterestsRepayment = Math.Round(installment.InterestsRepayment.Value / _contract.NbOfDaysInTheInstallment * (_contract.FirstInstallmentDate - _contract.StartDate).Days' _roundingPoint); " is 197.
Long Statement,OpenCBS.CoreDomain.Contracts.Loans,Loan,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\Loan.cs,GetMeetingDate,The length of the statement  "            return _nwdS.GetTheNearestValidDate(date' _generalSettings.IsIncrementalDuringDayOff' _generalSettings.DoNotSkipNonWorkingDays' false); " is 135.
Long Statement,OpenCBS.CoreDomain.Contracts.Loans,Loan,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\Loan.cs,CalculateInstallmentDate,The length of the statement  "            pStartDate = pStartDate.AddMonths(_installmentType.NbOfMonths * pInstallmentNumber).AddDays(_installmentType.NbOfDays * pInstallmentNumber); " is 140.
Long Statement,OpenCBS.CoreDomain.Contracts.Loans,Loan,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\Loan.cs,CalculateInstallmentDate,The length of the statement  "            return _nwdS.GetTheNearestValidDate(pStartDate' _generalSettings.IsIncrementalDuringDayOff' _generalSettings.DoNotSkipNonWorkingDays' true); " is 140.
Long Statement,OpenCBS.CoreDomain.Contracts.Loans,Loan,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\Loan.cs,CalculateInstallmentDateWithOutCheckingWeekend,The length of the statement  "            pStartDate = pStartDate.AddMonths(_installmentType.NbOfMonths * pInstallmentNumber).AddDays(_installmentType.NbOfDays * pInstallmentNumber); " is 140.
Long Statement,OpenCBS.CoreDomain.Contracts.Loans,Loan,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\Loan.cs,CalculateInstallmentDateWithOutCheckingWeekend,The length of the statement  "            return _nwdS.GetTheNearestValidDate(pStartDate' _generalSettings.IsIncrementalDuringDayOff' _generalSettings.DoNotSkipNonWorkingDays' false); " is 141.
Long Statement,OpenCBS.CoreDomain.Contracts.Loans,Loan,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\Loan.cs,CalculateInstallmentExpectedDate,The length of the statement  "            pStartDate = pStartDate.AddMonths(_installmentType.NbOfMonths * pInstallmentNumber).AddDays(_installmentType.NbOfDays * pInstallmentNumber); " is 140.
Long Statement,OpenCBS.CoreDomain.Contracts.Loans,Loan,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\Loan.cs,CalculateAlignDisbursementDate,The length of the statement  "            pFirstInstallmentDate = pFirstInstallmentDate.AddMonths(-installmentType.NbOfMonths).AddDays(-installmentType.NbOfDays); " is 120.
Long Statement,OpenCBS.CoreDomain.Contracts.Loans,Loan,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\Loan.cs,CheckDateOfInstallment,The length of the statement  "            return _nwdS.GetTheNearestValidDate(pStartDate' _generalSettings.IsIncrementalDuringDayOff' _generalSettings.DoNotSkipNonWorkingDays' true); " is 140.
Long Statement,OpenCBS.CoreDomain.Contracts.Loans,Loan,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\Loan.cs,VPM,The length of the statement  "            return (pOLB.Value * Convert.ToDecimal(_interestRate * (decimal) Math.Pow((double) (_interestRate + 1)' pNbOfInstallmentsToPay))) / " is 131.
Long Statement,OpenCBS.CoreDomain.Contracts.Loans,Loan,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\Loan.cs,VPM,The length of the statement  "            return (pOLB.Value * Convert.ToDecimal(pInterestRate * (decimal) Math.Pow((double) (pInterestRate + 1)' pNbOfInstallmentsToPay))) / " is 131.
Long Statement,OpenCBS.CoreDomain.Contracts.Loans,Loan,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\Loan.cs,CalculateInstallments,The length of the statement  "            CalculateInstallmentsOptions cIo = new CalculateInstallmentsOptions(_startDate' Product.LoanType' Product.IsExotic' this' pChangeDate); " is 135.
Long Statement,OpenCBS.CoreDomain.Contracts.Loans,Loan,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\Loan.cs,CalculateInstallments,The length of the statement  "            CalculateInstallmentsStrategy cIs = new CalculateInstallmentsStrategy(cIo' _amount' _nbOfInstallments' _generalSettings); " is 121.
Long Statement,OpenCBS.CoreDomain.Contracts.Loans,Loan,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\Loan.cs,CalculateExpectedOlb,The length of the statement  "                    olbTable[n] = initialAmount - (GetRepaymentEventAmountByNumber(n + 1) - InstallmentList[n].PaidCapital) + GetTrancheEventAmountByNumber(n); " is 139.
Long Statement,OpenCBS.CoreDomain.Contracts.Loans,Loan,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\Loan.cs,CalculateMaximumAmountAuthorizedToRepay,The length of the statement  "            CreditContractRepayment cCR = new CreditContractRepayment(fakeLoan' cCO' pDate' pNumber' _user' _generalSettings' _nwdS); " is 121.
Long Statement,OpenCBS.CoreDomain.Contracts.Loans,Loan,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\Loan.cs,CalculateMaximumAmountToRegradingLoan,The length of the statement  "                new CreditContractOptions(Product.LoanType' pKeepExpectedInstallment' pCancelFees' pManualFeesAmount' pManualCommissionAmount' " is 126.
Long Statement,OpenCBS.CoreDomain.Contracts.Loans,Loan,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\Loan.cs,Repay,The length of the statement  "            if (AmountComparer.Compare(pAmountPaid' cCr.MaximumAmountAuthorizeToRepay' pNumber) == 0 && (pNumber != InstallmentList.Count) && AllInstallmentsRepaid) " is 152.
Long Statement,OpenCBS.CoreDomain.Contracts.Loans,Loan,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\Loan.cs,Repay,The length of the statement  "                if (!keepExpectedInstallment && (paymentType == OPaymentType.PartialPayment || paymentType == OPaymentType.TotalPayment)) " is 121.
Long Statement,OpenCBS.CoreDomain.Contracts.Savings.CalculateInterests,DateCalculationStrategy,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Savings\CalculateInterests\DateCalculationStrategy.cs,DateCalculationWeekly,The length of the statement  "            int numbersOfDayToNextPostingDate = (weekEndDay2 <= (int)lastDate.DayOfWeek) ? 7 - ((int)lastDate.DayOfWeek - (int)weekEndDay2) " is 127.
Long Statement,OpenCBS.CoreDomain.Contracts.Savings.CalculateInterests.Posting,EndOfWeek,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Savings\CalculateInterests\Posting\EndOfWeek.cs,PostingInterests,The length of the statement  "                    Description = string.Format("Posting interests for period : {0:d} to {1:d} : {2}"' lastPostingDate' currentPostingDate' _saving.Code)' " is 134.
Long Statement,OpenCBS.CoreDomain.Contracts.Savings.CalculateInterests.Posting,EndOfMonth,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Savings\CalculateInterests\Posting\EndOfMonth.cs,PostingInterests,The length of the statement  "                    Description = string.Format("Posting interests for period : {0:d} to {1:d} : {2}"' lastPostingDate' currentPostingDate' _saving.Code)' " is 134.
Long Statement,OpenCBS.CoreDomain.Contracts.Savings.CalculateInterests.Posting,EndOfYear,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Savings\CalculateInterests\Posting\EndOfYear.cs,PostingInterests,The length of the statement  "                DateTime currentPostingDate = new DateTime(lastPostingDate.AddYears(1).Year' 01' 01' DateTime.Now.Hour' DateTime.Now.Minute' DateTime.Now.Second); " is 146.
Long Statement,OpenCBS.CoreDomain.Contracts.Savings.CalculateInterests.Posting,EndOfYear,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Savings\CalculateInterests\Posting\EndOfYear.cs,PostingInterests,The length of the statement  "                    Description = string.Format("Posting interests for period : {0:d} to {1:d} : {2}"' lastPostingDate' currentPostingDate' _saving.Code)' " is 134.
Long Statement,OpenCBS.CoreDomain.Contracts.Savings,SavingsContract,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Savings\SavingsContract.cs,GetLastAccrualDate,The length of the statement  "            SavingInterestsAccrualEvent lastClosure = (SavingInterestsAccrualEvent)Events.OrderByDescending(item => item.Date).FirstOrDefault(item => item is SavingInterestsAccrualEvent && !item.Deleted); " is 192.
Long Statement,OpenCBS.CoreDomain.Contracts.Savings,SavingsContract,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Savings\SavingsContract.cs,FillChartOfAccounts,The length of the statement  "                    Select(item => new Account(item.Number' item.Label' 0' item.TypeCode' item.DebitPlus' item.AccountCategory' Product != null && Product.Currency != null ? Product.Currency.Id : 1)).ToList()); " is 190.
Long Statement,OpenCBS.CoreDomain.Contracts.Savings,SavingsContract,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Savings\SavingsContract.cs,GenerateClosureEvent,The length of the statement  "            if (Events.Find(item => item.Code == scle.Code && item.Date.Date == scle.Date.Date && item is SavingClosureEvent) != null) " is 122.
Long Statement,OpenCBS.CoreDomain.Contracts.Savings,SavingBookContract,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Savings\SavingBookContract.cs,Withdraw,The length of the statement  "               withdrawEvent.Fee = Product.WithdrawFeesType == OSavingsFeesType.Flat ? FlatWithdrawFees : pAmount * RateWithdrawFees.Value; " is 124.
Long Statement,OpenCBS.CoreDomain.Contracts.Savings,SavingBookContract,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Savings\SavingBookContract.cs,DebitTransfer,The length of the statement  "                    transferEvent.Fee = Product.TransferFeesType == OSavingsFeesType.Flat ? FlatTransferFees : pAmount * RateTransferFees.Value; " is 124.
Long Statement,OpenCBS.CoreDomain.Contracts.Savings,SavingBookContract,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Savings\SavingBookContract.cs,PostingEndOfDay,The length of the statement  "                events.AddRange(AddSavingEvent(CalculateInterest(new DateTime(lastPostingDate.Year' lastPostingDate.Month' lastPostingDate.Day' " is 127.
Long Statement,OpenCBS.CoreDomain.Contracts.Savings,SavingBookContract,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Savings\SavingBookContract.cs,PostingEndOfDay,The length of the statement  "                events.AddRange(AddSavingEvent(PostingInterests(new DateTime(lastPostingDate.Year' lastPostingDate.Month' lastPostingDate.Day' " is 126.
Long Statement,OpenCBS.CoreDomain.Contracts.Savings,SavingBookContract,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Savings\SavingBookContract.cs,PostingEndOfWeek,The length of the statement  "                events.AddRange(AddSavingEvent(CalculateInterest(new DateTime(lastPostingDate.Year' lastPostingDate.Month' lastPostingDate.Day' " is 127.
Long Statement,OpenCBS.CoreDomain.Contracts.Savings,SavingBookContract,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Savings\SavingBookContract.cs,PostingEndOfWeek,The length of the statement  "                events.AddRange(AddSavingEvent(PostingInterests(new DateTime(lastPostingDate.Year' lastPostingDate.Month' lastPostingDate.Day' " is 126.
Long Statement,OpenCBS.CoreDomain.Contracts.Loans.GenerateEvents,Accrual,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\GenerateEvents\Accrual.cs,GenerateLoanDisbursmentEvent,The length of the statement  "                        pLoan.GetInstallment(0).InterestsRepayment += (Convert.ToDecimal(pLoan.InterestRate) * diffDays * pLoan.Amount / (double)nbOfDaysInPeriod); " is 139.
Long Statement,OpenCBS.CoreDomain.Contracts.Loans.GenerateEvents,Accrual,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\GenerateEvents\Accrual.cs,GenerateLoanDisbursmentEvent,The length of the statement  "                        pLoan.GetInstallment(0).InterestsRepayment -= (Convert.ToDecimal(pLoan.InterestRate) * diffDays * pLoan.Amount / (double)nbOfDaysInPeriod); " is 139.
Long Statement,OpenCBS.CoreDomain.Contracts.Loans.GenerateEvents,Accrual,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\GenerateEvents\Accrual.cs,CalculateRemainingInterests,The length of the statement  "                        if(pLoan.GetInstallment(installment.Number - 2).IsRepaid && pLoan.GetInstallment(installment.Number - 2).ExpectedDate > pDate) " is 126.
Long Statement,OpenCBS.CoreDomain.Contracts.Loans.GenerateEvents,Cash,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\GenerateEvents\Cash.cs,GenerateLoanDisbursmentEvent,The length of the statement  "                        pLoan.GetInstallment(0).InterestsRepayment += (Convert.ToDecimal(pLoan.InterestRate) * diffDays * pLoan.Amount / (double)nbOfDaysInPeriod); " is 139.
Long Statement,OpenCBS.CoreDomain.Contracts.Loans.GenerateEvents,Cash,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\GenerateEvents\Cash.cs,GenerateLoanDisbursmentEvent,The length of the statement  "                        pLoan.GetInstallment(0).InterestsRepayment -= (Convert.ToDecimal(pLoan.InterestRate) * diffDays * pLoan.Amount / (double)nbOfDaysInPeriod); " is 139.
Long Statement,OpenCBS.CoreDomain.Contracts.Loans.GenerateEvents,Cash,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\GenerateEvents\Cash.cs,GenerateLoanDisbursmentEvent,The length of the statement  "                                           : new LoanDisbursmentEvent { Date = pDisburseDate' Amount = pLoan.Amount' Commissions = null' ClientType = pLoan.ClientType }; " is 126.
Long Statement,OpenCBS.CoreDomain.Contracts.Loans.GenerateEvents,Cash,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\GenerateEvents\Cash.cs,CheckDegradeToBadLoan,The length of the statement  "            OCurrency cashBalance = 0; //pLoan.ChartOfAccounts.GetAccountByNumber(OAccounts.CASH_CREDIT' pLoan.Product.Currency.Id' pLoan' OBookingDirections.Both).Balance; " is 160.
Long Statement,OpenCBS.CoreDomain.Contracts.Loans.CalculateInstallments.Flat,ExoticStrategy,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\CalculateInstallments\Flat\ExoticStrategy.cs,CalculateInstallments,The length of the statement  "            OCurrency totalInterestsRepayment = _contract.Amount * Convert.ToDecimal(_contract.InterestRate) * (_contract.NbOfInstallments - _contract.GracePeriod.Value); " is 158.
Long Statement,OpenCBS.CoreDomain.Contracts.Loans.CalculateInstallments.Flat,ExoticStrategy,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\CalculateInstallments\Flat\ExoticStrategy.cs,CalculateInstallments,The length of the statement  "                    installment.InterestsRepayment = Math.Round(installment.OLB.Value * Convert.ToDecimal(_contract.InterestRate) + decIr' _roundingPoint); " is 135.
Long Statement,OpenCBS.CoreDomain.Contracts.Loans.CalculateInstallments.Flat,ExoticStrategy,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\CalculateInstallments\Flat\ExoticStrategy.cs,CalculateInstallments,The length of the statement  "                    ExoticInstallment exoInstallment = _contract.Product.ExoticProduct.GetExoticInstallment(number - _contract.GracePeriod.Value - 1); " is 130.
Long Statement,OpenCBS.CoreDomain.Contracts.Loans.CalculateInstallments.Flat,ExoticStrategy,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\CalculateInstallments\Flat\ExoticStrategy.cs,CalculateInstallments,The length of the statement  "                    installment.InterestsRepayment = Math.Round(installment.InterestsRepayment.Value / _contract.NbOfDaysInTheInstallment * (_contract.FirstInstallmentDate - _contract.StartDate).Days' _roundingPoint); " is 197.
Long Statement,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.MaxRepayment,CalculateAmountToRepaySpecifiedInstallmentStrategy,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\MaxRepayment\CalculateAmountToRepaySpecifiedInstallmentStrategy.cs,MaxAmountOfRealSchedule,The length of the statement  "                    interestPayment += Math.Round(interest.Value' roundingPoint' MidpointRounding.AwayFromZero) - installment.PaidInterests; " is 120.
Long Statement,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.MaxRepayment,CalculateAmountToRepaySpecifiedInstallmentStrategy,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\MaxRepayment\CalculateAmountToRepaySpecifiedInstallmentStrategy.cs,CalculateLateAndAnticipatedFees,The length of the statement  "            new Repayment.RepayLateInstallments.CalculateInstallments(_cCo' contract' _user' _generalSettings'_nWds).CalculateNewInstallmentsWithLateFees(pDate); " is 149.
Long Statement,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.MaxRepayment,CalculateMaximumAmountToRegradingLoanStrategy,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\MaxRepayment\CalculateMaximumAmountToRegradingLoanStrategy.cs,MaxAmountOfRealSchedule,The length of the statement  "                    interestPayment += Math.Round(interest.Value' roundingPoint' MidpointRounding.AwayFromZero) - installment.PaidInterests;  " is 120.
Long Statement,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.MaxRepayment,CalculateMaximumAmountToRegradingLoanStrategy,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\MaxRepayment\CalculateMaximumAmountToRegradingLoanStrategy.cs,_CalculateLateAndAnticipatedFees,The length of the statement  "            new Repayment.RepayLateInstallments.CalculateInstallments(_cCo' contract' _user' _generalSettings'_nWds).CalculateNewInstallmentsWithLateFees(pDate); " is 149.
Long Statement,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.MaxRepayment,CalculateMaximumAmountToRepayStrategy,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\MaxRepayment\CalculateMaximumAmountToRepayStrategy.cs,MaxAmountOfRealSchedule,The length of the statement  "                if (installment.Number > 1 && installment.ExpectedDate > payDate && _contract.GetInstallment(installment.Number - 2).ExpectedDate < payDate) " is 140.
Long Statement,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.MaxRepayment,CalculateMaximumAmountToRepayStrategy,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\MaxRepayment\CalculateMaximumAmountToRepayStrategy.cs,CalculateMaximumAmountForEscapedMember,The length of the statement  "                if (!getInstallment.IsRepaid && getInstallment.ExpectedDate > pDate || (getInstallment.ExpectedDate == pDate && _contract.EscapedMember != null)) " is 145.
Long Statement,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.MaxRepayment,CalculateMaximumAmountToRepayStrategy,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\MaxRepayment\CalculateMaximumAmountToRepayStrategy.cs,CalculateMaximumAmountForEscapedMember,The length of the statement  "                    if (getInstallment.ExpectedDate == pDate && _contract.EscapedMember != null && _contract.Product.AnticipatedTotalRepaymentPenaltiesBase != OAnticipatedRepaymentPenaltiesBases.RemainingInterest) " is 193.
Long Statement,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.MaxRepayment,CalculateMaximumAmountToRepayStrategy,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\MaxRepayment\CalculateMaximumAmountToRepayStrategy.cs,CalculateMaximumAmountForEscapedMember,The length of the statement  "                    if (getInstallment.ExpectedDate > pDate && _contract.EscapedMember != null && aTprComission > 0 && _contract.Product.AnticipatedTotalRepaymentPenaltiesBase != OAnticipatedRepaymentPenaltiesBases.RemainingInterest) " is 213.
Long Statement,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.MaxRepayment,CalculateMaximumAmountToRepayStrategy,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\MaxRepayment\CalculateMaximumAmountToRepayStrategy.cs,CalculateLateAndAnticipatedFees,The length of the statement  "            new Repayment.RepayLateInstallments.CalculateInstallments(_cCo' contract' _user' _generalSettings'_nWds).CalculateNewInstallmentsWithLateFees(pDate); " is 149.
Long Statement,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.MaxRepayment,CalculateMaximumAmountToRepayStrategy,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\MaxRepayment\CalculateMaximumAmountToRepayStrategy.cs,CalculateLateAndAnticipatedFees,The length of the statement  "            return _contract.UseCents ? Math.Round(fees.Value' 2' MidpointRounding.AwayFromZero) : Math.Round(fees.Value' 0' MidpointRounding.AwayFromZero); " is 144.
Long Statement,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.CalculateFeesForAnticipatedRepayment.BaseToCalculateFeesForAnticipatedRepayment,RemainingInterest,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\CalculateFeesForAnticipatedRepayment\BaseToCalculateFeesForAnticipatedRepayment\RemainingInterest.cs,BaseToCalculateFees,The length of the statement  "            return (_contract.CalculateRemainingInterests().Value - _contract.CalculateRemainingInterests(pDate).Value) * Convert.ToDecimal(_contract.AnticipatedTotalRepaymentPenalties); " is 174.
Long Statement,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.Repayment.RepayLateInstallments,CalculationBaseForLateFees,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\Repayment\RepayLateInstallments\CalculationBaseForLateFees.cs,FeesBasedOnInitialAmount,The length of the statement  "                int pastDueDays = pForClosure ? pContract.CalculatePastDueForClosure(pDate) : pContract.CalculatePastDueSinceLastRepayment(pDate); " is 130.
Long Statement,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.Repayment.RepayLateInstallments,CalculationBaseForLateFees,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\Repayment\RepayLateInstallments\CalculationBaseForLateFees.cs,FeesBasedOnInitialAmount,The length of the statement  "                OCurrency fees = pContract.Amount * Convert.ToDecimal(pContract.NonRepaymentPenalties.InitialAmount) * (double)pastDueDays; " is 123.
Long Statement,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.Repayment.RepayLateInstallments,CalculationBaseForLateFees,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\Repayment\RepayLateInstallments\CalculationBaseForLateFees.cs,FeesBasedOnInitialAmount,The length of the statement  "                OCurrency amount = pContract.UseCents ? Math.Round(fees.Value' 2' MidpointRounding.AwayFromZero) : Math.Round(fees.Value' 0' MidpointRounding.AwayFromZero); " is 156.
Long Statement,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.Repayment.RepayLateInstallments,CalculationBaseForLateFees,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\Repayment\RepayLateInstallments\CalculationBaseForLateFees.cs,AnticipateFeesBasedOnOverdueInterest,The length of the statement  "            OCurrency fees = _AnticipateCalculateNonRepaymentPenalties(pContract' pDate' pInstallmentNumber' pPaymentType' pGeneralSettings); " is 129.
Long Statement,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.Repayment.RepayLateInstallments,CalculationBaseForLateFees,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\Repayment\RepayLateInstallments\CalculationBaseForLateFees.cs,CalculateNonRepaymentPenalties,The length of the statement  "                if (rPayment.InstallmentNumber <= installment.Number && rPayment.Deleted == false && rPayment.Date != pDate && pDate > installment.ExpectedDate && installment.PaidFees != 0) " is 173.
Long Statement,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.Repayment.RepayLateInstallments,CalculationBaseForLateFees,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\Repayment\RepayLateInstallments\CalculationBaseForLateFees.cs,CalculateNonRepaymentPenalties,The length of the statement  "            amount = pContract.UseCents ? Math.Round(amount' 2' MidpointRounding.AwayFromZero) : Math.Round(amount' 0' MidpointRounding.AwayFromZero); " is 138.
Long Statement,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.Repayment.RepayLateInstallments,CalculationBaseForLateFees,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\Repayment\RepayLateInstallments\CalculationBaseForLateFees.cs,_AnticipateCalculateNonRepaymentPenalties,The length of the statement  "            if (((preInstallment.IsRepaid) || (installmentNumber == 1)) || (!preInstallment.IsRepaid && preInstallment.ExpectedDate < pDate)) " is 129.
Long Statement,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.Repayment.RepayLateInstallments,CalculationBaseForLateFees,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\Repayment\RepayLateInstallments\CalculationBaseForLateFees.cs,_AnticipateCalculateNonRepaymentPenalties,The length of the statement  "                        //amountHasToPay = (installment.InterestsRepayment - amountHasToPay) * pContract.EscapedMember.LoanShareAmount / pContract.Amount; " is 130.
Long Statement,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.Repayment.RepayLateInstallments,CalculationBaseForLateFees,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\Repayment\RepayLateInstallments\CalculationBaseForLateFees.cs,AnticipateCalculateFeesBasedOnOlb,The length of the statement  "            if (((preInstallment.IsRepaid) || (installmentNumber == 1)) || (!preInstallment.IsRepaid && preInstallment.ExpectedDate <= date)) " is 129.
Long Statement,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.Repayment.RepayLateInstallments,CalculationBaseForLateFees,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\Repayment\RepayLateInstallments\CalculationBaseForLateFees.cs,AnticipateCalculateFeesBasedOnOlb,The length of the statement  "                    amountHasToPay = pContract.CalculateExpectedOlb(installmentNumber' false) - pContract.GetInstallment(installmentNumber - 1).PaidCapital; " is 136.
Long Statement,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.Repayment.RepayLateInstallments,CalculateInstallments,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\Repayment\RepayLateInstallments\CalculateInstallments.cs,CalculateAnticipateRepayment,The length of the statement  "                                if (_contract.GetNotDeletedRepaymentEvent().Date > expectedDate && _contract.GetNotDeletedRepaymentEvent().Interests > 0 " is 120.
Long Statement,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.Repayment.RepayLateInstallments,CalculateInstallments,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\Repayment\RepayLateInstallments\CalculateInstallments.cs,CalculateAnticipateRepayment,The length of the statement  "                    commission += CalculateCommision(pDate' getInstallment.Number' pPaymentType' paidAmount - interests - willBePaidAmount' ref calculated); " is 136.
Long Statement,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.Repayment.RepayLateInstallments,CalculateInstallments,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\Repayment\RepayLateInstallments\CalculateInstallments.cs,CalculateAnticipateRepayment,The length of the statement  "                    if (getInstallment.ExpectedDate == pDate && _contract.EscapedMember != null && _contract.Product.AnticipatedTotalRepaymentPenaltiesBase != OAnticipatedRepaymentPenaltiesBases.RemainingInterest) " is 193.
Long Statement,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.Repayment.RepayLateInstallments,CalculateInstallments,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\Repayment\RepayLateInstallments\CalculateInstallments.cs,CalculateAnticipateRepayment,The length of the statement  "                    if (getInstallment.ExpectedDate > pDate && _contract.EscapedMember != null && aTprComission > 0 && _contract.Product.AnticipatedTotalRepaymentPenaltiesBase != OAnticipatedRepaymentPenaltiesBases.RemainingInterest) " is 213.
Long Statement,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.Repayment.RepayLateInstallments,CalculateInstallments,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\Repayment\RepayLateInstallments\CalculateInstallments.cs,CalculateDecliningFixedInstallments,The length of the statement  "            OCurrency installmentVpm = _contract.VPM(olb'_contract.InstallmentList.Count - number + 1'_contract.InterestRate/numberOfPeriods).Value; " is 136.
Long Statement,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.Repayment.RepayLateInstallments,CalculateInstallments,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\Repayment\RepayLateInstallments\CalculateInstallments.cs,CalculateDecliningFixedPrincipal,The length of the statement  "            OCurrency capitalRepayment = number == 1 ? olb / (_contract.InstallmentList.Count - _contract.GracePeriod.Value) : olb / (_contract.InstallmentList.Count - number + 1); " is 168.
Long Statement,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.Repayment.RepayLateInstallments,CalculateInstallments,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\Repayment\RepayLateInstallments\CalculateInstallments.cs,CalculateRemainsInstallmentProportinaly,The length of the statement  "                    installment.InterestsRepayment = Math.Round(principalAmount.Value * (decimal)_contract.InterestRate * days / daysInInstallments' roundingPoint' " is 143.
Long Statement,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.Repayment.RepayNextInstallments.Declining,DecliningExoticKeepNotExpectedInstallmentsWithNoCents,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\Repayment\RepayNextInstallments\Declining\DecliningExoticKeepNotExpectedInstallmentsWithNoCents.cs,RepayNextInstallments,The length of the statement  "                        baseTocalculatePrincipalCoeff += _contract.Product.ExoticProduct.GetExoticInstallment(i - _contract.GracePeriod.Value).PrincipalCoeff; " is 134.
Long Statement,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.Repayment.RepayNextInstallments.Declining,DecliningExoticKeepNotExpectedInstallmentsWithNoCents,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\Repayment\RepayNextInstallments\Declining\DecliningExoticKeepNotExpectedInstallmentsWithNoCents.cs,RepayNextInstallments,The length of the statement  "                        ExoticInstallment exoticInstallment = _contract.Product.ExoticProduct.GetExoticInstallment(i - _contract.GracePeriod.Value); " is 124.
Long Statement,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.Repayment.RepayNextInstallments.Declining,DecliningExoticKeepNotExpectedInstallmentsWithNoCents,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\Repayment\RepayNextInstallments\Declining\DecliningExoticKeepNotExpectedInstallmentsWithNoCents.cs,RepayNextInstallments,The length of the statement  "                        OCurrency tempCapital = totalAmount.Value * Convert.ToDecimal(exoticInstallment.PrincipalCoeff / baseTocalculatePrincipalCoeff); " is 128.
Long Statement,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.Repayment.RepayNextInstallments.Declining,DecliningExoticKeepNotExpectedInstallmentsWithNoCents,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\Repayment\RepayNextInstallments\Declining\DecliningExoticKeepNotExpectedInstallmentsWithNoCents.cs,RepayNextInstallments,The length of the statement  "                        ExoticInstallment exoticInstallment = _contract.Product.ExoticProduct.GetExoticInstallment(i - _contract.GracePeriod.Value); " is 124.
Long Statement,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.Repayment.RepayNextInstallments.Declining,DecliningExoticKeepNotExpectedInstallmentsWithNoCents,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\Repayment\RepayNextInstallments\Declining\DecliningExoticKeepNotExpectedInstallmentsWithNoCents.cs,RepayNextInstallments,The length of the statement  "                        OCurrency tempCapital = totalAmount.Value * Convert.ToDecimal(exoticInstallment.PrincipalCoeff / baseTocalculatePrincipalCoeff); " is 128.
Long Statement,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.Repayment.RepayNextInstallments.Declining,DecliningExoticKeepNotExpectedInstallmentsWithCents,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\Repayment\RepayNextInstallments\Declining\DecliningExoticKeepNotExpectedInstallmentsWithCents.cs,RepayNextInstallments,The length of the statement  "                        baseTocalculatePrincipalCoeff += _contract.Product.ExoticProduct.GetExoticInstallment(i - _contract.GracePeriod.Value).PrincipalCoeff; " is 134.
Long Statement,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.Repayment.RepayNextInstallments.Declining,DecliningExoticKeepNotExpectedInstallmentsWithCents,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\Repayment\RepayNextInstallments\Declining\DecliningExoticKeepNotExpectedInstallmentsWithCents.cs,RepayNextInstallments,The length of the statement  "                        ExoticInstallment exoticInstallment = _contract.Product.ExoticProduct.GetExoticInstallment(i - _contract.GracePeriod.Value); " is 124.
Long Statement,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.Repayment.RepayNextInstallments.Declining,DecliningExoticKeepNotExpectedInstallmentsWithCents,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\Repayment\RepayNextInstallments\Declining\DecliningExoticKeepNotExpectedInstallmentsWithCents.cs,RepayNextInstallments,The length of the statement  "                        installment.CapitalRepayment = Math.Round(totalAmount.Value * Convert.ToDecimal(exoticInstallment.PrincipalCoeff / baseTocalculatePrincipalCoeff)'2); " is 149.
Long Statement,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.Repayment.RepayNextInstallments.Declining,DecliningExoticKeepNotExpectedInstallmentsWithCents,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\Repayment\RepayNextInstallments\Declining\DecliningExoticKeepNotExpectedInstallmentsWithCents.cs,RepayNextInstallments,The length of the statement  "                        ExoticInstallment exoticInstallment = _contract.Product.ExoticProduct.GetExoticInstallment(i - _contract.GracePeriod.Value); " is 124.
Long Statement,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.Repayment.RepayNextInstallments.Declining,DecliningExoticKeepNotExpectedInstallmentsWithCents,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\Repayment\RepayNextInstallments\Declining\DecliningExoticKeepNotExpectedInstallmentsWithCents.cs,RepayNextInstallments,The length of the statement  "                        installment.CapitalRepayment = Math.Round(totalAmount.Value * Convert.ToDecimal(exoticInstallment.PrincipalCoeff / baseTocalculatePrincipalCoeff)'2); " is 149.
Long Statement,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.Repayment.RepayNextInstallments.Declining,DecliningKeepNotExpectedInstallments,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\Repayment\RepayNextInstallments\Declining\DecliningKeepNotExpectedInstallments.cs,RepayNextInstallments,The length of the statement  "                                _CalculateDecliningFixedInstallmentsWithCents(installment.Number' startAmount' _contract.NbOfInstallments - _contract.GracePeriod.Value); " is 137.
Long Statement,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.Repayment.RepayNextInstallments.Declining,DecliningKeepNotExpectedInstallments,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\Repayment\RepayNextInstallments\Declining\DecliningKeepNotExpectedInstallments.cs,RepayNextInstallments,The length of the statement  "                                _CalculateDecliningFixedInstallmentsWithNoCents(installment.Number' startAmount' _contract.NbOfInstallments - _contract.GracePeriod.Value); " is 139.
Long Statement,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.Repayment.RepayNextInstallments.Declining,DecliningKeepNotExpectedInstallments,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\Repayment\RepayNextInstallments\Declining\DecliningKeepNotExpectedInstallments.cs,RepayNextInstallments,The length of the statement  "                                _CalculateDecliningFixedPrincipalWithCents(installment.Number' startAmount' _contract.NbOfInstallments - _contract.GracePeriod.Value); " is 134.
Long Statement,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.Repayment.RepayNextInstallments.Declining,DecliningKeepNotExpectedInstallments,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\Repayment\RepayNextInstallments\Declining\DecliningKeepNotExpectedInstallments.cs,RepayNextInstallments,The length of the statement  "                                _CalculateDecliningFixedPrincipalWithNoCents(installment.Number' startAmount' _contract.NbOfInstallments - _contract.GracePeriod.Value); " is 136.
Long Statement,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.Repayment.RepayNextInstallments.Declining,DecliningKeepNotExpectedInstallments,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\Repayment\RepayNextInstallments\Declining\DecliningKeepNotExpectedInstallments.cs,RepayNextInstallments,The length of the statement  "                                _CalculateDecliningFixedInstallmentsWithCents(installment.Number' startAmount'_contract.NbOfInstallments -installment.Number + 1); " is 130.
Long Statement,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.Repayment.RepayNextInstallments.Declining,DecliningKeepNotExpectedInstallments,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\Repayment\RepayNextInstallments\Declining\DecliningKeepNotExpectedInstallments.cs,RepayNextInstallments,The length of the statement  "                                _CalculateDecliningFixedInstallmentsWithNoCents(installment.Number' startAmount'_contract.NbOfInstallments -installment.Number + 1); " is 132.
Long Statement,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.Repayment.RepayNextInstallments.Declining,DecliningKeepNotExpectedInstallments,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\Repayment\RepayNextInstallments\Declining\DecliningKeepNotExpectedInstallments.cs,RepayNextInstallments,The length of the statement  "                                _CalculateDecliningFixedPrincipalWithCents(installment.Number' startAmount' _contract.NbOfInstallments - installment.Number + 1); " is 129.
Long Statement,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.Repayment.RepayNextInstallments.Declining,DecliningKeepNotExpectedInstallments,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\Repayment\RepayNextInstallments\Declining\DecliningKeepNotExpectedInstallments.cs,RepayNextInstallments,The length of the statement  "                                _CalculateDecliningFixedPrincipalWithNoCents(installment.Number' startAmount' _contract.NbOfInstallments - installment.Number + 1); " is 131.
Long Statement,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.Repayment.RepayNextInstallments.Flat,FlatExoticKeepNotExpectedInstallmentsWithCents,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\Repayment\RepayNextInstallments\Flat\FlatExoticKeepNotExpectedInstallmentsWithCents.cs,RepayNextInstallments,The length of the statement  "                            nbInterest += _contract.Product.ExoticProduct.GetExoticInstallment(_installment.Number - 1 - _contract.GracePeriod.Value).InterestCoeff.Value; " is 142.
Long Statement,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.Repayment.RepayNextInstallments.Flat,FlatExoticKeepNotExpectedInstallmentsWithCents,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\Repayment\RepayNextInstallments\Flat\FlatExoticKeepNotExpectedInstallmentsWithCents.cs,RepayNextInstallments,The length of the statement  "                            nbPrincipal += _contract.Product.ExoticProduct.GetExoticInstallment(_installment.Number - 1 - _contract.GracePeriod.Value).PrincipalCoeff; " is 138.
Long Statement,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.Repayment.RepayNextInstallments.Flat,FlatExoticKeepNotExpectedInstallmentsWithCents,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\Repayment\RepayNextInstallments\Flat\FlatExoticKeepNotExpectedInstallmentsWithCents.cs,RepayNextInstallments,The length of the statement  "                            _installment.InterestsRepayment = Convert.ToDecimal(exoticInstallment.InterestCoeff.Value) * totalInterest *(double) 10; " is 120.
Long Statement,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.Repayment.RepayNextInstallments.Flat,FlatExoticKeepNotExpectedInstallmentsWithCents,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\Repayment\RepayNextInstallments\Flat\FlatExoticKeepNotExpectedInstallmentsWithCents.cs,RepayNextInstallments,The length of the statement  "                            _installment.InterestsRepayment = Convert.ToDecimal(exoticInstallment.InterestCoeff.Value) * totalInterest * (double)10; " is 120.
Long Statement,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.Repayment.RepayNextInstallments.Flat,FlateKeepNotExpectedInstallmentsWithCents,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\Repayment\RepayNextInstallments\Flat\FlateKeepNotExpectedInstallmentsWithCents.cs,_CalculateInstallments,The length of the statement  "                    installment.CapitalRepayment = decimal.Round((pStartAmount.Value - sumOfPrincipal.Value) / (pNumberOfInstallmentsToPay - installmentNumber)' 2); " is 144.
Long Statement,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.Repayment.RepayNextInstallments.Flat,FlateKeepNotExpectedInstallmentsWithNoCents,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\Repayment\RepayNextInstallments\Flat\FlateKeepNotExpectedInstallmentsWithNoCents.cs,_CalculateInstallments,The length of the statement  "                    installment.CapitalRepayment = decimal.Round((pStartAmount.Value - sumOfPrincipal.Value) / (pNumberOfInstallmentsToPay - installmentNumber)' 0); " is 144.
Long Statement,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.Repayment.RepayNextInstallments.Flat,FlatExoticKeepNotExpectedInstallmentsWithNoCents,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\Repayment\RepayNextInstallments\Flat\FlatExoticKeepNotExpectedInstallmentsWithNoCents.cs,RepayNextInstallments,The length of the statement  "                        nbInterest += _contract.Product.ExoticProduct.GetExoticInstallment(installment.Number - 1 - _contract.GracePeriod.Value).InterestCoeff.Value; " is 141.
Long Statement,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.Repayment.RepayNextInstallments.Flat,FlatExoticKeepNotExpectedInstallmentsWithNoCents,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\Repayment\RepayNextInstallments\Flat\FlatExoticKeepNotExpectedInstallmentsWithNoCents.cs,RepayNextInstallments,The length of the statement  "                        nbPrincipal += _contract.Product.ExoticProduct.GetExoticInstallment(installment.Number - 1 - _contract.GracePeriod.Value).PrincipalCoeff; " is 137.
Long Statement,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.Repayment.RepayNextInstallments,RepayNextInstallmentsStrategy,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\Repayment\RepayNextInstallments\RepayNextInstallmentsStrategy.cs,RepayNextInstallments,The length of the statement  "            _repayNextInstallments.RepayNextInstallments(ref amountPaid' ref interestEvent'ref interestPrepayment' ref principalEvent' ref feesEvent' ref commissionsEvent); " is 160.
Long Statement,OpenCBS.CoreDomain.Online,Remoting,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Online\Remoting.cs,RemotingConnection,The length of the statement  "                var server = string.Format("http://{0}:{1}/RemoteCoreDomain"' TechnicalSettings.RemotingServer' TechnicalSettings.RemotingServerPort); " is 134.
Complex Conditional,OpenCBS.CoreDomain.Accounting,AccountingClosure,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Accounting\AccountingClosure.cs,GetBooking,The conditional expression  "(rule.LoanProduct == null                       || (eventItem.LoanProduct != null && eventItem.LoanProduct.Id == rule.LoanProduct.Id))                      && (rule.SavingProduct == null                          || (eventItem.SavingProduct != null && eventItem.SavingProduct.Id == rule.SavingProduct.Id))                      && (rule.Currency == null                          || (eventItem.Currency != null && eventItem.Currency.Id == rule.Currency.Id))                      && (rule.ClientType == OClientTypes.All                          || eventItem.ClientType == rule.ClientType)                      && (rule.EconomicActivity == null                          ||                          (eventItem.EconomicActivity != null && eventItem.EconomicActivity.Id == rule.EconomicActivity.Id))"  is complex.
Complex Conditional,OpenCBS.CoreDomain.Accounting,AccountingClosure,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Accounting\AccountingClosure.cs,GetValue,The conditional expression  "eventItem.Code == "RGLE" ||                  eventItem.Code == "RBLE" ||                  eventItem.Code == "APR" ||                  eventItem.Code == "ATR" ||                  eventItem.Code == "APTR" ||                  eventItem.Code == "RRLE""  is complex.
Complex Conditional,OpenCBS.CoreDomain.Accounting,AccountingClosure,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Accounting\AccountingClosure.cs,GetValue,The conditional expression  "eventItem.Code == "GLBL" ||                  eventItem.Code == "LLBL" ||                  eventItem.Code == "BLGL" ||                  eventItem.Code == "GLLL" ||                  eventItem.Code == "BLLL" ||                  eventItem.Code == "BLRL" ||                  eventItem.Code == "LLGL" ||                  eventItem.Code == "BLRL" ||                  eventItem.Code == "GLRL" ||                  eventItem.Code == "LLRL""  is complex.
Complex Conditional,OpenCBS.CoreDomain.Contracts.Loans,Loan,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\Loan.cs,CalculateTotalNonRepaymentPenalties,The conditional expression  "installment.FeesUnpaid != 0 && rPayment.Date == pDate && rPayment.Deleted == false &&                                  installment.PaidInterests == 0 && installment.PaidCapital == 0"  is complex.
Complex Conditional,OpenCBS.CoreDomain.Contracts.Loans,Loan,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\Loan.cs,CalculatePastDueSinceLastRepayment,The conditional expression  "rPayment.InstallmentNumber == installmentNumber                       && rPayment.Deleted == false                       && rPayment.Date != pDate                       && pDate > date"  is complex.
Complex Conditional,OpenCBS.CoreDomain.Contracts.Loans,Loan,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\Loan.cs,GenerateRepaymentEvents,The conditional expression  "principalAmount == 0                           && interestAmount == 0                          && paidInstallment.PaidCapital == 0 && manualInterestEvent == 0"  is complex.
Complex Conditional,OpenCBS.CoreDomain.Contracts.Loans,Loan,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\Loan.cs,GenerateRepaymentEvents,The conditional expression  "rpEvent.InterestPrepayment != 0                           || rpEvent.Principal != 0                           || rpEvent.Penalties != 0                           || rpEvent.Commissions != 0"  is complex.
Complex Conditional,OpenCBS.CoreDomain.Contracts.Loans,Loan,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\Loan.cs,GetOverdueEvent,The conditional expression  "(dueEvent.Date > lastEvent.Date) &&                      (dueEvent.Code != "GLRL" && dueEvent.Code != "LLRL" && dueEvent.Code != "BLRL")"  is complex.
Complex Conditional,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.MaxRepayment,CalculateAmountToRepaySpecifiedInstallmentStrategy,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\MaxRepayment\CalculateAmountToRepaySpecifiedInstallmentStrategy.cs,MaxAmountOfRealSchedule,The conditional expression  "installment.Number > 1                      && installment.ExpectedDate != _contract.StartDate                      && installment.ExpectedDate > payDate                      && _contract.GetInstallment(installment.Number - 2).ExpectedDate < payDate                      && !calculated"  is complex.
Complex Conditional,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.MaxRepayment,CalculateAmountToRepaySpecifiedInstallmentStrategy,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\MaxRepayment\CalculateAmountToRepaySpecifiedInstallmentStrategy.cs,MaxAmountOfRealSchedule,The conditional expression  "installment.Number > 1                      && installment.ExpectedDate > payDate                      && installment.ExpectedDate > payDate                      && _contract.GetInstallment(installment.Number - 2).ExpectedDate < payDate"  is complex.
Complex Conditional,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.MaxRepayment,CalculateMaximumAmountToRegradingLoanStrategy,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\MaxRepayment\CalculateMaximumAmountToRegradingLoanStrategy.cs,MaxAmountOfRealSchedule,The conditional expression  "installment.Number > 1                       && installment.ExpectedDate != _contract.StartDate                       && installment.ExpectedDate > payDate                       && _contract.GetInstallment(installment.Number - 2).ExpectedDate < payDate                       && !calculated"  is complex.
Complex Conditional,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.MaxRepayment,CalculateMaximumAmountToRegradingLoanStrategy,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\MaxRepayment\CalculateMaximumAmountToRegradingLoanStrategy.cs,MaxAmountOfRealSchedule,The conditional expression  "installment.Number > 1                       && installment.ExpectedDate > payDate                       && installment.ExpectedDate > payDate                       && _contract.GetInstallment(installment.Number - 2).ExpectedDate < payDate"  is complex.
Complex Conditional,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.MaxRepayment,CalculateMaximumAmountToRepayStrategy,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\MaxRepayment\CalculateMaximumAmountToRepayStrategy.cs,CalculateMaximumAmountForEscapedMember,The conditional expression  "!getInstallment.IsRepaid && getInstallment.ExpectedDate > pDate || (getInstallment.ExpectedDate == pDate && _contract.EscapedMember != null)"  is complex.
Complex Conditional,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.MaxRepayment,CalculateMaximumAmountToRepayStrategy,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\MaxRepayment\CalculateMaximumAmountToRepayStrategy.cs,CalculateMaximumAmountForEscapedMember,The conditional expression  "getInstallment.ExpectedDate > pDate && _contract.EscapedMember != null && aTprComission > 0 && _contract.Product.AnticipatedTotalRepaymentPenaltiesBase != OAnticipatedRepaymentPenaltiesBases.RemainingInterest"  is complex.
Complex Conditional,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.Repayment.RepayLateInstallments,CalculationBaseForLateFees,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\Repayment\RepayLateInstallments\CalculationBaseForLateFees.cs,CalculateNonRepaymentPenalties,The conditional expression  "rPayment.InstallmentNumber <= installment.Number && rPayment.Deleted == false && rPayment.Date != pDate && pDate > installment.ExpectedDate && installment.PaidFees != 0"  is complex.
Complex Conditional,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.Repayment.RepayLateInstallments,CalculationBaseForLateFees,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\Repayment\RepayLateInstallments\CalculationBaseForLateFees.cs,_AnticipateCalculateNonRepaymentPenalties,The conditional expression  "((preInstallment.IsRepaid) || (installmentNumber == 1)) || (!preInstallment.IsRepaid && preInstallment.ExpectedDate < pDate)"  is complex.
Complex Conditional,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.Repayment.RepayLateInstallments,CalculationBaseForLateFees,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\Repayment\RepayLateInstallments\CalculationBaseForLateFees.cs,AnticipateCalculateFeesBasedOnOlb,The conditional expression  "((preInstallment.IsRepaid) || (installmentNumber == 1)) || (!preInstallment.IsRepaid && preInstallment.ExpectedDate <= date)"  is complex.
Complex Conditional,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.Repayment.RepayLateInstallments,CalculateInstallments,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\Repayment\RepayLateInstallments\CalculateInstallments.cs,CalculateNewInstallmentsWithLateFees,The conditional expression  "(rPayment.Date == pDate && rPayment.Deleted == false) ||                                  (installment.AmountHasToPayWithInterest != 0 && installment.PaidCapital != 0)"  is complex.
Complex Conditional,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.Repayment.RepayLateInstallments,CalculateInstallments,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\Repayment\RepayLateInstallments\CalculateInstallments.cs,CalculateNewInstallmentsWithLateFees,The conditional expression  "installment.Number >= rPayment.InstallmentNumber                                  && rPayment.Penalties != 0                                  && rPayment.Date < pDate                                  && installment.PaidFees != 0"  is complex.
Complex Conditional,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.Repayment.RepayLateInstallments,CalculateInstallments,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\Repayment\RepayLateInstallments\CalculateInstallments.cs,CalculateNewInstallmentsWithLateFees,The conditional expression  "installment.FeesUnpaid != 0                                  && rPayment.Date == pDate                                  && rPayment.Deleted == false                                  && installment.PaidInterests == 0                                  && installment.PaidCapital == 0"  is complex.
Complex Conditional,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.Repayment.RepayLateInstallments,CalculateInstallments,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\Repayment\RepayLateInstallments\CalculateInstallments.cs,CalculateAnticipateRepayment,The conditional expression  "getInstallment.ExpectedDate > pDate && _contract.EscapedMember != null && aTprComission > 0 && _contract.Product.AnticipatedTotalRepaymentPenaltiesBase != OAnticipatedRepaymentPenaltiesBases.RemainingInterest"  is complex.
Complex Conditional,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.Repayment.RepayLateInstallments,CalculateInstallments,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\Repayment\RepayLateInstallments\CalculateInstallments.cs,RepayProportinalyInstallments,The conditional expression  "date < item.ExpectedDate && item.IsRepaid && item.CapitalRepayment > 0 && item.InterestsRepayment > 0"  is complex.
Magic Number,OpenCBS.CoreDomain.Accounting,AccountingClosure,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Accounting\AccountingClosure.cs,GetValue,The following statement contains a magic number: if (eventItem.Code.Substring(0' 3) == "LEE")              {                  var e = (LoanEntryFeeEvent) eventItem;                  amount = GetValue(e' rule);              }
Magic Number,OpenCBS.CoreDomain,Project,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Project.cs,GenerateProjectCode,The following statement contains a magic number: string year = BeginDate.Year.ToString().Substring(2' 2);
Magic Number,OpenCBS.CoreDomain,Project,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Project.cs,GenerateProjectCode,The following statement contains a magic number: string year = BeginDate.Year.ToString().Substring(2' 2);
Magic Number,OpenCBS.CoreDomain,ExoticInstallmentsTable,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Products\ExoticProduct.cs,CheckIfSumIsOk,The following statement contains a magic number: if (OLoanTypes.DecliningFixedPrincipal == loanType)              {                  return 100 == _SumOfPrincipal() * 100;              }
Magic Number,OpenCBS.CoreDomain,ExoticInstallmentsTable,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Products\ExoticProduct.cs,CheckIfSumIsOk,The following statement contains a magic number: if (OLoanTypes.DecliningFixedPrincipal == loanType)              {                  return 100 == _SumOfPrincipal() * 100;              }
Magic Number,OpenCBS.CoreDomain,ExoticInstallmentsTable,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Products\ExoticProduct.cs,CheckIfSumIsOk,The following statement contains a magic number: return _SumOfPrincipal() * 100 == 100 && _SumOfInterest() * 100 == 100;
Magic Number,OpenCBS.CoreDomain,ExoticInstallmentsTable,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Products\ExoticProduct.cs,CheckIfSumIsOk,The following statement contains a magic number: return _SumOfPrincipal() * 100 == 100 && _SumOfInterest() * 100 == 100;
Magic Number,OpenCBS.CoreDomain,ExoticInstallmentsTable,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Products\ExoticProduct.cs,CheckIfSumIsOk,The following statement contains a magic number: return _SumOfPrincipal() * 100 == 100 && _SumOfInterest() * 100 == 100;
Magic Number,OpenCBS.CoreDomain,ExoticInstallmentsTable,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Products\ExoticProduct.cs,CheckIfSumIsOk,The following statement contains a magic number: return _SumOfPrincipal() * 100 == 100 && _SumOfInterest() * 100 == 100;
Magic Number,OpenCBS.CoreDomain.Contracts.Loans.CalculateInstallments.Declining,FixedPrincipalWithRealInterest,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\CalculateInstallments\Declining\FixedPrincipalWithRealInterest.cs,FixedPrincipalWithRealInterest,The following statement contains a magic number: _roundingPoint = pContract.UseCents ? 2 : 0;
Magic Number,OpenCBS.CoreDomain.Contracts.Loans.CalculateInstallments.Declining,FixedPrincipalWithRealInterest,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\CalculateInstallments\Declining\FixedPrincipalWithRealInterest.cs,GetDaysInAYear,The following statement contains a magic number: for (int i = 1; i <= 12; i++)              {                  days += DateTime.DaysInMonth(year' i);              }
Magic Number,OpenCBS.CoreDomain.Contracts.Loans.CalculateInstallments.Declining,ExoticStrategy,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\CalculateInstallments\Declining\ExoticStrategy.cs,ExoticStrategy,The following statement contains a magic number: _roundingPoint = pContract.UseCents ? 2 : 0;
Magic Number,OpenCBS.CoreDomain.Contracts.Loans.CalculateInstallments.Declining,FixedInstallmentStrategy,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\CalculateInstallments\Declining\FixedInstallmentStrategy.cs,FixedInstallmentStrategy,The following statement contains a magic number: _roundingPoint = pContract.UseCents ? 2 : 0;
Magic Number,OpenCBS.CoreDomain.Contracts.Loans.CalculateInstallments.Declining,FixedPrincipalStrategy,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\CalculateInstallments\Declining\FixedPrincipalStrategy.cs,FixedPrincipalStrategy,The following statement contains a magic number: _roundingPoint = pContract.UseCents ? 2 : 0;
Magic Number,OpenCBS.CoreDomain.Contracts.Loans,Loan,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\Loan.cs,GetSumOfFees,The following statement contains a magic number: foreach (LoanEntryFee fee in LoanEntryFeesList)              {                  if (fee.ProductEntryFee.IsRate)                      sum += loanAmount * fee.FeeValue / 100.00;                  else                      sum += fee.FeeValue;              }
Magic Number,OpenCBS.CoreDomain.Contracts.Loans,Loan,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\Loan.cs,CalculateDailyAccrualUnpaidPenalties,The following statement contains a magic number: penalty = UseCents ? Math.Round(penalty' 2) : Math.Round(penalty);
Magic Number,OpenCBS.CoreDomain.Contracts.Loans,Loan,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\Loan.cs,CalculateExpectedOlb,The following statement contains a magic number: return Math.Round(olbTable[pInstallmentNumber - 1].Value' 2);
Magic Number,OpenCBS.CoreDomain.Contracts.Loans,Loan,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\Loan.cs,GetCreditInsuranceEvent,The following statement contains a magic number: CreditInsuranceEvent cie = new CreditInsuranceEvent                                             {                                                 Date = disbursmentEvent.Date'                                                 Cancelable = true'                                                 User = User.CurrentUser'                                                 Code = "LCIE"'                                                 Principal = 0'                                                 Commission = Amount * Insurance / 100'                                                 TellerId = disbursmentEvent.TellerId                                             };
Magic Number,OpenCBS.CoreDomain.Contracts.Loans,Loan,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\Loan.cs,Disburse,The following statement contains a magic number: if (!pDisableFees)              {                  List<OCurrency> entryFees = GetEntryFees();                  if (entryFees != null)                  {                      e.Commissions = new List<LoanEntryFeeEvent>();                      for (int i=0; i<entryFees.Count; i++)                      {                          LoanEntryFeeEvent loanEntryFeeEvent = new LoanEntryFeeEvent                                                                    {                                                                        Fee =                                                                            Product.Currency.UseCents                                                                                ? Math.Round(entryFees[i].Value' 2)                                                                                : Math.Round(entryFees[i].Value'                                                                                             MidpointRounding.AwayFromZero)'                                                                        Code = "LEE" + LoanEntryFeesList[i].ProductEntryFee.Index'                                                                        DisbursementEventId = e.Id'                                                                        Cancelable = true'                                                                        User = User.CurrentUser'                                                                        Date = e.Date                                                                    };                          e.Commissions.Add(loanEntryFeeEvent);                            if (Teller.CurrentTeller != null && Teller.CurrentTeller.Id != 0)                              loanEntryFeeEvent.TellerId = Teller.CurrentTeller.Id;                            if (loanEntryFeeEvent.Fee > 0)                          {                              Events.Add(loanEntryFeeEvent);                          }                      }                  }              }
Magic Number,OpenCBS.CoreDomain.Contracts.Loans,Loan,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\Loan.cs,GetEntryFees,The following statement contains a magic number: foreach (LoanEntryFee fee in LoanEntryFeesList)              {                  OCurrency feeAmount;                  if (fee.ProductEntryFee.IsRate)                        if (fee.ProductEntryFee.Value != null)                          feeAmount = _amount.Value*fee.ProductEntryFee.Value/100.00m;                      else                          feeAmount = _amount.Value*fee.FeeValue/100;                  else                      feeAmount = fee.FeeValue;                  entryFees.Add(feeAmount);              }
Magic Number,OpenCBS.CoreDomain.Contracts.Loans,Loan,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\Loan.cs,Repay,The following statement contains a magic number: foreach (RepaymentEvent rPayment in Events.GetRepaymentEvents())              {                  if (!rPayment.Deleted)                      principalAmount += rPayment.Principal;                    if (principalAmount > Amount)                  {                      principalEvent -= Math.Round(principalAmount.Value' 2) - Amount;                  }              }
Magic Number,OpenCBS.CoreDomain.Contracts.Loans,Loan,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\Loan.cs,GenerateCreditInsuranceEvent,The following statement contains a magic number: int roundPoint = UseCents ? 2 : 0;
Magic Number,OpenCBS.CoreDomain.Contracts.Loans,Loan,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\Loan.cs,CreateLoanInterestAccruingEvent,The following statement contains a magic number: foreach (Installment installment in _installmentList)              {                  if (installment.IsRepaid)                  {                      accruedAmount += installment.InterestsRepayment;                  }                  else                  {                      DateTime date = installment.Number == 1 ? _startDate : GetInstallment(installment.Number - 2).ExpectedDate;                      int days = (today - date).Days;                      accruedAmount += days >= DateTime.DaysInMonth(date.Year' date.Month)                                               ? installment.InterestsRepayment                                               : installment.InterestsRepayment * (double)days / (double)DateTime.DaysInMonth(date.Year' date.Month);                        accruedAmount = UseCents ? Math.Round(accruedAmount.Value' 2) : Math.Round(accruedAmount.Value' 0);                      break;                  }              }
Magic Number,OpenCBS.CoreDomain.Contracts.Loans,Loan,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\Loan.cs,CreateLoanInterestAccruingEvent,The following statement contains a magic number: foreach (Installment installment in _installmentList)              {                  if (installment.IsRepaid)                  {                      accruedAmount += installment.InterestsRepayment;                  }                  else                  {                      DateTime date = installment.Number == 1 ? _startDate : GetInstallment(installment.Number - 2).ExpectedDate;                      int days = (today - date).Days;                      accruedAmount += days >= DateTime.DaysInMonth(date.Year' date.Month)                                               ? installment.InterestsRepayment                                               : installment.InterestsRepayment * (double)days / (double)DateTime.DaysInMonth(date.Year' date.Month);                        accruedAmount = UseCents ? Math.Round(accruedAmount.Value' 2) : Math.Round(accruedAmount.Value' 0);                      break;                  }              }
Magic Number,OpenCBS.CoreDomain.Contracts.Loans,Loan,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\Loan.cs,GetOverduePrincipal,The following statement contains a magic number: foreach (Installment installment in _installmentList)              {                  if(installment.ExpectedDate <= date)                  {                      amount += installment.CapitalRepayment;                  }                    if (installment.Number > 1)                  {                      if (installment.ExpectedDate > date && GetInstallment(installment.Number - 2).ExpectedDate <= date)                      {                          int days = (date - GetInstallment(installment.Number - 2).ExpectedDate).Days;                          int totalDays = NumberOfDaysInTheInstallment(installment.Number' date);                          amount += installment.CapitalRepayment.Value * days / totalDays;                      }                  }              }
Magic Number,OpenCBS.CoreDomain.Contracts.Loans,Loan,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\Loan.cs,GetOverduePrincipal,The following statement contains a magic number: foreach (Installment installment in _installmentList)              {                  if(installment.ExpectedDate <= date)                  {                      amount += installment.CapitalRepayment;                  }                    if (installment.Number > 1)                  {                      if (installment.ExpectedDate > date && GetInstallment(installment.Number - 2).ExpectedDate <= date)                      {                          int days = (date - GetInstallment(installment.Number - 2).ExpectedDate).Days;                          int totalDays = NumberOfDaysInTheInstallment(installment.Number' date);                          amount += installment.CapitalRepayment.Value * days / totalDays;                      }                  }              }
Magic Number,OpenCBS.CoreDomain.Contracts.Loans,Loan,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\Loan.cs,GetOverduePrincipal,The following statement contains a magic number: amount = UseCents                           ? Math.Round((amount - GetPaidPrincipal()).Value' 2' MidpointRounding.AwayFromZero)                           : Math.Round((amount - GetPaidPrincipal()).Value' 0' MidpointRounding.AwayFromZero);
Magic Number,OpenCBS.CoreDomain.Contracts.Loans,Loan,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\Loan.cs,CalculateUnpaidOfAccruedInterest,The following statement contains a magic number: interest = UseCents ? Math.Round(interest' 2) : Math.Round(interest);
Magic Number,OpenCBS.CoreDomain.Contracts.Loans,Loan,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\Loan.cs,CalculateDuePenaltiesForInstallment,The following statement contains a magic number: if (1 == pNumber || GetInstallment(pNumber - 2).IsRepaid)              {                  retval += CalculationBaseForLateFees.FeesBasedOnInitialAmount(this' pDate' pNumber' false' _generalSettings' _nwdS);                  retval += CalculationBaseForLateFees.FeesBasedOnOlb(this' pDate' pNumber' false' _generalSettings' _nwdS);              }
Magic Number,OpenCBS.CoreDomain.Contracts.Loans,Loan,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\Loan.cs,GetAccruedInterestEvent,The following statement contains a magic number: foreach (Installment installment in InstallmentList)              {                  if (installment.ExpectedDate <= currentDate)                  {                      accruedAmount += installment.InterestsRepayment;                  }                    DateTime date = installment.Number == 1                                          ? StartDate                                          : GetInstallment(installment.Number - 2).ExpectedDate;                    //!installment.IsRepaid &&                   if (installment.ExpectedDate > currentDate && date <= currentDate)                  {                      // do not calculate more then cease Late Days                      if (ceaseLateDate < currentDate)                          currentDate = ceaseLateDate;                        int days = (currentDate - date).Days;                      int daysInInstallment = installment.Number == 1                                                        ? (installment.ExpectedDate - StartDate).Days                                                        : (installment.ExpectedDate -                                                           GetInstallment(installment.Number - 2).ExpectedDate)                                                              .Days;                        accruedAmount += days >= DateTime.DaysInMonth(date.Year' date.Month)                                           ? installment.InterestsRepayment                                           : installment.InterestsRepayment* (double) days /                                             (double) daysInInstallment;                        accruedInterestEvent.InstallmentNumber = installment.Number - 1;                  }              }
Magic Number,OpenCBS.CoreDomain.Contracts.Loans,Loan,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\Loan.cs,GetAccruedInterestEvent,The following statement contains a magic number: foreach (Installment installment in InstallmentList)              {                  if (installment.ExpectedDate <= currentDate)                  {                      accruedAmount += installment.InterestsRepayment;                  }                    DateTime date = installment.Number == 1                                          ? StartDate                                          : GetInstallment(installment.Number - 2).ExpectedDate;                    //!installment.IsRepaid &&                   if (installment.ExpectedDate > currentDate && date <= currentDate)                  {                      // do not calculate more then cease Late Days                      if (ceaseLateDate < currentDate)                          currentDate = ceaseLateDate;                        int days = (currentDate - date).Days;                      int daysInInstallment = installment.Number == 1                                                        ? (installment.ExpectedDate - StartDate).Days                                                        : (installment.ExpectedDate -                                                           GetInstallment(installment.Number - 2).ExpectedDate)                                                              .Days;                        accruedAmount += days >= DateTime.DaysInMonth(date.Year' date.Month)                                           ? installment.InterestsRepayment                                           : installment.InterestsRepayment* (double) days /                                             (double) daysInInstallment;                        accruedInterestEvent.InstallmentNumber = installment.Number - 1;                  }              }
Magic Number,OpenCBS.CoreDomain.Contracts.Loans,Loan,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\Loan.cs,GetAccruedInterestEvent,The following statement contains a magic number: accruedAmount = UseCents                                         ? Math.Round(accruedAmount.Value' 2)                                         : Math.Round(accruedAmount.Value' 0);
Magic Number,OpenCBS.CoreDomain.Contracts.Savings.CalculateInterests,DateCalculationStrategy,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Savings\CalculateInterests\DateCalculationStrategy.cs,DateCalculationWeekly,The following statement contains a magic number: int weekEndDay2 = pWeekEndDay2 == 6 ? 1 : pWeekEndDay2 + 1;
Magic Number,OpenCBS.CoreDomain.Contracts.Savings.CalculateInterests,DateCalculationStrategy,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Savings\CalculateInterests\DateCalculationStrategy.cs,DateCalculationWeekly,The following statement contains a magic number: int numbersOfDayToNextPostingDate = (weekEndDay2 <= (int)lastDate.DayOfWeek) ? 7 - ((int)lastDate.DayOfWeek - (int)weekEndDay2)                  : (int)weekEndDay2 - (int)lastDate.DayOfWeek;
Magic Number,OpenCBS.CoreDomain.Contracts.Savings.CalculateInterests,DateCalculationStrategy,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Savings\CalculateInterests\DateCalculationStrategy.cs,GetNextWeekly,The following statement contains a magic number: int weekEndDay2 = pWeekEndDay2 == 6 ? 1 : pWeekEndDay2 + 1;
Magic Number,OpenCBS.CoreDomain.Contracts.Savings.CalculateInterests,DateCalculationStrategy,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Savings\CalculateInterests\DateCalculationStrategy.cs,GetNextWeekly,The following statement contains a magic number: return date.AddDays((weekEndDay2 <= (int)date.DayOfWeek)                     ? 7 - ((int)date.DayOfWeek - weekEndDay2)                     : weekEndDay2 - (int)date.DayOfWeek);
Magic Number,OpenCBS.CoreDomain.Contracts.Savings,SavingsContract,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Savings\SavingsContract.cs,Transfer,The following statement contains a magic number: List<SavingEvent> events = new List<SavingEvent>(3);
Magic Number,OpenCBS.CoreDomain.Contracts.Savings,SavingsContract,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Savings\SavingsContract.cs,GenerateSavingCode,The following statement contains a magic number: switch (pCodeTemplate)              {                  case "BC/YY/PC-PS/CN-ID":                      {                          string clientName = (pClient is Person) ? ((Person)pClient).LastName : pClient.Name;                          clientName = clientName.Replace(" "' "");                          string productCode = Product.Code.Replace(" "' "");                          Code = "S/{0}/{1}/{2}-{3}/{4}-{5}";                          Code = string.Format(Code'                                               pBranchCode'                                               CreationDate.Year'                                               productCode.Substring(0' Math.Min(productCode.Length' 5)).ToUpper()'                                               pSavingsCount + 1'                                               clientName.Substring(0' Math.Min(clientName.Length' 4)).ToUpper()'                                               pClient.Id);                          break;                      }                  case "IC/BC/CS/ID":                      {                          string clientCode = pClient.Id.ToString().PadLeft(5' '0');                          string savingsCount = (pSavingsCount + 1).ToString().PadLeft(2' '0');                          Code = string.Format("{0}/{1}/{2}"' pBranchCode' savingsCount' clientCode);                          break;                      }              }
Magic Number,OpenCBS.CoreDomain.Contracts.Savings,SavingsContract,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Savings\SavingsContract.cs,GenerateSavingCode,The following statement contains a magic number: switch (pCodeTemplate)              {                  case "BC/YY/PC-PS/CN-ID":                      {                          string clientName = (pClient is Person) ? ((Person)pClient).LastName : pClient.Name;                          clientName = clientName.Replace(" "' "");                          string productCode = Product.Code.Replace(" "' "");                          Code = "S/{0}/{1}/{2}-{3}/{4}-{5}";                          Code = string.Format(Code'                                               pBranchCode'                                               CreationDate.Year'                                               productCode.Substring(0' Math.Min(productCode.Length' 5)).ToUpper()'                                               pSavingsCount + 1'                                               clientName.Substring(0' Math.Min(clientName.Length' 4)).ToUpper()'                                               pClient.Id);                          break;                      }                  case "IC/BC/CS/ID":                      {                          string clientCode = pClient.Id.ToString().PadLeft(5' '0');                          string savingsCount = (pSavingsCount + 1).ToString().PadLeft(2' '0');                          Code = string.Format("{0}/{1}/{2}"' pBranchCode' savingsCount' clientCode);                          break;                      }              }
Magic Number,OpenCBS.CoreDomain.Contracts.Savings,SavingsContract,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Savings\SavingsContract.cs,GenerateSavingCode,The following statement contains a magic number: switch (pCodeTemplate)              {                  case "BC/YY/PC-PS/CN-ID":                      {                          string clientName = (pClient is Person) ? ((Person)pClient).LastName : pClient.Name;                          clientName = clientName.Replace(" "' "");                          string productCode = Product.Code.Replace(" "' "");                          Code = "S/{0}/{1}/{2}-{3}/{4}-{5}";                          Code = string.Format(Code'                                               pBranchCode'                                               CreationDate.Year'                                               productCode.Substring(0' Math.Min(productCode.Length' 5)).ToUpper()'                                               pSavingsCount + 1'                                               clientName.Substring(0' Math.Min(clientName.Length' 4)).ToUpper()'                                               pClient.Id);                          break;                      }                  case "IC/BC/CS/ID":                      {                          string clientCode = pClient.Id.ToString().PadLeft(5' '0');                          string savingsCount = (pSavingsCount + 1).ToString().PadLeft(2' '0');                          Code = string.Format("{0}/{1}/{2}"' pBranchCode' savingsCount' clientCode);                          break;                      }              }
Magic Number,OpenCBS.CoreDomain.Contracts.Savings,SavingsContract,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Savings\SavingsContract.cs,GenerateSavingCode,The following statement contains a magic number: switch (pCodeTemplate)              {                  case "BC/YY/PC-PS/CN-ID":                      {                          string clientName = (pClient is Person) ? ((Person)pClient).LastName : pClient.Name;                          clientName = clientName.Replace(" "' "");                          string productCode = Product.Code.Replace(" "' "");                          Code = "S/{0}/{1}/{2}-{3}/{4}-{5}";                          Code = string.Format(Code'                                               pBranchCode'                                               CreationDate.Year'                                               productCode.Substring(0' Math.Min(productCode.Length' 5)).ToUpper()'                                               pSavingsCount + 1'                                               clientName.Substring(0' Math.Min(clientName.Length' 4)).ToUpper()'                                               pClient.Id);                          break;                      }                  case "IC/BC/CS/ID":                      {                          string clientCode = pClient.Id.ToString().PadLeft(5' '0');                          string savingsCount = (pSavingsCount + 1).ToString().PadLeft(2' '0');                          Code = string.Format("{0}/{1}/{2}"' pBranchCode' savingsCount' clientCode);                          break;                      }              }
Magic Number,OpenCBS.CoreDomain.Contracts.Savings,SavingsContract,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Savings\SavingsContract.cs,EvaluateSavingsEvent,The following statement contains a magic number: if (e is SavingInterestsAccrualEvent || e is SavingInterestsPostingEvent)              {                  if (e.Amount > 0)                  {                      e.Amount = Product.Currency.UseCents                                     ? Math.Round(e.Amount.Value' 2' MidpointRounding.AwayFromZero)                                     : Math.Round(e.Amount.Value' 0' MidpointRounding.AwayFromZero);                      if (e.Amount > 0)                          return e;                  }              }
Magic Number,OpenCBS.CoreDomain.Contracts.Savings,SavingsContract,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Savings\SavingsContract.cs,EvaluateSavingsEvent,The following statement contains a magic number: if(e is SavingAgioEvent || e is SavingManagementFeeEvent)              {                  if (e.Fee > 0)                  {                      e.Fee = Product.Currency.UseCents ? Math.Round(e.Fee.Value' 2' MidpointRounding.AwayFromZero) :                          Math.Round(e.Fee.Value' 0' MidpointRounding.AwayFromZero);                      if (e.Fee > 0)                           return e;                  }              }
Magic Number,OpenCBS.CoreDomain.Contracts.Savings,SavingBookContract,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Savings\SavingBookContract.cs,GetNextWeekly,The following statement contains a magic number: int weekEndDay2 = ApplicationSettings.WeekEndDay2 == 6 ? 1 : ApplicationSettings.WeekEndDay2 + 1;
Magic Number,OpenCBS.CoreDomain.Contracts.Savings,SavingBookContract,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Savings\SavingBookContract.cs,GetNextWeekly,The following statement contains a magic number: return pDate.AddDays((weekEndDay2 <= (int)pDate.DayOfWeek) ? 7 - ((int)pDate.DayOfWeek - weekEndDay2)                     : weekEndDay2 - (int)pDate.DayOfWeek);
Magic Number,OpenCBS.CoreDomain.Export.FieldType,DecimalFieldType,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Export\FieldType\DecimalFieldType.cs,DecimalFieldType,The following statement contains a magic number: DecimalNumber = 2;
Magic Number,OpenCBS.CoreDomain.Contracts.Loans.GenerateEvents,Accrual,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\GenerateEvents\Accrual.cs,GenerateLoanDisbursmentEvent,The following statement contains a magic number: if (pAlignInstallmentsDatesOnRealDisbursmentDate)              {                  //pLoan.StartDate = pDisburseDate;                  //for (int i = 1; i <= pLoan.NbOfInstallments; i++)                  //{                  //    pLoan.InstallmentList[i - 1].ExpectedDate = pLoan.CalculateInstallmentDate(pLoan.StartDate' i);                  //}              }              else              {                  if (pGeneralSettings.PayFirstInterestRealValue)                  {                      TimeSpan time = pDisburseDate - pLoan.StartDate;                      int diffDays = Math.Abs(time.Days);                        int nbOfDaysInPeriod = pLoan.InstallmentType.NbOfMonths * AVERAGE_NB_OF_DAYS_IN_MONTH + pLoan.InstallmentType.NbOfDays;                        if (pDisburseDate.CompareTo(pLoan.StartDate) < 0)                          pLoan.GetInstallment(0).InterestsRepayment += (Convert.ToDecimal(pLoan.InterestRate) * diffDays * pLoan.Amount / (double)nbOfDaysInPeriod);                      else                          pLoan.GetInstallment(0).InterestsRepayment -= (Convert.ToDecimal(pLoan.InterestRate) * diffDays * pLoan.Amount / (double)nbOfDaysInPeriod);                        if (AmountComparer.Compare(pLoan.GetInstallment(0).InterestsRepayment' 0) < 0)                      {                          pLoan.GetInstallment(0).InterestsRepayment = 0;                      }                      pLoan.GetInstallment(0).InterestsRepayment = Math.Round(pLoan.GetInstallment(0).InterestsRepayment.Value' 2);                  }              }
Magic Number,OpenCBS.CoreDomain.Contracts.Loans.GenerateEvents,Accrual,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\GenerateEvents\Accrual.cs,CalculateRemainingInterests,The following statement contains a magic number: foreach (Installment installment in pLoan.InstallmentList)              {                  if (installment.IsRepaid) continue;                  if(installment.ExpectedDate < pDate)                  {                      amount += installment.InterestsRepayment - installment.PaidInterests;                  }                  else if(installment.ExpectedDate == pDate)                  {                      amount += installment.InterestsRepayment - installment.PaidInterests;                        return Math.Round(amount.Value' 2);                  }                  else                  {                      DateTime date = installment.Number == 1 ? pLoan.StartDate : pLoan.GetInstallment(installment.Number - 2).ExpectedDate;                      int days;                                            int daysInInstallment = installment.Number == 1                                                         ? (installment.ExpectedDate - pLoan.StartDate).Days                                                         : (installment.ExpectedDate -                                                            pLoan.GetInstallment(installment.Number - 2).ExpectedDate)                                                               .Days;                        if (installment.Number != 1)                      {                          if(pLoan.GetInstallment(installment.Number - 2).IsRepaid && pLoan.GetInstallment(installment.Number - 2).ExpectedDate > pDate)                          {                              days = 0;                          }                          else                          {                              if (pLoan.GetNotDeletedRepaymentEvent().Date > date && pLoan.GetNotDeletedRepaymentEvent().Interests > 0                                  && pLoan.GetNotDeletedRepaymentEvent().RepaymentType == OPaymentType.PartialPayment)                              {                                  date = pLoan.GetLastRepaymentDate();                                  daysInInstallment = (installment.ExpectedDate - date).Days;                              }                              days = (pDate - date).Days;                          }                      }                      else                          days = (pDate - date).Days;                        amount += days >= pLoan.NumberOfDaysInTheInstallment(installment.Number' pDate)                                               ? installment.InterestsRepayment                                               : installment.InterestsRepayment * (double)days / (double) daysInInstallment;                                            if (installment.PaidInterests > amount)                          amount = 0;                        if (installment.PaidInterests < amount)                          amount -= installment.PaidInterests;                        return amount.Value;                  }              }
Magic Number,OpenCBS.CoreDomain.Contracts.Loans.GenerateEvents,Accrual,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\GenerateEvents\Accrual.cs,CalculateRemainingInterests,The following statement contains a magic number: foreach (Installment installment in pLoan.InstallmentList)              {                  if (installment.IsRepaid) continue;                  if(installment.ExpectedDate < pDate)                  {                      amount += installment.InterestsRepayment - installment.PaidInterests;                  }                  else if(installment.ExpectedDate == pDate)                  {                      amount += installment.InterestsRepayment - installment.PaidInterests;                        return Math.Round(amount.Value' 2);                  }                  else                  {                      DateTime date = installment.Number == 1 ? pLoan.StartDate : pLoan.GetInstallment(installment.Number - 2).ExpectedDate;                      int days;                                            int daysInInstallment = installment.Number == 1                                                         ? (installment.ExpectedDate - pLoan.StartDate).Days                                                         : (installment.ExpectedDate -                                                            pLoan.GetInstallment(installment.Number - 2).ExpectedDate)                                                               .Days;                        if (installment.Number != 1)                      {                          if(pLoan.GetInstallment(installment.Number - 2).IsRepaid && pLoan.GetInstallment(installment.Number - 2).ExpectedDate > pDate)                          {                              days = 0;                          }                          else                          {                              if (pLoan.GetNotDeletedRepaymentEvent().Date > date && pLoan.GetNotDeletedRepaymentEvent().Interests > 0                                  && pLoan.GetNotDeletedRepaymentEvent().RepaymentType == OPaymentType.PartialPayment)                              {                                  date = pLoan.GetLastRepaymentDate();                                  daysInInstallment = (installment.ExpectedDate - date).Days;                              }                              days = (pDate - date).Days;                          }                      }                      else                          days = (pDate - date).Days;                        amount += days >= pLoan.NumberOfDaysInTheInstallment(installment.Number' pDate)                                               ? installment.InterestsRepayment                                               : installment.InterestsRepayment * (double)days / (double) daysInInstallment;                                            if (installment.PaidInterests > amount)                          amount = 0;                        if (installment.PaidInterests < amount)                          amount -= installment.PaidInterests;                        return amount.Value;                  }              }
Magic Number,OpenCBS.CoreDomain.Contracts.Loans.GenerateEvents,Accrual,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\GenerateEvents\Accrual.cs,CalculateRemainingInterests,The following statement contains a magic number: foreach (Installment installment in pLoan.InstallmentList)              {                  if (installment.IsRepaid) continue;                  if(installment.ExpectedDate < pDate)                  {                      amount += installment.InterestsRepayment - installment.PaidInterests;                  }                  else if(installment.ExpectedDate == pDate)                  {                      amount += installment.InterestsRepayment - installment.PaidInterests;                        return Math.Round(amount.Value' 2);                  }                  else                  {                      DateTime date = installment.Number == 1 ? pLoan.StartDate : pLoan.GetInstallment(installment.Number - 2).ExpectedDate;                      int days;                                            int daysInInstallment = installment.Number == 1                                                         ? (installment.ExpectedDate - pLoan.StartDate).Days                                                         : (installment.ExpectedDate -                                                            pLoan.GetInstallment(installment.Number - 2).ExpectedDate)                                                               .Days;                        if (installment.Number != 1)                      {                          if(pLoan.GetInstallment(installment.Number - 2).IsRepaid && pLoan.GetInstallment(installment.Number - 2).ExpectedDate > pDate)                          {                              days = 0;                          }                          else                          {                              if (pLoan.GetNotDeletedRepaymentEvent().Date > date && pLoan.GetNotDeletedRepaymentEvent().Interests > 0                                  && pLoan.GetNotDeletedRepaymentEvent().RepaymentType == OPaymentType.PartialPayment)                              {                                  date = pLoan.GetLastRepaymentDate();                                  daysInInstallment = (installment.ExpectedDate - date).Days;                              }                              days = (pDate - date).Days;                          }                      }                      else                          days = (pDate - date).Days;                        amount += days >= pLoan.NumberOfDaysInTheInstallment(installment.Number' pDate)                                               ? installment.InterestsRepayment                                               : installment.InterestsRepayment * (double)days / (double) daysInInstallment;                                            if (installment.PaidInterests > amount)                          amount = 0;                        if (installment.PaidInterests < amount)                          amount -= installment.PaidInterests;                        return amount.Value;                  }              }
Magic Number,OpenCBS.CoreDomain.Contracts.Loans.GenerateEvents,Accrual,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\GenerateEvents\Accrual.cs,CalculateRemainingInterests,The following statement contains a magic number: foreach (Installment installment in pLoan.InstallmentList)              {                  if (installment.IsRepaid) continue;                  if(installment.ExpectedDate < pDate)                  {                      amount += installment.InterestsRepayment - installment.PaidInterests;                  }                  else if(installment.ExpectedDate == pDate)                  {                      amount += installment.InterestsRepayment - installment.PaidInterests;                        return Math.Round(amount.Value' 2);                  }                  else                  {                      DateTime date = installment.Number == 1 ? pLoan.StartDate : pLoan.GetInstallment(installment.Number - 2).ExpectedDate;                      int days;                                            int daysInInstallment = installment.Number == 1                                                         ? (installment.ExpectedDate - pLoan.StartDate).Days                                                         : (installment.ExpectedDate -                                                            pLoan.GetInstallment(installment.Number - 2).ExpectedDate)                                                               .Days;                        if (installment.Number != 1)                      {                          if(pLoan.GetInstallment(installment.Number - 2).IsRepaid && pLoan.GetInstallment(installment.Number - 2).ExpectedDate > pDate)                          {                              days = 0;                          }                          else                          {                              if (pLoan.GetNotDeletedRepaymentEvent().Date > date && pLoan.GetNotDeletedRepaymentEvent().Interests > 0                                  && pLoan.GetNotDeletedRepaymentEvent().RepaymentType == OPaymentType.PartialPayment)                              {                                  date = pLoan.GetLastRepaymentDate();                                  daysInInstallment = (installment.ExpectedDate - date).Days;                              }                              days = (pDate - date).Days;                          }                      }                      else                          days = (pDate - date).Days;                        amount += days >= pLoan.NumberOfDaysInTheInstallment(installment.Number' pDate)                                               ? installment.InterestsRepayment                                               : installment.InterestsRepayment * (double)days / (double) daysInInstallment;                                            if (installment.PaidInterests > amount)                          amount = 0;                        if (installment.PaidInterests < amount)                          amount -= installment.PaidInterests;                        return amount.Value;                  }              }
Magic Number,OpenCBS.CoreDomain.Contracts.Loans.GenerateEvents,Accrual,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\GenerateEvents\Accrual.cs,CalculateRemainingInterests,The following statement contains a magic number: foreach (Installment installment in pLoan.InstallmentList)              {                  if (installment.IsRepaid) continue;                  if(installment.ExpectedDate < pDate)                  {                      amount += installment.InterestsRepayment - installment.PaidInterests;                  }                  else if(installment.ExpectedDate == pDate)                  {                      amount += installment.InterestsRepayment - installment.PaidInterests;                        return Math.Round(amount.Value' 2);                  }                  else                  {                      DateTime date = installment.Number == 1 ? pLoan.StartDate : pLoan.GetInstallment(installment.Number - 2).ExpectedDate;                      int days;                                            int daysInInstallment = installment.Number == 1                                                         ? (installment.ExpectedDate - pLoan.StartDate).Days                                                         : (installment.ExpectedDate -                                                            pLoan.GetInstallment(installment.Number - 2).ExpectedDate)                                                               .Days;                        if (installment.Number != 1)                      {                          if(pLoan.GetInstallment(installment.Number - 2).IsRepaid && pLoan.GetInstallment(installment.Number - 2).ExpectedDate > pDate)                          {                              days = 0;                          }                          else                          {                              if (pLoan.GetNotDeletedRepaymentEvent().Date > date && pLoan.GetNotDeletedRepaymentEvent().Interests > 0                                  && pLoan.GetNotDeletedRepaymentEvent().RepaymentType == OPaymentType.PartialPayment)                              {                                  date = pLoan.GetLastRepaymentDate();                                  daysInInstallment = (installment.ExpectedDate - date).Days;                              }                              days = (pDate - date).Days;                          }                      }                      else                          days = (pDate - date).Days;                        amount += days >= pLoan.NumberOfDaysInTheInstallment(installment.Number' pDate)                                               ? installment.InterestsRepayment                                               : installment.InterestsRepayment * (double)days / (double) daysInInstallment;                                            if (installment.PaidInterests > amount)                          amount = 0;                        if (installment.PaidInterests < amount)                          amount -= installment.PaidInterests;                        return amount.Value;                  }              }
Magic Number,OpenCBS.CoreDomain.Contracts.Loans.GenerateEvents,Cash,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\GenerateEvents\Cash.cs,GenerateLoanDisbursmentEvent,The following statement contains a magic number: if (pAlignInstallmentsDatesOnRealDisbursmentDate)              {                  //pLoan.StartDate = pDisburseDate;                  //for (int i = 1; i <= pLoan.NbOfInstallments; i++)                  //{                  //    pLoan.InstallmentList[i - 1].ExpectedDate = pLoan.CalculateInstallmentDate(pLoan.StartDate' i);                  //}              }              else              {                  if (pGeneralSettings.PayFirstInterestRealValue)                  {                      TimeSpan time = pDisburseDate - pLoan.StartDate;                      int diffDays = Math.Abs(time.Days);                        int nbOfDaysInPeriod = pLoan.InstallmentType.NbOfMonths * AVERAGE_NB_OF_DAYS_IN_MONTH + pLoan.InstallmentType.NbOfDays;                        if (pDisburseDate.CompareTo(pLoan.StartDate) < 0)                          pLoan.GetInstallment(0).InterestsRepayment += (Convert.ToDecimal(pLoan.InterestRate) * diffDays * pLoan.Amount / (double)nbOfDaysInPeriod);                      else                          pLoan.GetInstallment(0).InterestsRepayment -= (Convert.ToDecimal(pLoan.InterestRate) * diffDays * pLoan.Amount / (double)nbOfDaysInPeriod);                        if (AmountComparer.Compare(pLoan.GetInstallment(0).InterestsRepayment' 0) < 0)                      {                          pLoan.GetInstallment(0).InterestsRepayment = 0;                      }                      pLoan.GetInstallment(0).InterestsRepayment = Math.Round(pLoan.GetInstallment(0).InterestsRepayment.Value' 2);                  }              }
Magic Number,OpenCBS.CoreDomain.Contracts.Loans.CalculateInstallments.Flat,ExoticStrategy,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\CalculateInstallments\Flat\ExoticStrategy.cs,ExoticStrategy,The following statement contains a magic number: _roundingPoint = pContract.UseCents ? 2 : 0;
Magic Number,OpenCBS.CoreDomain.Contracts.Loans.CalculateInstallments.Flat,FlatStrategy,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\CalculateInstallments\Flat\FlatStrategy.cs,FlatStrategy,The following statement contains a magic number: _roundingPoint = pContract.UseCents ? 2 : 0;
Magic Number,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.MaxRepayment,CalculateAmountToRepaySpecifiedInstallmentStrategy,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\MaxRepayment\CalculateAmountToRepaySpecifiedInstallmentStrategy.cs,MaxAmountOfRealSchedule,The following statement contains a magic number: int roundingPoint = _contract.UseCents ? 2 : 0;
Magic Number,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.MaxRepayment,CalculateAmountToRepaySpecifiedInstallmentStrategy,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\MaxRepayment\CalculateAmountToRepaySpecifiedInstallmentStrategy.cs,MaxAmountOfRealSchedule,The following statement contains a magic number: for (int i = 0; i < _contract.NbOfInstallments; i++)              {                  installment = _contract.GetInstallment(i);                    if (installment.IsRepaid)                  {                      if (lasDateOfPayment < installment.ExpectedDate)                          lasDateOfPayment = installment.ExpectedDate;                  }                    if (installment.ExpectedDate < payDate)                  {                      capitalRepayment += installment.CapitalRepayment - installment.PaidCapital;                      calculated = true;                  }                    if (_contract.StartDate < payDate && installment.Number == 1 && !calculated)                  {                      capitalRepayment += installment.CapitalRepayment - installment.PaidCapital;                      calculated = true;                  }                    if (installment.ExpectedDate == payDate && !calculated)                  {                      capitalRepayment += installment.CapitalRepayment - installment.PaidCapital;                      calculated = true;                  }                    if (installment.Number > 1                      && installment.ExpectedDate != _contract.StartDate                      && installment.ExpectedDate > payDate                      && _contract.GetInstallment(installment.Number - 2).ExpectedDate < payDate                      && !calculated)                  {                      capitalRepayment += installment.CapitalRepayment - installment.PaidCapital;                  }                    calculated = false;                    if (installment.IsRepaid || installment.InterestHasToPay == 0) continue;                    if (installment.ExpectedDate <= payDate)                  {                      calculatedInterests = 0;                        if (installment.PaidInterests > 0                          && installment.InterestsRepayment > installment.PaidInterests)                      {                          calculatedInterests = installment.PaidInterests;                      }                        if (installment.PaidCapital == 0                          && installment.PaidInterests > 0                          && installment.PaidInterests != installment.InterestsRepayment)                      {                          DateTime dateOfInstallment = installment.Number == 1                                     ? _contract.StartDate                                     : _contract.GetInstallment(installment.Number - 2).ExpectedDate;                          int d = (lasDateOfPayment - dateOfInstallment).Days;                          OCurrency olbBeforePayment =                              _contract.Events.GetRepaymentEvents().Where(                                  repaymentEvent => !repaymentEvent.Deleted && repaymentEvent.Date <= dateOfInstallment).Aggregate(                                      _contract.Amount' (current' repaymentEvent) => current - repaymentEvent.Principal);                            calculatedInterests =                              (olbBeforePayment * Convert.ToDecimal(_contract.InterestRate) / daysInTheYear * d).Value;                          calculatedInterests = Math.Round(calculatedInterests.Value' roundingPoint'                                                           MidpointRounding.AwayFromZero);                            if (installment.PaidInterests < calculatedInterests && actualOlb != olbBeforePayment)                          {                              calculatedInterests = installment.PaidInterests;                          }                      }                      DateTime expectedDate = installment.ExpectedDate;                      //in case very late repayment                      if (installment.Number == _contract.InstallmentList.Count                          && installment.ExpectedDate < payDate                          && installment.PaidCapital == 0)                      {                          expectedDate = payDate;                      }                        int days = (expectedDate - lasDateOfPayment).Days;                      interestPayment += Math.Round((olb * _contract.InterestRate / daysInTheYear * days).Value + calculatedInterests.Value'                                                      roundingPoint' MidpointRounding.AwayFromZero) - installment.PaidInterests;                      lasDateOfPayment = installment.ExpectedDate;                  }                    if (installment.Number > 1                      && installment.ExpectedDate > payDate                      && installment.ExpectedDate > payDate                      && _contract.GetInstallment(installment.Number - 2).ExpectedDate < payDate)                  {                      OCurrency paidInterests = installment.PaidInterests;                        int daySpan = (payDate - lasDateOfPayment).Days < 0 ? 0 : (payDate - lasDateOfPayment).Days;                        installment.InterestsRepayment = olb * _contract.InterestRate * daySpan / daysInTheYear + paidInterests;                        installment.InterestsRepayment =                          Math.Round(installment.InterestsRepayment.Value' roundingPoint'                                     MidpointRounding.AwayFromZero);                      interestPayment += installment.InterestsRepayment - paidInterests;                        lasDateOfPayment = installment.ExpectedDate;                  }                    if (installment.Number == 1 && installment.ExpectedDate > payDate)                  {                      int daySpan = (payDate - _contract.StartDate).Days < 0                                        ? 0                                        : (payDate - _contract.StartDate).Days;                      OCurrency interest = olb * _contract.InterestRate * daySpan / daysInTheYear;                      interestPayment += Math.Round(interest.Value' roundingPoint' MidpointRounding.AwayFromZero) - installment.PaidInterests;                  }              }
Magic Number,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.MaxRepayment,CalculateAmountToRepaySpecifiedInstallmentStrategy,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\MaxRepayment\CalculateAmountToRepaySpecifiedInstallmentStrategy.cs,MaxAmountOfRealSchedule,The following statement contains a magic number: for (int i = 0; i < _contract.NbOfInstallments; i++)              {                  installment = _contract.GetInstallment(i);                    if (installment.IsRepaid)                  {                      if (lasDateOfPayment < installment.ExpectedDate)                          lasDateOfPayment = installment.ExpectedDate;                  }                    if (installment.ExpectedDate < payDate)                  {                      capitalRepayment += installment.CapitalRepayment - installment.PaidCapital;                      calculated = true;                  }                    if (_contract.StartDate < payDate && installment.Number == 1 && !calculated)                  {                      capitalRepayment += installment.CapitalRepayment - installment.PaidCapital;                      calculated = true;                  }                    if (installment.ExpectedDate == payDate && !calculated)                  {                      capitalRepayment += installment.CapitalRepayment - installment.PaidCapital;                      calculated = true;                  }                    if (installment.Number > 1                      && installment.ExpectedDate != _contract.StartDate                      && installment.ExpectedDate > payDate                      && _contract.GetInstallment(installment.Number - 2).ExpectedDate < payDate                      && !calculated)                  {                      capitalRepayment += installment.CapitalRepayment - installment.PaidCapital;                  }                    calculated = false;                    if (installment.IsRepaid || installment.InterestHasToPay == 0) continue;                    if (installment.ExpectedDate <= payDate)                  {                      calculatedInterests = 0;                        if (installment.PaidInterests > 0                          && installment.InterestsRepayment > installment.PaidInterests)                      {                          calculatedInterests = installment.PaidInterests;                      }                        if (installment.PaidCapital == 0                          && installment.PaidInterests > 0                          && installment.PaidInterests != installment.InterestsRepayment)                      {                          DateTime dateOfInstallment = installment.Number == 1                                     ? _contract.StartDate                                     : _contract.GetInstallment(installment.Number - 2).ExpectedDate;                          int d = (lasDateOfPayment - dateOfInstallment).Days;                          OCurrency olbBeforePayment =                              _contract.Events.GetRepaymentEvents().Where(                                  repaymentEvent => !repaymentEvent.Deleted && repaymentEvent.Date <= dateOfInstallment).Aggregate(                                      _contract.Amount' (current' repaymentEvent) => current - repaymentEvent.Principal);                            calculatedInterests =                              (olbBeforePayment * Convert.ToDecimal(_contract.InterestRate) / daysInTheYear * d).Value;                          calculatedInterests = Math.Round(calculatedInterests.Value' roundingPoint'                                                           MidpointRounding.AwayFromZero);                            if (installment.PaidInterests < calculatedInterests && actualOlb != olbBeforePayment)                          {                              calculatedInterests = installment.PaidInterests;                          }                      }                      DateTime expectedDate = installment.ExpectedDate;                      //in case very late repayment                      if (installment.Number == _contract.InstallmentList.Count                          && installment.ExpectedDate < payDate                          && installment.PaidCapital == 0)                      {                          expectedDate = payDate;                      }                        int days = (expectedDate - lasDateOfPayment).Days;                      interestPayment += Math.Round((olb * _contract.InterestRate / daysInTheYear * days).Value + calculatedInterests.Value'                                                      roundingPoint' MidpointRounding.AwayFromZero) - installment.PaidInterests;                      lasDateOfPayment = installment.ExpectedDate;                  }                    if (installment.Number > 1                      && installment.ExpectedDate > payDate                      && installment.ExpectedDate > payDate                      && _contract.GetInstallment(installment.Number - 2).ExpectedDate < payDate)                  {                      OCurrency paidInterests = installment.PaidInterests;                        int daySpan = (payDate - lasDateOfPayment).Days < 0 ? 0 : (payDate - lasDateOfPayment).Days;                        installment.InterestsRepayment = olb * _contract.InterestRate * daySpan / daysInTheYear + paidInterests;                        installment.InterestsRepayment =                          Math.Round(installment.InterestsRepayment.Value' roundingPoint'                                     MidpointRounding.AwayFromZero);                      interestPayment += installment.InterestsRepayment - paidInterests;                        lasDateOfPayment = installment.ExpectedDate;                  }                    if (installment.Number == 1 && installment.ExpectedDate > payDate)                  {                      int daySpan = (payDate - _contract.StartDate).Days < 0                                        ? 0                                        : (payDate - _contract.StartDate).Days;                      OCurrency interest = olb * _contract.InterestRate * daySpan / daysInTheYear;                      interestPayment += Math.Round(interest.Value' roundingPoint' MidpointRounding.AwayFromZero) - installment.PaidInterests;                  }              }
Magic Number,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.MaxRepayment,CalculateAmountToRepaySpecifiedInstallmentStrategy,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\MaxRepayment\CalculateAmountToRepaySpecifiedInstallmentStrategy.cs,MaxAmountOfRealSchedule,The following statement contains a magic number: for (int i = 0; i < _contract.NbOfInstallments; i++)              {                  installment = _contract.GetInstallment(i);                    if (installment.IsRepaid)                  {                      if (lasDateOfPayment < installment.ExpectedDate)                          lasDateOfPayment = installment.ExpectedDate;                  }                    if (installment.ExpectedDate < payDate)                  {                      capitalRepayment += installment.CapitalRepayment - installment.PaidCapital;                      calculated = true;                  }                    if (_contract.StartDate < payDate && installment.Number == 1 && !calculated)                  {                      capitalRepayment += installment.CapitalRepayment - installment.PaidCapital;                      calculated = true;                  }                    if (installment.ExpectedDate == payDate && !calculated)                  {                      capitalRepayment += installment.CapitalRepayment - installment.PaidCapital;                      calculated = true;                  }                    if (installment.Number > 1                      && installment.ExpectedDate != _contract.StartDate                      && installment.ExpectedDate > payDate                      && _contract.GetInstallment(installment.Number - 2).ExpectedDate < payDate                      && !calculated)                  {                      capitalRepayment += installment.CapitalRepayment - installment.PaidCapital;                  }                    calculated = false;                    if (installment.IsRepaid || installment.InterestHasToPay == 0) continue;                    if (installment.ExpectedDate <= payDate)                  {                      calculatedInterests = 0;                        if (installment.PaidInterests > 0                          && installment.InterestsRepayment > installment.PaidInterests)                      {                          calculatedInterests = installment.PaidInterests;                      }                        if (installment.PaidCapital == 0                          && installment.PaidInterests > 0                          && installment.PaidInterests != installment.InterestsRepayment)                      {                          DateTime dateOfInstallment = installment.Number == 1                                     ? _contract.StartDate                                     : _contract.GetInstallment(installment.Number - 2).ExpectedDate;                          int d = (lasDateOfPayment - dateOfInstallment).Days;                          OCurrency olbBeforePayment =                              _contract.Events.GetRepaymentEvents().Where(                                  repaymentEvent => !repaymentEvent.Deleted && repaymentEvent.Date <= dateOfInstallment).Aggregate(                                      _contract.Amount' (current' repaymentEvent) => current - repaymentEvent.Principal);                            calculatedInterests =                              (olbBeforePayment * Convert.ToDecimal(_contract.InterestRate) / daysInTheYear * d).Value;                          calculatedInterests = Math.Round(calculatedInterests.Value' roundingPoint'                                                           MidpointRounding.AwayFromZero);                            if (installment.PaidInterests < calculatedInterests && actualOlb != olbBeforePayment)                          {                              calculatedInterests = installment.PaidInterests;                          }                      }                      DateTime expectedDate = installment.ExpectedDate;                      //in case very late repayment                      if (installment.Number == _contract.InstallmentList.Count                          && installment.ExpectedDate < payDate                          && installment.PaidCapital == 0)                      {                          expectedDate = payDate;                      }                        int days = (expectedDate - lasDateOfPayment).Days;                      interestPayment += Math.Round((olb * _contract.InterestRate / daysInTheYear * days).Value + calculatedInterests.Value'                                                      roundingPoint' MidpointRounding.AwayFromZero) - installment.PaidInterests;                      lasDateOfPayment = installment.ExpectedDate;                  }                    if (installment.Number > 1                      && installment.ExpectedDate > payDate                      && installment.ExpectedDate > payDate                      && _contract.GetInstallment(installment.Number - 2).ExpectedDate < payDate)                  {                      OCurrency paidInterests = installment.PaidInterests;                        int daySpan = (payDate - lasDateOfPayment).Days < 0 ? 0 : (payDate - lasDateOfPayment).Days;                        installment.InterestsRepayment = olb * _contract.InterestRate * daySpan / daysInTheYear + paidInterests;                        installment.InterestsRepayment =                          Math.Round(installment.InterestsRepayment.Value' roundingPoint'                                     MidpointRounding.AwayFromZero);                      interestPayment += installment.InterestsRepayment - paidInterests;                        lasDateOfPayment = installment.ExpectedDate;                  }                    if (installment.Number == 1 && installment.ExpectedDate > payDate)                  {                      int daySpan = (payDate - _contract.StartDate).Days < 0                                        ? 0                                        : (payDate - _contract.StartDate).Days;                      OCurrency interest = olb * _contract.InterestRate * daySpan / daysInTheYear;                      interestPayment += Math.Round(interest.Value' roundingPoint' MidpointRounding.AwayFromZero) - installment.PaidInterests;                  }              }
Magic Number,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.MaxRepayment,CalculateMaximumAmountToRegradingLoanStrategy,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\MaxRepayment\CalculateMaximumAmountToRegradingLoanStrategy.cs,MaxAmountOfRealSchedule,The following statement contains a magic number: int roundingPoint = _contract.UseCents ? 2 : 0;
Magic Number,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.MaxRepayment,CalculateMaximumAmountToRegradingLoanStrategy,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\MaxRepayment\CalculateMaximumAmountToRegradingLoanStrategy.cs,MaxAmountOfRealSchedule,The following statement contains a magic number: for (int i = 0; i < _contract.NbOfInstallments; i++)              {                  installment = _contract.GetInstallment(i);                    if (installment.IsRepaid)                  {                      if (lasDateOfPayment < installment.ExpectedDate)                          lasDateOfPayment = installment.ExpectedDate;                  }                    if (installment.ExpectedDate < payDate)                  {                      capitalRepayment += installment.CapitalRepayment - installment.PaidCapital;                      calculated = true;                  }                    if (_contract.StartDate < payDate && installment.Number == 1 && !calculated)                  {                      capitalRepayment += installment.CapitalRepayment - installment.PaidCapital;                      calculated = true;                  }                    if (installment.ExpectedDate == payDate && !calculated)                  {                      capitalRepayment += installment.CapitalRepayment - installment.PaidCapital;                      calculated = true;                  }                    if (installment.Number > 1                       && installment.ExpectedDate != _contract.StartDate                       && installment.ExpectedDate > payDate                       && _contract.GetInstallment(installment.Number - 2).ExpectedDate < payDate                       && !calculated)                  {                      capitalRepayment += installment.CapitalRepayment - installment.PaidCapital;                  }                    calculated = false;                    if (installment.IsRepaid || installment.InterestHasToPay == 0) continue;                    if (installment.ExpectedDate <= payDate)                  {                      calculatedInterests = 0;                        if (installment.PaidInterests > 0                           && installment.InterestsRepayment > installment.PaidInterests)                      {                          calculatedInterests = installment.PaidInterests;                      }                        if (installment.PaidCapital == 0                           && installment.PaidInterests > 0                           && installment.PaidInterests != installment.InterestsRepayment)                      {                          DateTime dateOfInstallment = installment.Number == 1                                     ? _contract.StartDate                                     : _contract.GetInstallment(installment.Number - 2).ExpectedDate;                          int d = (lasDateOfPayment - dateOfInstallment).Days;                          OCurrency olbBeforePayment =                              _contract.Events.GetRepaymentEvents().Where(                                  repaymentEvent => !repaymentEvent.Deleted && repaymentEvent.Date <= dateOfInstallment).Aggregate(                                      _contract.Amount' (current' repaymentEvent) => current - repaymentEvent.Principal);                            calculatedInterests =                              (olbBeforePayment*Convert.ToDecimal(_contract.InterestRate)/daysInTheYear*d).Value;                          calculatedInterests = Math.Round(calculatedInterests.Value' roundingPoint'                                                           MidpointRounding.AwayFromZero);                            if (installment.PaidInterests < calculatedInterests && actualOlb != olbBeforePayment)                          {                              calculatedInterests = installment.PaidInterests;                          }                      }                      DateTime expectedDate = installment.ExpectedDate;                      //in case very late repayment                      if (installment.Number == _contract.InstallmentList.Count                          && installment.ExpectedDate < payDate                          && installment.PaidCapital == 0)                      {                          expectedDate = payDate;                      }                        int days = (expectedDate - lasDateOfPayment).Days;                      interestPayment += Math.Round((olb * _contract.InterestRate / daysInTheYear * days).Value + calculatedInterests.Value'                                                      roundingPoint' MidpointRounding.AwayFromZero) - installment.PaidInterests;                      lasDateOfPayment = installment.ExpectedDate;                  }                    if (installment.Number > 1                       && installment.ExpectedDate > payDate                       && installment.ExpectedDate > payDate                       && _contract.GetInstallment(installment.Number - 2).ExpectedDate < payDate)                  {                      OCurrency paidInterests = installment.PaidInterests;                        int daySpan = (payDate - lasDateOfPayment).Days < 0 ? 0 : (payDate - lasDateOfPayment).Days;                                            installment.InterestsRepayment = olb * _contract.InterestRate * daySpan / daysInTheYear + paidInterests;                        installment.InterestsRepayment =                          Math.Round(installment.InterestsRepayment.Value' roundingPoint'                                     MidpointRounding.AwayFromZero);                      interestPayment += installment.InterestsRepayment - paidInterests;                        lasDateOfPayment = installment.ExpectedDate;                  }                    if (installment.Number == 1 && installment.ExpectedDate > payDate)                  {                      int daySpan = (payDate - _contract.StartDate).Days < 0                                        ? 0                                        : (payDate - _contract.StartDate).Days;                      OCurrency interest = olb * _contract.InterestRate * daySpan / daysInTheYear;                      interestPayment += Math.Round(interest.Value' roundingPoint' MidpointRounding.AwayFromZero) - installment.PaidInterests;                   }              }
Magic Number,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.MaxRepayment,CalculateMaximumAmountToRegradingLoanStrategy,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\MaxRepayment\CalculateMaximumAmountToRegradingLoanStrategy.cs,MaxAmountOfRealSchedule,The following statement contains a magic number: for (int i = 0; i < _contract.NbOfInstallments; i++)              {                  installment = _contract.GetInstallment(i);                    if (installment.IsRepaid)                  {                      if (lasDateOfPayment < installment.ExpectedDate)                          lasDateOfPayment = installment.ExpectedDate;                  }                    if (installment.ExpectedDate < payDate)                  {                      capitalRepayment += installment.CapitalRepayment - installment.PaidCapital;                      calculated = true;                  }                    if (_contract.StartDate < payDate && installment.Number == 1 && !calculated)                  {                      capitalRepayment += installment.CapitalRepayment - installment.PaidCapital;                      calculated = true;                  }                    if (installment.ExpectedDate == payDate && !calculated)                  {                      capitalRepayment += installment.CapitalRepayment - installment.PaidCapital;                      calculated = true;                  }                    if (installment.Number > 1                       && installment.ExpectedDate != _contract.StartDate                       && installment.ExpectedDate > payDate                       && _contract.GetInstallment(installment.Number - 2).ExpectedDate < payDate                       && !calculated)                  {                      capitalRepayment += installment.CapitalRepayment - installment.PaidCapital;                  }                    calculated = false;                    if (installment.IsRepaid || installment.InterestHasToPay == 0) continue;                    if (installment.ExpectedDate <= payDate)                  {                      calculatedInterests = 0;                        if (installment.PaidInterests > 0                           && installment.InterestsRepayment > installment.PaidInterests)                      {                          calculatedInterests = installment.PaidInterests;                      }                        if (installment.PaidCapital == 0                           && installment.PaidInterests > 0                           && installment.PaidInterests != installment.InterestsRepayment)                      {                          DateTime dateOfInstallment = installment.Number == 1                                     ? _contract.StartDate                                     : _contract.GetInstallment(installment.Number - 2).ExpectedDate;                          int d = (lasDateOfPayment - dateOfInstallment).Days;                          OCurrency olbBeforePayment =                              _contract.Events.GetRepaymentEvents().Where(                                  repaymentEvent => !repaymentEvent.Deleted && repaymentEvent.Date <= dateOfInstallment).Aggregate(                                      _contract.Amount' (current' repaymentEvent) => current - repaymentEvent.Principal);                            calculatedInterests =                              (olbBeforePayment*Convert.ToDecimal(_contract.InterestRate)/daysInTheYear*d).Value;                          calculatedInterests = Math.Round(calculatedInterests.Value' roundingPoint'                                                           MidpointRounding.AwayFromZero);                            if (installment.PaidInterests < calculatedInterests && actualOlb != olbBeforePayment)                          {                              calculatedInterests = installment.PaidInterests;                          }                      }                      DateTime expectedDate = installment.ExpectedDate;                      //in case very late repayment                      if (installment.Number == _contract.InstallmentList.Count                          && installment.ExpectedDate < payDate                          && installment.PaidCapital == 0)                      {                          expectedDate = payDate;                      }                        int days = (expectedDate - lasDateOfPayment).Days;                      interestPayment += Math.Round((olb * _contract.InterestRate / daysInTheYear * days).Value + calculatedInterests.Value'                                                      roundingPoint' MidpointRounding.AwayFromZero) - installment.PaidInterests;                      lasDateOfPayment = installment.ExpectedDate;                  }                    if (installment.Number > 1                       && installment.ExpectedDate > payDate                       && installment.ExpectedDate > payDate                       && _contract.GetInstallment(installment.Number - 2).ExpectedDate < payDate)                  {                      OCurrency paidInterests = installment.PaidInterests;                        int daySpan = (payDate - lasDateOfPayment).Days < 0 ? 0 : (payDate - lasDateOfPayment).Days;                                            installment.InterestsRepayment = olb * _contract.InterestRate * daySpan / daysInTheYear + paidInterests;                        installment.InterestsRepayment =                          Math.Round(installment.InterestsRepayment.Value' roundingPoint'                                     MidpointRounding.AwayFromZero);                      interestPayment += installment.InterestsRepayment - paidInterests;                        lasDateOfPayment = installment.ExpectedDate;                  }                    if (installment.Number == 1 && installment.ExpectedDate > payDate)                  {                      int daySpan = (payDate - _contract.StartDate).Days < 0                                        ? 0                                        : (payDate - _contract.StartDate).Days;                      OCurrency interest = olb * _contract.InterestRate * daySpan / daysInTheYear;                      interestPayment += Math.Round(interest.Value' roundingPoint' MidpointRounding.AwayFromZero) - installment.PaidInterests;                   }              }
Magic Number,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.MaxRepayment,CalculateMaximumAmountToRegradingLoanStrategy,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\MaxRepayment\CalculateMaximumAmountToRegradingLoanStrategy.cs,MaxAmountOfRealSchedule,The following statement contains a magic number: for (int i = 0; i < _contract.NbOfInstallments; i++)              {                  installment = _contract.GetInstallment(i);                    if (installment.IsRepaid)                  {                      if (lasDateOfPayment < installment.ExpectedDate)                          lasDateOfPayment = installment.ExpectedDate;                  }                    if (installment.ExpectedDate < payDate)                  {                      capitalRepayment += installment.CapitalRepayment - installment.PaidCapital;                      calculated = true;                  }                    if (_contract.StartDate < payDate && installment.Number == 1 && !calculated)                  {                      capitalRepayment += installment.CapitalRepayment - installment.PaidCapital;                      calculated = true;                  }                    if (installment.ExpectedDate == payDate && !calculated)                  {                      capitalRepayment += installment.CapitalRepayment - installment.PaidCapital;                      calculated = true;                  }                    if (installment.Number > 1                       && installment.ExpectedDate != _contract.StartDate                       && installment.ExpectedDate > payDate                       && _contract.GetInstallment(installment.Number - 2).ExpectedDate < payDate                       && !calculated)                  {                      capitalRepayment += installment.CapitalRepayment - installment.PaidCapital;                  }                    calculated = false;                    if (installment.IsRepaid || installment.InterestHasToPay == 0) continue;                    if (installment.ExpectedDate <= payDate)                  {                      calculatedInterests = 0;                        if (installment.PaidInterests > 0                           && installment.InterestsRepayment > installment.PaidInterests)                      {                          calculatedInterests = installment.PaidInterests;                      }                        if (installment.PaidCapital == 0                           && installment.PaidInterests > 0                           && installment.PaidInterests != installment.InterestsRepayment)                      {                          DateTime dateOfInstallment = installment.Number == 1                                     ? _contract.StartDate                                     : _contract.GetInstallment(installment.Number - 2).ExpectedDate;                          int d = (lasDateOfPayment - dateOfInstallment).Days;                          OCurrency olbBeforePayment =                              _contract.Events.GetRepaymentEvents().Where(                                  repaymentEvent => !repaymentEvent.Deleted && repaymentEvent.Date <= dateOfInstallment).Aggregate(                                      _contract.Amount' (current' repaymentEvent) => current - repaymentEvent.Principal);                            calculatedInterests =                              (olbBeforePayment*Convert.ToDecimal(_contract.InterestRate)/daysInTheYear*d).Value;                          calculatedInterests = Math.Round(calculatedInterests.Value' roundingPoint'                                                           MidpointRounding.AwayFromZero);                            if (installment.PaidInterests < calculatedInterests && actualOlb != olbBeforePayment)                          {                              calculatedInterests = installment.PaidInterests;                          }                      }                      DateTime expectedDate = installment.ExpectedDate;                      //in case very late repayment                      if (installment.Number == _contract.InstallmentList.Count                          && installment.ExpectedDate < payDate                          && installment.PaidCapital == 0)                      {                          expectedDate = payDate;                      }                        int days = (expectedDate - lasDateOfPayment).Days;                      interestPayment += Math.Round((olb * _contract.InterestRate / daysInTheYear * days).Value + calculatedInterests.Value'                                                      roundingPoint' MidpointRounding.AwayFromZero) - installment.PaidInterests;                      lasDateOfPayment = installment.ExpectedDate;                  }                    if (installment.Number > 1                       && installment.ExpectedDate > payDate                       && installment.ExpectedDate > payDate                       && _contract.GetInstallment(installment.Number - 2).ExpectedDate < payDate)                  {                      OCurrency paidInterests = installment.PaidInterests;                        int daySpan = (payDate - lasDateOfPayment).Days < 0 ? 0 : (payDate - lasDateOfPayment).Days;                                            installment.InterestsRepayment = olb * _contract.InterestRate * daySpan / daysInTheYear + paidInterests;                        installment.InterestsRepayment =                          Math.Round(installment.InterestsRepayment.Value' roundingPoint'                                     MidpointRounding.AwayFromZero);                      interestPayment += installment.InterestsRepayment - paidInterests;                        lasDateOfPayment = installment.ExpectedDate;                  }                    if (installment.Number == 1 && installment.ExpectedDate > payDate)                  {                      int daySpan = (payDate - _contract.StartDate).Days < 0                                        ? 0                                        : (payDate - _contract.StartDate).Days;                      OCurrency interest = olb * _contract.InterestRate * daySpan / daysInTheYear;                      interestPayment += Math.Round(interest.Value' roundingPoint' MidpointRounding.AwayFromZero) - installment.PaidInterests;                   }              }
Magic Number,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.MaxRepayment,CalculateMaximumAmountToRepayStrategy,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\MaxRepayment\CalculateMaximumAmountToRepayStrategy.cs,MaxAmountOfRealSchedule,The following statement contains a magic number: int roundingPoint = _contract.UseCents ? 2 : 0;
Magic Number,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.MaxRepayment,CalculateMaximumAmountToRepayStrategy,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\MaxRepayment\CalculateMaximumAmountToRepayStrategy.cs,MaxAmountOfRealSchedule,The following statement contains a magic number: for (int i = 0; i < _contract.NbOfInstallments; i++)              {                  installment = _contract.GetInstallment(i);                    if (installment.IsRepaid)                  {                      if (lasDateOfPayment < installment.ExpectedDate)                      lasDateOfPayment = installment.ExpectedDate;                  }                    if (installment.IsRepaid || installment.InterestHasToPay == 0) continue;                    if (installment.ExpectedDate <= payDate)                  {                      OCurrency calculatedInterests = 0;                        if (installment.PaidInterests > 0                           && installment.InterestsRepayment > installment.PaidInterests)                      {                          calculatedInterests = installment.PaidInterests;                      }                                            if (installment.PaidCapital == 0                           && installment.PaidInterests > 0                           && installment.PaidInterests != installment.InterestsRepayment)                      {                          DateTime dateOfInstallment = installment.Number == 1                                     ? _contract.StartDate                                     : _contract.GetInstallment(installment.Number - 2).ExpectedDate;                                                    int d = (lasDateOfPayment - dateOfInstallment).Days;                            OCurrency olbBeforePayment =                              _contract.Events.GetRepaymentEvents().Where(                                  repaymentEvent => !repaymentEvent.Deleted && repaymentEvent.Date <= dateOfInstallment).Aggregate(                                      _contract.Amount' (current' repaymentEvent) => current - repaymentEvent.Principal);                            calculatedInterests =                              (olbBeforePayment*Convert.ToDecimal(_contract.InterestRate)/daysInTheYear*d).Value;                          calculatedInterests = Math.Round(calculatedInterests.Value' roundingPoint'                                                           MidpointRounding.AwayFromZero);                            if (installment.PaidInterests < calculatedInterests && actualOlb != olbBeforePayment)                          {                              calculatedInterests = installment.PaidInterests;                          }                      }                      DateTime expectedDate = installment.ExpectedDate;                      //in case very late repayment                      if (installment.Number == _contract.InstallmentList.Count                          && installment.ExpectedDate < payDate                          && installment.PaidCapital == 0)                      {                          expectedDate = payDate;                      }                        int days = (expectedDate - lasDateOfPayment).Days;                        interestPayment += Math.Round((olb * _contract.InterestRate / daysInTheYear * days).Value + calculatedInterests.Value'                                                      roundingPoint' MidpointRounding.AwayFromZero) - installment.PaidInterests;                      lasDateOfPayment = installment.ExpectedDate;                  }                    if (installment.Number > 1 && installment.ExpectedDate > payDate && _contract.GetInstallment(installment.Number - 2).ExpectedDate < payDate)                  {                      OCurrency paidInterests = installment.PaidInterests;                        int daySpan = (payDate - lasDateOfPayment).Days < 0 ? 0 : (payDate - lasDateOfPayment).Days;                      installment.InterestsRepayment = olb * _contract.InterestRate * daySpan / daysInTheYear + paidInterests;                        installment.InterestsRepayment =                          Math.Round(installment.InterestsRepayment.Value' roundingPoint'                                     MidpointRounding.AwayFromZero);                      interestPayment += installment.InterestsRepayment - paidInterests;                      lasDateOfPayment = installment.ExpectedDate;                  }                    if (installment.Number == 1 && installment.ExpectedDate > payDate)                  {                      int daySpan = (payDate - _contract.StartDate).Days < 0                                        ? 0                                        : (payDate - _contract.StartDate).Days;                      OCurrency interest = olb*_contract.InterestRate*daySpan/daysInTheYear;                        interestPayment += Math.Round(interest.Value' roundingPoint' MidpointRounding.AwayFromZero) -                                         installment.PaidInterests;                    }              }
Magic Number,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.MaxRepayment,CalculateMaximumAmountToRepayStrategy,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\MaxRepayment\CalculateMaximumAmountToRepayStrategy.cs,MaxAmountOfRealSchedule,The following statement contains a magic number: for (int i = 0; i < _contract.NbOfInstallments; i++)              {                  installment = _contract.GetInstallment(i);                    if (installment.IsRepaid)                  {                      if (lasDateOfPayment < installment.ExpectedDate)                      lasDateOfPayment = installment.ExpectedDate;                  }                    if (installment.IsRepaid || installment.InterestHasToPay == 0) continue;                    if (installment.ExpectedDate <= payDate)                  {                      OCurrency calculatedInterests = 0;                        if (installment.PaidInterests > 0                           && installment.InterestsRepayment > installment.PaidInterests)                      {                          calculatedInterests = installment.PaidInterests;                      }                                            if (installment.PaidCapital == 0                           && installment.PaidInterests > 0                           && installment.PaidInterests != installment.InterestsRepayment)                      {                          DateTime dateOfInstallment = installment.Number == 1                                     ? _contract.StartDate                                     : _contract.GetInstallment(installment.Number - 2).ExpectedDate;                                                    int d = (lasDateOfPayment - dateOfInstallment).Days;                            OCurrency olbBeforePayment =                              _contract.Events.GetRepaymentEvents().Where(                                  repaymentEvent => !repaymentEvent.Deleted && repaymentEvent.Date <= dateOfInstallment).Aggregate(                                      _contract.Amount' (current' repaymentEvent) => current - repaymentEvent.Principal);                            calculatedInterests =                              (olbBeforePayment*Convert.ToDecimal(_contract.InterestRate)/daysInTheYear*d).Value;                          calculatedInterests = Math.Round(calculatedInterests.Value' roundingPoint'                                                           MidpointRounding.AwayFromZero);                            if (installment.PaidInterests < calculatedInterests && actualOlb != olbBeforePayment)                          {                              calculatedInterests = installment.PaidInterests;                          }                      }                      DateTime expectedDate = installment.ExpectedDate;                      //in case very late repayment                      if (installment.Number == _contract.InstallmentList.Count                          && installment.ExpectedDate < payDate                          && installment.PaidCapital == 0)                      {                          expectedDate = payDate;                      }                        int days = (expectedDate - lasDateOfPayment).Days;                        interestPayment += Math.Round((olb * _contract.InterestRate / daysInTheYear * days).Value + calculatedInterests.Value'                                                      roundingPoint' MidpointRounding.AwayFromZero) - installment.PaidInterests;                      lasDateOfPayment = installment.ExpectedDate;                  }                    if (installment.Number > 1 && installment.ExpectedDate > payDate && _contract.GetInstallment(installment.Number - 2).ExpectedDate < payDate)                  {                      OCurrency paidInterests = installment.PaidInterests;                        int daySpan = (payDate - lasDateOfPayment).Days < 0 ? 0 : (payDate - lasDateOfPayment).Days;                      installment.InterestsRepayment = olb * _contract.InterestRate * daySpan / daysInTheYear + paidInterests;                        installment.InterestsRepayment =                          Math.Round(installment.InterestsRepayment.Value' roundingPoint'                                     MidpointRounding.AwayFromZero);                      interestPayment += installment.InterestsRepayment - paidInterests;                      lasDateOfPayment = installment.ExpectedDate;                  }                    if (installment.Number == 1 && installment.ExpectedDate > payDate)                  {                      int daySpan = (payDate - _contract.StartDate).Days < 0                                        ? 0                                        : (payDate - _contract.StartDate).Days;                      OCurrency interest = olb*_contract.InterestRate*daySpan/daysInTheYear;                        interestPayment += Math.Round(interest.Value' roundingPoint' MidpointRounding.AwayFromZero) -                                         installment.PaidInterests;                    }              }
Magic Number,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.MaxRepayment,CalculateMaximumAmountToRepayStrategy,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\MaxRepayment\CalculateMaximumAmountToRepayStrategy.cs,CalculateMaximumAmountForEscapedMember,The following statement contains a magic number: for (int i = 0; i < contract.NbOfInstallments; i++)              {                  Installment getInstallment = contract.GetInstallment(i);                    if (!getInstallment.IsRepaid && getInstallment.ExpectedDate > pDate || (getInstallment.ExpectedDate == pDate && _contract.EscapedMember != null))                  {                      if (installment == null)                      {                          installment = getInstallment;                            if (_generalSettings.AccountingProcesses == OAccountingProcesses.Accrual)                          {                              DateTime expectedDate;                                                            OCurrency daysInTheInstallment = installment.Number == 1                                                         ? (installment.ExpectedDate - _contract.StartDate).Days                                                         : (installment.ExpectedDate -                                                            _contract.GetInstallment(installment.Number - 2).ExpectedDate)                                                               .Days;                              if (i == 0)                              {                                  expectedDate = contract.StartDate;                              }                              else                              {                                  priorInstallment = contract.GetInstallment(i - 1);                                  expectedDate = priorInstallment.ExpectedDate;                                    if (contract.GetLastRepaymentDate() > expectedDate)                                  {                                      if (installment.ExpectedDate > contract.GetLastRepaymentDate())                                      {                                          expectedDate = contract.GetLastRepaymentDate();                                      }                                      daysInTheInstallment = (installment.ExpectedDate - expectedDate).Days;                                  }                              }                                if (getInstallment.ExpectedDate == pDate && _contract.EscapedMember != null)                              {                                  expectedDate = getInstallment.ExpectedDate;                              }                                int daySpan = (pDate - expectedDate).Days < 0 ? 0 : (pDate - expectedDate).Days;                                if (contract.EscapedMember != null)                              {                                  //calculate new interes for the person of the group                                  OCurrency amount = contract.Product.LoanType == OLoanTypes.Flat                                                    ? contract.Amount                                                    : contract.GetOlb();                                    if (daySpan != 0)                                  {                                      interests = (amount*contract.EscapedMember.LoanShareAmount/contract.Amount)*daySpan/                                                  daysInTheInstallment*contract.InterestRate;                                  }                                  else                                  {                                      interests = (amount*contract.EscapedMember.LoanShareAmount/contract.Amount)*                                                  contract.InterestRate;                                  }                              }                              else                              {                                  interests = installment.InterestsRepayment * daySpan / daysInTheInstallment;                              }                            }                          else                          {                              interests = installment.InterestsRepayment == installment.PaidInterests                                              ? installment.InterestsRepayment                                              : (installment.ExpectedDate > pDate ? 0 : installment.InterestsRepayment);                                if (contract.EscapedMember != null)                              {                                  interests = interests * contract.EscapedMember.LoanShareAmount/contract.Amount;                              }                          }                      }                        commission +=                          new Repayment.RepayLateInstallments.CalculateInstallments(_cCo' contract' _user'                                                                                    _generalSettings' _nWds).                              CalculateCommision(pDate' getInstallment.Number' OPaymentType.TotalPayment' 0' ref calculated);                        if (getInstallment.ExpectedDate == pDate && _contract.EscapedMember != null && _contract.Product.AnticipatedTotalRepaymentPenaltiesBase != OAnticipatedRepaymentPenaltiesBases.RemainingInterest)                          aTprComission = commission;                        if (getInstallment.ExpectedDate > pDate && _contract.EscapedMember != null && aTprComission > 0 && _contract.Product.AnticipatedTotalRepaymentPenaltiesBase != OAnticipatedRepaymentPenaltiesBases.RemainingInterest)                          commission = aTprComission;                        if (_cCo.ManualFeesAmount > 0)                      {                          commission = _cCo.ManualFeesAmount;                      }                        foreach (RepaymentEvent rPayment in _contract.Events.GetRepaymentEvents())                      {                          if (rPayment.Date == pDate && installment.Number == rPayment.InstallmentNumber)                          {                              installment.FeesUnpaid = 0;                          }                      }                  }              }
Magic Number,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.MaxRepayment,CalculateMaximumAmountToRepayStrategy,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\MaxRepayment\CalculateMaximumAmountToRepayStrategy.cs,CalculateMaximumAmountForEscapedMember,The following statement contains a magic number: if (contract.EscapedMember != null)              {                  OCurrency amount = interests + commission +                                     contract.GetOlb()*contract.EscapedMember.LoanShareAmount/contract.Amount;                  return _contract.UseCents                             ? Math.Round(amount.Value' 2' MidpointRounding.AwayFromZero)                             : Math.Round(amount.Value' 0' MidpointRounding.AwayFromZero);              }
Magic Number,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.MaxRepayment,CalculateMaximumAmountToRepayStrategy,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\MaxRepayment\CalculateMaximumAmountToRepayStrategy.cs,CalculateLateAndAnticipatedFees,The following statement contains a magic number: return _contract.UseCents ? Math.Round(fees.Value' 2' MidpointRounding.AwayFromZero) : Math.Round(fees.Value' 0' MidpointRounding.AwayFromZero);
Magic Number,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.CalculateFeesForAnticipatedRepayment,AnticipatedFeesCalculate,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\CalculateFeesForAnticipatedRepayment\AnticipatedFeesCalculate.cs,CalculateFees,The following statement contains a magic number: OCurrency fees = _loan.UseCents                                           ? Math.Round(_bTcffar.CalculateFees(pDate).Value'2)                                           : Math.Round(_bTcffar.CalculateFees(pDate).Value' 0);
Magic Number,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.Repayment.RepayLateInstallments,CalculationBaseForLateFees,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\Repayment\RepayLateInstallments\CalculationBaseForLateFees.cs,FeesBasedOnInitialAmount,The following statement contains a magic number: if (pContract.NonRepaymentPenalties.InitialAmount != 0)              {                  int pastDueDays = pForClosure ? pContract.CalculatePastDueForClosure(pDate) : pContract.CalculatePastDueSinceLastRepayment(pDate);                  pastDueDays = _CalculatePastDueWithGeneralParameterForRepayment(pastDueDays' pGeneralSettings);                  if (pContract.GracePeriodOfLateFees >= pastDueDays)                  {                      pastDueDays = 0;                  }                  OCurrency fees = pContract.Amount * Convert.ToDecimal(pContract.NonRepaymentPenalties.InitialAmount) * (double)pastDueDays;                    OCurrency amount = pContract.UseCents ? Math.Round(fees.Value' 2' MidpointRounding.AwayFromZero) : Math.Round(fees.Value' 0' MidpointRounding.AwayFromZero);                    if (pContract.WrittenOff && pGeneralSettings.IsStopWriteOffPenalty)                      amount = 0;                  return amount;              }
Magic Number,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.Repayment.RepayLateInstallments,CalculationBaseForLateFees,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\Repayment\RepayLateInstallments\CalculationBaseForLateFees.cs,CalculateAnticipateRepayment,The following statement contains a magic number: if (interests != 0)                  interests = pContract.UseCents ? Math.Round(interests.Value' 2) : Math.Round(interests.Value' 0);
Magic Number,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.Repayment.RepayLateInstallments,CalculationBaseForLateFees,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\Repayment\RepayLateInstallments\CalculationBaseForLateFees.cs,CalculateNonRepaymentPenalties,The following statement contains a magic number: amount = pContract.UseCents ? Math.Round(amount' 2' MidpointRounding.AwayFromZero) : Math.Round(amount' 0' MidpointRounding.AwayFromZero);
Magic Number,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.Repayment.RepayLateInstallments,CalculationBaseForLateFees,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\Repayment\RepayLateInstallments\CalculationBaseForLateFees.cs,_AnticipateCalculateNonRepaymentPenalties,The following statement contains a magic number: if (installmentNumber != 1)              {                  preInstallment = pContract.GetInstallment(installmentNumber - 2);                  expectedDate = preInstallment.ExpectedDate;              }              else              {                  preInstallment = pContract.GetInstallment(installmentNumber - 1);                  expectedDate = pContract.StartDate;              }
Magic Number,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.Repayment.RepayLateInstallments,CalculationBaseForLateFees,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\Repayment\RepayLateInstallments\CalculationBaseForLateFees.cs,_AnticipateCalculateNonRepaymentPenalties,The following statement contains a magic number: if (((preInstallment.IsRepaid) || (installmentNumber == 1)) || (!preInstallment.IsRepaid && preInstallment.ExpectedDate < pDate))              {                  int daysInInstallment = installment.Number == 1                                                         ? (installment.ExpectedDate - pContract.StartDate).Days                                                         : (installment.ExpectedDate -                                                            pContract.GetInstallment(installment.Number - 2).ExpectedDate)                                                               .Days;                    int days = (pDate - expectedDate).Days < 0 ? daysInInstallment : daysInInstallment - (pDate - expectedDate).Days;                                    if (pGeneralSettings.AccountingProcesses == OAccountingProcesses.Accrual)                  {                        amountHasToPay = installment.InterestsRepayment / daysInInstallment * days;                                            if (pContract.EscapedMember != null)                      {                          amountHasToPay = installment.InterestsRepayment * pContract.EscapedMember.LoanShareAmount / pContract.Amount;                          //amountHasToPay = (installment.InterestsRepayment - amountHasToPay) * pContract.EscapedMember.LoanShareAmount / pContract.Amount;                          amountHasToPay = amountHasToPay / daysInInstallment * days;                      }                  }                  else                  {                      amountHasToPay = installment.InterestsRepayment - installment.PaidInterests;                      if (pContract.EscapedMember != null)                      {                          amountHasToPay = amountHasToPay * pContract.EscapedMember.LoanShareAmount / pContract.Amount;                      }                  }              }              else              {                  amountHasToPay = installment.InterestsRepayment;                  if (pContract.EscapedMember != null)                  {                      amountHasToPay = amountHasToPay * pContract.EscapedMember.LoanShareAmount / pContract.Amount;                  }              }
Magic Number,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.Repayment.RepayLateInstallments,CalculationBaseForLateFees,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\Repayment\RepayLateInstallments\CalculationBaseForLateFees.cs,AnticipateCalculateFeesBasedOnOlb,The following statement contains a magic number: Installment preInstallment = installmentNumber != 1                   ? pContract.GetInstallment(installmentNumber - 2)                   : pContract.GetInstallment(installmentNumber - 1);
Magic Number,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.Repayment.RepayLateInstallments,CalculateInstallments,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\Repayment\RepayLateInstallments\CalculateInstallments.cs,CalculateAnticipateRepayment,The following statement contains a magic number: for (int i = 0; i < _contract.NbOfInstallments; i++)              {                  Installment getInstallment = _contract.GetInstallment(i);                    if (!getInstallment.IsRepaid && getInstallment.ExpectedDate > pDate)                  {                      if (installment == null)                      {                          installment = getInstallment;                            if (_generalSettings.AccountingProcesses == OAccountingProcesses.Accrual)                          {                              DateTime expectedDate;                                                            int daysInTheInstallment = installment.Number == 1                                                         ? (installment.ExpectedDate - _contract.StartDate).Days                                                         : (installment.ExpectedDate -                                                            _contract.GetInstallment(installment.Number - 2).ExpectedDate)                                                               .Days;                                if (i == 0)                              {                                  expectedDate = _contract.StartDate;                              }                              else                              {                                  priorInstallment = _contract.GetInstallment(i - 1);                                  expectedDate = priorInstallment.ExpectedDate;                                    if (_contract.GetNotDeletedRepaymentEvent().Date > expectedDate && _contract.GetNotDeletedRepaymentEvent().Interests > 0                                  && _contract.GetNotDeletedRepaymentEvent().RepaymentType == OPaymentType.PartialPayment)                                  {                                      expectedDate = _contract.GetLastRepaymentDate();                                      daysInTheInstallment = (installment.ExpectedDate - expectedDate).Days;                                  }                              }                                if(getInstallment.ExpectedDate == pDate && _contract.EscapedMember != null)                              {                                  expectedDate = getInstallment.ExpectedDate;                              }                                int daySpan = (pDate - expectedDate).Days < 0 ? 0 : (pDate - expectedDate).Days;                                if (_contract.EscapedMember != null)                              {                                  //calculate new interes for the person of the group                                  OCurrency amount = _contract.Product.LoanType == OLoanTypes.Flat                                                    ? _contract.Amount                                                    : _contract.GetOlb();                                    if (daySpan != 0)                                  {                                      interests = (amount*_contract.EscapedMember.LoanShareAmount/_contract.Amount)*                                                  daySpan/                                                  daysInTheInstallment*_contract.InterestRate;                                  }                                  else                                  {                                      interests = (amount * _contract.EscapedMember.LoanShareAmount / _contract.Amount) * _contract.InterestRate;                                  }                              }                              else                              {                                  interests = installment.InterestsRepayment * daySpan / daysInTheInstallment;                                  if (installment.PaidInterests > interests)                                  {                                      interests = 0;                                      installment.PaidInterests = 0;                                  }                              }                          }                          else                          {                              if (_contract.EscapedMember != null)                              {                                  if (installment.ExpectedDate == pDate)                                  {                                      OCurrency amount = _contract.Product.LoanType == OLoanTypes.Flat                                                             ? _contract.Amount                                                             : _contract.GetOlb();                                        interests = (amount*_contract.EscapedMember.LoanShareAmount/_contract.Amount)*                                                  _contract.InterestRate;                                  }                              }                              else                              {                                    interests = installment.InterestsRepayment == installment.PaidInterests                                                  ? installment.InterestsRepayment                                                  : (installment.ExpectedDate > pDate ? 0 : installment.InterestsRepayment);                              }                          }                      }                        commission += CalculateCommision(pDate' getInstallment.Number' pPaymentType' paidAmount - interests - willBePaidAmount' ref calculated);                        if (getInstallment.ExpectedDate == pDate && _contract.EscapedMember != null && _contract.Product.AnticipatedTotalRepaymentPenaltiesBase != OAnticipatedRepaymentPenaltiesBases.RemainingInterest)                          aTprComission = commission;                        if (getInstallment.ExpectedDate > pDate && _contract.EscapedMember != null && aTprComission > 0 && _contract.Product.AnticipatedTotalRepaymentPenaltiesBase != OAnticipatedRepaymentPenaltiesBases.RemainingInterest)                          commission = aTprComission;                        if (_generalSettings.AccountingProcesses == OAccountingProcesses.Cash)                      {                          if (installment.PaidInterests > interests)                          {                              interests = 0;                              installment.PaidInterests = 0;                          }                      }                        foreach (RepaymentEvent rPayment in _contract.Events.GetRepaymentEvents())                      {                          if (rPayment.Date == pDate && installment.Number == rPayment.InstallmentNumber)                          {                              installment.FeesUnpaid = 0;                          }                      }                  }              }
Magic Number,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.Repayment.RepayLateInstallments,CalculateInstallments,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\Repayment\RepayLateInstallments\CalculateInstallments.cs,CalculateAnticipateRepayment,The following statement contains a magic number: if (installment != null)              {                  if (interests == 0 && installment.PaidInterests == 0)                      installment.NotPaidYet = true;                    //if (interests != 0)                      installment.InterestsRepayment = _contract.UseCents                                                           ? Math.Round(interests.Value' 2' MidpointRounding.AwayFromZero)                                                           : Math.Round(interests.Value' 0' MidpointRounding.AwayFromZero);                    installment.CommissionsUnpaid = _contract.UseCents                                                      ? Math.Round(commission.Value' 2' MidpointRounding.AwayFromZero)                                                      : Math.Round(commission.Value' 0' MidpointRounding.AwayFromZero);              }
Magic Number,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.Repayment.RepayLateInstallments,CalculateInstallments,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\Repayment\RepayLateInstallments\CalculateInstallments.cs,CalculateAnticipateRepayment,The following statement contains a magic number: if (installment != null)              {                  if (interests == 0 && installment.PaidInterests == 0)                      installment.NotPaidYet = true;                    //if (interests != 0)                      installment.InterestsRepayment = _contract.UseCents                                                           ? Math.Round(interests.Value' 2' MidpointRounding.AwayFromZero)                                                           : Math.Round(interests.Value' 0' MidpointRounding.AwayFromZero);                    installment.CommissionsUnpaid = _contract.UseCents                                                      ? Math.Round(commission.Value' 2' MidpointRounding.AwayFromZero)                                                      : Math.Round(commission.Value' 0' MidpointRounding.AwayFromZero);              }
Magic Number,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.Repayment.RepayLateInstallments,CalculateInstallments,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\Repayment\RepayLateInstallments\CalculateInstallments.cs,CalculateDecliningFixedInstallments,The following statement contains a magic number: int numberOfDaysInYear = _contract.Product.InterestScheme == OInterestScheme.Actual360 ||                                       _contract.Product.InterestScheme == OInterestScheme.Thirty360                  ? 360                  : 365;
Magic Number,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.Repayment.RepayLateInstallments,CalculateInstallments,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\Repayment\RepayLateInstallments\CalculateInstallments.cs,CalculateDecliningFixedInstallments,The following statement contains a magic number: int numberOfDaysInYear = _contract.Product.InterestScheme == OInterestScheme.Actual360 ||                                       _contract.Product.InterestScheme == OInterestScheme.Thirty360                  ? 360                  : 365;
Magic Number,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.Repayment.RepayLateInstallments,CalculateInstallments,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\Repayment\RepayLateInstallments\CalculateInstallments.cs,CalculateDecliningFixedInstallments,The following statement contains a magic number: for (int i = number + 1; i <= _contract.InstallmentList.Count; i++)              {                  installment = _contract.GetInstallment(i - 2);                  interestsRepayment = olb * _contract.InterestRate/numberOfPeriods;                    installment.InterestsRepayment = Math.Round(Convert.ToDecimal(interestsRepayment.Value)' 2);                    capital = installmentVpm - installment.InterestsRepayment;                  installment.CapitalRepayment = Math.Round(Convert.ToDecimal(capital.Value)' 2);                  _olb += Math.Round(installment.CapitalRepayment.Value' 2);                  installment.OLB = olb;                    olb -= installment.CapitalRepayment;                    installment.PaidInterests = 0;                  installment.PaidCapital = 0;                  installment.PaidFees = 0;              }
Magic Number,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.Repayment.RepayLateInstallments,CalculateInstallments,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\Repayment\RepayLateInstallments\CalculateInstallments.cs,CalculateDecliningFixedInstallments,The following statement contains a magic number: for (int i = number + 1; i <= _contract.InstallmentList.Count; i++)              {                  installment = _contract.GetInstallment(i - 2);                  interestsRepayment = olb * _contract.InterestRate/numberOfPeriods;                    installment.InterestsRepayment = Math.Round(Convert.ToDecimal(interestsRepayment.Value)' 2);                    capital = installmentVpm - installment.InterestsRepayment;                  installment.CapitalRepayment = Math.Round(Convert.ToDecimal(capital.Value)' 2);                  _olb += Math.Round(installment.CapitalRepayment.Value' 2);                  installment.OLB = olb;                    olb -= installment.CapitalRepayment;                    installment.PaidInterests = 0;                  installment.PaidCapital = 0;                  installment.PaidFees = 0;              }
Magic Number,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.Repayment.RepayLateInstallments,CalculateInstallments,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\Repayment\RepayLateInstallments\CalculateInstallments.cs,CalculateDecliningFixedInstallments,The following statement contains a magic number: for (int i = number + 1; i <= _contract.InstallmentList.Count; i++)              {                  installment = _contract.GetInstallment(i - 2);                  interestsRepayment = olb * _contract.InterestRate/numberOfPeriods;                    installment.InterestsRepayment = Math.Round(Convert.ToDecimal(interestsRepayment.Value)' 2);                    capital = installmentVpm - installment.InterestsRepayment;                  installment.CapitalRepayment = Math.Round(Convert.ToDecimal(capital.Value)' 2);                  _olb += Math.Round(installment.CapitalRepayment.Value' 2);                  installment.OLB = olb;                    olb -= installment.CapitalRepayment;                    installment.PaidInterests = 0;                  installment.PaidCapital = 0;                  installment.PaidFees = 0;              }
Magic Number,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.Repayment.RepayLateInstallments,CalculateInstallments,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\Repayment\RepayLateInstallments\CalculateInstallments.cs,CalculateDecliningFixedInstallments,The following statement contains a magic number: for (int i = number + 1; i <= _contract.InstallmentList.Count; i++)              {                  installment = _contract.GetInstallment(i - 2);                  interestsRepayment = olb * _contract.InterestRate/numberOfPeriods;                    installment.InterestsRepayment = Math.Round(Convert.ToDecimal(interestsRepayment.Value)' 2);                    capital = installmentVpm - installment.InterestsRepayment;                  installment.CapitalRepayment = Math.Round(Convert.ToDecimal(capital.Value)' 2);                  _olb += Math.Round(installment.CapitalRepayment.Value' 2);                  installment.OLB = olb;                    olb -= installment.CapitalRepayment;                    installment.PaidInterests = 0;                  installment.PaidCapital = 0;                  installment.PaidFees = 0;              }
Magic Number,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.Repayment.RepayLateInstallments,CalculateInstallments,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\Repayment\RepayLateInstallments\CalculateInstallments.cs,CalculateDecliningFixedInstallments,The following statement contains a magic number: installment.InterestsRepayment = Math.Round(Convert.ToDecimal(interestsRepayment.Value)' 2);
Magic Number,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.Repayment.RepayLateInstallments,CalculateInstallments,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\Repayment\RepayLateInstallments\CalculateInstallments.cs,CalculateDecliningFixedInstallments,The following statement contains a magic number: installment.CapitalRepayment = Math.Round(Convert.ToDecimal(capital.Value)' 2);
Magic Number,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.Repayment.RepayLateInstallments,CalculateInstallments,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\Repayment\RepayLateInstallments\CalculateInstallments.cs,CalculateDecliningFixedInstallments,The following statement contains a magic number: _olb += Math.Round(installment.CapitalRepayment.Value' 2);
Magic Number,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.Repayment.RepayLateInstallments,CalculateInstallments,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\Repayment\RepayLateInstallments\CalculateInstallments.cs,CalculateFlatInstallments,The following statement contains a magic number: for (int i = number + 1; i <= _contract.InstallmentList.Count; i++)              {                  calculatedOlb += _contract.GracePeriod < installment.Number ? Math.Round(capitalRepayment.Value' 2) : 0;                  installment = _contract.GetInstallment(i - 1);                  installment.CapitalRepayment = _contract.GracePeriod < installment.Number ? capitalRepayment : 0;                  installment.InterestsRepayment = olbForInterest * _contract.InterestRate / GetNumberOfPeriodsInYear();                  installment.PaidInterests = 0;                  installment.PaidCapital = 0;                  installment.PaidFees = 0;              }
Magic Number,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.Repayment.RepayLateInstallments,CalculateInstallments,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\Repayment\RepayLateInstallments\CalculateInstallments.cs,CalculateFlatInstallments,The following statement contains a magic number: calculatedOlb += Math.Round(capitalRepayment.Value' 2);
Magic Number,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.Repayment.RepayLateInstallments,CalculateInstallments,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\Repayment\RepayLateInstallments\CalculateInstallments.cs,CalculateDecliningFixedPrincipal,The following statement contains a magic number: for (int i = number + 1; i <= _contract.InstallmentList.Count; i++)              {                  calculatedOlb += _contract.GracePeriod < installment.Number ? Math.Round(capitalRepayment.Value' 2) : 0;                  installment = _contract.GetInstallment(i - 1);                  installment.CapitalRepayment = _contract.GracePeriod < installment.Number ? capitalRepayment : 0;                    olb -= previousInstallment.CapitalRepayment;                  installment.InterestsRepayment = olb * _contract.InterestRate/numberOfPeriods;                    installment.PaidInterests = 0;                  installment.PaidCapital = 0;                  installment.PaidFees = 0;                  previousInstallment = installment;              }
Magic Number,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.Repayment.RepayLateInstallments,CalculateInstallments,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\Repayment\RepayLateInstallments\CalculateInstallments.cs,CalculateDecliningFixedPrincipal,The following statement contains a magic number: calculatedOlb += Math.Round(capitalRepayment.Value' 2);
Magic Number,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.Repayment.RepayLateInstallments,CalculateInstallments,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\Repayment\RepayLateInstallments\CalculateInstallments.cs,GetNumberOfPeriodsInYear,The following statement contains a magic number: if (_contract.InstallmentType.NbOfMonths != 0 && _contract.InstallmentType.NbOfDays == 0)                  numberOfPeriods = 12m / _contract.InstallmentType.NbOfMonths;              else if (_contract.InstallmentType.NbOfMonths == 0 && _contract.InstallmentType.NbOfDays != 0)                  numberOfPeriods = 365m / _contract.InstallmentType.NbOfDays;              else                  numberOfPeriods = 365m / (30 * _contract.InstallmentType.NbOfMonths + _contract.InstallmentType.NbOfDays);
Magic Number,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.Repayment.RepayLateInstallments,CalculateInstallments,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\Repayment\RepayLateInstallments\CalculateInstallments.cs,CalculateRemainsInstallmentAfterApr,The following statement contains a magic number: if (number != 1)              {                  preInstallment = _contract.GetInstallment(number - 2);              }              else              {                  preInstallment = installment;              }
Magic Number,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.Repayment.RepayLateInstallments,CalculateInstallments,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\Repayment\RepayLateInstallments\CalculateInstallments.cs,CalculateRemainsInstallmentAfterApr,The following statement contains a magic number: if (preInstallment.IsRepaid || installment.Number == 1)              {                  decimal spanDays = (installment.ExpectedDate - date).Days;                  decimal numDaysInMonth = installment.Number == 1                                                         ? (installment.ExpectedDate - _contract.StartDate).Days                                                         : (installment.ExpectedDate -                                                            _contract.GetInstallment(installment.Number - 2).ExpectedDate)                                                               .Days;                  decimal numberOfPeriods = GetNumberOfPeriodsInYear();                  if (preInstallment.ExpectedDate == date || _contract.StartDate == date || spanDays >= numDaysInMonth)                  {                      spanDays = numDaysInMonth;                  }                    OCurrency olb = _contract.Product.LoanType == OLoanTypes.Flat && _contract.EscapedMember != null                                      ? _contract.Amount - _contract.EscapedMember.LoanShareAmount                                      : _contract.CalculateActualOlb();                    decimal interests;                    if (_generalSettings.AccountingProcesses == OAccountingProcesses.Accrual)                  {                      //acrrual                      interests = _contract.EscapedMember != null                                          ? olb.Value * _contract.InterestRate                                          : spanDays / numDaysInMonth * olb.Value * _contract.InterestRate / numberOfPeriods;                  }                  else                  {                      //cash                      interests = olb.Value*_contract.InterestRate/numberOfPeriods;                  }                    installment.InterestsRepayment = interests;                                    int startFrom = number;                    if(preInstallment.ExpectedDate == date)                  {                      installment.InterestsRepayment = olb * _contract.InterestRate / numberOfPeriods;                  }                                    switch (_contract.Product.LoanType)                  {                      case OLoanTypes.Flat :                          {                              CalculateFlatInstallments(startFrom);                              break;                          }                        case OLoanTypes.DecliningFixedInstallments:                          {                              CalculateDecliningFixedInstallments(startFrom' interests);                              break;                          }                        case OLoanTypes.DecliningFixedPrincipal:                          {                              CalculateDecliningFixedPrincipal(startFrom);                              break;                          }                  }                                    //treat the installments to round valus                  decimal floatPartOfInterests = 0;                  decimal floatPartOfCapital = 0;                    if (!_contract.UseCents)                  {                      for (int i = number; i <= _contract.InstallmentList.Count; i++)                      {                          installment = i == 0 ? _contract.GetInstallment(i) : _contract.GetInstallment(i - 1);                            floatPartOfInterests += installment.InterestsRepayment.Value -                                                  Math.Round(Convert.ToDecimal(installment.InterestsRepayment.Value)'                                                             MidpointRounding.AwayFromZero);                          installment.InterestsRepayment =                              Math.Round(Convert.ToDecimal(installment.InterestsRepayment.Value)'                                         MidpointRounding.AwayFromZero);                            floatPartOfCapital += installment.CapitalRepayment.Value -                                                Math.Round(Convert.ToDecimal(installment.CapitalRepayment.Value)'                                                           MidpointRounding.AwayFromZero);                          installment.CapitalRepayment = Math.Round(                              Convert.ToDecimal(installment.CapitalRepayment.Value)' MidpointRounding.AwayFromZero);                      }                        installment.InterestsRepayment = installment.InterestsRepayment + Math.Round(floatPartOfInterests' 0);                      installment.CapitalRepayment = installment.CapitalRepayment + Math.Round(floatPartOfCapital' 0);                  }                  else                  {                      for (int i = number; i <= _contract.InstallmentList.Count; i++)                      {                          installment = i == 0 ? _contract.GetInstallment(i) : _contract.GetInstallment(i - 1);                            installment.InterestsRepayment = Math.Round(installment.InterestsRepayment.Value' 2);                            floatPartOfCapital += (installment.CapitalRepayment.Value*100 -                                                 Math.Round(Convert.ToDecimal(installment.CapitalRepayment.Value*100)' 4'                                                            MidpointRounding.AwayFromZero))/100;                            installment.CapitalRepayment = Math.Round(installment.CapitalRepayment.Value' 2'                                                                    MidpointRounding.AwayFromZero);                      }                  }              }
Magic Number,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.Repayment.RepayLateInstallments,CalculateInstallments,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\Repayment\RepayLateInstallments\CalculateInstallments.cs,CalculateRemainsInstallmentAfterApr,The following statement contains a magic number: if (preInstallment.IsRepaid || installment.Number == 1)              {                  decimal spanDays = (installment.ExpectedDate - date).Days;                  decimal numDaysInMonth = installment.Number == 1                                                         ? (installment.ExpectedDate - _contract.StartDate).Days                                                         : (installment.ExpectedDate -                                                            _contract.GetInstallment(installment.Number - 2).ExpectedDate)                                                               .Days;                  decimal numberOfPeriods = GetNumberOfPeriodsInYear();                  if (preInstallment.ExpectedDate == date || _contract.StartDate == date || spanDays >= numDaysInMonth)                  {                      spanDays = numDaysInMonth;                  }                    OCurrency olb = _contract.Product.LoanType == OLoanTypes.Flat && _contract.EscapedMember != null                                      ? _contract.Amount - _contract.EscapedMember.LoanShareAmount                                      : _contract.CalculateActualOlb();                    decimal interests;                    if (_generalSettings.AccountingProcesses == OAccountingProcesses.Accrual)                  {                      //acrrual                      interests = _contract.EscapedMember != null                                          ? olb.Value * _contract.InterestRate                                          : spanDays / numDaysInMonth * olb.Value * _contract.InterestRate / numberOfPeriods;                  }                  else                  {                      //cash                      interests = olb.Value*_contract.InterestRate/numberOfPeriods;                  }                    installment.InterestsRepayment = interests;                                    int startFrom = number;                    if(preInstallment.ExpectedDate == date)                  {                      installment.InterestsRepayment = olb * _contract.InterestRate / numberOfPeriods;                  }                                    switch (_contract.Product.LoanType)                  {                      case OLoanTypes.Flat :                          {                              CalculateFlatInstallments(startFrom);                              break;                          }                        case OLoanTypes.DecliningFixedInstallments:                          {                              CalculateDecliningFixedInstallments(startFrom' interests);                              break;                          }                        case OLoanTypes.DecliningFixedPrincipal:                          {                              CalculateDecliningFixedPrincipal(startFrom);                              break;                          }                  }                                    //treat the installments to round valus                  decimal floatPartOfInterests = 0;                  decimal floatPartOfCapital = 0;                    if (!_contract.UseCents)                  {                      for (int i = number; i <= _contract.InstallmentList.Count; i++)                      {                          installment = i == 0 ? _contract.GetInstallment(i) : _contract.GetInstallment(i - 1);                            floatPartOfInterests += installment.InterestsRepayment.Value -                                                  Math.Round(Convert.ToDecimal(installment.InterestsRepayment.Value)'                                                             MidpointRounding.AwayFromZero);                          installment.InterestsRepayment =                              Math.Round(Convert.ToDecimal(installment.InterestsRepayment.Value)'                                         MidpointRounding.AwayFromZero);                            floatPartOfCapital += installment.CapitalRepayment.Value -                                                Math.Round(Convert.ToDecimal(installment.CapitalRepayment.Value)'                                                           MidpointRounding.AwayFromZero);                          installment.CapitalRepayment = Math.Round(                              Convert.ToDecimal(installment.CapitalRepayment.Value)' MidpointRounding.AwayFromZero);                      }                        installment.InterestsRepayment = installment.InterestsRepayment + Math.Round(floatPartOfInterests' 0);                      installment.CapitalRepayment = installment.CapitalRepayment + Math.Round(floatPartOfCapital' 0);                  }                  else                  {                      for (int i = number; i <= _contract.InstallmentList.Count; i++)                      {                          installment = i == 0 ? _contract.GetInstallment(i) : _contract.GetInstallment(i - 1);                            installment.InterestsRepayment = Math.Round(installment.InterestsRepayment.Value' 2);                            floatPartOfCapital += (installment.CapitalRepayment.Value*100 -                                                 Math.Round(Convert.ToDecimal(installment.CapitalRepayment.Value*100)' 4'                                                            MidpointRounding.AwayFromZero))/100;                            installment.CapitalRepayment = Math.Round(installment.CapitalRepayment.Value' 2'                                                                    MidpointRounding.AwayFromZero);                      }                  }              }
Magic Number,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.Repayment.RepayLateInstallments,CalculateInstallments,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\Repayment\RepayLateInstallments\CalculateInstallments.cs,CalculateRemainsInstallmentAfterApr,The following statement contains a magic number: if (preInstallment.IsRepaid || installment.Number == 1)              {                  decimal spanDays = (installment.ExpectedDate - date).Days;                  decimal numDaysInMonth = installment.Number == 1                                                         ? (installment.ExpectedDate - _contract.StartDate).Days                                                         : (installment.ExpectedDate -                                                            _contract.GetInstallment(installment.Number - 2).ExpectedDate)                                                               .Days;                  decimal numberOfPeriods = GetNumberOfPeriodsInYear();                  if (preInstallment.ExpectedDate == date || _contract.StartDate == date || spanDays >= numDaysInMonth)                  {                      spanDays = numDaysInMonth;                  }                    OCurrency olb = _contract.Product.LoanType == OLoanTypes.Flat && _contract.EscapedMember != null                                      ? _contract.Amount - _contract.EscapedMember.LoanShareAmount                                      : _contract.CalculateActualOlb();                    decimal interests;                    if (_generalSettings.AccountingProcesses == OAccountingProcesses.Accrual)                  {                      //acrrual                      interests = _contract.EscapedMember != null                                          ? olb.Value * _contract.InterestRate                                          : spanDays / numDaysInMonth * olb.Value * _contract.InterestRate / numberOfPeriods;                  }                  else                  {                      //cash                      interests = olb.Value*_contract.InterestRate/numberOfPeriods;                  }                    installment.InterestsRepayment = interests;                                    int startFrom = number;                    if(preInstallment.ExpectedDate == date)                  {                      installment.InterestsRepayment = olb * _contract.InterestRate / numberOfPeriods;                  }                                    switch (_contract.Product.LoanType)                  {                      case OLoanTypes.Flat :                          {                              CalculateFlatInstallments(startFrom);                              break;                          }                        case OLoanTypes.DecliningFixedInstallments:                          {                              CalculateDecliningFixedInstallments(startFrom' interests);                              break;                          }                        case OLoanTypes.DecliningFixedPrincipal:                          {                              CalculateDecliningFixedPrincipal(startFrom);                              break;                          }                  }                                    //treat the installments to round valus                  decimal floatPartOfInterests = 0;                  decimal floatPartOfCapital = 0;                    if (!_contract.UseCents)                  {                      for (int i = number; i <= _contract.InstallmentList.Count; i++)                      {                          installment = i == 0 ? _contract.GetInstallment(i) : _contract.GetInstallment(i - 1);                            floatPartOfInterests += installment.InterestsRepayment.Value -                                                  Math.Round(Convert.ToDecimal(installment.InterestsRepayment.Value)'                                                             MidpointRounding.AwayFromZero);                          installment.InterestsRepayment =                              Math.Round(Convert.ToDecimal(installment.InterestsRepayment.Value)'                                         MidpointRounding.AwayFromZero);                            floatPartOfCapital += installment.CapitalRepayment.Value -                                                Math.Round(Convert.ToDecimal(installment.CapitalRepayment.Value)'                                                           MidpointRounding.AwayFromZero);                          installment.CapitalRepayment = Math.Round(                              Convert.ToDecimal(installment.CapitalRepayment.Value)' MidpointRounding.AwayFromZero);                      }                        installment.InterestsRepayment = installment.InterestsRepayment + Math.Round(floatPartOfInterests' 0);                      installment.CapitalRepayment = installment.CapitalRepayment + Math.Round(floatPartOfCapital' 0);                  }                  else                  {                      for (int i = number; i <= _contract.InstallmentList.Count; i++)                      {                          installment = i == 0 ? _contract.GetInstallment(i) : _contract.GetInstallment(i - 1);                            installment.InterestsRepayment = Math.Round(installment.InterestsRepayment.Value' 2);                            floatPartOfCapital += (installment.CapitalRepayment.Value*100 -                                                 Math.Round(Convert.ToDecimal(installment.CapitalRepayment.Value*100)' 4'                                                            MidpointRounding.AwayFromZero))/100;                            installment.CapitalRepayment = Math.Round(installment.CapitalRepayment.Value' 2'                                                                    MidpointRounding.AwayFromZero);                      }                  }              }
Magic Number,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.Repayment.RepayLateInstallments,CalculateInstallments,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\Repayment\RepayLateInstallments\CalculateInstallments.cs,CalculateRemainsInstallmentAfterApr,The following statement contains a magic number: if (preInstallment.IsRepaid || installment.Number == 1)              {                  decimal spanDays = (installment.ExpectedDate - date).Days;                  decimal numDaysInMonth = installment.Number == 1                                                         ? (installment.ExpectedDate - _contract.StartDate).Days                                                         : (installment.ExpectedDate -                                                            _contract.GetInstallment(installment.Number - 2).ExpectedDate)                                                               .Days;                  decimal numberOfPeriods = GetNumberOfPeriodsInYear();                  if (preInstallment.ExpectedDate == date || _contract.StartDate == date || spanDays >= numDaysInMonth)                  {                      spanDays = numDaysInMonth;                  }                    OCurrency olb = _contract.Product.LoanType == OLoanTypes.Flat && _contract.EscapedMember != null                                      ? _contract.Amount - _contract.EscapedMember.LoanShareAmount                                      : _contract.CalculateActualOlb();                    decimal interests;                    if (_generalSettings.AccountingProcesses == OAccountingProcesses.Accrual)                  {                      //acrrual                      interests = _contract.EscapedMember != null                                          ? olb.Value * _contract.InterestRate                                          : spanDays / numDaysInMonth * olb.Value * _contract.InterestRate / numberOfPeriods;                  }                  else                  {                      //cash                      interests = olb.Value*_contract.InterestRate/numberOfPeriods;                  }                    installment.InterestsRepayment = interests;                                    int startFrom = number;                    if(preInstallment.ExpectedDate == date)                  {                      installment.InterestsRepayment = olb * _contract.InterestRate / numberOfPeriods;                  }                                    switch (_contract.Product.LoanType)                  {                      case OLoanTypes.Flat :                          {                              CalculateFlatInstallments(startFrom);                              break;                          }                        case OLoanTypes.DecliningFixedInstallments:                          {                              CalculateDecliningFixedInstallments(startFrom' interests);                              break;                          }                        case OLoanTypes.DecliningFixedPrincipal:                          {                              CalculateDecliningFixedPrincipal(startFrom);                              break;                          }                  }                                    //treat the installments to round valus                  decimal floatPartOfInterests = 0;                  decimal floatPartOfCapital = 0;                    if (!_contract.UseCents)                  {                      for (int i = number; i <= _contract.InstallmentList.Count; i++)                      {                          installment = i == 0 ? _contract.GetInstallment(i) : _contract.GetInstallment(i - 1);                            floatPartOfInterests += installment.InterestsRepayment.Value -                                                  Math.Round(Convert.ToDecimal(installment.InterestsRepayment.Value)'                                                             MidpointRounding.AwayFromZero);                          installment.InterestsRepayment =                              Math.Round(Convert.ToDecimal(installment.InterestsRepayment.Value)'                                         MidpointRounding.AwayFromZero);                            floatPartOfCapital += installment.CapitalRepayment.Value -                                                Math.Round(Convert.ToDecimal(installment.CapitalRepayment.Value)'                                                           MidpointRounding.AwayFromZero);                          installment.CapitalRepayment = Math.Round(                              Convert.ToDecimal(installment.CapitalRepayment.Value)' MidpointRounding.AwayFromZero);                      }                        installment.InterestsRepayment = installment.InterestsRepayment + Math.Round(floatPartOfInterests' 0);                      installment.CapitalRepayment = installment.CapitalRepayment + Math.Round(floatPartOfCapital' 0);                  }                  else                  {                      for (int i = number; i <= _contract.InstallmentList.Count; i++)                      {                          installment = i == 0 ? _contract.GetInstallment(i) : _contract.GetInstallment(i - 1);                            installment.InterestsRepayment = Math.Round(installment.InterestsRepayment.Value' 2);                            floatPartOfCapital += (installment.CapitalRepayment.Value*100 -                                                 Math.Round(Convert.ToDecimal(installment.CapitalRepayment.Value*100)' 4'                                                            MidpointRounding.AwayFromZero))/100;                            installment.CapitalRepayment = Math.Round(installment.CapitalRepayment.Value' 2'                                                                    MidpointRounding.AwayFromZero);                      }                  }              }
Magic Number,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.Repayment.RepayLateInstallments,CalculateInstallments,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\Repayment\RepayLateInstallments\CalculateInstallments.cs,CalculateRemainsInstallmentAfterApr,The following statement contains a magic number: if (preInstallment.IsRepaid || installment.Number == 1)              {                  decimal spanDays = (installment.ExpectedDate - date).Days;                  decimal numDaysInMonth = installment.Number == 1                                                         ? (installment.ExpectedDate - _contract.StartDate).Days                                                         : (installment.ExpectedDate -                                                            _contract.GetInstallment(installment.Number - 2).ExpectedDate)                                                               .Days;                  decimal numberOfPeriods = GetNumberOfPeriodsInYear();                  if (preInstallment.ExpectedDate == date || _contract.StartDate == date || spanDays >= numDaysInMonth)                  {                      spanDays = numDaysInMonth;                  }                    OCurrency olb = _contract.Product.LoanType == OLoanTypes.Flat && _contract.EscapedMember != null                                      ? _contract.Amount - _contract.EscapedMember.LoanShareAmount                                      : _contract.CalculateActualOlb();                    decimal interests;                    if (_generalSettings.AccountingProcesses == OAccountingProcesses.Accrual)                  {                      //acrrual                      interests = _contract.EscapedMember != null                                          ? olb.Value * _contract.InterestRate                                          : spanDays / numDaysInMonth * olb.Value * _contract.InterestRate / numberOfPeriods;                  }                  else                  {                      //cash                      interests = olb.Value*_contract.InterestRate/numberOfPeriods;                  }                    installment.InterestsRepayment = interests;                                    int startFrom = number;                    if(preInstallment.ExpectedDate == date)                  {                      installment.InterestsRepayment = olb * _contract.InterestRate / numberOfPeriods;                  }                                    switch (_contract.Product.LoanType)                  {                      case OLoanTypes.Flat :                          {                              CalculateFlatInstallments(startFrom);                              break;                          }                        case OLoanTypes.DecliningFixedInstallments:                          {                              CalculateDecliningFixedInstallments(startFrom' interests);                              break;                          }                        case OLoanTypes.DecliningFixedPrincipal:                          {                              CalculateDecliningFixedPrincipal(startFrom);                              break;                          }                  }                                    //treat the installments to round valus                  decimal floatPartOfInterests = 0;                  decimal floatPartOfCapital = 0;                    if (!_contract.UseCents)                  {                      for (int i = number; i <= _contract.InstallmentList.Count; i++)                      {                          installment = i == 0 ? _contract.GetInstallment(i) : _contract.GetInstallment(i - 1);                            floatPartOfInterests += installment.InterestsRepayment.Value -                                                  Math.Round(Convert.ToDecimal(installment.InterestsRepayment.Value)'                                                             MidpointRounding.AwayFromZero);                          installment.InterestsRepayment =                              Math.Round(Convert.ToDecimal(installment.InterestsRepayment.Value)'                                         MidpointRounding.AwayFromZero);                            floatPartOfCapital += installment.CapitalRepayment.Value -                                                Math.Round(Convert.ToDecimal(installment.CapitalRepayment.Value)'                                                           MidpointRounding.AwayFromZero);                          installment.CapitalRepayment = Math.Round(                              Convert.ToDecimal(installment.CapitalRepayment.Value)' MidpointRounding.AwayFromZero);                      }                        installment.InterestsRepayment = installment.InterestsRepayment + Math.Round(floatPartOfInterests' 0);                      installment.CapitalRepayment = installment.CapitalRepayment + Math.Round(floatPartOfCapital' 0);                  }                  else                  {                      for (int i = number; i <= _contract.InstallmentList.Count; i++)                      {                          installment = i == 0 ? _contract.GetInstallment(i) : _contract.GetInstallment(i - 1);                            installment.InterestsRepayment = Math.Round(installment.InterestsRepayment.Value' 2);                            floatPartOfCapital += (installment.CapitalRepayment.Value*100 -                                                 Math.Round(Convert.ToDecimal(installment.CapitalRepayment.Value*100)' 4'                                                            MidpointRounding.AwayFromZero))/100;                            installment.CapitalRepayment = Math.Round(installment.CapitalRepayment.Value' 2'                                                                    MidpointRounding.AwayFromZero);                      }                  }              }
Magic Number,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.Repayment.RepayLateInstallments,CalculateInstallments,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\Repayment\RepayLateInstallments\CalculateInstallments.cs,CalculateRemainsInstallmentAfterApr,The following statement contains a magic number: if (preInstallment.IsRepaid || installment.Number == 1)              {                  decimal spanDays = (installment.ExpectedDate - date).Days;                  decimal numDaysInMonth = installment.Number == 1                                                         ? (installment.ExpectedDate - _contract.StartDate).Days                                                         : (installment.ExpectedDate -                                                            _contract.GetInstallment(installment.Number - 2).ExpectedDate)                                                               .Days;                  decimal numberOfPeriods = GetNumberOfPeriodsInYear();                  if (preInstallment.ExpectedDate == date || _contract.StartDate == date || spanDays >= numDaysInMonth)                  {                      spanDays = numDaysInMonth;                  }                    OCurrency olb = _contract.Product.LoanType == OLoanTypes.Flat && _contract.EscapedMember != null                                      ? _contract.Amount - _contract.EscapedMember.LoanShareAmount                                      : _contract.CalculateActualOlb();                    decimal interests;                    if (_generalSettings.AccountingProcesses == OAccountingProcesses.Accrual)                  {                      //acrrual                      interests = _contract.EscapedMember != null                                          ? olb.Value * _contract.InterestRate                                          : spanDays / numDaysInMonth * olb.Value * _contract.InterestRate / numberOfPeriods;                  }                  else                  {                      //cash                      interests = olb.Value*_contract.InterestRate/numberOfPeriods;                  }                    installment.InterestsRepayment = interests;                                    int startFrom = number;                    if(preInstallment.ExpectedDate == date)                  {                      installment.InterestsRepayment = olb * _contract.InterestRate / numberOfPeriods;                  }                                    switch (_contract.Product.LoanType)                  {                      case OLoanTypes.Flat :                          {                              CalculateFlatInstallments(startFrom);                              break;                          }                        case OLoanTypes.DecliningFixedInstallments:                          {                              CalculateDecliningFixedInstallments(startFrom' interests);                              break;                          }                        case OLoanTypes.DecliningFixedPrincipal:                          {                              CalculateDecliningFixedPrincipal(startFrom);                              break;                          }                  }                                    //treat the installments to round valus                  decimal floatPartOfInterests = 0;                  decimal floatPartOfCapital = 0;                    if (!_contract.UseCents)                  {                      for (int i = number; i <= _contract.InstallmentList.Count; i++)                      {                          installment = i == 0 ? _contract.GetInstallment(i) : _contract.GetInstallment(i - 1);                            floatPartOfInterests += installment.InterestsRepayment.Value -                                                  Math.Round(Convert.ToDecimal(installment.InterestsRepayment.Value)'                                                             MidpointRounding.AwayFromZero);                          installment.InterestsRepayment =                              Math.Round(Convert.ToDecimal(installment.InterestsRepayment.Value)'                                         MidpointRounding.AwayFromZero);                            floatPartOfCapital += installment.CapitalRepayment.Value -                                                Math.Round(Convert.ToDecimal(installment.CapitalRepayment.Value)'                                                           MidpointRounding.AwayFromZero);                          installment.CapitalRepayment = Math.Round(                              Convert.ToDecimal(installment.CapitalRepayment.Value)' MidpointRounding.AwayFromZero);                      }                        installment.InterestsRepayment = installment.InterestsRepayment + Math.Round(floatPartOfInterests' 0);                      installment.CapitalRepayment = installment.CapitalRepayment + Math.Round(floatPartOfCapital' 0);                  }                  else                  {                      for (int i = number; i <= _contract.InstallmentList.Count; i++)                      {                          installment = i == 0 ? _contract.GetInstallment(i) : _contract.GetInstallment(i - 1);                            installment.InterestsRepayment = Math.Round(installment.InterestsRepayment.Value' 2);                            floatPartOfCapital += (installment.CapitalRepayment.Value*100 -                                                 Math.Round(Convert.ToDecimal(installment.CapitalRepayment.Value*100)' 4'                                                            MidpointRounding.AwayFromZero))/100;                            installment.CapitalRepayment = Math.Round(installment.CapitalRepayment.Value' 2'                                                                    MidpointRounding.AwayFromZero);                      }                  }              }
Magic Number,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.Repayment.RepayLateInstallments,CalculateInstallments,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\Repayment\RepayLateInstallments\CalculateInstallments.cs,CalculateRemainsInstallmentAfterApr,The following statement contains a magic number: if (preInstallment.IsRepaid || installment.Number == 1)              {                  decimal spanDays = (installment.ExpectedDate - date).Days;                  decimal numDaysInMonth = installment.Number == 1                                                         ? (installment.ExpectedDate - _contract.StartDate).Days                                                         : (installment.ExpectedDate -                                                            _contract.GetInstallment(installment.Number - 2).ExpectedDate)                                                               .Days;                  decimal numberOfPeriods = GetNumberOfPeriodsInYear();                  if (preInstallment.ExpectedDate == date || _contract.StartDate == date || spanDays >= numDaysInMonth)                  {                      spanDays = numDaysInMonth;                  }                    OCurrency olb = _contract.Product.LoanType == OLoanTypes.Flat && _contract.EscapedMember != null                                      ? _contract.Amount - _contract.EscapedMember.LoanShareAmount                                      : _contract.CalculateActualOlb();                    decimal interests;                    if (_generalSettings.AccountingProcesses == OAccountingProcesses.Accrual)                  {                      //acrrual                      interests = _contract.EscapedMember != null                                          ? olb.Value * _contract.InterestRate                                          : spanDays / numDaysInMonth * olb.Value * _contract.InterestRate / numberOfPeriods;                  }                  else                  {                      //cash                      interests = olb.Value*_contract.InterestRate/numberOfPeriods;                  }                    installment.InterestsRepayment = interests;                                    int startFrom = number;                    if(preInstallment.ExpectedDate == date)                  {                      installment.InterestsRepayment = olb * _contract.InterestRate / numberOfPeriods;                  }                                    switch (_contract.Product.LoanType)                  {                      case OLoanTypes.Flat :                          {                              CalculateFlatInstallments(startFrom);                              break;                          }                        case OLoanTypes.DecliningFixedInstallments:                          {                              CalculateDecliningFixedInstallments(startFrom' interests);                              break;                          }                        case OLoanTypes.DecliningFixedPrincipal:                          {                              CalculateDecliningFixedPrincipal(startFrom);                              break;                          }                  }                                    //treat the installments to round valus                  decimal floatPartOfInterests = 0;                  decimal floatPartOfCapital = 0;                    if (!_contract.UseCents)                  {                      for (int i = number; i <= _contract.InstallmentList.Count; i++)                      {                          installment = i == 0 ? _contract.GetInstallment(i) : _contract.GetInstallment(i - 1);                            floatPartOfInterests += installment.InterestsRepayment.Value -                                                  Math.Round(Convert.ToDecimal(installment.InterestsRepayment.Value)'                                                             MidpointRounding.AwayFromZero);                          installment.InterestsRepayment =                              Math.Round(Convert.ToDecimal(installment.InterestsRepayment.Value)'                                         MidpointRounding.AwayFromZero);                            floatPartOfCapital += installment.CapitalRepayment.Value -                                                Math.Round(Convert.ToDecimal(installment.CapitalRepayment.Value)'                                                           MidpointRounding.AwayFromZero);                          installment.CapitalRepayment = Math.Round(                              Convert.ToDecimal(installment.CapitalRepayment.Value)' MidpointRounding.AwayFromZero);                      }                        installment.InterestsRepayment = installment.InterestsRepayment + Math.Round(floatPartOfInterests' 0);                      installment.CapitalRepayment = installment.CapitalRepayment + Math.Round(floatPartOfCapital' 0);                  }                  else                  {                      for (int i = number; i <= _contract.InstallmentList.Count; i++)                      {                          installment = i == 0 ? _contract.GetInstallment(i) : _contract.GetInstallment(i - 1);                            installment.InterestsRepayment = Math.Round(installment.InterestsRepayment.Value' 2);                            floatPartOfCapital += (installment.CapitalRepayment.Value*100 -                                                 Math.Round(Convert.ToDecimal(installment.CapitalRepayment.Value*100)' 4'                                                            MidpointRounding.AwayFromZero))/100;                            installment.CapitalRepayment = Math.Round(installment.CapitalRepayment.Value' 2'                                                                    MidpointRounding.AwayFromZero);                      }                  }              }
Magic Number,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.Repayment.RepayLateInstallments,CalculateInstallments,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\Repayment\RepayLateInstallments\CalculateInstallments.cs,CalculateRemainsInstallmentProportinaly,The following statement contains a magic number: int roundingPoint = _contract.UseCents ? 2 : 0;
Magic Number,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.Repayment.RepayLateInstallments,CalculateInstallments,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\Repayment\RepayLateInstallments\CalculateInstallments.cs,CalculateRemainsInstallmentProportinaly,The following statement contains a magic number: int daysInInstallments = number == 1                                           ? (_contract.GetInstallment(number - 1).ExpectedDate - _contract.StartDate).                                                 Days                                           : (_contract.GetInstallment(number - 1).ExpectedDate -                                              _contract.GetInstallment(number - 2).ExpectedDate).Days;
Magic Number,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.Repayment.RepayLateInstallments,CalculateInstallments,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\Repayment\RepayLateInstallments\CalculateInstallments.cs,RepayPrincipal,The following statement contains a magic number: foreach (Installment installment in _contract.InstallmentList)              {                  if (installment.Number >= pNumber)                  {                      if (_contract.EscapedMember != null)                      {                          installment.PaidCapital += pAmountPaid;                          installment.PaidCapital = Math.Round(installment.PaidCapital.Value' 2);                          principalEvent += pAmountPaid;                            pAmountPaid = 0;                      }                      else                      {                          if (AmountComparer.Compare(pAmountPaid' installment.CapitalRepayment - installment.PaidCapital) > 0)                          {                              OCurrency principalHasToPay = installment.CapitalRepayment - installment.PaidCapital;                              installment.PaidCapital = installment.CapitalRepayment;                              pAmountPaid -= principalHasToPay;                              principalEvent += principalHasToPay;                                if (installment.ExpectedDate <= pDate)                                  break;                          }                          else                          {                              installment.PaidCapital += pAmountPaid;                              installment.PaidCapital = Math.Round(installment.PaidCapital.Value' 2);                              principalEvent += pAmountPaid;                                pAmountPaid = 0;                                if (installment.ExpectedDate <= pDate)                                  break;                          }                      }                  }              }
Magic Number,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.Repayment.RepayLateInstallments,CalculateInstallments,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\Repayment\RepayLateInstallments\CalculateInstallments.cs,RepayPrincipal,The following statement contains a magic number: foreach (Installment installment in _contract.InstallmentList)              {                  if (installment.Number >= pNumber)                  {                      if (_contract.EscapedMember != null)                      {                          installment.PaidCapital += pAmountPaid;                          installment.PaidCapital = Math.Round(installment.PaidCapital.Value' 2);                          principalEvent += pAmountPaid;                            pAmountPaid = 0;                      }                      else                      {                          if (AmountComparer.Compare(pAmountPaid' installment.CapitalRepayment - installment.PaidCapital) > 0)                          {                              OCurrency principalHasToPay = installment.CapitalRepayment - installment.PaidCapital;                              installment.PaidCapital = installment.CapitalRepayment;                              pAmountPaid -= principalHasToPay;                              principalEvent += principalHasToPay;                                if (installment.ExpectedDate <= pDate)                                  break;                          }                          else                          {                              installment.PaidCapital += pAmountPaid;                              installment.PaidCapital = Math.Round(installment.PaidCapital.Value' 2);                              principalEvent += pAmountPaid;                                pAmountPaid = 0;                                if (installment.ExpectedDate <= pDate)                                  break;                          }                      }                  }              }
Magic Number,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.Repayment.RepayNextInstallments.Declining,DecliningExoticKeepNotExpectedInstallmentsWithCents,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\Repayment\RepayNextInstallments\Declining\DecliningExoticKeepNotExpectedInstallmentsWithCents.cs,RepayNextInstallments,The following statement contains a magic number: if(amountPaid > 0)              {                  for (int i = 0; i < _contract.NbOfInstallments; i++)                  {                      Installment installment = _contract.GetInstallment(i);                      if (installment.IsRepaid &&  installment.Number > _contract.GracePeriod)                          baseTocalculatePrincipalCoeff += _contract.Product.ExoticProduct.GetExoticInstallment(i - _contract.GracePeriod.Value).PrincipalCoeff;                  }                    baseTocalculatePrincipalCoeff = 1 - baseTocalculatePrincipalCoeff;                    for(int i = 0;i < _contract.NbOfInstallments;i++)                  {                      Installment installment = _contract.GetInstallment(i);                      if(!installment.IsRepaid && installment.Number <= _contract.GracePeriod)  //during Grace Period                      {                          installment.OLB -= amountPaid;                          installment.CapitalRepayment = 0;                          installment.InterestsRepayment = Math.Round(installment.OLB.Value * Convert.ToDecimal(_contract.InterestRate)'2);                      }                      else if(!installment.IsRepaid && !firstInstallmentToRepay)                      {                          ExoticInstallment exoticInstallment = _contract.Product.ExoticProduct.GetExoticInstallment(i - _contract.GracePeriod.Value);                          firstInstallmentToRepay = true;                          installment.OLB -= amountPaid;                          totalAmount = installment.OLB;                            installment.CapitalRepayment = Math.Round(totalAmount.Value * Convert.ToDecimal(exoticInstallment.PrincipalCoeff / baseTocalculatePrincipalCoeff)'2);                          installment.InterestsRepayment = Math.Round(installment.OLB.Value * Convert.ToDecimal(_contract.InterestRate)'2);                      }                      else if(!installment.IsRepaid)                      {                          ExoticInstallment exoticInstallment = _contract.Product.ExoticProduct.GetExoticInstallment(i - _contract.GracePeriod.Value);                          Installment _installment = _contract.GetInstallment(i - 1);                          installment.OLB  = _installment.OLB - _installment.CapitalRepayment;                            installment.CapitalRepayment = Math.Round(totalAmount.Value * Convert.ToDecimal(exoticInstallment.PrincipalCoeff / baseTocalculatePrincipalCoeff)'2);                          installment.InterestsRepayment = Math.Round(installment.OLB.Value * Convert.ToDecimal(_contract.InterestRate)'2);                       }                        _paidInstallments.Add(installment);                  }                    principalEvent += amountPaid;                  amountPaid = 0;              }
Magic Number,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.Repayment.RepayNextInstallments.Declining,DecliningExoticKeepNotExpectedInstallmentsWithCents,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\Repayment\RepayNextInstallments\Declining\DecliningExoticKeepNotExpectedInstallmentsWithCents.cs,RepayNextInstallments,The following statement contains a magic number: if(amountPaid > 0)              {                  for (int i = 0; i < _contract.NbOfInstallments; i++)                  {                      Installment installment = _contract.GetInstallment(i);                      if (installment.IsRepaid &&  installment.Number > _contract.GracePeriod)                          baseTocalculatePrincipalCoeff += _contract.Product.ExoticProduct.GetExoticInstallment(i - _contract.GracePeriod.Value).PrincipalCoeff;                  }                    baseTocalculatePrincipalCoeff = 1 - baseTocalculatePrincipalCoeff;                    for(int i = 0;i < _contract.NbOfInstallments;i++)                  {                      Installment installment = _contract.GetInstallment(i);                      if(!installment.IsRepaid && installment.Number <= _contract.GracePeriod)  //during Grace Period                      {                          installment.OLB -= amountPaid;                          installment.CapitalRepayment = 0;                          installment.InterestsRepayment = Math.Round(installment.OLB.Value * Convert.ToDecimal(_contract.InterestRate)'2);                      }                      else if(!installment.IsRepaid && !firstInstallmentToRepay)                      {                          ExoticInstallment exoticInstallment = _contract.Product.ExoticProduct.GetExoticInstallment(i - _contract.GracePeriod.Value);                          firstInstallmentToRepay = true;                          installment.OLB -= amountPaid;                          totalAmount = installment.OLB;                            installment.CapitalRepayment = Math.Round(totalAmount.Value * Convert.ToDecimal(exoticInstallment.PrincipalCoeff / baseTocalculatePrincipalCoeff)'2);                          installment.InterestsRepayment = Math.Round(installment.OLB.Value * Convert.ToDecimal(_contract.InterestRate)'2);                      }                      else if(!installment.IsRepaid)                      {                          ExoticInstallment exoticInstallment = _contract.Product.ExoticProduct.GetExoticInstallment(i - _contract.GracePeriod.Value);                          Installment _installment = _contract.GetInstallment(i - 1);                          installment.OLB  = _installment.OLB - _installment.CapitalRepayment;                            installment.CapitalRepayment = Math.Round(totalAmount.Value * Convert.ToDecimal(exoticInstallment.PrincipalCoeff / baseTocalculatePrincipalCoeff)'2);                          installment.InterestsRepayment = Math.Round(installment.OLB.Value * Convert.ToDecimal(_contract.InterestRate)'2);                       }                        _paidInstallments.Add(installment);                  }                    principalEvent += amountPaid;                  amountPaid = 0;              }
Magic Number,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.Repayment.RepayNextInstallments.Declining,DecliningExoticKeepNotExpectedInstallmentsWithCents,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\Repayment\RepayNextInstallments\Declining\DecliningExoticKeepNotExpectedInstallmentsWithCents.cs,RepayNextInstallments,The following statement contains a magic number: if(amountPaid > 0)              {                  for (int i = 0; i < _contract.NbOfInstallments; i++)                  {                      Installment installment = _contract.GetInstallment(i);                      if (installment.IsRepaid &&  installment.Number > _contract.GracePeriod)                          baseTocalculatePrincipalCoeff += _contract.Product.ExoticProduct.GetExoticInstallment(i - _contract.GracePeriod.Value).PrincipalCoeff;                  }                    baseTocalculatePrincipalCoeff = 1 - baseTocalculatePrincipalCoeff;                    for(int i = 0;i < _contract.NbOfInstallments;i++)                  {                      Installment installment = _contract.GetInstallment(i);                      if(!installment.IsRepaid && installment.Number <= _contract.GracePeriod)  //during Grace Period                      {                          installment.OLB -= amountPaid;                          installment.CapitalRepayment = 0;                          installment.InterestsRepayment = Math.Round(installment.OLB.Value * Convert.ToDecimal(_contract.InterestRate)'2);                      }                      else if(!installment.IsRepaid && !firstInstallmentToRepay)                      {                          ExoticInstallment exoticInstallment = _contract.Product.ExoticProduct.GetExoticInstallment(i - _contract.GracePeriod.Value);                          firstInstallmentToRepay = true;                          installment.OLB -= amountPaid;                          totalAmount = installment.OLB;                            installment.CapitalRepayment = Math.Round(totalAmount.Value * Convert.ToDecimal(exoticInstallment.PrincipalCoeff / baseTocalculatePrincipalCoeff)'2);                          installment.InterestsRepayment = Math.Round(installment.OLB.Value * Convert.ToDecimal(_contract.InterestRate)'2);                      }                      else if(!installment.IsRepaid)                      {                          ExoticInstallment exoticInstallment = _contract.Product.ExoticProduct.GetExoticInstallment(i - _contract.GracePeriod.Value);                          Installment _installment = _contract.GetInstallment(i - 1);                          installment.OLB  = _installment.OLB - _installment.CapitalRepayment;                            installment.CapitalRepayment = Math.Round(totalAmount.Value * Convert.ToDecimal(exoticInstallment.PrincipalCoeff / baseTocalculatePrincipalCoeff)'2);                          installment.InterestsRepayment = Math.Round(installment.OLB.Value * Convert.ToDecimal(_contract.InterestRate)'2);                       }                        _paidInstallments.Add(installment);                  }                    principalEvent += amountPaid;                  amountPaid = 0;              }
Magic Number,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.Repayment.RepayNextInstallments.Declining,DecliningExoticKeepNotExpectedInstallmentsWithCents,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\Repayment\RepayNextInstallments\Declining\DecliningExoticKeepNotExpectedInstallmentsWithCents.cs,RepayNextInstallments,The following statement contains a magic number: if(amountPaid > 0)              {                  for (int i = 0; i < _contract.NbOfInstallments; i++)                  {                      Installment installment = _contract.GetInstallment(i);                      if (installment.IsRepaid &&  installment.Number > _contract.GracePeriod)                          baseTocalculatePrincipalCoeff += _contract.Product.ExoticProduct.GetExoticInstallment(i - _contract.GracePeriod.Value).PrincipalCoeff;                  }                    baseTocalculatePrincipalCoeff = 1 - baseTocalculatePrincipalCoeff;                    for(int i = 0;i < _contract.NbOfInstallments;i++)                  {                      Installment installment = _contract.GetInstallment(i);                      if(!installment.IsRepaid && installment.Number <= _contract.GracePeriod)  //during Grace Period                      {                          installment.OLB -= amountPaid;                          installment.CapitalRepayment = 0;                          installment.InterestsRepayment = Math.Round(installment.OLB.Value * Convert.ToDecimal(_contract.InterestRate)'2);                      }                      else if(!installment.IsRepaid && !firstInstallmentToRepay)                      {                          ExoticInstallment exoticInstallment = _contract.Product.ExoticProduct.GetExoticInstallment(i - _contract.GracePeriod.Value);                          firstInstallmentToRepay = true;                          installment.OLB -= amountPaid;                          totalAmount = installment.OLB;                            installment.CapitalRepayment = Math.Round(totalAmount.Value * Convert.ToDecimal(exoticInstallment.PrincipalCoeff / baseTocalculatePrincipalCoeff)'2);                          installment.InterestsRepayment = Math.Round(installment.OLB.Value * Convert.ToDecimal(_contract.InterestRate)'2);                      }                      else if(!installment.IsRepaid)                      {                          ExoticInstallment exoticInstallment = _contract.Product.ExoticProduct.GetExoticInstallment(i - _contract.GracePeriod.Value);                          Installment _installment = _contract.GetInstallment(i - 1);                          installment.OLB  = _installment.OLB - _installment.CapitalRepayment;                            installment.CapitalRepayment = Math.Round(totalAmount.Value * Convert.ToDecimal(exoticInstallment.PrincipalCoeff / baseTocalculatePrincipalCoeff)'2);                          installment.InterestsRepayment = Math.Round(installment.OLB.Value * Convert.ToDecimal(_contract.InterestRate)'2);                       }                        _paidInstallments.Add(installment);                  }                    principalEvent += amountPaid;                  amountPaid = 0;              }
Magic Number,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.Repayment.RepayNextInstallments.Declining,DecliningExoticKeepNotExpectedInstallmentsWithCents,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\Repayment\RepayNextInstallments\Declining\DecliningExoticKeepNotExpectedInstallmentsWithCents.cs,RepayNextInstallments,The following statement contains a magic number: if(amountPaid > 0)              {                  for (int i = 0; i < _contract.NbOfInstallments; i++)                  {                      Installment installment = _contract.GetInstallment(i);                      if (installment.IsRepaid &&  installment.Number > _contract.GracePeriod)                          baseTocalculatePrincipalCoeff += _contract.Product.ExoticProduct.GetExoticInstallment(i - _contract.GracePeriod.Value).PrincipalCoeff;                  }                    baseTocalculatePrincipalCoeff = 1 - baseTocalculatePrincipalCoeff;                    for(int i = 0;i < _contract.NbOfInstallments;i++)                  {                      Installment installment = _contract.GetInstallment(i);                      if(!installment.IsRepaid && installment.Number <= _contract.GracePeriod)  //during Grace Period                      {                          installment.OLB -= amountPaid;                          installment.CapitalRepayment = 0;                          installment.InterestsRepayment = Math.Round(installment.OLB.Value * Convert.ToDecimal(_contract.InterestRate)'2);                      }                      else if(!installment.IsRepaid && !firstInstallmentToRepay)                      {                          ExoticInstallment exoticInstallment = _contract.Product.ExoticProduct.GetExoticInstallment(i - _contract.GracePeriod.Value);                          firstInstallmentToRepay = true;                          installment.OLB -= amountPaid;                          totalAmount = installment.OLB;                            installment.CapitalRepayment = Math.Round(totalAmount.Value * Convert.ToDecimal(exoticInstallment.PrincipalCoeff / baseTocalculatePrincipalCoeff)'2);                          installment.InterestsRepayment = Math.Round(installment.OLB.Value * Convert.ToDecimal(_contract.InterestRate)'2);                      }                      else if(!installment.IsRepaid)                      {                          ExoticInstallment exoticInstallment = _contract.Product.ExoticProduct.GetExoticInstallment(i - _contract.GracePeriod.Value);                          Installment _installment = _contract.GetInstallment(i - 1);                          installment.OLB  = _installment.OLB - _installment.CapitalRepayment;                            installment.CapitalRepayment = Math.Round(totalAmount.Value * Convert.ToDecimal(exoticInstallment.PrincipalCoeff / baseTocalculatePrincipalCoeff)'2);                          installment.InterestsRepayment = Math.Round(installment.OLB.Value * Convert.ToDecimal(_contract.InterestRate)'2);                       }                        _paidInstallments.Add(installment);                  }                    principalEvent += amountPaid;                  amountPaid = 0;              }
Magic Number,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.Repayment.RepayNextInstallments.Declining,DecliningKeepExpectedInstallments,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\Repayment\RepayNextInstallments\Declining\DecliningKeepExpectedInstallments.cs,RepayNextInstallments,The following statement contains a magic number: for(int i = 0 ; i < _contract.NbOfInstallments ; i++)              {                  Installment installment = _contract.GetInstallment(i);                  if (!installment.IsRepaid && amountPaid > 0)                  {                      OCurrency initiAlamount = amountPaid;                      //commission                      _methodToRepayCommission.RepayCommission(installment' ref amountPaid' ref commissionsEvent);                      if (amountPaid == 0) break;                        //penalty                      _methodToRepayFees.RepayFees(installment' ref amountPaid' ref feesEvent);                      if (amountPaid == 0) break;                        //Interests                      if (amountPaid == 0) return;                      _methodToRepayInterest.RepayInterest(installment' ref amountPaid' ref interestEvent'ref interestPrepayment);                        // Principal                      if (amountPaid == 0)                      {                          _paidInstallments.Add(installment);                          return;                      }                        if (AmountComparer.Compare(amountPaid' installment.CapitalRepayment - installment.PaidCapital) > 0)                      {                          OCurrency  principalHasToPay = installment.CapitalRepayment - installment.PaidCapital;                          installment.PaidCapital = installment.CapitalRepayment;                          amountPaid -= principalHasToPay;                          principalEvent += principalHasToPay;                      }                      else                      {                          installment.PaidCapital += amountPaid;                          installment.PaidCapital = Math.Round(installment.PaidCapital.Value' 2);                          principalEvent += amountPaid;                          amountPaid = 0;                      }                        if (initiAlamount != amountPaid)                          _paidInstallments.Add(installment);                  }              }
Magic Number,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.Repayment.RepayNextInstallments.Declining,DecliningKeepNotExpectedInstallments,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\Repayment\RepayNextInstallments\Declining\DecliningKeepNotExpectedInstallments.cs,_CalculateDecliningFixedPrincipalWithCents,The following statement contains a magic number: for (int number = pStartInstallment; number <= _contract.NbOfInstallments; number++)              {                  Installment installment = _contract.GetInstallment(number - 1);                    installment.InterestsRepayment = Math.Round(olb.Value * Convert.ToDecimal(_contract.InterestRate)'2);                    if (installment.Number <= _contract.GracePeriod)                  {                      installment.CapitalRepayment = 0;                      installment.OLB = olb;                  }                  else                  {                      installment.CapitalRepayment = Math.Round(principal.Value'2);                  }                    installment.OLB = olb;                  olb -= installment.CapitalRepayment;              }
Magic Number,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.Repayment.RepayNextInstallments.Declining,DecliningKeepNotExpectedInstallments,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\Repayment\RepayNextInstallments\Declining\DecliningKeepNotExpectedInstallments.cs,_CalculateDecliningFixedPrincipalWithCents,The following statement contains a magic number: for (int number = pStartInstallment; number <= _contract.NbOfInstallments; number++)              {                  Installment installment = _contract.GetInstallment(number - 1);                    installment.InterestsRepayment = Math.Round(olb.Value * Convert.ToDecimal(_contract.InterestRate)'2);                    if (installment.Number <= _contract.GracePeriod)                  {                      installment.CapitalRepayment = 0;                      installment.OLB = olb;                  }                  else                  {                      installment.CapitalRepayment = Math.Round(principal.Value'2);                  }                    installment.OLB = olb;                  olb -= installment.CapitalRepayment;              }
Magic Number,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.Repayment.RepayNextInstallments.Declining,DecliningKeepNotExpectedInstallments,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\Repayment\RepayNextInstallments\Declining\DecliningKeepNotExpectedInstallments.cs,_CalculateDecliningFixedInstallmentsWithCents,The following statement contains a magic number: for (int number = startInstallment; number <= _contract.NbOfInstallments; number++)              {                  Installment installment = _contract.GetInstallment(number - 1);                  OCurrency interest = olb.Value*Convert.ToDecimal(_contract.InterestRate);                    if (installment.PaidInterests == 0)                  {                      installment.InterestsRepayment = Math.Round(interest.Value' 2);                  }                  else                  {                      installment.InterestsRepayment = installment.PaidInterests;                  }                    if (installment.Number <= _contract.GracePeriod)                  {                      installment.CapitalRepayment = 0;                      installment.OLB = olb;                  }                  else                  {                      installment.CapitalRepayment = Math.Round(fixedTotalAmount.Value - interest.Value'2);                  }                    installment.OLB = olb;                  olb -= installment.CapitalRepayment;              }
Magic Number,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.Repayment.RepayNextInstallments.Declining,DecliningKeepNotExpectedInstallments,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\Repayment\RepayNextInstallments\Declining\DecliningKeepNotExpectedInstallments.cs,_CalculateDecliningFixedInstallmentsWithCents,The following statement contains a magic number: for (int number = startInstallment; number <= _contract.NbOfInstallments; number++)              {                  Installment installment = _contract.GetInstallment(number - 1);                  OCurrency interest = olb.Value*Convert.ToDecimal(_contract.InterestRate);                    if (installment.PaidInterests == 0)                  {                      installment.InterestsRepayment = Math.Round(interest.Value' 2);                  }                  else                  {                      installment.InterestsRepayment = installment.PaidInterests;                  }                    if (installment.Number <= _contract.GracePeriod)                  {                      installment.CapitalRepayment = 0;                      installment.OLB = olb;                  }                  else                  {                      installment.CapitalRepayment = Math.Round(fixedTotalAmount.Value - interest.Value'2);                  }                    installment.OLB = olb;                  olb -= installment.CapitalRepayment;              }
Magic Number,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.Repayment.RepayNextInstallments.Flat,FlatExoticKeepNotExpectedInstallmentsWithCents,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\Repayment\RepayNextInstallments\Flat\FlatExoticKeepNotExpectedInstallmentsWithCents.cs,RepayNextInstallments,The following statement contains a magic number: if(amountPaid > 0)              {                  OCurrency totalInterest = 0;                  OCurrency totalPrincipal = 0;                  double nbInterest = 0;                  double nbPrincipal = 0;                    foreach(Installment _installment in _contract.InstallmentList)                  {                      if(_installment.InterestsRepayment - _installment.PaidInterests > 0)                      {                          totalInterest += (_installment.InterestsRepayment - _installment.PaidInterests);                          if(!_contract.GracePeriod.HasValue)                          {                              nbInterest += _contract.Product.ExoticProduct.GetExoticInstallment(_installment.Number - 1).InterestCoeff.Value;                          }                          else if(_installment.Number > _contract.GracePeriod.Value)                          {                              nbInterest += _contract.Product.ExoticProduct.GetExoticInstallment(_installment.Number - 1 - _contract.GracePeriod.Value).InterestCoeff.Value;                          }							                      }                        if(_installment.CapitalRepayment - _installment.PaidCapital > 0)                      {                          totalPrincipal += (_installment.CapitalRepayment - _installment.PaidCapital);                          if(!_contract.GracePeriod.HasValue)                          {                              nbPrincipal += _contract.Product.ExoticProduct.GetExoticInstallment(_installment.Number - 1).PrincipalCoeff;                          }                          else if(_installment.Number > _contract.GracePeriod.Value)                          {                              nbPrincipal += _contract.Product.ExoticProduct.GetExoticInstallment(_installment.Number - 1 - _contract.GracePeriod.Value).PrincipalCoeff;                          }                      }                  }                    if(AmountComparer.Compare(amountPaid'totalInterest) > 0)                  {                      amountPaid -= totalInterest;                      interestEvent += totalInterest;                      interestPrepayment += totalInterest;                      totalInterest = 0;                  }                  else                  {                      totalInterest -= amountPaid;                      interestEvent += amountPaid;                      interestPrepayment += amountPaid;                      amountPaid = 0;                  }                    if(AmountComparer.Compare(amountPaid'totalPrincipal) > 0)                  {                      amountPaid -= totalPrincipal;                      principalEvent += totalPrincipal;                      totalPrincipal = 0;                  }                  else                  {                      totalPrincipal -= amountPaid;                      principalEvent += amountPaid;                      amountPaid = 0;                  }                    if(totalInterest != 0)                      totalInterest = totalInterest / (Convert.ToDecimal(nbInterest) * 10);                    if(totalPrincipal != 0)                      totalPrincipal = totalPrincipal / (Convert.ToDecimal(nbPrincipal) * 10);                    for(int i = 0;i< _contract.NbOfInstallments;i++)                  {                      Installment _installment = _contract.GetInstallment(i);                      if(!_installment.IsRepaid)                      {                          ExoticInstallment exoticInstallment = null;                            if(!_contract.GracePeriod.HasValue)                          {                              exoticInstallment = _contract.Product.ExoticProduct.GetExoticInstallment(i);                              _installment.InterestsRepayment = Convert.ToDecimal(exoticInstallment.InterestCoeff.Value) * totalInterest *(double) 10;                              _installment.CapitalRepayment = Convert.ToDecimal(exoticInstallment.PrincipalCoeff) * totalPrincipal * (double)10;                          }                          else if(_installment.Number > _contract.GracePeriod.Value)                          {                              exoticInstallment = _contract.Product.ExoticProduct.GetExoticInstallment(i - _contract.GracePeriod.Value);                              _installment.InterestsRepayment = Convert.ToDecimal(exoticInstallment.InterestCoeff.Value) * totalInterest * (double)10;                              _installment.CapitalRepayment = Convert.ToDecimal(exoticInstallment.PrincipalCoeff) * totalPrincipal * (double)10;                          }                          else                          {                              _installment.InterestsRepayment = totalInterest * Convert.ToDecimal(_contract.InterestRate);                              _installment.CapitalRepayment = 0;                          }                      }                  }              }
Magic Number,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.Repayment.RepayNextInstallments.Flat,FlatExoticKeepNotExpectedInstallmentsWithCents,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\Repayment\RepayNextInstallments\Flat\FlatExoticKeepNotExpectedInstallmentsWithCents.cs,RepayNextInstallments,The following statement contains a magic number: if(amountPaid > 0)              {                  OCurrency totalInterest = 0;                  OCurrency totalPrincipal = 0;                  double nbInterest = 0;                  double nbPrincipal = 0;                    foreach(Installment _installment in _contract.InstallmentList)                  {                      if(_installment.InterestsRepayment - _installment.PaidInterests > 0)                      {                          totalInterest += (_installment.InterestsRepayment - _installment.PaidInterests);                          if(!_contract.GracePeriod.HasValue)                          {                              nbInterest += _contract.Product.ExoticProduct.GetExoticInstallment(_installment.Number - 1).InterestCoeff.Value;                          }                          else if(_installment.Number > _contract.GracePeriod.Value)                          {                              nbInterest += _contract.Product.ExoticProduct.GetExoticInstallment(_installment.Number - 1 - _contract.GracePeriod.Value).InterestCoeff.Value;                          }							                      }                        if(_installment.CapitalRepayment - _installment.PaidCapital > 0)                      {                          totalPrincipal += (_installment.CapitalRepayment - _installment.PaidCapital);                          if(!_contract.GracePeriod.HasValue)                          {                              nbPrincipal += _contract.Product.ExoticProduct.GetExoticInstallment(_installment.Number - 1).PrincipalCoeff;                          }                          else if(_installment.Number > _contract.GracePeriod.Value)                          {                              nbPrincipal += _contract.Product.ExoticProduct.GetExoticInstallment(_installment.Number - 1 - _contract.GracePeriod.Value).PrincipalCoeff;                          }                      }                  }                    if(AmountComparer.Compare(amountPaid'totalInterest) > 0)                  {                      amountPaid -= totalInterest;                      interestEvent += totalInterest;                      interestPrepayment += totalInterest;                      totalInterest = 0;                  }                  else                  {                      totalInterest -= amountPaid;                      interestEvent += amountPaid;                      interestPrepayment += amountPaid;                      amountPaid = 0;                  }                    if(AmountComparer.Compare(amountPaid'totalPrincipal) > 0)                  {                      amountPaid -= totalPrincipal;                      principalEvent += totalPrincipal;                      totalPrincipal = 0;                  }                  else                  {                      totalPrincipal -= amountPaid;                      principalEvent += amountPaid;                      amountPaid = 0;                  }                    if(totalInterest != 0)                      totalInterest = totalInterest / (Convert.ToDecimal(nbInterest) * 10);                    if(totalPrincipal != 0)                      totalPrincipal = totalPrincipal / (Convert.ToDecimal(nbPrincipal) * 10);                    for(int i = 0;i< _contract.NbOfInstallments;i++)                  {                      Installment _installment = _contract.GetInstallment(i);                      if(!_installment.IsRepaid)                      {                          ExoticInstallment exoticInstallment = null;                            if(!_contract.GracePeriod.HasValue)                          {                              exoticInstallment = _contract.Product.ExoticProduct.GetExoticInstallment(i);                              _installment.InterestsRepayment = Convert.ToDecimal(exoticInstallment.InterestCoeff.Value) * totalInterest *(double) 10;                              _installment.CapitalRepayment = Convert.ToDecimal(exoticInstallment.PrincipalCoeff) * totalPrincipal * (double)10;                          }                          else if(_installment.Number > _contract.GracePeriod.Value)                          {                              exoticInstallment = _contract.Product.ExoticProduct.GetExoticInstallment(i - _contract.GracePeriod.Value);                              _installment.InterestsRepayment = Convert.ToDecimal(exoticInstallment.InterestCoeff.Value) * totalInterest * (double)10;                              _installment.CapitalRepayment = Convert.ToDecimal(exoticInstallment.PrincipalCoeff) * totalPrincipal * (double)10;                          }                          else                          {                              _installment.InterestsRepayment = totalInterest * Convert.ToDecimal(_contract.InterestRate);                              _installment.CapitalRepayment = 0;                          }                      }                  }              }
Magic Number,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.Repayment.RepayNextInstallments.Flat,FlatExoticKeepNotExpectedInstallmentsWithCents,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\Repayment\RepayNextInstallments\Flat\FlatExoticKeepNotExpectedInstallmentsWithCents.cs,RepayNextInstallments,The following statement contains a magic number: if(amountPaid > 0)              {                  OCurrency totalInterest = 0;                  OCurrency totalPrincipal = 0;                  double nbInterest = 0;                  double nbPrincipal = 0;                    foreach(Installment _installment in _contract.InstallmentList)                  {                      if(_installment.InterestsRepayment - _installment.PaidInterests > 0)                      {                          totalInterest += (_installment.InterestsRepayment - _installment.PaidInterests);                          if(!_contract.GracePeriod.HasValue)                          {                              nbInterest += _contract.Product.ExoticProduct.GetExoticInstallment(_installment.Number - 1).InterestCoeff.Value;                          }                          else if(_installment.Number > _contract.GracePeriod.Value)                          {                              nbInterest += _contract.Product.ExoticProduct.GetExoticInstallment(_installment.Number - 1 - _contract.GracePeriod.Value).InterestCoeff.Value;                          }							                      }                        if(_installment.CapitalRepayment - _installment.PaidCapital > 0)                      {                          totalPrincipal += (_installment.CapitalRepayment - _installment.PaidCapital);                          if(!_contract.GracePeriod.HasValue)                          {                              nbPrincipal += _contract.Product.ExoticProduct.GetExoticInstallment(_installment.Number - 1).PrincipalCoeff;                          }                          else if(_installment.Number > _contract.GracePeriod.Value)                          {                              nbPrincipal += _contract.Product.ExoticProduct.GetExoticInstallment(_installment.Number - 1 - _contract.GracePeriod.Value).PrincipalCoeff;                          }                      }                  }                    if(AmountComparer.Compare(amountPaid'totalInterest) > 0)                  {                      amountPaid -= totalInterest;                      interestEvent += totalInterest;                      interestPrepayment += totalInterest;                      totalInterest = 0;                  }                  else                  {                      totalInterest -= amountPaid;                      interestEvent += amountPaid;                      interestPrepayment += amountPaid;                      amountPaid = 0;                  }                    if(AmountComparer.Compare(amountPaid'totalPrincipal) > 0)                  {                      amountPaid -= totalPrincipal;                      principalEvent += totalPrincipal;                      totalPrincipal = 0;                  }                  else                  {                      totalPrincipal -= amountPaid;                      principalEvent += amountPaid;                      amountPaid = 0;                  }                    if(totalInterest != 0)                      totalInterest = totalInterest / (Convert.ToDecimal(nbInterest) * 10);                    if(totalPrincipal != 0)                      totalPrincipal = totalPrincipal / (Convert.ToDecimal(nbPrincipal) * 10);                    for(int i = 0;i< _contract.NbOfInstallments;i++)                  {                      Installment _installment = _contract.GetInstallment(i);                      if(!_installment.IsRepaid)                      {                          ExoticInstallment exoticInstallment = null;                            if(!_contract.GracePeriod.HasValue)                          {                              exoticInstallment = _contract.Product.ExoticProduct.GetExoticInstallment(i);                              _installment.InterestsRepayment = Convert.ToDecimal(exoticInstallment.InterestCoeff.Value) * totalInterest *(double) 10;                              _installment.CapitalRepayment = Convert.ToDecimal(exoticInstallment.PrincipalCoeff) * totalPrincipal * (double)10;                          }                          else if(_installment.Number > _contract.GracePeriod.Value)                          {                              exoticInstallment = _contract.Product.ExoticProduct.GetExoticInstallment(i - _contract.GracePeriod.Value);                              _installment.InterestsRepayment = Convert.ToDecimal(exoticInstallment.InterestCoeff.Value) * totalInterest * (double)10;                              _installment.CapitalRepayment = Convert.ToDecimal(exoticInstallment.PrincipalCoeff) * totalPrincipal * (double)10;                          }                          else                          {                              _installment.InterestsRepayment = totalInterest * Convert.ToDecimal(_contract.InterestRate);                              _installment.CapitalRepayment = 0;                          }                      }                  }              }
Magic Number,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.Repayment.RepayNextInstallments.Flat,FlatExoticKeepNotExpectedInstallmentsWithCents,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\Repayment\RepayNextInstallments\Flat\FlatExoticKeepNotExpectedInstallmentsWithCents.cs,RepayNextInstallments,The following statement contains a magic number: if(amountPaid > 0)              {                  OCurrency totalInterest = 0;                  OCurrency totalPrincipal = 0;                  double nbInterest = 0;                  double nbPrincipal = 0;                    foreach(Installment _installment in _contract.InstallmentList)                  {                      if(_installment.InterestsRepayment - _installment.PaidInterests > 0)                      {                          totalInterest += (_installment.InterestsRepayment - _installment.PaidInterests);                          if(!_contract.GracePeriod.HasValue)                          {                              nbInterest += _contract.Product.ExoticProduct.GetExoticInstallment(_installment.Number - 1).InterestCoeff.Value;                          }                          else if(_installment.Number > _contract.GracePeriod.Value)                          {                              nbInterest += _contract.Product.ExoticProduct.GetExoticInstallment(_installment.Number - 1 - _contract.GracePeriod.Value).InterestCoeff.Value;                          }							                      }                        if(_installment.CapitalRepayment - _installment.PaidCapital > 0)                      {                          totalPrincipal += (_installment.CapitalRepayment - _installment.PaidCapital);                          if(!_contract.GracePeriod.HasValue)                          {                              nbPrincipal += _contract.Product.ExoticProduct.GetExoticInstallment(_installment.Number - 1).PrincipalCoeff;                          }                          else if(_installment.Number > _contract.GracePeriod.Value)                          {                              nbPrincipal += _contract.Product.ExoticProduct.GetExoticInstallment(_installment.Number - 1 - _contract.GracePeriod.Value).PrincipalCoeff;                          }                      }                  }                    if(AmountComparer.Compare(amountPaid'totalInterest) > 0)                  {                      amountPaid -= totalInterest;                      interestEvent += totalInterest;                      interestPrepayment += totalInterest;                      totalInterest = 0;                  }                  else                  {                      totalInterest -= amountPaid;                      interestEvent += amountPaid;                      interestPrepayment += amountPaid;                      amountPaid = 0;                  }                    if(AmountComparer.Compare(amountPaid'totalPrincipal) > 0)                  {                      amountPaid -= totalPrincipal;                      principalEvent += totalPrincipal;                      totalPrincipal = 0;                  }                  else                  {                      totalPrincipal -= amountPaid;                      principalEvent += amountPaid;                      amountPaid = 0;                  }                    if(totalInterest != 0)                      totalInterest = totalInterest / (Convert.ToDecimal(nbInterest) * 10);                    if(totalPrincipal != 0)                      totalPrincipal = totalPrincipal / (Convert.ToDecimal(nbPrincipal) * 10);                    for(int i = 0;i< _contract.NbOfInstallments;i++)                  {                      Installment _installment = _contract.GetInstallment(i);                      if(!_installment.IsRepaid)                      {                          ExoticInstallment exoticInstallment = null;                            if(!_contract.GracePeriod.HasValue)                          {                              exoticInstallment = _contract.Product.ExoticProduct.GetExoticInstallment(i);                              _installment.InterestsRepayment = Convert.ToDecimal(exoticInstallment.InterestCoeff.Value) * totalInterest *(double) 10;                              _installment.CapitalRepayment = Convert.ToDecimal(exoticInstallment.PrincipalCoeff) * totalPrincipal * (double)10;                          }                          else if(_installment.Number > _contract.GracePeriod.Value)                          {                              exoticInstallment = _contract.Product.ExoticProduct.GetExoticInstallment(i - _contract.GracePeriod.Value);                              _installment.InterestsRepayment = Convert.ToDecimal(exoticInstallment.InterestCoeff.Value) * totalInterest * (double)10;                              _installment.CapitalRepayment = Convert.ToDecimal(exoticInstallment.PrincipalCoeff) * totalPrincipal * (double)10;                          }                          else                          {                              _installment.InterestsRepayment = totalInterest * Convert.ToDecimal(_contract.InterestRate);                              _installment.CapitalRepayment = 0;                          }                      }                  }              }
Magic Number,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.Repayment.RepayNextInstallments.Flat,FlatExoticKeepNotExpectedInstallmentsWithCents,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\Repayment\RepayNextInstallments\Flat\FlatExoticKeepNotExpectedInstallmentsWithCents.cs,RepayNextInstallments,The following statement contains a magic number: if(amountPaid > 0)              {                  OCurrency totalInterest = 0;                  OCurrency totalPrincipal = 0;                  double nbInterest = 0;                  double nbPrincipal = 0;                    foreach(Installment _installment in _contract.InstallmentList)                  {                      if(_installment.InterestsRepayment - _installment.PaidInterests > 0)                      {                          totalInterest += (_installment.InterestsRepayment - _installment.PaidInterests);                          if(!_contract.GracePeriod.HasValue)                          {                              nbInterest += _contract.Product.ExoticProduct.GetExoticInstallment(_installment.Number - 1).InterestCoeff.Value;                          }                          else if(_installment.Number > _contract.GracePeriod.Value)                          {                              nbInterest += _contract.Product.ExoticProduct.GetExoticInstallment(_installment.Number - 1 - _contract.GracePeriod.Value).InterestCoeff.Value;                          }							                      }                        if(_installment.CapitalRepayment - _installment.PaidCapital > 0)                      {                          totalPrincipal += (_installment.CapitalRepayment - _installment.PaidCapital);                          if(!_contract.GracePeriod.HasValue)                          {                              nbPrincipal += _contract.Product.ExoticProduct.GetExoticInstallment(_installment.Number - 1).PrincipalCoeff;                          }                          else if(_installment.Number > _contract.GracePeriod.Value)                          {                              nbPrincipal += _contract.Product.ExoticProduct.GetExoticInstallment(_installment.Number - 1 - _contract.GracePeriod.Value).PrincipalCoeff;                          }                      }                  }                    if(AmountComparer.Compare(amountPaid'totalInterest) > 0)                  {                      amountPaid -= totalInterest;                      interestEvent += totalInterest;                      interestPrepayment += totalInterest;                      totalInterest = 0;                  }                  else                  {                      totalInterest -= amountPaid;                      interestEvent += amountPaid;                      interestPrepayment += amountPaid;                      amountPaid = 0;                  }                    if(AmountComparer.Compare(amountPaid'totalPrincipal) > 0)                  {                      amountPaid -= totalPrincipal;                      principalEvent += totalPrincipal;                      totalPrincipal = 0;                  }                  else                  {                      totalPrincipal -= amountPaid;                      principalEvent += amountPaid;                      amountPaid = 0;                  }                    if(totalInterest != 0)                      totalInterest = totalInterest / (Convert.ToDecimal(nbInterest) * 10);                    if(totalPrincipal != 0)                      totalPrincipal = totalPrincipal / (Convert.ToDecimal(nbPrincipal) * 10);                    for(int i = 0;i< _contract.NbOfInstallments;i++)                  {                      Installment _installment = _contract.GetInstallment(i);                      if(!_installment.IsRepaid)                      {                          ExoticInstallment exoticInstallment = null;                            if(!_contract.GracePeriod.HasValue)                          {                              exoticInstallment = _contract.Product.ExoticProduct.GetExoticInstallment(i);                              _installment.InterestsRepayment = Convert.ToDecimal(exoticInstallment.InterestCoeff.Value) * totalInterest *(double) 10;                              _installment.CapitalRepayment = Convert.ToDecimal(exoticInstallment.PrincipalCoeff) * totalPrincipal * (double)10;                          }                          else if(_installment.Number > _contract.GracePeriod.Value)                          {                              exoticInstallment = _contract.Product.ExoticProduct.GetExoticInstallment(i - _contract.GracePeriod.Value);                              _installment.InterestsRepayment = Convert.ToDecimal(exoticInstallment.InterestCoeff.Value) * totalInterest * (double)10;                              _installment.CapitalRepayment = Convert.ToDecimal(exoticInstallment.PrincipalCoeff) * totalPrincipal * (double)10;                          }                          else                          {                              _installment.InterestsRepayment = totalInterest * Convert.ToDecimal(_contract.InterestRate);                              _installment.CapitalRepayment = 0;                          }                      }                  }              }
Magic Number,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.Repayment.RepayNextInstallments.Flat,FlatExoticKeepNotExpectedInstallmentsWithCents,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\Repayment\RepayNextInstallments\Flat\FlatExoticKeepNotExpectedInstallmentsWithCents.cs,RepayNextInstallments,The following statement contains a magic number: if(amountPaid > 0)              {                  OCurrency totalInterest = 0;                  OCurrency totalPrincipal = 0;                  double nbInterest = 0;                  double nbPrincipal = 0;                    foreach(Installment _installment in _contract.InstallmentList)                  {                      if(_installment.InterestsRepayment - _installment.PaidInterests > 0)                      {                          totalInterest += (_installment.InterestsRepayment - _installment.PaidInterests);                          if(!_contract.GracePeriod.HasValue)                          {                              nbInterest += _contract.Product.ExoticProduct.GetExoticInstallment(_installment.Number - 1).InterestCoeff.Value;                          }                          else if(_installment.Number > _contract.GracePeriod.Value)                          {                              nbInterest += _contract.Product.ExoticProduct.GetExoticInstallment(_installment.Number - 1 - _contract.GracePeriod.Value).InterestCoeff.Value;                          }							                      }                        if(_installment.CapitalRepayment - _installment.PaidCapital > 0)                      {                          totalPrincipal += (_installment.CapitalRepayment - _installment.PaidCapital);                          if(!_contract.GracePeriod.HasValue)                          {                              nbPrincipal += _contract.Product.ExoticProduct.GetExoticInstallment(_installment.Number - 1).PrincipalCoeff;                          }                          else if(_installment.Number > _contract.GracePeriod.Value)                          {                              nbPrincipal += _contract.Product.ExoticProduct.GetExoticInstallment(_installment.Number - 1 - _contract.GracePeriod.Value).PrincipalCoeff;                          }                      }                  }                    if(AmountComparer.Compare(amountPaid'totalInterest) > 0)                  {                      amountPaid -= totalInterest;                      interestEvent += totalInterest;                      interestPrepayment += totalInterest;                      totalInterest = 0;                  }                  else                  {                      totalInterest -= amountPaid;                      interestEvent += amountPaid;                      interestPrepayment += amountPaid;                      amountPaid = 0;                  }                    if(AmountComparer.Compare(amountPaid'totalPrincipal) > 0)                  {                      amountPaid -= totalPrincipal;                      principalEvent += totalPrincipal;                      totalPrincipal = 0;                  }                  else                  {                      totalPrincipal -= amountPaid;                      principalEvent += amountPaid;                      amountPaid = 0;                  }                    if(totalInterest != 0)                      totalInterest = totalInterest / (Convert.ToDecimal(nbInterest) * 10);                    if(totalPrincipal != 0)                      totalPrincipal = totalPrincipal / (Convert.ToDecimal(nbPrincipal) * 10);                    for(int i = 0;i< _contract.NbOfInstallments;i++)                  {                      Installment _installment = _contract.GetInstallment(i);                      if(!_installment.IsRepaid)                      {                          ExoticInstallment exoticInstallment = null;                            if(!_contract.GracePeriod.HasValue)                          {                              exoticInstallment = _contract.Product.ExoticProduct.GetExoticInstallment(i);                              _installment.InterestsRepayment = Convert.ToDecimal(exoticInstallment.InterestCoeff.Value) * totalInterest *(double) 10;                              _installment.CapitalRepayment = Convert.ToDecimal(exoticInstallment.PrincipalCoeff) * totalPrincipal * (double)10;                          }                          else if(_installment.Number > _contract.GracePeriod.Value)                          {                              exoticInstallment = _contract.Product.ExoticProduct.GetExoticInstallment(i - _contract.GracePeriod.Value);                              _installment.InterestsRepayment = Convert.ToDecimal(exoticInstallment.InterestCoeff.Value) * totalInterest * (double)10;                              _installment.CapitalRepayment = Convert.ToDecimal(exoticInstallment.PrincipalCoeff) * totalPrincipal * (double)10;                          }                          else                          {                              _installment.InterestsRepayment = totalInterest * Convert.ToDecimal(_contract.InterestRate);                              _installment.CapitalRepayment = 0;                          }                      }                  }              }
Magic Number,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.Repayment.RepayNextInstallments.Flat,FlateKeepNotExpectedInstallmentsWithCents,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\Repayment\RepayNextInstallments\Flat\FlateKeepNotExpectedInstallmentsWithCents.cs,_CalculateInstallments,The following statement contains a magic number: for (int number = pStartInstallment; number <= _contract.NbOfInstallments; number++)              {                  Installment installment = _contract.GetInstallment(number - 1);                    installment.InterestsRepayment = Math.Round(pStartAmount.Value * Convert.ToDecimal(_contract.InterestRate)'2);                  //in case TotalAnticipatedRepaymentFormerPrepaymentDayBeforeFlatCash                   if ((pStartAmount == 0) && (installment.PaidInterests !=0))                  {                      installment.InterestsRepayment = installment.PaidInterests;                  }                    if (installment.Number <= _contract.GracePeriod)                  {                      installment.CapitalRepayment = 0;                      installment.OLB = olb;                  }                  else                  {                      installment.CapitalRepayment = decimal.Round((pStartAmount.Value - sumOfPrincipal.Value) / (pNumberOfInstallmentsToPay - installmentNumber)' 2);                      sumOfPrincipal += installment.CapitalRepayment;                      installmentNumber++;                  }                    installment.OLB = olb;                  olb -= installment.CapitalRepayment;              }
Magic Number,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.Repayment.RepayNextInstallments.Flat,FlateKeepNotExpectedInstallmentsWithCents,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\Repayment\RepayNextInstallments\Flat\FlateKeepNotExpectedInstallmentsWithCents.cs,_CalculateInstallments,The following statement contains a magic number: for (int number = pStartInstallment; number <= _contract.NbOfInstallments; number++)              {                  Installment installment = _contract.GetInstallment(number - 1);                    installment.InterestsRepayment = Math.Round(pStartAmount.Value * Convert.ToDecimal(_contract.InterestRate)'2);                  //in case TotalAnticipatedRepaymentFormerPrepaymentDayBeforeFlatCash                   if ((pStartAmount == 0) && (installment.PaidInterests !=0))                  {                      installment.InterestsRepayment = installment.PaidInterests;                  }                    if (installment.Number <= _contract.GracePeriod)                  {                      installment.CapitalRepayment = 0;                      installment.OLB = olb;                  }                  else                  {                      installment.CapitalRepayment = decimal.Round((pStartAmount.Value - sumOfPrincipal.Value) / (pNumberOfInstallmentsToPay - installmentNumber)' 2);                      sumOfPrincipal += installment.CapitalRepayment;                      installmentNumber++;                  }                    installment.OLB = olb;                  olb -= installment.CapitalRepayment;              }
Magic Number,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.Repayment.RepayNextInstallments.Flat,FlateKeepExpectedInstallments,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\Repayment\RepayNextInstallments\Flat\FlateKeepExpectedInstallments.cs,RepayNextInstallments,The following statement contains a magic number: for(int i = 0 ; i < _contract.NbOfInstallments ; i++)              {                  Installment installment = _contract.GetInstallment(i);                  if (!installment.IsRepaid && amountPaid > 0)                  {                      //commission                      _methodToRepayCommission.RepayCommission(installment' ref amountPaid' ref commissionsEvent);                      if (amountPaid == 0) break;                        //penalty                      _methodToRepayFees.RepayFees(installment' ref amountPaid' ref feesEvent);                      if (amountPaid == 0) break;                        //Interests                      if (amountPaid == 0) return;                      _methodToRepayInterest.RepayInterest(installment' ref amountPaid' ref interestEvent'ref interestPrepayment);                        //principal                      if (amountPaid == 0)                      {                          _paidInstallments.Add(installment);                          return;                      }                        OCurrency principalHasToPay = installment.CapitalRepayment - installment.PaidCapital;                        if (AmountComparer.Compare(amountPaid' principalHasToPay) < 0)                      {                          installment.PaidCapital += amountPaid;                          installment.PaidCapital = Math.Round(installment.PaidCapital.Value' 2);                          principalEvent += amountPaid;                          amountPaid = 0;                      }                      else if (AmountComparer.Compare(amountPaid' principalHasToPay) > 0)                      {                          installment.PaidCapital = installment.CapitalRepayment;                          amountPaid -= principalHasToPay;                          principalEvent += principalHasToPay;                      }                      else                      {                          installment.PaidCapital += amountPaid;                          installment.PaidCapital = Math.Round(installment.PaidCapital.Value' 2);                          principalEvent += amountPaid;                          amountPaid = 0;                      }                        _paidInstallments.Add(installment);                  }              }
Magic Number,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.Repayment.RepayNextInstallments.Flat,FlateKeepExpectedInstallments,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\Repayment\RepayNextInstallments\Flat\FlateKeepExpectedInstallments.cs,RepayNextInstallments,The following statement contains a magic number: for(int i = 0 ; i < _contract.NbOfInstallments ; i++)              {                  Installment installment = _contract.GetInstallment(i);                  if (!installment.IsRepaid && amountPaid > 0)                  {                      //commission                      _methodToRepayCommission.RepayCommission(installment' ref amountPaid' ref commissionsEvent);                      if (amountPaid == 0) break;                        //penalty                      _methodToRepayFees.RepayFees(installment' ref amountPaid' ref feesEvent);                      if (amountPaid == 0) break;                        //Interests                      if (amountPaid == 0) return;                      _methodToRepayInterest.RepayInterest(installment' ref amountPaid' ref interestEvent'ref interestPrepayment);                        //principal                      if (amountPaid == 0)                      {                          _paidInstallments.Add(installment);                          return;                      }                        OCurrency principalHasToPay = installment.CapitalRepayment - installment.PaidCapital;                        if (AmountComparer.Compare(amountPaid' principalHasToPay) < 0)                      {                          installment.PaidCapital += amountPaid;                          installment.PaidCapital = Math.Round(installment.PaidCapital.Value' 2);                          principalEvent += amountPaid;                          amountPaid = 0;                      }                      else if (AmountComparer.Compare(amountPaid' principalHasToPay) > 0)                      {                          installment.PaidCapital = installment.CapitalRepayment;                          amountPaid -= principalHasToPay;                          principalEvent += principalHasToPay;                      }                      else                      {                          installment.PaidCapital += amountPaid;                          installment.PaidCapital = Math.Round(installment.PaidCapital.Value' 2);                          principalEvent += amountPaid;                          amountPaid = 0;                      }                        _paidInstallments.Add(installment);                  }              }
Magic Number,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.Repayment.RepayNextInstallments.Flat,FlatExoticKeepNotExpectedInstallmentsWithNoCents,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\Repayment\RepayNextInstallments\Flat\FlatExoticKeepNotExpectedInstallmentsWithNoCents.cs,RepayNextInstallments,The following statement contains a magic number: if(totalInterest != 0)                  totalInterest = totalInterest / (Convert.ToDecimal(nbInterest) * 10);
Magic Number,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.Repayment.RepayNextInstallments.Flat,FlatExoticKeepNotExpectedInstallmentsWithNoCents,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\Repayment\RepayNextInstallments\Flat\FlatExoticKeepNotExpectedInstallmentsWithNoCents.cs,RepayNextInstallments,The following statement contains a magic number: if(totalPrincipal != 0)                  totalPrincipal = totalPrincipal / (Convert.ToDecimal(nbPrincipal) * 10);
Magic Number,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.Repayment.RepayNextInstallments.Flat,FlatExoticKeepNotExpectedInstallmentsWithNoCents,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\Repayment\RepayNextInstallments\Flat\FlatExoticKeepNotExpectedInstallmentsWithNoCents.cs,RepayNextInstallments,The following statement contains a magic number: for (int i = 0; i < _contract.NbOfInstallments; i++)              {                  Installment installment = _contract.GetInstallment(i);                  if(!installment.IsRepaid)                  {                      ExoticInstallment exoticInstallment;                        if (!_contract.GracePeriod.HasValue)                      {                          exoticInstallment = _contract.Product.ExoticProduct.GetExoticInstallment(i);                            OCurrency tempInterest = Convert.ToDecimal(exoticInstallment.InterestCoeff)*totalInterest*(double)10;                          OCurrency tempCapital = Convert.ToDecimal(exoticInstallment.PrincipalCoeff)*totalPrincipal*(double)10;                            installment.InterestsRepayment = Math.Truncate(tempInterest.Value);                          installment.CapitalRepayment = Math.Truncate(tempCapital.Value);                            interestForLastInstallment += tempInterest - installment.InterestsRepayment;                          capitalForLastInstallment += tempCapital - installment.CapitalRepayment;                        }                      else if (installment.Number > _contract.GracePeriod.Value)                      {                          exoticInstallment = _contract.Product.ExoticProduct.GetExoticInstallment(i - _contract.GracePeriod.Value);                            OCurrency tempInterest = Convert.ToDecimal(exoticInstallment.InterestCoeff) * totalInterest * (double)10;                          OCurrency tempCapital = Convert.ToDecimal(exoticInstallment.PrincipalCoeff) * totalPrincipal * (double)10;                            installment.InterestsRepayment = Math.Truncate(tempInterest.Value);                          installment.CapitalRepayment = Math.Truncate(tempCapital.Value);                            interestForLastInstallment += tempInterest - installment.InterestsRepayment;                          capitalForLastInstallment += tempCapital - installment.CapitalRepayment;                      }                      else                      {                          OCurrency tempInterest = 0;                          if (totalInterest != 0)                              tempInterest = totalPrincipal * Convert.ToDecimal(_contract.InterestRate);                            installment.InterestsRepayment = Math.Truncate(tempInterest.Value);                          installment.CapitalRepayment = 0;                            interestForLastInstallment += tempInterest - installment.InterestsRepayment;                      }                  }                    _paidInstallments.Add(installment);              }
Magic Number,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.Repayment.RepayNextInstallments.Flat,FlatExoticKeepNotExpectedInstallmentsWithNoCents,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\Repayment\RepayNextInstallments\Flat\FlatExoticKeepNotExpectedInstallmentsWithNoCents.cs,RepayNextInstallments,The following statement contains a magic number: for (int i = 0; i < _contract.NbOfInstallments; i++)              {                  Installment installment = _contract.GetInstallment(i);                  if(!installment.IsRepaid)                  {                      ExoticInstallment exoticInstallment;                        if (!_contract.GracePeriod.HasValue)                      {                          exoticInstallment = _contract.Product.ExoticProduct.GetExoticInstallment(i);                            OCurrency tempInterest = Convert.ToDecimal(exoticInstallment.InterestCoeff)*totalInterest*(double)10;                          OCurrency tempCapital = Convert.ToDecimal(exoticInstallment.PrincipalCoeff)*totalPrincipal*(double)10;                            installment.InterestsRepayment = Math.Truncate(tempInterest.Value);                          installment.CapitalRepayment = Math.Truncate(tempCapital.Value);                            interestForLastInstallment += tempInterest - installment.InterestsRepayment;                          capitalForLastInstallment += tempCapital - installment.CapitalRepayment;                        }                      else if (installment.Number > _contract.GracePeriod.Value)                      {                          exoticInstallment = _contract.Product.ExoticProduct.GetExoticInstallment(i - _contract.GracePeriod.Value);                            OCurrency tempInterest = Convert.ToDecimal(exoticInstallment.InterestCoeff) * totalInterest * (double)10;                          OCurrency tempCapital = Convert.ToDecimal(exoticInstallment.PrincipalCoeff) * totalPrincipal * (double)10;                            installment.InterestsRepayment = Math.Truncate(tempInterest.Value);                          installment.CapitalRepayment = Math.Truncate(tempCapital.Value);                            interestForLastInstallment += tempInterest - installment.InterestsRepayment;                          capitalForLastInstallment += tempCapital - installment.CapitalRepayment;                      }                      else                      {                          OCurrency tempInterest = 0;                          if (totalInterest != 0)                              tempInterest = totalPrincipal * Convert.ToDecimal(_contract.InterestRate);                            installment.InterestsRepayment = Math.Truncate(tempInterest.Value);                          installment.CapitalRepayment = 0;                            interestForLastInstallment += tempInterest - installment.InterestsRepayment;                      }                  }                    _paidInstallments.Add(installment);              }
Magic Number,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.Repayment.RepayNextInstallments.Flat,FlatExoticKeepNotExpectedInstallmentsWithNoCents,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\Repayment\RepayNextInstallments\Flat\FlatExoticKeepNotExpectedInstallmentsWithNoCents.cs,RepayNextInstallments,The following statement contains a magic number: for (int i = 0; i < _contract.NbOfInstallments; i++)              {                  Installment installment = _contract.GetInstallment(i);                  if(!installment.IsRepaid)                  {                      ExoticInstallment exoticInstallment;                        if (!_contract.GracePeriod.HasValue)                      {                          exoticInstallment = _contract.Product.ExoticProduct.GetExoticInstallment(i);                            OCurrency tempInterest = Convert.ToDecimal(exoticInstallment.InterestCoeff)*totalInterest*(double)10;                          OCurrency tempCapital = Convert.ToDecimal(exoticInstallment.PrincipalCoeff)*totalPrincipal*(double)10;                            installment.InterestsRepayment = Math.Truncate(tempInterest.Value);                          installment.CapitalRepayment = Math.Truncate(tempCapital.Value);                            interestForLastInstallment += tempInterest - installment.InterestsRepayment;                          capitalForLastInstallment += tempCapital - installment.CapitalRepayment;                        }                      else if (installment.Number > _contract.GracePeriod.Value)                      {                          exoticInstallment = _contract.Product.ExoticProduct.GetExoticInstallment(i - _contract.GracePeriod.Value);                            OCurrency tempInterest = Convert.ToDecimal(exoticInstallment.InterestCoeff) * totalInterest * (double)10;                          OCurrency tempCapital = Convert.ToDecimal(exoticInstallment.PrincipalCoeff) * totalPrincipal * (double)10;                            installment.InterestsRepayment = Math.Truncate(tempInterest.Value);                          installment.CapitalRepayment = Math.Truncate(tempCapital.Value);                            interestForLastInstallment += tempInterest - installment.InterestsRepayment;                          capitalForLastInstallment += tempCapital - installment.CapitalRepayment;                      }                      else                      {                          OCurrency tempInterest = 0;                          if (totalInterest != 0)                              tempInterest = totalPrincipal * Convert.ToDecimal(_contract.InterestRate);                            installment.InterestsRepayment = Math.Truncate(tempInterest.Value);                          installment.CapitalRepayment = 0;                            interestForLastInstallment += tempInterest - installment.InterestsRepayment;                      }                  }                    _paidInstallments.Add(installment);              }
Magic Number,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.Repayment.RepayNextInstallments.Flat,FlatExoticKeepNotExpectedInstallmentsWithNoCents,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\Repayment\RepayNextInstallments\Flat\FlatExoticKeepNotExpectedInstallmentsWithNoCents.cs,RepayNextInstallments,The following statement contains a magic number: for (int i = 0; i < _contract.NbOfInstallments; i++)              {                  Installment installment = _contract.GetInstallment(i);                  if(!installment.IsRepaid)                  {                      ExoticInstallment exoticInstallment;                        if (!_contract.GracePeriod.HasValue)                      {                          exoticInstallment = _contract.Product.ExoticProduct.GetExoticInstallment(i);                            OCurrency tempInterest = Convert.ToDecimal(exoticInstallment.InterestCoeff)*totalInterest*(double)10;                          OCurrency tempCapital = Convert.ToDecimal(exoticInstallment.PrincipalCoeff)*totalPrincipal*(double)10;                            installment.InterestsRepayment = Math.Truncate(tempInterest.Value);                          installment.CapitalRepayment = Math.Truncate(tempCapital.Value);                            interestForLastInstallment += tempInterest - installment.InterestsRepayment;                          capitalForLastInstallment += tempCapital - installment.CapitalRepayment;                        }                      else if (installment.Number > _contract.GracePeriod.Value)                      {                          exoticInstallment = _contract.Product.ExoticProduct.GetExoticInstallment(i - _contract.GracePeriod.Value);                            OCurrency tempInterest = Convert.ToDecimal(exoticInstallment.InterestCoeff) * totalInterest * (double)10;                          OCurrency tempCapital = Convert.ToDecimal(exoticInstallment.PrincipalCoeff) * totalPrincipal * (double)10;                            installment.InterestsRepayment = Math.Truncate(tempInterest.Value);                          installment.CapitalRepayment = Math.Truncate(tempCapital.Value);                            interestForLastInstallment += tempInterest - installment.InterestsRepayment;                          capitalForLastInstallment += tempCapital - installment.CapitalRepayment;                      }                      else                      {                          OCurrency tempInterest = 0;                          if (totalInterest != 0)                              tempInterest = totalPrincipal * Convert.ToDecimal(_contract.InterestRate);                            installment.InterestsRepayment = Math.Truncate(tempInterest.Value);                          installment.CapitalRepayment = 0;                            interestForLastInstallment += tempInterest - installment.InterestsRepayment;                      }                  }                    _paidInstallments.Add(installment);              }
Missing Default,OpenCBS.CoreDomain.Accounting,AccountingClosure,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Accounting\AccountingClosure.cs,GetValue,The following switch statement is missing a default case: switch (rule.EventAttribute.Name.ToLower())              {                  case "olb":                      amount = eventItem.OLB;                      break;                  case "accrued_interests":                      amount = eventItem.AccruedInterests;                      break;                  case "accrued_penalties":                      amount = eventItem.AccruedPenalties;                      break;                  case "past_due_days":                      amount = eventItem.PastDueDays;                      break;                  case "overdue_principal":                      amount = eventItem.OverduePrincipal;                      break;              }
Missing Default,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment,CreditContractRepayment,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\CreditContractRepayment.cs,Repay,The following switch statement is missing a default case: switch (paymentType)              {                  case OPaymentType.StandardPayment:                      {                          _calculateInstallments.RepayInstallments(_date'                                                                  ref amountPaid'                                                                  ref interestsEvent'                                                                  ref principalEvent'                                                                  ref penaltiesEvent'                                                                  ref commissionsEvent);                          break;                      }                    case OPaymentType.TotalPayment:                      {                          _calculateInstallments.RepayTotalAnticipateInstallments(_date' ref amountPaid'                                                                                  ref interestsEvent' ref principalEvent'                                                                                  ref penaltiesEvent'                                                                                  ref commissionsEvent);                          break;                      }                    case OPaymentType.PartialPayment:                      {                          _calculateInstallments.RepayPartialAnticipateInstallments(_date' ref amountPaid'                                                                                    ref interestsEvent'                                                                                    ref principalEvent'                                                                                    ref penaltiesEvent'                                                                                    ref commissionsEvent);                          break;                      }                  case OPaymentType.ProportionalPayment:                      {                          _calculateInstallments.RepayProportinalyInstallments(_date' ref amountPaid'                                                                                    ref interestsEvent'                                                                                    ref principalEvent'                                                                                    ref penaltiesEvent'                                                                                    ref commissionsEvent);                          break;                      }              }
Missing Default,OpenCBS.CoreDomain.Contracts.Loans,Loan,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\Loan.cs,GetLateLoanEventCode,The following switch statement is missing a default case: switch (loanStatus)              {                  case OLoanLateStatus.Good:                      {                          if (eventCode == "GLBL" || eventCode == "LLBL")                          {                              code = "BLGL";                          }                          else if (eventCode == "GLLL" || eventCode == "BLLL")                          {                              code = "LLGL";                          }                          break;                      }                  case OLoanLateStatus.Late:                      {                          if (eventCode == "LLGL" || eventCode == "BLGL")                          {                              code = "GLLL";                          }                          else if (eventCode == "LLBL" || eventCode == "GLBL")                          {                              code = "BLLL";                          }                          break;                      }                  case OLoanLateStatus.Bad:                      {                          if (eventCode == "GLLL" || eventCode == "BLLL")                          {                              code = "LLBL";                          }                          else if (eventCode == "LLGL" || eventCode == "BLGL")                          {                              code = "GLBL";                          }                          break;                      }              }
Missing Default,OpenCBS.CoreDomain.Contracts.Savings,SavingsContract,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Savings\SavingsContract.cs,GenerateSavingCode,The following switch statement is missing a default case: switch (pCodeTemplate)              {                  case "BC/YY/PC-PS/CN-ID":                      {                          string clientName = (pClient is Person) ? ((Person)pClient).LastName : pClient.Name;                          clientName = clientName.Replace(" "' "");                          string productCode = Product.Code.Replace(" "' "");                          Code = "S/{0}/{1}/{2}-{3}/{4}-{5}";                          Code = string.Format(Code'                                               pBranchCode'                                               CreationDate.Year'                                               productCode.Substring(0' Math.Min(productCode.Length' 5)).ToUpper()'                                               pSavingsCount + 1'                                               clientName.Substring(0' Math.Min(clientName.Length' 4)).ToUpper()'                                               pClient.Id);                          break;                      }                  case "IC/BC/CS/ID":                      {                          string clientCode = pClient.Id.ToString().PadLeft(5' '0');                          string savingsCount = (pSavingsCount + 1).ToString().PadLeft(2' '0');                          Code = string.Format("{0}/{1}/{2}"' pBranchCode' savingsCount' clientCode);                          break;                      }              }
Missing Default,OpenCBS.CoreDomain.Contracts.Savings,SavingBookContract,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Savings\SavingBookContract.cs,DoClosureWithoutTermDeposit,The following switch statement is missing a default case: switch (Product.InterestFrequency)              {                  case OSavingInterestFrequency.EndOfYear:                      savingEvents.AddRange(PostingEndOfYear(date' user));                      break;                  case OSavingInterestFrequency.EndOfMonth:                      savingEvents.AddRange(PostingEndOfMonth(date' user));                      break;                  case OSavingInterestFrequency.EndOfWeek:                      savingEvents.AddRange(PostingEndOfWeek(date' user));                      break;                  case OSavingInterestFrequency.EndOfDay:                      savingEvents.AddRange(PostingEndOfDay(date' user));                      break;                  /*default:                      Debug.Fail("Savings closure: debug fail!");                      retval = new List<SavingEvent>();                      break;*/              }
Missing Default,OpenCBS.CoreDomain.Export.Files,ReimbursementImportFile,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Export\Files\ReimbursementImportFile.cs,_setValueFromField,The following switch statement is missing a default case: switch (pField.Name)              {                  case "ContractCode": pInstallment.ContractCode = (string)pField.FieldType.Parse(pValue); break;                  case "InstallmentNumber": pInstallment.InstallmentNumber = (int)pField.FieldType.Parse(pValue); break;                  case "RepaymentAmount": pInstallment.InstallmentAmount = (decimal)pField.FieldType.Parse(pValue); break;                  case "RepaymentDate": pInstallment.InstallmentDate = (DateTime)pField.FieldType.Parse(pValue); break;                  case "RepaymentStatus": pInstallment.RepaymentStatus = (int)pField.FieldType.Parse(pValue); break;              }
Missing Default,OpenCBS.CoreDomain.Export.Files,InstallmentExportFile,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Export\Files\InstallmentExportFile.cs,_getFormatedField,The following switch statement is missing a default case: switch (pField.Name)              {                  case "ContractCode": return pField.Format(pRowData.ContractCode);                  case "InstallmentNumber": return pField.Format(pRowData.InstallmentNumber);                  case "ClientName": return pField.Format(pRowData.ClientName);                  case "PersonalBankName": return pField.Format(pRowData.PersonalBankName);                  case "PersonalBankBIC": return pField.Format(pRowData.PersonalBankBic);                  case "PersonalBankIban1": return pField.Format(pRowData.PersonalBankIban1);                  case "PersonalBankIban2": return pField.Format(pRowData.PersonalBankIban2);                  case "BusinessBankName": return pField.Format(pRowData.BusinessBankName);                  case "BusinessBankBIC": return pField.Format(pRowData.BusinessBankBic);                  case "BusinessBankIban1": return pField.Format(pRowData.BusinessBankIban1);                  case "BusinessBankIban2": return pField.Format(pRowData.BusinessBankIban2);                  case "ProductCode": return pField.Format(pRowData.ProductCode);                  case "ProductName": return pField.Format(pRowData.ProductName);                  case "InstallmentAmount": return pField.Format(pRowData.InstallmentAmount.Value);                  case "InstallmentDate": return pField.Format(pRowData.InstallmentDate);              }
Missing Default,OpenCBS.CoreDomain.Contracts.Loans.CalculateInstallments,CalculateInstallmentsStrategy,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\CalculateInstallments\CalculateInstallmentsStrategy.cs,CalculateInstallmentsStrategy,The following switch statement is missing a default case: switch (pCio.LoanType)                      {                          case OLoanTypes.Flat:                              _iCi = new FlatStrategy(pCio.Contract' _generalSettings' initialOlbOfContractBeforeRescheduling);                              break;                          case OLoanTypes.DecliningFixedInstallments:                              _iCi = new FixedInstallmentStrategy(pCio.Contract' pStartAmount' pNumberOfInstallments'                                                                  _generalSettings);                              break;                          case OLoanTypes.DecliningFixedPrincipal:                              _iCi = new FixedPrincipalStrategy(pCio.Contract' _generalSettings);                              break;                      }
Missing Default,OpenCBS.CoreDomain.Contracts.Loans.LoanRepayment.Repayment.RepayLateInstallments,CalculateInstallments,C:\repos\PavelBastov_opencbs\Src\OpenCBS.CoreDomain\Contracts\Loans\LoanRepayment\Repayment\RepayLateInstallments\CalculateInstallments.cs,CalculateRemainsInstallmentAfterApr,The following switch statement is missing a default case: switch (_contract.Product.LoanType)                  {                      case OLoanTypes.Flat :                          {                              CalculateFlatInstallments(startFrom);                              break;                          }                        case OLoanTypes.DecliningFixedInstallments:                          {                              CalculateDecliningFixedInstallments(startFrom' interests);                              break;                          }                        case OLoanTypes.DecliningFixedPrincipal:                          {                              CalculateDecliningFixedPrincipal(startFrom);                              break;                          }                  }
