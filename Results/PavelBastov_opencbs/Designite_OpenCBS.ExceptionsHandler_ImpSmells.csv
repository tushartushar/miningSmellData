Implementation smell,Namespace,Class,File,Method,Description
Long Method,OpenCBS.ExceptionsHandler,OpenCbsContractSaveException,C:\repos\PavelBastov_opencbs\Src\OpenCBS.ExceptionsHandler\Exceptions\ContractExceptions\OpenCbsContractSaveException.cs,FindException,The method has 130 lines of code.
Long Method,OpenCBS.ExceptionsHandler,OpenCbsPackageSaveException,C:\repos\PavelBastov_opencbs\Src\OpenCBS.ExceptionsHandler\Exceptions\PackageExceptions\OpenCbsPackageSaveException.cs,FindException,The method has 130 lines of code.
Long Method,OpenCBS.ExceptionsHandler,OpenCbsSavingProductException,C:\repos\PavelBastov_opencbs\Src\OpenCBS.ExceptionsHandler\Exceptions\SavingExceptions\OpenCbsSavingProductException.cs,FindException,The method has 220 lines of code.
Long Method,OpenCBS.ExceptionsHandler,OpenCbsTiersSaveException,C:\repos\PavelBastov_opencbs\Src\OpenCBS.ExceptionsHandler\Exceptions\Tiers\OpenCbsTiersSaveException.cs,FindException,The method has 166 lines of code.
Long Method,OpenCBS.ExceptionsHandler.Exceptions.SavingExceptions,OpenCbsSavingException,C:\repos\PavelBastov_opencbs\Src\OpenCBS.ExceptionsHandler\Exceptions\SavingExceptions\OpenCbsSavingException.cs,_FindException,The method has 131 lines of code.
Missing Default,OpenCBS.ExceptionsHandler,OpenCbsBookingException,C:\repos\PavelBastov_opencbs\Src\OpenCBS.ExceptionsHandler\Exceptions\AccountExceptions\OpenCbsBookingException.cs,_FindException,The following switch statement is missing a default case: switch(exceptionId)  			{  				case OpenCbsBookingExceptionsEnum.NameIsEmpty:  					returned = "OpenCbsBookingExceptionsNameIsEmpty.Text";                      break;                  case OpenCbsBookingExceptionsEnum.CreditAccountIsEmpty:                      returned = "OpenCbsBookingExceptionsCreditAccountIsEmpty.Text";                      break;                  case OpenCbsBookingExceptionsEnum.DebitAccountIsEmpty:                      returned = "OpenCbsBookingExceptionsDebitAccountIsEmpty.Text";                      break;                     case OpenCbsBookingExceptionsEnum.DebitAndCreditAccountAreIdentical:                      returned = "OpenCbsBookingExceptionDebitAndCreditAccountAreIdentical.Text";                      break;                  case OpenCbsBookingExceptionsEnum.BookingIsEmpty:                      returned = "BookingIsEmpty.Text";                      break;                  case OpenCbsBookingExceptionsEnum.NotDeletableClosure:                      returned = "OpenCbsNotDeletableClosure.Text";                      break;  			}
Missing Default,OpenCBS.ExceptionsHandler,OpenCbsCollateralDeleteException,C:\repos\PavelBastov_opencbs\Src\OpenCBS.ExceptionsHandler\Exceptions\CollateralExceptions\OpenCbsCollateralDeleteException.cs,_FindException,The following switch statement is missing a default case: switch(exceptionId)  			{                  case OpenCbsCollateralDeleteExceptionEnum.HasChildrens:  					returned = "CollateralExceptionHasChildrens.Text";  					break;    			}
Missing Default,OpenCBS.ExceptionsHandler,OpenCbsCollateralSaveException,C:\repos\PavelBastov_opencbs\Src\OpenCBS.ExceptionsHandler\Exceptions\CollateralExceptions\OpenCbsCollateralSaveException.cs,_FindException,The following switch statement is missing a default case: switch(exceptionId)  			{                  case OpenCbsCollateralSaveExceptionEnum.NameIsNull:  					returned = "CollateralExceptionNameIsNull.Text";  					break;                    case OpenCbsCollateralSaveExceptionEnum.CastInvalid:                      returned = "CollateralExceptionCastInvalid.Text";  					break;                    case OpenCbsCollateralSaveExceptionEnum.AlreadyExist:                      returned = "CollateralExceptionAlreadyExist.Text";  					break;  			}
Missing Default,OpenCBS.ExceptionsHandler,OpenCbsCollateralUpdateException,C:\repos\PavelBastov_opencbs\Src\OpenCBS.ExceptionsHandler\Exceptions\CollateralExceptions\OpenCbsCollateralUpdateException.cs,_FindException,The following switch statement is missing a default case: switch(exceptionId)  			{                  case OpenCbsCollateralUpdateExceptionEnum.NewNameIsNull:  					returned = "CollateralExceptionNewNameIsNull.Text";  					break;                    case OpenCbsCollateralUpdateExceptionEnum.NoSelect:                      returned = "CollateralExceptionNoSelect.Text";  					break;  			}
Missing Default,OpenCBS.ExceptionsHandler,OpenCbsContractSaveException,C:\repos\PavelBastov_opencbs\Src\OpenCBS.ExceptionsHandler\Exceptions\ContractExceptions\OpenCbsContractSaveException.cs,FindException,The following switch statement is missing a default case: switch(exceptionId)  			{  				case OpenCbsContractSaveExceptionEnum.ContractIsNull:  					returned = "ContractExceptionContractIsNull.Text";  					break;    				case OpenCbsContractSaveExceptionEnum.AmountIsNull:  					returned = "ContractExceptionAmountIsNull.Text";  					break;    				case OpenCbsContractSaveExceptionEnum.EntryFeesIsNull:  					returned = "ContractExceptionEntryFeesIsNull.Text";  					break;    				case OpenCbsContractSaveExceptionEnum.AnticipatedRepaymentPenaltiesIsNull:  					returned = "ContractExceptionAnticipatedRepaymentPenaltiesIsNull.Text";  					break;    				case OpenCbsContractSaveExceptionEnum.NonRepaymentPenaltiesIsNull:  					returned = "ContractExceptionNonRepaymentPenaltiesIsNull.Text";  					break;    				case OpenCbsContractSaveExceptionEnum.NumberOfInstallmentIsNull:  					returned = "ContractExceptionNumberOfInstallmentsIsNull.Text";  					break;    				case OpenCbsContractSaveExceptionEnum.GracePeriodIsNull:  					returned = "ContractExceptionGracePeriodIsNull.Text";  					break;    				case OpenCbsContractSaveExceptionEnum.InterestRateIsNull:  					returned = "ContractExceptionInterestRateIsNull.Text";  					break;    				case OpenCbsContractSaveExceptionEnum.InstallmentTypeIsNull:  					returned = "ContractExceptionInstallmentTypeIsNull.Text";  					break;    				case OpenCbsContractSaveExceptionEnum.FundingLineIsNull:  					returned = "ContractExceptionFundingLineIsNull.Text";  					break;    				case OpenCbsContractSaveExceptionEnum.LoanOfficerIsNull:  					returned = "ContractExceptionLoanOfficerIsNull.Text";  					break;    				case OpenCbsContractSaveExceptionEnum.BeneficiaryIsNull:  					returned = "ContractExceptionBeneficiaryIsNull.Text";  					break;    				case OpenCbsContractSaveExceptionEnum.BeneficiaryIsActive:  					returned = "ContractExceptionBeneficiaryIsActive.Text";  					break;    				case OpenCbsContractSaveExceptionEnum.DisburseIsNull:  					returned = "ContractExceptionDisburseDate.Text";                      break;                    case OpenCbsContractSaveExceptionEnum.BeneficiaryIsBad:                      returned = "ContractExceptionBeneficiaryIsBad.Text";                      break;                    case OpenCbsContractSaveExceptionEnum.EventIsNull:                                                                                                                                                                                                                                                                                                                                                                                                        returned = "ContractExceptionEventIsNull.Text";                      break;                    case OpenCbsContractSaveExceptionEnum.EventNotCancelable:                      returned = "ContractExceptionEventNotCancelable.Text";                      break;                    case OpenCbsContractSaveExceptionEnum.EventCommentIsEmpty:                      returned = "ContractExceptionEventCommentIsEmpty.Text";                      break;                    case OpenCbsContractSaveExceptionEnum.BeneficiaryIsAllowOneLoans:                      returned = "ContractExceptionBeneficiaryIsAllowOneLoans.Text";                      break;                    case OpenCbsContractSaveExceptionEnum.ProjectIsNull:                      returned = "ContractExceptionProjectIsNull.Text";                      break;                    case OpenCbsContractSaveExceptionEnum.CorporateIsNull:                      returned = "ContractExceptionCorporateIsNull.Text";                      break;                    case OpenCbsContractSaveExceptionEnum.CreditCommiteeCommentNotModified:                      returned = "ContractExceptionCreditCommiteeCommentNotModified.Text";                      break;                    case OpenCbsContractSaveExceptionEnum.StatusNotModified:                      returned = "ContractExceptionStatusNotModified.Text";                      break;                  case OpenCbsContractSaveExceptionEnum.CurrencyMisMatch:                      returned = "CurrencyMisMatch.Text";                      break;                  case OpenCbsContractSaveExceptionEnum.LoanShareAmountIsEmpty:                      returned = "LoanShareAmountIsEmpty.Text";                      break;                  case OpenCbsContractSaveExceptionEnum.LoanWasValidatedLaterThanDisbursed:                      returned = "LoanWasValidatedLaterThanDisbursed.Text";                      break;                  case OpenCbsContractSaveExceptionEnum.TrancheDate:                      returned = "TrancheDateError.Text";                      break;                  case OpenCbsContractSaveExceptionEnum.TrancheAmount:                      returned = "TrancheAmountError.Text";                      break;                  case OpenCbsContractSaveExceptionEnum.FieldIsNotUnique:                      returned = "FieldIsNotUnique.Text";                      break;                  case OpenCbsContractSaveExceptionEnum.FieldIsMandatory:                      returned = "FieldIsMandatory.Text";                      break;                  case OpenCbsContractSaveExceptionEnum.NumberFieldIsNotANumber:                      returned = "NumberFieldIsNotANumber.Text";                      break;                  case OpenCbsContractSaveExceptionEnum.FieldEmpty:                      returned = "FieldEmpty.Text";                      break;                  case OpenCbsContractSaveExceptionEnum.ZeroFee:                      returned = "ZeroFee.Text";                      break;                  case OpenCbsContractSaveExceptionEnum.WrongEvent:                      returned = "WrongEvent.Text";                      break;                  case OpenCbsContractSaveExceptionEnum.LoanHasNoCompulsorySavings:                      returned = "LoanHasNoCompulsorySavingsError.Text";                      break;                  case OpenCbsContractSaveExceptionEnum.OperationOutsideCurrentFiscalYear:                      returned = "OperationOutsideCurrentFiscalYear.Text";                      break;                  case OpenCbsContractSaveExceptionEnum.EconomicActivityNotSet:                      returned = "EconomicActivityNotSet.Text";                      break;                  case OpenCbsContractSaveExceptionEnum.TrancheMaturityError:                      returned = "TrancheMaturityError.Text";                      break;                  case OpenCbsContractSaveExceptionEnum.LoanIsFlatForTranche:                      returned = "LoanIsFlatForTranche.Text";                      break;                  case OpenCbsContractSaveExceptionEnum.CurrentInstallmentIsNotFullyRepaid:                      returned = "CurrentInstallmentIsNotFullyRepaid.Text";                      break;                  case OpenCbsContractSaveExceptionEnum.LoanAlreadyDisbursed:                      returned = "LoanAlreadyDisbursed.Text";                      break;  			}
Missing Default,OpenCBS.ExceptionsHandler,OpenCbsDisburseException,C:\repos\PavelBastov_opencbs\Src\OpenCBS.ExceptionsHandler\Exceptions\ContractExceptions\OpenCbsDisburseException.cs,_FindException,The following switch statement is missing a default case: switch(exceptionId)  			{  				case OpenCbsDisburseExceptionsEnum.DateIsWrong:  					returned = "DisburseExceptionDateWrong.Text";  					break;  			}
Missing Default,OpenCBS.ExceptionsHandler,OpenCbsInstallmentsException,C:\repos\PavelBastov_opencbs\Src\OpenCBS.ExceptionsHandler\Exceptions\ContractExceptions\OpenCbsInstallmentsException.cs,_FindException,The following switch statement is missing a default case: switch(exceptionId)  			{  				case OpenCbsInstallmentsExceptionsEnum.InstallmentIsNull:  					returned = "InstallmentExceptionInstallmentIsNull.Text";  					break;    				case OpenCbsInstallmentsExceptionsEnum.InstallmentAlreadyRepaid:  					returned = "InstallmentExceptionInstallmentAlreadyRepaid.Text";  					break;    				case OpenCbsInstallmentsExceptionsEnum.NotFirstInstallmentToRepay:  					returned = "InstallmentExceptionNotFirstInstallmentToRepay.Text";  					break;    				case OpenCbsInstallmentsExceptionsEnum.NotFirstInstallmentToCancelRepay:  					returned = "InstallmentExceptionNotFirstInstallmentToCancelRepay.Text";  					break;  			}
Missing Default,OpenCBS.ExceptionsHandler,OpenCbsRepayException,C:\repos\PavelBastov_opencbs\Src\OpenCBS.ExceptionsHandler\Exceptions\ContractExceptions\OpenCbsRepayException.cs,_FindException,The following switch statement is missing a default case: switch(exceptionId)  			{  				case OpenCbsRepayExceptionsEnum.NegativeAmount:  					returned = "RepayExceptionNegativeAmount.Text";  					break;    				case OpenCbsRepayExceptionsEnum.AmountGreaterThanTotalRemainingAmount:  					returned = "RepayExceptionAmountGreaterThanTotalRemainingAmount.Text";  					break;  					  				case OpenCbsRepayExceptionsEnum.AmountIsNull:  					returned = "RepayExceptionAmountIsNull.Text";  					break;  					  				case OpenCbsRepayExceptionsEnum.MaxPastDueDaysReached:  					returned = "RepayExceptionMaxPastDueDaysReached.Text";                      break;                    case OpenCbsRepayExceptionsEnum.CantRepayInTheFutur:                      returned = "CantRepayInTheFutur.Text";                      break;                    case OpenCbsRepayExceptionsEnum.DecimalAmount:                      returned = "DecimalAmount.Text";                      break;                    case OpenCbsRepayExceptionsEnum.AllInstallmentRepaid:                      returned = "AllInstallmentRepaid.Text";                      break;                    case OpenCbsRepayExceptionsEnum.RepaymentBeforeDisburse:                      returned = "RepaymentBeforeDisburse.Text";                      break;                    case OpenCbsRepayExceptionsEnum.RepaymentBeforeLastEventDate:  			        returned = "RepaymentBeforeLastEventDate.Text";                      break;  			}
Missing Default,OpenCBS.ExceptionsHandler,OpenCbsReportsException,C:\repos\PavelBastov_opencbs\Src\OpenCBS.ExceptionsHandler\Exceptions\ContractExceptions\OpenCbsReportsException.cs,_FindException,The following switch statement is missing a default case: switch(exceptionId)  			{  				case OpenCbsReportsExceptionsEnum.NoResult:  					returned = "ReportsExceptionsNoResult.Text";  					break;    				case OpenCbsReportsExceptionsEnum.NeedExchangeRate:  					returned = "ReportsExceptionsNeedExchangeRate.Text";  					break;                  case OpenCbsReportsExceptionsEnum.CannotLoadReport:                      returned = "CannotLoadReport.Text";                      break;                  case OpenCbsReportsExceptionsEnum.ReportProcedureSourceEmpty:                      returned = "ReportProcedureSourceEmpty.Text";                      break;                  case OpenCbsReportsExceptionsEnum.CannotGetDataSource:                      returned = "CannotGetDataSource.Text";                      break;                  case OpenCbsReportsExceptionsEnum.CannotLoadParameters:                      returned = "CannotLoadParameters.Text";                      break;    			}
Missing Default,OpenCBS.ExceptionsHandler,OpenCbsDoaDeleteException,C:\repos\PavelBastov_opencbs\Src\OpenCBS.ExceptionsHandler\Exceptions\DOAExceptions\OpenCbsDoaDeleteException.cs,_FindException,The following switch statement is missing a default case: switch(exceptionId)  			{  				case OpenCbsDOADeleteExceptionEnum.HasChildrens:  					returned = "DOAExceptionHasChildrens.Text";  					break;    			}
Missing Default,OpenCBS.ExceptionsHandler,OpenCbsDoaSaveException,C:\repos\PavelBastov_opencbs\Src\OpenCBS.ExceptionsHandler\Exceptions\DOAExceptions\OpenCbsDoaSaveException.cs,_FindException,The following switch statement is missing a default case: switch(exceptionId)  			{  				case OpenCbsDOASaveExceptionEnum.NameIsNull:  					returned = "DOAExceptionNameIsNull.Text";  					break;    				case OpenCbsDOASaveExceptionEnum.CastInvalid:  					returned = "DOAExceptionCastInvalid.Text";  					break;    				case OpenCbsDOASaveExceptionEnum.AlreadyExist:  					returned = "DOAExceptionAlreadyExist.Text";  					break;  			}
Missing Default,OpenCBS.ExceptionsHandler,OpenCbsDoaUpdateException,C:\repos\PavelBastov_opencbs\Src\OpenCBS.ExceptionsHandler\Exceptions\DOAExceptions\OpenCbsDoaUpdateException.cs,FindException,The following switch statement is missing a default case: switch(exceptionId)  			{  				case OpenCbsDOAUpdateExceptionEnum.NewNameIsNull:  					returned = "DOAExceptionNewNameIsNull.Text";  					break;    				case OpenCbsDOAUpdateExceptionEnum.NoSelect:  					returned = "DOAExceptionNoSelect.Text";  					break;  			}
Missing Default,OpenCBS.ExceptionsHandler,OpenCbsExchangeRateException,C:\repos\PavelBastov_opencbs\Src\OpenCBS.ExceptionsHandler\Exceptions\ExchangeRateExceptions\OpenCbsExchangeRateException.cs,_FindException,The following switch statement is missing a default case: switch(exception)  			{  				case OpenCbsExchangeRateExceptionEnum.ExchangeRateIsNull:  					returned = "ExchangeRateExceptionExchangeRateIsNull.Text";  					break;  				  				case OpenCbsExchangeRateExceptionEnum.DateIsNull:  					returned = "ExchangeRateExceptionDateIsNull.Text";  					break;    				case OpenCbsExchangeRateExceptionEnum.RateIsEmpty:  					returned = "ExchangeRateExceptionRateIsEmpty.Text";  					break;                  case OpenCbsExchangeRateExceptionEnum.CurrencyIsEmpty:                      returned = "ExchangeRateExceptionCurrencyIsEmpty.Text";                      break;                  case OpenCbsExchangeRateExceptionEnum.ThisCurrencyIsPivot:                      returned = "ExchangeRateExceptionThisCurrencyIsPivot.Text";                      break;  			}
Missing Default,OpenCBS.ExceptionsHandler,GeneralSettingException,C:\repos\PavelBastov_opencbs\Src\OpenCBS.ExceptionsHandler\Exceptions\GeneralSettingExceptions\GeneralSettingException.cs,_FindException,The following switch statement is missing a default case: switch(exceptionId)  			{                  case GeneralSettingEnumException.OnlyChar:                      returned = "onlyChars.Text";  					break;                    case GeneralSettingEnumException.OnlyInt:                      returned = "onlyInts.Text";                      break;                    case GeneralSettingEnumException.OnlyIntAndUnderscore:                      returned = "onlyIntsAndUnderscore.Text";                      break;                    case GeneralSettingEnumException.BetweenZeroAndSix:                      returned = "BetweenZeroAndSix.Text";                      break;  				  			}
Missing Default,OpenCBS.ExceptionsHandler,OpenCbsMfiExceptions,C:\repos\PavelBastov_opencbs\Src\OpenCBS.ExceptionsHandler\Exceptions\MFIExceptions\OpenCbsMfiExceptions.cs,FindException,The following switch statement is missing a default case: switch (exceptionId)              {                  case OpenCbsMFIExceptionEnum.NameIsEmpty:                      returned = "OME1.Text";                      break;                    case OpenCbsMFIExceptionEnum.PasswordIsNotFilled:                      returned = "OME3.Text";                      break;                    case OpenCbsMFIExceptionEnum.LoginIsNotFilled:                      returned = "OME2.Text";                      break;                    case OpenCbsMFIExceptionEnum.DifferentPassword:                      returned = "OME4.Text";                      break;              }
Missing Default,OpenCBS.ExceptionsHandler,OpenCbsTellerException,C:\repos\PavelBastov_opencbs\Src\OpenCBS.ExceptionsHandler\Exceptions\TellerExceptions\OpenCbsTellerException.cs,FindException,The following switch statement is missing a default case: switch (exceptionId)              {                  case OpenCbsTellerExceptionEnum.NameIsEmpty:                      returned = "TellerNameIsEmpty.Text";                      break;                                    case OpenCbsTellerExceptionEnum.AccountIsEmpty:                      returned = "TellerAccountIsEmpty.Text";                      break;                    case OpenCbsTellerExceptionEnum.BranchIsEmpty:                      returned = "TellerBranchIsEmpty.Text";                      break;                    case OpenCbsTellerExceptionEnum.CurrencyIsEmpty:                      returned = "TellerCurrencyIsEmpty.Text";                      break;                    case OpenCbsTellerExceptionEnum.UserIsEmpty:                      returned = "TellerUserIsEmpty.Text";                      break;                    case OpenCbsTellerExceptionEnum.NameIsExists:                      returned = "TellerNameIsExists.Text";                      break;                    case OpenCbsTellerExceptionEnum.MinMaxAmountIsInvalid:                      returned = "TellerAmountMinMaxIsInvalid.Text";                      break;                    case OpenCbsTellerExceptionEnum.VaultExists:                      returned = "TellerVaultExists.Text";                      break;                }
Missing Default,OpenCBS.ExceptionsHandler,OpenCbsRoleDeleteException,C:\repos\PavelBastov_opencbs\Src\OpenCBS.ExceptionsHandler\Exceptions\UserExceptions\OpenCbsRoleDeleteException.cs,_FindException,The following switch statement is missing a default case: switch (exceptionId)              {                  case OpenCbsRoleDeleteExceptionsEnum.RoleIsNull:                      returned = "RoleIsNull.Text";                      break;                    case OpenCbsRoleDeleteExceptionsEnum.RoleHasUsers:                      returned = "RoleHasUsers.Text";                      break;                    case OpenCbsRoleDeleteExceptionsEnum.ActionProhibited:                      returned = "ActionProhibitedForUser.Text";                      break;              }
Missing Default,OpenCBS.ExceptionsHandler,OpenCbsPackageDeleteException,C:\repos\PavelBastov_opencbs\Src\OpenCBS.ExceptionsHandler\Exceptions\PackageExceptions\OpenCbsPackageDeleteException.cs,FindException,The following switch statement is missing a default case: switch(exceptionId)  			{  				case OpenCbsPackageDeleteExceptionEnum.PackageIsNull:  					returned = "PackageExceptionPackageIsNull.Text";  					break;    				case OpenCbsPackageDeleteExceptionEnum.AlreadyDeleted:  					returned = "PackageExceptionAlreadyDeleted.Text";  					break;  			}
Missing Default,OpenCBS.ExceptionsHandler,OpenCbsPackageSaveException,C:\repos\PavelBastov_opencbs\Src\OpenCBS.ExceptionsHandler\Exceptions\PackageExceptions\OpenCbsPackageSaveException.cs,FindException,The following switch statement is missing a default case: switch(exceptionId)  			{  				case OpenCbsPackageSaveExceptionEnum.NameIsNull:  					returned = "PackageExceptionNameIsNull.Text";  					break;    				case OpenCbsPackageSaveExceptionEnum.InstallmentTypeIsNull:  					returned = "PackageExceptionInstallmentTypeIsNull.Text";  					break;    				case OpenCbsPackageSaveExceptionEnum.InstallmentTypeIsBad:  					returned = "PackageExceptionInstallmentTypeIsBad.Text";  					break;    				case OpenCbsPackageSaveExceptionEnum.InterestRateGroupBadlyInformed:  					returned = "PackageExceptionInterestRateGroupBadlyInformed.Text";  					break;    				case OpenCbsPackageSaveExceptionEnum.GracePeriodGroupBadlyInformed:  					returned = "PackageExceptionGracePeriodGroupBadlyInformed.Text";  					break;    				case OpenCbsPackageSaveExceptionEnum.NonRepaymentPenaltiesBadlyInformed:  					returned = "PackageExceptionNonRepaymentPenaltiesBadlyInformed.Text";  					break;    				case OpenCbsPackageSaveExceptionEnum.AnticipatedRepaymentPenaltiesBadlyInformed:  					returned = "PackageExceptionAnticipatedTotalRepaymentPenaltiesBadlyInformed.Text";  					break;    				case OpenCbsPackageSaveExceptionEnum.EntryFeesBadlyInformed:  					returned = "PackageExceptionEntryFeesBadlyInformed.Text";  					break;    				case OpenCbsPackageSaveExceptionEnum.NumberOfInstallmentBadlyInformed:  					returned = "PackageExceptionNumberOfInstallmentBadlyInformed.Text";  					break;    				case OpenCbsPackageSaveExceptionEnum.AmountBadlyInformed:  					returned = "PackageExceptionAmountBadlyInformed.Text";  					break;    				case OpenCbsPackageSaveExceptionEnum.ExoticProductIsBad:  					returned = "PackageExceptionExoticProductIsBad.Text";  					break;    				case OpenCbsPackageSaveExceptionEnum.ExoticProductIsNull:  					returned = "PackageExceptionExoticProductIsNull.Text";  					break;    				case OpenCbsPackageSaveExceptionEnum.ExoticInstallmentIsNull:  					returned = "PackageExceptionExoticInstallmentIsNull.Text";  					break;    				case OpenCbsPackageSaveExceptionEnum.ExoticInstallmentIsBad:  					returned = "PackageExceptionExoticInstallmentIsBad.Text";  					break;    				case OpenCbsPackageSaveExceptionEnum.ExoticProductContainsNoInstallment:  					returned = "PackageExceptionExoticProductContainsNoInstallment.Text";  					break;                    case OpenCbsPackageSaveExceptionEnum.ExoticProductNameAlreadyExist:  					returned = "PackageExceptionExoticProductNameAlreadyExist.Text";                      break;                    case OpenCbsPackageSaveExceptionEnum.LoanCycleNameAlreadyExists:                      returned = "PackageExceptionAmountCycleStockNameAlreadyExist.Text";                      break;    				case OpenCbsPackageSaveExceptionEnum.NameAlreadyExist:  					returned = "PackageExceptionNameAlreadyExist.Text";                      break;                    case OpenCbsPackageSaveExceptionEnum.AmountCycleStockIsNull:                      returned = "PackageExceptionAmountCycleStockIsNull.Text";                      break;                    case OpenCbsPackageSaveExceptionEnum.AmountCycleStockIsBad:                      returned = "PackageExceptionAmountCycleStockIsBad.Text";                      break;                    case OpenCbsPackageSaveExceptionEnum.InstallmentTypeNameAlreadyExist:                      returned = "PackageExceptionInstallmentTypeNameAlreadyExist.Text";                      break;                    case OpenCbsPackageSaveExceptionEnum.InstallmentTypeValuesAlreadyExist:                      returned = "PackageExceptionInstallmentTypeValuesAlreadyExist.Text";                      break;                    case OpenCbsPackageSaveExceptionEnum.InstallmentTypeValuesAreUsed:                      returned = "PackageExceptionInstallmentTypeValuesAreUsed.Text";                      break;                    case OpenCbsPackageSaveExceptionEnum.ExoticProductSumInIncorrect:                      returned = "PackageExceptionExoticProductInIncorrect.Text";                      break;                    case OpenCbsPackageSaveExceptionEnum.GuarantedAmountBadlyInformed:                      returned = "PackageExceptionGuarantedAmountBadlyInformed.Text";                      break;                    case OpenCbsPackageSaveExceptionEnum.GuarantedFeesBadlyInformed:                      returned = "PackageExceptionGuarantedFeesBadlyInformed.Text";                      break;                    case OpenCbsPackageSaveExceptionEnum.CodeIsEmpty:                      returned = "PackageExceptionProductCodeIsEmpty.Text";                      break;                    case OpenCbsPackageSaveExceptionEnum.CurrencyIsEmpty:                      returned = "CurrencyIsEmpty.Text";                      break;                    case OpenCbsPackageSaveExceptionEnum.CurrencyMisMatch:                      returned = "CurrencyMisMatch.Text";                      break;                  case OpenCbsPackageSaveExceptionEnum.ClientTypeIsEmpty:  			        returned = "ClientTypeIsEmpty.Text";                      break;                  case OpenCbsPackageSaveExceptionEnum.CompulsorySavingSettingsEmpty:                      returned = "CompulsorySavingSettingsEmpty.Text";                      break;                  case OpenCbsPackageSaveExceptionEnum.CycleParametersAreNotFilled:  			        returned = "CycleParametersAreNotFilled.Text";  			        break;                  case  OpenCbsPackageSaveExceptionEnum.CycleParametersHaveBeenFilledIncorrectly:  			        returned = "CycleParametersAreWrong.Text";                      break;                  case OpenCbsPackageSaveExceptionEnum.AmountCanNotBeZero:  			        returned = "AmountCanNotBeZero.Text";                      break;                  case OpenCbsPackageSaveExceptionEnum.MaturityCanNotBeZero:  			        returned = "MaturityCanNotBeZero.Text";                      break;                  case OpenCbsPackageSaveExceptionEnum.InsuranceBadlyFilled:  			        returned = "InsuranceBadlyFilled.Text";                      break;                  case OpenCbsPackageSaveExceptionEnum.LOCAmountHaveBeenFilledIncorrectly:  			        returned = "LOCAmountHaveBeenFilledIncorrectly.Text";                      break;                  case OpenCbsPackageSaveExceptionEnum.LOCMaturityHaveBeenFilledIncorrectly:  			        returned = "LOCMaturityHaveBeenFilledIncorrectly.Text";                      break;                  case OpenCbsPackageSaveExceptionEnum.LOCFieldsAreNotFilled:  			        returned = "LOCFieldsAreNotFilled.Text";                      break;                  case OpenCbsPackageSaveExceptionEnum.CycleAlreadyExists:                      returned = "AddEntryFeeCycleError.Text";  			        break;                  case OpenCbsPackageSaveExceptionEnum.GracePeriodOfLateFeesIsNotFilled:  			        returned = "GracePeriodOfLateFeesIsNotFilled.Text";                      break;  			}
Missing Default,OpenCBS.ExceptionsHandler,OpenCbsProjectSaveException,C:\repos\PavelBastov_opencbs\Src\OpenCBS.ExceptionsHandler\Exceptions\ProjectExceptions\OpenCbsProjectSaveException.cs,FindException,The following switch statement is missing a default case: switch (exceptionId)              {                  case OpenCbsProjectSaveExceptionEnum.CodeIsEmpty:                      returned = "ProjectExceptionCodeIsNull.Text";                      break;                  case OpenCbsProjectSaveExceptionEnum.NameIsEmpty:                      returned = "ProjectExceptionNameIsNull.Text";                      break;                  case OpenCbsProjectSaveExceptionEnum.AimIsEmpty:                      returned = "ProjectExceptionAimIsNull.Text";                      break;                  case OpenCbsProjectSaveExceptionEnum.ClientIsEmpty:                      returned = "ProjectExceptionClientIsNull.Text";                      break;                  case OpenCbsProjectSaveExceptionEnum.BeginDateEmpty:                      returned = "ProjectExceptionBeginDateEmpty.Text";                      break;                  case OpenCbsProjectSaveExceptionEnum.CAIsBad:                      returned = "ProjectExceptionCAIsBad.Text";                      break;                  case OpenCbsProjectSaveExceptionEnum.FinancialPlanAmountIsBad:                      returned = "ProjectExceptionFinancialPlanAmountIsBad.Text";                      break;                  case OpenCbsProjectSaveExceptionEnum.FinancialTotalPlanAmountIsBad:                      returned = "ProjectExceptionFinancialTotalPlanAmountIsBad.Text";                      break;                  case OpenCbsProjectSaveExceptionEnum.CACannotBeNullInFollowUp:                      returned = "ProjectExceptionCACannotBeNullInFollowUp.Text";                      break;              }
Missing Default,OpenCBS.ExceptionsHandler,OpenCbsSavingProductException,C:\repos\PavelBastov_opencbs\Src\OpenCBS.ExceptionsHandler\Exceptions\SavingExceptions\OpenCbsSavingProductException.cs,FindException,The following switch statement is missing a default case: switch (exceptionId)              {                  case OpenCbsSavingProductExceptionEnum.NameIsEmpty:                      returned = "SavingProductNameIsEmpty.Text";                      break;                    case OpenCbsSavingProductExceptionEnum.DuplicateProductName:                      returned = "SavingProductDuplicateProductName.Text";                      break;                    case OpenCbsSavingProductExceptionEnum.DuplicateProductCode:                      returned = "SavingProductDuplicateProductCode.Text";                      break;                    case OpenCbsSavingProductExceptionEnum.BalanceIsInvalid:                      returned = "SavingProductBalanceIsInvalid.Text";                      break;                    case OpenCbsSavingProductExceptionEnum.InitialAmountIsInvalid:                      returned = "SavingProductInitialAmountIsInvalid.Text";                      break;                    case OpenCbsSavingProductExceptionEnum.WithdrawAmountIsInvalid:                      returned = "SavingProductWithdrawAmountIsInvalid.Text";                      break;                    case OpenCbsSavingProductExceptionEnum.DepositAmountIsInvalid:                      returned = "SavingProductDepositAmountIsInvalid.Text";                      break;                    case OpenCbsSavingProductExceptionEnum.InterestRateMinMaxIsInvalid:                      returned = "SavingProductInterestRateMinMaxIsInvalid.Text";                      break;                    case OpenCbsSavingProductExceptionEnum.DepositMinAmountIsInvalid:                      returned = "SavingProductDepositMinAmountIsInvalid.Text";                      break;                    case OpenCbsSavingProductExceptionEnum.InterestRateIsInvalid:                      returned = "SavingProductInterestRateIsInvalid.Text";                      break;                    case OpenCbsSavingProductExceptionEnum.InterestRateMinIsInvalid:                      returned = "SavingProductInterestRateMinMaxIsInvalid.Text";                      break;                    case OpenCbsSavingProductExceptionEnum.WithdrawMinAmountIsInvalid:                      returned = "SavingProductWithdrawMinAmountIsInvalid.Text";                      break;                    case OpenCbsSavingProductExceptionEnum.InitialAmountMinIsInvalid:                      returned = "SavingProductInitialAmountMinIsInvalid.Text";                      break;                    case OpenCbsSavingProductExceptionEnum.InitialAmountMinMaxIsInvalid:                      returned = "SavingProductInitialAmountMinMaxIsInvalid.Text";                      break;                    case OpenCbsSavingProductExceptionEnum.InitialAmountMaxNotInBalance:                      returned = "SavingProductInitialAmountMaxNotInBalance.Text";                      break;                    case OpenCbsSavingProductExceptionEnum.InitialAmountMinNotInBalance:                      returned = "SavingProductInitialAmountMinNotInBalance.Text";                      break;                    case OpenCbsSavingProductExceptionEnum.InterestsFrequencyIsInvalid:                      returned = "SavingProductInterestsFrequencyIsInvalid.Text";                      break;                    case OpenCbsSavingProductExceptionEnum.InterestsBaseIsInvalid:                      returned = "SavingProductInterestsBaseIsInvalid.Text";                      break;                    case OpenCbsSavingProductExceptionEnum.CurrencyIsEmpty:                      returned = "CurrencyIsEmptyForSavingProduct.Text";                      break;                    case OpenCbsSavingProductExceptionEnum.ClientTypeIsInvalid:                      returned = "ClientTypeIsEmpty.Text";                      break;                    case OpenCbsSavingProductExceptionEnum.CalculAmountBaseIsNull:                      returned = "SavingProductCalculAmountBaseIsNull.Text";                      break;                    case OpenCbsSavingProductExceptionEnum.InterestBaseIncompatibleFrequency:                      returned = "SavingProductInterestBaseIncompatibleFrequency.Text";                      break;                    case OpenCbsSavingProductExceptionEnum.EntryFeesMinMaxIsInvalid:                      returned = "SavingProductEntryFeesMinMaxIsInvalid.Text";                      break;                    case OpenCbsSavingProductExceptionEnum.EntryFeesIsInvalid:                      returned = "SavingProductEntryFeesIsInvalid.Text";                      break;                    case OpenCbsSavingProductExceptionEnum.NumberPeriodIsInvalid:                      returned = "SavingProductNumberPeriodIsInvalid.Text";                      break;                    case OpenCbsSavingProductExceptionEnum.NumberPeriodMinIsInvalid:                      returned = "SavingProductNumberPeriodMinIsInvalid.Text";                      break;                    case OpenCbsSavingProductExceptionEnum.NumberPeriodMinMaxIsInvalid:                      returned = "SavingProductNumberPeriodMinMaxIsInvalid.Text";                      break;                    case OpenCbsSavingProductExceptionEnum.WithdrawFeesTypeEmpty:                      returned = "SavingProductWithdrawFeesTypeEmpty.Text";                      break;                    case OpenCbsSavingProductExceptionEnum.FlatWithdrawFeesIsInvalid:                      returned = "SavingProductFlatWithdrawFeesIsInvalid.Text";                      break;                    case OpenCbsSavingProductExceptionEnum.FlatWithdrawFeesMinIsInvalid:                      returned = "SavingProductFlatWithdrawFeesMinIsInvalid.Text";                      break;                    case OpenCbsSavingProductExceptionEnum.FlatWithdrawFeesMinMaxIsInvalid:                      returned = "SavingProductFlatWithdrawFeesMinMaxIsInvalid.Text";                      break;                    case OpenCbsSavingProductExceptionEnum.RateWithdrawFeesIsInvalid:                      returned = "SavingProductRateWithdrawFeesIsInvalid.Text";                      break;                    case OpenCbsSavingProductExceptionEnum.RateWithdrawFeesMinIsInvalid:                      returned = "SavingProductRateWithdrawFeesMinIsInvalid.Text";                      break;                    case OpenCbsSavingProductExceptionEnum.RateWithdrawFeesMinMaxIsInvalid:                      returned = "SavingProductRateWithdrawFeesMinMaxIsInvalid.Text";                      break;                    case OpenCbsSavingProductExceptionEnum.TransferAmountIsInvalid:                      returned = "SavingProductTransferAmountIsInvalid.Text";                      break;                    case OpenCbsSavingProductExceptionEnum.TransferAmountMinIsInvalid:                      returned = "SavingProductTransferAmountMinIsInvalid.Text";                      break;                    case OpenCbsSavingProductExceptionEnum.WithdrawalFeesMinMaxIsInvalid:                      returned = "SavingProductWithdrawalFeesMinMaxIsInvalid.Text";                      break;                    case OpenCbsSavingProductExceptionEnum.WithdrawalFeesIsInvalid:                      returned = "SavingProductWithdrawalFeesIsInvalid.Text";                      break;                    case OpenCbsSavingProductExceptionEnum.WithdrawalFeesMinIsInvalid:                      returned = "SavingProductWithdrawalFeesMinIsInvalid.Text";                      break;                    case OpenCbsSavingProductExceptionEnum.CodeIsEmpty:                      returned = "SavingProductCodeIsEmpty.Text";                      break;                    case OpenCbsSavingProductExceptionEnum.TransferFeesTypeEmpty:                      returned = "SavingProductTransferFeesTypeEmpty.Text";                      break;                    case OpenCbsSavingProductExceptionEnum.FlatTransferFeesIsInvalid:                      returned = "SavingProductFlatTransferFeesIsInvalid.Text";                      break;                    case OpenCbsSavingProductExceptionEnum.FlatTransferFeesMinIsInvalid:                      returned = "SavingProductFlatTransferFeesMinIsInvalid.Text";                      break;                    case OpenCbsSavingProductExceptionEnum.FlatTransferFeesMinMaxIsInvalid:                      returned = "SavingProductFlatTransferFeesMinMaxIsInvalid.Text";                      break;                    case OpenCbsSavingProductExceptionEnum.RateTransferFeesIsInvalid:                      returned = "SavingProductRateTransferFeesIsInvalid.Text";                      break;                    case OpenCbsSavingProductExceptionEnum.RateTransferFeesMinIsInvalid:                      returned = "SavingProductRateTransferFeesMinIsInvalid.Text";                      break;                    case OpenCbsSavingProductExceptionEnum.RateTransferFeesMinMaxIsInvalid:                      returned = "SavingProductRateTransferFeesMinMaxIsInvalid.Text";                      break;                    case OpenCbsSavingProductExceptionEnum.InterBranchFlatTransferFeesIsInvalid:                      returned = "SavingProductInterBranchFlatTransferFeesIsInvalid";                      break;                    case OpenCbsSavingProductExceptionEnum.InterBranchFlatTransferFeesMinIsInvalid:                      returned = "SavingProductInterBranchFlatTransferFeesMinIsInvalid";                      break;                    case OpenCbsSavingProductExceptionEnum.InterBranchFlatTransferFeesMinMaxIsInvalid:                      returned = "SavingProductInterBranchFlatTransferFeesMinMaxIsInvalid";                      break;                    case OpenCbsSavingProductExceptionEnum.InterBranchRateTransferFeesIsInvalid:                      returned = "SavingProductInterBranchRateTransferFeesIsInvalid";                      break;                    case OpenCbsSavingProductExceptionEnum.InterBranchRateTransferFeesMinIsInvalid:                      returned = "SavingProductInterBranchRateTransferFeesMinIsInvalid";                      break;                    case OpenCbsSavingProductExceptionEnum.InterBranchRateTransferFeesMinMaxIsInvalid:                      returned = "SavingProductInterBranchRateTransferFeesMinMaxIsInvalid";                      break;                    case OpenCbsSavingProductExceptionEnum.LoanAmountIsInvalid:                      returned = "SavingProductLoanAmountIsInvalid.Text";                      break;                    case OpenCbsSavingProductExceptionEnum.LoanAmountMinIsInvalid:                      returned = "SavingProductLoanAmountMinIsInvalid.Text";                      break;                    case OpenCbsSavingProductExceptionEnum.LoanAmountMinMaxIsInvalid:                      returned = "SavingProductLoanAmountMinMaxIsInvalid.Text";                      break;                    case OpenCbsSavingProductExceptionEnum.DepositFeesIsInvalid:                      returned = "SavingProductDepositFeesIsInvalid.Text";                      break;                    case OpenCbsSavingProductExceptionEnum.DepositFeesMinIsInvalid:                      returned = "SavingProductDepositFeesMinIsInvalid.Text";                      break;                    case OpenCbsSavingProductExceptionEnum.CloseFeesIsInvalid:                      returned = "SavingProductCloseFeesIsInvalid.Text";                      break;                    case OpenCbsSavingProductExceptionEnum.CloseFeesMinIsInvalid:                      returned = "SavingProductCloseFeesMinIsInvalid.Text";                      break;                    case OpenCbsSavingProductExceptionEnum.ManagementFeesIsInvalid:                      returned = "SavingProductManagementFeesIsInvalid.Text";                      break;                    case OpenCbsSavingProductExceptionEnum.ManagementFeesMinIsInvalid:                      returned = "SavingProductManagementFeesMinIsInvalid.Text";                      break;                  case OpenCbsSavingProductExceptionEnum.PeriodicityIsEmpty:                      returned = "SavingProductPeriodicityIsEmpty.Text";                      break;                  case OpenCbsSavingProductExceptionEnum.OverdraftFeesIsInvalid:                      returned = "OverdraftFeesIsInvalid.Text";                      break;                  case OpenCbsSavingProductExceptionEnum.AgioFeesIsInvalid:                      returned = "AgioFeesIsInvalid.Text";                      break;                  case OpenCbsSavingProductExceptionEnum.ChequeDepositIsInvalid:                      returned = "ChequeDepositIsInvalid";                      break;                  case OpenCbsSavingProductExceptionEnum.ChequeDepositFeesIsInvalid:                      returned = "ChequeDepositFeesIsInvalid";                      break;                  case OpenCbsSavingProductExceptionEnum.ReopenFeesIsInvalid:                      returned = "ReopenFeesIsInvalid";                      break;                  case OpenCbsSavingProductExceptionEnum.ReopenFeesMinIsInvalid:                      returned = "ReopenFeesMinIsInvalid";                      break;                  case OpenCbsSavingProductExceptionEnum.PostingFrequencyIsInvalid:                      returned = "PostingFrequencyIsInvalid.Text";                      break;                  case OpenCbsSavingProductExceptionEnum.PeriodicityIsNotSet:                      returned = "PeriodicityIsNotSet.Text";                      break;              }
Missing Default,OpenCBS.ExceptionsHandler,OpenCbsTiersSaveException,C:\repos\PavelBastov_opencbs\Src\OpenCBS.ExceptionsHandler\Exceptions\Tiers\OpenCbsTiersSaveException.cs,FindException,The following switch statement is missing a default case: switch(exceptionId)  			{  				case OpenCbsTiersSaveExceptionEnum.TiersIsNull:  					returned = "OTE1.Text";  					break;    				case OpenCbsTiersSaveExceptionEnum.EconomicActivityIsNull:  					returned = "OTE2.Text";  					break;    				case OpenCbsTiersSaveExceptionEnum.DistrictIsNull:  					returned = "OTE3.Text";  					break;    				case OpenCbsTiersSaveExceptionEnum.FirstNameIsNull:  					returned = "OTE4.Text";  					break;    				case OpenCbsTiersSaveExceptionEnum.SexIsNull:  					returned = "OTE5.Text";  					break;    				case OpenCbsTiersSaveExceptionEnum.IdentificationDataIsNull:  					returned = "OTE6.Text";  					break;    				case OpenCbsTiersSaveExceptionEnum.LastNameIsEmpty:  					returned = "OTE7.Text";  					break;    				case OpenCbsTiersSaveExceptionEnum.CityIsNull:  					returned = "OTE8.Text";  					break;    				case OpenCbsTiersSaveExceptionEnum.SecondaryDistrictIsNull:  					returned = "OTE10.Text";  					break;    				case OpenCbsTiersSaveExceptionEnum.SecondaryCityIsNull:  					returned = "OTE11.Text";  					break;    				case OpenCbsTiersSaveExceptionEnum.SecondaryCommentsIsNull:  					returned = "OTE12.Text";  					break;    				case OpenCbsTiersSaveExceptionEnum.DistrictIsBad:  					returned = "OTE13.Text";  					break;    				case OpenCbsTiersSaveExceptionEnum.SecondaryDistrictIsBad:  					returned = "OTE14.Text";  					break;    				case OpenCbsTiersSaveExceptionEnum.TiersIsGroup:  					returned = "OTE15.Text";  					break;    				case OpenCbsTiersSaveExceptionEnum.PersonAlreadyInThisGroup:  					returned = "OTE16.Text";  					break;    				case OpenCbsTiersSaveExceptionEnum.PersonIsActive:  					returned = "OTE17.Text";  					break;    				case OpenCbsTiersSaveExceptionEnum.PersonIsALeader:  					returned = "OTE18.Text";  					break;    				case OpenCbsTiersSaveExceptionEnum.NameIsEmpty:  					returned = "OTE19.Text";  					break;    				case OpenCbsTiersSaveExceptionEnum.LeaderIsEmpty:  					returned = "OTE20.Text";  					break;    				case OpenCbsTiersSaveExceptionEnum.NbOfDependantsIsBadlyInformed:  					returned = "OTE21.Text";  					break;    				case OpenCbsTiersSaveExceptionEnum.NbOfChildrensIsBadlyInformed:  					returned = "OTE22.Text";  					break;    				case OpenCbsTiersSaveExceptionEnum.NbOfChidrensWithBasicEducationisBadlyInformed:  					returned = "OTE23.Text";  					break;    				case OpenCbsTiersSaveExceptionEnum.ExperienceIsBadlyInformed:  					returned = "OTE24.Text";  					break;    				case OpenCbsTiersSaveExceptionEnum.NbOfPeopleWorkingWithinIsBadlyInformed:  					returned = "OTE25.Text";  					break;    				case OpenCbsTiersSaveExceptionEnum.OtherOrganizationAmountIsBadlyInformed:  					returned = "OTE26.Text";  					break;    				case OpenCbsTiersSaveExceptionEnum.OtherOrganizationDebtsIsBadlyInformed:  					returned = "OTE27.Text";  					break;    				case OpenCbsTiersSaveExceptionEnum.HouseSizeIsBadlyInformed:  					returned = "OTE28.Text";  					break;    				case OpenCbsTiersSaveExceptionEnum.HouseTimeLivingInIsBadlyInformed:  					returned = "OTE29.Text";  					break;    				case OpenCbsTiersSaveExceptionEnum.LandPlotSizeIsBadlyInformed:  					returned = "OTE30.Text";  					break;    				case OpenCbsTiersSaveExceptionEnum.LivestockNumberIsBadlyInformed:  					returned = "OTE31.Text";  					break;    				case OpenCbsTiersSaveExceptionEnum.MonthlyIncomeIsBadlyInformed:  					returned = "OTE32.Text";  					break;    				case OpenCbsTiersSaveExceptionEnum.MonthlyExpenditureIsBadlyInformed:  					returned = "OTE33.Text";  					break;    				case OpenCbsTiersSaveExceptionEnum.NoEnoughPersonsInThisGroup:  					returned = "OTE34.Text";  					break;                    case OpenCbsTiersSaveExceptionEnum.IdentificationDataAlreadyUsed:                      returned = "OTE35.Text";                      break;                    case OpenCbsTiersSaveExceptionEnum.NameAlreadyUsedInDistrict:                      returned = "OTE36.Text";                      break;                    case OpenCbsTiersSaveExceptionEnum.CommentsNeedFullIfBadClient:                      returned = "OTE37.Text";                      break;                    case OpenCbsTiersSaveExceptionEnum.LoanCycleIsEmpty:                      returned = "OTE38.Text";                      break;                    case OpenCbsTiersSaveExceptionEnum.IdentificationDataDoesntMatch:                      returned = "OTE40.Text";                      break;                    case OpenCbsTiersSaveExceptionEnum.LoanOfficerIsEmpty:  			        returned = "OTE41.Text";  			        break;                    case OpenCbsTiersSaveExceptionEnum.WrongIdPattern:                      returned = "WrongIDPattern.Text";                      break;                  case OpenCbsTiersSaveExceptionEnum.BirthDateIsWrong:  			        returned = "BirthDateIsWrong.Text";  			        break;                    case OpenCbsTiersSaveExceptionEnum.PersonalBankBicCodeIsWrong:                      returned =  "PersonalBankBicCodeIsWrong.Text";                      break;                    case OpenCbsTiersSaveExceptionEnum.BusinessBankBicCodeIsWrong:                      returned = "BusinessBankBicCodeIsWrong.Text";                      break;                    case OpenCbsTiersSaveExceptionEnum.PersonalBankIbanIsWrong:                      returned = "PersonalBankIbanIsWrong.Text";                      break;                    case OpenCbsTiersSaveExceptionEnum.BusinessBankIbanIsWrong:                      returned = "BusinessBankIbanIsWrong.Text";                      break;                  case OpenCbsTiersSaveExceptionEnum.PersonIsInTheGroup:                      returned = "PersonIsInTheGroup.Text";                      break;                    case OpenCbsTiersSaveExceptionEnum.BranchIsEmpty:  			        returned = "BranchIsEmpty";  			        break;                    case OpenCbsTiersSaveExceptionEnum.TooMuchPersonsInThisGroup:                      returned = "TooMuchPersonsInThisGroup.Text";                      break;                    case OpenCbsTiersSaveExceptionEnum.AgeIsNotInRange:  			        returned = "AgeIsNotInRange.Text";  			        break;                    case OpenCbsTiersSaveExceptionEnum.GuarantorMaxLoansCoveredExceed:  			        returned = "GuarantorMaxLoansCoveredExceed.Text";                      break;                    case OpenCbsTiersSaveExceptionEnum.IncorrectZipCodeFormat:  			        returned = "IncorrectZipCodeFormat.Text";                      break;                    case OpenCbsTiersSaveExceptionEnum.IncorrectCityPhoneFormat:  			        returned = "IncorrectCityPhoneFormat.Text";                      break;                    case OpenCbsTiersSaveExceptionEnum.IncorrectMobilePhoneFormat:                      returned = "IncorrectMobilePhoneFormat.Text";                      break;  			}
Missing Default,OpenCBS.ExceptionsHandler,OpenCbsUserDeleteException,C:\repos\PavelBastov_opencbs\Src\OpenCBS.ExceptionsHandler\Exceptions\UserExceptions\OpenCbsUserDeleteException.cs,FindException,The following switch statement is missing a default case: switch(exceptionId)  			{  				case OpenCbsUserDeleteExceptionEnum.UserIsNull:  					returned = "OUE1.Text";  					break;    				case OpenCbsUserDeleteExceptionEnum.AdministratorUser:  					returned = "OUE2.Text";  					break;                    case OpenCbsUserDeleteExceptionEnum.UserHasContract:                      returned = "OUE9.Text";                      break;                    case OpenCbsUserDeleteExceptionEnum.UserHasTeller:  			        returned = "OUE10.Text";                      break;  			}
Missing Default,OpenCBS.ExceptionsHandler.Exceptions.AccountExceptions,OpenCbsAccountException,C:\repos\PavelBastov_opencbs\Src\OpenCBS.ExceptionsHandler\Exceptions\AccountExceptions\OpenCbsAccountException.cs,_FindException,The following switch statement is missing a default case: switch(exceptionId)  			{  				case OpenCbsAccountExceptionsEnum.AccountIsNull:  					returned = "AccountExceptionAccountIsNull.Text";  					break;    				case OpenCbsAccountExceptionsEnum.LabelIsNull:  					returned = "AccountExceptionLabelIsNull.Text";  					break;  					  				case OpenCbsAccountExceptionsEnum.LocalNumberIsNull:  					returned = "AccountExceptionLocalNumberIsNull.Text";  					break;  					  				case OpenCbsAccountExceptionsEnum.NumberIsNull:  					returned = "AccountExceptionNumberIsNull.Text";  					break;    				case OpenCbsAccountExceptionsEnum.IncorrectAmountFormat:  					returned = "AccountExceptionIncorrectAmountFormat.Text";  					break;    				case OpenCbsAccountExceptionsEnum.MovementSetUnbalanced:  					returned = "AccountExceptionMovementSetUnbalanced.Text";  					break;    				case OpenCbsAccountExceptionsEnum.ProvisioningRateNbOfDaysMaxEmpty:  					returned = "ProvisioningRateNbOfDaysMaxEmpty.Text";  					break;    				case OpenCbsAccountExceptionsEnum.ProvisioningRateNbOfDaysMinEmpty:  					returned = "ProvisioningRateNbOfDaysMinEmpty.Text";  					break;    				case OpenCbsAccountExceptionsEnum.ProvisioningRateRateEmpty:  					returned = "ProvisioningRateRateEmpty.Text";  					break;                  case OpenCbsAccountExceptionsEnum.LoanScaleTableMin:                      returned = "LoanScaleTableMin.Text";                      break;                  case OpenCbsAccountExceptionsEnum.LoanScaleTableMax:                      returned = "LoanScaleTableMax.Text";                      break;                  case OpenCbsAccountExceptionsEnum.CurrencyAlreadyExists:                      returned = "CurrencyAlreadyExists.Text";                      break;                  case OpenCbsAccountExceptionsEnum.MaximumCurrencyLimitReached:                      returned = "MaximumCurrencyLimitReached.Text";                      break;                  case OpenCbsAccountExceptionsEnum.CurrencyIsEmpty:                      returned = "AccountExceptionCurrencyIsNull.Text.Text";                      break;                  case OpenCbsAccountExceptionsEnum.DescriptionIsEmpty:                      returned = "AccountExceptionDescriptionIsEmpty.Text";                      break;                  case OpenCbsAccountExceptionsEnum.AccountCannotBeDeleted:                      returned = "AccountExceptionCannotBeDeleted.Text";                      break;                  case OpenCbsAccountExceptionsEnum.ParentAccountDoesntExists:                      returned = "AccountExceptionParentAccountDoesntExists.Text";                      break;                  case OpenCbsAccountExceptionsEnum.ParentAccountNotSameDescription:                      returned = "AccountExceptionParentAccountNotSameDescription.Text";                      break;                  case OpenCbsAccountExceptionsEnum.ParentAccountIsInvalid:                      returned = "AccountExceptionParentAccountIsInvalid.Text";                      break;                  case OpenCbsAccountExceptionsEnum.EqualAccounts :  			        returned = "ManualEntrySameAccount.Text";  			        break;                  case OpenCbsAccountExceptionsEnum.AccountIsUsed :  			        returned = "AccountExceptionIsUsed.Text";  			        break;                  case OpenCbsAccountExceptionsEnum.ImportIdExist:  			        returned = "AccountImportIdExist.Text";                      break;                  case OpenCbsAccountExceptionsEnum.ImportNumbersExist:                      returned = "AccountImportNumbersExist.Text";                      break;                  case OpenCbsAccountExceptionsEnum.DuplicatedAccount:  			        returned = "DuplicatedAccount.Text";                      break;  			}
Missing Default,OpenCBS.ExceptionsHandler.Exceptions.FundingLineExceptions,OpenCbsCorporateException,C:\repos\PavelBastov_opencbs\Src\OpenCBS.ExceptionsHandler\Exceptions\FundingLineExceptions\OpenCbsCorporateException.cs,_FindException,The following switch statement is missing a default case: switch (exception)              {                  case OpenCbsCorporateExceptionEnum.CodeIsEmpty:                      returned = "OpenCbsCorporateExceptionCodeIsEmpty.Text";                      break;                    case OpenCbsCorporateExceptionEnum.NameIsEmpty:                      returned = "OpenCbsCorporateExceptionNameIsEmpty.Text";                      break;                  case OpenCbsCorporateExceptionEnum.CityIsEmpty:                      returned = "OpenCbsCorporateExceptionCityIsEmpty.Text";                      break;                  case OpenCbsCorporateExceptionEnum.ProvinceIsEmpty:                      returned = "OpenCbsCorporateExceptionProvinceIsEmpty.Text";                      break;                  case OpenCbsCorporateExceptionEnum.DistrictIsEmpty:                      returned = "OpenCbsCorporateExceptionDistrictIsEmpty.Text";                      break;                  case OpenCbsCorporateExceptionEnum.EmployeeIsFalseFormat:                      returned = "OpenCbsCorporateExceptionEmployeeIsFalseFormat.Text";                      break;                  case OpenCbsCorporateExceptionEnum.VolunteerIsFalseFormat:                      returned = "OpenCbsCorporateExceptionVolunteerIsFalseFormat.Text";                      break;                    case OpenCbsCorporateExceptionEnum.BranchIsEmpty:                      returned = "BranchIsEmpty";                      break;              }
Missing Default,OpenCBS.ExceptionsHandler.Exceptions.FundingLineExceptions,OpenCbsFundingLineEventException,C:\repos\PavelBastov_opencbs\Src\OpenCBS.ExceptionsHandler\Exceptions\FundingLineExceptions\OpenCbsFundingLineEventException.cs,_FindException,The following switch statement is missing a default case: switch (exception)              {                  case OpenCbsFundingLineEventExceptionEnum.CodeIsEmpty:                      returned = "OpenCbsFundingLineEventExceptionCodeIsEmpty.Text";                      break;                    case OpenCbsFundingLineEventExceptionEnum.NameIsEmpty:                      returned = "OpenCbsFundingLineEventExceptionNameIsEmpty.Text";                      break;                      case OpenCbsFundingLineEventExceptionEnum.AmountIsEmpty:                      returned = "OpenCbsFundingLineEventExceptionAmountIsEmpty.Text";                      break;                    case OpenCbsFundingLineEventExceptionEnum.AmountIsLessZero:                      returned = "OpenCbsFundingLineEventExceptionAmountIsLessZero.Text";                      break;                  case OpenCbsFundingLineEventExceptionEnum.DirectionIsEmpty:                      returned = "OpenCbsFundingLineEventExceptionDirectionIsEmpty.Text";                      break;                  case OpenCbsFundingLineEventExceptionEnum.AmountIsTaller:                      returned = "OpenCbsFundingLineEventExceptionAmountIsTaller.Text";                      break;                    case OpenCbsFundingLineEventExceptionEnum.AmountIsBigger:                      returned = "OpenCbsFundingLineEventExceptionAmountIsBigger.Text";                      break;                  case OpenCbsFundingLineEventExceptionEnum.CommitmentFinancialIsNotEnough:                      returned = "OpenCbsFundingLineEventExceptionCommitmentFinancialIsNotEnough.Text";                      break;                    case OpenCbsFundingLineEventExceptionEnum.AmountIsNonCompliant:                      returned = "OpenCbsFundingLineEventExceptionAmountIsNonCompliant.Text";                      break;              }
Missing Default,OpenCBS.ExceptionsHandler.Exceptions.FundingLineExceptions,OpenCbsFundingLineException,C:\repos\PavelBastov_opencbs\Src\OpenCBS.ExceptionsHandler\Exceptions\FundingLineExceptions\OpenCbsFundingLineException.cs,_FindException,The following switch statement is missing a default case: switch (exception)              {                  case OpenCbsFundingLineExceptionEnum.CodeIsEmpty:                      returned = "OpenCbsFundingLineExceptionCodeIsEmpty.Text";                      break;                  case OpenCbsFundingLineExceptionEnum.NameIsEmpty:                      returned = "OpenCbsFundingLineExceptionNameIsEmpty.Text";                      break;                  case OpenCbsFundingLineExceptionEnum.BeginDateGreaterEndDate:                      returned = "OpenCbsFundingLineExceptionBeginDateGreaterEndDate.Text";                      break;                  case OpenCbsFundingLineExceptionEnum.BadFundingLineID:                      returned = "OpenCbsFundingLineExceptionBadFundingLineId.Text";                      break;                  case OpenCbsFundingLineExceptionEnum.FundingLineNameExists:                      returned = "OpenCbsFundingLineExceptionFundingLineNameExists.Text";                      break;                  case OpenCbsFundingLineExceptionEnum.CurrencyIsEmpty:                      returned = "CurrencyIsEmpty.Text";                      break;              }
Missing Default,OpenCBS.ExceptionsHandler.Exceptions.SavingExceptions,OpenCbsSavingException,C:\repos\PavelBastov_opencbs\Src\OpenCBS.ExceptionsHandler\Exceptions\SavingExceptions\OpenCbsSavingException.cs,_FindException,The following switch statement is missing a default case: switch (exceptionId)              {                  case OpenCbsSavingExceptionEnum.BalanceIsInvalid:                      returned = "SavingBalanceIsInvalid.Text";                      break;                    case OpenCbsSavingExceptionEnum.DepositAmountIsInvalid:                      returned = "SavingDepositAmountIsInvalid.Text";                      break;                    case OpenCbsSavingExceptionEnum.DepositDateIsInvalid:                      returned = "SavingDepositDateIsInvalid.Text";                      break;                    case OpenCbsSavingExceptionEnum.InitialAmountIsInvalid:                      returned = "SavingInitialAmountIsInvalid.Text";                      break;                    case OpenCbsSavingExceptionEnum.InterestRateIsInvalid:                      returned = "SavingInterestRateIsInvalid.Text";                      break;                    case OpenCbsSavingExceptionEnum.ProductIsInvalid:                      returned = "SavingProductIsInvalid.Text";                      break;                    case OpenCbsSavingExceptionEnum.SavingContractIsNull:                      returned = "SavingContractIsNull.Text";                      break;                    case OpenCbsSavingExceptionEnum.WithdrawalDateIsInvalid:                      returned = "SavingWithdrawalDateIsInvalid.Text";                      break;                    case OpenCbsSavingExceptionEnum.WithdrawAmountIsInvalid:                      returned = "SavingWithdrawAmountIsInvalid.Text";                      break;                    case OpenCbsSavingExceptionEnum.EntryFeesIsInvalid:                      returned = "SavingEntryFeesIsInvalid.Text";                      break;                    case OpenCbsSavingExceptionEnum.ContractNotAtMaturity:                      returned = "SavingContractNotAtMaturity.Text";                      break;                    case OpenCbsSavingExceptionEnum.TransferAmountIsInvalid:                      returned = "SavingTransferAmountIsInvalid.Text";                      break;                    case OpenCbsSavingExceptionEnum.SavingsContractForTransferIdenticals:                      returned = "SavingContractForTransferIdenticals.Text";                      break;                                case OpenCbsSavingExceptionEnum.CreditTransferAccountInvalid:                      returned = "SavingCreditTransferAccountInvalid.Text";                      break;                    case OpenCbsSavingExceptionEnum.WithdrawFeesIsInvalid:                      returned = "SavingWithdrawFeesIsInvalid.Text";                      break;                    case OpenCbsSavingExceptionEnum.SavingsContractForTransferNotSameCurrncy:                      returned = "SavingContractForTransferNotSameCurrncy.Text";                      break;                    case OpenCbsSavingExceptionEnum.RolloverIsInvalid:                      returned = "SavingContractRolloverIsInvalid.Text";                      break;                    case OpenCbsSavingExceptionEnum.TransferAccountIsInvalid:                      returned = "SavingContractRolloverTransferAccountIsInvalid.Text";                      break;                    case OpenCbsSavingExceptionEnum.TransferAccountIsClosed:                      returned = "SavingContractRolloverTransferAccountIsClosed.Text";                      break;                    case OpenCbsSavingExceptionEnum.TransferAccountIsSavingDepositOrCompulsorySavings:                      returned = "SavingContractRolloverTransferAccountIsSavingDepositOrCompulsorySavings.Text";                      break;                    case OpenCbsSavingExceptionEnum.TransferAccountHasNotSameClient:                      returned = "SavingContractRolloverTransferAccountHasNotSameClient.Text";                      break;                    case OpenCbsSavingExceptionEnum.LoanIsInvalid:                      returned = "SavingContractLoanIsInvalid.Text";                      break;                    case OpenCbsSavingExceptionEnum.LoanIsClosed:                      returned = "SavingContractLoanIsClosed.Text";                      break;                    case OpenCbsSavingExceptionEnum.LoanHasNotSameClient:                      returned = "SavingContractLoanHasNotSameClient.Text";                      break;                    case OpenCbsSavingExceptionEnum.LoanHasNotSameCurrency:                      returned = "SavingContractLoanHasNotSameCurrency.Text";                      break;                    case OpenCbsSavingExceptionEnum.TransferFeesIsInvalid:                      returned = "SavingContractTransferFeesIsInvalid.Text";                      break;                    case OpenCbsSavingExceptionEnum.CompulsorySavingsLinkedToLoan:                      returned = "SavingContractCompulsorySavingsLinkedToLoan.Text";                      break;                    case OpenCbsSavingExceptionEnum.LoanDoesNotAcceptSavings:                      returned = "SavingContractLoanDoesNotAcceptSavings.Text";                      break;                    case OpenCbsSavingExceptionEnum.NoCompulsorySavings:                      returned = "SavingContractNoCompulsorySavings.Text";                      break;                    case OpenCbsSavingExceptionEnum.AmountOnCompulsorySavingsIsInvalid:                      returned = "SavingContractAmountOnCompulsorySavingsIsInvalid.Text";                      break;                    case OpenCbsSavingExceptionEnum.DepositFeesIsInvalid:                      returned = "SavingContractDepositFeesIsInvalid.Text";                      break;                    case OpenCbsSavingExceptionEnum.CloseFeesIsInvalid:                      returned = "SavingContractCloseFeesIsInvalid.Text";                      break;                    case OpenCbsSavingExceptionEnum.ManagementFeesIsInvalid:                      returned = "SavingContractManagementFeesIsInvalid.Text";                      break;                  case OpenCbsSavingExceptionEnum.AgioFeesIsInvalid:                      returned = "SavingContractAgioFeesIsInvalid.Text";                      break;                  case OpenCbsSavingExceptionEnum.SavingsEventCannotBeCanceled:                      returned = "SavingsEventCannotBeCanceled.Text";                      break;                  case OpenCbsSavingExceptionEnum.SavingsEventCommentIsEmpty:                      returned = "SavingsEventCommentIsEmpty.Text";                      break;                  case OpenCbsSavingExceptionEnum.BalanceOnCurrentSavingAccount:                      returned = "BalanceOnCurrentSavingAccount";                      break;                  case OpenCbsSavingExceptionEnum.BalanceOnCurrentSavingAccountForTransfer:                      returned = "BalanceOnCurrentSavingAccountForTransfer";                      break;                    case OpenCbsSavingExceptionEnum.CompulsorySavingsContractIsNotActive:                      returned = "CompulsorySavingsContractIsNotActive.Text";                      break;                  case  OpenCbsSavingExceptionEnum.TransferAccountHasWrongCurrency:                      returned = "TransferAccountHasWrongCurrency.Text";                      break;                  case OpenCbsSavingExceptionEnum.TransactionInvalid:                      returned = "SelectBeforeConf.Text";                      break;              }
