Implementation smell,Namespace,Class,File,Method,Description
Long Method,OpenCBS.Services,LoanServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\LoanServices.cs,Disburse,The method has 102 lines of code.
Long Method,OpenCBS.Services,LoanServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\LoanServices.cs,Repay,The method has 193 lines of code.
Long Method,OpenCBS.Services,LoanServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\LoanServices.cs,SetClientStatus,The method has 102 lines of code.
Long Method,OpenCBS.Services,LoanServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\LoanServices.cs,AddTranche,The method has 103 lines of code.
Long Method,OpenCBS.Services,LoanServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\LoanServices.cs,CancelLastEvent,The method has 342 lines of code.
Long Method,OpenCBS.Services,LoanServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\LoanServices.cs,SaveInstallmentsAndRepaymentEvents,The method has 108 lines of code.
Long Method,OpenCBS.Services,SavingProductServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\SavingProductServices.cs,ValidateSavingBookProduct,The method has 117 lines of code.
Complex Method,OpenCBS.Services,TellerServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\TellerService.cs,ValidateTeller,Cyclomatic complexity of the method is 11
Complex Method,OpenCBS.Services,ClientServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\ClientServices.cs,SecondaryAddressCorrectlyFilled,Cyclomatic complexity of the method is 8
Complex Method,OpenCBS.Services,ClientServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\ClientServices.cs,CheckPersonFilling,Cyclomatic complexity of the method is 17
Complex Method,OpenCBS.Services,ClientServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\ClientServices.cs,ValidateSolidarityGroup,Cyclomatic complexity of the method is 16
Complex Method,OpenCBS.Services,ClientServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\ClientServices.cs,ValidateVillage,Cyclomatic complexity of the method is 13
Complex Method,OpenCBS.Services,LoanServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\LoanServices.cs,SetClientStatus,Cyclomatic complexity of the method is 9
Complex Method,OpenCBS.Services,LoanServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\LoanServices.cs,AssembleRescheduling,Cyclomatic complexity of the method is 9
Complex Method,OpenCBS.Services,LoanServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\LoanServices.cs,_CheckLoanFilling,Cyclomatic complexity of the method is 18
Complex Method,OpenCBS.Services,LoanServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\LoanServices.cs,WaiveFee,Cyclomatic complexity of the method is 8
Complex Method,OpenCBS.Services,SavingProductServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\SavingProductServices.cs,ValidateSavingBookProduct,Cyclomatic complexity of the method is 45
Complex Method,OpenCBS.Services,SavingProductServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\SavingProductServices.cs,ValidateProduct,Cyclomatic complexity of the method is 19
Complex Method,OpenCBS.Services,SavingServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\SavingServices.cs,CheckTransfer,Cyclomatic complexity of the method is 9
Complex Method,OpenCBS.Services,SavingServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\SavingServices.cs,CancelLastEvent,Cyclomatic complexity of the method is 11
Complex Method,OpenCBS.Services,SavingServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\SavingServices.cs,CloseAndTransfer,Cyclomatic complexity of the method is 8
Complex Method,OpenCBS.Services,SavingServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\SavingServices.cs,ValidateSavingsContract,Cyclomatic complexity of the method is 13
Complex Method,OpenCBS.Services,ProductServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\ProductServices.cs,CheckCycleParams,Cyclomatic complexity of the method is 11
Complex Method,OpenCBS.Services,ProductServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\ProductServices.cs,CheckValueForPackageNumberOfInstallments,Cyclomatic complexity of the method is 9
Complex Method,OpenCBS.Services,ProductServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\ProductServices.cs,ParseFieldsAndCheckErrors,Cyclomatic complexity of the method is 13
Complex Method,OpenCBS.Services,ProjectServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\ProjectServices.cs,SaveProject,Cyclomatic complexity of the method is 10
Complex Method,OpenCBS.Services,UserServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\UserServices.cs,SaveUser,Cyclomatic complexity of the method is 11
Long Parameter List,OpenCBS.Services.Accounting,AccountingServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\Accounting\AccountingServices.cs,GetAccountBalance,The method has 6 parameters. Parameters: accountId' currencyId' contractId' mode' toSumParent' branchId
Long Parameter List,OpenCBS.Services.Accounting,AccountingServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\Accounting\AccountingServices.cs,FindAllBookings,The method has 6 parameters. Parameters: pAccount' pBeginDate' pEndDate' currencyId' pBookingType' pBranchId
Long Parameter List,OpenCBS.Services,BranchService,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\BranchService.cs,Update,The method has 5 parameters. Parameters: branch' previousName' previousCode' previousAddress' previousDescription
Long Parameter List,OpenCBS.Services,ClientServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\ClientServices.cs,FindTiers,The method has 8 parameters. Parameters: numbersTotalPage' numberOfRecords' query' isActive' currentlyPage' includePersons' includeGroups' includeVillages
Long Parameter List,OpenCBS.Services,ClientServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\ClientServices.cs,FindTiersCorporates,The method has 5 parameters. Parameters: onlyActive' currentlyPage' numbersTotalPage' numberOfRecords' pQuery
Long Parameter List,OpenCBS.Services,LoanServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\LoanServices.cs,Disburse,The method has 5 parameters. Parameters: pLoan' pDateToDisburse' pAlignInstallmentsDatesOnRealDisbursmentDate' pDisableFees' method
Long Parameter List,OpenCBS.Services,LoanServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\LoanServices.cs,ChangeRepaymentType,The method has 15 parameters. Parameters: loan' client' installmentNumber' date' amount' disableFees' manualFeesAmount' manualCommission' disableInterests' manualInterestsAmount' keepExpectedInstallment' proportionPayment' paymentMethod' comment' pending
Long Parameter List,OpenCBS.Services,LoanServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\LoanServices.cs,ManualInterestCalculation,The method has 15 parameters. Parameters: loan' client' installmentNumber' date' amount' disableFees' manualFeesAmount' manualCommission' disableInterests' manualInterestsAmount' keepExpectedInstallment' proportionPayment' paymentMethod' comment' pending
Long Parameter List,OpenCBS.Services,LoanServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\LoanServices.cs,ManualFeesCalculation,The method has 15 parameters. Parameters: loan' client' installmentNumber' date' amount' disableFees' manualFeesAmount' manualCommission' disableInterests' manualInterestsAmount' keepExpectedInstallment' proportionPayment' paymentMethod' comment' pending
Long Parameter List,OpenCBS.Services,LoanServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\LoanServices.cs,Repay,The method has 15 parameters. Parameters: curentLoan' client' installmentNumber' payDate' amount' disableFees' manualFeesAmount' manualCommission' disableInterests' manualInterestsAmount' keepExpectedInstallment' proportionPayment' paymentMethod' comment' isPending
Long Parameter List,OpenCBS.Services,LoanServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\LoanServices.cs,AddTranche,The method has 5 parameters. Parameters: loan' client' trancheConfiguration' entryFees' paymentMethod
Long Parameter List,OpenCBS.Services,LoanServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\LoanServices.cs,ShowNewContract,The method has 14 parameters. Parameters: pContract' installmentNumber' date' amount' disableFees' manualFeesAmount' manualCommissionAmount' disableInterests' manualInterests' pKeepExpectedInstallment' doProportionPayment' pPaymentMethod' pPending' isTotalRepayment
Long Parameter List,OpenCBS.Services,SavingServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\SavingServices.cs,RepayLoanFromSaving,The method has 7 parameters. Parameters: loan' repaymentEvent' savingsContract' date' amount' description' sqlTransaction
Long Parameter List,OpenCBS.Services,SavingServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\SavingServices.cs,LoanDisbursement,The method has 6 parameters. Parameters: savings' loan' date' description' user' disableFees
Long Parameter List,OpenCBS.Services,SavingServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\SavingServices.cs,Deposit,The method has 10 parameters. Parameters: saving' dateTime' depositAmount' description' user' isPending' savingsMethod' paymentMethod' pendingEventId' teller
Long Parameter List,OpenCBS.Services,SavingServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\SavingServices.cs,SpecialOperation,The method has 8 parameters. Parameters: saving' pDate' amount' description' pUser' savingsMethod' isCredit' booking
Long Parameter List,OpenCBS.Services,SavingServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\SavingServices.cs,SpecialOperationCredit,The method has 6 parameters. Parameters: pSaving' pDate' creditAmount' pDescription' pUser' savingsMethod
Long Parameter List,OpenCBS.Services,SavingServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\SavingServices.cs,SpecialOperationDebit,The method has 6 parameters. Parameters: pSaving' pDate' debitAmount' pDescription' pUser' savingsMethod
Long Parameter List,OpenCBS.Services,SavingServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\SavingServices.cs,Withdraw,The method has 7 parameters. Parameters: pSaving' pDate' pWithdrawAmount' pDescription' pUser' teller' paymentMethod
Long Parameter List,OpenCBS.Services,SavingServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\SavingServices.cs,Withdraw,The method has 8 parameters. Parameters: pSaving' pDate' pWithdrawAmount' pDescription' pUser' teller' sqlTransaction' paymentMethod
Long Parameter List,OpenCBS.Services,SavingServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\SavingServices.cs,ValidateWithdrawal,The method has 7 parameters. Parameters: pWithdrawAmount' pSaving' pDate' pDescription' pUser' teller' paymentMethod
Long Parameter List,OpenCBS.Services,SavingServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\SavingServices.cs,Transfer,The method has 8 parameters. Parameters: from' to' date' amount' fee' description' user' noFee
Long Parameter List,OpenCBS.Services,SavingServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\SavingServices.cs,CheckTransfer,The method has 6 parameters. Parameters: to' from' amount' fee' date' description
Long Parameter List,OpenCBS.Services,SavingServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\SavingServices.cs,RefusePendingDeposit,The method has 6 parameters. Parameters: pRefuseAmount' pSaving' pDate' pUser' method' pendingEventId
Long Parameter List,OpenCBS.Services,SavingServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\SavingServices.cs,Reopen,The method has 5 parameters. Parameters: pReopenAmount' pSaving' pDate' pUser' pClient
Long Parameter List,OpenCBS.Services,SavingServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\SavingServices.cs,CloseAndWithdraw,The method has 7 parameters. Parameters: saving' date' user' withdrawAmount' isDesactivateFees' teller' paymentMethod
Long Parameter List,OpenCBS.Services,SavingServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\SavingServices.cs,CloseAndTransfer,The method has 7 parameters. Parameters: from' to' date' pUser' amount' pIsDesactivateFees' teller
Long Parameter List,OpenCBS.Services,SavingServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\SavingServices.cs,SimulateCloseAccount,The method has 5 parameters. Parameters: saving' date' user' isDesactivateFees' teller
Long Parameter List,OpenCBS.Services,SavingServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\SavingServices.cs,FirstDeposit,The method has 6 parameters. Parameters: saving' initialAmount' creationDate' entryFees' user' teller
Long Parameter List,OpenCBS.Services,SavingServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\SavingServices.cs,FindContracts,The method has 6 parameters. Parameters: pCurrentlyPage' pNumbersTotalPage' pNumberOfRecords' pQuery' all' activeContractsOnly
Long Parameter List,OpenCBS.Services,DatabaseServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\DatabaseServices.cs,ExecuteScript,The method has 5 parameters. Parameters: pScriptPath' pDatabase' pServerName' pLoginName' pPassword
Long Parameter List,OpenCBS.Services,ServicesProvider,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\DbAccess\ServicesProvider.cs,InitOnlineConnection,The method has 5 parameters. Parameters: pUserName' pUserPass' pDbName' pComputerName' pLoginName
Long Parameter List,OpenCBS.Services,IServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\DbAccess\IServices.cs,GetAuthentification,The method has 5 parameters. Parameters: pOctoUsername' pOctoPass' pDbName' pComputerName' pLoginName
Long Parameter List,OpenCBS.Services,IRemoteOperation,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\DbAccess\IRemoteOperation.cs,GetAuthentification,The method has 5 parameters. Parameters: login' pass' account' pComputerName' pLoginName
Long Parameter List,OpenCBS.Services,Remoting,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\DbAccess\Remoting.cs,GetAuthentification,The method has 5 parameters. Parameters: pOctoUsername' pOctoPass' pDbName' pComputerName' pLoginName
Long Parameter List,OpenCBS.Services,Standard,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\DbAccess\Standard.cs,GetAuthentification,The method has 5 parameters. Parameters: pOctoUsername' pOctoPass' pDbName' pComputerName' pLoginName
Long Parameter List,OpenCBS.Services,EconomicActivityServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\EconomicActivityServices.cs,UpdateDeletedEconomicActivityLoanHistory,The method has 5 parameters. Parameters: contractId' personId' economicActivityId' sqlTransaction' deleted
Long Parameter List,OpenCBS.Services,PicturesServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\PicturesServices.cs,AddPicture,The method has 5 parameters. Parameters: pGroup' pId' photoSubId' pFileName' pName
Long Parameter List,OpenCBS.Services,QuestionnaireServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\QuestionnaireServices.cs,QuestionnaireServices,The method has 6 parameters. Parameters: pLogin' pPassword' pServer' pDatabase' pSetupPath' pTimeout
Long Parameter List,OpenCBS.Services,QuestionnaireServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\QuestionnaireServices.cs,UpdateQuestionnaire,The method has 12 parameters. Parameters: name' country' email' numberOfClients' grossPortfolio' positionInCompony' personName' phone' skype' purposeOfUsage' otherMessages' isSent
Long Parameter List,OpenCBS.Services,QuestionnaireServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\QuestionnaireServices.cs,SaveQuestionnaire,The method has 12 parameters. Parameters: name' country' email' numberOfClients' grossPortfolio' positionInCompony' personName' phone' skype' purposeOfUsage' otherMessages' isSent
Long Identifier,OpenCBS.Services,LoanServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\LoanServices.cs,DisburseSimulation,The length of the parameter pAlignInstallmentsDatesOnRealDisbursmentDate is 44.
Long Identifier,OpenCBS.Services,LoanServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\LoanServices.cs,Disburse,The length of the parameter pAlignInstallmentsDatesOnRealDisbursmentDate is 44.
Long Statement,OpenCBS.Services.Accounting,ChartOfAccountsServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\Accounting\ChartOfAccountsServices.cs,InsertCoa,The length of the statement  "                if (_accountManagement.NumbersExist(accountNumbers)) throw new OpenCbsAccountException(OpenCbsAccountExceptionsEnum.ImportNumbersExist); " is 136.
Long Statement,OpenCBS.Services,ClientServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\ClientServices.cs,FindTiers,The length of the statement  "            numberOfRecords = _clientManagement.GetFoundRecordsNumber(query' isActive' includePersons' includeGroups' includeVillages); " is 123.
Long Statement,OpenCBS.Services,ClientServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\ClientServices.cs,FindTiers,The length of the statement  "            result.AddRange(_clientManagement.SearchAllByCriteres(query' isActive' currentlyPage' includePersons' includeGroups' includeVillages)); " is 135.
Long Statement,OpenCBS.Services,LoanServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\LoanServices.cs,AssembleRescheduling,The length of the statement  "            // 3. To get total of first calculated interest. It will be interest between last closed installment and date of rescheduling  " is 125.
Long Statement,OpenCBS.Services,LoanServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\LoanServices.cs,AssembleTranche,The length of the statement  "                if (!(installment.CapitalRepayment == installment.PaidCapital && installment.InterestsRepayment == installment.PaidInterests)) " is 126.
Long Statement,OpenCBS.Services,LoanServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\LoanServices.cs,GetPreviousRate,The length of the statement  "                var listevents = _credit.Events.GetEvents().Where(er => er is RescheduleLoanEvent).OrderByDescending(ev => ev.Id).ToList(); " is 123.
Long Statement,OpenCBS.Services,LoanServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\LoanServices.cs,SaveInstallmentsAndRepaymentEvents,The length of the statement  "                        eventStock.GetRepaymentEvents().First(i => !i.IsFired).Comment = withdrowEvent.Id.ToString(CultureInfo.InvariantCulture); " is 121.
Long Statement,OpenCBS.Services,RoleServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\RoleServices.cs,SaveRole,The length of the statement  "                //roleErrors.ResultMessage += "\n - " + MultiLanguageStrings.GetString(Ressource.StringRes' "Role_RoleName_Empty.Text"); " is 120.
Long Statement,OpenCBS.Services,RoleServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\RoleServices.cs,SaveRole,The length of the statement  "                    //roleErrors.ResultMessage += "\n - " + MultiLanguageStrings.GetString(Ressource.StringRes' "Role_Save_AlreadyExist.Text"); " is 123.
Long Statement,OpenCBS.Services,SavingProductServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\SavingProductServices.cs,ValidateSavingBookProduct,The length of the statement  "            if (!ServicesHelper.CheckMinMaxAndValueCorrectlyFilled(savingsProduct.WithdrawingMin' savingsProduct.WithdrawingMax' null)) " is 123.
Long Statement,OpenCBS.Services,SavingProductServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\SavingProductServices.cs,ValidateSavingBookProduct,The length of the statement  "            if (!ServicesHelper.CheckMinMaxAndValueCorrectlyFilled(savingsProduct.DepositFeesMin' savingsProduct.DepositFeesMax' savingsProduct.DepositFees)) " is 145.
Long Statement,OpenCBS.Services,SavingProductServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\SavingProductServices.cs,ValidateSavingBookProduct,The length of the statement  "            if (!ServicesHelper.CheckMinMaxAndValueCorrectlyFilled(savingsProduct.ChequeDepositFeesMin' savingsProduct.ChequeDepositFeesMax' savingsProduct.ChequeDepositFees)) " is 163.
Long Statement,OpenCBS.Services,SavingProductServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\SavingProductServices.cs,ValidateSavingBookProduct,The length of the statement  "            if (!ServicesHelper.CheckMinMaxAndValueCorrectlyFilled(savingsProduct.ReopenFeesMin' savingsProduct.ReopenFeesMax' savingsProduct.ReopenFees)) " is 142.
Long Statement,OpenCBS.Services,SavingProductServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\SavingProductServices.cs,ValidateSavingBookProduct,The length of the statement  "            if (!ServicesHelper.CheckMinMaxAndValueCorrectlyFilled(savingsProduct.OverdraftFeesMin' savingsProduct.OverdraftFeesMax' savingsProduct.OverdraftFees)) " is 151.
Long Statement,OpenCBS.Services,SavingProductServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\SavingProductServices.cs,ValidateSavingBookProduct,The length of the statement  "            if (!ServicesHelper.CheckMinMaxAndValueCorrectlyFilled(savingsProduct.AgioFeesMin' savingsProduct.AgioFeesMax' savingsProduct.AgioFees)) " is 136.
Long Statement,OpenCBS.Services,SavingProductServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\SavingProductServices.cs,ValidateSavingBookProduct,The length of the statement  "            if (!ServicesHelper.CheckMinMaxAndValueCorrectlyFilled(savingsProduct.CloseFeesMin' savingsProduct.CloseFeesMax' savingsProduct.CloseFees)) " is 139.
Long Statement,OpenCBS.Services,SavingProductServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\SavingProductServices.cs,ValidateSavingBookProduct,The length of the statement  "            if (!ServicesHelper.CheckMinMaxAndValueCorrectlyFilled(savingsProduct.ManagementFeesMin' savingsProduct.ManagementFeesMax' savingsProduct.ManagementFees)) " is 154.
Long Statement,OpenCBS.Services,SavingProductServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\SavingProductServices.cs,ValidateSavingBookProduct,The length of the statement  "                if (!ServicesHelper.CheckMinMaxAndValueCorrectlyFilled(savingsProduct.FlatWithdrawFeesMin' savingsProduct.FlatWithdrawFeesMax' savingsProduct.FlatWithdrawFees)) " is 160.
Long Statement,OpenCBS.Services,SavingProductServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\SavingProductServices.cs,ValidateSavingBookProduct,The length of the statement  "                if (!ServicesHelper.CheckMinMaxAndValueCorrectlyFilled(savingsProduct.RateWithdrawFeesMin' savingsProduct.RateWithdrawFeesMax' savingsProduct.RateWithdrawFees)) " is 160.
Long Statement,OpenCBS.Services,SavingProductServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\SavingProductServices.cs,ValidateSavingBookProduct,The length of the statement  "                if (!ServicesHelper.CheckMinMaxAndValueCorrectlyFilled(savingsProduct.FlatTransferFeesMin' savingsProduct.FlatTransferFeesMax' savingsProduct.FlatTransferFees)) " is 160.
Long Statement,OpenCBS.Services,SavingProductServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\SavingProductServices.cs,ValidateSavingBookProduct,The length of the statement  "                if (!ServicesHelper.CheckMinMaxAndValueCorrectlyFilled(savingsProduct.RateTransferFeesMin' savingsProduct.RateTransferFeesMax' savingsProduct.RateTransferFees)) " is 160.
Long Statement,OpenCBS.Services,SavingProductServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\SavingProductServices.cs,ValidateSavingBookProduct,The length of the statement  "            if (!savingsProduct.OverdraftFees.HasValue && !(savingsProduct.OverdraftFeesMin.HasValue && savingsProduct.OverdraftFeesMax.HasValue)) " is 134.
Long Statement,OpenCBS.Services,SavingProductServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\SavingProductServices.cs,ValidateProduct,The length of the statement  "            if (!ServicesHelper.CheckMinMaxAndValueCorrectlyFilled(savingsProduct.InitialAmountMin' savingsProduct.InitialAmountMax' null)) " is 127.
Long Statement,OpenCBS.Services,SavingProductServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\SavingProductServices.cs,ValidateProduct,The length of the statement  "            if (!ServicesHelper.CheckIfValueBetweenMinAndMax(savingsProduct.BalanceMin' savingsProduct.BalanceMax' savingsProduct.InitialAmountMin)) " is 136.
Long Statement,OpenCBS.Services,SavingProductServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\SavingProductServices.cs,ValidateProduct,The length of the statement  "            if (!ServicesHelper.CheckIfValueBetweenMinAndMax(savingsProduct.BalanceMin' savingsProduct.BalanceMax' savingsProduct.InitialAmountMax)) " is 136.
Long Statement,OpenCBS.Services,SavingProductServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\SavingProductServices.cs,ValidateProduct,The length of the statement  "            if (!ServicesHelper.CheckMinMaxAndValueCorrectlyFilled(savingsProduct.InterestRateMin' savingsProduct.InterestRateMax' savingsProduct.InterestRate)) " is 148.
Long Statement,OpenCBS.Services,SavingProductServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\SavingProductServices.cs,ValidateProduct,The length of the statement  "            if (!ServicesHelper.CheckMinMaxAndValueCorrectlyFilled(savingsProduct.EntryFeesMin' savingsProduct.EntryFeesMax' savingsProduct.EntryFees)) " is 139.
Long Statement,OpenCBS.Services,SavingServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\SavingServices.cs,IsInitialAmountCorrect,The length of the statement  "            return ServicesHelper.CheckIfValueBetweenMinAndMax(pSaving.Product.InitialAmountMin' pSaving.Product.InitialAmountMax' pSaving.InitialAmount); " is 142.
Long Statement,OpenCBS.Services,SavingServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\SavingServices.cs,IsInterestRateCorrect,The length of the statement  "            return ServicesHelper.CheckIfValueBetweenMinAndMax(pSaving.Product.InterestRateMin' pSaving.Product.InterestRateMax' pSaving.InterestRate); " is 139.
Long Statement,OpenCBS.Services,SavingServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\SavingServices.cs,IsEntryFeesCorrect,The length of the statement  "            return ServicesHelper.CheckIfValueBetweenMinAndMax(pSaving.Product.EntryFeesMin' pSaving.Product.EntryFeesMax' entryFees); " is 122.
Long Statement,OpenCBS.Services,SavingServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\SavingServices.cs,IsDepositFeesCorrect,The length of the statement  "            return ServicesHelper.CheckIfValueBetweenMinAndMax(pSaving.Product.DepositFeesMin' pSaving.Product.DepositFeesMax' pSaving.DepositFees); " is 136.
Long Statement,OpenCBS.Services,SavingServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\SavingServices.cs,IsCloseFeesCorrect,The length of the statement  "                return ServicesHelper.CheckIfValueBetweenMinAndMax(pSaving.Product.CloseFeesMin' pSaving.Product.CloseFeesMax' pSaving.CloseFees); " is 130.
Long Statement,OpenCBS.Services,SavingServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\SavingServices.cs,IsSavingBalanceCorrect,The length of the statement  "            return ServicesHelper.CheckIfValueBetweenMinAndMax(pSaving.Product.BalanceMin' pSaving.Product.BalanceMax' initialAmount); " is 122.
Long Statement,OpenCBS.Services,SavingServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\SavingServices.cs,IsSavingBalanceCorrect,The length of the statement  "            return ServicesHelper.CheckIfValueBetweenMinAndMax(pSaving.Product.BalanceMin' pSaving.Product.BalanceMax' pSaving.GetBalance()); " is 129.
Long Statement,OpenCBS.Services,SavingServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\SavingServices.cs,IsDepositAmountCorrect,The length of the statement  "            return (ServicesHelper.CheckIfValueBetweenMinAndMax(pSaving.Product.DepositMin' pSaving.Product.DepositMax' pDepositAmount)); " is 125.
Long Statement,OpenCBS.Services,SavingServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\SavingServices.cs,IsWithdrawAmountCorrect,The length of the statement  "            return (ServicesHelper.CheckIfValueBetweenMinAndMax(pSaving.Product.WithdrawingMin' pSaving.Product.WithdrawingMax' pWithdrawAmount)); " is 134.
Long Statement,OpenCBS.Services,SavingServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\SavingServices.cs,IsTransferAmountCorrect,The length of the statement  "            return (ServicesHelper.CheckIfValueBetweenMinAndMax(pSaving.Product.TransferMin' pSaving.Product.TransferMax' pTransferAmount)); " is 128.
Long Statement,OpenCBS.Services,SavingServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\SavingServices.cs,UpdateContract,The length of the statement  "                if (loan != null && (loan.ContractStatus == OContractStatus.Active || loan.ContractStatus == OContractStatus.Validated)) " is 120.
Long Statement,OpenCBS.Services,SavingServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\SavingServices.cs,UpdateContract,The length of the statement  "                    if (new ClientServices(_user).FindTiersByContractId(loan.Id).Id != new ClientServices(_user).FindTiersBySavingsId(pSaving.Id).Id) " is 129.
Long Statement,OpenCBS.Services,SavingServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\SavingServices.cs,FindContracts,The length of the statement  "            List<SavingSearchResult> list = _savingManager.SearchSavingContractByCritere(pCurrentlyPage' pQuery' all' activeContractsOnly); " is 127.
Long Statement,OpenCBS.Services,DatabaseServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\DatabaseServices.cs,CheckSQLDatabaseSchema,The length of the statement  "                CompareDatabase.IsCurrentDatabaseIsRight(connection' pDatabaseName' ref same' ref additionnalColumn' ref missingColumn); " is 120.
Long Statement,OpenCBS.Services,DatabaseServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\DatabaseServices.cs,CreateAccountDatabase,The length of the statement  "            string sqlConnection = String.Format(@"user id={0};password={1};data source={2};persist security info=False;initial catalog={3};connection timeout=10"' " is 151.
Long Statement,OpenCBS.Services,DatabaseServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\DatabaseServices.cs,CreateAccountDatabase,The length of the statement  "                RemoteServerSettings.GetSettings().LoginName' RemoteServerSettings.GetSettings().Password' RemoteServerSettings.GetSettings().ServerName' "MASTER"); " is 148.
Long Statement,OpenCBS.Services,DatabaseServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\DatabaseServices.cs,UpdateAccountActive,The length of the statement  "            string sqlConnection = String.Format(@"user id={0};password={1};data source={2};persist security info=False;initial catalog={3};connection timeout=10"' " is 151.
Long Statement,OpenCBS.Services,DatabaseServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\DatabaseServices.cs,UpdateAccountActive,The length of the statement  "                RemoteServerSettings.GetSettings().LoginName' RemoteServerSettings.GetSettings().Password' RemoteServerSettings.GetSettings().ServerName' "Accounts"); " is 150.
Long Statement,OpenCBS.Services,DatabaseServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\DatabaseServices.cs,ExecuteScript,The length of the statement  "            string sqlConnection = String.Format(@"user id={0};password={1};data source={2};persist security info=False;initial catalog={3};connection timeout=10"' " is 151.
Long Statement,OpenCBS.Services,DatabaseServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\DatabaseServices.cs,GetDatabaseNameForAccount,The length of the statement  "            string sqlConnection = String.Format(@"user id={0};password={1};data source={2};persist security info=False;initial catalog={3};connection timeout=10"' " is 151.
Long Statement,OpenCBS.Services,GraphServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\GraphServices.cs,CalculateChartForFundingLine,The length of the statement  "            List<KeyValuePair<DateTime' decimal>> result = _contractManagement.CalculateCashToRepayByDayByFundingLine(pFundingLine.Id' " is 122.
Long Statement,OpenCBS.Services,LocationServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\LocationServices.cs,FindDistrict,The length of the statement  "            return province.Id == 0 ? _locationsManager.GetDistricts() : _locationsManager.SelectDistrictsByProvinceId(province.Id); " is 120.
Long Statement,OpenCBS.Services,ProductServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\ProductServices.cs,CheckCycleParams,The length of the statement  "	            bool result = ServicesHelper.CheckIfValueBetweenMinAndMaxOrValuesAreEqual(amountCycle.Min.Value' amountCycle.Max.Value); " is 120.
Long Statement,OpenCBS.Services,ProductServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\ProductServices.cs,CheckCycleParams,The length of the statement  "	            bool result=ServicesHelper.CheckIfValueBetweenMinAndMaxOrValuesAreEqual(maturityCycle.Min.Value' maturityCycle.Max.Value); " is 122.
Long Statement,OpenCBS.Services,ProductServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\ProductServices.cs,CheckValueForPackageInterestRate,The length of the statement  "            if (!ServicesHelper.CheckMinMaxAndValueCorrectlyFilled(pPackage.InterestRateMin' pPackage.InterestRateMax' pPackage.InterestRate)) " is 130.
Long Statement,OpenCBS.Services,ProductServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\ProductServices.cs,CheckValueForPackageGracePeriod,The length of the statement  "            if (!ServicesHelper.CheckMinMaxAndValueCorrectlyFilled(pPackage.GracePeriodMin' pPackage.GracePeriodMax' pPackage.GracePeriod)) " is 127.
Long Statement,OpenCBS.Services,ProductServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\ProductServices.cs,CheckValueForPackageNonRepaymentPenalties,The length of the statement  "            if (!ServicesHelper.CheckMinMaxAndValueCorrectlyFilled(pPackage.NonRepaymentPenaltiesMin.InitialAmount' pPackage.NonRepaymentPenaltiesMax.InitialAmount' pPackage.NonRepaymentPenalties.InitialAmount)) " is 199.
Long Statement,OpenCBS.Services,ProductServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\ProductServices.cs,CheckValueForPackageNonRepaymentPenalties,The length of the statement  "            if (!ServicesHelper.CheckMinMaxAndValueCorrectlyFilled(pPackage.NonRepaymentPenaltiesMin.OLB' pPackage.NonRepaymentPenaltiesMax.OLB' pPackage.NonRepaymentPenalties.OLB)) " is 169.
Long Statement,OpenCBS.Services,ProductServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\ProductServices.cs,CheckValueForPackageNonRepaymentPenalties,The length of the statement  "            if (!ServicesHelper.CheckMinMaxAndValueCorrectlyFilled(pPackage.NonRepaymentPenaltiesMin.OverDueInterest' pPackage.NonRepaymentPenaltiesMax.OverDueInterest' pPackage.NonRepaymentPenalties.OverDueInterest)) " is 205.
Long Statement,OpenCBS.Services,ProductServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\ProductServices.cs,CheckValueForPackageNonRepaymentPenalties,The length of the statement  "            if (!ServicesHelper.CheckMinMaxAndValueCorrectlyFilled(pPackage.NonRepaymentPenaltiesMin.OverDuePrincipal' pPackage.NonRepaymentPenaltiesMax.OverDuePrincipal' pPackage.NonRepaymentPenalties.OverDuePrincipal)) " is 208.
Long Statement,OpenCBS.Services,ProductServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\ProductServices.cs,CheckValueForPackageAnticipatedTotalRepaymentPenalties,The length of the statement  "            if (!ServicesHelper.CheckMinMaxAndValueCorrectlyFilled(pPackage.AnticipatedTotalRepaymentPenaltiesMin'pPackage.AnticipatedTotalRepaymentPenaltiesMax' pPackage.AnticipatedTotalRepaymentPenalties)) " is 195.
Long Statement,OpenCBS.Services,ProductServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\ProductServices.cs,CheckValuesForPackageAnticipatedPartialRepaymentPenalties,The length of the statement  "            if (!ServicesHelper.CheckMinMaxAndValueCorrectlyFilled(product.AnticipatedPartialRepaymentPenaltiesMin' product.AnticipatedPartialRepaymentPenaltiesMax' product.AnticipatedPartialRepaymentPenalties)) " is 199.
Long Statement,OpenCBS.Services,ProductServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\ProductServices.cs,CheckValueForLineOfCredit,The length of the statement  "            if ((pPackage.AmountUnderLoc == null && pPackage.AmountUnderLocMin == null && pPackage.AmountUnderLocMax == null) || (pPackage.MaturityLoc == null && pPackage.MaturityLocMin == null && pPackage.MaturityLocMax == null)) " is 218.
Long Statement,OpenCBS.Services,ProductServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\ProductServices.cs,CheckValueForLineOfCredit,The length of the statement  "            if (!ServicesHelper.CheckMinMaxAndValueCorrectlyFilled(pPackage.AmountUnderLocMin' pPackage.AmountUnderLocMax' pPackage.AmountUnderLoc)) " is 136.
Long Statement,OpenCBS.Services,ProductServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\ProductServices.cs,CheckValueForLineOfCredit,The length of the statement  "            if (!ServicesHelper.CheckMinMaxAndValueCorrectlyFilled(pPackage.MaturityLocMin' pPackage.MaturityLocMax' pPackage.MaturityLoc)) " is 127.
Long Statement,OpenCBS.Services,ProductServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\ProductServices.cs,CheckCumpolsorySavingSettings,The length of the statement  "            if (!ServicesHelper.CheckMinMaxAndValueCorrectlyFilled(pPackage.CompulsoryAmountMin' pPackage.CompulsoryAmountMax' pPackage.CompulsoryAmount)) " is 142.
Long Statement,OpenCBS.Services,ProductServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\ProductServices.cs,CheckValueForPackageNumberOfInstallments,The length of the statement  "            if (!ServicesHelper.CheckMinMaxAndValueCorrectlyFilled(pPackage.NbOfInstallmentsMin' pPackage.NbOfInstallmentsMax' pPackage.NbOfInstallments)) " is 142.
Long Statement,OpenCBS.Services,ProductServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\ProductServices.cs,CheckValueForPackageNumberOfInstallments,The length of the statement  "                if (pPackage.NbOfInstallmentsMin > ApplicationSettings.GetInstance(_user != null ? _user.Md5 : "").MaxNumberInstallment) " is 120.
Long Statement,OpenCBS.Services,ProductServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\ProductServices.cs,CheckValueForPackageNumberOfInstallments,The length of the statement  "                if (pPackage.NbOfInstallmentsMax > ApplicationSettings.GetInstance(_user != null ? _user.Md5 : "").MaxNumberInstallment) " is 120.
Long Statement,OpenCBS.Services,PicturesServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\PicturesServices.cs,AddPicture,The length of the statement  "            int newPicrtureSubId = _manager.AddPicture(pGroup' pId' photoSubId' bitmapMStream.ToArray()' thumbnailMStream.ToArray()' pName); " is 128.
Long Statement,OpenCBS.Services,PicturesServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\PicturesServices.cs,UpdatePicture,The length of the statement  "            _manager.UpdatePicture(group' personID' photoSubId' fileName' resizedImageStream.ToArray()' thumbnailImageStream.ToArray()); " is 124.
Long Statement,OpenCBS.Services,SettingsImportExportServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\SettingsImportExportServices.cs,GetCurrentSettings,The length of the statement  "            generalParameters.Add(new Setting(OGeneralSettings.CALCULATIONLATEFEESDURINGPUBLICHOLIDAYS' gp.IsCalculationLateFeesDuringHolidays.ToString())); " is 144.
Long Statement,OpenCBS.Services,SettingsImportExportServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\SettingsImportExportServices.cs,GetCurrentSettings,The length of the statement  "            generalParameters.Add(new Setting(OGeneralSettings.DONOTSKIPWEEKENDSININSTALLMENTSDATE' gp.DoNotSkipNonWorkingDays.ToString()));  " is 128.
Long Statement,OpenCBS.Services,SettingsImportExportServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\SettingsImportExportServices.cs,GetCurrentSettings,The length of the statement  "            generalParameters.Add(new Setting(OGeneralSettings.INTERESTS_ALSO_CREDITED_IN_FL' gp.InterestsCreditedInFL.ToString())); " is 120.
Long Statement,OpenCBS.Services,SettingsImportExportServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\SettingsImportExportServices.cs,GetCurrentSettings,The length of the statement  "            generalParameters.Add(new Setting(OGeneralSettings.LATEDAYSAFTERACCRUALCEASES' gp.LateDaysAfterAccrualCeases.ToString())); " is 122.
Long Statement,OpenCBS.Services,SettingsImportExportServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\SettingsImportExportServices.cs,GetCurrentSettings,The length of the statement  "            generalParameters.Add(new Setting(OGeneralSettings.PAYFIRSTINSTALLMENTREALVALUE' gp.PayFirstInterestRealValue.ToString())); " is 123.
Long Statement,OpenCBS.Services,SettingsImportExportServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\SettingsImportExportServices.cs,GetCurrentSettings,The length of the statement  "            generalParameters.Add(new Setting(OGeneralSettings.INTEREST_RATE_DECIMAL_PLACES' Convert.ToString(gp.InterestRateDecimalPlaces))); " is 130.
Long Statement,OpenCBS.Services,SettingsImportExportServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\SettingsImportExportServices.cs,GetCurrentSettings,The length of the statement  "            generalParameters.Add(new Setting(OGeneralSettings.STOP_WRITEOFF_PENALTY' Convert.ToString(gp.IsStopWriteOffPenalty.ToString()))); " is 130.
Long Statement,OpenCBS.Services,SettingsImportExportServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\SettingsImportExportServices.cs,GetCurrentSettings,The length of the statement  "                publicHolidays.Add(new Setting(ServicesProvider.GetInstance().GetNonWorkingDate().PublicHolidays[entry]' (entry).ToString("dd/MM/yyyy"))); " is 138.
Long Statement,OpenCBS.Services,UserServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\UserServices.cs,SaveUser,The length of the statement  "            Debug.Assert(OGender.CheckGender(pUser.Sex)' string.Format("Non valif geder character is given for user: {0}"' pUser.Name)); " is 124.
Long Statement,OpenCBS.Services,UserServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\UserServices.cs,SaveUser,The length of the statement  "                    userErrors.ResultMessage += "\n - " + MultiLanguageStrings.GetString(Ressource.StringRes' "User_Save_AlreadyExist.Text"); " is 121.
Long Statement,OpenCBS.Services,UserServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\UserServices.cs,Find,The length of the statement  "            return _users.Find(item => (item.FirstName + (string.IsNullOrEmpty(item.LastName) ? "" : " ") + item.LastName) == fullName); " is 124.
Long Statement,OpenCBS.Services.Export,ExportServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\Export\ExportServices.cs,SetInstallmentAsPending,The length of the statement  "            loanServices.Repay(loan' client' installment.InstallmentNumber' installment.InstallmentDate' installment.InstallmentAmount' " is 123.
Complex Conditional,OpenCBS.Services,LoanServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\LoanServices.cs,CancelSavingsEvent,The conditional expression  "cancelledEvent.PaymentMethod.Method == OPaymentMethods.Savings                      &&                      (cancelledEvent.Code == "RBLE" ||                       cancelledEvent.Code == "RGLE" ||                       cancelledEvent.Code == "APR" ||                       cancelledEvent.Code == "ATR" ||                       cancelledEvent.Code == "RRLE" ||                       cancelledEvent.Code == "APTR"                      )"  is complex.
Complex Conditional,OpenCBS.Services,DatabaseServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\DatabaseServices.cs,CheckSQLServerConnection,The conditional expression  "TechnicalSettings.UseDemoDatabase &&                  File.Exists(path + "\\DemoDB.mdf") &&                  File.Exists(path + "\\DemoDB.ldf") &&                  File.Exists(path + "\\DemoDB_attachments.mdf") &&                  File.Exists(path + "\\DemoDB_attachments.ldf")"  is complex.
Complex Conditional,OpenCBS.Services,ApplicationSettingsServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\ApplicationSettingsServices.cs,CheckApplicationSettings,The conditional expression  "ApplicationSettings.GetInstance(_user.Md5).GetSpecificParameter(entry.Key.ToString()) == null &&                      entry.Key.ToString() != OGeneralSettings.LATEDAYSAFTERACCRUALCEASES &&                      entry.Key.ToString() != OGeneralSettings.WEEKENDDAY1 &&                      entry.Key.ToString() != OGeneralSettings.WEEKENDDAY2"  is complex.
Complex Conditional,OpenCBS.Services,ProductServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\ProductServices.cs,CheckValueForLineOfCredit,The conditional expression  "(pPackage.AmountUnderLoc == null && pPackage.AmountUnderLocMin == null && pPackage.AmountUnderLocMax == null) || (pPackage.MaturityLoc == null && pPackage.MaturityLocMin == null && pPackage.MaturityLocMax == null)"  is complex.
Magic Number,OpenCBS.Services.Accounting,ChartOfAccountsServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\Accounting\ChartOfAccountsServices.cs,Insert,The following statement contains a magic number: using (SqlConnection conn = _accountManagement.GetConnection())              {                  SqlTransaction tx = conn.BeginTransaction();                  try                  {                      _accountManagement.Insert(account' tx);                      tx.Commit();                  }                  catch (Exception exception)                  {                      tx.Rollback();                      if (exception is SqlException)                          if (((SqlException)exception).Number==2627)                              //2627 is a standard number of error related to unique keys duplication                              throw new OpenCbsAccountException(OpenCbsAccountExceptionsEnum.DuplicatedAccount);                      throw;                  }              }
Magic Number,OpenCBS.Services.Accounting,ChartOfAccountsServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\Accounting\ChartOfAccountsServices.cs,InsertCoa,The following statement contains a magic number: RunAction(transaction=>                      {                          _tellerManager.DeleteAll(transaction);                          if(deleteRelated)                          {                              _accountManagement.DeleteRelatedRecords(transaction);                              _accountManagement.Delete(transaction);                          }                            List<Account> accountsToInsert = new List<Account>(accounts);                          List<Account> insertedAccounts = new List<Account>(accounts.Length);                          while (accountsToInsert.Count > 0)                          {                              int oldCount = insertedAccounts.Count;                              for (int index = 0; index < accountsToInsert.Count; index++)                              {                                  Account account = accountsToInsert[index];                                  int? parentAccountId = account.ParentAccountId;                                    Account parentAccount = null;                                  if (parentAccountId.HasValue && parentAccountId != 0)                                  {                                      if(deleteRelated)                                          parentAccount = insertedAccounts.FirstOrDefault(a => a.Id == parentAccountId);                                      else                                          parentAccount =                                              _accountManagement.SelectChartAccount(parentAccountId.Value) ??                                              insertedAccounts.FirstOrDefault(a => a.Id == parentAccountId);                                  }                                    if (                                      (parentAccountId == null || parentAccountId == 0) ||                                      parentAccount != null                                  )                                  {                                      if(parentAccount != null) CheckAccountParent(account' parentAccount);                                      try                                      {                                          _accountManagement.Insert(account' transaction' true);                                      }                                      catch(SqlException exception)                                      {                                          if (exception.Number == 2627)                                              //2627 is a standard number of error related to unique keys duplication                                              throw new OpenCbsAccountException(OpenCbsAccountExceptionsEnum.DuplicatedAccount);                                      }                                                                            insertedAccounts.Add(account);                                      accountsToInsert.Remove(account);                                      index--;                                  }                              }                                if (oldCount == insertedAccounts.Count)                                  throw new OpenCbsException(string.Format(                                      "Chart of accounts contain non valid tree. Please check these accounts {0}."'                                      string.Join("'"' accountsToInsert.Select(a => a.Number).ToArray())));                          }                      }' _user);
Magic Number,OpenCBS.Services,ClientServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\ClientServices.cs,ClientServices,The following statement contains a magic number: _dataParam.AddParameter("GROUP_MIN_MEMBERS"' 4);
Magic Number,OpenCBS.Services,ClientServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\ClientServices.cs,ClientServices,The following statement contains a magic number: _dataParam.AddParameter("GROUP_MAX_MEMBERS"' 10);
Magic Number,OpenCBS.Services,ClientServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\ClientServices.cs,FindTiers,The following statement contains a magic number: numbersTotalPage = numberOfRecords / 20;
Magic Number,OpenCBS.Services,ClientServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\ClientServices.cs,FindTiers,The following statement contains a magic number: numbersTotalPage += numberOfRecords % 20 > 0 ? 1 : 0;
Magic Number,OpenCBS.Services,ClientServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\ClientServices.cs,FindInactivePersons,The following statement contains a magic number: totalPages = 0 == totalRecords % 20 ? totalRecords / 20 : totalRecords / 20 + 1;
Magic Number,OpenCBS.Services,ClientServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\ClientServices.cs,FindInactivePersons,The following statement contains a magic number: totalPages = 0 == totalRecords % 20 ? totalRecords / 20 : totalRecords / 20 + 1;
Magic Number,OpenCBS.Services,ClientServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\ClientServices.cs,FindInactivePersons,The following statement contains a magic number: totalPages = 0 == totalRecords % 20 ? totalRecords / 20 : totalRecords / 20 + 1;
Magic Number,OpenCBS.Services,ClientServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\ClientServices.cs,FindTiersCorporates,The following statement contains a magic number: numbersTotalPage = (numberOfRecords / 20) + 1;
Magic Number,OpenCBS.Services,ClientServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\ClientServices.cs,CreateContractHistoryDataSet,The following statement contains a magic number: foreach (Loan contract in pList)              {                  DataRow row = dataset.Tables[0].NewRow();                  // row[0] = contract.Beneficiary.Name;                  row[1] = contract.Code;                  row[2] = contract.Amount.ToString();                  row[3] = contract.InterestRate.ToString();                  row[4] = contract.InstallmentType.Name;                  row[5] = contract.NbOfInstallments.ToString();                  row[6] = contract.CreationDate.ToShortDateString();                  row[7] = contract.StartDate.ToShortDateString();                  row[8] = contract.CloseDate.ToShortDateString();                  row[9] = contract.LoanOfficer.Name;                  row[10] = contract.Rescheduled;                  row[11] = contract.GracePeriod.HasValue ? contract.GracePeriod.Value : 0;                  row[12] = contract.WrittenOff;                    //row[13] = contract.CollateralAmount;                  //row[14] = contract.Collateral != null ? contract.Collateral.Name : "-";                  row[15] = contract.BadLoan;                  //row[16] = contract.CommentsOfEnd;                  row[17] = contract.Product.Name;                  row[18] = contract.CalculatePastDueSinceLastRepayment(TimeProvider.Today);                  // row[19] = contract.Beneficiary.District.Name;                  dataset.Tables[0].Rows.Add(row);                    foreach (Installment installment in contract.InstallmentList)                  {                      DataRow row2 = dataset.Tables[1].NewRow();                      row2[0] = installment.Number;                      row2[1] = installment.ExpectedDate.ToShortDateString();                      if (installment.PaidDate.HasValue)                          row2[2] = installment.PaidDate.Value.ToShortDateString();                      else                          row2[2] = "-";                      row2[3] = installment.InterestsRepayment.ToString();                      row2[4] = installment.CapitalRepayment.ToString();                      row2[5] = installment.AmountHasToPayWithInterest.ToString();                      row2[6] = installment.OLB.ToString();                      row2[7] = installment.PaidInterests.ToString();                      row2[8] = installment.PaidCapital.ToString();                      dataset.Tables[1].Rows.Add(row2);                  }              }
Magic Number,OpenCBS.Services,ClientServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\ClientServices.cs,CreateContractHistoryDataSet,The following statement contains a magic number: foreach (Loan contract in pList)              {                  DataRow row = dataset.Tables[0].NewRow();                  // row[0] = contract.Beneficiary.Name;                  row[1] = contract.Code;                  row[2] = contract.Amount.ToString();                  row[3] = contract.InterestRate.ToString();                  row[4] = contract.InstallmentType.Name;                  row[5] = contract.NbOfInstallments.ToString();                  row[6] = contract.CreationDate.ToShortDateString();                  row[7] = contract.StartDate.ToShortDateString();                  row[8] = contract.CloseDate.ToShortDateString();                  row[9] = contract.LoanOfficer.Name;                  row[10] = contract.Rescheduled;                  row[11] = contract.GracePeriod.HasValue ? contract.GracePeriod.Value : 0;                  row[12] = contract.WrittenOff;                    //row[13] = contract.CollateralAmount;                  //row[14] = contract.Collateral != null ? contract.Collateral.Name : "-";                  row[15] = contract.BadLoan;                  //row[16] = contract.CommentsOfEnd;                  row[17] = contract.Product.Name;                  row[18] = contract.CalculatePastDueSinceLastRepayment(TimeProvider.Today);                  // row[19] = contract.Beneficiary.District.Name;                  dataset.Tables[0].Rows.Add(row);                    foreach (Installment installment in contract.InstallmentList)                  {                      DataRow row2 = dataset.Tables[1].NewRow();                      row2[0] = installment.Number;                      row2[1] = installment.ExpectedDate.ToShortDateString();                      if (installment.PaidDate.HasValue)                          row2[2] = installment.PaidDate.Value.ToShortDateString();                      else                          row2[2] = "-";                      row2[3] = installment.InterestsRepayment.ToString();                      row2[4] = installment.CapitalRepayment.ToString();                      row2[5] = installment.AmountHasToPayWithInterest.ToString();                      row2[6] = installment.OLB.ToString();                      row2[7] = installment.PaidInterests.ToString();                      row2[8] = installment.PaidCapital.ToString();                      dataset.Tables[1].Rows.Add(row2);                  }              }
Magic Number,OpenCBS.Services,ClientServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\ClientServices.cs,CreateContractHistoryDataSet,The following statement contains a magic number: foreach (Loan contract in pList)              {                  DataRow row = dataset.Tables[0].NewRow();                  // row[0] = contract.Beneficiary.Name;                  row[1] = contract.Code;                  row[2] = contract.Amount.ToString();                  row[3] = contract.InterestRate.ToString();                  row[4] = contract.InstallmentType.Name;                  row[5] = contract.NbOfInstallments.ToString();                  row[6] = contract.CreationDate.ToShortDateString();                  row[7] = contract.StartDate.ToShortDateString();                  row[8] = contract.CloseDate.ToShortDateString();                  row[9] = contract.LoanOfficer.Name;                  row[10] = contract.Rescheduled;                  row[11] = contract.GracePeriod.HasValue ? contract.GracePeriod.Value : 0;                  row[12] = contract.WrittenOff;                    //row[13] = contract.CollateralAmount;                  //row[14] = contract.Collateral != null ? contract.Collateral.Name : "-";                  row[15] = contract.BadLoan;                  //row[16] = contract.CommentsOfEnd;                  row[17] = contract.Product.Name;                  row[18] = contract.CalculatePastDueSinceLastRepayment(TimeProvider.Today);                  // row[19] = contract.Beneficiary.District.Name;                  dataset.Tables[0].Rows.Add(row);                    foreach (Installment installment in contract.InstallmentList)                  {                      DataRow row2 = dataset.Tables[1].NewRow();                      row2[0] = installment.Number;                      row2[1] = installment.ExpectedDate.ToShortDateString();                      if (installment.PaidDate.HasValue)                          row2[2] = installment.PaidDate.Value.ToShortDateString();                      else                          row2[2] = "-";                      row2[3] = installment.InterestsRepayment.ToString();                      row2[4] = installment.CapitalRepayment.ToString();                      row2[5] = installment.AmountHasToPayWithInterest.ToString();                      row2[6] = installment.OLB.ToString();                      row2[7] = installment.PaidInterests.ToString();                      row2[8] = installment.PaidCapital.ToString();                      dataset.Tables[1].Rows.Add(row2);                  }              }
Magic Number,OpenCBS.Services,ClientServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\ClientServices.cs,CreateContractHistoryDataSet,The following statement contains a magic number: foreach (Loan contract in pList)              {                  DataRow row = dataset.Tables[0].NewRow();                  // row[0] = contract.Beneficiary.Name;                  row[1] = contract.Code;                  row[2] = contract.Amount.ToString();                  row[3] = contract.InterestRate.ToString();                  row[4] = contract.InstallmentType.Name;                  row[5] = contract.NbOfInstallments.ToString();                  row[6] = contract.CreationDate.ToShortDateString();                  row[7] = contract.StartDate.ToShortDateString();                  row[8] = contract.CloseDate.ToShortDateString();                  row[9] = contract.LoanOfficer.Name;                  row[10] = contract.Rescheduled;                  row[11] = contract.GracePeriod.HasValue ? contract.GracePeriod.Value : 0;                  row[12] = contract.WrittenOff;                    //row[13] = contract.CollateralAmount;                  //row[14] = contract.Collateral != null ? contract.Collateral.Name : "-";                  row[15] = contract.BadLoan;                  //row[16] = contract.CommentsOfEnd;                  row[17] = contract.Product.Name;                  row[18] = contract.CalculatePastDueSinceLastRepayment(TimeProvider.Today);                  // row[19] = contract.Beneficiary.District.Name;                  dataset.Tables[0].Rows.Add(row);                    foreach (Installment installment in contract.InstallmentList)                  {                      DataRow row2 = dataset.Tables[1].NewRow();                      row2[0] = installment.Number;                      row2[1] = installment.ExpectedDate.ToShortDateString();                      if (installment.PaidDate.HasValue)                          row2[2] = installment.PaidDate.Value.ToShortDateString();                      else                          row2[2] = "-";                      row2[3] = installment.InterestsRepayment.ToString();                      row2[4] = installment.CapitalRepayment.ToString();                      row2[5] = installment.AmountHasToPayWithInterest.ToString();                      row2[6] = installment.OLB.ToString();                      row2[7] = installment.PaidInterests.ToString();                      row2[8] = installment.PaidCapital.ToString();                      dataset.Tables[1].Rows.Add(row2);                  }              }
Magic Number,OpenCBS.Services,ClientServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\ClientServices.cs,CreateContractHistoryDataSet,The following statement contains a magic number: foreach (Loan contract in pList)              {                  DataRow row = dataset.Tables[0].NewRow();                  // row[0] = contract.Beneficiary.Name;                  row[1] = contract.Code;                  row[2] = contract.Amount.ToString();                  row[3] = contract.InterestRate.ToString();                  row[4] = contract.InstallmentType.Name;                  row[5] = contract.NbOfInstallments.ToString();                  row[6] = contract.CreationDate.ToShortDateString();                  row[7] = contract.StartDate.ToShortDateString();                  row[8] = contract.CloseDate.ToShortDateString();                  row[9] = contract.LoanOfficer.Name;                  row[10] = contract.Rescheduled;                  row[11] = contract.GracePeriod.HasValue ? contract.GracePeriod.Value : 0;                  row[12] = contract.WrittenOff;                    //row[13] = contract.CollateralAmount;                  //row[14] = contract.Collateral != null ? contract.Collateral.Name : "-";                  row[15] = contract.BadLoan;                  //row[16] = contract.CommentsOfEnd;                  row[17] = contract.Product.Name;                  row[18] = contract.CalculatePastDueSinceLastRepayment(TimeProvider.Today);                  // row[19] = contract.Beneficiary.District.Name;                  dataset.Tables[0].Rows.Add(row);                    foreach (Installment installment in contract.InstallmentList)                  {                      DataRow row2 = dataset.Tables[1].NewRow();                      row2[0] = installment.Number;                      row2[1] = installment.ExpectedDate.ToShortDateString();                      if (installment.PaidDate.HasValue)                          row2[2] = installment.PaidDate.Value.ToShortDateString();                      else                          row2[2] = "-";                      row2[3] = installment.InterestsRepayment.ToString();                      row2[4] = installment.CapitalRepayment.ToString();                      row2[5] = installment.AmountHasToPayWithInterest.ToString();                      row2[6] = installment.OLB.ToString();                      row2[7] = installment.PaidInterests.ToString();                      row2[8] = installment.PaidCapital.ToString();                      dataset.Tables[1].Rows.Add(row2);                  }              }
Magic Number,OpenCBS.Services,ClientServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\ClientServices.cs,CreateContractHistoryDataSet,The following statement contains a magic number: foreach (Loan contract in pList)              {                  DataRow row = dataset.Tables[0].NewRow();                  // row[0] = contract.Beneficiary.Name;                  row[1] = contract.Code;                  row[2] = contract.Amount.ToString();                  row[3] = contract.InterestRate.ToString();                  row[4] = contract.InstallmentType.Name;                  row[5] = contract.NbOfInstallments.ToString();                  row[6] = contract.CreationDate.ToShortDateString();                  row[7] = contract.StartDate.ToShortDateString();                  row[8] = contract.CloseDate.ToShortDateString();                  row[9] = contract.LoanOfficer.Name;                  row[10] = contract.Rescheduled;                  row[11] = contract.GracePeriod.HasValue ? contract.GracePeriod.Value : 0;                  row[12] = contract.WrittenOff;                    //row[13] = contract.CollateralAmount;                  //row[14] = contract.Collateral != null ? contract.Collateral.Name : "-";                  row[15] = contract.BadLoan;                  //row[16] = contract.CommentsOfEnd;                  row[17] = contract.Product.Name;                  row[18] = contract.CalculatePastDueSinceLastRepayment(TimeProvider.Today);                  // row[19] = contract.Beneficiary.District.Name;                  dataset.Tables[0].Rows.Add(row);                    foreach (Installment installment in contract.InstallmentList)                  {                      DataRow row2 = dataset.Tables[1].NewRow();                      row2[0] = installment.Number;                      row2[1] = installment.ExpectedDate.ToShortDateString();                      if (installment.PaidDate.HasValue)                          row2[2] = installment.PaidDate.Value.ToShortDateString();                      else                          row2[2] = "-";                      row2[3] = installment.InterestsRepayment.ToString();                      row2[4] = installment.CapitalRepayment.ToString();                      row2[5] = installment.AmountHasToPayWithInterest.ToString();                      row2[6] = installment.OLB.ToString();                      row2[7] = installment.PaidInterests.ToString();                      row2[8] = installment.PaidCapital.ToString();                      dataset.Tables[1].Rows.Add(row2);                  }              }
Magic Number,OpenCBS.Services,ClientServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\ClientServices.cs,CreateContractHistoryDataSet,The following statement contains a magic number: foreach (Loan contract in pList)              {                  DataRow row = dataset.Tables[0].NewRow();                  // row[0] = contract.Beneficiary.Name;                  row[1] = contract.Code;                  row[2] = contract.Amount.ToString();                  row[3] = contract.InterestRate.ToString();                  row[4] = contract.InstallmentType.Name;                  row[5] = contract.NbOfInstallments.ToString();                  row[6] = contract.CreationDate.ToShortDateString();                  row[7] = contract.StartDate.ToShortDateString();                  row[8] = contract.CloseDate.ToShortDateString();                  row[9] = contract.LoanOfficer.Name;                  row[10] = contract.Rescheduled;                  row[11] = contract.GracePeriod.HasValue ? contract.GracePeriod.Value : 0;                  row[12] = contract.WrittenOff;                    //row[13] = contract.CollateralAmount;                  //row[14] = contract.Collateral != null ? contract.Collateral.Name : "-";                  row[15] = contract.BadLoan;                  //row[16] = contract.CommentsOfEnd;                  row[17] = contract.Product.Name;                  row[18] = contract.CalculatePastDueSinceLastRepayment(TimeProvider.Today);                  // row[19] = contract.Beneficiary.District.Name;                  dataset.Tables[0].Rows.Add(row);                    foreach (Installment installment in contract.InstallmentList)                  {                      DataRow row2 = dataset.Tables[1].NewRow();                      row2[0] = installment.Number;                      row2[1] = installment.ExpectedDate.ToShortDateString();                      if (installment.PaidDate.HasValue)                          row2[2] = installment.PaidDate.Value.ToShortDateString();                      else                          row2[2] = "-";                      row2[3] = installment.InterestsRepayment.ToString();                      row2[4] = installment.CapitalRepayment.ToString();                      row2[5] = installment.AmountHasToPayWithInterest.ToString();                      row2[6] = installment.OLB.ToString();                      row2[7] = installment.PaidInterests.ToString();                      row2[8] = installment.PaidCapital.ToString();                      dataset.Tables[1].Rows.Add(row2);                  }              }
Magic Number,OpenCBS.Services,ClientServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\ClientServices.cs,CreateContractHistoryDataSet,The following statement contains a magic number: foreach (Loan contract in pList)              {                  DataRow row = dataset.Tables[0].NewRow();                  // row[0] = contract.Beneficiary.Name;                  row[1] = contract.Code;                  row[2] = contract.Amount.ToString();                  row[3] = contract.InterestRate.ToString();                  row[4] = contract.InstallmentType.Name;                  row[5] = contract.NbOfInstallments.ToString();                  row[6] = contract.CreationDate.ToShortDateString();                  row[7] = contract.StartDate.ToShortDateString();                  row[8] = contract.CloseDate.ToShortDateString();                  row[9] = contract.LoanOfficer.Name;                  row[10] = contract.Rescheduled;                  row[11] = contract.GracePeriod.HasValue ? contract.GracePeriod.Value : 0;                  row[12] = contract.WrittenOff;                    //row[13] = contract.CollateralAmount;                  //row[14] = contract.Collateral != null ? contract.Collateral.Name : "-";                  row[15] = contract.BadLoan;                  //row[16] = contract.CommentsOfEnd;                  row[17] = contract.Product.Name;                  row[18] = contract.CalculatePastDueSinceLastRepayment(TimeProvider.Today);                  // row[19] = contract.Beneficiary.District.Name;                  dataset.Tables[0].Rows.Add(row);                    foreach (Installment installment in contract.InstallmentList)                  {                      DataRow row2 = dataset.Tables[1].NewRow();                      row2[0] = installment.Number;                      row2[1] = installment.ExpectedDate.ToShortDateString();                      if (installment.PaidDate.HasValue)                          row2[2] = installment.PaidDate.Value.ToShortDateString();                      else                          row2[2] = "-";                      row2[3] = installment.InterestsRepayment.ToString();                      row2[4] = installment.CapitalRepayment.ToString();                      row2[5] = installment.AmountHasToPayWithInterest.ToString();                      row2[6] = installment.OLB.ToString();                      row2[7] = installment.PaidInterests.ToString();                      row2[8] = installment.PaidCapital.ToString();                      dataset.Tables[1].Rows.Add(row2);                  }              }
Magic Number,OpenCBS.Services,ClientServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\ClientServices.cs,CreateContractHistoryDataSet,The following statement contains a magic number: foreach (Loan contract in pList)              {                  DataRow row = dataset.Tables[0].NewRow();                  // row[0] = contract.Beneficiary.Name;                  row[1] = contract.Code;                  row[2] = contract.Amount.ToString();                  row[3] = contract.InterestRate.ToString();                  row[4] = contract.InstallmentType.Name;                  row[5] = contract.NbOfInstallments.ToString();                  row[6] = contract.CreationDate.ToShortDateString();                  row[7] = contract.StartDate.ToShortDateString();                  row[8] = contract.CloseDate.ToShortDateString();                  row[9] = contract.LoanOfficer.Name;                  row[10] = contract.Rescheduled;                  row[11] = contract.GracePeriod.HasValue ? contract.GracePeriod.Value : 0;                  row[12] = contract.WrittenOff;                    //row[13] = contract.CollateralAmount;                  //row[14] = contract.Collateral != null ? contract.Collateral.Name : "-";                  row[15] = contract.BadLoan;                  //row[16] = contract.CommentsOfEnd;                  row[17] = contract.Product.Name;                  row[18] = contract.CalculatePastDueSinceLastRepayment(TimeProvider.Today);                  // row[19] = contract.Beneficiary.District.Name;                  dataset.Tables[0].Rows.Add(row);                    foreach (Installment installment in contract.InstallmentList)                  {                      DataRow row2 = dataset.Tables[1].NewRow();                      row2[0] = installment.Number;                      row2[1] = installment.ExpectedDate.ToShortDateString();                      if (installment.PaidDate.HasValue)                          row2[2] = installment.PaidDate.Value.ToShortDateString();                      else                          row2[2] = "-";                      row2[3] = installment.InterestsRepayment.ToString();                      row2[4] = installment.CapitalRepayment.ToString();                      row2[5] = installment.AmountHasToPayWithInterest.ToString();                      row2[6] = installment.OLB.ToString();                      row2[7] = installment.PaidInterests.ToString();                      row2[8] = installment.PaidCapital.ToString();                      dataset.Tables[1].Rows.Add(row2);                  }              }
Magic Number,OpenCBS.Services,ClientServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\ClientServices.cs,CreateContractHistoryDataSet,The following statement contains a magic number: foreach (Loan contract in pList)              {                  DataRow row = dataset.Tables[0].NewRow();                  // row[0] = contract.Beneficiary.Name;                  row[1] = contract.Code;                  row[2] = contract.Amount.ToString();                  row[3] = contract.InterestRate.ToString();                  row[4] = contract.InstallmentType.Name;                  row[5] = contract.NbOfInstallments.ToString();                  row[6] = contract.CreationDate.ToShortDateString();                  row[7] = contract.StartDate.ToShortDateString();                  row[8] = contract.CloseDate.ToShortDateString();                  row[9] = contract.LoanOfficer.Name;                  row[10] = contract.Rescheduled;                  row[11] = contract.GracePeriod.HasValue ? contract.GracePeriod.Value : 0;                  row[12] = contract.WrittenOff;                    //row[13] = contract.CollateralAmount;                  //row[14] = contract.Collateral != null ? contract.Collateral.Name : "-";                  row[15] = contract.BadLoan;                  //row[16] = contract.CommentsOfEnd;                  row[17] = contract.Product.Name;                  row[18] = contract.CalculatePastDueSinceLastRepayment(TimeProvider.Today);                  // row[19] = contract.Beneficiary.District.Name;                  dataset.Tables[0].Rows.Add(row);                    foreach (Installment installment in contract.InstallmentList)                  {                      DataRow row2 = dataset.Tables[1].NewRow();                      row2[0] = installment.Number;                      row2[1] = installment.ExpectedDate.ToShortDateString();                      if (installment.PaidDate.HasValue)                          row2[2] = installment.PaidDate.Value.ToShortDateString();                      else                          row2[2] = "-";                      row2[3] = installment.InterestsRepayment.ToString();                      row2[4] = installment.CapitalRepayment.ToString();                      row2[5] = installment.AmountHasToPayWithInterest.ToString();                      row2[6] = installment.OLB.ToString();                      row2[7] = installment.PaidInterests.ToString();                      row2[8] = installment.PaidCapital.ToString();                      dataset.Tables[1].Rows.Add(row2);                  }              }
Magic Number,OpenCBS.Services,ClientServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\ClientServices.cs,CreateContractHistoryDataSet,The following statement contains a magic number: foreach (Loan contract in pList)              {                  DataRow row = dataset.Tables[0].NewRow();                  // row[0] = contract.Beneficiary.Name;                  row[1] = contract.Code;                  row[2] = contract.Amount.ToString();                  row[3] = contract.InterestRate.ToString();                  row[4] = contract.InstallmentType.Name;                  row[5] = contract.NbOfInstallments.ToString();                  row[6] = contract.CreationDate.ToShortDateString();                  row[7] = contract.StartDate.ToShortDateString();                  row[8] = contract.CloseDate.ToShortDateString();                  row[9] = contract.LoanOfficer.Name;                  row[10] = contract.Rescheduled;                  row[11] = contract.GracePeriod.HasValue ? contract.GracePeriod.Value : 0;                  row[12] = contract.WrittenOff;                    //row[13] = contract.CollateralAmount;                  //row[14] = contract.Collateral != null ? contract.Collateral.Name : "-";                  row[15] = contract.BadLoan;                  //row[16] = contract.CommentsOfEnd;                  row[17] = contract.Product.Name;                  row[18] = contract.CalculatePastDueSinceLastRepayment(TimeProvider.Today);                  // row[19] = contract.Beneficiary.District.Name;                  dataset.Tables[0].Rows.Add(row);                    foreach (Installment installment in contract.InstallmentList)                  {                      DataRow row2 = dataset.Tables[1].NewRow();                      row2[0] = installment.Number;                      row2[1] = installment.ExpectedDate.ToShortDateString();                      if (installment.PaidDate.HasValue)                          row2[2] = installment.PaidDate.Value.ToShortDateString();                      else                          row2[2] = "-";                      row2[3] = installment.InterestsRepayment.ToString();                      row2[4] = installment.CapitalRepayment.ToString();                      row2[5] = installment.AmountHasToPayWithInterest.ToString();                      row2[6] = installment.OLB.ToString();                      row2[7] = installment.PaidInterests.ToString();                      row2[8] = installment.PaidCapital.ToString();                      dataset.Tables[1].Rows.Add(row2);                  }              }
Magic Number,OpenCBS.Services,ClientServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\ClientServices.cs,CreateContractHistoryDataSet,The following statement contains a magic number: foreach (Loan contract in pList)              {                  DataRow row = dataset.Tables[0].NewRow();                  // row[0] = contract.Beneficiary.Name;                  row[1] = contract.Code;                  row[2] = contract.Amount.ToString();                  row[3] = contract.InterestRate.ToString();                  row[4] = contract.InstallmentType.Name;                  row[5] = contract.NbOfInstallments.ToString();                  row[6] = contract.CreationDate.ToShortDateString();                  row[7] = contract.StartDate.ToShortDateString();                  row[8] = contract.CloseDate.ToShortDateString();                  row[9] = contract.LoanOfficer.Name;                  row[10] = contract.Rescheduled;                  row[11] = contract.GracePeriod.HasValue ? contract.GracePeriod.Value : 0;                  row[12] = contract.WrittenOff;                    //row[13] = contract.CollateralAmount;                  //row[14] = contract.Collateral != null ? contract.Collateral.Name : "-";                  row[15] = contract.BadLoan;                  //row[16] = contract.CommentsOfEnd;                  row[17] = contract.Product.Name;                  row[18] = contract.CalculatePastDueSinceLastRepayment(TimeProvider.Today);                  // row[19] = contract.Beneficiary.District.Name;                  dataset.Tables[0].Rows.Add(row);                    foreach (Installment installment in contract.InstallmentList)                  {                      DataRow row2 = dataset.Tables[1].NewRow();                      row2[0] = installment.Number;                      row2[1] = installment.ExpectedDate.ToShortDateString();                      if (installment.PaidDate.HasValue)                          row2[2] = installment.PaidDate.Value.ToShortDateString();                      else                          row2[2] = "-";                      row2[3] = installment.InterestsRepayment.ToString();                      row2[4] = installment.CapitalRepayment.ToString();                      row2[5] = installment.AmountHasToPayWithInterest.ToString();                      row2[6] = installment.OLB.ToString();                      row2[7] = installment.PaidInterests.ToString();                      row2[8] = installment.PaidCapital.ToString();                      dataset.Tables[1].Rows.Add(row2);                  }              }
Magic Number,OpenCBS.Services,ClientServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\ClientServices.cs,CreateContractHistoryDataSet,The following statement contains a magic number: foreach (Loan contract in pList)              {                  DataRow row = dataset.Tables[0].NewRow();                  // row[0] = contract.Beneficiary.Name;                  row[1] = contract.Code;                  row[2] = contract.Amount.ToString();                  row[3] = contract.InterestRate.ToString();                  row[4] = contract.InstallmentType.Name;                  row[5] = contract.NbOfInstallments.ToString();                  row[6] = contract.CreationDate.ToShortDateString();                  row[7] = contract.StartDate.ToShortDateString();                  row[8] = contract.CloseDate.ToShortDateString();                  row[9] = contract.LoanOfficer.Name;                  row[10] = contract.Rescheduled;                  row[11] = contract.GracePeriod.HasValue ? contract.GracePeriod.Value : 0;                  row[12] = contract.WrittenOff;                    //row[13] = contract.CollateralAmount;                  //row[14] = contract.Collateral != null ? contract.Collateral.Name : "-";                  row[15] = contract.BadLoan;                  //row[16] = contract.CommentsOfEnd;                  row[17] = contract.Product.Name;                  row[18] = contract.CalculatePastDueSinceLastRepayment(TimeProvider.Today);                  // row[19] = contract.Beneficiary.District.Name;                  dataset.Tables[0].Rows.Add(row);                    foreach (Installment installment in contract.InstallmentList)                  {                      DataRow row2 = dataset.Tables[1].NewRow();                      row2[0] = installment.Number;                      row2[1] = installment.ExpectedDate.ToShortDateString();                      if (installment.PaidDate.HasValue)                          row2[2] = installment.PaidDate.Value.ToShortDateString();                      else                          row2[2] = "-";                      row2[3] = installment.InterestsRepayment.ToString();                      row2[4] = installment.CapitalRepayment.ToString();                      row2[5] = installment.AmountHasToPayWithInterest.ToString();                      row2[6] = installment.OLB.ToString();                      row2[7] = installment.PaidInterests.ToString();                      row2[8] = installment.PaidCapital.ToString();                      dataset.Tables[1].Rows.Add(row2);                  }              }
Magic Number,OpenCBS.Services,ClientServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\ClientServices.cs,CreateContractHistoryDataSet,The following statement contains a magic number: foreach (Loan contract in pList)              {                  DataRow row = dataset.Tables[0].NewRow();                  // row[0] = contract.Beneficiary.Name;                  row[1] = contract.Code;                  row[2] = contract.Amount.ToString();                  row[3] = contract.InterestRate.ToString();                  row[4] = contract.InstallmentType.Name;                  row[5] = contract.NbOfInstallments.ToString();                  row[6] = contract.CreationDate.ToShortDateString();                  row[7] = contract.StartDate.ToShortDateString();                  row[8] = contract.CloseDate.ToShortDateString();                  row[9] = contract.LoanOfficer.Name;                  row[10] = contract.Rescheduled;                  row[11] = contract.GracePeriod.HasValue ? contract.GracePeriod.Value : 0;                  row[12] = contract.WrittenOff;                    //row[13] = contract.CollateralAmount;                  //row[14] = contract.Collateral != null ? contract.Collateral.Name : "-";                  row[15] = contract.BadLoan;                  //row[16] = contract.CommentsOfEnd;                  row[17] = contract.Product.Name;                  row[18] = contract.CalculatePastDueSinceLastRepayment(TimeProvider.Today);                  // row[19] = contract.Beneficiary.District.Name;                  dataset.Tables[0].Rows.Add(row);                    foreach (Installment installment in contract.InstallmentList)                  {                      DataRow row2 = dataset.Tables[1].NewRow();                      row2[0] = installment.Number;                      row2[1] = installment.ExpectedDate.ToShortDateString();                      if (installment.PaidDate.HasValue)                          row2[2] = installment.PaidDate.Value.ToShortDateString();                      else                          row2[2] = "-";                      row2[3] = installment.InterestsRepayment.ToString();                      row2[4] = installment.CapitalRepayment.ToString();                      row2[5] = installment.AmountHasToPayWithInterest.ToString();                      row2[6] = installment.OLB.ToString();                      row2[7] = installment.PaidInterests.ToString();                      row2[8] = installment.PaidCapital.ToString();                      dataset.Tables[1].Rows.Add(row2);                  }              }
Magic Number,OpenCBS.Services,ClientServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\ClientServices.cs,CreateContractHistoryDataSet,The following statement contains a magic number: foreach (Loan contract in pList)              {                  DataRow row = dataset.Tables[0].NewRow();                  // row[0] = contract.Beneficiary.Name;                  row[1] = contract.Code;                  row[2] = contract.Amount.ToString();                  row[3] = contract.InterestRate.ToString();                  row[4] = contract.InstallmentType.Name;                  row[5] = contract.NbOfInstallments.ToString();                  row[6] = contract.CreationDate.ToShortDateString();                  row[7] = contract.StartDate.ToShortDateString();                  row[8] = contract.CloseDate.ToShortDateString();                  row[9] = contract.LoanOfficer.Name;                  row[10] = contract.Rescheduled;                  row[11] = contract.GracePeriod.HasValue ? contract.GracePeriod.Value : 0;                  row[12] = contract.WrittenOff;                    //row[13] = contract.CollateralAmount;                  //row[14] = contract.Collateral != null ? contract.Collateral.Name : "-";                  row[15] = contract.BadLoan;                  //row[16] = contract.CommentsOfEnd;                  row[17] = contract.Product.Name;                  row[18] = contract.CalculatePastDueSinceLastRepayment(TimeProvider.Today);                  // row[19] = contract.Beneficiary.District.Name;                  dataset.Tables[0].Rows.Add(row);                    foreach (Installment installment in contract.InstallmentList)                  {                      DataRow row2 = dataset.Tables[1].NewRow();                      row2[0] = installment.Number;                      row2[1] = installment.ExpectedDate.ToShortDateString();                      if (installment.PaidDate.HasValue)                          row2[2] = installment.PaidDate.Value.ToShortDateString();                      else                          row2[2] = "-";                      row2[3] = installment.InterestsRepayment.ToString();                      row2[4] = installment.CapitalRepayment.ToString();                      row2[5] = installment.AmountHasToPayWithInterest.ToString();                      row2[6] = installment.OLB.ToString();                      row2[7] = installment.PaidInterests.ToString();                      row2[8] = installment.PaidCapital.ToString();                      dataset.Tables[1].Rows.Add(row2);                  }              }
Magic Number,OpenCBS.Services,ClientServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\ClientServices.cs,CreateContractHistoryDataSet,The following statement contains a magic number: foreach (Loan contract in pList)              {                  DataRow row = dataset.Tables[0].NewRow();                  // row[0] = contract.Beneficiary.Name;                  row[1] = contract.Code;                  row[2] = contract.Amount.ToString();                  row[3] = contract.InterestRate.ToString();                  row[4] = contract.InstallmentType.Name;                  row[5] = contract.NbOfInstallments.ToString();                  row[6] = contract.CreationDate.ToShortDateString();                  row[7] = contract.StartDate.ToShortDateString();                  row[8] = contract.CloseDate.ToShortDateString();                  row[9] = contract.LoanOfficer.Name;                  row[10] = contract.Rescheduled;                  row[11] = contract.GracePeriod.HasValue ? contract.GracePeriod.Value : 0;                  row[12] = contract.WrittenOff;                    //row[13] = contract.CollateralAmount;                  //row[14] = contract.Collateral != null ? contract.Collateral.Name : "-";                  row[15] = contract.BadLoan;                  //row[16] = contract.CommentsOfEnd;                  row[17] = contract.Product.Name;                  row[18] = contract.CalculatePastDueSinceLastRepayment(TimeProvider.Today);                  // row[19] = contract.Beneficiary.District.Name;                  dataset.Tables[0].Rows.Add(row);                    foreach (Installment installment in contract.InstallmentList)                  {                      DataRow row2 = dataset.Tables[1].NewRow();                      row2[0] = installment.Number;                      row2[1] = installment.ExpectedDate.ToShortDateString();                      if (installment.PaidDate.HasValue)                          row2[2] = installment.PaidDate.Value.ToShortDateString();                      else                          row2[2] = "-";                      row2[3] = installment.InterestsRepayment.ToString();                      row2[4] = installment.CapitalRepayment.ToString();                      row2[5] = installment.AmountHasToPayWithInterest.ToString();                      row2[6] = installment.OLB.ToString();                      row2[7] = installment.PaidInterests.ToString();                      row2[8] = installment.PaidCapital.ToString();                      dataset.Tables[1].Rows.Add(row2);                  }              }
Magic Number,OpenCBS.Services,ClientServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\ClientServices.cs,CreateContractHistoryDataSet,The following statement contains a magic number: foreach (Loan contract in pList)              {                  DataRow row = dataset.Tables[0].NewRow();                  // row[0] = contract.Beneficiary.Name;                  row[1] = contract.Code;                  row[2] = contract.Amount.ToString();                  row[3] = contract.InterestRate.ToString();                  row[4] = contract.InstallmentType.Name;                  row[5] = contract.NbOfInstallments.ToString();                  row[6] = contract.CreationDate.ToShortDateString();                  row[7] = contract.StartDate.ToShortDateString();                  row[8] = contract.CloseDate.ToShortDateString();                  row[9] = contract.LoanOfficer.Name;                  row[10] = contract.Rescheduled;                  row[11] = contract.GracePeriod.HasValue ? contract.GracePeriod.Value : 0;                  row[12] = contract.WrittenOff;                    //row[13] = contract.CollateralAmount;                  //row[14] = contract.Collateral != null ? contract.Collateral.Name : "-";                  row[15] = contract.BadLoan;                  //row[16] = contract.CommentsOfEnd;                  row[17] = contract.Product.Name;                  row[18] = contract.CalculatePastDueSinceLastRepayment(TimeProvider.Today);                  // row[19] = contract.Beneficiary.District.Name;                  dataset.Tables[0].Rows.Add(row);                    foreach (Installment installment in contract.InstallmentList)                  {                      DataRow row2 = dataset.Tables[1].NewRow();                      row2[0] = installment.Number;                      row2[1] = installment.ExpectedDate.ToShortDateString();                      if (installment.PaidDate.HasValue)                          row2[2] = installment.PaidDate.Value.ToShortDateString();                      else                          row2[2] = "-";                      row2[3] = installment.InterestsRepayment.ToString();                      row2[4] = installment.CapitalRepayment.ToString();                      row2[5] = installment.AmountHasToPayWithInterest.ToString();                      row2[6] = installment.OLB.ToString();                      row2[7] = installment.PaidInterests.ToString();                      row2[8] = installment.PaidCapital.ToString();                      dataset.Tables[1].Rows.Add(row2);                  }              }
Magic Number,OpenCBS.Services,ClientServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\ClientServices.cs,CreateContractHistoryDataSet,The following statement contains a magic number: foreach (Loan contract in pList)              {                  DataRow row = dataset.Tables[0].NewRow();                  // row[0] = contract.Beneficiary.Name;                  row[1] = contract.Code;                  row[2] = contract.Amount.ToString();                  row[3] = contract.InterestRate.ToString();                  row[4] = contract.InstallmentType.Name;                  row[5] = contract.NbOfInstallments.ToString();                  row[6] = contract.CreationDate.ToShortDateString();                  row[7] = contract.StartDate.ToShortDateString();                  row[8] = contract.CloseDate.ToShortDateString();                  row[9] = contract.LoanOfficer.Name;                  row[10] = contract.Rescheduled;                  row[11] = contract.GracePeriod.HasValue ? contract.GracePeriod.Value : 0;                  row[12] = contract.WrittenOff;                    //row[13] = contract.CollateralAmount;                  //row[14] = contract.Collateral != null ? contract.Collateral.Name : "-";                  row[15] = contract.BadLoan;                  //row[16] = contract.CommentsOfEnd;                  row[17] = contract.Product.Name;                  row[18] = contract.CalculatePastDueSinceLastRepayment(TimeProvider.Today);                  // row[19] = contract.Beneficiary.District.Name;                  dataset.Tables[0].Rows.Add(row);                    foreach (Installment installment in contract.InstallmentList)                  {                      DataRow row2 = dataset.Tables[1].NewRow();                      row2[0] = installment.Number;                      row2[1] = installment.ExpectedDate.ToShortDateString();                      if (installment.PaidDate.HasValue)                          row2[2] = installment.PaidDate.Value.ToShortDateString();                      else                          row2[2] = "-";                      row2[3] = installment.InterestsRepayment.ToString();                      row2[4] = installment.CapitalRepayment.ToString();                      row2[5] = installment.AmountHasToPayWithInterest.ToString();                      row2[6] = installment.OLB.ToString();                      row2[7] = installment.PaidInterests.ToString();                      row2[8] = installment.PaidCapital.ToString();                      dataset.Tables[1].Rows.Add(row2);                  }              }
Magic Number,OpenCBS.Services,ClientServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\ClientServices.cs,CreateContractHistoryDataSet,The following statement contains a magic number: foreach (Loan contract in pList)              {                  DataRow row = dataset.Tables[0].NewRow();                  // row[0] = contract.Beneficiary.Name;                  row[1] = contract.Code;                  row[2] = contract.Amount.ToString();                  row[3] = contract.InterestRate.ToString();                  row[4] = contract.InstallmentType.Name;                  row[5] = contract.NbOfInstallments.ToString();                  row[6] = contract.CreationDate.ToShortDateString();                  row[7] = contract.StartDate.ToShortDateString();                  row[8] = contract.CloseDate.ToShortDateString();                  row[9] = contract.LoanOfficer.Name;                  row[10] = contract.Rescheduled;                  row[11] = contract.GracePeriod.HasValue ? contract.GracePeriod.Value : 0;                  row[12] = contract.WrittenOff;                    //row[13] = contract.CollateralAmount;                  //row[14] = contract.Collateral != null ? contract.Collateral.Name : "-";                  row[15] = contract.BadLoan;                  //row[16] = contract.CommentsOfEnd;                  row[17] = contract.Product.Name;                  row[18] = contract.CalculatePastDueSinceLastRepayment(TimeProvider.Today);                  // row[19] = contract.Beneficiary.District.Name;                  dataset.Tables[0].Rows.Add(row);                    foreach (Installment installment in contract.InstallmentList)                  {                      DataRow row2 = dataset.Tables[1].NewRow();                      row2[0] = installment.Number;                      row2[1] = installment.ExpectedDate.ToShortDateString();                      if (installment.PaidDate.HasValue)                          row2[2] = installment.PaidDate.Value.ToShortDateString();                      else                          row2[2] = "-";                      row2[3] = installment.InterestsRepayment.ToString();                      row2[4] = installment.CapitalRepayment.ToString();                      row2[5] = installment.AmountHasToPayWithInterest.ToString();                      row2[6] = installment.OLB.ToString();                      row2[7] = installment.PaidInterests.ToString();                      row2[8] = installment.PaidCapital.ToString();                      dataset.Tables[1].Rows.Add(row2);                  }              }
Magic Number,OpenCBS.Services,ClientServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\ClientServices.cs,CreateContractHistoryDataSet,The following statement contains a magic number: foreach (Loan contract in pList)              {                  DataRow row = dataset.Tables[0].NewRow();                  // row[0] = contract.Beneficiary.Name;                  row[1] = contract.Code;                  row[2] = contract.Amount.ToString();                  row[3] = contract.InterestRate.ToString();                  row[4] = contract.InstallmentType.Name;                  row[5] = contract.NbOfInstallments.ToString();                  row[6] = contract.CreationDate.ToShortDateString();                  row[7] = contract.StartDate.ToShortDateString();                  row[8] = contract.CloseDate.ToShortDateString();                  row[9] = contract.LoanOfficer.Name;                  row[10] = contract.Rescheduled;                  row[11] = contract.GracePeriod.HasValue ? contract.GracePeriod.Value : 0;                  row[12] = contract.WrittenOff;                    //row[13] = contract.CollateralAmount;                  //row[14] = contract.Collateral != null ? contract.Collateral.Name : "-";                  row[15] = contract.BadLoan;                  //row[16] = contract.CommentsOfEnd;                  row[17] = contract.Product.Name;                  row[18] = contract.CalculatePastDueSinceLastRepayment(TimeProvider.Today);                  // row[19] = contract.Beneficiary.District.Name;                  dataset.Tables[0].Rows.Add(row);                    foreach (Installment installment in contract.InstallmentList)                  {                      DataRow row2 = dataset.Tables[1].NewRow();                      row2[0] = installment.Number;                      row2[1] = installment.ExpectedDate.ToShortDateString();                      if (installment.PaidDate.HasValue)                          row2[2] = installment.PaidDate.Value.ToShortDateString();                      else                          row2[2] = "-";                      row2[3] = installment.InterestsRepayment.ToString();                      row2[4] = installment.CapitalRepayment.ToString();                      row2[5] = installment.AmountHasToPayWithInterest.ToString();                      row2[6] = installment.OLB.ToString();                      row2[7] = installment.PaidInterests.ToString();                      row2[8] = installment.PaidCapital.ToString();                      dataset.Tables[1].Rows.Add(row2);                  }              }
Magic Number,OpenCBS.Services,ClientServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\ClientServices.cs,CreateContractHistoryDataSet,The following statement contains a magic number: foreach (Loan contract in pList)              {                  DataRow row = dataset.Tables[0].NewRow();                  // row[0] = contract.Beneficiary.Name;                  row[1] = contract.Code;                  row[2] = contract.Amount.ToString();                  row[3] = contract.InterestRate.ToString();                  row[4] = contract.InstallmentType.Name;                  row[5] = contract.NbOfInstallments.ToString();                  row[6] = contract.CreationDate.ToShortDateString();                  row[7] = contract.StartDate.ToShortDateString();                  row[8] = contract.CloseDate.ToShortDateString();                  row[9] = contract.LoanOfficer.Name;                  row[10] = contract.Rescheduled;                  row[11] = contract.GracePeriod.HasValue ? contract.GracePeriod.Value : 0;                  row[12] = contract.WrittenOff;                    //row[13] = contract.CollateralAmount;                  //row[14] = contract.Collateral != null ? contract.Collateral.Name : "-";                  row[15] = contract.BadLoan;                  //row[16] = contract.CommentsOfEnd;                  row[17] = contract.Product.Name;                  row[18] = contract.CalculatePastDueSinceLastRepayment(TimeProvider.Today);                  // row[19] = contract.Beneficiary.District.Name;                  dataset.Tables[0].Rows.Add(row);                    foreach (Installment installment in contract.InstallmentList)                  {                      DataRow row2 = dataset.Tables[1].NewRow();                      row2[0] = installment.Number;                      row2[1] = installment.ExpectedDate.ToShortDateString();                      if (installment.PaidDate.HasValue)                          row2[2] = installment.PaidDate.Value.ToShortDateString();                      else                          row2[2] = "-";                      row2[3] = installment.InterestsRepayment.ToString();                      row2[4] = installment.CapitalRepayment.ToString();                      row2[5] = installment.AmountHasToPayWithInterest.ToString();                      row2[6] = installment.OLB.ToString();                      row2[7] = installment.PaidInterests.ToString();                      row2[8] = installment.PaidCapital.ToString();                      dataset.Tables[1].Rows.Add(row2);                  }              }
Magic Number,OpenCBS.Services,ClientServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\ClientServices.cs,CreateContractHistoryDataSet,The following statement contains a magic number: foreach (Loan contract in pList)              {                  DataRow row = dataset.Tables[0].NewRow();                  // row[0] = contract.Beneficiary.Name;                  row[1] = contract.Code;                  row[2] = contract.Amount.ToString();                  row[3] = contract.InterestRate.ToString();                  row[4] = contract.InstallmentType.Name;                  row[5] = contract.NbOfInstallments.ToString();                  row[6] = contract.CreationDate.ToShortDateString();                  row[7] = contract.StartDate.ToShortDateString();                  row[8] = contract.CloseDate.ToShortDateString();                  row[9] = contract.LoanOfficer.Name;                  row[10] = contract.Rescheduled;                  row[11] = contract.GracePeriod.HasValue ? contract.GracePeriod.Value : 0;                  row[12] = contract.WrittenOff;                    //row[13] = contract.CollateralAmount;                  //row[14] = contract.Collateral != null ? contract.Collateral.Name : "-";                  row[15] = contract.BadLoan;                  //row[16] = contract.CommentsOfEnd;                  row[17] = contract.Product.Name;                  row[18] = contract.CalculatePastDueSinceLastRepayment(TimeProvider.Today);                  // row[19] = contract.Beneficiary.District.Name;                  dataset.Tables[0].Rows.Add(row);                    foreach (Installment installment in contract.InstallmentList)                  {                      DataRow row2 = dataset.Tables[1].NewRow();                      row2[0] = installment.Number;                      row2[1] = installment.ExpectedDate.ToShortDateString();                      if (installment.PaidDate.HasValue)                          row2[2] = installment.PaidDate.Value.ToShortDateString();                      else                          row2[2] = "-";                      row2[3] = installment.InterestsRepayment.ToString();                      row2[4] = installment.CapitalRepayment.ToString();                      row2[5] = installment.AmountHasToPayWithInterest.ToString();                      row2[6] = installment.OLB.ToString();                      row2[7] = installment.PaidInterests.ToString();                      row2[8] = installment.PaidCapital.ToString();                      dataset.Tables[1].Rows.Add(row2);                  }              }
Magic Number,OpenCBS.Services,ClientServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\ClientServices.cs,AddPerson,The following statement contains a magic number: using (SqlConnection connection = _clientManagement.GetConnection())              using (SqlTransaction transac = connection.BeginTransaction())              {                  pPerson.Scoring = 0.6;                  try                  {                      //string fnFormat = string.Format(@"{{0:{0}}}"' _dataParam.FirstNameFormat);                      //string lnFormat = string.Format(@"{{0:{0}}}"' _dataParam.LastNameFormat);                        //pPerson.FirstName = string.Format(fnFormat' pPerson.FirstName);                      //pPerson.LastName = string.Format(lnFormat' pPerson.LastName);                        pPerson.FirstName = string.Format(pPerson.FirstName);                      pPerson.LastName = string.Format(pPerson.LastName);                        if (pPerson.IdentificationData == null)                      {                          pPerson.IdentificationData = "test";                          pPerson.Id = _clientManagement.AddPerson(pPerson' transac);                          pPerson.IdentificationData = pPerson.Id.ToString();                          _clientManagement.UpdatePersonIdentificationData(pPerson.Id' transac);                      }                      else                      {                          pPerson.Id = _clientManagement.AddPerson(pPerson' transac);                      }                        if (action != null) action(transac' pPerson.Id);                        transac.Commit();                      return pPerson.Id;                  }                  catch (Exception ex)                  {                      pPerson.Id = 0;                      System.Diagnostics.Debug.WriteLine(ex.Message);                      transac.Rollback();                      throw ex;                  }              }
Magic Number,OpenCBS.Services,ClientServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\ClientServices.cs,AddGroup,The following statement contains a magic number: using (SqlConnection connection = _clientManagement.GetConnection())              using (SqlTransaction sqlTransac = connection.BeginTransaction())              {                  group.Scoring = 0.6;                  try                  {                      _clientManagement.AddNewGroup(group' sqlTransac);                      if (action != null) action(sqlTransac' group.Id);                      sqlTransac.Commit();                      return group.Id;                  }                  catch (Exception ex)                  {                      sqlTransac.Rollback();                      throw ex;                  }              }
Magic Number,OpenCBS.Services,LoanServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\LoanServices.cs,AssembleRescheduling,The following statement contains a magic number: var extraInterest = currentOlb * scheduleConfiguration.InterestRate / 100 * usedDays / daysInYear;
Magic Number,OpenCBS.Services,LoanServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\LoanServices.cs,AssembleRescheduling,The following statement contains a magic number: if (rescheduleConfiguration.GracePeriod == 0 || rescheduleConfiguration.ChargeInterestDuringGracePeriod)                  firstInterest = currentOlb*rescheduleConfiguration.InterestRate/100*daysTillRepayment/daysInYear;
Magic Number,OpenCBS.Services,LoanServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\LoanServices.cs,AssembleRescheduling,The following statement contains a magic number: copyOfLoan.InterestRate = rescheduleConfiguration.InterestRate/100;
Magic Number,OpenCBS.Services,LoanServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\LoanServices.cs,BuildTranche,The following statement contains a magic number: loan.InterestRate = trancheConfiguration.InterestRate/100;
Magic Number,OpenCBS.Services,LoanServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\LoanServices.cs,GetExtraInterest,The following statement contains a magic number: var interest = olb * scheduleConfiguration.InterestRate / 100 * days / daysInYear;
Magic Number,OpenCBS.Services,LoanServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\LoanServices.cs,AddTranche,The following statement contains a magic number: using (var connection = _loanManager.GetConnection())              using (var transaction = connection.BeginTransaction())              {                  try                  {                      CheckTranche(trancheConfiguration.StartDate' loan' trancheConfiguration.Amount);                        var copyOfLoan = SimulateTranche(loan' trancheConfiguration);                      var startInstallment =                          copyOfLoan.InstallmentList                                    .FindAll(i => i.ExpectedDate <= trancheConfiguration.StartDate)                                    .LastOrDefault();                      var trancheEvent = new TrancheEvent                          {                              Amount = trancheConfiguration.Amount'                              ApplyNewInterest = trancheConfiguration.ApplyNewInterestRateToOlb'                              Maturity = trancheConfiguration.NumberOfInstallments'                              StartDate = trancheConfiguration.StartDate'                              Date = TimeProvider.Now'                              InterestRate = trancheConfiguration.InterestRate / 100'                              Number = copyOfLoan.GivenTranches.Count'                              FirstRepaymentDate = trancheConfiguration.PreferredFirstInstallmentDate'                              GracePeriod = trancheConfiguration.GracePeriod'                              StartedFromInstallment = startInstallment == null ? 0 : startInstallment.Number'                              User = _user'                              PaymentMethod = paymentMethod'                              PaymentMethodId = paymentMethod.Id'                              Cancelable = true                          };                        trancheEvent.User = _user;                        //insert into table TrancheEvent                      _ePs.FireEvent(trancheEvent' copyOfLoan' transaction);                      copyOfLoan.Events.Add(trancheEvent);                        CallInterceptor(new Dictionary<string' object>                      {                          {"Loan"' copyOfLoan}'                          {"Event"' trancheEvent}'                          {"SqlTransaction"' transaction}                      });                        // Add entry fee events                      foreach (var entryFee in entryFees)                      {                          if (entryFee.FeeValue == 0) continue;                          var entryFeeEvent = new LoanEntryFeeEvent                          {                              Fee = entryFee.FeeValue'                              Code = "LEE" + entryFee.ProductEntryFee.Index'                              DisbursementEventId = trancheEvent.Id'                              Cancelable = true'                              User = User.CurrentUser'                              Date = trancheEvent.Date'                          };                          _ePs.FireEvent(entryFeeEvent' copyOfLoan' transaction);                          copyOfLoan.Events.Add(entryFeeEvent);                      }                      _loanManager.InsertLoanEntryFees(entryFees.ToList()' loan.Id' transaction);                        var trancheEntryFeeEvent =                          copyOfLoan.Events.OfType<LoanEntryFeeEvent>()                                    .FirstOrDefault(i => i.DisbursementEventId == trancheEvent.Id);                      if (trancheEntryFeeEvent != null)                          CallInterceptor(new Dictionary<string' object>                          {                              {"Loan"' copyOfLoan}'                              {                                  "Event"' new LoanEntryFeeEvent                                      {                                          Id = trancheEntryFeeEvent.Id'                                          Fee = entryFees.Sum(i => i.FeeValue)'                                          Code = "LEE0"                                      }                              }'                              {"SqlTransaction"' transaction}                          });                        ArchiveInstallments(loan' trancheEvent' transaction);                        //delete all the old installments of the table Installments                      _instalmentManager.DeleteInstallments(loan.Id' transaction);                        //insert all the new installments in the table Installments                      _instalmentManager.AddInstallments(copyOfLoan.InstallmentList' copyOfLoan.Id' transaction);                        //Activate the contract if it's closed because of new tranch                      if (copyOfLoan.Closed)                      {                          copyOfLoan.ContractStatus = OContractStatus.Active;                          copyOfLoan.Closed = false;                          _loanManager.UpdateLoan(copyOfLoan' transaction);                      }                      //in the feature might be combine UpdateLoan + UpdateLoanWithinTranche                      _loanManager.UpdateLoanWithinTranche(                          trancheConfiguration.InterestRate / 100'                          copyOfLoan.NbOfInstallments'                          copyOfLoan'                          transaction);                      copyOfLoan.GivenTranches.Add(trancheEvent);                      transaction.Commit();                        SetClientStatus(copyOfLoan' client);                      return copyOfLoan;                  }                  catch                  {                      transaction.Rollback();                      throw;                  }              }
Magic Number,OpenCBS.Services,LoanServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\LoanServices.cs,AddTranche,The following statement contains a magic number: using (var connection = _loanManager.GetConnection())              using (var transaction = connection.BeginTransaction())              {                  try                  {                      CheckTranche(trancheConfiguration.StartDate' loan' trancheConfiguration.Amount);                        var copyOfLoan = SimulateTranche(loan' trancheConfiguration);                      var startInstallment =                          copyOfLoan.InstallmentList                                    .FindAll(i => i.ExpectedDate <= trancheConfiguration.StartDate)                                    .LastOrDefault();                      var trancheEvent = new TrancheEvent                          {                              Amount = trancheConfiguration.Amount'                              ApplyNewInterest = trancheConfiguration.ApplyNewInterestRateToOlb'                              Maturity = trancheConfiguration.NumberOfInstallments'                              StartDate = trancheConfiguration.StartDate'                              Date = TimeProvider.Now'                              InterestRate = trancheConfiguration.InterestRate / 100'                              Number = copyOfLoan.GivenTranches.Count'                              FirstRepaymentDate = trancheConfiguration.PreferredFirstInstallmentDate'                              GracePeriod = trancheConfiguration.GracePeriod'                              StartedFromInstallment = startInstallment == null ? 0 : startInstallment.Number'                              User = _user'                              PaymentMethod = paymentMethod'                              PaymentMethodId = paymentMethod.Id'                              Cancelable = true                          };                        trancheEvent.User = _user;                        //insert into table TrancheEvent                      _ePs.FireEvent(trancheEvent' copyOfLoan' transaction);                      copyOfLoan.Events.Add(trancheEvent);                        CallInterceptor(new Dictionary<string' object>                      {                          {"Loan"' copyOfLoan}'                          {"Event"' trancheEvent}'                          {"SqlTransaction"' transaction}                      });                        // Add entry fee events                      foreach (var entryFee in entryFees)                      {                          if (entryFee.FeeValue == 0) continue;                          var entryFeeEvent = new LoanEntryFeeEvent                          {                              Fee = entryFee.FeeValue'                              Code = "LEE" + entryFee.ProductEntryFee.Index'                              DisbursementEventId = trancheEvent.Id'                              Cancelable = true'                              User = User.CurrentUser'                              Date = trancheEvent.Date'                          };                          _ePs.FireEvent(entryFeeEvent' copyOfLoan' transaction);                          copyOfLoan.Events.Add(entryFeeEvent);                      }                      _loanManager.InsertLoanEntryFees(entryFees.ToList()' loan.Id' transaction);                        var trancheEntryFeeEvent =                          copyOfLoan.Events.OfType<LoanEntryFeeEvent>()                                    .FirstOrDefault(i => i.DisbursementEventId == trancheEvent.Id);                      if (trancheEntryFeeEvent != null)                          CallInterceptor(new Dictionary<string' object>                          {                              {"Loan"' copyOfLoan}'                              {                                  "Event"' new LoanEntryFeeEvent                                      {                                          Id = trancheEntryFeeEvent.Id'                                          Fee = entryFees.Sum(i => i.FeeValue)'                                          Code = "LEE0"                                      }                              }'                              {"SqlTransaction"' transaction}                          });                        ArchiveInstallments(loan' trancheEvent' transaction);                        //delete all the old installments of the table Installments                      _instalmentManager.DeleteInstallments(loan.Id' transaction);                        //insert all the new installments in the table Installments                      _instalmentManager.AddInstallments(copyOfLoan.InstallmentList' copyOfLoan.Id' transaction);                        //Activate the contract if it's closed because of new tranch                      if (copyOfLoan.Closed)                      {                          copyOfLoan.ContractStatus = OContractStatus.Active;                          copyOfLoan.Closed = false;                          _loanManager.UpdateLoan(copyOfLoan' transaction);                      }                      //in the feature might be combine UpdateLoan + UpdateLoanWithinTranche                      _loanManager.UpdateLoanWithinTranche(                          trancheConfiguration.InterestRate / 100'                          copyOfLoan.NbOfInstallments'                          copyOfLoan'                          transaction);                      copyOfLoan.GivenTranches.Add(trancheEvent);                      transaction.Commit();                        SetClientStatus(copyOfLoan' client);                      return copyOfLoan;                  }                  catch                  {                      transaction.Rollback();                      throw;                  }              }
Magic Number,OpenCBS.Services,LoanServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\LoanServices.cs,ShowNewContract,The following statement contains a magic number: expectedMaxAmount = fakeContract.UseCents                                      ? Math.Round(expectedMaxAmount.Value' 2' MidpointRounding.AwayFromZero)                                      : expectedMaxAmount;
Magic Number,OpenCBS.Services,LoanServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\LoanServices.cs,FindContracts,The following statement contains a magic number: pNumbersTotalPage = (pNumberOfRecords / 20) + 1;
Magic Number,OpenCBS.Services,SavingServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\SavingServices.cs,CheckVirtualBalance,The following statement contains a magic number: if ((saving.Loans != null && (saving.Loans.Count > 0)))              {                  decimal balance = saving.GetBalance().Value;                  foreach (Loan assosiatedLoan in saving.Loans)                  {                      if (assosiatedLoan.ContractStatus == OContractStatus.Active)                      {                          if (assosiatedLoan.CompulsorySavingsPercentage != null)                              totalAmountPercentage += (assosiatedLoan.Amount.Value * (decimal)assosiatedLoan.CompulsorySavingsPercentage) / 100;                      }                  }                    if ((balance - totalAmountPercentage) < totalAmount)                  {                      return totalAmountPercentage;                  }              }
Magic Number,OpenCBS.Services,SavingServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\SavingServices.cs,IsCompulsorySavingBalanceOk,The following statement contains a magic number: foreach (Loan assosiatedLoan in ((SavingBookContract)saving).Loans)              {                  if (assosiatedLoan.ContractStatus == OContractStatus.Active)                  {                      if (assosiatedLoan.CompulsorySavingsPercentage != null)                          totalLoansAmount += (assosiatedLoan.Amount.Value *                                               ((decimal)assosiatedLoan.CompulsorySavingsPercentage / 100));                  }              }
Magic Number,OpenCBS.Services,SavingServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\SavingServices.cs,SelectEventsForClosure,The following statement contains a magic number: endDate.AddHours(23);
Magic Number,OpenCBS.Services,SavingServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\SavingServices.cs,SelectEventsForClosure,The following statement contains a magic number: endDate.AddMinutes(59);
Magic Number,OpenCBS.Services,SavingServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\SavingServices.cs,SelectEventsForClosure,The following statement contains a magic number: endDate.AddSeconds(59);
Magic Number,OpenCBS.Services,SavingServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\SavingServices.cs,FindContracts,The following statement contains a magic number: pNumbersTotalPage = (pNumberOfRecords / 20) + 1;
Magic Number,OpenCBS.Services,DatabaseServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\DatabaseServices.cs,LoadUserDefinedFunctions,The following statement contains a magic number: dllPath = Path.Combine(dllPath' version.Major < 11 ? "OpenCBS.Stringifier.dll" : "OpenCBS.Stringifier.Dotnet40.dll");
Magic Number,OpenCBS.Services,ProductServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\ProductServices.cs,SaveAllCycleParams,The following statement contains a magic number: foreach (RateCycle cycle in rateCycles)              {                  cycle.Min = cycle.Min/100;                  cycle.Max = cycle.Max/100;              }
Magic Number,OpenCBS.Services,ProductServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\ProductServices.cs,SaveAllCycleParams,The following statement contains a magic number: foreach (RateCycle cycle in rateCycles)              {                  cycle.Min = cycle.Min/100;                  cycle.Max = cycle.Max/100;              }
Magic Number,OpenCBS.Services,ProjectServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\ProjectServices.cs,FindProjectByCriteres,The following statement contains a magic number: numbersTotalPage = (numberOfRecords / 20) + 1;
Magic Number,OpenCBS.Services,ProjectServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\ProjectServices.cs,ExtractSearch,The following statement contains a magic number: if (current>= 1)              {                  start = (current - 1) * 20;              }
Magic Number,OpenCBS.Services,ProjectServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\ProjectServices.cs,ExtractSearch,The following statement contains a magic number: end = start + 20;
Magic Number,OpenCBS.Services,ServicesHelper,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\ServicesHelper.cs,ConvertStringToDecimal,The following statement contains a magic number: if (!string.IsNullOrEmpty(text))              {                  try                  {                      return Math.Round(Convert.ToDecimal(text)' useCents ? 2 : 0' MidpointRounding.AwayFromZero);                  }                  catch                  {                      return 0;                  }              }
Magic Number,OpenCBS.Services,ServicesHelper,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\ServicesHelper.cs,ConvertStringToDecimal,The following statement contains a magic number: if (!string.IsNullOrEmpty(text))              {                  try                  {                      //return Convert.ToDecimal(text);                      return Math.Round(Convert.ToDecimal(text)' useCents ? 2 : 0' MidpointRounding.AwayFromZero);                  }                  catch                  {                      throw new OpenCbsRepayException(OpenCbsRepayExceptionsEnum.AmountIsNull);                  }              }
Magic Number,OpenCBS.Services,ServicesHelper,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\ServicesHelper.cs,ConvertStringToDecimal,The following statement contains a magic number: if (!string.IsNullOrEmpty(text))              {                  try                  {                      return new OCurrency(Math.Round(Convert.ToDecimal(text)' useCents ? 2 : 0' MidpointRounding.AwayFromZero));                  }                  catch                  {                      throw new OpenCbsRepayException(OpenCbsRepayExceptionsEnum.AmountIsNull);                  }              }
Magic Number,OpenCBS.Services,ServicesHelper,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\ServicesHelper.cs,ConvertNullableDoubleToString,The following statement contains a magic number: if (number.HasValue)              {                  try                  {                      double value = isPercent ? (number.Value*100) : number.Value;                      var dataParam = ApplicationSettings.GetInstance(string.Empty);                      int decimalPlaces = dataParam.InterestRateDecimalPlaces;                      return Convert.ToString(Math.Round(value' decimalPlaces' MidpointRounding.AwayFromZero));                  }                  catch                  {                      return String.Empty;                  }              }
Magic Number,OpenCBS.Services,ServicesHelper,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\ServicesHelper.cs,ConvertNullableDecimalToString,The following statement contains a magic number: if (number.HasValue)              {                  try                  {                      decimal value = isPercent ? (number.Value * 100) : number.Value;                      return Convert.ToString(Math.Round(value' 2' MidpointRounding.AwayFromZero));                  }                  catch                  {                      return String.Empty;                  }              }
Magic Number,OpenCBS.Services,ServicesHelper,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\ServicesHelper.cs,ConvertNullableDecimalToString,The following statement contains a magic number: if (number.HasValue)              {                  try                  {                      decimal value = isPercent ? (number.Value * 100) : number.Value;                      return Convert.ToString(Math.Round(value' 2' MidpointRounding.AwayFromZero));                  }                  catch                  {                      return String.Empty;                  }              }
Magic Number,OpenCBS.Services,ServicesHelper,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\ServicesHelper.cs,ConvertNullableDecimalToString,The following statement contains a magic number: if (number.HasValue)              {                  try                  {                      return (Math.Round(number.Value' 2'MidpointRounding.AwayFromZero)).ToString();                  }                  catch                  {                      return String.Empty;                  }              }
Magic Number,OpenCBS.Services,ServicesHelper,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\ServicesHelper.cs,ConvertStringToDouble,The following statement contains a magic number: if (!string.IsNullOrEmpty(text))              {                  try                  {                      if (isPercent)                          return Convert.ToDouble(text) / 100;                      else                          return Convert.ToDouble(text);                  }                  catch                  {                      return 0;                  }              }
Magic Number,OpenCBS.Services,ServicesHelper,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\ServicesHelper.cs,ConvertDecimalToString,The following statement contains a magic number: try              {                  return Convert.ToString(Math.Round(number' 2'MidpointRounding.AwayFromZero));              }              catch              {                  return String.Empty;              }
Magic Number,OpenCBS.Services,ServicesHelper,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\ServicesHelper.cs,ConvertStringToNullableDouble,The following statement contains a magic number: if (!string.IsNullOrEmpty(text))              {                  try                  {                      double converted = Convert.ToDouble(text);                      if (isPercent)                          return converted / 100;                      return converted;                  }                  catch                  {                      return null;                  }              }
Magic Number,OpenCBS.Services,ServicesHelper,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\ServicesHelper.cs,ConvertStringToNullableDouble,The following statement contains a magic number: if (!string.IsNullOrEmpty(text))              {                  try                  {                      if (isPercent)                          return Convert.ToDouble(text) / 100;                      return Convert.ToDouble(text);                  }                  catch                  {                      return defaultValue;                  }              }
Magic Number,OpenCBS.Services,ServicesHelper,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\ServicesHelper.cs,ConvertStringToNullableDecimal,The following statement contains a magic number: if (!string.IsNullOrEmpty(text))              {                  try                  {                      if (isPercent)                          return Convert.ToDecimal(text) / 100;                      return Convert.ToDecimal(text);                  }                  catch                  {                      return defaultValue;                  }              }
Magic Number,OpenCBS.Services,SettingsImportExportServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\SettingsImportExportServices.cs,ApplyProvisioningRules,The following statement contains a magic number: foreach (Setting s in group.Settings)              {                  foreach (ProvisioningRate rate in ProvisionTable.GetInstance(_user).ProvisioningRates)                  {                      if (rate.Number.ToString() == s.Name)                      {                          var values = s.Value.Split('/');                          rate.NbOfDaysMin = Convert.ToInt32(values[0]);                          rate.NbOfDaysMax = Convert.ToInt32(values[1]);                          rate.ProvisioningValue = Convert.ToDouble(values[2]);                          rate.ProvisioningInterest = Convert.ToDouble(values[3]);                          rate.ProvisioningPenalty = Convert.ToDouble(values[4]);                      }                  }                             }
Magic Number,OpenCBS.Services,SettingsImportExportServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\SettingsImportExportServices.cs,ApplyProvisioningRules,The following statement contains a magic number: foreach (Setting s in group.Settings)              {                  foreach (ProvisioningRate rate in ProvisionTable.GetInstance(_user).ProvisioningRates)                  {                      if (rate.Number.ToString() == s.Name)                      {                          var values = s.Value.Split('/');                          rate.NbOfDaysMin = Convert.ToInt32(values[0]);                          rate.NbOfDaysMax = Convert.ToInt32(values[1]);                          rate.ProvisioningValue = Convert.ToDouble(values[2]);                          rate.ProvisioningInterest = Convert.ToDouble(values[3]);                          rate.ProvisioningPenalty = Convert.ToDouble(values[4]);                      }                  }                             }
Magic Number,OpenCBS.Services,SettingsImportExportServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\SettingsImportExportServices.cs,ApplyProvisioningRules,The following statement contains a magic number: foreach (Setting s in group.Settings)              {                  foreach (ProvisioningRate rate in ProvisionTable.GetInstance(_user).ProvisioningRates)                  {                      if (rate.Number.ToString() == s.Name)                      {                          var values = s.Value.Split('/');                          rate.NbOfDaysMin = Convert.ToInt32(values[0]);                          rate.NbOfDaysMax = Convert.ToInt32(values[1]);                          rate.ProvisioningValue = Convert.ToDouble(values[2]);                          rate.ProvisioningInterest = Convert.ToDouble(values[3]);                          rate.ProvisioningPenalty = Convert.ToDouble(values[4]);                      }                  }                             }
Magic Number,OpenCBS.Services.Currencies,ExchangeRateServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\Currencies\ExchangeRateServices.cs,SelectRatesByDate,The following statement contains a magic number: endDate.AddHours(23);
Magic Number,OpenCBS.Services.Currencies,ExchangeRateServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\Currencies\ExchangeRateServices.cs,SelectRatesByDate,The following statement contains a magic number: endDate.AddMinutes(59);
Magic Number,OpenCBS.Services.Currencies,ExchangeRateServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\Currencies\ExchangeRateServices.cs,SelectRatesByDate,The following statement contains a magic number: endDate.AddSeconds(59);
Magic Number,OpenCBS.Services.Export,ExportServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\Export\ExportServices.cs,ImportInstallmentRepayment,The following statement contains a magic number: foreach (var installment in pInstallments)              {                  int loanId = loanServices.SelectLoanId(installment.ContractCode);                  var loan = loanServices.SelectLoan(loanId' true' true' true);                  var client = clientServices.FindTiersByContractId(loanId);                  if (installment.RepaymentStatus == 1)                  {                      if (loan.InstallmentList[installment.InstallmentNumber].IsPending)                          loanServices.ConfirmPendingRepayment(loan' client);                      else if (!loan.InstallmentList[installment.InstallmentNumber].IsRepaid)                      {                          PaymentMethod paymentMethod =                              ServicesProvider.GetInstance().GetPaymentMethodServices().GetPaymentMethodById(5);                          loanServices.Repay(loan' client' installment.InstallmentNumber' installment.InstallmentDate'                               installment.InstallmentAmount' false'                              0' 0' false' 0' true' false' paymentMethod' ""' false);                      }                                            }                  else                  {                      if (loan.InstallmentList[installment.InstallmentNumber].IsPending)                          loanServices.CancelPendingInstallments(loan);                  }              }
Missing Default,OpenCBS.Services.Accounting,AccountingServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\Accounting\AccountingServices.cs,DoMovements,The following switch statement is missing a default case: switch (booking.Type)                              {                                  case OMovementType.Loan:                                      _movementSetManagement.InsertLoanMovement(booking' sqlTransac);                                      ServicesProvider.GetInstance().GetEventProcessorServices().ExportEvent(                                          booking.EventId'                                          sqlTransac);                                      break;                                  case OMovementType.Saving:                                      _movementSetManagement.InsertSavingMovment(booking' sqlTransac);                                      ServicesProvider.GetInstance().GetSavingServices().MakeEventExported(                                          booking.EventId'                                          sqlTransac);                                      break;                                  case OMovementType.Manual:                                      _movementSetManagement.UpdateManualMovment(booking' sqlTransac);                                      break;                                  case OMovementType.Teller:                                      _movementSetManagement.InsertLoanMovement(booking' sqlTransac);                                      ServicesProvider.GetInstance().GetEventProcessorServices().ExportTellerEvent(                                          booking.EventId' sqlTransac);                                      break;                              }
Missing Default,OpenCBS.Services,LoanServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\LoanServices.cs,SaveLoan,The following switch statement is missing a default case: switch (pClient.Type)                      {                          case OClientTypes.Group:                              clientServices.SetFavouriteLoanOfficerForGroup(                                  (Group)pClient' pLoan.LoanOfficer.Id' transaction);                              break;                          case OClientTypes.Corporate:                              clientServices.SetFavouriteLoanOfficerForCorporate(                                  (Corporate)pClient' pLoan.LoanOfficer.Id);                              break;                          case OClientTypes.Person:                              clientServices.SetFavouriteLoanOfficerForPerson(                                  (Person)pClient' pLoan.LoanOfficer.Id' transaction);                              break;                      }
Missing Default,OpenCBS.Services,SettingsImportExportServices,C:\repos\PavelBastov_opencbs\Src\OpenCBS.Services\SettingsImportExportServices.cs,ApplySettings,The following switch statement is missing a default case: switch (group.Name)                  {                      case GENERAL_PARAMETERS:                          ApplyGeneralParameters(group);                          break;                        case PROVISIONING_RULES:                          ApplyProvisioningRules(group);                          break;                        case PUBLIC_HOLIDAYS:                          ApplyPublicHoliday(group);                          break;                                                  case PACKAGES:                          ApplyPackages(group);                          break;                  }
