Implementation smell,Namespace,Class,File,Method,Description
Long Method,Tvl.VisualStudio.Language.Parsing4,AntlrClassifierBase<TState>,C:\repos\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Antlr\Parsing4\AntlrClassifierBase`1.cs,GetClassificationSpans,The method has 130 lines of code.
Long Method,Tvl.VisualStudio.Language.Parsing4,AntlrTaggerBaseOld<TState;TTag>,C:\repos\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Antlr\Parsing4\AntlrTaggerBaseOld`2.cs,GetTags,The method has 124 lines of code.
Long Method,Tvl.VisualStudio.Language.Parsing4,AntlrTaggerBase<TState;TTag>,C:\repos\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Antlr\Parsing4\AntlrTaggerBase`2.cs,GetTags,The method has 133 lines of code.
Long Method,Tvl.VisualStudio.Language.Parsing,AntlrClassifierBase,C:\repos\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Antlr\Parsing\AntlrClassifierBase.cs,GetClassificationSpans,The method has 117 lines of code.
Long Method,Tvl.VisualStudio.Language.Parsing,AntlrClassifierBase<TState>,C:\repos\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Antlr\Parsing\AntlrClassifierBase`1.cs,GetClassificationSpans,The method has 129 lines of code.
Long Method,Tvl.VisualStudio.Language.Parsing,AntlrTaggerBase<TState;TTag>,C:\repos\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Antlr\Parsing\AntlrTaggerBase`2.cs,GetTags,The method has 124 lines of code.
Long Method,Tvl.VisualStudio.Language.Parsing.Experimental.Atn,State,C:\repos\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Antlr\Parsing\Experimental\Atn\State.cs,AddOptimizedTransitions,The method has 134 lines of code.
Long Method,Tvl.VisualStudio.Language.Parsing.Experimental.Interpreter,InterpretTrace,C:\repos\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Antlr\Parsing\Experimental\Interpreter\InterpretTrace.cs,TryStepBackward,The method has 138 lines of code.
Long Method,Tvl.VisualStudio.Language.Parsing.Experimental.Interpreter,InterpretTrace,C:\repos\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Antlr\Parsing\Experimental\Interpreter\InterpretTrace.cs,TryStepForward,The method has 134 lines of code.
Complex Method,Tvl.VisualStudio.Language.Parsing4,AntlrTaggerBaseOld<TState;TTag>,C:\repos\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Antlr\Parsing4\AntlrTaggerBaseOld`2.cs,GetTags,Cyclomatic complexity of the method is 27
Complex Method,Tvl.VisualStudio.Language.Parsing,AntlrClassifierBase,C:\repos\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Antlr\Parsing\AntlrClassifierBase.cs,GetClassificationSpans,Cyclomatic complexity of the method is 27
Complex Method,Tvl.VisualStudio.Language.Parsing,AntlrTaggerBase<TState;TTag>,C:\repos\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Antlr\Parsing\AntlrTaggerBase`2.cs,GetTags,Cyclomatic complexity of the method is 27
Complex Method,Tvl.VisualStudio.Language.Parsing.Collections,IntervalSet,C:\repos\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Antlr\Parsing\Collections\IntervalSet.cs,AddImpl,Cyclomatic complexity of the method is 8
Complex Method,Tvl.VisualStudio.Language.Parsing.Collections,IntervalSet,C:\repos\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Antlr\Parsing\Collections\IntervalSet.cs,Complement,Cyclomatic complexity of the method is 9
Complex Method,Tvl.VisualStudio.Language.Parsing.Collections,IntervalSet,C:\repos\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Antlr\Parsing\Collections\IntervalSet.cs,ToString,Cyclomatic complexity of the method is 8
Complex Method,Tvl.VisualStudio.Language.Parsing.Experimental.Atn,State,C:\repos\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Antlr\Parsing\Experimental\Atn\State.cs,FollowOptimizedTransitions,Cyclomatic complexity of the method is 12
Complex Method,Tvl.VisualStudio.Language.Parsing.Experimental.Atn,State,C:\repos\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Antlr\Parsing\Experimental\Atn\State.cs,AddOptimizedTransitions,Cyclomatic complexity of the method is 12
Complex Method,Tvl.VisualStudio.Language.Parsing.Experimental.Atn,State,C:\repos\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Antlr\Parsing\Experimental\Atn\State.cs,MergeTransitions,Cyclomatic complexity of the method is 19
Complex Method,Tvl.VisualStudio.Language.Parsing.Experimental.Atn,State,C:\repos\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Antlr\Parsing\Experimental\Atn\State.cs,GetSourceSet,Cyclomatic complexity of the method is 9
Complex Method,Tvl.VisualStudio.Language.Parsing.Experimental.Atn,State,C:\repos\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Antlr\Parsing\Experimental\Atn\State.cs,GetFollowSet,Cyclomatic complexity of the method is 10
Complex Method,Tvl.VisualStudio.Language.Parsing.Experimental.Interpreter,BoundedStartInterpretTraceEqualityComparer,C:\repos\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Antlr\Parsing\Experimental\Interpreter\BoundedStartInterpretTraceEqualityComparer.cs,Equals,Cyclomatic complexity of the method is 14
Complex Method,Tvl.VisualStudio.Language.Parsing.Experimental.Interpreter,BoundedEndInterpretTraceEqualityComparer,C:\repos\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Antlr\Parsing\Experimental\Interpreter\BoundedEndInterpretTraceEqualityComparer.cs,Equals,Cyclomatic complexity of the method is 14
Complex Method,Tvl.VisualStudio.Language.Parsing.Experimental.Interpreter,InterpretTrace,C:\repos\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Antlr\Parsing\Experimental\Interpreter\InterpretTrace.cs,TryStepBackward,Cyclomatic complexity of the method is 25
Complex Method,Tvl.VisualStudio.Language.Parsing.Experimental.Interpreter,InterpretTrace,C:\repos\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Antlr\Parsing\Experimental\Interpreter\InterpretTrace.cs,TryStepForward,Cyclomatic complexity of the method is 24
Complex Method,Tvl.VisualStudio.Language.Parsing.Experimental.Interpreter,NetworkInterpreter,C:\repos\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Antlr\Parsing\Experimental\Interpreter\NetworkInterpreter.cs,TryStepBackward,Cyclomatic complexity of the method is 13
Complex Method,Tvl.VisualStudio.Language.Parsing.Experimental.Interpreter,NetworkInterpreter,C:\repos\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Antlr\Parsing\Experimental\Interpreter\NetworkInterpreter.cs,TryStepForward,Cyclomatic complexity of the method is 13
Complex Method,Tvl.VisualStudio.Language.Parsing.Experimental.Interpreter,NetworkInterpreter,C:\repos\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Antlr\Parsing\Experimental\Interpreter\NetworkInterpreter.cs,StepBackward,Cyclomatic complexity of the method is 11
Complex Method,Tvl.VisualStudio.Language.Parsing.Experimental.Interpreter,NetworkInterpreter,C:\repos\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Antlr\Parsing\Experimental\Interpreter\NetworkInterpreter.cs,StepForward,Cyclomatic complexity of the method is 14
Long Parameter List,Tvl.VisualStudio.Language.Parsing4,AntlrParseResultEventArgs,C:\repos\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Antlr\Parsing4\AntlrParseResultEventArgs.cs,AntlrParseResultEventArgs,The method has 5 parameters. Parameters: snapshot' errors' elapsedTime' tokens' result
Long Parameter List,Tvl.VisualStudio.Language.Parsing4,SnapshotToken,C:\repos\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Antlr\Parsing4\SnapshotToken.cs,SnapshotToken,The method has 6 parameters. Parameters: snapshot' source' type' channel' start' stop
Long Parameter List,Tvl.VisualStudio.Language.Parsing4,SnapshotTokenFactory,C:\repos\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Antlr\Parsing4\SnapshotTokenFactory.cs,Create,The method has 8 parameters. Parameters: source' type' text' channel' start' stop' line' charPositionInLine
Long Parameter List,Tvl.VisualStudio.Language.Parsing,AntlrParseResultEventArgs,C:\repos\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Antlr\Parsing\AntlrParseResultEventArgs.cs,AntlrParseResultEventArgs,The method has 5 parameters. Parameters: snapshot' errors' elapsedTime' tokens' result
Long Parameter List,Tvl.VisualStudio.Language.Parsing.Experimental.Atn,NetworkBuilder,C:\repos\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Antlr\Parsing\Experimental\Atn\NetworkBuilder.cs,ExportDot,The method has 5 parameters. Parameters: tokenNames' rules' reachableStates' stateRules' path
Long Parameter List,Tvl.VisualStudio.Language.Parsing.Experimental.Atn,NetworkBuilder,C:\repos\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Antlr\Parsing\Experimental\Atn\NetworkBuilder.cs,ExportDgml,The method has 5 parameters. Parameters: tokenNames' rules' reachableStates' stateRules' path
Long Parameter List,Tvl.VisualStudio.Language.Parsing.Experimental.Atn,Network,C:\repos\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Antlr\Parsing\Experimental\Atn\Network.cs,Network,The method has 5 parameters. Parameters: builder' optimizer' rules' stateRules' contextRules
Long Parameter List,Tvl.VisualStudio.Language.Parsing.Experimental.Atn,Network,C:\repos\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Antlr\Parsing\Experimental\Atn\Network.cs,ExtractStatesAndTransitions,The method has 7 parameters. Parameters: optimizer' currentRule' currentState' states' transitions' stateRules' contextRules
Long Parameter List,Tvl.VisualStudio.Language.Parsing.Experimental.Atn,State,C:\repos\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Antlr\Parsing\Experimental\Atn\State.cs,AddRecursivePushTransitions,The method has 5 parameters. Parameters: visited' currentState' effectiveTransition' contexts' optimizer
Long Parameter List,Tvl.VisualStudio.Language.Parsing.Experimental.Atn,State,C:\repos\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Antlr\Parsing\Experimental\Atn\State.cs,AddRecursivePopTransitions,The method has 5 parameters. Parameters: visited' currentState' effectiveTransition' contexts' optimizer
Long Parameter List,Tvl.VisualStudio.Language.Parsing.Experimental.Interpreter,InterpretTrace,C:\repos\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Antlr\Parsing\Experimental\Interpreter\InterpretTrace.cs,InterpretTrace,The method has 6 parameters. Parameters: startContext' endContext' transitions' boundedStart' boundedEnd' copyTransitionsByReference
Long Parameter List,Tvl.VisualStudio.Language.Parsing.Experimental.Interpreter,NetworkInterpreter,C:\repos\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Antlr\Parsing\Experimental\Interpreter\NetworkInterpreter.cs,StepBackward,The method has 6 parameters. Parameters: result' states' context' symbol' symbolPosition' preventContextType
Long Parameter List,Tvl.VisualStudio.Language.Parsing.Experimental.Interpreter,NetworkInterpreter,C:\repos\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Antlr\Parsing\Experimental\Interpreter\NetworkInterpreter.cs,StepForward,The method has 6 parameters. Parameters: result' states' context' symbol' symbolPosition' preventContextType
Long Identifier,Tvl.VisualStudio.Language.Parsing4,SnapshotCharStream,C:\repos\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Antlr\Parsing4\SnapshotCharStream.cs,,The length of the parameter _currentSnapshotLineStartIndex is 30.
Long Identifier,Tvl.VisualStudio.Language.Parsing,SnapshotCharStream,C:\repos\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Antlr\Parsing\SnapshotCharStream.cs,,The length of the parameter _currentSnapshotLineStartIndex is 30.
Long Statement,Tvl.VisualStudio.Language.Parsing4,AntlrClassifierBase<TState>,C:\repos\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Antlr\Parsing4\AntlrClassifierBase`1.cs,GetClassificationSpans,The length of the statement  "                int endPosition = extendMultilineSpanToLine < span.Snapshot.LineCount ? span.Snapshot.GetLineFromLineNumber(extendMultilineSpanToLine).EndIncludingLineBreak : span.Snapshot.Length; " is 180.
Long Statement,Tvl.VisualStudio.Language.Parsing4,AntlrClassifierBase<TState>,C:\repos\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Antlr\Parsing4\AntlrClassifierBase`1.cs,SetLineState,The length of the statement  "            Contract.Requires(state.IsDirty || !classifierState._firstDirtyLine.HasValue || line <= classifierState._firstDirtyLine); " is 121.
Long Statement,Tvl.VisualStudio.Language.Parsing4,AntlrClassifierBase<TState>,C:\repos\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Antlr\Parsing4\AntlrClassifierBase`1.cs,HandleTextBufferChangedHighPriority,The length of the statement  "                        afterState._firstChangedLine = Math.Min(afterState._firstChangedLine ?? lineNumberFromPosition' lineNumberFromPosition); " is 120.
Long Statement,Tvl.VisualStudio.Language.Parsing4,AntlrTaggerBaseOld<TState;TTag>,C:\repos\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Antlr\Parsing4\AntlrTaggerBaseOld`2.cs,GetTags,The length of the statement  "                int endPosition = extendMultilineSpanToLine < span.Snapshot.LineCount ? span.Snapshot.GetLineFromLineNumber(extendMultilineSpanToLine).EndIncludingLineBreak : span.Snapshot.Length; " is 180.
Long Statement,Tvl.VisualStudio.Language.Parsing4,AntlrTaggerBaseOld<TState;TTag>,C:\repos\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Antlr\Parsing4\AntlrTaggerBaseOld`2.cs,PeekToken,The length of the statement  "            while (index >= 0 && (_tokenCache.Count == 0 || _tokenCache[_tokenCache.Count - 1].Item1.Type != IntStreamConstants.Eof)) " is 121.
Long Statement,Tvl.VisualStudio.Language.Parsing4,AntlrTaggerBaseOld<TState;TTag>,C:\repos\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Antlr\Parsing4\AntlrTaggerBaseOld`2.cs,HandleTextBufferChangedHighPriority,The length of the statement  "                _firstChangedLine = _firstChangedLine.HasValue ? Math.Min(_firstChangedLine.Value' lineNumberFromPosition) : lineNumberFromPosition; " is 132.
Long Statement,Tvl.VisualStudio.Language.Parsing4,AntlrTaggerBase<TState;TTag>,C:\repos\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Antlr\Parsing4\AntlrTaggerBase`2.cs,GetTags,The length of the statement  "                int endPosition = extendMultilineSpanToLine < span.Snapshot.LineCount ? span.Snapshot.GetLineFromLineNumber(extendMultilineSpanToLine).EndIncludingLineBreak : span.Snapshot.Length; " is 180.
Long Statement,Tvl.VisualStudio.Language.Parsing4,AntlrTaggerBase<TState;TTag>,C:\repos\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Antlr\Parsing4\AntlrTaggerBase`2.cs,HandleTextBufferChangedHighPriority,The length of the statement  "                        afterState._firstChangedLine = Math.Min(afterState._firstChangedLine ?? lineNumberFromPosition' lineNumberFromPosition); " is 120.
Long Statement,Tvl.VisualStudio.Language.Parsing4,SnapshotCharStream,C:\repos\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Antlr\Parsing4\SnapshotCharStream.cs,Substring,The length of the statement  "                if (startIndex >= _currentSnapshotLineStartIndex && (startIndex + length) <= _currentSnapshotLineStartIndex + _currentSnapshotLine.Length) " is 138.
Long Statement,Tvl.VisualStudio.Language.Parsing,AntlrClassifierBase,C:\repos\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Antlr\Parsing\AntlrClassifierBase.cs,GetClassificationSpans,The length of the statement  "                int endPosition = extendMultilineSpanToLine < span.Snapshot.LineCount ? span.Snapshot.GetLineFromLineNumber(extendMultilineSpanToLine).EndIncludingLineBreak : span.Snapshot.Length; " is 180.
Long Statement,Tvl.VisualStudio.Language.Parsing,AntlrClassifierBase,C:\repos\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Antlr\Parsing\AntlrClassifierBase.cs,HandleTextBufferChangedHighPriority,The length of the statement  "                _firstChangedLine = _firstChangedLine.HasValue ? Math.Min(_firstChangedLine.Value' lineNumberFromPosition) : lineNumberFromPosition; " is 132.
Long Statement,Tvl.VisualStudio.Language.Parsing,AntlrClassifierBase<TState>,C:\repos\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Antlr\Parsing\AntlrClassifierBase`1.cs,GetClassificationSpans,The length of the statement  "                int endPosition = extendMultilineSpanToLine < span.Snapshot.LineCount ? span.Snapshot.GetLineFromLineNumber(extendMultilineSpanToLine).EndIncludingLineBreak : span.Snapshot.Length; " is 180.
Long Statement,Tvl.VisualStudio.Language.Parsing,AntlrClassifierBase<TState>,C:\repos\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Antlr\Parsing\AntlrClassifierBase`1.cs,SetLineState,The length of the statement  "            Contract.Requires(state.IsDirty || !classifierState._firstDirtyLine.HasValue || line <= classifierState._firstDirtyLine); " is 121.
Long Statement,Tvl.VisualStudio.Language.Parsing,AntlrClassifierBase<TState>,C:\repos\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Antlr\Parsing\AntlrClassifierBase`1.cs,HandleTextBufferChangedHighPriority,The length of the statement  "                        afterState._firstChangedLine = Math.Min(afterState._firstChangedLine ?? lineNumberFromPosition' lineNumberFromPosition); " is 120.
Long Statement,Tvl.VisualStudio.Language.Parsing,AntlrTaggerBase<TState;TTag>,C:\repos\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Antlr\Parsing\AntlrTaggerBase`2.cs,GetTags,The length of the statement  "                int endPosition = extendMultilineSpanToLine < span.Snapshot.LineCount ? span.Snapshot.GetLineFromLineNumber(extendMultilineSpanToLine).EndIncludingLineBreak : span.Snapshot.Length; " is 180.
Long Statement,Tvl.VisualStudio.Language.Parsing,AntlrTaggerBase<TState;TTag>,C:\repos\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Antlr\Parsing\AntlrTaggerBase`2.cs,PeekToken,The length of the statement  "            while (index >= 0 && (_tokenCache.Count == 0 || _tokenCache[_tokenCache.Count - 1].Item1.Type != CharStreamConstants.EndOfFile)) " is 128.
Long Statement,Tvl.VisualStudio.Language.Parsing,SnapshotCharStream,C:\repos\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Antlr\Parsing\SnapshotCharStream.cs,Substring,The length of the statement  "                if (startIndex >= _currentSnapshotLineStartIndex && (startIndex + length) <= _currentSnapshotLineStartIndex + _currentSnapshotLine.Length) " is 138.
Long Statement,Tvl.VisualStudio.Language.Parsing.Collections,IntervalSet,C:\repos\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Antlr\Parsing\Collections\IntervalSet.cs,Complement,The length of the statement  "                compl.Intervals.Add(Interval.FromBounds(Math.Max(vocabulary.Start' intervals[i - 1].EndInclusive + 1)' Math.Min(vocabulary.EndInclusive' intervals[i].Start - 1))); " is 163.
Long Statement,Tvl.VisualStudio.Language.Parsing.Collections,IntervalSet,C:\repos\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Antlr\Parsing\Collections\IntervalSet.cs,GetEnumerator,The length of the statement  "            return intervals.SelectMany(interval => Enumerable.Range(interval.Start' interval.EndInclusive - interval.Start + 1)).GetEnumerator(); " is 134.
Long Statement,Tvl.VisualStudio.Language.Parsing.Experimental.Atn,NetworkBuilder,C:\repos\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Antlr\Parsing\Experimental\Atn\NetworkBuilder.cs,BuildNetworkImpl,The length of the statement  "            HashSet<State> ruleStartStates = new HashSet<State>(Rules.Where(i => i.IsStartRule).Select(i => i.StartState)' ObjectReferenceEqualityComparer<State>.Default); " is 159.
Long Statement,Tvl.VisualStudio.Language.Parsing.Experimental.Atn,NetworkBuilder,C:\repos\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Antlr\Parsing\Experimental\Atn\NetworkBuilder.cs,BuildNetworkImpl,The length of the statement  "            //ExportDot(AlloyParser.tokenNames' ruleBindings' reachableStates' stateRules' @"C:\dev\SimpleC\TestGenerated\AlloySimplified.dot"); " is 132.
Long Statement,Tvl.VisualStudio.Language.Parsing.Experimental.Atn,NetworkBuilder,C:\repos\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Antlr\Parsing\Experimental\Atn\NetworkBuilder.cs,BuildNetworkImpl,The length of the statement  "            //ExportDgml(AlloyParser.tokenNames' ruleBindings' reachableStates' stateRules' @"C:\dev\SimpleC\TestGenerated\AlloySimplified.dgml"); " is 134.
Long Statement,Tvl.VisualStudio.Language.Parsing.Experimental.Atn,NetworkBuilder,C:\repos\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Antlr\Parsing\Experimental\Atn\NetworkBuilder.cs,BuildNetworkImpl,The length of the statement  "            //ExportDot(AlloyParser.tokenNames' ruleBindings' reachableOptimizedStates' stateRules' @"C:\dev\SimpleC\TestGenerated\AlloySimplifiedOptimized.dot"); " is 150.
Long Statement,Tvl.VisualStudio.Language.Parsing.Experimental.Atn,NetworkBuilder,C:\repos\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Antlr\Parsing\Experimental\Atn\NetworkBuilder.cs,BuildNetworkImpl,The length of the statement  "            //ExportDgml(AlloyParser.tokenNames' ruleBindings' reachableOptimizedStates' stateRules' @"C:\dev\SimpleC\TestGenerated\AlloySimplifiedOptimized.dgml"); " is 152.
Long Statement,Tvl.VisualStudio.Language.Parsing.Experimental.Atn,NetworkBuilder,C:\repos\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Antlr\Parsing\Experimental\Atn\NetworkBuilder.cs,ExportDot,The length of the statement  "                    builder.AppendLine(string.Format("state_{0} -> state_{1}[label=\"{2}\"]"' transition.SourceState.Id' transition.TargetState.Id' GetTransitionLabel(transition' tokenNames))); " is 173.
Long Statement,Tvl.VisualStudio.Language.Parsing.Experimental.Atn,NetworkBuilder,C:\repos\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Antlr\Parsing\Experimental\Atn\NetworkBuilder.cs,GetTransitionLabel,The length of the statement  "                //string sourceSet = transition.SourceState.IsOptimized ? transition.SourceState.GetSourceSet(preventContextType) : transition.SourceState.GetSourceSet(); " is 154.
Long Statement,Tvl.VisualStudio.Language.Parsing.Experimental.Atn,Network,C:\repos\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Antlr\Parsing\Experimental\Atn\Network.cs,ExtractStatesAndTransitions,The length of the statement  "                ExtractStatesAndTransitions(optimizer' nextRule' transition.TargetState' states' transitions' stateRules' contextRules); " is 120.
Long Statement,Tvl.VisualStudio.Language.Parsing.Experimental.Atn,Network,C:\repos\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Antlr\Parsing\Experimental\Atn\Network.cs,ExtractStatesAndTransitions,The length of the statement  "//                                Contract.Assert(popTransition.ContextIdentifiers.Last() == pushContext.ContextIdentifiers.First()); " is 133.
Long Statement,Tvl.VisualStudio.Language.Parsing.Experimental.Atn,Network,C:\repos\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Antlr\Parsing\Experimental\Atn\Network.cs,ExtractStatesAndTransitions,The length of the statement  "//                                // make sure there are no "matching" transitions which were removed by a call to State.RemoveTransition " is 137.
Long Statement,Tvl.VisualStudio.Language.Parsing.Experimental.Atn,Network,C:\repos\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Antlr\Parsing\Experimental\Atn\Network.cs,ExtractStatesAndTransitions,The length of the statement  "//                                ExtractStatesAndTransitions(optimizer' currentRule' popTransition.TargetState' states' transitions' stateRules' contextRules); " is 160.
Long Statement,Tvl.VisualStudio.Language.Parsing.Experimental.Atn,Network,C:\repos\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Antlr\Parsing\Experimental\Atn\Network.cs,ExtractStatesAndTransitions,The length of the statement  "//                            ExtractStatesAndTransitions(optimizer' null' transition.TargetState' states' transitions' stateRules' contextRules); " is 146.
Long Statement,Tvl.VisualStudio.Language.Parsing.Experimental.Atn,Network,C:\repos\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Antlr\Parsing\Experimental\Atn\Network.cs,ExtractStatesAndTransitions,The length of the statement  "//                                Contract.Assert(pushTransition.ContextIdentifiers.First() == popContext.ContextIdentifiers.Last()); " is 133.
Long Statement,Tvl.VisualStudio.Language.Parsing.Experimental.Atn,Network,C:\repos\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Antlr\Parsing\Experimental\Atn\Network.cs,ExtractStatesAndTransitions,The length of the statement  "//                                // make sure there are no "matching" transitions which were removed by a call to State.RemoveTransition " is 137.
Long Statement,Tvl.VisualStudio.Language.Parsing.Experimental.Atn,Network,C:\repos\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Antlr\Parsing\Experimental\Atn\Network.cs,ExtractStatesAndTransitions,The length of the statement  "//                            ExtractStatesAndTransitions(optimizer' null' transition.TargetState' states' transitions' stateRules' contextRules); " is 146.
Long Statement,Tvl.VisualStudio.Language.Parsing.Experimental.Atn,Network,C:\repos\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Antlr\Parsing\Experimental\Atn\Network.cs,ExtractStatesAndTransitions,The length of the statement  "//                        ExtractStatesAndTransitions(optimizer' currentRule' transition.TargetState' states' transitions' stateRules' contextRules); " is 149.
Long Statement,Tvl.VisualStudio.Language.Parsing.Experimental.Atn,Network,C:\repos\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Antlr\Parsing\Experimental\Atn\Network.cs,ExtractStatesAndTransitions,The length of the statement  "                ExtractStatesAndTransitions(optimizer' nextRule' transition.SourceState' states' transitions' stateRules' contextRules); " is 120.
Long Statement,Tvl.VisualStudio.Language.Parsing.Experimental.Atn,StateOptimizer,C:\repos\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Antlr\Parsing\Experimental\Atn\StateOptimizer.cs,GetNestedContextsAndStates,The length of the statement  "                        key = ((ulong)(ulong)outerTransition.ContextIdentifiers.Single() << 32) | (uint)innerTransition.ContextIdentifiers.Single(); " is 124.
Long Statement,Tvl.VisualStudio.Language.Parsing.Experimental.Atn,StateOptimizer,C:\repos\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Antlr\Parsing\Experimental\Atn\StateOptimizer.cs,GetStatesInContext,The length of the statement  "                    foreach (var nextState in GetPopContextTransitions(context).SelectMany(i => GetStatesInContext(i.TargetState' visited))) " is 120.
Long Statement,Tvl.VisualStudio.Language.Parsing.Experimental.Atn,State,C:\repos\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Antlr\Parsing\Experimental\Atn\State.cs,AddRecursivePushTransitions,The length of the statement  "            foreach (var transition in currentState.OutgoingTransitions.Where(i => !i.IsRecursive && (i.IsEpsilon || (i is PushContextTransition))).ToArray()) " is 146.
Long Statement,Tvl.VisualStudio.Language.Parsing.Experimental.Atn,State,C:\repos\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Antlr\Parsing\Experimental\Atn\State.cs,AddRecursivePushTransitions,The length of the statement  "                        AddRecursivePushTransitions(visited' transition.TargetState' MergeTransitions(effectiveTransition' transition)' contexts' optimizer); " is 133.
Long Statement,Tvl.VisualStudio.Language.Parsing.Experimental.Atn,State,C:\repos\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Antlr\Parsing\Experimental\Atn\State.cs,AddRecursivePushTransitions,The length of the statement  "                        contexts.RemoveRange(contexts.Count - contextTransition.ContextIdentifiers.Count' contextTransition.ContextIdentifiers.Count); " is 126.
Long Statement,Tvl.VisualStudio.Language.Parsing.Experimental.Atn,State,C:\repos\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Antlr\Parsing\Experimental\Atn\State.cs,AddRecursivePopTransitions,The length of the statement  "            foreach (var transition in currentState.OutgoingTransitions.Where(i => !i.IsRecursive && (i.IsEpsilon || (i is PopContextTransition))).ToArray()) " is 145.
Long Statement,Tvl.VisualStudio.Language.Parsing.Experimental.Atn,State,C:\repos\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Antlr\Parsing\Experimental\Atn\State.cs,AddRecursivePopTransitions,The length of the statement  "                        AddRecursivePopTransitions(visited' transition.TargetState' MergeTransitions(effectiveTransition' transition)' contexts' optimizer); " is 132.
Long Statement,Tvl.VisualStudio.Language.Parsing.Experimental.Atn,State,C:\repos\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Antlr\Parsing\Experimental\Atn\State.cs,AddRecursivePopTransitions,The length of the statement  "                        contexts.RemoveRange(contexts.Count - contextTransition.ContextIdentifiers.Count' contextTransition.ContextIdentifiers.Count); " is 126.
Long Statement,Tvl.VisualStudio.Language.Parsing.Experimental.Atn,State,C:\repos\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Antlr\Parsing\Experimental\Atn\State.cs,AddOptimizedTransitions,The length of the statement  "            Contract.Requires(preventContextType != PreventContextType.PushRecursive && preventContextType != PreventContextType.PopRecursive); " is 131.
Long Statement,Tvl.VisualStudio.Language.Parsing.Experimental.Atn,State,C:\repos\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Antlr\Parsing\Experimental\Atn\State.cs,AddOptimizedTransitions,The length of the statement  "                    if (transition.TargetState.OutgoingTransitions.Count == 1 && transition.TargetState.OutgoingTransitions.First().IsEpsilon) " is 122.
Long Statement,Tvl.VisualStudio.Language.Parsing.Experimental.Atn,State,C:\repos\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Antlr\Parsing\Experimental\Atn\State.cs,AddOptimizedTransitions,The length of the statement  "                                bool recursive = ((ContextTransition)transition).ContextIdentifiers.Any(((ContextTransition)nextTransition).ContextIdentifiers.Contains); " is 137.
Long Statement,Tvl.VisualStudio.Language.Parsing.Experimental.Atn,State,C:\repos\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Antlr\Parsing\Experimental\Atn\State.cs,MergeTransitions,The length of the statement  "                    var transition = new PopContextTransition(popSecond.TargetState' popFirst.ContextIdentifiers.Concat(popSecond.ContextIdentifiers)); " is 131.
Long Statement,Tvl.VisualStudio.Language.Parsing.Experimental.Atn,State,C:\repos\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Antlr\Parsing\Experimental\Atn\State.cs,MergeTransitions,The length of the statement  "                    var transition = new PushContextTransition(pushSecond.TargetState' pushFirst.ContextIdentifiers.Concat(pushSecond.ContextIdentifiers)); " is 135.
Long Statement,Tvl.VisualStudio.Language.Parsing.Experimental.Atn,State,C:\repos\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Antlr\Parsing\Experimental\Atn\State.cs,GetSourceSet,The length of the statement  "            var queue = new Queue<Tuple<Transition' PreventContextType>>(IncomingTransitions.Select(i => Tuple.Create(i' preventContextType))); " is 131.
Long Statement,Tvl.VisualStudio.Language.Parsing.Experimental.Atn,State,C:\repos\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Antlr\Parsing\Experimental\Atn\State.cs,GetSourceSet,The length of the statement  "            var comparer = new TupleEqualityComparer<Transition' PreventContextType>(ObjectReferenceEqualityComparer<Transition>.Default' null); " is 132.
Long Statement,Tvl.VisualStudio.Language.Parsing.Experimental.Atn,State,C:\repos\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Antlr\Parsing\Experimental\Atn\State.cs,GetSourceSet,The length of the statement  "                    if (transition.SourceState._sourceSet != null && transition.SourceState._sourceSet[(int)nextPreventContextType] != null) " is 120.
Long Statement,Tvl.VisualStudio.Language.Parsing.Experimental.Atn,State,C:\repos\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Antlr\Parsing\Experimental\Atn\State.cs,GetFollowSet,The length of the statement  "            var queue = new Queue<Tuple<Transition' PreventContextType>>(OutgoingTransitions.Select(i => Tuple.Create(i' preventContextType))); " is 131.
Long Statement,Tvl.VisualStudio.Language.Parsing.Experimental.Atn,State,C:\repos\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Antlr\Parsing\Experimental\Atn\State.cs,GetFollowSet,The length of the statement  "            var comparer = new TupleEqualityComparer<Transition' PreventContextType>(ObjectReferenceEqualityComparer<Transition>.Default' null); " is 132.
Long Statement,Tvl.VisualStudio.Language.Parsing.Experimental.Atn,State,C:\repos\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Antlr\Parsing\Experimental\Atn\State.cs,GetFollowSet,The length of the statement  "                    if (transition.TargetState._followSet != null && transition.TargetState._followSet[(int)nextPreventContextType] != null) " is 120.
Long Statement,Tvl.VisualStudio.Language.Parsing.Experimental.Atn,State,C:\repos\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Antlr\Parsing\Experimental\Atn\State.cs,AddTransitionInternal,The length of the statement  "                    if (popContextTransition.ContextIdentifiers.Take(recursive.ContextIdentifiers.Count).SequenceEqual(recursive.ContextIdentifiers)) " is 129.
Long Statement,Tvl.VisualStudio.Language.Parsing.Experimental.Atn,State,C:\repos\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Antlr\Parsing\Experimental\Atn\State.cs,AddTransitionInternal,The length of the statement  "                _outgoingTransitions = new HashSet<Transition>(_outgoingTransitions' ObjectReferenceEqualityComparer<Transition>.Default); " is 122.
Long Statement,Tvl.VisualStudio.Language.Parsing.Experimental.Atn,State,C:\repos\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Antlr\Parsing\Experimental\Atn\State.cs,AddTransitionInternal,The length of the statement  "            if (transition.TargetState.IncomingTransitions.Count > 10 && !(transition.TargetState.IncomingTransitions is ISet<Transition>)) " is 127.
Long Statement,Tvl.VisualStudio.Language.Parsing.Experimental.Atn,State,C:\repos\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Antlr\Parsing\Experimental\Atn\State.cs,AddTransitionInternal,The length of the statement  "                transition.TargetState._incomingTransitions = new HashSet<Transition>(transition.TargetState._incomingTransitions' ObjectReferenceEqualityComparer<Transition>.Default); " is 168.
Long Statement,Tvl.VisualStudio.Language.Parsing.Experimental.Atn,State,C:\repos\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Antlr\Parsing\Experimental\Atn\State.cs,AddTransitionInternal,The length of the statement  "                //    popContextTransition.PushTransitions.UnionWith(optimizer.GetPushContextTransitions(popContextTransition.ContextIdentifiers.Last())); " is 138.
Long Statement,Tvl.VisualStudio.Language.Parsing.Experimental.Atn,State,C:\repos\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Antlr\Parsing\Experimental\Atn\State.cs,AddTransitionInternal,The length of the statement  "                Contract.Assert(Contract.ForAll(OutgoingTransitions.OfType<PushContextTransition>()' i => i.ContextIdentifiers.Last() != popContextTransition.ContextIdentifiers.First() || popContextTransition.PushTransitions.Contains(i))); " is 223.
Long Statement,Tvl.VisualStudio.Language.Parsing.Experimental.Atn,State,C:\repos\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Antlr\Parsing\Experimental\Atn\State.cs,AddTransitionInternal,The length of the statement  "                //    pushContextTransition.PopTransitions.UnionWith(optimizer.GetPopContextTransitions(pushContextTransition.ContextIdentifiers[0])); " is 134.
Long Statement,Tvl.VisualStudio.Language.Parsing.Experimental.Atn,State,C:\repos\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Antlr\Parsing\Experimental\Atn\State.cs,AddTransitionInternal,The length of the statement  "                Contract.Assert(Contract.ForAll(OutgoingTransitions.OfType<PopContextTransition>()' i => i.ContextIdentifiers.Last() != pushContextTransition.ContextIdentifiers.First() || pushContextTransition.PopTransitions.Contains(i))); " is 223.
Long Statement,Tvl.VisualStudio.Language.Parsing.Experimental.Interpreter,BoundedStartInterpretTraceEqualityComparer,C:\repos\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Antlr\Parsing\Experimental\Interpreter\BoundedStartInterpretTraceEqualityComparer.cs,Equals,The length of the statement  "            for (ContextFrame xframe = x.StartContext' yframe = y.StartContext; true; xframe = xframe.Parent' yframe = yframe.Parent) " is 121.
Long Statement,Tvl.VisualStudio.Language.Parsing.Experimental.Interpreter,InterpretTrace,C:\repos\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Antlr\Parsing\Experimental\Interpreter\InterpretTrace.cs,TryStepBackward,The length of the statement  "                ContextFrame startContext = new ContextFrame(transition.SourceState' this.StartContext.Context' this.StartContext.Parent' Interpreter); " is 135.
Long Statement,Tvl.VisualStudio.Language.Parsing.Experimental.Interpreter,InterpretTrace,C:\repos\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Antlr\Parsing\Experimental\Interpreter\InterpretTrace.cs,TryStepBackward,The length of the statement  "                result = new InterpretTrace(startContext' this.EndContext' this.Transitions' boundedStart' this.BoundedEnd' boundedStart); " is 122.
Long Statement,Tvl.VisualStudio.Language.Parsing.Experimental.Interpreter,InterpretTrace,C:\repos\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Antlr\Parsing\Experimental\Interpreter\InterpretTrace.cs,TryStepBackward,The length of the statement  "                    if (!Interpreter.TrackContextTransitions && result.Transitions.Count > 0 && result.Transitions.First.Value.Symbol == null) " is 122.
Long Statement,Tvl.VisualStudio.Language.Parsing.Experimental.Interpreter,InterpretTrace,C:\repos\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Antlr\Parsing\Experimental\Interpreter\InterpretTrace.cs,TryStepBackward,The length of the statement  "            if (symbol != NetworkInterpreter.UnknownSymbol && !transition.SourceState.GetSourceSet(preventContextType).Contains(symbol)) " is 124.
Long Statement,Tvl.VisualStudio.Language.Parsing.Experimental.Interpreter,InterpretTrace,C:\repos\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Antlr\Parsing\Experimental\Interpreter\InterpretTrace.cs,TryStepBackward,The length of the statement  "                        subContext = new ContextFrame(popContextTransition.SourceState' null' new ContextFrame(subContext.State' label' subContext.Parent' Interpreter)' Interpreter); " is 158.
Long Statement,Tvl.VisualStudio.Language.Parsing.Experimental.Interpreter,InterpretTrace,C:\repos\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Antlr\Parsing\Experimental\Interpreter\InterpretTrace.cs,TryStepBackward,The length of the statement  "                    result = new InterpretTrace(subContext' this.EndContext' this.Transitions' boundedStart' this.BoundedEnd' boundedStart); " is 120.
Long Statement,Tvl.VisualStudio.Language.Parsing.Experimental.Interpreter,InterpretTrace,C:\repos\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Antlr\Parsing\Experimental\Interpreter\InterpretTrace.cs,TryStepBackward,The length of the statement  "                        if (!Interpreter.TrackContextTransitions && result.Transitions.Count > 0 && result.Transitions.First.Value.Symbol == null) " is 122.
Long Statement,Tvl.VisualStudio.Language.Parsing.Experimental.Interpreter,InterpretTrace,C:\repos\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Antlr\Parsing\Experimental\Interpreter\InterpretTrace.cs,TryStepBackward,The length of the statement  "                        if (!Interpreter.TrackContextTransitions && result.Transitions.Count > 0 && result.Transitions.First.Value.Symbol == null) " is 122.
Long Statement,Tvl.VisualStudio.Language.Parsing.Experimental.Interpreter,InterpretTrace,C:\repos\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Antlr\Parsing\Experimental\Interpreter\InterpretTrace.cs,TryStepBackward,The length of the statement  "                ContextFrame startContext = new ContextFrame(transition.SourceState' this.StartContext.Context' this.StartContext.Parent' Interpreter); " is 135.
Long Statement,Tvl.VisualStudio.Language.Parsing.Experimental.Interpreter,InterpretTrace,C:\repos\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Antlr\Parsing\Experimental\Interpreter\InterpretTrace.cs,TryStepForward,The length of the statement  "                ContextFrame endContext = new ContextFrame(transition.TargetState' this.EndContext.Context' this.EndContext.Parent' Interpreter); " is 129.
Long Statement,Tvl.VisualStudio.Language.Parsing.Experimental.Interpreter,InterpretTrace,C:\repos\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Antlr\Parsing\Experimental\Interpreter\InterpretTrace.cs,TryStepForward,The length of the statement  "                result = new InterpretTrace(this.StartContext' endContext' this.Transitions' this.BoundedStart' boundedEnd' boundedEnd); " is 120.
Long Statement,Tvl.VisualStudio.Language.Parsing.Experimental.Interpreter,InterpretTrace,C:\repos\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Antlr\Parsing\Experimental\Interpreter\InterpretTrace.cs,TryStepForward,The length of the statement  "                    if (!Interpreter.TrackContextTransitions && result.Transitions.Count > 0 && result.Transitions.Last.Value.Symbol == null) " is 121.
Long Statement,Tvl.VisualStudio.Language.Parsing.Experimental.Interpreter,InterpretTrace,C:\repos\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Antlr\Parsing\Experimental\Interpreter\InterpretTrace.cs,TryStepForward,The length of the statement  "            if (symbol != NetworkInterpreter.UnknownSymbol && !transition.TargetState.GetFollowSet(preventContextType).Contains(symbol)) " is 124.
Long Statement,Tvl.VisualStudio.Language.Parsing.Experimental.Interpreter,InterpretTrace,C:\repos\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Antlr\Parsing\Experimental\Interpreter\InterpretTrace.cs,TryStepForward,The length of the statement  "                        subContext = new ContextFrame(pushContextTransition.TargetState' null' new ContextFrame(subContext.State' label' subContext.Parent' Interpreter)' Interpreter); " is 159.
Long Statement,Tvl.VisualStudio.Language.Parsing.Experimental.Interpreter,InterpretTrace,C:\repos\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Antlr\Parsing\Experimental\Interpreter\InterpretTrace.cs,TryStepForward,The length of the statement  "                    result = new InterpretTrace(this.StartContext' subContext' this.Transitions' this.BoundedStart' boundedEnd' boundedEnd); " is 120.
Long Statement,Tvl.VisualStudio.Language.Parsing.Experimental.Interpreter,InterpretTrace,C:\repos\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Antlr\Parsing\Experimental\Interpreter\InterpretTrace.cs,TryStepForward,The length of the statement  "                        if (!Interpreter.TrackContextTransitions && result.Transitions.Count > 0 && result.Transitions.Last.Value.Symbol == null) " is 121.
Long Statement,Tvl.VisualStudio.Language.Parsing.Experimental.Interpreter,InterpretTrace,C:\repos\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Antlr\Parsing\Experimental\Interpreter\InterpretTrace.cs,TryStepForward,The length of the statement  "                ContextFrame endContext = new ContextFrame(transition.TargetState' this.EndContext.Context' this.EndContext.Parent' Interpreter); " is 129.
Long Statement,Tvl.VisualStudio.Language.Parsing.Experimental.Interpreter,NetworkInterpreter,C:\repos\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Antlr\Parsing\Experimental\Interpreter\NetworkInterpreter.cs,TryStepBackward,The length of the statement  "            HashSet<ContextFrame> existingUnique = new HashSet<ContextFrame>(existing.Select(i => i.StartContext)' EqualityComparer<ContextFrame>.Default); " is 143.
Long Statement,Tvl.VisualStudio.Language.Parsing.Experimental.Interpreter,NetworkInterpreter,C:\repos\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Antlr\Parsing\Experimental\Interpreter\NetworkInterpreter.cs,TryStepBackward,The length of the statement  "            DeterministicTransition deterministicTransition = _deterministicTrace.StartState.IncomingTransitions.SingleOrDefault(i => i.MatchSet.Contains(symbol)); " is 151.
Long Statement,Tvl.VisualStudio.Language.Parsing.Experimental.Interpreter,NetworkInterpreter,C:\repos\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Antlr\Parsing\Experimental\Interpreter\NetworkInterpreter.cs,TryStepBackward,The length of the statement  "            IEnumerable<DeterministicTraceTransition> deterministicTransitions = Enumerable.Repeat(new DeterministicTraceTransition(deterministicTransition' symbol' symbolPosition' this)' 1); " is 179.
Long Statement,Tvl.VisualStudio.Language.Parsing.Experimental.Interpreter,NetworkInterpreter,C:\repos\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Antlr\Parsing\Experimental\Interpreter\NetworkInterpreter.cs,TryStepBackward,The length of the statement  "            _deterministicTrace = new DeterministicTrace(deterministicTransition.SourceState' _deterministicTrace.EndState' deterministicTransitions); " is 138.
Long Statement,Tvl.VisualStudio.Language.Parsing.Experimental.Interpreter,NetworkInterpreter,C:\repos\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Antlr\Parsing\Experimental\Interpreter\NetworkInterpreter.cs,TryStepForward,The length of the statement  "            HashSet<ContextFrame> existingUnique = new HashSet<ContextFrame>(existing.Select(i => i.StartContext)' EqualityComparer<ContextFrame>.Default); " is 143.
Long Statement,Tvl.VisualStudio.Language.Parsing.Experimental.Interpreter,InterpretTraceTransition,C:\repos\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Antlr\Parsing\Experimental\Interpreter\InterpretTraceTransition.cs,ToString,The length of the statement  "            string sourceState = string.Format("{0}({1})"' Transition.SourceState.Id' Interpreter.Network.StateRules[Transition.SourceState.Id].Name); " is 138.
Long Statement,Tvl.VisualStudio.Language.Parsing.Experimental.Interpreter,InterpretTraceTransition,C:\repos\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Antlr\Parsing\Experimental\Interpreter\InterpretTraceTransition.cs,ToString,The length of the statement  "            string targetState = string.Format("{0}({1})"' Transition.TargetState.Id' Interpreter.Network.StateRules[Transition.TargetState.Id].Name); " is 138.
Complex Conditional,Tvl.VisualStudio.Language.Parsing.Experimental.Atn,State,C:\repos\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Antlr\Parsing\Experimental\Atn\State.cs,AddTransitionInternal,The conditional expression  "IsRecursiveAnalysisComplete && !transition.IsMatch && transition.TargetState == this && !transition.IsRecursive"  is complex.
Virtual Method Call from Constructor,Tvl.VisualStudio.Language.Parsing,AntlrClassifierBase,C:\repos\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Antlr\Parsing\AntlrClassifierBase.cs,AntlrClassifierBase,The constructor "AntlrClassifierBase" calls a virtual method "SubscribeEvents".
Virtual Method Call from Constructor,Tvl.VisualStudio.Language.Parsing,AntlrClassifierBase<TState>,C:\repos\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Antlr\Parsing\AntlrClassifierBase`1.cs,AntlrClassifierBase,The constructor "AntlrClassifierBase" calls a virtual method "SubscribeEvents".
Magic Number,Tvl.VisualStudio.Language.Parsing4,AntlrClassifierBase<TState>,C:\repos\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Antlr\Parsing4\AntlrClassifierBase`1.cs,GetClassificationSpans,The following statement contains a magic number: using (_lock.UpgradableReadLock(TimeSpan.FromMilliseconds(250)))              {                  Span requestedSpan = span;                  TState startState = AdjustParseSpan(classifierState' ref span);                    ICharStream input = CreateInputStream(span);                  ITokenSourceWithState<TState> lexer = CreateLexer(input' span.Start.GetContainingLine().LineNumber + 1' startState);                  lexer.TokenFactory = new SnapshotTokenFactory(snapshot' GetEffectiveTokenSource(lexer));                    IToken previousToken = null;                  bool previousTokenEndsLine = false;                    /* this is held outside the loop because only tokens which end at the end of a line                   * impact its value.                   */                  bool lineStateChanged = false;                    while (true)                  {                      IToken token = lexer.NextToken();                        // The latter is true for EOF token with span.End at the end of the document                      bool inBounds = token.StartIndex < span.End.Position                          || token.StopIndex < span.End.Position;                        int startLineCurrent;                      if (token.Type == IntStreamConstants.Eof)                          startLineCurrent = span.Snapshot.LineCount - 1;                      else                          startLineCurrent = token.Line - 1;                        // endLinePrevious is the line number the previous token ended on                      int endLinePrevious;                      if (previousToken != null)                      {                          Contract.Assert(previousToken.StopIndex >= previousToken.StartIndex' "previousToken can't be EOF");                          endLinePrevious = span.Snapshot.GetLineNumberFromPosition(previousToken.StopIndex);                      }                      else                      {                          endLinePrevious = span.Snapshot.GetLineNumberFromPosition(span.Start) - 1;                      }                        if (startLineCurrent > endLinePrevious + 1 || (startLineCurrent == endLinePrevious + 1 && !previousTokenEndsLine))                      {                          int firstMultilineLine = endLinePrevious;                          if (previousToken == null || previousTokenEndsLine)                              firstMultilineLine++;                            for (int i = firstMultilineLine; i < startLineCurrent; i++)                          {                              if (!classifierState._lineStates[i].MultilineToken || lineStateChanged)                                  extendMultilineSpanToLine = i + 1;                                SetLineState(classifierState' i' LineStateInfo.Multiline);                          }                      }                        if (IsMultilineToken(span.Snapshot' lexer' token))                      {                          int startLine = span.Snapshot.GetLineNumberFromPosition(token.StartIndex);                          int stopLine = span.Snapshot.GetLineNumberFromPosition(Math.Max(token.StartIndex' token.StopIndex));                          for (int i = startLine; i < stopLine; i++)                          {                              if (!classifierState._lineStates[i].MultilineToken)                                  extendMultilineSpanToLine = i + 1;                                SetLineState(classifierState' i' LineStateInfo.Multiline);                          }                      }                        bool tokenEndsLine = TokenEndsAtEndOfLine(span.Snapshot' lexer' token);                      if (tokenEndsLine)                      {                          TState stateAtEndOfLine = lexer.GetCurrentState();                          int line = span.Snapshot.GetLineNumberFromPosition(Math.Max(token.StartIndex' token.StopIndex));                          lineStateChanged =                              classifierState._lineStates[line].MultilineToken                              || !_stateComparer.Equals(classifierState._lineStates[line].EndLineState' stateAtEndOfLine);                            // even if the state didn't change' we call SetLineState to make sure the _first/_lastChangedLine values get updated.                          SetLineState(classifierState' line' new LineStateInfo(stateAtEndOfLine));                            if (lineStateChanged)                          {                              if (line < span.Snapshot.LineCount - 1)                              {                                  /* update the span's end position or the line state change won't be reflected                                   * in the editor                                   */                                  int endPosition = span.Snapshot.GetLineFromLineNumber(line + 1).EndIncludingLineBreak;                                  if (endPosition > extendedSpan.End)                                  {                                      spanExtended = true;                                      extendedSpan = new SnapshotSpan(extendedSpan.Snapshot' Span.FromBounds(extendedSpan.Start' endPosition));                                  }                              }                          }                      }                        if (token.Type == IntStreamConstants.Eof)                          break;                        if (token.StartIndex >= span.End.Position)                          break;                        previousToken = token;                      previousTokenEndsLine = tokenEndsLine;                        if (token.StopIndex < requestedSpan.Start)                          continue;                        var tokenClassificationSpans = GetClassificationSpansForToken(token' span.Snapshot);                      if (tokenClassificationSpans != null)                          classificationSpans.AddRange(tokenClassificationSpans);                        if (!inBounds)                          break;                  }              }
Magic Number,Tvl.VisualStudio.Language.Parsing4,AntlrClassifierBase<TState>,C:\repos\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Antlr\Parsing4\AntlrClassifierBase`1.cs,CreateInputStream,The following statement contains a magic number: if (span.Length > 1000)                  input = new SnapshotCharStream(span.Snapshot' span.Span);              else                  input = new SnapshotCharStream(span.Snapshot);
Magic Number,Tvl.VisualStudio.Language.Parsing4,AntlrTaggerBase<TState;TTag>,C:\repos\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Antlr\Parsing4\AntlrTaggerBase`2.cs,GetTags,The following statement contains a magic number: using (_lock.UpgradableReadLock(TimeSpan.FromMilliseconds(250)))              {                  Span requestedSpan = span;                  TState startState = AdjustParseSpan(taggerState' ref span);                    ICharStream input = CreateInputStream(span);                  ITokenSourceWithState<TState> lexer = CreateLexer(input' span.Start.GetContainingLine().LineNumber + 1' startState);                  lexer.TokenFactory = new SnapshotTokenFactory(snapshot' GetEffectiveTokenSource(lexer));                    IToken previousToken = null;                  bool previousTokenEndsLine = false;                    /* this is held outside the loop because only tokens which end at the end of a line                   * impact its value.                   */                  bool lineStateChanged = false;                    while (true)                  {                      IToken token = lexer.NextToken();                        // The latter is true for EOF token with span.End at the end of the document                      bool inBounds = token.StartIndex < span.End.Position                          || token.StopIndex < span.End.Position;                        int startLineCurrent;                      if (token.Type == IntStreamConstants.Eof)                          startLineCurrent = span.Snapshot.LineCount - 1;                      else                          startLineCurrent = token.Line - 1;                        // endLinePrevious is the line number the previous token ended on                      int endLinePrevious;                      if (previousToken != null)                      {                          Contract.Assert(previousToken.StopIndex >= previousToken.StartIndex' "previousToken can't be EOF");                          endLinePrevious = span.Snapshot.GetLineNumberFromPosition(previousToken.StopIndex);                      }                      else                      {                          endLinePrevious = span.Snapshot.GetLineNumberFromPosition(span.Start) - 1;                      }                        if (startLineCurrent > endLinePrevious + 1 || (startLineCurrent == endLinePrevious + 1 && !previousTokenEndsLine))                      {                          int firstMultilineLine = endLinePrevious;                          if (previousToken == null || previousTokenEndsLine)                              firstMultilineLine++;                            for (int i = firstMultilineLine; i < startLineCurrent; i++)                          {                              if (!taggerState._lineStates[i].MultilineToken || lineStateChanged)                                  extendMultilineSpanToLine = i + 1;                                SetLineState(taggerState' i' LineStateInfo.Multiline);                          }                      }                        if (IsMultilineToken(span.Snapshot' lexer' token))                      {                          int startLine = span.Snapshot.GetLineNumberFromPosition(token.StartIndex);                          int stopLine = span.Snapshot.GetLineNumberFromPosition(Math.Max(token.StartIndex' token.StopIndex));                          for (int i = startLine; i < stopLine; i++)                          {                              if (!taggerState._lineStates[i].MultilineToken)                                  extendMultilineSpanToLine = i + 1;                                SetLineState(taggerState' i' LineStateInfo.Multiline);                          }                      }                        bool tokenEndsLine = TokenEndsAtEndOfLine(span.Snapshot' lexer' token);                      if (tokenEndsLine)                      {                          TState stateAtEndOfLine = lexer.GetCurrentState();                          int line = span.Snapshot.GetLineNumberFromPosition(Math.Max(token.StartIndex' token.StopIndex));                          lineStateChanged =                              taggerState._lineStates[line].MultilineToken                              || !_stateComparer.Equals(taggerState._lineStates[line].EndLineState' stateAtEndOfLine);                            // even if the state didn't change' we call SetLineState to make sure the _first/_lastChangedLine values get updated.                          SetLineState(taggerState' line' new LineStateInfo(stateAtEndOfLine));                            if (lineStateChanged)                          {                              if (line < span.Snapshot.LineCount - 1)                              {                                  /* update the span's end position or the line state change won't be reflected                                   * in the editor                                   */                                  int endPosition = span.Snapshot.GetLineFromLineNumber(line + 1).EndIncludingLineBreak;                                  if (endPosition > extendedSpan.End)                                  {                                      spanExtended = true;                                      extendedSpan = new SnapshotSpan(extendedSpan.Snapshot' Span.FromBounds(extendedSpan.Start' endPosition));                                  }                              }                          }                      }                        if (token.Type == IntStreamConstants.Eof)                          break;                        if (token.StartIndex >= span.End.Position)                          break;                        previousToken = token;                      previousTokenEndsLine = tokenEndsLine;                        if (token.StopIndex < requestedSpan.Start)                          continue;                        var tokenTagSpans = GetTagSpansForToken(token' span.Snapshot);                      if (tokenTagSpans != null)                          tagSpans.AddRange(tokenTagSpans);                        if (!inBounds)                          break;                  }              }
Magic Number,Tvl.VisualStudio.Language.Parsing4,AntlrTaggerBase<TState;TTag>,C:\repos\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Antlr\Parsing4\AntlrTaggerBase`2.cs,CreateInputStream,The following statement contains a magic number: if (span.Length > 1000)                  input = new SnapshotCharStream(span.Snapshot' span.Span);              else                  input = new SnapshotCharStream(span.Snapshot);
Magic Number,Tvl.VisualStudio.Language.Parsing4,SimpleLexerState,C:\repos\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Antlr\Parsing4\SimpleLexerState.cs,GetHashCode,The following statement contains a magic number: hashCode = hashCode * 31 + _mode;
Magic Number,Tvl.VisualStudio.Language.Parsing4,SimpleLexerState,C:\repos\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Antlr\Parsing4\SimpleLexerState.cs,GetHashCode,The following statement contains a magic number: hashCode = hashCode * 31 + ArrayEqualityComparers.Int32.GetHashCode(_modeStack);
Magic Number,Tvl.VisualStudio.Language.Parsing4,SnapshotToken,C:\repos\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Antlr\Parsing4\SnapshotToken.cs,GetHashCode,The following statement contains a magic number: int hash = 5;
Magic Number,Tvl.VisualStudio.Language.Parsing4,SnapshotToken,C:\repos\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Antlr\Parsing4\SnapshotToken.cs,GetHashCode,The following statement contains a magic number: hash = 31 * hash + (this.snapshot != null ? this.snapshot.GetHashCode() : 0);
Magic Number,Tvl.VisualStudio.Language.Parsing4,SnapshotToken,C:\repos\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Antlr\Parsing4\SnapshotToken.cs,GetHashCode,The following statement contains a magic number: hash = 31 * hash + StartIndex;
Magic Number,Tvl.VisualStudio.Language.Parsing4,SnapshotToken,C:\repos\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Antlr\Parsing4\SnapshotToken.cs,GetHashCode,The following statement contains a magic number: hash = 31 * hash + StopIndex;
Magic Number,Tvl.VisualStudio.Language.Parsing4,SnapshotToken,C:\repos\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Antlr\Parsing4\SnapshotToken.cs,GetHashCode,The following statement contains a magic number: hash = 31 * hash + Type;
Magic Number,Tvl.VisualStudio.Language.Parsing,AntlrClassifierBase,C:\repos\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Antlr\Parsing\AntlrClassifierBase.cs,CreateInputStream,The following statement contains a magic number: if (span.Length > 1000)                  input = new SnapshotCharStream(span.Snapshot' span.Span);              else                  input = new SnapshotCharStream(span.Snapshot);
Magic Number,Tvl.VisualStudio.Language.Parsing,AntlrClassifierBase<TState>,C:\repos\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Antlr\Parsing\AntlrClassifierBase`1.cs,GetClassificationSpans,The following statement contains a magic number: using (_lock.UpgradableReadLock(TimeSpan.FromMilliseconds(250)))              {                  Span requestedSpan = span;                  TState startState = AdjustParseSpan(classifierState' ref span);                    ICharStream input = CreateInputStream(span);                  ITokenSourceWithState<TState> lexer = CreateLexer(input' startState);                    IToken previousToken = null;                  bool previousTokenEndsLine = false;                    /* this is held outside the loop because only tokens which end at the end of a line                   * impact its value.                   */                  bool lineStateChanged = false;                    while (true)                  {                      IToken token = lexer.NextToken();                        // The latter is true for EOF token with span.End at the end of the document                      bool inBounds = token.StartIndex < span.End.Position                          || token.StopIndex < span.End.Position;                        int startLineCurrent;                      if (token.Type == CharStreamConstants.EndOfFile)                          startLineCurrent = span.Snapshot.LineCount - 1;                      else                          startLineCurrent = token.Line - 1;                        // endLinePrevious is the line number the previous token ended on                      int endLinePrevious;                      if (previousToken != null)                      {                          Contract.Assert(previousToken.StopIndex >= previousToken.StartIndex' "previousToken can't be EOF");                          endLinePrevious = span.Snapshot.GetLineNumberFromPosition(previousToken.StopIndex);                      }                      else                      {                          endLinePrevious = span.Snapshot.GetLineNumberFromPosition(span.Start) - 1;                      }                        if (startLineCurrent > endLinePrevious + 1 || (startLineCurrent == endLinePrevious + 1 && !previousTokenEndsLine))                      {                          int firstMultilineLine = endLinePrevious;                          if (previousToken == null || previousTokenEndsLine)                              firstMultilineLine++;                            for (int i = firstMultilineLine; i < startLineCurrent; i++)                          {                              if (!classifierState._lineStates[i].MultilineToken || lineStateChanged)                                  extendMultilineSpanToLine = i + 1;                                SetLineState(classifierState' i' LineStateInfo.Multiline);                          }                      }                        if (IsMultilineToken(span.Snapshot' lexer' token))                      {                          int startLine = span.Snapshot.GetLineNumberFromPosition(token.StartIndex);                          int stopLine = span.Snapshot.GetLineNumberFromPosition(Math.Max(token.StartIndex' token.StopIndex));                          for (int i = startLine; i < stopLine; i++)                          {                              if (!classifierState._lineStates[i].MultilineToken)                                  extendMultilineSpanToLine = i + 1;                                SetLineState(classifierState' i' LineStateInfo.Multiline);                          }                      }                        bool tokenEndsLine = TokenEndsAtEndOfLine(span.Snapshot' lexer' token);                      if (tokenEndsLine)                      {                          TState stateAtEndOfLine = lexer.GetCurrentState();                          int line = span.Snapshot.GetLineNumberFromPosition(Math.Max(token.StartIndex' token.StopIndex));                          lineStateChanged =                              classifierState._lineStates[line].MultilineToken                              || !_stateComparer.Equals(classifierState._lineStates[line].EndLineState' stateAtEndOfLine);                            // even if the state didn't change' we call SetLineState to make sure the _first/_lastChangedLine values get updated.                          SetLineState(classifierState' line' new LineStateInfo(stateAtEndOfLine));                            if (lineStateChanged)                          {                              if (line < span.Snapshot.LineCount - 1)                              {                                  /* update the span's end position or the line state change won't be reflected                                   * in the editor                                   */                                  int endPosition = span.Snapshot.GetLineFromLineNumber(line + 1).EndIncludingLineBreak;                                  if (endPosition > extendedSpan.End)                                  {                                      spanExtended = true;                                      extendedSpan = new SnapshotSpan(extendedSpan.Snapshot' Span.FromBounds(extendedSpan.Start' endPosition));                                  }                              }                          }                      }                        if (token.Type == CharStreamConstants.EndOfFile)                          break;                        if (token.StartIndex >= span.End.Position)                          break;                        previousToken = token;                      previousTokenEndsLine = tokenEndsLine;                        if (token.StopIndex < requestedSpan.Start)                          continue;                        var tokenClassificationSpans = GetClassificationSpansForToken(token' span.Snapshot);                      if (tokenClassificationSpans != null)                          classificationSpans.AddRange(tokenClassificationSpans);                        if (!inBounds)                          break;                  }              }
Magic Number,Tvl.VisualStudio.Language.Parsing,AntlrClassifierBase<TState>,C:\repos\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Antlr\Parsing\AntlrClassifierBase`1.cs,CreateInputStream,The following statement contains a magic number: if (span.Length > 1000)                  input = new SnapshotCharStream(span.Snapshot' span.Span);              else                  input = new SnapshotCharStream(span.Snapshot);
Magic Number,Tvl.VisualStudio.Language.Parsing.Collections,Interval,C:\repos\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Antlr\Parsing\Collections\Interval.cs,GetHashCode,The following statement contains a magic number: long value = ((long)_start << 32) + _length;
Magic Number,Tvl.VisualStudio.Language.Parsing.Collections,IntervalSet,C:\repos\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Antlr\Parsing\Collections\IntervalSet.cs,IntervalSet,The following statement contains a magic number: intervals = new List<Interval>(2);
Magic Number,Tvl.VisualStudio.Language.Parsing.Experimental.Atn,NetworkBuilder,C:\repos\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Antlr\Parsing\Experimental\Atn\NetworkBuilder.cs,GetStyles,The following statement contains a magic number: return new XElement(Elements.Styles'                  new XElement(Elements.Style'                      new XAttribute(Attributes.TargetType' "Node")'                      new XAttribute(Attributes.GroupLabel' "Verbose State")'                      new XAttribute(Attributes.ValueLabel' "Verbose State")'                      new XElement(Elements.Condition'                          new XAttribute(Attributes.Expression' string.Format("HasCategory('{0}')"' Categories.VerboseNode)))'                      new XElement(Elements.Setter'                          new XAttribute(Attributes.Property' Attributes.Background)'                          new XAttribute(Attributes.Value' Colors.LightYellow)))'                  new XElement(Elements.Style'                      new XAttribute(Attributes.TargetType' "Node")'                      new XAttribute(Attributes.GroupLabel' "Stop State")'                      new XAttribute(Attributes.ValueLabel' "Stop State")'                      new XElement(Elements.Condition'                          new XAttribute(Attributes.Expression' string.Format("HasCategory('{0}')"' Categories.StopState)))'                      new XElement(Elements.Setter'                          new XAttribute(Attributes.Property' Attributes.Stroke)'                          new XAttribute(Attributes.Value' Colors.Black))'                      new XElement(Elements.Setter'                          new XAttribute(Attributes.Property' Attributes.StrokeThickness)'                          new XAttribute(Attributes.Value' 2)))'                  new XElement(Elements.Style'                      new XAttribute(Attributes.TargetType' "Node")'                      new XAttribute(Attributes.GroupLabel' "Decision State")'                      new XAttribute(Attributes.ValueLabel' "Decision State")'                      new XElement(Elements.Condition'                          new XAttribute(Attributes.Expression' string.Format("HasCategory('{0}')"' Categories.DecisionState)))'                      new XElement(Elements.Setter'                          new XAttribute(Attributes.Property' Attributes.Stroke)'                          new XAttribute(Attributes.Value' Colors.Black))'                      new XElement(Elements.Setter'                          new XAttribute(Attributes.Property' Attributes.StrokeThickness)'                          new XAttribute(Attributes.Value' 1))'                      new XElement(Elements.Setter'                          new XAttribute(Attributes.Property' Attributes.StrokeDashArray)'                          new XAttribute(Attributes.Value' "2'2")))'                  new XElement(Elements.Style'                      new XAttribute(Attributes.TargetType' "Link")'                      new XAttribute(Attributes.GroupLabel' "Epsilon Edge")'                      new XAttribute(Attributes.ValueLabel' "Epsilon Edge")'                      new XElement(Elements.Condition'                          new XAttribute(Attributes.Expression' string.Format("HasCategory('{0}')"' Categories.EpsilonEdge)))'                      new XElement(Elements.Setter'                          new XAttribute(Attributes.Property' Attributes.StrokeDashArray)'                          new XAttribute(Attributes.Value' "2'2")))'                  new XElement(Elements.Style'                      new XAttribute(Attributes.TargetType' "Link")'                      new XAttribute(Attributes.GroupLabel' "Rule Closure Edge")'                      new XAttribute(Attributes.ValueLabel' "Rule Closure Edge")'                      new XElement(Elements.Condition'                          new XAttribute(Attributes.Expression' string.Format("HasCategory('{0}')"' Categories.RuleClosureEdge)))'                      new XElement(Elements.Setter'                          new XAttribute(Attributes.Property' Attributes.Stroke)'                          new XAttribute(Attributes.Value' Colors.Purple))'                      new XElement(Elements.Setter'                          new XAttribute(Attributes.Property' Attributes.FontFamily)'                          new XAttribute(Attributes.Value' "Consolas")))'                  new XElement(Elements.Style'                      new XAttribute(Attributes.TargetType' "Link")'                      new XAttribute(Attributes.GroupLabel' "Atom Edge")'                      new XAttribute(Attributes.ValueLabel' "Atom Edge")'                      new XElement(Elements.Condition'                          new XAttribute(Attributes.Expression' string.Format("HasCategory('{0}')"' Categories.AtomEdge)))'                      new XElement(Elements.Setter'                          new XAttribute(Attributes.Property' Attributes.Stroke)'                          new XAttribute(Attributes.Value' Colors.DarkBlue))'                      new XElement(Elements.Setter'                          new XAttribute(Attributes.Property' Attributes.FontFamily)'                          new XAttribute(Attributes.Value' "Consolas")))'                  new XElement(Elements.Style'                      new XAttribute(Attributes.TargetType' "Link")'                      new XAttribute(Attributes.GroupLabel' "Push Context Edge")'                      new XAttribute(Attributes.ValueLabel' "Push Context Edge")'                      new XElement(Elements.Condition'                          new XAttribute(Attributes.Expression' string.Format("HasCategory('{0}')"' Categories.PushContextEdge)))'                      new XElement(Elements.Setter'                          new XAttribute(Attributes.Property' Attributes.Stroke)'                          new XAttribute(Attributes.Value' Colors.DarkGreen))'                      new XElement(Elements.Setter'                          new XAttribute(Attributes.Property' Attributes.FontFamily)'                          new XAttribute(Attributes.Value' "Consolas")))'                  new XElement(Elements.Style'                      new XAttribute(Attributes.TargetType' "Link")'                      new XAttribute(Attributes.GroupLabel' "Pop Context Edge")'                      new XAttribute(Attributes.ValueLabel' "Pop Context Edge")'                      new XElement(Elements.Condition'                          new XAttribute(Attributes.Expression' string.Format("HasCategory('{0}')"' Categories.PopContextEdge)))'                      new XElement(Elements.Setter'                          new XAttribute(Attributes.Property' Attributes.Stroke)'                          new XAttribute(Attributes.Value' Colors.DarkRed))'                      new XElement(Elements.Setter'                          new XAttribute(Attributes.Property' Attributes.FontFamily)'                          new XAttribute(Attributes.Value' "Consolas"))));
Magic Number,Tvl.VisualStudio.Language.Parsing.Experimental.Atn,StateOptimizer,C:\repos\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Antlr\Parsing\Experimental\Atn\StateOptimizer.cs,GetNestedContextsAndStates,The following statement contains a magic number: foreach (var outerTransition in _reachableTransitions.OfType<PushContextTransition>())              {                  HashSet<State> visited = new HashSet<State>(ObjectReferenceEqualityComparer<State>.Default);                  foreach (var state in GetStatesInContext(outerTransition.TargetState' visited))                  {                      ulong key = ((ulong)(ulong)outerTransition.ContextIdentifiers.Single() << 32) | (uint)state.Id;                      _contextStates.Add(key);                        foreach (var innerTransition in state.OutgoingTransitions.OfType<PushContextTransition>())                      {                          key = ((ulong)(ulong)outerTransition.ContextIdentifiers.Single() << 32) | (uint)innerTransition.ContextIdentifiers.Single();                          _nestedContexts.Add(key);                      }                  }              }
Magic Number,Tvl.VisualStudio.Language.Parsing.Experimental.Atn,StateOptimizer,C:\repos\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Antlr\Parsing\Experimental\Atn\StateOptimizer.cs,GetNestedContextsAndStates,The following statement contains a magic number: foreach (var outerTransition in _reachableTransitions.OfType<PushContextTransition>())              {                  HashSet<State> visited = new HashSet<State>(ObjectReferenceEqualityComparer<State>.Default);                  foreach (var state in GetStatesInContext(outerTransition.TargetState' visited))                  {                      ulong key = ((ulong)(ulong)outerTransition.ContextIdentifiers.Single() << 32) | (uint)state.Id;                      _contextStates.Add(key);                        foreach (var innerTransition in state.OutgoingTransitions.OfType<PushContextTransition>())                      {                          key = ((ulong)(ulong)outerTransition.ContextIdentifiers.Single() << 32) | (uint)innerTransition.ContextIdentifiers.Single();                          _nestedContexts.Add(key);                      }                  }              }
Magic Number,Tvl.VisualStudio.Language.Parsing.Experimental.Atn,StateOptimizer,C:\repos\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Antlr\Parsing\Experimental\Atn\StateOptimizer.cs,CanNestContexts,The following statement contains a magic number: ulong key = ((ulong)(ulong)outerContext << 32) | (uint)innerContext;
Magic Number,Tvl.VisualStudio.Language.Parsing.Experimental.Atn,StateOptimizer,C:\repos\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Antlr\Parsing\Experimental\Atn\StateOptimizer.cs,IsStateInContext,The following statement contains a magic number: ulong key = ((ulong)(ulong)context << 32) | (uint)state;
Magic Number,Tvl.VisualStudio.Language.Parsing.Experimental.Atn,State,C:\repos\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Antlr\Parsing\Experimental\Atn\State.cs,AddTransitionInternal,The following statement contains a magic number: if (_outgoingTransitions.Count > 10 && !(_outgoingTransitions is ISet<Transition>))              {                  _outgoingTransitions = new HashSet<Transition>(_outgoingTransitions' ObjectReferenceEqualityComparer<Transition>.Default);              }
Magic Number,Tvl.VisualStudio.Language.Parsing.Experimental.Atn,State,C:\repos\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Antlr\Parsing\Experimental\Atn\State.cs,AddTransitionInternal,The following statement contains a magic number: if (transition.TargetState.IncomingTransitions.Count > 10 && !(transition.TargetState.IncomingTransitions is ISet<Transition>))              {                  transition.TargetState._incomingTransitions = new HashSet<Transition>(transition.TargetState._incomingTransitions' ObjectReferenceEqualityComparer<Transition>.Default);              }
Magic Number,Tvl.VisualStudio.Language.Parsing.Experimental.Interpreter,ContextFrame,C:\repos\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Antlr\Parsing\Experimental\Interpreter\ContextFrame.cs,ContextFrame,The following statement contains a magic number: long parentCode = (Parent != null) ? Parent.GetHashCode() * 104729 : 0;
