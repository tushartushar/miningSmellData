Implementation smell,Namespace,Class,File,Method,Description
Long Method,Tvl.VisualStudio.Language.Go.Experimental,GoAtnOutliningTagger,D:\research\architectureSmells\repos1\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Language.Go\Experimental\GoAtnOutliningTagger.cs,ReParseImpl,The method has 100 lines of code.
Long Method,Tvl.VisualStudio.Language.Go.Experimental,GoSymbolTagger,D:\research\architectureSmells\repos1\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Language.Go\Experimental\GoSymbolTagger.cs,ReParseImpl,The method has 245 lines of code.
Long Method,Tvl.VisualStudio.Language.Go.Experimental,GoSimplifiedAtnBuilder,D:\research\architectureSmells\repos1\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Language.Go\Experimental\GoSimplifiedAtnBuilder.cs,GoSimplifiedAtnBuilder,The method has 130 lines of code.
Long Method,Tvl.VisualStudio.Language.Go.Experimental,GoSimplifiedAtnBuilder,D:\research\architectureSmells\repos1\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Language.Go\Experimental\GoSimplifiedAtnBuilder.cs,BindRulesImpl,The method has 126 lines of code.
Long Method,Tvl.VisualStudio.Language.Go,GoQuickInfoSource,D:\research\architectureSmells\repos1\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Language.Go\GoQuickInfoSource.cs,AugmentQuickInfoSession,The method has 150 lines of code.
Long Method,Tvl.VisualStudio.Language.Go,GoEditorNavigationSource,D:\research\architectureSmells\repos1\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Language.Go\GoEditorNavigationSource.cs,HandleBackgroundParseComplete,The method has 150 lines of code.
Complex Method,Tvl.VisualStudio.Language.Go.Experimental,GoAtnOutliningTagger,D:\research\architectureSmells\repos1\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Language.Go\Experimental\GoAtnOutliningTagger.cs,ReParseImpl,Cyclomatic complexity of the method is 18
Complex Method,Tvl.VisualStudio.Language.Go.Experimental,GoSymbolTagger,D:\research\architectureSmells\repos1\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Language.Go\Experimental\GoSymbolTagger.cs,ReParseImpl,Cyclomatic complexity of the method is 33
Complex Method,Tvl.VisualStudio.Language.Go,GoQuickInfoSource,D:\research\architectureSmells\repos1\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Language.Go\GoQuickInfoSource.cs,AugmentQuickInfoSession,Cyclomatic complexity of the method is 20
Complex Method,Tvl.VisualStudio.Language.Go,GoQuickInfoSource,D:\research\architectureSmells\repos1\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Language.Go\GoQuickInfoSource.cs,AnalyzeInterpreterTrace,Cyclomatic complexity of the method is 15
Complex Method,Tvl.VisualStudio.Language.Go,GoEditorNavigationSource,D:\research\architectureSmells\repos1\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Language.Go\GoEditorNavigationSource.cs,HandleBackgroundParseComplete,Cyclomatic complexity of the method is 26
Long Parameter List,Tvl.VisualStudio.Language.Go.Experimental,GoSymbolTagger,D:\research\architectureSmells\repos1\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Language.Go\Experimental\GoSymbolTagger.cs,GoSymbolTagger,The method has 5 parameters. Parameters: textBuffer' classificationTypeRegistryService' taskScheduler' textDocumentFactoryService' outputWindowService
Long Identifier,Tvl.VisualStudio.Language.Go.Experimental,GoSymbolTagger,D:\research\architectureSmells\repos1\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Language.Go\Experimental\GoSymbolTagger.cs,GoSymbolTagger,The length of the parameter classificationTypeRegistryService is 33.
Long Identifier,Tvl.VisualStudio.Language.Go.Experimental,GoSymbolTagger,D:\research\architectureSmells\repos1\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Language.Go\Experimental\GoSymbolTagger.cs,,The length of the parameter _classificationTypeRegistryService is 34.
Long Identifier,Tvl.VisualStudio.Language.Go.Experimental,GoSymbolTaggerClassificationTypeNames,D:\research\architectureSmells\repos1\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Language.Go\Experimental\GoSymbolTaggerClassificationTypeNames.cs,,The length of the parameter UnknownIdentifierClassification is 31.
Long Identifier,Tvl.VisualStudio.Language.Go,GoConstants,D:\research\architectureSmells\repos1\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Language.Go\GoConstants.cs,,The length of the parameter GoLanguagePackageNameResourceString is 35.
Long Identifier,Tvl.VisualStudio.Language.Go,GoConstants,D:\research\architectureSmells\repos1\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Language.Go\GoConstants.cs,,The length of the parameter GoLanguagePackageDetailsResourceString is 38.
Long Identifier,Tvl.VisualStudio.Language.Go,GoConstants,D:\research\architectureSmells\repos1\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Language.Go\GoConstants.cs,,The length of the parameter GoLanguagePackageProductVersionString is 37.
Long Identifier,Tvl.VisualStudio.Language.Go,GoServices,D:\research\architectureSmells\repos1\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Language.Go\GoServices.cs,,The length of the parameter GoFileExtensionToContentTypeDefinition is 38.
Long Identifier,Tvl.VisualStudio.Language.Go,GoClassifier,D:\research\architectureSmells\repos1\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Language.Go\GoClassifier.cs,GoClassifier,The length of the parameter classificationTypeRegistryService is 33.
Long Identifier,Tvl.VisualStudio.Language.Go,GoClassifier,D:\research\architectureSmells\repos1\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Language.Go\GoClassifier.cs,,The length of the parameter _standardClassificationService is 30.
Long Identifier,Tvl.VisualStudio.Language.Go,GoClassifier,D:\research\architectureSmells\repos1\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Language.Go\GoClassifier.cs,,The length of the parameter _classificationTypeRegistryService is 34.
Long Statement,Tvl.VisualStudio.Language.Go.Experimental,GoAtnOutliningTaggerProvider,D:\research\architectureSmells\repos1\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Language.Go\Experimental\GoAtnOutliningTaggerProvider.cs,CreateTagger,The length of the statement  "            Func<GoAtnOutliningTagger> creator = () => new GoAtnOutliningTagger(buffer' BackgroundIntelliSenseTaskScheduler' TextDocumentFactoryService' OutputWindowService); " is 162.
Long Statement,Tvl.VisualStudio.Language.Go.Experimental,GoSymbolTagger,D:\research\architectureSmells\repos1\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Language.Go\Experimental\GoSymbolTagger.cs,ReParseImpl,The length of the statement  "            IClassificationType definitionClassificationType = _classificationTypeRegistryService.GetClassificationType(GoSymbolTaggerClassificationTypeNames.Definition); " is 158.
Long Statement,Tvl.VisualStudio.Language.Go.Experimental,GoSymbolTagger,D:\research\architectureSmells\repos1\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Language.Go\Experimental\GoSymbolTagger.cs,ReParseImpl,The length of the statement  "            IClassificationType referenceClassificationType = _classificationTypeRegistryService.GetClassificationType(GoSymbolTaggerClassificationTypeNames.Reference); " is 156.
Long Statement,Tvl.VisualStudio.Language.Go.Experimental,GoSymbolTagger,D:\research\architectureSmells\repos1\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Language.Go\Experimental\GoSymbolTagger.cs,ReParseImpl,The length of the statement  "            IClassificationType unknownClassificationType = _classificationTypeRegistryService.GetClassificationType(GoSymbolTaggerClassificationTypeNames.UnknownIdentifier); " is 162.
Long Statement,Tvl.VisualStudio.Language.Go.Experimental,GoSymbolTagger,D:\research\architectureSmells\repos1\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Language.Go\Experimental\GoSymbolTagger.cs,ReParseImpl,The length of the statement  "                pane.WriteLine(string.Format("Finished classifying {0} identifiers in {1}ms: {2} definitions' {3} references' {4} unknown"' identifiers.Count' timer.ElapsedMilliseconds' definitions.Count' references.Count' unknownIdentifiers.Count)); " is 234.
Long Statement,Tvl.VisualStudio.Language.Go.Experimental,GoSymbolTagger,D:\research\architectureSmells\repos1\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Language.Go\Experimental\GoSymbolTagger.cs,IsConsistentWithPreviousResult,The length of the statement  "                if (transition.Interpreter.Network.StateRules[transition.Transition.SourceState.Id].Name != GoSimplifiedAtnBuilder.RuleNames.SymbolDefinitionIdentifier) " is 152.
Long Statement,Tvl.VisualStudio.Language.Go.Experimental,GoSymbolTagger,D:\research\architectureSmells\repos1\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Language.Go\Experimental\GoSymbolTagger.cs,IsConsistentWithPreviousResult,The length of the statement  "                if (transition.Interpreter.Network.StateRules[transition.Transition.SourceState.Id].Name != GoSimplifiedAtnBuilder.RuleNames.SymbolReferenceIdentifier) " is 151.
Long Statement,Tvl.VisualStudio.Language.Go.Experimental,GoSymbolTaggerProvider,D:\research\architectureSmells\repos1\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Language.Go\Experimental\GoSymbolTaggerProvider.cs,CreateTagger,The length of the statement  "            Func<GoSymbolTagger> creator = () => new GoSymbolTagger(buffer' ClassificationTypeRegistryService' BackgroundIntelliSenseTaskScheduler' TextDocumentFactoryService' OutputWindowService); " is 185.
Long Statement,Tvl.VisualStudio.Language.Go.Experimental,GoSimplifiedAtnBuilder,D:\research\architectureSmells\repos1\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Language.Go\Experimental\GoSimplifiedAtnBuilder.cs,BuildMulOpRule,The length of the statement  "            return Nfa.MatchAny(GoLexer.TIMES' GoLexer.DIV' GoLexer.MOD' GoLexer.LSHIFT' GoLexer.RSHIFT' GoLexer.BITAND' GoLexer.BITCLR); " is 125.
Long Statement,Tvl.VisualStudio.Language.Go.Experimental,GoSimplifiedAtnBuilder,D:\research\architectureSmells\repos1\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Language.Go\Experimental\GoSimplifiedAtnBuilder.cs,BuildUnaryOpRule,The length of the statement  "            return Nfa.MatchAny(GoLexer.PLUS' GoLexer.MINUS' GoLexer.NOT' GoLexer.XOR' GoLexer.TIMES' GoLexer.BITAND' GoLexer.CHAN); " is 120.
Long Statement,Tvl.VisualStudio.Language.Go,GoQuickInfoSource,D:\research\architectureSmells\repos1\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Language.Go\GoQuickInfoSource.cs,AugmentQuickInfoSession,The length of the statement  "                    pane.WriteLine(string.Format("Located {0} QuickInfo expression(s) in {1}ms."' interpreter.Contexts.Count' stopwatch.ElapsedMilliseconds)); " is 138.
Long Statement,Tvl.VisualStudio.Language.Go,GoEditorNavigationSource,D:\research\architectureSmells\repos1\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Language.Go\GoEditorNavigationSource.cs,HandleBackgroundParseComplete,The length of the statement  "                //    var navigationType = EditorNavigationTypeRegistryService.GetEditorNavigationType(PredefinedEditorNavigationTypes.Types); " is 126.
Long Statement,Tvl.VisualStudio.Language.Go,GoEditorNavigationSource,D:\research\architectureSmells\repos1\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Language.Go\GoEditorNavigationSource.cs,HandleBackgroundParseComplete,The length of the statement  "                                var navigationType = EditorNavigationTypeRegistryService.GetEditorNavigationType(PredefinedEditorNavigationTypes.Types); " is 120.
Long Statement,Tvl.VisualStudio.Language.Go,GoEditorNavigationSource,D:\research\architectureSmells\repos1\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Language.Go\GoEditorNavigationSource.cs,HandleBackgroundParseComplete,The length of the statement  "                                var navigationType = EditorNavigationTypeRegistryService.GetEditorNavigationType(PredefinedEditorNavigationTypes.Types); " is 120.
Long Statement,Tvl.VisualStudio.Language.Go,GoEditorNavigationSource,D:\research\architectureSmells\repos1\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Language.Go\GoEditorNavigationSource.cs,HandleBackgroundParseComplete,The length of the statement  "                                var glyph = _provider.GlyphService.GetGlyph(GetGlyphGroupForType(typeSpec)' char.IsUpper(typeName[0]) ? StandardGlyphItem.GlyphItemPublic : StandardGlyphItem.GlyphItemPrivate); " is 176.
Long Statement,Tvl.VisualStudio.Language.Go,GoEditorNavigationSource,D:\research\architectureSmells\repos1\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Language.Go\GoEditorNavigationSource.cs,HandleBackgroundParseComplete,The length of the statement  "                                            glyph = _provider.GlyphService.GetGlyph(StandardGlyphGroup.GlyphGroupField' char.IsUpper(fieldName[0]) ? StandardGlyphItem.GlyphItemPublic : StandardGlyphItem.GlyphItemPrivate); " is 177.
Long Statement,Tvl.VisualStudio.Language.Go,GoEditorNavigationSource,D:\research\architectureSmells\repos1\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Language.Go\GoEditorNavigationSource.cs,HandleBackgroundParseComplete,The length of the statement  "                                    var navigationType = EditorNavigationTypeRegistryService.GetEditorNavigationType(PredefinedEditorNavigationTypes.Members); " is 122.
Long Statement,Tvl.VisualStudio.Language.Go,GoEditorNavigationSource,D:\research\architectureSmells\repos1\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Language.Go\GoEditorNavigationSource.cs,HandleBackgroundParseComplete,The length of the statement  "                                    var group = (child.Type == GoLexer.KW_CONST) ? StandardGlyphGroup.GlyphGroupConstant : StandardGlyphGroup.GlyphGroupVariable; " is 125.
Long Statement,Tvl.VisualStudio.Language.Go,GoEditorNavigationSource,D:\research\architectureSmells\repos1\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Language.Go\GoEditorNavigationSource.cs,HandleBackgroundParseComplete,The length of the statement  "                                var navigationType = EditorNavigationTypeRegistryService.GetEditorNavigationType(PredefinedEditorNavigationTypes.Members); " is 122.
Long Statement,Tvl.VisualStudio.Language.Go,GoEditorNavigationSource,D:\research\architectureSmells\repos1\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Language.Go\GoEditorNavigationSource.cs,HandleBackgroundParseComplete,The length of the statement  "                                var glyph = _provider.GlyphService.GetGlyph(StandardGlyphGroup.GlyphGroupMethod' char.IsUpper(functionName[0]) ? StandardGlyphItem.GlyphItemPublic : StandardGlyphItem.GlyphItemPrivate); " is 185.
Long Statement,Tvl.VisualStudio.Language.Go,GoCommenterProvider,D:\research\architectureSmells\repos1\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Language.Go\GoCommenterProvider.cs,GetCommenter,The length of the statement  "            Func<Commenter> factory = () => new Commenter(textView' TextUndoHistoryRegistry' LineCommentFormat' BlockCommentFormat); " is 120.
Long Statement,Tvl.VisualStudio.Language.Go,GoSemicolonInsertionTokenSource,D:\research\architectureSmells\repos1\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Language.Go\GoSemicolonInsertionTokenSource.cs,NextTokenImpl,The length of the statement  "                    new CommonToken(_nextRealToken.InputStream' GoLexer.SEMI' TokenChannels.Default' _nextRealToken.StartIndex' _nextRealToken.StopIndex) " is 133.
Long Statement,Tvl.VisualStudio.Language.Go,GoBackgroundParser,D:\research\architectureSmells\repos1\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Language.Go\GoBackgroundParser.cs,ReParseImpl,The length of the statement  "                            message = string.Format("{0}({1}'{2}): {3}"' fileName' line.LineNumber + 1' e.Span.Start - line.Start.Position + 1' message); " is 125.
Long Statement,Tvl.VisualStudio.Language.Go,GoBackgroundParserProvider,D:\research\architectureSmells\repos1\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Language.Go\GoBackgroundParserProvider.cs,CreateParser,The length of the statement  "            Func<GoBackgroundParser> creator = () => new GoBackgroundParser(textBuffer' BackgroundIntelliSenseTaskScheduler' TextDocumentFactoryService' OutputWindowService); " is 162.
Long Statement,Tvl.VisualStudio.Language.Go,GoOutliningTaggerProvider,D:\research\architectureSmells\repos1\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Language.Go\GoOutliningTaggerProvider.cs,CreateTagger,The length of the statement  "            Func<GoOutliningTagger> creator = () => new GoOutliningTagger(buffer' BackgroundParserFactoryService.GetBackgroundParser(buffer)' this); " is 136.
Empty Catch Block,Tvl.VisualStudio.Language.Go,GoBackgroundParser,D:\research\architectureSmells\repos1\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Language.Go\GoBackgroundParser.cs,ReParseImpl,The method has an empty catch block.
Magic Number,Tvl.VisualStudio.Language.Go.Experimental,GoSymbolTagger,D:\research\architectureSmells\repos1\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Language.Go\Experimental\GoSymbolTagger.cs,ReParseImpl,The following statement contains a magic number: interpreter.Contexts.Count == 0 || interpreter.Contexts.Count > 400
Magic Number,Tvl.VisualStudio.Language.Go.Experimental,GoSymbolTagger,D:\research\architectureSmells\repos1\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Language.Go\Experimental\GoSymbolTagger.cs,ReParseImpl,The following statement contains a magic number: IToken potentialLabel = tokens.LT(-2);
Magic Number,Tvl.VisualStudio.Language.Go.Experimental,GoSymbolTagger,D:\research\architectureSmells\repos1\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Language.Go\Experimental\GoSymbolTagger.cs,ReParseImpl,The following statement contains a magic number: interpreter.Contexts.Count == 0 || interpreter.Contexts.Count > 400
Magic Number,Tvl.VisualStudio.Language.Go.Experimental,GoSymbolTagger,D:\research\architectureSmells\repos1\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Language.Go\Experimental\GoSymbolTagger.cs,ReParseImpl,The following statement contains a magic number: interpreter.Contexts.Count == 0 || interpreter.Contexts.Count > 400
Magic Number,Tvl.VisualStudio.Language.Go,GoEditorNavigationSource,D:\research\architectureSmells\repos1\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Language.Go\GoEditorNavigationSource.cs,HandleBackgroundParseComplete,The following statement contains a magic number: switch (child.Type)                          {                          case GoLexer.KW_PACKAGE:                              {                                  packageName = ((CommonTree)child.Children[0]).Token.Text;                                  if (string.IsNullOrWhiteSpace(packageName))                                      continue;                                    var navigationType = EditorNavigationTypeRegistryService.GetEditorNavigationType(PredefinedEditorNavigationTypes.Types);                                  var startToken = antlrParseResultArgs.Tokens[child.TokenStartIndex];                                  var stopToken = antlrParseResultArgs.Tokens[child.TokenStopIndex];                                  //Span span = new Span(startToken.StartIndex' stopToken.StopIndex - startToken.StartIndex + 1);                                  //SnapshotSpan ruleSpan = new SnapshotSpan(e.Snapshot' span);                                  // applies to the whole file                                  var span = new SnapshotSpan(e.Snapshot' new Span(0' e.Snapshot.Length));                                  SnapshotSpan ruleSeek = new SnapshotSpan(e.Snapshot' new Span(((CommonTree)child.Children[0]).Token.StartIndex' 0));                                  var glyph = _provider.GlyphService.GetGlyph(StandardGlyphGroup.GlyphGroupModule' StandardGlyphItem.GlyphItemPublic);                                  navigationTargets.Add(new EditorNavigationTarget(packageName' navigationType' span' ruleSeek' glyph));                              }                              break;                            case GoLexer.KW_TYPE:                              // each child tree is a typeSpec' the root of which is an identifier that names the type                              foreach (CommonTree typeSpec in child.Children)                              {                                  var typeName = typeSpec.Token.Text;                                  if (string.IsNullOrWhiteSpace(typeName))                                      continue;                                    for (ITree parent = typeSpec.Parent; parent != null; parent = parent.Parent)                                  {                                      if (parent.Type == GoParser.TYPE_IDENTIFIER)                                          typeName = parent.Text + "." + typeName;                                  }                                    if (!string.IsNullOrWhiteSpace(packageName))                                      typeName = packageName + "." + typeName;                                    var navigationType = EditorNavigationTypeRegistryService.GetEditorNavigationType(PredefinedEditorNavigationTypes.Types);                                  var startToken = antlrParseResultArgs.Tokens[typeSpec.TokenStartIndex];                                  var stopToken = antlrParseResultArgs.Tokens[typeSpec.TokenStopIndex];                                  Span span = new Span(startToken.StartIndex' stopToken.StopIndex - startToken.StartIndex + 1);                                  SnapshotSpan ruleSpan = new SnapshotSpan(e.Snapshot' span);                                  SnapshotSpan ruleSeek = new SnapshotSpan(e.Snapshot' new Span(typeSpec.Token.StartIndex' 0));                                  var glyph = _provider.GlyphService.GetGlyph(GetGlyphGroupForType(typeSpec)' char.IsUpper(typeName[0]) ? StandardGlyphItem.GlyphItemPublic : StandardGlyphItem.GlyphItemPrivate);                                  navigationTargets.Add(new EditorNavigationTarget(typeName' navigationType' ruleSpan' ruleSeek' glyph));                                    if (typeSpec.ChildCount > 0 && typeSpec.Children[0].Type == GoLexer.KW_STRUCT && typeSpec.Children[0].ChildCount > 0)                                  {                                      foreach (CommonTree fieldSpec in ((CommonTree)typeSpec.Children[0]).Children)                                      {                                          if (fieldSpec.Type != GoParser.FIELD_DECLARATION)                                              continue;                                            foreach (CommonTree fieldNameIdentifier in ((CommonTree)fieldSpec.GetFirstChildWithType(GoParser.AST_VARS)).Children)                                          {                                              string fieldName = fieldNameIdentifier.Text;                                              navigationType = EditorNavigationTypeRegistryService.GetEditorNavigationType(PredefinedEditorNavigationTypes.Members);                                              startToken = antlrParseResultArgs.Tokens[fieldNameIdentifier.TokenStartIndex];                                              stopToken = antlrParseResultArgs.Tokens[fieldSpec.TokenStopIndex];                                              span = new Span(startToken.StartIndex' stopToken.StopIndex - startToken.StartIndex + 1);                                              ruleSpan = new SnapshotSpan(e.Snapshot' span);                                              ruleSeek = new SnapshotSpan(e.Snapshot' new Span(fieldNameIdentifier.Token.StartIndex' 0));                                              glyph = _provider.GlyphService.GetGlyph(StandardGlyphGroup.GlyphGroupField' char.IsUpper(fieldName[0]) ? StandardGlyphItem.GlyphItemPublic : StandardGlyphItem.GlyphItemPrivate);                                              navigationTargets.Add(new EditorNavigationTarget(fieldName' navigationType' ruleSpan' ruleSeek' glyph));                                          }                                      }                                  }                              }                                break;                            case GoLexer.KW_CONST:                          case GoLexer.KW_VAR:                              foreach (CommonTree spec in child.Children)                              {                                  CommonTree decl = (CommonTree)spec.Children[0];                                  foreach (CommonTree nameToken in decl.Children)                                  {                                      var name = nameToken.Token.Text;                                      if (string.IsNullOrWhiteSpace(name))                                          continue;                                        var navigationType = EditorNavigationTypeRegistryService.GetEditorNavigationType(PredefinedEditorNavigationTypes.Members);                                      var startToken = antlrParseResultArgs.Tokens[nameToken.TokenStartIndex];                                      var stopToken = antlrParseResultArgs.Tokens[nameToken.TokenStopIndex];                                      Span span = new Span(startToken.StartIndex' stopToken.StopIndex - startToken.StartIndex + 1);                                      SnapshotSpan ruleSpan = new SnapshotSpan(e.Snapshot' span);                                      SnapshotSpan ruleSeek = new SnapshotSpan(e.Snapshot' new Span(nameToken.Token.StartIndex' 0));                                      var group = (child.Type == GoLexer.KW_CONST) ? StandardGlyphGroup.GlyphGroupConstant : StandardGlyphGroup.GlyphGroupVariable;                                      var item = char.IsUpper(name[0]) ? StandardGlyphItem.GlyphItemPublic : StandardGlyphItem.GlyphItemPrivate;                                      var glyph = _provider.GlyphService.GetGlyph(group' item);                                      navigationTargets.Add(new EditorNavigationTarget(name' navigationType' ruleSpan' ruleSeek' glyph));                                  }                              }                              break;                            case GoLexer.KW_FUNC:                              {                                  // the first child is either a receiver (method) or an identifier with the name of the function                                  var token = ((CommonTree)child.Children[0]).Token;                                  if (token.Type == GoLexer.METHOD_RECEIVER)                                      token = ((CommonTree)child.Children[1]).Token;                                    var functionName = token.Text;                                  if (string.IsNullOrWhiteSpace(functionName))                                      continue;                                    ITree receiver = child.GetFirstChildWithType(GoParser.METHOD_RECEIVER);                                  if (receiver != null)                                  {                                      string receiverName;                                      if (receiver.ChildCount >= 2)                                          receiverName = receiver.GetChild(receiver.ChildCount - 2).Text;                                      else                                          receiverName = "?";                                        functionName = receiverName + "." + functionName;                                  }                                    IEnumerable<string> args = ProcessFunctionParameters(child);                                  string sig = string.Format("{0}({1})"' functionName' string.Join("' "' args));                                  var navigationType = EditorNavigationTypeRegistryService.GetEditorNavigationType(PredefinedEditorNavigationTypes.Members);                                  var startToken = antlrParseResultArgs.Tokens[child.TokenStartIndex];                                  var stopToken = antlrParseResultArgs.Tokens[child.TokenStopIndex];                                  Span span = new Span(startToken.StartIndex' stopToken.StopIndex - startToken.StartIndex + 1);                                  SnapshotSpan ruleSpan = new SnapshotSpan(e.Snapshot' span);                                  SnapshotSpan ruleSeek = new SnapshotSpan(e.Snapshot' new Span(child.Token.StartIndex' 0));                                  var glyph = _provider.GlyphService.GetGlyph(StandardGlyphGroup.GlyphGroupMethod' char.IsUpper(functionName[0]) ? StandardGlyphItem.GlyphItemPublic : StandardGlyphItem.GlyphItemPrivate);                                  navigationTargets.Add(new EditorNavigationTarget(sig' navigationType' ruleSpan' ruleSeek' glyph));                              }                                break;                            default:                              continue;                          }
Magic Number,Tvl.VisualStudio.Language.Go,GoEditorNavigationSource,D:\research\architectureSmells\repos1\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Language.Go\GoEditorNavigationSource.cs,HandleBackgroundParseComplete,The following statement contains a magic number: switch (child.Type)                          {                          case GoLexer.KW_PACKAGE:                              {                                  packageName = ((CommonTree)child.Children[0]).Token.Text;                                  if (string.IsNullOrWhiteSpace(packageName))                                      continue;                                    var navigationType = EditorNavigationTypeRegistryService.GetEditorNavigationType(PredefinedEditorNavigationTypes.Types);                                  var startToken = antlrParseResultArgs.Tokens[child.TokenStartIndex];                                  var stopToken = antlrParseResultArgs.Tokens[child.TokenStopIndex];                                  //Span span = new Span(startToken.StartIndex' stopToken.StopIndex - startToken.StartIndex + 1);                                  //SnapshotSpan ruleSpan = new SnapshotSpan(e.Snapshot' span);                                  // applies to the whole file                                  var span = new SnapshotSpan(e.Snapshot' new Span(0' e.Snapshot.Length));                                  SnapshotSpan ruleSeek = new SnapshotSpan(e.Snapshot' new Span(((CommonTree)child.Children[0]).Token.StartIndex' 0));                                  var glyph = _provider.GlyphService.GetGlyph(StandardGlyphGroup.GlyphGroupModule' StandardGlyphItem.GlyphItemPublic);                                  navigationTargets.Add(new EditorNavigationTarget(packageName' navigationType' span' ruleSeek' glyph));                              }                              break;                            case GoLexer.KW_TYPE:                              // each child tree is a typeSpec' the root of which is an identifier that names the type                              foreach (CommonTree typeSpec in child.Children)                              {                                  var typeName = typeSpec.Token.Text;                                  if (string.IsNullOrWhiteSpace(typeName))                                      continue;                                    for (ITree parent = typeSpec.Parent; parent != null; parent = parent.Parent)                                  {                                      if (parent.Type == GoParser.TYPE_IDENTIFIER)                                          typeName = parent.Text + "." + typeName;                                  }                                    if (!string.IsNullOrWhiteSpace(packageName))                                      typeName = packageName + "." + typeName;                                    var navigationType = EditorNavigationTypeRegistryService.GetEditorNavigationType(PredefinedEditorNavigationTypes.Types);                                  var startToken = antlrParseResultArgs.Tokens[typeSpec.TokenStartIndex];                                  var stopToken = antlrParseResultArgs.Tokens[typeSpec.TokenStopIndex];                                  Span span = new Span(startToken.StartIndex' stopToken.StopIndex - startToken.StartIndex + 1);                                  SnapshotSpan ruleSpan = new SnapshotSpan(e.Snapshot' span);                                  SnapshotSpan ruleSeek = new SnapshotSpan(e.Snapshot' new Span(typeSpec.Token.StartIndex' 0));                                  var glyph = _provider.GlyphService.GetGlyph(GetGlyphGroupForType(typeSpec)' char.IsUpper(typeName[0]) ? StandardGlyphItem.GlyphItemPublic : StandardGlyphItem.GlyphItemPrivate);                                  navigationTargets.Add(new EditorNavigationTarget(typeName' navigationType' ruleSpan' ruleSeek' glyph));                                    if (typeSpec.ChildCount > 0 && typeSpec.Children[0].Type == GoLexer.KW_STRUCT && typeSpec.Children[0].ChildCount > 0)                                  {                                      foreach (CommonTree fieldSpec in ((CommonTree)typeSpec.Children[0]).Children)                                      {                                          if (fieldSpec.Type != GoParser.FIELD_DECLARATION)                                              continue;                                            foreach (CommonTree fieldNameIdentifier in ((CommonTree)fieldSpec.GetFirstChildWithType(GoParser.AST_VARS)).Children)                                          {                                              string fieldName = fieldNameIdentifier.Text;                                              navigationType = EditorNavigationTypeRegistryService.GetEditorNavigationType(PredefinedEditorNavigationTypes.Members);                                              startToken = antlrParseResultArgs.Tokens[fieldNameIdentifier.TokenStartIndex];                                              stopToken = antlrParseResultArgs.Tokens[fieldSpec.TokenStopIndex];                                              span = new Span(startToken.StartIndex' stopToken.StopIndex - startToken.StartIndex + 1);                                              ruleSpan = new SnapshotSpan(e.Snapshot' span);                                              ruleSeek = new SnapshotSpan(e.Snapshot' new Span(fieldNameIdentifier.Token.StartIndex' 0));                                              glyph = _provider.GlyphService.GetGlyph(StandardGlyphGroup.GlyphGroupField' char.IsUpper(fieldName[0]) ? StandardGlyphItem.GlyphItemPublic : StandardGlyphItem.GlyphItemPrivate);                                              navigationTargets.Add(new EditorNavigationTarget(fieldName' navigationType' ruleSpan' ruleSeek' glyph));                                          }                                      }                                  }                              }                                break;                            case GoLexer.KW_CONST:                          case GoLexer.KW_VAR:                              foreach (CommonTree spec in child.Children)                              {                                  CommonTree decl = (CommonTree)spec.Children[0];                                  foreach (CommonTree nameToken in decl.Children)                                  {                                      var name = nameToken.Token.Text;                                      if (string.IsNullOrWhiteSpace(name))                                          continue;                                        var navigationType = EditorNavigationTypeRegistryService.GetEditorNavigationType(PredefinedEditorNavigationTypes.Members);                                      var startToken = antlrParseResultArgs.Tokens[nameToken.TokenStartIndex];                                      var stopToken = antlrParseResultArgs.Tokens[nameToken.TokenStopIndex];                                      Span span = new Span(startToken.StartIndex' stopToken.StopIndex - startToken.StartIndex + 1);                                      SnapshotSpan ruleSpan = new SnapshotSpan(e.Snapshot' span);                                      SnapshotSpan ruleSeek = new SnapshotSpan(e.Snapshot' new Span(nameToken.Token.StartIndex' 0));                                      var group = (child.Type == GoLexer.KW_CONST) ? StandardGlyphGroup.GlyphGroupConstant : StandardGlyphGroup.GlyphGroupVariable;                                      var item = char.IsUpper(name[0]) ? StandardGlyphItem.GlyphItemPublic : StandardGlyphItem.GlyphItemPrivate;                                      var glyph = _provider.GlyphService.GetGlyph(group' item);                                      navigationTargets.Add(new EditorNavigationTarget(name' navigationType' ruleSpan' ruleSeek' glyph));                                  }                              }                              break;                            case GoLexer.KW_FUNC:                              {                                  // the first child is either a receiver (method) or an identifier with the name of the function                                  var token = ((CommonTree)child.Children[0]).Token;                                  if (token.Type == GoLexer.METHOD_RECEIVER)                                      token = ((CommonTree)child.Children[1]).Token;                                    var functionName = token.Text;                                  if (string.IsNullOrWhiteSpace(functionName))                                      continue;                                    ITree receiver = child.GetFirstChildWithType(GoParser.METHOD_RECEIVER);                                  if (receiver != null)                                  {                                      string receiverName;                                      if (receiver.ChildCount >= 2)                                          receiverName = receiver.GetChild(receiver.ChildCount - 2).Text;                                      else                                          receiverName = "?";                                        functionName = receiverName + "." + functionName;                                  }                                    IEnumerable<string> args = ProcessFunctionParameters(child);                                  string sig = string.Format("{0}({1})"' functionName' string.Join("' "' args));                                  var navigationType = EditorNavigationTypeRegistryService.GetEditorNavigationType(PredefinedEditorNavigationTypes.Members);                                  var startToken = antlrParseResultArgs.Tokens[child.TokenStartIndex];                                  var stopToken = antlrParseResultArgs.Tokens[child.TokenStopIndex];                                  Span span = new Span(startToken.StartIndex' stopToken.StopIndex - startToken.StartIndex + 1);                                  SnapshotSpan ruleSpan = new SnapshotSpan(e.Snapshot' span);                                  SnapshotSpan ruleSeek = new SnapshotSpan(e.Snapshot' new Span(child.Token.StartIndex' 0));                                  var glyph = _provider.GlyphService.GetGlyph(StandardGlyphGroup.GlyphGroupMethod' char.IsUpper(functionName[0]) ? StandardGlyphItem.GlyphItemPublic : StandardGlyphItem.GlyphItemPrivate);                                  navigationTargets.Add(new EditorNavigationTarget(sig' navigationType' ruleSpan' ruleSeek' glyph));                              }                                break;                            default:                              continue;                          }
Magic Number,Tvl.VisualStudio.Language.Go,GoBackgroundParser,D:\research\architectureSmells\repos1\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Language.Go\GoBackgroundParser.cs,ReParseImpl,The following statement contains a magic number: parser.ParseError += (sender' e) =>                      {                          errors.Add(e);                            string message = e.Message;                            ITextDocument document;                          if (TextBuffer.Properties.TryGetProperty(typeof(ITextDocument)' out document) && document != null)                          {                              string fileName = document.FilePath;                              var line = snapshot.GetLineFromPosition(e.Span.Start);                              message = string.Format("{0}({1}'{2}): {3}"' fileName' line.LineNumber + 1' e.Span.Start - line.Start.Position + 1' message);                          }                            if (message.Length > 100)                              message = message.Substring(0' 100) + " ...";                            if (outputWindow != null)                              outputWindow.WriteLine(message);                            if (errors.Count > 100)                              throw new OperationCanceledException();                      };
Magic Number,Tvl.VisualStudio.Language.Go,GoBackgroundParser,D:\research\architectureSmells\repos1\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Language.Go\GoBackgroundParser.cs,ReParseImpl,The following statement contains a magic number: parser.ParseError += (sender' e) =>                      {                          errors.Add(e);                            string message = e.Message;                            ITextDocument document;                          if (TextBuffer.Properties.TryGetProperty(typeof(ITextDocument)' out document) && document != null)                          {                              string fileName = document.FilePath;                              var line = snapshot.GetLineFromPosition(e.Span.Start);                              message = string.Format("{0}({1}'{2}): {3}"' fileName' line.LineNumber + 1' e.Span.Start - line.Start.Position + 1' message);                          }                            if (message.Length > 100)                              message = message.Substring(0' 100) + " ...";                            if (outputWindow != null)                              outputWindow.WriteLine(message);                            if (errors.Count > 100)                              throw new OperationCanceledException();                      };
Magic Number,Tvl.VisualStudio.Language.Go,GoBackgroundParser,D:\research\architectureSmells\repos1\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Language.Go\GoBackgroundParser.cs,ReParseImpl,The following statement contains a magic number: parser.ParseError += (sender' e) =>                      {                          errors.Add(e);                            string message = e.Message;                            ITextDocument document;                          if (TextBuffer.Properties.TryGetProperty(typeof(ITextDocument)' out document) && document != null)                          {                              string fileName = document.FilePath;                              var line = snapshot.GetLineFromPosition(e.Span.Start);                              message = string.Format("{0}({1}'{2}): {3}"' fileName' line.LineNumber + 1' e.Span.Start - line.Start.Position + 1' message);                          }                            if (message.Length > 100)                              message = message.Substring(0' 100) + " ...";                            if (outputWindow != null)                              outputWindow.WriteLine(message);                            if (errors.Count > 100)                              throw new OperationCanceledException();                      };
Duplicate Code,Tvl.VisualStudio.Language.Go.Experimental,GoSymbolTagger,D:\research\architectureSmells\repos1\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Language.Go\Experimental\GoSymbolTagger.cs,ReParseImpl,The method contains a code clone-set at the following line numbers (starting from the method definition): ((100' 128)' (235' 263))
Duplicate Code,Tvl.VisualStudio.Language.Go.Experimental,GoSymbolTagger,D:\research\architectureSmells\repos1\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Language.Go\Experimental\GoSymbolTagger.cs,ReParseImpl,The method contains a code clone-set at the following line numbers (starting from the method definition): ((104' 129)' (171' 196))
Duplicate Code,Tvl.VisualStudio.Language.Go.Experimental,GoSymbolTagger,D:\research\architectureSmells\repos1\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Language.Go\Experimental\GoSymbolTagger.cs,ReParseImpl,The method contains a code clone-set at the following line numbers (starting from the method definition): ((171' 195)' (239' 263))
Missing Default,Tvl.VisualStudio.Language.Go.Experimental,GoAtnOutliningTagger,D:\research\architectureSmells\repos1\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Language.Go\Experimental\GoAtnOutliningTagger.cs,ReParseImpl,The following switch statement is missing a default case: switch (token.Type)                      {                      case GoLexer.KW_IMPORT:                      case GoLexer.KW_VAR:                      case GoLexer.KW_CONST:                          {                              InterpretTraceTransition firstTransition = context.Transitions.Where(i => i.Transition.IsMatch).ElementAtOrDefault(1);                              InterpretTraceTransition lastTransition = context.Transitions.LastOrDefault(i => i.Transition.IsMatch);                              if (firstTransition == null || lastTransition == null)                                  continue;                                if (firstTransition.Symbol != GoLexer.LPAREN)                                  continue;                                var blockSpan = OutlineBlock(firstTransition.Token' lastTransition.Token' snapshot);                              if (blockSpan != null)                              {                                  outliningRegions.Add(blockSpan);                                  break;                              }                                break;                          }                        case GoLexer.KW_STRUCT:                      case GoLexer.KW_FUNC:                          {                              InterpretTraceTransition firstTransition = context.Transitions.FirstOrDefault(i => i.Symbol == GoLexer.LBRACE);                              InterpretTraceTransition lastTransition = context.Transitions.LastOrDefault(i => i.Transition.IsMatch);                              if (firstTransition == null || lastTransition == null)                                  continue;                                var blockSpan = OutlineBlock(firstTransition.Token' lastTransition.Token' snapshot);                              if (blockSpan != null)                              {                                  outliningRegions.Add(blockSpan);                                  break;                              }                              break;                          }                      }
Missing Default,Tvl.VisualStudio.Language.Go,GoQuickInfoSource,D:\research\architectureSmells\repos1\tunnelvisionlabs_LangSvcV2\Tvl.VisualStudio.Language.Go\GoQuickInfoSource.cs,AnalyzeInterpreterTrace,The following switch statement is missing a default case: switch (transition.Symbol.Value)                      {                      case GoLexer.IDENTIFIER:                      //case GoLexer.KW_THIS:                      //case GoLexer.KW_UNIV:                      //case GoLexer.KW_IDEN:                      //case GoLexer.KW_INT2:                      //case GoLexer.KW_SEQINT:                          if (expressionLevel == 0)                          {                              IToken token = transition.Token;                              identifier = token.Text;                              span = new Span(token.StartIndex' token.StopIndex - token.StartIndex + 1);                          }                            break;                        case GoLexer.DOT:                          if (expressionLevel == 0)                          {                              for (int i = 0; i < results.Count; i++)                              {                                  results[i] += identifier + ".";                                  identifier = null;                              }                          }                            break;                      }
