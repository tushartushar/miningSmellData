Implementation smell,Namespace,Class,File,Method,Description
Long Identifier,WampSharp.V2.Fluent,IWebSocketTransportSyntax,F:\newReposMay17\Code-Sharp_WampSharp\src\net45\Extensions\WampSharp.WebSockets\WAMP2\V2\Fluent\IWebSocketTransportSyntax.cs,SetClientWebSocketOptions,The length of the parameter configureClientWebSocketOptions is 31.
Long Identifier,WampSharp.V2.Fluent,WebSocketTransportSyntax,F:\newReposMay17\Code-Sharp_WampSharp\src\net45\Extensions\WampSharp.WebSockets\WAMP2\V2\Fluent\WebSocketTransportSyntax.cs,SetClientWebSocketOptions,The length of the parameter configureClientWebSocketOptions is 31.
Long Statement,WampSharp.WebSockets,WebSocketWrapperConnection,F:\newReposMay17\Code-Sharp_WampSharp\src\net45\Extensions\WampSharp.WebSockets\WebSockets\WebSocketWrapperConnection.cs,CloseWebSocket,The length of the statement  "		await mWebSocket.CloseAsync (WebSocketCloseStatus.NormalClosure' String.Empty' CancellationToken.None).ConfigureAwait (false); " is 126.
Long Statement,WampSharp.WebSockets,WebSocketWrapperConnection,F:\newReposMay17\Code-Sharp_WampSharp\src\net45\Extensions\WampSharp.WebSockets\WebSockets\WebSocketWrapperConnection.cs,ReadMessage,The length of the statement  "		await memoryStream.WriteAsync (receivedDataBuffer.Array' receivedDataBuffer.Offset' webSocketReceiveResult.Count' mCancellationToken).ConfigureAwait (false); " is 157.
Magic Number,WampSharp.WebSockets,WebSocketWrapperConnection,F:\newReposMay17\Code-Sharp_WampSharp\src\net45\Extensions\WampSharp.WebSockets\WebSockets\WebSocketWrapperConnection.cs,RunAsync,The following statement contains a magic number: try {  	/*We define a certain constant which will represent                   size of received data. It is established by us and                    we can set any value. We know that in this case the size of the sent                   data is very small.                 */const int maxMessageSize = 2048;  	// Buffer for received bits.  	ArraySegment<byte> receivedDataBuffer = new ArraySegment<byte> (new byte[maxMessageSize]);  	MemoryStream memoryStream = new MemoryStream ();  	// Checks WebSocket state.  	while (IsConnected && !mCancellationToken.IsCancellationRequested) {  		// Reads data.  		WebSocketReceiveResult webSocketReceiveResult = await ReadMessage (receivedDataBuffer' memoryStream);  		if (webSocketReceiveResult.MessageType != WebSocketMessageType.Close) {  			memoryStream.Position = 0;  			OnNewMessage (memoryStream);  		}  		memoryStream.Position = 0;  		memoryStream.SetLength (0);  	}  } catch (Exception ex) {  	// Cancellation token could be cancelled in Dispose if a   	// Goodbye message has been received.  	if (!(ex is OperationCanceledException) || !mCancellationToken.IsCancellationRequested) {  		RaiseConnectionError (ex);  	}  }  
