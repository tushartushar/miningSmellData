Implementation smell,Namespace,Class,File,Method,Description
Long Method,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The method has 170 lines of code.
Long Method,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,EntryMain,The method has 137 lines of code.
Long Method,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,performResponseHandling,The method has 176 lines of code.
Long Method,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,updateMasterInfo,The method has 104 lines of code.
Long Method,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,checkClientForSwap,The method has 101 lines of code.
Complex Method,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,GetDisplayPluginVariables,Cyclomatic complexity of the method is 9
Complex Method,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,Cyclomatic complexity of the method is 66
Complex Method,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,OnGlobalChat,Cyclomatic complexity of the method is 17
Complex Method,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,EntryMain,Cyclomatic complexity of the method is 105
Complex Method,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,performOpenConnection,Cyclomatic complexity of the method is 28
Complex Method,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,performResponseHandling,Cyclomatic complexity of the method is 121
Complex Method,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,updateTsInfo,Cyclomatic complexity of the method is 31
Complex Method,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,updateGmInfo,Cyclomatic complexity of the method is 8
Complex Method,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,updateMasterInfo,Cyclomatic complexity of the method is 26
Complex Method,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,checkClientForSwap,Cyclomatic complexity of the method is 18
Complex Method,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,playerLeft,Cyclomatic complexity of the method is 8
Complex Method,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,playerSpawned,Cyclomatic complexity of the method is 15
Complex Method,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,playerSwappedTeamsOrSquads,Cyclomatic complexity of the method is 15
Complex Method,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,findTeamChannel,Cyclomatic complexity of the method is 15
Complex Method,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,findSquadChannel,Cyclomatic complexity of the method is 12
Complex Method,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,removeChannels,Cyclomatic complexity of the method is 28
Complex Method,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,DisplayTsSquadList,Cyclomatic complexity of the method is 13
Long Statement,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,GetPluginDescription,The length of the statement  "	return "<h2>Description</h2>" + "<p>Teamspeak 3 Sync synchronizes your Game Server with a Teamspeak 3 Server' moving players into their respective channels on Teamspeak 3 dependent on the player's team in the Game Server.<br/>" + "The plugin also allows you to 'Message' at players who are not in your Teamspeak 3 Server' yet playing on your Game Server.</p>" + "<h2>Setup Instructions</h2>" + "<h3>PRoCon Setup:</h3>" + "<p>Teamspeak 3 Sync doesn't need any special setup out-of-the-box unless PRoCon is running in a sandbox.  You can check whether PRoCon is running in a sandbox and add exceptions for Teamspeak 3 Sync by following the steps outlined below:</p>" + "<ul style=\"margin-top: 0px;\">" + "<li>Start PRoCon' go to Tools &gt; Options.</li>" + "<li>Under the Plugins tab' check if the drop-down is set to \"Run plugins in a sandbox (recommended).\"</li>" + "<li>If it is' add your Teamspeak 3 Server's IP and Query Port to the Trusted Domains.</li>" + "</ul>" + "<h3>Teamspeak Setup:</h3>" + "<p>While the Teamspeak Server doesn't require any special setup' the plugin may be banned occasionally due to sending commands too quickly.  For this reason' I've outlined how to get around this issue:</p>" + "<ul style=\"margin-top: 0px;\">" + "<li>Add your PRoCon's IP to query_ip_whitelist.txt.  This is found in the root folder of your Teamspeak 3 Server.  If your Teamspeak 3 Server is being hosted by a server provider' ask your provider to do this for you.</li>" + "<li>Setup your ServerQuery Login through Teamspeak by going to <b>Tools -> ServerQuery Login -> *Enter A Username* -> *Receive Auto Generated Password*</b>.</li>" + "<li>To find what port your Teamspeak 3 Server uses as its <i>query port</i>' look in the server.ini file.  The default value is 10011.  If your Teamspeak 3 Server is being hosted by a server provider' ask your provider for the query port.</li>" + "</ul>" + "<h2>Settings</h2>" + "<p>I've tried to let the user control every aspect of the program' while still leaving the interface easy to use.  Below' you'll find descriptions of each of the plugin's various settings.</p>" + "<h3>Section 1 - Teamspeak 3</h3>" + "<h4>Server IP</h4>" + "<blockquote style=\"margin-left: 0px; margin-right:0px; margin-top:0px;\">" + "The IP of your Teamspeak 3 Server you wish to synchronize with a Game Server." + "<br/><u>Note</u>: An IP' such as 127.0.0.1' or a Hostname' such as ts3.myteamspeakserver.com." + "</blockquote>" + "<h4>Server Port</h4>" + "<blockquote style=\"margin-left: 0px; margin-right:0px; margin-top:0px;\">" + "The Port of your Teamspeak 3 Server that clients normally use to connect to your server." + "<br/><u>Note</u>: Normally 9987' but can be any number between 0 and 65535' inclusive." + "</blockquote>" + "<h4>Query Port</h4>" + "<blockquote style=\"margin-left: 0px; margin-right:0px; margin-top:0px;\">" + "The Port of your Teamspeak 3 Server that Server Query clients use to connect to your server." + "<br/><u>Note</u>: Normally 10011' but can be any number between 0 and 65535' inclusive." + "</blockquote>" + "<h4>Query Username</h4>" + "<blockquote style=\"margin-left: 0px; margin-right:0px; margin-top:0px;\">" + "The username of your Server Query login." + "</blockquote>" + "<h4>Query Password</h4>" + "<blockquote style=\"margin-left: 0px; margin-right:0px; margin-top:0px;\">" + "The password of your Server Query login." + "</blockquote>" + "<h4>Staging Channel Name</h4>" + "<blockquote style=\"margin-left: 0px; margin-right:0px; margin-top:0px;\">" + "The name of the channel you wish to use as the Staging Channel for Teamspeak 3 Sync." + "<br/><u>Note</u>: This channel must exist prior to starting Teamspeak 3 Sync." + "</blockquote>" + "<h4>Enable Dropoff Channel</h4>" + "<blockquote style=\"margin-left: 0px; margin-right:0px; margin-top:0px;\">" + "Enable this option if you want the staging channel to only be used for between-round chat only.  Players who leave the game will be moved to the Dropoff Channel." + "<br/><u>Note</u>: This channel must exist prior to starting Teamspeak 3 Sync." + "</blockquote>" + "<h4>Dropoff Channel Name</h4>" + "<blockquote style=\"margin-left: 0px; margin-right:0px; margin-top:0px;\">" + "The name of the channel you wish to move players to after they leave the game (means the Staging channel is used for between-round chat only)." + "<br/><u>Note</u>: This channel must exist prior to starting Teamspeak 3 Sync." + "</blockquote>" + "<h4>Pickup Channel Names</h4>" + "<blockquote style=\"margin-left: 0px; margin-right:0px; margin-top:0px;\">" + "The name of channels you wish to allow Teamspeak 3 Sync to pull clients from." + "<br/><u>Note</u>: The Staging Channel is included in this list by default.  These channels must exist when Teamspeak 3 Sync is enabled in order for the channels to be used." + "</blockquote>" + "<h3>Section 2 - Channels</h3>" + "<h4>Password</h4>" + "<blockquote style=\"margin-left: 0px; margin-right:0px; margin-top:0px;\">" + "The password that will be placed on channels created by Teamspeak 3 Sync." + "<br/><u>Note</u>: Can be left blank to specify \"no password.\"" + "</blockquote>" + "<h4>Team Names</h4>" + "<blockquote style=\"margin-left: 0px; margin-right:0px; margin-top:0px;\">" + "These names will be used when team channels are searched for or created by Teamspeak 3 Sync." + "<br/><u>Note</u>: Teamspeak 3 Sync will only search for team channels that are under the root channel' or the staging channel.  If a team that doesn't have a name specified is attempted to be created' it will default to \"Team #.\"" + "</blockquote>" + "<h4>Squad Names</h4>" + "<blockquote style=\"margin-left: 0px; margin-right:0px; margin-top:0px;\">" + "These names will be used when squad channels are created by Teamspeak 3 Sync." + "<br/><u>Note</u>: Teamspeak 3 Sync will only search for squad channels that are under team channels.  If a squad that doesn't have a name specified is attempted to be created' it will default to \"Squad #.\"" + "</blockquote>" + "<h4>Remove When Empty</h4>" + "<blockquote style=\"margin-left: 0px; margin-right:0px; margin-top:0px;\">" + "Removes channels as they become empty." + "<br/><u>Note</u>: This will slow down Teamspeak 3 Sync' as it takes a little bit of time to remove and create channels.  Does not remove team channels that are placed under the root channel." + "</blockquote>" + "<h3>Section 3 - Synchronization</h3>" + "<h4>Delay Queries</h4>" + "<blockquote style=\"margin-left: 0px; margin-right:0px; margin-top:0px;\">" + "Controls whether queries are forced to wait between sending queries." + "<br/><u>Note</u>: This setting is intended for users who are not allowed to alter their query_ip_whitelist.txt file.  However' for a server that receives an intense amount of traffic' you will still be banned for flooding occasionally." + "</blockquote>" + "<h4>Delay Queries Amount (ms)</h4>" + "<blockquote style=\"margin-left: 0px; margin-right:0px; margin-top:0px;\">" + "Controls the amount of time' in milliseconds' that queries must wait before sending another." + "<br/><u>Note</u>: By default' Teamspeak 3 bans Server Query clients who send commands at a rate of 10 per 3 seconds.  However' during testing' a 500ms+ delay was the only reliable amount to avoid being banned repeatedly.  Can be set to any number between 10 and 3000' inclusive." + "</blockquote>" + "<h4>Update Interval (ms)</h4>" + "<blockquote style=\"margin-left: 0px; margin-right:0px; margin-top:0px;\">" + "Controls the amount of time' in milliseconds' between requesting an update from the Teamspeak 3 Server." + "<br/><u>Note</u>: By default' this is set to 10000' however' it can be set to any number between 4000 and 60000' inclusive." + "</blockquote>" + "<h4>Team-Based Swapping</h4>" + "<blockquote style=\"margin-left: 0px; margin-right:0px; margin-top:0px;\">" + "Controls whether players are split into teams." + "<br/><u>Note</u>: Turning this off leaves everyone in the staging channel." + "</blockquote>" + "<h4>Team-Based Threshold</h4>" + "<blockquote style=\"margin-left: 0px; margin-right:0px; margin-top:0px;\">" + "The number of players that must be on both the Teamspeak 3 Server and Game Server before Team-Based swapping will begin." + "<br/><u>Note</u>: Setting this to 1 will ensure Team-Based swapping is always on.  Can not be set above 32." + "</blockquote>" + "<h4>Intermission Swapping</h4>" + "<blockquote style=\"margin-left: 0px; margin-right:0px; margin-top:0px;\">" + "Controls whether players moved to the staging channel between rounds." + "<br/><u>Note</u>: Turning this off leaves everyone in their current channel between rounds." + "</blockquote>" + "<h4>Squad-Based Swapping</h4>" + "<blockquote style=\"margin-left: 0px; margin-right:0px; margin-top:0px;\">" + "Controls whether players are split into squads." + "<br/><u>Note</u>: Turning this off leaves everyone in their respective team channels." + "</blockquote>" + "<h4>Squad-Based Threshold</h4>" + "<blockquote style=\"margin-left: 0px; margin-right:0px; margin-top:0px;\">" + "The number of players that must be on both the Teamspeak 3 Server and Game Server' per team' before Squad-Based swapping will begin." + "<br/><u>Note</u>: Setting this and Squad-Size Minimum to 1 will ensure Squad-Based swapping is always on.  Can not be set above 32." + "</blockquote>" + "<h4>Squad Minimum</h4>" + "<blockquote style=\"margin-left: 0px; margin-right:0px; margin-top:0px;\">" + "The number of players that must be on both the Teamspeak 3 Server and Game Server' per team' per squad' before Squad-Based swapping will begin." + "</blockquote>" + "<h4>Remove Clients Not Playing</h4>" + "<blockquote style=\"margin-left: 0px; margin-right:0px; margin-top:0px;\">" + "Controls whether players who are in Teamspeak 3' but not the Game Server' will be removed from Team and Squad channels." + "<br/><u>Note</u>: Leaving this off will allow others to stay in channels when they are not playing in the Game Server." + "</blockquote>" + "<h4>Remove Clients - Whitelist</h4>" + "<blockquote style=\"margin-left: 0px; margin-right:0px; margin-top:0px;\">" + "The Database Ids of players you wish to be able to remain in Team and Squad channels when not in the Game Server." + "<br/><u>Note</u>: This only has an effect if \"Remove Clients Not Playing\" is enabled." + "</blockquote>" + "<h3>Section 4 - Error Handling</h3>" + "<h4>Reconnect On Error</h4>" + "<blockquote style=\"margin-left: 0px; margin-right:0px; margin-top:0px;\">" + "Controls whether Teamspeak 3 Sync will attempt to reconnect to the Teamspeak 3 Server' should a network issue arise." + "<br/><u>Note</u>: Does not attempt to reconnect after certain errors' such as' a bad login." + "</blockquote>" + "<h4>Reconnect On Error Attempts</h4>" + "<blockquote style=\"margin-left: 0px; margin-right:0px; margin-top:0px;\">" + "The number of times Teamspeak 3 Sync will attempt to establish a connection before giving up." + "<br/><u>Note</u>: Can be set to any number between 1 and 60' inclusive." + "</blockquote>" + "<h4>Interval Between Reconnect Attempts (ms)</h4>" + "<blockquote style=\"margin-left: 0px; margin-right:0px; margin-top:0px;\">" + "Controls the amount of time' in milliseconds' between each reconnect attempt." + "<br/><u>Note</u>: Can be set to any number between 1000 and 15000' inclusive." + "</blockquote>" + "<h3>Section 5 - User Messages</h3>" + "<h4>Message Players Not In Teamspeak</h4>" + "<blockquote style=\"margin-left: 0px; margin-right:0px; margin-top:0px;\">" + "Controls whether Teamspeak 3 Sync will message players on the Game Server that are not in Teamspeak 3." + "<br/><u>Note</u>: Does not work with Battlefield 3." + "</blockquote>" + "<h4>Message When Player Joins</h4>" + "<blockquote style=\"margin-left: 0px; margin-right:0px; margin-top:0px;\">" + "Controls whether Teamspeak 3 Sync will message a player after they join the Game Server." + "<br/><u>Note</u>: Does not work with Battlefield 3." + "</blockquote>" + "<h4>Message When Player Joins Delay (ms)</h4>" + "<blockquote style=\"margin-left: 0px; margin-right:0px; margin-top:0px;\">" + "Controls the time' in milliseconds' that Teamspeak 3 Sync waits before sending a message to a player after they have joined." + "<br/><u>Note</u>: Can be set to any number between 0 and 1800000' inclusive." + "</blockquote>" + "<h4>Message Interval (ms)</h4>" + "<blockquote style=\"margin-left: 0px; margin-right:0px; margin-top:0px;\">" + "Controls the time' in milliseconds' that Teamspeak 3 Sync mass messages players." + "<br/><u>Note</u>: Can be set to any number between the Message Display Duration and 3600000' inclusive." + "</blockquote>" + "<h4>Message</h4>" + "<blockquote style=\"margin-left: 0px; margin-right:0px; margin-top:0px;\">" + "The message to be sent to players." + "<br/><u>Note</u>: Usually notifies players of the Teamspeak 3 Server being used for Teamspeak 3 Sync." + "</blockquote>" + "<h4>Message Display Duration (ms)</h4>" + "<blockquote style=\"margin-left: 0px; margin-right:0px; margin-top:0px;\">" + "Controls the time' in milliseconds' that the message is displayed on the player's screen." + "<br/><u>Note</u>: Can be set to any number between the 1000 and 30000' inclusive." + "</blockquote>" + "<h3>Section 6 - In-Game Commands</h3>" + "<h4>Enable !tssquads Command</h4>" + "<blockquote style=\"margin-left: 0px; margin-right:0px; margin-top:0px;\">" + "Enables a command where !tssquads will list teamspeak squads with less than 4 players." + "</blockquote>" + "<h4>Enable !tslobby Command</h4>" + "<blockquote style=\"margin-left: 0px; margin-right:0px; margin-top:0px;\">" + "Determines whether the server will acknowledge the !tslobby command which will keep the player in the staging channel until !tssync is issued or the round ends." + "</blockquote>" + "<h4>Enable !tsteam Command</h4>" + "<blockquote style=\"margin-left: 0px; margin-right:0px; margin-top:0px;\">" + "Determines whether the server will acknowledge the !tsteam command which will keep the player in the team channel until !tssync is issued or the round ends." + "</blockquote>" + "<h4>Enable !tsnosync Command</h4>" + "<blockquote style=\"margin-left: 0px; margin-right:0px; margin-top:0px;\">" + "Determines whether the server will acknowledge the !tsnosync command which will tell the server to ignore swapping the player until !tssync is issued or the round ends." + "<br/><u>Note</u>: This setting can be useful for administrators who wish to speak with someone in-game." + "</blockquote>" + "<h3>Section 7 - Debug Information</h3>" + "<p>This section only contains controls relevant to displaying extra information related to the plugin's inner operations.</p>" + "<h3> Section 8 - Event Bouncer</h3>" + "<p>This section contains controls relevant to the custom Event Bouncer functionality</p>" + "<h4>Enable Event Bouncer</h4>" + "<blockquote style=\"margin-left: 0px; margin-right:0px; margin-top:0px;\">" + "Determines whether players not in the managed Teamspeak channels will be kicked when spawning." + "</blockquote>" + "<h4>Event Bouncer Kick Message</h4>" + "<blockquote style=\"margin-left: 0px; margin-right:0px; margin-top:0px;\">" + "The message shown to players kicked by the Event Bouncer." + "</blockquote>" + "<h3> Section 9 - TeamSpeak Sync Promotion</h3>" + "<p>This section contains controls relevant to the custom TeamSpeak Sync Promotion functionality</p>" + "<h5>In-game seeding recognition</h5>" + "<p>When a player joins a squad sync channel AND there are <= 3 squad-sync players (including them) on their team:" + "<br/>Thanks to <name> for helping seed the <team> team's squad-synced TeamSpeak channels! Type !teamspeak to join forces and kick some ass.</p>" + "<h5>In-game promotion of squad-sync usage</h5>" + "<p>Every 20 minutes:" + "<br/>If >= 5 squad sync users online for EACH team:" + "<br/><#> players are having fun and kicking ass with their squadmates right now using our squad-synced TeamSpeak channels!  Type !teamspeak to join.</p>" + "<h4>Enable TSSync Promotion</h4>" + "<blockquote style=\"margin-left: 0px; margin-right:0px; margin-top:0px;\">" + "Determines whether or not to promote TeamSpeak usage while in game." + "</blockquote>" + "<h4>Maximum Number of Squad Synced players to be considered seeding</h4>" + "<blockquote style=\"margin-left: 0px; margin-right:0px; margin-top:0px;\">" + "If there are less than this number of players in TSSync (Team or Squad sync'ed) channel then the seeding message will be activated. (Referred to as \"seeding mode\" below)" + "</blockquote>" + "<h4>Seeding Recognition Message</h4>" + "<blockquote style=\"margin-left: 0px; margin-right:0px; margin-top:0px;\">" + "Message to display when a user joins a squad sync'ed channel when it is still considered to be in \"seeding mode\". " + "<ul><li>[USER] would be replaced by the user who just joined a TSSync squad.</li><li>[TEAM] would be replaced by the team the user is on</li><li>[NEWLINE] would split the message into two messages at that point. If [NEWLINE] is not in the message and the message is larger than 127 characters then the message will automatically get split up</li></ul>" + "</blockquote>" + "<h4>Min Number of Team Sync players on each team to start promoting TSSync</h4>" + "<blockquote style=\"margin-left: 0px; margin-right:0px; margin-top:0px;\">" + "If a team has more than this number of players then the In Game promotion would be displayed to that team only." + "</blockquote>" + "<h4>In Game promotion interval (minutes)</h4>" + "<blockquote style=\"margin-left: 0px; margin-right:0px; margin-top:0px;\">" + "If the conditions are met for minimum numbers of team speaked members in a team the promotion message would be shown at this interval." + "</blockquote>" + "<h4>In Game Promotion Message</h4>" + "<blockquote style=\"margin-left: 0px; margin-right:0px; margin-top:0px;\">" + "Message shown to players for team speak in game promotion." + "<ul><li>[NUMBER] would be replaced by the number of team members which are in team speak</li><li>[NEWLINE] would split the message into two messages at that point. If [NEWLINE] is not in the message and the message is larger than 127 characters then the message will automatically get split up</li></ul>" + "</blockquote>"; " is 18283.
Long Statement,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,GetDisplayPluginVariables,The length of the statement  "	lstReturn.Add (new CPluginVariable ("Section 1 - Teamspeak 3|Staging Channel Name"' typeof(String)' ts3StgChannelName)); " is 120.
Long Statement,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,GetDisplayPluginVariables,The length of the statement  "	lstReturn.Add (new CPluginVariable ("Section 1 - Teamspeak 3|Enable Dropoff Channel"' typeof(Boolean)' ts3EnableDropoff)); " is 122.
Long Statement,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,GetDisplayPluginVariables,The length of the statement  "	lstReturn.Add (new CPluginVariable ("Section 1 - Teamspeak 3|Dropoff Channel Name"' typeof(String)' ts3DropoffChannelName)); " is 124.
Long Statement,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,GetDisplayPluginVariables,The length of the statement  "	lstReturn.Add (new CPluginVariable ("Section 1 - Teamspeak 3|Pickup Channel Names"' typeof(String[])' ts3PckChannelNames)); " is 123.
Long Statement,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,GetDisplayPluginVariables,The length of the statement  "		lstReturn.Add (new CPluginVariable ("Section 3 - Synchronization|Delay Queries Amount (ms)"' typeof(Int32)' synDelayQueriesAmount)); " is 132.
Long Statement,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,GetDisplayPluginVariables,The length of the statement  "	lstReturn.Add (new CPluginVariable ("Section 3 - Synchronization|Update Interval (ms)"' typeof(Int32)' synUpdateInterval)); " is 123.
Long Statement,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,GetDisplayPluginVariables,The length of the statement  "	lstReturn.Add (new CPluginVariable ("Section 3 - Synchronization|Team-Based Swapping"' typeof(Boolean)' synTeamBasedSwapping)); " is 127.
Long Statement,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,GetDisplayPluginVariables,The length of the statement  "		lstReturn.Add (new CPluginVariable ("Section 3 - Synchronization|Team-Based Threshold"' typeof(Int32)' synTeamBasedThreshold)); " is 127.
Long Statement,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,GetDisplayPluginVariables,The length of the statement  "		lstReturn.Add (new CPluginVariable ("Section 3 - Synchronization|Intermission Swapping"' typeof(Boolean)' synIntermissionSwapping)); " is 132.
Long Statement,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,GetDisplayPluginVariables,The length of the statement  "		lstReturn.Add (new CPluginVariable ("Section 3 - Synchronization|Squad-Based Swapping"' typeof(Boolean)' synSquadBasedSwapping)); " is 129.
Long Statement,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,GetDisplayPluginVariables,The length of the statement  "			lstReturn.Add (new CPluginVariable ("Section 3 - Synchronization|Squad-Based Threshold"' typeof(Int32)' synSquadBasedThreshold)); " is 129.
Long Statement,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,GetDisplayPluginVariables,The length of the statement  "			lstReturn.Add (new CPluginVariable ("Section 3 - Synchronization|Squad-Size Minimum"' typeof(Int32)' synSquadSizeMinimum)); " is 123.
Long Statement,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,GetDisplayPluginVariables,The length of the statement  "	// lstReturn.Add(new CPluginVariable("Section 3 - Synchronization|Matching Threshold (%)"'         typeof(Double)'  synMatchingThreshold)); " is 139.
Long Statement,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,GetDisplayPluginVariables,The length of the statement  "	lstReturn.Add (new CPluginVariable ("Section 3 - Synchronization|Remove Clients Not Playing"' typeof(Boolean)' synRemoveClients)); " is 130.
Long Statement,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,GetDisplayPluginVariables,The length of the statement  "		lstReturn.Add (new CPluginVariable ("Section 3 - Synchronization|Remove Clients - Whitelist"' typeof(String[])' synRemoveClientsWhitelist)); " is 140.
Long Statement,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,GetDisplayPluginVariables,The length of the statement  "	lstReturn.Add (new CPluginVariable ("Section 4 - Error Handling|Reconnect On Error"' typeof(Boolean)' errReconnectOnError)); " is 124.
Long Statement,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,GetDisplayPluginVariables,The length of the statement  "		lstReturn.Add (new CPluginVariable ("Section 4 - Error Handling|Number of Reconnect Attempts"' typeof(Int32)' errReconnectOnErrorAttempts)); " is 140.
Long Statement,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,GetDisplayPluginVariables,The length of the statement  "		lstReturn.Add (new CPluginVariable ("Section 4 - Error Handling|Interval Between Reconnect Attempts (ms)"' typeof(Int32)' errReconnectOnErrorInterval)); " is 152.
Long Statement,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,GetDisplayPluginVariables,The length of the statement  "	lstReturn.Add (new CPluginVariable ("Section 5 - User Messages|Message Players Not In Teamspeak"' typeof(Boolean)' msgEnabled)); " is 128.
Long Statement,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,GetDisplayPluginVariables,The length of the statement  "		lstReturn.Add (new CPluginVariable ("Section 5 - User Messages|Message When Player Joins"' typeof(Boolean)' msgOnJoin)); " is 120.
Long Statement,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,GetDisplayPluginVariables,The length of the statement  "			lstReturn.Add (new CPluginVariable ("Section 5 - User Messages|Message When Player Joins Delay (ms)"' typeof(Int32)' msgOnJoinDelay)); " is 134.
Long Statement,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,GetDisplayPluginVariables,The length of the statement  "	lstReturn.Add (new CPluginVariable ("Section 6 - In-Game Commands|Enable !tssquads"' typeof(Boolean)' mEnableTSSquadList)); " is 123.
Long Statement,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,GetDisplayPluginVariables,The length of the statement  "	lstReturn.Add (new CPluginVariable ("Section 6 - In-Game Commands|Enable !tslobby"' typeof(Boolean)' mEnableTSStaging)); " is 120.
Long Statement,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,GetDisplayPluginVariables,The length of the statement  "	lstReturn.Add (new CPluginVariable ("Section 6 - In-Game Commands|Enable !tsnosync"' typeof(Boolean)' mEnableTSNoSync)); " is 120.
Long Statement,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,GetDisplayPluginVariables,The length of the statement  "	lstReturn.Add (new CPluginVariable ("Section 7 - Debug Information|Show Debug Messages (Events)"' typeof(Boolean)' dbgEvents)); " is 127.
Long Statement,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,GetDisplayPluginVariables,The length of the statement  "	lstReturn.Add (new CPluginVariable ("Section 7 - Debug Information|Show Debug Messages (Clients)"' typeof(Boolean)' dbgClients)); " is 129.
Long Statement,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,GetDisplayPluginVariables,The length of the statement  "	lstReturn.Add (new CPluginVariable ("Section 7 - Debug Information|Show Debug Messages (Channels)"' typeof(Boolean)' dbgChannels)); " is 131.
Long Statement,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,GetDisplayPluginVariables,The length of the statement  "	lstReturn.Add (new CPluginVariable ("Section 7 - Debug Information|Show Debug Messages (Swapping)"' typeof(Boolean)' dbgSwapping)); " is 131.
Long Statement,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,GetDisplayPluginVariables,The length of the statement  "	lstReturn.Add (new CPluginVariable ("Section 7 - Debug Information|Show Debug Messages (Network)"' typeof(Boolean)' dbgNetwork)); " is 129.
Long Statement,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,GetDisplayPluginVariables,The length of the statement  "	lstReturn.Add (new CPluginVariable ("Section 7 - Debug Information|Show Debug Messages (Bouncer)"' typeof(Boolean)' dbgBouncer)); " is 129.
Long Statement,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,GetDisplayPluginVariables,The length of the statement  "	lstReturn.Add (new CPluginVariable ("Section 7 - Debug Information|Show Debug Messages (TSSync Promotion)"' typeof(Boolean)' dbgTSSyncPromote)); " is 144.
Long Statement,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,GetDisplayPluginVariables,The length of the statement  "	lstReturn.Add (new CPluginVariable ("Section 8 - Event Bouncer|Enable Event Bouncer"' typeof(Boolean)' mEnableBouncer)); " is 120.
Long Statement,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,GetDisplayPluginVariables,The length of the statement  "	lstReturn.Add (new CPluginVariable ("Section 8 - Event Bouncer|Event Bouncer Kick Message"' typeof(String)' mBouncerKickMessage)); " is 130.
Long Statement,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,GetDisplayPluginVariables,The length of the statement  "	lstReturn.Add (new CPluginVariable ("Section 9 - TSSync Promotion|Enable TSSync Promotion"' typeof(Boolean)' mEnableTSPromotion)); " is 130.
Long Statement,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,GetDisplayPluginVariables,The length of the statement  "	lstReturn.Add (new CPluginVariable ("Section 9 - TSSync Promotion|Maximum Number of Squad Synced players to be considered seeding"' typeof(int)' mMaxSeedingRecognitionVal)); " is 173.
Long Statement,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,GetDisplayPluginVariables,The length of the statement  "	lstReturn.Add (new CPluginVariable ("Section 9 - TSSync Promotion|Seeding Recognition Message"' typeof(String)' mSeedingRecognitionMessage)); " is 141.
Long Statement,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,GetDisplayPluginVariables,The length of the statement  "	lstReturn.Add (new CPluginVariable ("Section 9 - TSSync Promotion|Min Number of Team Sync players on each team to start promoting TSSync"' typeof(int)' mMinSyncedPlayersForInGamePromotion)); " is 190.
Long Statement,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,GetDisplayPluginVariables,The length of the statement  "	lstReturn.Add (new CPluginVariable ("Section 9 - TSSync Promotion|In Game promotion interval (minutes)"' typeof(int)' mInGamePromotionInterval)); " is 145.
Long Statement,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,GetDisplayPluginVariables,The length of the statement  "	lstReturn.Add (new CPluginVariable ("Section 9 - TSSync Promotion|In Game Promotion Message"' typeof(String)' mInGamePromotionMessage)); " is 136.
Long Statement,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,GetDisplayPluginVariables,The length of the statement  "	lstReturn.Add (new CPluginVariable ("Section 9.1 - TSSync Player Exclusion List|Enable TSSync Exclusion"' typeof(Boolean)' mEnableTSExclusion)); " is 144.
Long Statement,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,GetDisplayPluginVariables,The length of the statement  "	lstReturn.Add (new CPluginVariable ("Section 9.1 - TSSync Player Exclusion List|Add a soldier name... (case insensitive)"' typeof(string)' "")); " is 144.
Long Statement,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,GetDisplayPluginVariables,The length of the statement  "		lstReturn.Add (new CPluginVariable ("Section 9.1 - TSSync Player Exclusion List|" + i.ToString () + ". Soldier name:"' typeof(string)' mExclusionList [i])); " is 156.
Long Statement,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,GetPluginVariables,The length of the statement  "	lstReturn.Add (new CPluginVariable ("Interval Between Reconnect Attempts (ms)"' typeof(Int32)' errReconnectOnErrorInterval)); " is 125.
Long Statement,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,GetPluginVariables,The length of the statement  "	lstReturn.Add (new CPluginVariable ("Maximum Number of Squad Synced players to be considered seeding"' typeof(int)' mMaxSeedingRecognitionVal)); " is 144.
Long Statement,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,GetPluginVariables,The length of the statement  "	lstReturn.Add (new CPluginVariable ("Min Number of Team Sync players on each team to start promoting TSSync"' typeof(int)' mMinSyncedPlayersForInGamePromotion)); " is 161.
Long Statement,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,GetPluginVariables,The length of the statement  "		lstReturn.Add (new CPluginVariable ("TSSync Player Exclusion List|" + i.ToString () + ". Soldier name:"' typeof(string)' mExclusionList [i])); " is 142.
Long Statement,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The length of the statement  "	else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut)) " is 131.
Long Statement,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The length of the statement  "	else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut)) " is 138.
Long Statement,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,OnPluginLoaded,The length of the statement  "	this.RegisterEvents ("OnPlayerJoin"' "OnPlayerLeft"' "OnPlayerSpawned"' "OnPlayerTeamChange"' "OnPlayerSquadChange"' "OnListPlayers"' "OnPunkbusterPlayerInfo"' "OnLevelLoaded"' "OnRoundOver"' "OnGlobalChat"' "OnTeamChat"' "OnSquadChat"); " is 237.
Long Statement,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,sayToChat,The length of the statement  "				String s = message.Substring (i * MAX_MESSAGE_LENGTH' // For the length of the substring use the smaller of the two numbers' either the length of the remaining string or the max length of a message. " is 198.
Long Statement,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,sayToChat,The length of the statement  "				message.Substring (i * MAX_MESSAGE_LENGTH).Length < MAX_MESSAGE_LENGTH ? message.Substring (i * MAX_MESSAGE_LENGTH).Length : MAX_MESSAGE_LENGTH); " is 145.
Long Statement,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,sayToTeam,The length of the statement  "				String s = message.Substring (i * MAX_MESSAGE_LENGTH' // For the length of the substring use the smaller of the two numbers' either the length of the remaining string or the max length of a message. " is 198.
Long Statement,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,sayToTeam,The length of the statement  "				message.Substring (i * MAX_MESSAGE_LENGTH).Length < MAX_MESSAGE_LENGTH ? message.Substring (i * MAX_MESSAGE_LENGTH).Length : MAX_MESSAGE_LENGTH); " is 145.
Long Statement,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,debugPlayerIgnored,The length of the statement  "	debugWrite (dbgEvents' "[Event] Ignoring event triggered by " + soldierName + "' as " + soldierName + " is an excluded player."); " is 129.
Long Statement,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,OnListPlayers,The length of the statement  "					debugWrite (dbgEvents' "[Event] Removed " + p.SoldierName.Trim ().ToLower () + " from player list' as " + p.SoldierName.Trim ().ToLower () + " is an excluded player."); " is 168.
Long Statement,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,EntryMain,The length of the statement  "				playerSwappedTeamsOrSquads ((String)mCurrentAction.Argument' (Int32)mCurrentAction.Argument' (Int32)mCurrentAction.Argument); " is 125.
Long Statement,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,performResponseHandling,The length of the statement  "		consoleWrite ("[Error] ^8Make sure your ^b\"Staging Channel Name\"^n is correct and that the channel exists in the Teamspeak 3 Server."); " is 137.
Long Statement,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,performResponseHandling,The length of the statement  "		consoleWrite ("[Error] ^3An error occurred during obtaining the Teamspeak Channel List while looking for a team channel."); " is 123.
Long Statement,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,performResponseHandling,The length of the statement  "		consoleWrite ("[Error] ^3An error occurred during obtaining the Teamspeak Channel List while looking for a squad channel."); " is 124.
Long Statement,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,performReconnect,The length of the statement  "			consoleWrite ("[Reconnect] Failed {0}."' (attempt < errReconnectOnErrorAttempts) ? ("attempt " + attempt + " out of " + errReconnectOnErrorAttempts) : ("the last attempt.")); " is 174.
Long Statement,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,updateTsInfo,The length of the statement  "		debugWrite (dbgClients' "- TS Client [Ip: {0}' Channel: {1}' Name: {2}]"' tsClient.advIpAddress' tsClient.medChannelId' tsClient.tsName); " is 137.
Long Statement,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,updateGmInfo,The length of the statement  "		debugWrite (dbgClients' "- GM Client [Ip: {0}' Team: {1}' Name: {2}]"' (gmClient.HasPbInfo ? gmClient.IP : "Null_IP")' gmClient.TeamId' gmClient.Name); " is 151.
Long Statement,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,updatePbInfo,The length of the statement  "	punkInfo = new CPunkbusterInfo (punkInfo.SlotID' punkInfo.SoldierName' punkInfo.GUID' punkInfo.Ip.Remove ((punkInfo.Ip.Contains (":") ? punkInfo.Ip.IndexOf (':') : 0))' punkInfo.PlayerCountry' punkInfo.PlayerCountryCode); " is 221.
Long Statement,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,updateMasterInfo,The length of the statement  "		debugWrite (dbgClients' "- TS Client [Ip: {0}' Channel: {1}' Name: {2}] / GM Client [Ip: {3}' Team: {4}' Name: {5}] / Nosync: {6}' SyncTeam: {7}' SyncStaging: {8}"' (mstClient.HasTsClient) ? mstClient.TsClient.advIpAddress : "Null_IP"' (mstClient.HasTsClient) ? mstClient.TsClient.medChannelId.Value.ToString () : "Null_Channel"' (mstClient.HasTsClient) ? mstClient.TsClient.tsName : "Null_Name"' (mstClient.HasGmClient) ? ((mstClient.GmClient.HasPbInfo) ? mstClient.GmClient.IP : "Null_IP") : "Null_IP"' (mstClient.HasGmClient) ? mstClient.GmClient.TeamId.ToString () : "Null_Team"' (mstClient.HasGmClient) ? mstClient.GmClient.Name : "Null_Name"' mstClient.IsNoSync' mstClient.IsSyncToTeam' mstClient.IsSyncToStaging); " is 720.
Long Statement,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,updateMasterInfo,The length of the statement  "	// It would've been easier to do mTSSyncedUsers = temp_mTSSyncedUsers but this causes issues with the promote functionality. " is 124.
Long Statement,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,updateMasterInfo,The length of the statement  "	debugWrite (dbgTSSyncPromote' "[TSSync Promote] Done updating TSSynced list. List: (" + string.Join ("'"' mTSSyncedUsers.ToArray ()) + ")"); " is 140.
Long Statement,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,checkClientForSwap,The length of the statement  "	debugWrite (dbgClients' "[Clients] - Flags state of client {0}: {1}' {2}' {3}"' client.GmClient.Name' client.IsNoSync' client.IsSyncToStaging' client.IsSyncToTeam); " is 164.
Long Statement,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,checkClientForSwap,The length of the statement  "	if (!synTeamBasedSwapping || getPlayersOnBothServers ().Count < synTeamBasedThreshold || (synIntermissionSwapping && mBetweenRounds) || client.IsSyncToStaging) { " is 161.
Long Statement,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,checkClientForSwap,The length of the statement  "				consoleWrite ("[Swapping] - Staging Mode - Skipping Client ({0}) because he/she is in Ch.{1}."' client.TsClient.tsName' client.TsClient.medChannelId); " is 150.
Long Statement,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,checkClientForSwap,The length of the statement  "			debugWrite (dbgSwapping' "[Swapping] - Staging Mode - Client ({0}) from Ch.{1} to Ch.{2}."' client.TsClient.tsName' channelId' client.TsClient.medChannelId); " is 157.
Long Statement,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,checkClientForSwap,The length of the statement  "				debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Player (" + client.GmClient.Name + ") is being sent to staging removing from list: " + string.Join ("'"' mTSSyncedUsers.ToArray ())); " is 183.
Long Statement,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,checkClientForSwap,The length of the statement  "	else if (!synSquadBasedSwapping || getPlayersOnBothServersOnTeam (client.GmClient.TeamId).Count < synSquadBasedThreshold || client.GmClient.SquadId == 0 || getPlayersOnBothServersOnSquad (client.GmClient.TeamId' client.GmClient.SquadId).Count < synSquadSizeMinimum || client.IsSyncToTeam) { " is 290.
Long Statement,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,checkClientForSwap,The length of the statement  "			sendTeamspeakQuery (TeamspeakQuery.buildClientMoveQuery (client.TsClient.tsId.Value' mTeamChannels [client.GmClient.TeamId].tsId.Value)); " is 137.
Long Statement,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,checkClientForSwap,The length of the statement  "			debugWrite (dbgSwapping' "[Swapping] - Team Mode - Client ({0}) from Ch.{1} to Ch.{2}."' client.TsClient.tsName' channelId' client.TsClient.medChannelId); " is 154.
Long Statement,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,checkClientForSwap,The length of the statement  "			sendTeamspeakQuery (TeamspeakQuery.buildClientMoveQuery (client.TsClient.tsId.Value' mSquadChannels [client.GmClient.TeamId] [client.GmClient.SquadId].tsId.Value)); " is 164.
Long Statement,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,checkClientForSwap,The length of the statement  "			debugWrite (dbgSwapping' "[Swapping] - Squad Mode - Client ({0}) from Ch.{1} to Ch.{2}."' client.TsClient.tsName' channelId' client.TsClient.medChannelId); " is 155.
Long Statement,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,showSeedingMessage,The length of the statement  "	debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Squad Sync :: Number of players in players squad: " + playersOnTSSyncByTeam); " is 127.
Long Statement,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,showSeedingMessage,The length of the statement  "	debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Squad Sync :: List of TSSynced Users: " + string.Join ("'"' mTSSyncedUsers.ToArray ())); " is 138.
Long Statement,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,showSeedingMessage,The length of the statement  "	// If the number of TSSynced players in the squad is less than or equal to mMaxSeedingRecognitionVal then display the mSeedingRecognitionMessage " is 144.
Long Statement,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,showSeedingMessage,The length of the statement  "	// and the user is not in the mTSSyncedUsers list of synced players. Needed to account for when the round ends to avoid spamming the chat. " is 138.
Long Statement,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,showSeedingMessage,The length of the statement  "	if (mEnableTSPromotion && playersOnTSSyncByTeam <= mMaxSeedingRecognitionVal && !mTSSyncedUsers.Contains (client.GmClient.Name)) { " is 130.
Long Statement,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,showSeedingMessage,The length of the statement  "		debugWrite (dbgTSSyncPromote' "[TSSync Promote] In game promotion user is seeding Name=" + client.GmClient.Name + "...Team Name=" + mTeamChannels [client.GmClient.TeamId].tsName); " is 179.
Long Statement,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,checkClientForRemove,The length of the statement  "			debugWrite (dbgSwapping' "[Swapping] - Remove Client - Client ({0}) from Ch.{1} to Ch.{2}."' client.TsClient.tsName' channelId' client.TsClient.medChannelId); " is 158.
Long Statement,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,playerSwappedTeamsOrSquads,The length of the statement  "			mstClient.GmClient = new GameClient (new CPlayerInfo (mstClient.GmClient.Name' mstClient.GmClient.Tags' TeamId' SquadId)); " is 122.
Long Statement,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,removeChannels,The length of the statement  "	Dictionary<Int32' Dictionary<Int32' TeamspeakChannel>> squadChannels = new Dictionary<Int32' Dictionary<Int32' TeamspeakChannel>> (); " is 133.
Long Statement,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,removeChannels,The length of the statement  "			debugWrite (dbgChannels' "[Channels] Removed ^bSquad^n Channel: {0} ({1})."' mSquadChannels [teamId] [squadId].tsName' mSquadChannels [teamId] [squadId].tsId); " is 159.
Long Statement,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,removeChannels,The length of the statement  "			debugWrite (dbgChannels' "[Channels] Removed ^bTeam^n Channel: {0} ({1})."' mTeamChannels [teamId].tsName' mTeamChannels [teamId].tsId); " is 136.
Long Statement,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,addToActionQueue,The length of the statement  "		while (mActions.Count > 0 && (mActions.Peek ().Command == Commands.PluginEnabled || mActions.Peek ().Command == Commands.PluginDisabled)) " is 137.
Long Statement,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,DisplayTsSquadList,The length of the statement  "			debugWrite (dbgEvents' "[Event] Squad " + squadNames [teamSquad.Key] + "' TS: " + teamSquad.Value.TsCount + "' Game: " + teamSquad.Value.InGameCount); " is 150.
Long Statement,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,DisplayTsSquadList,The length of the statement  "				string message = String.Format (squadMessage' squadNames [teamSquad.Key]' teamSquad.Value.TsCount' teamSquad.Value.InGameCount); " is 128.
Long Statement,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,inGamePromotion,The length of the statement  "		consoleWrite ("^8A fatal error occurred on in game promotion! Procon must be restarted for Teamspeak 3 Sync promotion to work correctly."); " is 139.
Complex Conditional,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,checkClientForSwap,The conditional expression  "!client.HasGmClient || !client.HasTsClient || client.GmClient.TeamId == 0 || client.IsNoSync"  is complex.
Complex Conditional,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,checkClientForSwap,The conditional expression  "!synTeamBasedSwapping || getPlayersOnBothServers ().Count < synTeamBasedThreshold || (synIntermissionSwapping && mBetweenRounds) || client.IsSyncToStaging"  is complex.
Complex Conditional,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,checkClientForSwap,The conditional expression  "!synSquadBasedSwapping || getPlayersOnBothServersOnTeam (client.GmClient.TeamId).Count < synSquadBasedThreshold || client.GmClient.SquadId == 0 || getPlayersOnBothServersOnSquad (client.GmClient.TeamId' client.GmClient.SquadId).Count < synSquadSizeMinimum || client.IsSyncToTeam"  is complex.
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Server IP")  	ts3ServerIp = strValue;  else if (strVariable == "Server Port" && UInt16.TryParse (strValue' out ushtOut))  	ts3ServerPort = ushtOut;  else if (strVariable == "Query Port" && UInt16.TryParse (strValue' out ushtOut))  	ts3QueryPort = ushtOut;  else if (strVariable == "Query Username")  	ts3QueryUsername = strValue;  else if (strVariable == "Query Password")  	ts3QueryPassword = strValue;  else if (strVariable == "Query Nickname")  	ts3QueryNickname = strValue;  else if (strVariable == "Staging Channel Name")  	ts3StgChannelName = strValue;  else if (strVariable == "Enable Dropoff Channel" && Boolean.TryParse (strValue' out blnOut))  	ts3EnableDropoff = blnOut;  else if (strVariable == "Dropoff Channel Name")  	ts3DropoffChannelName = strValue;  else if (strVariable == "Pickup Channel Names")  	ts3PckChannelNames = CPluginVariable.DecodeStringArray (strValue);  // -- Section 2 - Channels --------------------------------------------  else if (strVariable == "Password")  	chnPassword = strValue.Trim ();  else if (strVariable == "Team Names")  	chnTeamNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Squad Names")  	chnSquadNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Remove When Empty" && Boolean.TryParse (strValue' out blnOut))  	chnRemoveOnEmpty = blnOut;  // -- Section 3 - Synchronization -------------------------------------  else if (strVariable == "Delay Queries" && Boolean.TryParse (strValue' out blnOut))  	synDelayQueries = blnOut;  else if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Server IP")  	ts3ServerIp = strValue;  else if (strVariable == "Server Port" && UInt16.TryParse (strValue' out ushtOut))  	ts3ServerPort = ushtOut;  else if (strVariable == "Query Port" && UInt16.TryParse (strValue' out ushtOut))  	ts3QueryPort = ushtOut;  else if (strVariable == "Query Username")  	ts3QueryUsername = strValue;  else if (strVariable == "Query Password")  	ts3QueryPassword = strValue;  else if (strVariable == "Query Nickname")  	ts3QueryNickname = strValue;  else if (strVariable == "Staging Channel Name")  	ts3StgChannelName = strValue;  else if (strVariable == "Enable Dropoff Channel" && Boolean.TryParse (strValue' out blnOut))  	ts3EnableDropoff = blnOut;  else if (strVariable == "Dropoff Channel Name")  	ts3DropoffChannelName = strValue;  else if (strVariable == "Pickup Channel Names")  	ts3PckChannelNames = CPluginVariable.DecodeStringArray (strValue);  // -- Section 2 - Channels --------------------------------------------  else if (strVariable == "Password")  	chnPassword = strValue.Trim ();  else if (strVariable == "Team Names")  	chnTeamNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Squad Names")  	chnSquadNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Remove When Empty" && Boolean.TryParse (strValue' out blnOut))  	chnRemoveOnEmpty = blnOut;  // -- Section 3 - Synchronization -------------------------------------  else if (strVariable == "Delay Queries" && Boolean.TryParse (strValue' out blnOut))  	synDelayQueries = blnOut;  else if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Server IP")  	ts3ServerIp = strValue;  else if (strVariable == "Server Port" && UInt16.TryParse (strValue' out ushtOut))  	ts3ServerPort = ushtOut;  else if (strVariable == "Query Port" && UInt16.TryParse (strValue' out ushtOut))  	ts3QueryPort = ushtOut;  else if (strVariable == "Query Username")  	ts3QueryUsername = strValue;  else if (strVariable == "Query Password")  	ts3QueryPassword = strValue;  else if (strVariable == "Query Nickname")  	ts3QueryNickname = strValue;  else if (strVariable == "Staging Channel Name")  	ts3StgChannelName = strValue;  else if (strVariable == "Enable Dropoff Channel" && Boolean.TryParse (strValue' out blnOut))  	ts3EnableDropoff = blnOut;  else if (strVariable == "Dropoff Channel Name")  	ts3DropoffChannelName = strValue;  else if (strVariable == "Pickup Channel Names")  	ts3PckChannelNames = CPluginVariable.DecodeStringArray (strValue);  // -- Section 2 - Channels --------------------------------------------  else if (strVariable == "Password")  	chnPassword = strValue.Trim ();  else if (strVariable == "Team Names")  	chnTeamNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Squad Names")  	chnSquadNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Remove When Empty" && Boolean.TryParse (strValue' out blnOut))  	chnRemoveOnEmpty = blnOut;  // -- Section 3 - Synchronization -------------------------------------  else if (strVariable == "Delay Queries" && Boolean.TryParse (strValue' out blnOut))  	synDelayQueries = blnOut;  else if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Server IP")  	ts3ServerIp = strValue;  else if (strVariable == "Server Port" && UInt16.TryParse (strValue' out ushtOut))  	ts3ServerPort = ushtOut;  else if (strVariable == "Query Port" && UInt16.TryParse (strValue' out ushtOut))  	ts3QueryPort = ushtOut;  else if (strVariable == "Query Username")  	ts3QueryUsername = strValue;  else if (strVariable == "Query Password")  	ts3QueryPassword = strValue;  else if (strVariable == "Query Nickname")  	ts3QueryNickname = strValue;  else if (strVariable == "Staging Channel Name")  	ts3StgChannelName = strValue;  else if (strVariable == "Enable Dropoff Channel" && Boolean.TryParse (strValue' out blnOut))  	ts3EnableDropoff = blnOut;  else if (strVariable == "Dropoff Channel Name")  	ts3DropoffChannelName = strValue;  else if (strVariable == "Pickup Channel Names")  	ts3PckChannelNames = CPluginVariable.DecodeStringArray (strValue);  // -- Section 2 - Channels --------------------------------------------  else if (strVariable == "Password")  	chnPassword = strValue.Trim ();  else if (strVariable == "Team Names")  	chnTeamNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Squad Names")  	chnSquadNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Remove When Empty" && Boolean.TryParse (strValue' out blnOut))  	chnRemoveOnEmpty = blnOut;  // -- Section 3 - Synchronization -------------------------------------  else if (strVariable == "Delay Queries" && Boolean.TryParse (strValue' out blnOut))  	synDelayQueries = blnOut;  else if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Server IP")  	ts3ServerIp = strValue;  else if (strVariable == "Server Port" && UInt16.TryParse (strValue' out ushtOut))  	ts3ServerPort = ushtOut;  else if (strVariable == "Query Port" && UInt16.TryParse (strValue' out ushtOut))  	ts3QueryPort = ushtOut;  else if (strVariable == "Query Username")  	ts3QueryUsername = strValue;  else if (strVariable == "Query Password")  	ts3QueryPassword = strValue;  else if (strVariable == "Query Nickname")  	ts3QueryNickname = strValue;  else if (strVariable == "Staging Channel Name")  	ts3StgChannelName = strValue;  else if (strVariable == "Enable Dropoff Channel" && Boolean.TryParse (strValue' out blnOut))  	ts3EnableDropoff = blnOut;  else if (strVariable == "Dropoff Channel Name")  	ts3DropoffChannelName = strValue;  else if (strVariable == "Pickup Channel Names")  	ts3PckChannelNames = CPluginVariable.DecodeStringArray (strValue);  // -- Section 2 - Channels --------------------------------------------  else if (strVariable == "Password")  	chnPassword = strValue.Trim ();  else if (strVariable == "Team Names")  	chnTeamNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Squad Names")  	chnSquadNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Remove When Empty" && Boolean.TryParse (strValue' out blnOut))  	chnRemoveOnEmpty = blnOut;  // -- Section 3 - Synchronization -------------------------------------  else if (strVariable == "Delay Queries" && Boolean.TryParse (strValue' out blnOut))  	synDelayQueries = blnOut;  else if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Server IP")  	ts3ServerIp = strValue;  else if (strVariable == "Server Port" && UInt16.TryParse (strValue' out ushtOut))  	ts3ServerPort = ushtOut;  else if (strVariable == "Query Port" && UInt16.TryParse (strValue' out ushtOut))  	ts3QueryPort = ushtOut;  else if (strVariable == "Query Username")  	ts3QueryUsername = strValue;  else if (strVariable == "Query Password")  	ts3QueryPassword = strValue;  else if (strVariable == "Query Nickname")  	ts3QueryNickname = strValue;  else if (strVariable == "Staging Channel Name")  	ts3StgChannelName = strValue;  else if (strVariable == "Enable Dropoff Channel" && Boolean.TryParse (strValue' out blnOut))  	ts3EnableDropoff = blnOut;  else if (strVariable == "Dropoff Channel Name")  	ts3DropoffChannelName = strValue;  else if (strVariable == "Pickup Channel Names")  	ts3PckChannelNames = CPluginVariable.DecodeStringArray (strValue);  // -- Section 2 - Channels --------------------------------------------  else if (strVariable == "Password")  	chnPassword = strValue.Trim ();  else if (strVariable == "Team Names")  	chnTeamNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Squad Names")  	chnSquadNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Remove When Empty" && Boolean.TryParse (strValue' out blnOut))  	chnRemoveOnEmpty = blnOut;  // -- Section 3 - Synchronization -------------------------------------  else if (strVariable == "Delay Queries" && Boolean.TryParse (strValue' out blnOut))  	synDelayQueries = blnOut;  else if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Server IP")  	ts3ServerIp = strValue;  else if (strVariable == "Server Port" && UInt16.TryParse (strValue' out ushtOut))  	ts3ServerPort = ushtOut;  else if (strVariable == "Query Port" && UInt16.TryParse (strValue' out ushtOut))  	ts3QueryPort = ushtOut;  else if (strVariable == "Query Username")  	ts3QueryUsername = strValue;  else if (strVariable == "Query Password")  	ts3QueryPassword = strValue;  else if (strVariable == "Query Nickname")  	ts3QueryNickname = strValue;  else if (strVariable == "Staging Channel Name")  	ts3StgChannelName = strValue;  else if (strVariable == "Enable Dropoff Channel" && Boolean.TryParse (strValue' out blnOut))  	ts3EnableDropoff = blnOut;  else if (strVariable == "Dropoff Channel Name")  	ts3DropoffChannelName = strValue;  else if (strVariable == "Pickup Channel Names")  	ts3PckChannelNames = CPluginVariable.DecodeStringArray (strValue);  // -- Section 2 - Channels --------------------------------------------  else if (strVariable == "Password")  	chnPassword = strValue.Trim ();  else if (strVariable == "Team Names")  	chnTeamNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Squad Names")  	chnSquadNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Remove When Empty" && Boolean.TryParse (strValue' out blnOut))  	chnRemoveOnEmpty = blnOut;  // -- Section 3 - Synchronization -------------------------------------  else if (strVariable == "Delay Queries" && Boolean.TryParse (strValue' out blnOut))  	synDelayQueries = blnOut;  else if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Server IP")  	ts3ServerIp = strValue;  else if (strVariable == "Server Port" && UInt16.TryParse (strValue' out ushtOut))  	ts3ServerPort = ushtOut;  else if (strVariable == "Query Port" && UInt16.TryParse (strValue' out ushtOut))  	ts3QueryPort = ushtOut;  else if (strVariable == "Query Username")  	ts3QueryUsername = strValue;  else if (strVariable == "Query Password")  	ts3QueryPassword = strValue;  else if (strVariable == "Query Nickname")  	ts3QueryNickname = strValue;  else if (strVariable == "Staging Channel Name")  	ts3StgChannelName = strValue;  else if (strVariable == "Enable Dropoff Channel" && Boolean.TryParse (strValue' out blnOut))  	ts3EnableDropoff = blnOut;  else if (strVariable == "Dropoff Channel Name")  	ts3DropoffChannelName = strValue;  else if (strVariable == "Pickup Channel Names")  	ts3PckChannelNames = CPluginVariable.DecodeStringArray (strValue);  // -- Section 2 - Channels --------------------------------------------  else if (strVariable == "Password")  	chnPassword = strValue.Trim ();  else if (strVariable == "Team Names")  	chnTeamNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Squad Names")  	chnSquadNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Remove When Empty" && Boolean.TryParse (strValue' out blnOut))  	chnRemoveOnEmpty = blnOut;  // -- Section 3 - Synchronization -------------------------------------  else if (strVariable == "Delay Queries" && Boolean.TryParse (strValue' out blnOut))  	synDelayQueries = blnOut;  else if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Server IP")  	ts3ServerIp = strValue;  else if (strVariable == "Server Port" && UInt16.TryParse (strValue' out ushtOut))  	ts3ServerPort = ushtOut;  else if (strVariable == "Query Port" && UInt16.TryParse (strValue' out ushtOut))  	ts3QueryPort = ushtOut;  else if (strVariable == "Query Username")  	ts3QueryUsername = strValue;  else if (strVariable == "Query Password")  	ts3QueryPassword = strValue;  else if (strVariable == "Query Nickname")  	ts3QueryNickname = strValue;  else if (strVariable == "Staging Channel Name")  	ts3StgChannelName = strValue;  else if (strVariable == "Enable Dropoff Channel" && Boolean.TryParse (strValue' out blnOut))  	ts3EnableDropoff = blnOut;  else if (strVariable == "Dropoff Channel Name")  	ts3DropoffChannelName = strValue;  else if (strVariable == "Pickup Channel Names")  	ts3PckChannelNames = CPluginVariable.DecodeStringArray (strValue);  // -- Section 2 - Channels --------------------------------------------  else if (strVariable == "Password")  	chnPassword = strValue.Trim ();  else if (strVariable == "Team Names")  	chnTeamNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Squad Names")  	chnSquadNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Remove When Empty" && Boolean.TryParse (strValue' out blnOut))  	chnRemoveOnEmpty = blnOut;  // -- Section 3 - Synchronization -------------------------------------  else if (strVariable == "Delay Queries" && Boolean.TryParse (strValue' out blnOut))  	synDelayQueries = blnOut;  else if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Server IP")  	ts3ServerIp = strValue;  else if (strVariable == "Server Port" && UInt16.TryParse (strValue' out ushtOut))  	ts3ServerPort = ushtOut;  else if (strVariable == "Query Port" && UInt16.TryParse (strValue' out ushtOut))  	ts3QueryPort = ushtOut;  else if (strVariable == "Query Username")  	ts3QueryUsername = strValue;  else if (strVariable == "Query Password")  	ts3QueryPassword = strValue;  else if (strVariable == "Query Nickname")  	ts3QueryNickname = strValue;  else if (strVariable == "Staging Channel Name")  	ts3StgChannelName = strValue;  else if (strVariable == "Enable Dropoff Channel" && Boolean.TryParse (strValue' out blnOut))  	ts3EnableDropoff = blnOut;  else if (strVariable == "Dropoff Channel Name")  	ts3DropoffChannelName = strValue;  else if (strVariable == "Pickup Channel Names")  	ts3PckChannelNames = CPluginVariable.DecodeStringArray (strValue);  // -- Section 2 - Channels --------------------------------------------  else if (strVariable == "Password")  	chnPassword = strValue.Trim ();  else if (strVariable == "Team Names")  	chnTeamNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Squad Names")  	chnSquadNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Remove When Empty" && Boolean.TryParse (strValue' out blnOut))  	chnRemoveOnEmpty = blnOut;  // -- Section 3 - Synchronization -------------------------------------  else if (strVariable == "Delay Queries" && Boolean.TryParse (strValue' out blnOut))  	synDelayQueries = blnOut;  else if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Server IP")  	ts3ServerIp = strValue;  else if (strVariable == "Server Port" && UInt16.TryParse (strValue' out ushtOut))  	ts3ServerPort = ushtOut;  else if (strVariable == "Query Port" && UInt16.TryParse (strValue' out ushtOut))  	ts3QueryPort = ushtOut;  else if (strVariable == "Query Username")  	ts3QueryUsername = strValue;  else if (strVariable == "Query Password")  	ts3QueryPassword = strValue;  else if (strVariable == "Query Nickname")  	ts3QueryNickname = strValue;  else if (strVariable == "Staging Channel Name")  	ts3StgChannelName = strValue;  else if (strVariable == "Enable Dropoff Channel" && Boolean.TryParse (strValue' out blnOut))  	ts3EnableDropoff = blnOut;  else if (strVariable == "Dropoff Channel Name")  	ts3DropoffChannelName = strValue;  else if (strVariable == "Pickup Channel Names")  	ts3PckChannelNames = CPluginVariable.DecodeStringArray (strValue);  // -- Section 2 - Channels --------------------------------------------  else if (strVariable == "Password")  	chnPassword = strValue.Trim ();  else if (strVariable == "Team Names")  	chnTeamNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Squad Names")  	chnSquadNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Remove When Empty" && Boolean.TryParse (strValue' out blnOut))  	chnRemoveOnEmpty = blnOut;  // -- Section 3 - Synchronization -------------------------------------  else if (strVariable == "Delay Queries" && Boolean.TryParse (strValue' out blnOut))  	synDelayQueries = blnOut;  else if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Server IP")  	ts3ServerIp = strValue;  else if (strVariable == "Server Port" && UInt16.TryParse (strValue' out ushtOut))  	ts3ServerPort = ushtOut;  else if (strVariable == "Query Port" && UInt16.TryParse (strValue' out ushtOut))  	ts3QueryPort = ushtOut;  else if (strVariable == "Query Username")  	ts3QueryUsername = strValue;  else if (strVariable == "Query Password")  	ts3QueryPassword = strValue;  else if (strVariable == "Query Nickname")  	ts3QueryNickname = strValue;  else if (strVariable == "Staging Channel Name")  	ts3StgChannelName = strValue;  else if (strVariable == "Enable Dropoff Channel" && Boolean.TryParse (strValue' out blnOut))  	ts3EnableDropoff = blnOut;  else if (strVariable == "Dropoff Channel Name")  	ts3DropoffChannelName = strValue;  else if (strVariable == "Pickup Channel Names")  	ts3PckChannelNames = CPluginVariable.DecodeStringArray (strValue);  // -- Section 2 - Channels --------------------------------------------  else if (strVariable == "Password")  	chnPassword = strValue.Trim ();  else if (strVariable == "Team Names")  	chnTeamNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Squad Names")  	chnSquadNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Remove When Empty" && Boolean.TryParse (strValue' out blnOut))  	chnRemoveOnEmpty = blnOut;  // -- Section 3 - Synchronization -------------------------------------  else if (strVariable == "Delay Queries" && Boolean.TryParse (strValue' out blnOut))  	synDelayQueries = blnOut;  else if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Server Port" && UInt16.TryParse (strValue' out ushtOut))  	ts3ServerPort = ushtOut;  else if (strVariable == "Query Port" && UInt16.TryParse (strValue' out ushtOut))  	ts3QueryPort = ushtOut;  else if (strVariable == "Query Username")  	ts3QueryUsername = strValue;  else if (strVariable == "Query Password")  	ts3QueryPassword = strValue;  else if (strVariable == "Query Nickname")  	ts3QueryNickname = strValue;  else if (strVariable == "Staging Channel Name")  	ts3StgChannelName = strValue;  else if (strVariable == "Enable Dropoff Channel" && Boolean.TryParse (strValue' out blnOut))  	ts3EnableDropoff = blnOut;  else if (strVariable == "Dropoff Channel Name")  	ts3DropoffChannelName = strValue;  else if (strVariable == "Pickup Channel Names")  	ts3PckChannelNames = CPluginVariable.DecodeStringArray (strValue);  // -- Section 2 - Channels --------------------------------------------  else if (strVariable == "Password")  	chnPassword = strValue.Trim ();  else if (strVariable == "Team Names")  	chnTeamNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Squad Names")  	chnSquadNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Remove When Empty" && Boolean.TryParse (strValue' out blnOut))  	chnRemoveOnEmpty = blnOut;  // -- Section 3 - Synchronization -------------------------------------  else if (strVariable == "Delay Queries" && Boolean.TryParse (strValue' out blnOut))  	synDelayQueries = blnOut;  else if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Server Port" && UInt16.TryParse (strValue' out ushtOut))  	ts3ServerPort = ushtOut;  else if (strVariable == "Query Port" && UInt16.TryParse (strValue' out ushtOut))  	ts3QueryPort = ushtOut;  else if (strVariable == "Query Username")  	ts3QueryUsername = strValue;  else if (strVariable == "Query Password")  	ts3QueryPassword = strValue;  else if (strVariable == "Query Nickname")  	ts3QueryNickname = strValue;  else if (strVariable == "Staging Channel Name")  	ts3StgChannelName = strValue;  else if (strVariable == "Enable Dropoff Channel" && Boolean.TryParse (strValue' out blnOut))  	ts3EnableDropoff = blnOut;  else if (strVariable == "Dropoff Channel Name")  	ts3DropoffChannelName = strValue;  else if (strVariable == "Pickup Channel Names")  	ts3PckChannelNames = CPluginVariable.DecodeStringArray (strValue);  // -- Section 2 - Channels --------------------------------------------  else if (strVariable == "Password")  	chnPassword = strValue.Trim ();  else if (strVariable == "Team Names")  	chnTeamNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Squad Names")  	chnSquadNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Remove When Empty" && Boolean.TryParse (strValue' out blnOut))  	chnRemoveOnEmpty = blnOut;  // -- Section 3 - Synchronization -------------------------------------  else if (strVariable == "Delay Queries" && Boolean.TryParse (strValue' out blnOut))  	synDelayQueries = blnOut;  else if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Server Port" && UInt16.TryParse (strValue' out ushtOut))  	ts3ServerPort = ushtOut;  else if (strVariable == "Query Port" && UInt16.TryParse (strValue' out ushtOut))  	ts3QueryPort = ushtOut;  else if (strVariable == "Query Username")  	ts3QueryUsername = strValue;  else if (strVariable == "Query Password")  	ts3QueryPassword = strValue;  else if (strVariable == "Query Nickname")  	ts3QueryNickname = strValue;  else if (strVariable == "Staging Channel Name")  	ts3StgChannelName = strValue;  else if (strVariable == "Enable Dropoff Channel" && Boolean.TryParse (strValue' out blnOut))  	ts3EnableDropoff = blnOut;  else if (strVariable == "Dropoff Channel Name")  	ts3DropoffChannelName = strValue;  else if (strVariable == "Pickup Channel Names")  	ts3PckChannelNames = CPluginVariable.DecodeStringArray (strValue);  // -- Section 2 - Channels --------------------------------------------  else if (strVariable == "Password")  	chnPassword = strValue.Trim ();  else if (strVariable == "Team Names")  	chnTeamNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Squad Names")  	chnSquadNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Remove When Empty" && Boolean.TryParse (strValue' out blnOut))  	chnRemoveOnEmpty = blnOut;  // -- Section 3 - Synchronization -------------------------------------  else if (strVariable == "Delay Queries" && Boolean.TryParse (strValue' out blnOut))  	synDelayQueries = blnOut;  else if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Server Port" && UInt16.TryParse (strValue' out ushtOut))  	ts3ServerPort = ushtOut;  else if (strVariable == "Query Port" && UInt16.TryParse (strValue' out ushtOut))  	ts3QueryPort = ushtOut;  else if (strVariable == "Query Username")  	ts3QueryUsername = strValue;  else if (strVariable == "Query Password")  	ts3QueryPassword = strValue;  else if (strVariable == "Query Nickname")  	ts3QueryNickname = strValue;  else if (strVariable == "Staging Channel Name")  	ts3StgChannelName = strValue;  else if (strVariable == "Enable Dropoff Channel" && Boolean.TryParse (strValue' out blnOut))  	ts3EnableDropoff = blnOut;  else if (strVariable == "Dropoff Channel Name")  	ts3DropoffChannelName = strValue;  else if (strVariable == "Pickup Channel Names")  	ts3PckChannelNames = CPluginVariable.DecodeStringArray (strValue);  // -- Section 2 - Channels --------------------------------------------  else if (strVariable == "Password")  	chnPassword = strValue.Trim ();  else if (strVariable == "Team Names")  	chnTeamNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Squad Names")  	chnSquadNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Remove When Empty" && Boolean.TryParse (strValue' out blnOut))  	chnRemoveOnEmpty = blnOut;  // -- Section 3 - Synchronization -------------------------------------  else if (strVariable == "Delay Queries" && Boolean.TryParse (strValue' out blnOut))  	synDelayQueries = blnOut;  else if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Server Port" && UInt16.TryParse (strValue' out ushtOut))  	ts3ServerPort = ushtOut;  else if (strVariable == "Query Port" && UInt16.TryParse (strValue' out ushtOut))  	ts3QueryPort = ushtOut;  else if (strVariable == "Query Username")  	ts3QueryUsername = strValue;  else if (strVariable == "Query Password")  	ts3QueryPassword = strValue;  else if (strVariable == "Query Nickname")  	ts3QueryNickname = strValue;  else if (strVariable == "Staging Channel Name")  	ts3StgChannelName = strValue;  else if (strVariable == "Enable Dropoff Channel" && Boolean.TryParse (strValue' out blnOut))  	ts3EnableDropoff = blnOut;  else if (strVariable == "Dropoff Channel Name")  	ts3DropoffChannelName = strValue;  else if (strVariable == "Pickup Channel Names")  	ts3PckChannelNames = CPluginVariable.DecodeStringArray (strValue);  // -- Section 2 - Channels --------------------------------------------  else if (strVariable == "Password")  	chnPassword = strValue.Trim ();  else if (strVariable == "Team Names")  	chnTeamNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Squad Names")  	chnSquadNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Remove When Empty" && Boolean.TryParse (strValue' out blnOut))  	chnRemoveOnEmpty = blnOut;  // -- Section 3 - Synchronization -------------------------------------  else if (strVariable == "Delay Queries" && Boolean.TryParse (strValue' out blnOut))  	synDelayQueries = blnOut;  else if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Server Port" && UInt16.TryParse (strValue' out ushtOut))  	ts3ServerPort = ushtOut;  else if (strVariable == "Query Port" && UInt16.TryParse (strValue' out ushtOut))  	ts3QueryPort = ushtOut;  else if (strVariable == "Query Username")  	ts3QueryUsername = strValue;  else if (strVariable == "Query Password")  	ts3QueryPassword = strValue;  else if (strVariable == "Query Nickname")  	ts3QueryNickname = strValue;  else if (strVariable == "Staging Channel Name")  	ts3StgChannelName = strValue;  else if (strVariable == "Enable Dropoff Channel" && Boolean.TryParse (strValue' out blnOut))  	ts3EnableDropoff = blnOut;  else if (strVariable == "Dropoff Channel Name")  	ts3DropoffChannelName = strValue;  else if (strVariable == "Pickup Channel Names")  	ts3PckChannelNames = CPluginVariable.DecodeStringArray (strValue);  // -- Section 2 - Channels --------------------------------------------  else if (strVariable == "Password")  	chnPassword = strValue.Trim ();  else if (strVariable == "Team Names")  	chnTeamNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Squad Names")  	chnSquadNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Remove When Empty" && Boolean.TryParse (strValue' out blnOut))  	chnRemoveOnEmpty = blnOut;  // -- Section 3 - Synchronization -------------------------------------  else if (strVariable == "Delay Queries" && Boolean.TryParse (strValue' out blnOut))  	synDelayQueries = blnOut;  else if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Server Port" && UInt16.TryParse (strValue' out ushtOut))  	ts3ServerPort = ushtOut;  else if (strVariable == "Query Port" && UInt16.TryParse (strValue' out ushtOut))  	ts3QueryPort = ushtOut;  else if (strVariable == "Query Username")  	ts3QueryUsername = strValue;  else if (strVariable == "Query Password")  	ts3QueryPassword = strValue;  else if (strVariable == "Query Nickname")  	ts3QueryNickname = strValue;  else if (strVariable == "Staging Channel Name")  	ts3StgChannelName = strValue;  else if (strVariable == "Enable Dropoff Channel" && Boolean.TryParse (strValue' out blnOut))  	ts3EnableDropoff = blnOut;  else if (strVariable == "Dropoff Channel Name")  	ts3DropoffChannelName = strValue;  else if (strVariable == "Pickup Channel Names")  	ts3PckChannelNames = CPluginVariable.DecodeStringArray (strValue);  // -- Section 2 - Channels --------------------------------------------  else if (strVariable == "Password")  	chnPassword = strValue.Trim ();  else if (strVariable == "Team Names")  	chnTeamNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Squad Names")  	chnSquadNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Remove When Empty" && Boolean.TryParse (strValue' out blnOut))  	chnRemoveOnEmpty = blnOut;  // -- Section 3 - Synchronization -------------------------------------  else if (strVariable == "Delay Queries" && Boolean.TryParse (strValue' out blnOut))  	synDelayQueries = blnOut;  else if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Server Port" && UInt16.TryParse (strValue' out ushtOut))  	ts3ServerPort = ushtOut;  else if (strVariable == "Query Port" && UInt16.TryParse (strValue' out ushtOut))  	ts3QueryPort = ushtOut;  else if (strVariable == "Query Username")  	ts3QueryUsername = strValue;  else if (strVariable == "Query Password")  	ts3QueryPassword = strValue;  else if (strVariable == "Query Nickname")  	ts3QueryNickname = strValue;  else if (strVariable == "Staging Channel Name")  	ts3StgChannelName = strValue;  else if (strVariable == "Enable Dropoff Channel" && Boolean.TryParse (strValue' out blnOut))  	ts3EnableDropoff = blnOut;  else if (strVariable == "Dropoff Channel Name")  	ts3DropoffChannelName = strValue;  else if (strVariable == "Pickup Channel Names")  	ts3PckChannelNames = CPluginVariable.DecodeStringArray (strValue);  // -- Section 2 - Channels --------------------------------------------  else if (strVariable == "Password")  	chnPassword = strValue.Trim ();  else if (strVariable == "Team Names")  	chnTeamNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Squad Names")  	chnSquadNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Remove When Empty" && Boolean.TryParse (strValue' out blnOut))  	chnRemoveOnEmpty = blnOut;  // -- Section 3 - Synchronization -------------------------------------  else if (strVariable == "Delay Queries" && Boolean.TryParse (strValue' out blnOut))  	synDelayQueries = blnOut;  else if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Server Port" && UInt16.TryParse (strValue' out ushtOut))  	ts3ServerPort = ushtOut;  else if (strVariable == "Query Port" && UInt16.TryParse (strValue' out ushtOut))  	ts3QueryPort = ushtOut;  else if (strVariable == "Query Username")  	ts3QueryUsername = strValue;  else if (strVariable == "Query Password")  	ts3QueryPassword = strValue;  else if (strVariable == "Query Nickname")  	ts3QueryNickname = strValue;  else if (strVariable == "Staging Channel Name")  	ts3StgChannelName = strValue;  else if (strVariable == "Enable Dropoff Channel" && Boolean.TryParse (strValue' out blnOut))  	ts3EnableDropoff = blnOut;  else if (strVariable == "Dropoff Channel Name")  	ts3DropoffChannelName = strValue;  else if (strVariable == "Pickup Channel Names")  	ts3PckChannelNames = CPluginVariable.DecodeStringArray (strValue);  // -- Section 2 - Channels --------------------------------------------  else if (strVariable == "Password")  	chnPassword = strValue.Trim ();  else if (strVariable == "Team Names")  	chnTeamNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Squad Names")  	chnSquadNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Remove When Empty" && Boolean.TryParse (strValue' out blnOut))  	chnRemoveOnEmpty = blnOut;  // -- Section 3 - Synchronization -------------------------------------  else if (strVariable == "Delay Queries" && Boolean.TryParse (strValue' out blnOut))  	synDelayQueries = blnOut;  else if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Server Port" && UInt16.TryParse (strValue' out ushtOut))  	ts3ServerPort = ushtOut;  else if (strVariable == "Query Port" && UInt16.TryParse (strValue' out ushtOut))  	ts3QueryPort = ushtOut;  else if (strVariable == "Query Username")  	ts3QueryUsername = strValue;  else if (strVariable == "Query Password")  	ts3QueryPassword = strValue;  else if (strVariable == "Query Nickname")  	ts3QueryNickname = strValue;  else if (strVariable == "Staging Channel Name")  	ts3StgChannelName = strValue;  else if (strVariable == "Enable Dropoff Channel" && Boolean.TryParse (strValue' out blnOut))  	ts3EnableDropoff = blnOut;  else if (strVariable == "Dropoff Channel Name")  	ts3DropoffChannelName = strValue;  else if (strVariable == "Pickup Channel Names")  	ts3PckChannelNames = CPluginVariable.DecodeStringArray (strValue);  // -- Section 2 - Channels --------------------------------------------  else if (strVariable == "Password")  	chnPassword = strValue.Trim ();  else if (strVariable == "Team Names")  	chnTeamNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Squad Names")  	chnSquadNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Remove When Empty" && Boolean.TryParse (strValue' out blnOut))  	chnRemoveOnEmpty = blnOut;  // -- Section 3 - Synchronization -------------------------------------  else if (strVariable == "Delay Queries" && Boolean.TryParse (strValue' out blnOut))  	synDelayQueries = blnOut;  else if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Server Port" && UInt16.TryParse (strValue' out ushtOut))  	ts3ServerPort = ushtOut;  else if (strVariable == "Query Port" && UInt16.TryParse (strValue' out ushtOut))  	ts3QueryPort = ushtOut;  else if (strVariable == "Query Username")  	ts3QueryUsername = strValue;  else if (strVariable == "Query Password")  	ts3QueryPassword = strValue;  else if (strVariable == "Query Nickname")  	ts3QueryNickname = strValue;  else if (strVariable == "Staging Channel Name")  	ts3StgChannelName = strValue;  else if (strVariable == "Enable Dropoff Channel" && Boolean.TryParse (strValue' out blnOut))  	ts3EnableDropoff = blnOut;  else if (strVariable == "Dropoff Channel Name")  	ts3DropoffChannelName = strValue;  else if (strVariable == "Pickup Channel Names")  	ts3PckChannelNames = CPluginVariable.DecodeStringArray (strValue);  // -- Section 2 - Channels --------------------------------------------  else if (strVariable == "Password")  	chnPassword = strValue.Trim ();  else if (strVariable == "Team Names")  	chnTeamNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Squad Names")  	chnSquadNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Remove When Empty" && Boolean.TryParse (strValue' out blnOut))  	chnRemoveOnEmpty = blnOut;  // -- Section 3 - Synchronization -------------------------------------  else if (strVariable == "Delay Queries" && Boolean.TryParse (strValue' out blnOut))  	synDelayQueries = blnOut;  else if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Server Port" && UInt16.TryParse (strValue' out ushtOut))  	ts3ServerPort = ushtOut;  else if (strVariable == "Query Port" && UInt16.TryParse (strValue' out ushtOut))  	ts3QueryPort = ushtOut;  else if (strVariable == "Query Username")  	ts3QueryUsername = strValue;  else if (strVariable == "Query Password")  	ts3QueryPassword = strValue;  else if (strVariable == "Query Nickname")  	ts3QueryNickname = strValue;  else if (strVariable == "Staging Channel Name")  	ts3StgChannelName = strValue;  else if (strVariable == "Enable Dropoff Channel" && Boolean.TryParse (strValue' out blnOut))  	ts3EnableDropoff = blnOut;  else if (strVariable == "Dropoff Channel Name")  	ts3DropoffChannelName = strValue;  else if (strVariable == "Pickup Channel Names")  	ts3PckChannelNames = CPluginVariable.DecodeStringArray (strValue);  // -- Section 2 - Channels --------------------------------------------  else if (strVariable == "Password")  	chnPassword = strValue.Trim ();  else if (strVariable == "Team Names")  	chnTeamNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Squad Names")  	chnSquadNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Remove When Empty" && Boolean.TryParse (strValue' out blnOut))  	chnRemoveOnEmpty = blnOut;  // -- Section 3 - Synchronization -------------------------------------  else if (strVariable == "Delay Queries" && Boolean.TryParse (strValue' out blnOut))  	synDelayQueries = blnOut;  else if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Query Port" && UInt16.TryParse (strValue' out ushtOut))  	ts3QueryPort = ushtOut;  else if (strVariable == "Query Username")  	ts3QueryUsername = strValue;  else if (strVariable == "Query Password")  	ts3QueryPassword = strValue;  else if (strVariable == "Query Nickname")  	ts3QueryNickname = strValue;  else if (strVariable == "Staging Channel Name")  	ts3StgChannelName = strValue;  else if (strVariable == "Enable Dropoff Channel" && Boolean.TryParse (strValue' out blnOut))  	ts3EnableDropoff = blnOut;  else if (strVariable == "Dropoff Channel Name")  	ts3DropoffChannelName = strValue;  else if (strVariable == "Pickup Channel Names")  	ts3PckChannelNames = CPluginVariable.DecodeStringArray (strValue);  // -- Section 2 - Channels --------------------------------------------  else if (strVariable == "Password")  	chnPassword = strValue.Trim ();  else if (strVariable == "Team Names")  	chnTeamNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Squad Names")  	chnSquadNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Remove When Empty" && Boolean.TryParse (strValue' out blnOut))  	chnRemoveOnEmpty = blnOut;  // -- Section 3 - Synchronization -------------------------------------  else if (strVariable == "Delay Queries" && Boolean.TryParse (strValue' out blnOut))  	synDelayQueries = blnOut;  else if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Query Port" && UInt16.TryParse (strValue' out ushtOut))  	ts3QueryPort = ushtOut;  else if (strVariable == "Query Username")  	ts3QueryUsername = strValue;  else if (strVariable == "Query Password")  	ts3QueryPassword = strValue;  else if (strVariable == "Query Nickname")  	ts3QueryNickname = strValue;  else if (strVariable == "Staging Channel Name")  	ts3StgChannelName = strValue;  else if (strVariable == "Enable Dropoff Channel" && Boolean.TryParse (strValue' out blnOut))  	ts3EnableDropoff = blnOut;  else if (strVariable == "Dropoff Channel Name")  	ts3DropoffChannelName = strValue;  else if (strVariable == "Pickup Channel Names")  	ts3PckChannelNames = CPluginVariable.DecodeStringArray (strValue);  // -- Section 2 - Channels --------------------------------------------  else if (strVariable == "Password")  	chnPassword = strValue.Trim ();  else if (strVariable == "Team Names")  	chnTeamNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Squad Names")  	chnSquadNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Remove When Empty" && Boolean.TryParse (strValue' out blnOut))  	chnRemoveOnEmpty = blnOut;  // -- Section 3 - Synchronization -------------------------------------  else if (strVariable == "Delay Queries" && Boolean.TryParse (strValue' out blnOut))  	synDelayQueries = blnOut;  else if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Query Port" && UInt16.TryParse (strValue' out ushtOut))  	ts3QueryPort = ushtOut;  else if (strVariable == "Query Username")  	ts3QueryUsername = strValue;  else if (strVariable == "Query Password")  	ts3QueryPassword = strValue;  else if (strVariable == "Query Nickname")  	ts3QueryNickname = strValue;  else if (strVariable == "Staging Channel Name")  	ts3StgChannelName = strValue;  else if (strVariable == "Enable Dropoff Channel" && Boolean.TryParse (strValue' out blnOut))  	ts3EnableDropoff = blnOut;  else if (strVariable == "Dropoff Channel Name")  	ts3DropoffChannelName = strValue;  else if (strVariable == "Pickup Channel Names")  	ts3PckChannelNames = CPluginVariable.DecodeStringArray (strValue);  // -- Section 2 - Channels --------------------------------------------  else if (strVariable == "Password")  	chnPassword = strValue.Trim ();  else if (strVariable == "Team Names")  	chnTeamNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Squad Names")  	chnSquadNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Remove When Empty" && Boolean.TryParse (strValue' out blnOut))  	chnRemoveOnEmpty = blnOut;  // -- Section 3 - Synchronization -------------------------------------  else if (strVariable == "Delay Queries" && Boolean.TryParse (strValue' out blnOut))  	synDelayQueries = blnOut;  else if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Query Port" && UInt16.TryParse (strValue' out ushtOut))  	ts3QueryPort = ushtOut;  else if (strVariable == "Query Username")  	ts3QueryUsername = strValue;  else if (strVariable == "Query Password")  	ts3QueryPassword = strValue;  else if (strVariable == "Query Nickname")  	ts3QueryNickname = strValue;  else if (strVariable == "Staging Channel Name")  	ts3StgChannelName = strValue;  else if (strVariable == "Enable Dropoff Channel" && Boolean.TryParse (strValue' out blnOut))  	ts3EnableDropoff = blnOut;  else if (strVariable == "Dropoff Channel Name")  	ts3DropoffChannelName = strValue;  else if (strVariable == "Pickup Channel Names")  	ts3PckChannelNames = CPluginVariable.DecodeStringArray (strValue);  // -- Section 2 - Channels --------------------------------------------  else if (strVariable == "Password")  	chnPassword = strValue.Trim ();  else if (strVariable == "Team Names")  	chnTeamNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Squad Names")  	chnSquadNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Remove When Empty" && Boolean.TryParse (strValue' out blnOut))  	chnRemoveOnEmpty = blnOut;  // -- Section 3 - Synchronization -------------------------------------  else if (strVariable == "Delay Queries" && Boolean.TryParse (strValue' out blnOut))  	synDelayQueries = blnOut;  else if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Query Port" && UInt16.TryParse (strValue' out ushtOut))  	ts3QueryPort = ushtOut;  else if (strVariable == "Query Username")  	ts3QueryUsername = strValue;  else if (strVariable == "Query Password")  	ts3QueryPassword = strValue;  else if (strVariable == "Query Nickname")  	ts3QueryNickname = strValue;  else if (strVariable == "Staging Channel Name")  	ts3StgChannelName = strValue;  else if (strVariable == "Enable Dropoff Channel" && Boolean.TryParse (strValue' out blnOut))  	ts3EnableDropoff = blnOut;  else if (strVariable == "Dropoff Channel Name")  	ts3DropoffChannelName = strValue;  else if (strVariable == "Pickup Channel Names")  	ts3PckChannelNames = CPluginVariable.DecodeStringArray (strValue);  // -- Section 2 - Channels --------------------------------------------  else if (strVariable == "Password")  	chnPassword = strValue.Trim ();  else if (strVariable == "Team Names")  	chnTeamNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Squad Names")  	chnSquadNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Remove When Empty" && Boolean.TryParse (strValue' out blnOut))  	chnRemoveOnEmpty = blnOut;  // -- Section 3 - Synchronization -------------------------------------  else if (strVariable == "Delay Queries" && Boolean.TryParse (strValue' out blnOut))  	synDelayQueries = blnOut;  else if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Query Port" && UInt16.TryParse (strValue' out ushtOut))  	ts3QueryPort = ushtOut;  else if (strVariable == "Query Username")  	ts3QueryUsername = strValue;  else if (strVariable == "Query Password")  	ts3QueryPassword = strValue;  else if (strVariable == "Query Nickname")  	ts3QueryNickname = strValue;  else if (strVariable == "Staging Channel Name")  	ts3StgChannelName = strValue;  else if (strVariable == "Enable Dropoff Channel" && Boolean.TryParse (strValue' out blnOut))  	ts3EnableDropoff = blnOut;  else if (strVariable == "Dropoff Channel Name")  	ts3DropoffChannelName = strValue;  else if (strVariable == "Pickup Channel Names")  	ts3PckChannelNames = CPluginVariable.DecodeStringArray (strValue);  // -- Section 2 - Channels --------------------------------------------  else if (strVariable == "Password")  	chnPassword = strValue.Trim ();  else if (strVariable == "Team Names")  	chnTeamNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Squad Names")  	chnSquadNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Remove When Empty" && Boolean.TryParse (strValue' out blnOut))  	chnRemoveOnEmpty = blnOut;  // -- Section 3 - Synchronization -------------------------------------  else if (strVariable == "Delay Queries" && Boolean.TryParse (strValue' out blnOut))  	synDelayQueries = blnOut;  else if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Query Port" && UInt16.TryParse (strValue' out ushtOut))  	ts3QueryPort = ushtOut;  else if (strVariable == "Query Username")  	ts3QueryUsername = strValue;  else if (strVariable == "Query Password")  	ts3QueryPassword = strValue;  else if (strVariable == "Query Nickname")  	ts3QueryNickname = strValue;  else if (strVariable == "Staging Channel Name")  	ts3StgChannelName = strValue;  else if (strVariable == "Enable Dropoff Channel" && Boolean.TryParse (strValue' out blnOut))  	ts3EnableDropoff = blnOut;  else if (strVariable == "Dropoff Channel Name")  	ts3DropoffChannelName = strValue;  else if (strVariable == "Pickup Channel Names")  	ts3PckChannelNames = CPluginVariable.DecodeStringArray (strValue);  // -- Section 2 - Channels --------------------------------------------  else if (strVariable == "Password")  	chnPassword = strValue.Trim ();  else if (strVariable == "Team Names")  	chnTeamNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Squad Names")  	chnSquadNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Remove When Empty" && Boolean.TryParse (strValue' out blnOut))  	chnRemoveOnEmpty = blnOut;  // -- Section 3 - Synchronization -------------------------------------  else if (strVariable == "Delay Queries" && Boolean.TryParse (strValue' out blnOut))  	synDelayQueries = blnOut;  else if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Query Port" && UInt16.TryParse (strValue' out ushtOut))  	ts3QueryPort = ushtOut;  else if (strVariable == "Query Username")  	ts3QueryUsername = strValue;  else if (strVariable == "Query Password")  	ts3QueryPassword = strValue;  else if (strVariable == "Query Nickname")  	ts3QueryNickname = strValue;  else if (strVariable == "Staging Channel Name")  	ts3StgChannelName = strValue;  else if (strVariable == "Enable Dropoff Channel" && Boolean.TryParse (strValue' out blnOut))  	ts3EnableDropoff = blnOut;  else if (strVariable == "Dropoff Channel Name")  	ts3DropoffChannelName = strValue;  else if (strVariable == "Pickup Channel Names")  	ts3PckChannelNames = CPluginVariable.DecodeStringArray (strValue);  // -- Section 2 - Channels --------------------------------------------  else if (strVariable == "Password")  	chnPassword = strValue.Trim ();  else if (strVariable == "Team Names")  	chnTeamNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Squad Names")  	chnSquadNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Remove When Empty" && Boolean.TryParse (strValue' out blnOut))  	chnRemoveOnEmpty = blnOut;  // -- Section 3 - Synchronization -------------------------------------  else if (strVariable == "Delay Queries" && Boolean.TryParse (strValue' out blnOut))  	synDelayQueries = blnOut;  else if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Query Port" && UInt16.TryParse (strValue' out ushtOut))  	ts3QueryPort = ushtOut;  else if (strVariable == "Query Username")  	ts3QueryUsername = strValue;  else if (strVariable == "Query Password")  	ts3QueryPassword = strValue;  else if (strVariable == "Query Nickname")  	ts3QueryNickname = strValue;  else if (strVariable == "Staging Channel Name")  	ts3StgChannelName = strValue;  else if (strVariable == "Enable Dropoff Channel" && Boolean.TryParse (strValue' out blnOut))  	ts3EnableDropoff = blnOut;  else if (strVariable == "Dropoff Channel Name")  	ts3DropoffChannelName = strValue;  else if (strVariable == "Pickup Channel Names")  	ts3PckChannelNames = CPluginVariable.DecodeStringArray (strValue);  // -- Section 2 - Channels --------------------------------------------  else if (strVariable == "Password")  	chnPassword = strValue.Trim ();  else if (strVariable == "Team Names")  	chnTeamNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Squad Names")  	chnSquadNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Remove When Empty" && Boolean.TryParse (strValue' out blnOut))  	chnRemoveOnEmpty = blnOut;  // -- Section 3 - Synchronization -------------------------------------  else if (strVariable == "Delay Queries" && Boolean.TryParse (strValue' out blnOut))  	synDelayQueries = blnOut;  else if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Query Port" && UInt16.TryParse (strValue' out ushtOut))  	ts3QueryPort = ushtOut;  else if (strVariable == "Query Username")  	ts3QueryUsername = strValue;  else if (strVariable == "Query Password")  	ts3QueryPassword = strValue;  else if (strVariable == "Query Nickname")  	ts3QueryNickname = strValue;  else if (strVariable == "Staging Channel Name")  	ts3StgChannelName = strValue;  else if (strVariable == "Enable Dropoff Channel" && Boolean.TryParse (strValue' out blnOut))  	ts3EnableDropoff = blnOut;  else if (strVariable == "Dropoff Channel Name")  	ts3DropoffChannelName = strValue;  else if (strVariable == "Pickup Channel Names")  	ts3PckChannelNames = CPluginVariable.DecodeStringArray (strValue);  // -- Section 2 - Channels --------------------------------------------  else if (strVariable == "Password")  	chnPassword = strValue.Trim ();  else if (strVariable == "Team Names")  	chnTeamNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Squad Names")  	chnSquadNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Remove When Empty" && Boolean.TryParse (strValue' out blnOut))  	chnRemoveOnEmpty = blnOut;  // -- Section 3 - Synchronization -------------------------------------  else if (strVariable == "Delay Queries" && Boolean.TryParse (strValue' out blnOut))  	synDelayQueries = blnOut;  else if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Query Port" && UInt16.TryParse (strValue' out ushtOut))  	ts3QueryPort = ushtOut;  else if (strVariable == "Query Username")  	ts3QueryUsername = strValue;  else if (strVariable == "Query Password")  	ts3QueryPassword = strValue;  else if (strVariable == "Query Nickname")  	ts3QueryNickname = strValue;  else if (strVariable == "Staging Channel Name")  	ts3StgChannelName = strValue;  else if (strVariable == "Enable Dropoff Channel" && Boolean.TryParse (strValue' out blnOut))  	ts3EnableDropoff = blnOut;  else if (strVariable == "Dropoff Channel Name")  	ts3DropoffChannelName = strValue;  else if (strVariable == "Pickup Channel Names")  	ts3PckChannelNames = CPluginVariable.DecodeStringArray (strValue);  // -- Section 2 - Channels --------------------------------------------  else if (strVariable == "Password")  	chnPassword = strValue.Trim ();  else if (strVariable == "Team Names")  	chnTeamNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Squad Names")  	chnSquadNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Remove When Empty" && Boolean.TryParse (strValue' out blnOut))  	chnRemoveOnEmpty = blnOut;  // -- Section 3 - Synchronization -------------------------------------  else if (strVariable == "Delay Queries" && Boolean.TryParse (strValue' out blnOut))  	synDelayQueries = blnOut;  else if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Query Port" && UInt16.TryParse (strValue' out ushtOut))  	ts3QueryPort = ushtOut;  else if (strVariable == "Query Username")  	ts3QueryUsername = strValue;  else if (strVariable == "Query Password")  	ts3QueryPassword = strValue;  else if (strVariable == "Query Nickname")  	ts3QueryNickname = strValue;  else if (strVariable == "Staging Channel Name")  	ts3StgChannelName = strValue;  else if (strVariable == "Enable Dropoff Channel" && Boolean.TryParse (strValue' out blnOut))  	ts3EnableDropoff = blnOut;  else if (strVariable == "Dropoff Channel Name")  	ts3DropoffChannelName = strValue;  else if (strVariable == "Pickup Channel Names")  	ts3PckChannelNames = CPluginVariable.DecodeStringArray (strValue);  // -- Section 2 - Channels --------------------------------------------  else if (strVariable == "Password")  	chnPassword = strValue.Trim ();  else if (strVariable == "Team Names")  	chnTeamNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Squad Names")  	chnSquadNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Remove When Empty" && Boolean.TryParse (strValue' out blnOut))  	chnRemoveOnEmpty = blnOut;  // -- Section 3 - Synchronization -------------------------------------  else if (strVariable == "Delay Queries" && Boolean.TryParse (strValue' out blnOut))  	synDelayQueries = blnOut;  else if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Query Username")  	ts3QueryUsername = strValue;  else if (strVariable == "Query Password")  	ts3QueryPassword = strValue;  else if (strVariable == "Query Nickname")  	ts3QueryNickname = strValue;  else if (strVariable == "Staging Channel Name")  	ts3StgChannelName = strValue;  else if (strVariable == "Enable Dropoff Channel" && Boolean.TryParse (strValue' out blnOut))  	ts3EnableDropoff = blnOut;  else if (strVariable == "Dropoff Channel Name")  	ts3DropoffChannelName = strValue;  else if (strVariable == "Pickup Channel Names")  	ts3PckChannelNames = CPluginVariable.DecodeStringArray (strValue);  // -- Section 2 - Channels --------------------------------------------  else if (strVariable == "Password")  	chnPassword = strValue.Trim ();  else if (strVariable == "Team Names")  	chnTeamNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Squad Names")  	chnSquadNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Remove When Empty" && Boolean.TryParse (strValue' out blnOut))  	chnRemoveOnEmpty = blnOut;  // -- Section 3 - Synchronization -------------------------------------  else if (strVariable == "Delay Queries" && Boolean.TryParse (strValue' out blnOut))  	synDelayQueries = blnOut;  else if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Query Username")  	ts3QueryUsername = strValue;  else if (strVariable == "Query Password")  	ts3QueryPassword = strValue;  else if (strVariable == "Query Nickname")  	ts3QueryNickname = strValue;  else if (strVariable == "Staging Channel Name")  	ts3StgChannelName = strValue;  else if (strVariable == "Enable Dropoff Channel" && Boolean.TryParse (strValue' out blnOut))  	ts3EnableDropoff = blnOut;  else if (strVariable == "Dropoff Channel Name")  	ts3DropoffChannelName = strValue;  else if (strVariable == "Pickup Channel Names")  	ts3PckChannelNames = CPluginVariable.DecodeStringArray (strValue);  // -- Section 2 - Channels --------------------------------------------  else if (strVariable == "Password")  	chnPassword = strValue.Trim ();  else if (strVariable == "Team Names")  	chnTeamNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Squad Names")  	chnSquadNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Remove When Empty" && Boolean.TryParse (strValue' out blnOut))  	chnRemoveOnEmpty = blnOut;  // -- Section 3 - Synchronization -------------------------------------  else if (strVariable == "Delay Queries" && Boolean.TryParse (strValue' out blnOut))  	synDelayQueries = blnOut;  else if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Query Username")  	ts3QueryUsername = strValue;  else if (strVariable == "Query Password")  	ts3QueryPassword = strValue;  else if (strVariable == "Query Nickname")  	ts3QueryNickname = strValue;  else if (strVariable == "Staging Channel Name")  	ts3StgChannelName = strValue;  else if (strVariable == "Enable Dropoff Channel" && Boolean.TryParse (strValue' out blnOut))  	ts3EnableDropoff = blnOut;  else if (strVariable == "Dropoff Channel Name")  	ts3DropoffChannelName = strValue;  else if (strVariable == "Pickup Channel Names")  	ts3PckChannelNames = CPluginVariable.DecodeStringArray (strValue);  // -- Section 2 - Channels --------------------------------------------  else if (strVariable == "Password")  	chnPassword = strValue.Trim ();  else if (strVariable == "Team Names")  	chnTeamNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Squad Names")  	chnSquadNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Remove When Empty" && Boolean.TryParse (strValue' out blnOut))  	chnRemoveOnEmpty = blnOut;  // -- Section 3 - Synchronization -------------------------------------  else if (strVariable == "Delay Queries" && Boolean.TryParse (strValue' out blnOut))  	synDelayQueries = blnOut;  else if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Query Username")  	ts3QueryUsername = strValue;  else if (strVariable == "Query Password")  	ts3QueryPassword = strValue;  else if (strVariable == "Query Nickname")  	ts3QueryNickname = strValue;  else if (strVariable == "Staging Channel Name")  	ts3StgChannelName = strValue;  else if (strVariable == "Enable Dropoff Channel" && Boolean.TryParse (strValue' out blnOut))  	ts3EnableDropoff = blnOut;  else if (strVariable == "Dropoff Channel Name")  	ts3DropoffChannelName = strValue;  else if (strVariable == "Pickup Channel Names")  	ts3PckChannelNames = CPluginVariable.DecodeStringArray (strValue);  // -- Section 2 - Channels --------------------------------------------  else if (strVariable == "Password")  	chnPassword = strValue.Trim ();  else if (strVariable == "Team Names")  	chnTeamNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Squad Names")  	chnSquadNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Remove When Empty" && Boolean.TryParse (strValue' out blnOut))  	chnRemoveOnEmpty = blnOut;  // -- Section 3 - Synchronization -------------------------------------  else if (strVariable == "Delay Queries" && Boolean.TryParse (strValue' out blnOut))  	synDelayQueries = blnOut;  else if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Query Username")  	ts3QueryUsername = strValue;  else if (strVariable == "Query Password")  	ts3QueryPassword = strValue;  else if (strVariable == "Query Nickname")  	ts3QueryNickname = strValue;  else if (strVariable == "Staging Channel Name")  	ts3StgChannelName = strValue;  else if (strVariable == "Enable Dropoff Channel" && Boolean.TryParse (strValue' out blnOut))  	ts3EnableDropoff = blnOut;  else if (strVariable == "Dropoff Channel Name")  	ts3DropoffChannelName = strValue;  else if (strVariable == "Pickup Channel Names")  	ts3PckChannelNames = CPluginVariable.DecodeStringArray (strValue);  // -- Section 2 - Channels --------------------------------------------  else if (strVariable == "Password")  	chnPassword = strValue.Trim ();  else if (strVariable == "Team Names")  	chnTeamNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Squad Names")  	chnSquadNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Remove When Empty" && Boolean.TryParse (strValue' out blnOut))  	chnRemoveOnEmpty = blnOut;  // -- Section 3 - Synchronization -------------------------------------  else if (strVariable == "Delay Queries" && Boolean.TryParse (strValue' out blnOut))  	synDelayQueries = blnOut;  else if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Query Username")  	ts3QueryUsername = strValue;  else if (strVariable == "Query Password")  	ts3QueryPassword = strValue;  else if (strVariable == "Query Nickname")  	ts3QueryNickname = strValue;  else if (strVariable == "Staging Channel Name")  	ts3StgChannelName = strValue;  else if (strVariable == "Enable Dropoff Channel" && Boolean.TryParse (strValue' out blnOut))  	ts3EnableDropoff = blnOut;  else if (strVariable == "Dropoff Channel Name")  	ts3DropoffChannelName = strValue;  else if (strVariable == "Pickup Channel Names")  	ts3PckChannelNames = CPluginVariable.DecodeStringArray (strValue);  // -- Section 2 - Channels --------------------------------------------  else if (strVariable == "Password")  	chnPassword = strValue.Trim ();  else if (strVariable == "Team Names")  	chnTeamNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Squad Names")  	chnSquadNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Remove When Empty" && Boolean.TryParse (strValue' out blnOut))  	chnRemoveOnEmpty = blnOut;  // -- Section 3 - Synchronization -------------------------------------  else if (strVariable == "Delay Queries" && Boolean.TryParse (strValue' out blnOut))  	synDelayQueries = blnOut;  else if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Query Username")  	ts3QueryUsername = strValue;  else if (strVariable == "Query Password")  	ts3QueryPassword = strValue;  else if (strVariable == "Query Nickname")  	ts3QueryNickname = strValue;  else if (strVariable == "Staging Channel Name")  	ts3StgChannelName = strValue;  else if (strVariable == "Enable Dropoff Channel" && Boolean.TryParse (strValue' out blnOut))  	ts3EnableDropoff = blnOut;  else if (strVariable == "Dropoff Channel Name")  	ts3DropoffChannelName = strValue;  else if (strVariable == "Pickup Channel Names")  	ts3PckChannelNames = CPluginVariable.DecodeStringArray (strValue);  // -- Section 2 - Channels --------------------------------------------  else if (strVariable == "Password")  	chnPassword = strValue.Trim ();  else if (strVariable == "Team Names")  	chnTeamNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Squad Names")  	chnSquadNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Remove When Empty" && Boolean.TryParse (strValue' out blnOut))  	chnRemoveOnEmpty = blnOut;  // -- Section 3 - Synchronization -------------------------------------  else if (strVariable == "Delay Queries" && Boolean.TryParse (strValue' out blnOut))  	synDelayQueries = blnOut;  else if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Query Username")  	ts3QueryUsername = strValue;  else if (strVariable == "Query Password")  	ts3QueryPassword = strValue;  else if (strVariable == "Query Nickname")  	ts3QueryNickname = strValue;  else if (strVariable == "Staging Channel Name")  	ts3StgChannelName = strValue;  else if (strVariable == "Enable Dropoff Channel" && Boolean.TryParse (strValue' out blnOut))  	ts3EnableDropoff = blnOut;  else if (strVariable == "Dropoff Channel Name")  	ts3DropoffChannelName = strValue;  else if (strVariable == "Pickup Channel Names")  	ts3PckChannelNames = CPluginVariable.DecodeStringArray (strValue);  // -- Section 2 - Channels --------------------------------------------  else if (strVariable == "Password")  	chnPassword = strValue.Trim ();  else if (strVariable == "Team Names")  	chnTeamNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Squad Names")  	chnSquadNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Remove When Empty" && Boolean.TryParse (strValue' out blnOut))  	chnRemoveOnEmpty = blnOut;  // -- Section 3 - Synchronization -------------------------------------  else if (strVariable == "Delay Queries" && Boolean.TryParse (strValue' out blnOut))  	synDelayQueries = blnOut;  else if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Query Username")  	ts3QueryUsername = strValue;  else if (strVariable == "Query Password")  	ts3QueryPassword = strValue;  else if (strVariable == "Query Nickname")  	ts3QueryNickname = strValue;  else if (strVariable == "Staging Channel Name")  	ts3StgChannelName = strValue;  else if (strVariable == "Enable Dropoff Channel" && Boolean.TryParse (strValue' out blnOut))  	ts3EnableDropoff = blnOut;  else if (strVariable == "Dropoff Channel Name")  	ts3DropoffChannelName = strValue;  else if (strVariable == "Pickup Channel Names")  	ts3PckChannelNames = CPluginVariable.DecodeStringArray (strValue);  // -- Section 2 - Channels --------------------------------------------  else if (strVariable == "Password")  	chnPassword = strValue.Trim ();  else if (strVariable == "Team Names")  	chnTeamNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Squad Names")  	chnSquadNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Remove When Empty" && Boolean.TryParse (strValue' out blnOut))  	chnRemoveOnEmpty = blnOut;  // -- Section 3 - Synchronization -------------------------------------  else if (strVariable == "Delay Queries" && Boolean.TryParse (strValue' out blnOut))  	synDelayQueries = blnOut;  else if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Query Username")  	ts3QueryUsername = strValue;  else if (strVariable == "Query Password")  	ts3QueryPassword = strValue;  else if (strVariable == "Query Nickname")  	ts3QueryNickname = strValue;  else if (strVariable == "Staging Channel Name")  	ts3StgChannelName = strValue;  else if (strVariable == "Enable Dropoff Channel" && Boolean.TryParse (strValue' out blnOut))  	ts3EnableDropoff = blnOut;  else if (strVariable == "Dropoff Channel Name")  	ts3DropoffChannelName = strValue;  else if (strVariable == "Pickup Channel Names")  	ts3PckChannelNames = CPluginVariable.DecodeStringArray (strValue);  // -- Section 2 - Channels --------------------------------------------  else if (strVariable == "Password")  	chnPassword = strValue.Trim ();  else if (strVariable == "Team Names")  	chnTeamNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Squad Names")  	chnSquadNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Remove When Empty" && Boolean.TryParse (strValue' out blnOut))  	chnRemoveOnEmpty = blnOut;  // -- Section 3 - Synchronization -------------------------------------  else if (strVariable == "Delay Queries" && Boolean.TryParse (strValue' out blnOut))  	synDelayQueries = blnOut;  else if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Query Username")  	ts3QueryUsername = strValue;  else if (strVariable == "Query Password")  	ts3QueryPassword = strValue;  else if (strVariable == "Query Nickname")  	ts3QueryNickname = strValue;  else if (strVariable == "Staging Channel Name")  	ts3StgChannelName = strValue;  else if (strVariable == "Enable Dropoff Channel" && Boolean.TryParse (strValue' out blnOut))  	ts3EnableDropoff = blnOut;  else if (strVariable == "Dropoff Channel Name")  	ts3DropoffChannelName = strValue;  else if (strVariable == "Pickup Channel Names")  	ts3PckChannelNames = CPluginVariable.DecodeStringArray (strValue);  // -- Section 2 - Channels --------------------------------------------  else if (strVariable == "Password")  	chnPassword = strValue.Trim ();  else if (strVariable == "Team Names")  	chnTeamNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Squad Names")  	chnSquadNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Remove When Empty" && Boolean.TryParse (strValue' out blnOut))  	chnRemoveOnEmpty = blnOut;  // -- Section 3 - Synchronization -------------------------------------  else if (strVariable == "Delay Queries" && Boolean.TryParse (strValue' out blnOut))  	synDelayQueries = blnOut;  else if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Query Username")  	ts3QueryUsername = strValue;  else if (strVariable == "Query Password")  	ts3QueryPassword = strValue;  else if (strVariable == "Query Nickname")  	ts3QueryNickname = strValue;  else if (strVariable == "Staging Channel Name")  	ts3StgChannelName = strValue;  else if (strVariable == "Enable Dropoff Channel" && Boolean.TryParse (strValue' out blnOut))  	ts3EnableDropoff = blnOut;  else if (strVariable == "Dropoff Channel Name")  	ts3DropoffChannelName = strValue;  else if (strVariable == "Pickup Channel Names")  	ts3PckChannelNames = CPluginVariable.DecodeStringArray (strValue);  // -- Section 2 - Channels --------------------------------------------  else if (strVariable == "Password")  	chnPassword = strValue.Trim ();  else if (strVariable == "Team Names")  	chnTeamNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Squad Names")  	chnSquadNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Remove When Empty" && Boolean.TryParse (strValue' out blnOut))  	chnRemoveOnEmpty = blnOut;  // -- Section 3 - Synchronization -------------------------------------  else if (strVariable == "Delay Queries" && Boolean.TryParse (strValue' out blnOut))  	synDelayQueries = blnOut;  else if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Query Password")  	ts3QueryPassword = strValue;  else if (strVariable == "Query Nickname")  	ts3QueryNickname = strValue;  else if (strVariable == "Staging Channel Name")  	ts3StgChannelName = strValue;  else if (strVariable == "Enable Dropoff Channel" && Boolean.TryParse (strValue' out blnOut))  	ts3EnableDropoff = blnOut;  else if (strVariable == "Dropoff Channel Name")  	ts3DropoffChannelName = strValue;  else if (strVariable == "Pickup Channel Names")  	ts3PckChannelNames = CPluginVariable.DecodeStringArray (strValue);  // -- Section 2 - Channels --------------------------------------------  else if (strVariable == "Password")  	chnPassword = strValue.Trim ();  else if (strVariable == "Team Names")  	chnTeamNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Squad Names")  	chnSquadNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Remove When Empty" && Boolean.TryParse (strValue' out blnOut))  	chnRemoveOnEmpty = blnOut;  // -- Section 3 - Synchronization -------------------------------------  else if (strVariable == "Delay Queries" && Boolean.TryParse (strValue' out blnOut))  	synDelayQueries = blnOut;  else if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Query Password")  	ts3QueryPassword = strValue;  else if (strVariable == "Query Nickname")  	ts3QueryNickname = strValue;  else if (strVariable == "Staging Channel Name")  	ts3StgChannelName = strValue;  else if (strVariable == "Enable Dropoff Channel" && Boolean.TryParse (strValue' out blnOut))  	ts3EnableDropoff = blnOut;  else if (strVariable == "Dropoff Channel Name")  	ts3DropoffChannelName = strValue;  else if (strVariable == "Pickup Channel Names")  	ts3PckChannelNames = CPluginVariable.DecodeStringArray (strValue);  // -- Section 2 - Channels --------------------------------------------  else if (strVariable == "Password")  	chnPassword = strValue.Trim ();  else if (strVariable == "Team Names")  	chnTeamNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Squad Names")  	chnSquadNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Remove When Empty" && Boolean.TryParse (strValue' out blnOut))  	chnRemoveOnEmpty = blnOut;  // -- Section 3 - Synchronization -------------------------------------  else if (strVariable == "Delay Queries" && Boolean.TryParse (strValue' out blnOut))  	synDelayQueries = blnOut;  else if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Query Password")  	ts3QueryPassword = strValue;  else if (strVariable == "Query Nickname")  	ts3QueryNickname = strValue;  else if (strVariable == "Staging Channel Name")  	ts3StgChannelName = strValue;  else if (strVariable == "Enable Dropoff Channel" && Boolean.TryParse (strValue' out blnOut))  	ts3EnableDropoff = blnOut;  else if (strVariable == "Dropoff Channel Name")  	ts3DropoffChannelName = strValue;  else if (strVariable == "Pickup Channel Names")  	ts3PckChannelNames = CPluginVariable.DecodeStringArray (strValue);  // -- Section 2 - Channels --------------------------------------------  else if (strVariable == "Password")  	chnPassword = strValue.Trim ();  else if (strVariable == "Team Names")  	chnTeamNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Squad Names")  	chnSquadNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Remove When Empty" && Boolean.TryParse (strValue' out blnOut))  	chnRemoveOnEmpty = blnOut;  // -- Section 3 - Synchronization -------------------------------------  else if (strVariable == "Delay Queries" && Boolean.TryParse (strValue' out blnOut))  	synDelayQueries = blnOut;  else if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Query Password")  	ts3QueryPassword = strValue;  else if (strVariable == "Query Nickname")  	ts3QueryNickname = strValue;  else if (strVariable == "Staging Channel Name")  	ts3StgChannelName = strValue;  else if (strVariable == "Enable Dropoff Channel" && Boolean.TryParse (strValue' out blnOut))  	ts3EnableDropoff = blnOut;  else if (strVariable == "Dropoff Channel Name")  	ts3DropoffChannelName = strValue;  else if (strVariable == "Pickup Channel Names")  	ts3PckChannelNames = CPluginVariable.DecodeStringArray (strValue);  // -- Section 2 - Channels --------------------------------------------  else if (strVariable == "Password")  	chnPassword = strValue.Trim ();  else if (strVariable == "Team Names")  	chnTeamNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Squad Names")  	chnSquadNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Remove When Empty" && Boolean.TryParse (strValue' out blnOut))  	chnRemoveOnEmpty = blnOut;  // -- Section 3 - Synchronization -------------------------------------  else if (strVariable == "Delay Queries" && Boolean.TryParse (strValue' out blnOut))  	synDelayQueries = blnOut;  else if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Query Password")  	ts3QueryPassword = strValue;  else if (strVariable == "Query Nickname")  	ts3QueryNickname = strValue;  else if (strVariable == "Staging Channel Name")  	ts3StgChannelName = strValue;  else if (strVariable == "Enable Dropoff Channel" && Boolean.TryParse (strValue' out blnOut))  	ts3EnableDropoff = blnOut;  else if (strVariable == "Dropoff Channel Name")  	ts3DropoffChannelName = strValue;  else if (strVariable == "Pickup Channel Names")  	ts3PckChannelNames = CPluginVariable.DecodeStringArray (strValue);  // -- Section 2 - Channels --------------------------------------------  else if (strVariable == "Password")  	chnPassword = strValue.Trim ();  else if (strVariable == "Team Names")  	chnTeamNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Squad Names")  	chnSquadNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Remove When Empty" && Boolean.TryParse (strValue' out blnOut))  	chnRemoveOnEmpty = blnOut;  // -- Section 3 - Synchronization -------------------------------------  else if (strVariable == "Delay Queries" && Boolean.TryParse (strValue' out blnOut))  	synDelayQueries = blnOut;  else if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Query Password")  	ts3QueryPassword = strValue;  else if (strVariable == "Query Nickname")  	ts3QueryNickname = strValue;  else if (strVariable == "Staging Channel Name")  	ts3StgChannelName = strValue;  else if (strVariable == "Enable Dropoff Channel" && Boolean.TryParse (strValue' out blnOut))  	ts3EnableDropoff = blnOut;  else if (strVariable == "Dropoff Channel Name")  	ts3DropoffChannelName = strValue;  else if (strVariable == "Pickup Channel Names")  	ts3PckChannelNames = CPluginVariable.DecodeStringArray (strValue);  // -- Section 2 - Channels --------------------------------------------  else if (strVariable == "Password")  	chnPassword = strValue.Trim ();  else if (strVariable == "Team Names")  	chnTeamNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Squad Names")  	chnSquadNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Remove When Empty" && Boolean.TryParse (strValue' out blnOut))  	chnRemoveOnEmpty = blnOut;  // -- Section 3 - Synchronization -------------------------------------  else if (strVariable == "Delay Queries" && Boolean.TryParse (strValue' out blnOut))  	synDelayQueries = blnOut;  else if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Query Password")  	ts3QueryPassword = strValue;  else if (strVariable == "Query Nickname")  	ts3QueryNickname = strValue;  else if (strVariable == "Staging Channel Name")  	ts3StgChannelName = strValue;  else if (strVariable == "Enable Dropoff Channel" && Boolean.TryParse (strValue' out blnOut))  	ts3EnableDropoff = blnOut;  else if (strVariable == "Dropoff Channel Name")  	ts3DropoffChannelName = strValue;  else if (strVariable == "Pickup Channel Names")  	ts3PckChannelNames = CPluginVariable.DecodeStringArray (strValue);  // -- Section 2 - Channels --------------------------------------------  else if (strVariable == "Password")  	chnPassword = strValue.Trim ();  else if (strVariable == "Team Names")  	chnTeamNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Squad Names")  	chnSquadNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Remove When Empty" && Boolean.TryParse (strValue' out blnOut))  	chnRemoveOnEmpty = blnOut;  // -- Section 3 - Synchronization -------------------------------------  else if (strVariable == "Delay Queries" && Boolean.TryParse (strValue' out blnOut))  	synDelayQueries = blnOut;  else if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Query Password")  	ts3QueryPassword = strValue;  else if (strVariable == "Query Nickname")  	ts3QueryNickname = strValue;  else if (strVariable == "Staging Channel Name")  	ts3StgChannelName = strValue;  else if (strVariable == "Enable Dropoff Channel" && Boolean.TryParse (strValue' out blnOut))  	ts3EnableDropoff = blnOut;  else if (strVariable == "Dropoff Channel Name")  	ts3DropoffChannelName = strValue;  else if (strVariable == "Pickup Channel Names")  	ts3PckChannelNames = CPluginVariable.DecodeStringArray (strValue);  // -- Section 2 - Channels --------------------------------------------  else if (strVariable == "Password")  	chnPassword = strValue.Trim ();  else if (strVariable == "Team Names")  	chnTeamNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Squad Names")  	chnSquadNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Remove When Empty" && Boolean.TryParse (strValue' out blnOut))  	chnRemoveOnEmpty = blnOut;  // -- Section 3 - Synchronization -------------------------------------  else if (strVariable == "Delay Queries" && Boolean.TryParse (strValue' out blnOut))  	synDelayQueries = blnOut;  else if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Query Password")  	ts3QueryPassword = strValue;  else if (strVariable == "Query Nickname")  	ts3QueryNickname = strValue;  else if (strVariable == "Staging Channel Name")  	ts3StgChannelName = strValue;  else if (strVariable == "Enable Dropoff Channel" && Boolean.TryParse (strValue' out blnOut))  	ts3EnableDropoff = blnOut;  else if (strVariable == "Dropoff Channel Name")  	ts3DropoffChannelName = strValue;  else if (strVariable == "Pickup Channel Names")  	ts3PckChannelNames = CPluginVariable.DecodeStringArray (strValue);  // -- Section 2 - Channels --------------------------------------------  else if (strVariable == "Password")  	chnPassword = strValue.Trim ();  else if (strVariable == "Team Names")  	chnTeamNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Squad Names")  	chnSquadNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Remove When Empty" && Boolean.TryParse (strValue' out blnOut))  	chnRemoveOnEmpty = blnOut;  // -- Section 3 - Synchronization -------------------------------------  else if (strVariable == "Delay Queries" && Boolean.TryParse (strValue' out blnOut))  	synDelayQueries = blnOut;  else if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Query Password")  	ts3QueryPassword = strValue;  else if (strVariable == "Query Nickname")  	ts3QueryNickname = strValue;  else if (strVariable == "Staging Channel Name")  	ts3StgChannelName = strValue;  else if (strVariable == "Enable Dropoff Channel" && Boolean.TryParse (strValue' out blnOut))  	ts3EnableDropoff = blnOut;  else if (strVariable == "Dropoff Channel Name")  	ts3DropoffChannelName = strValue;  else if (strVariable == "Pickup Channel Names")  	ts3PckChannelNames = CPluginVariable.DecodeStringArray (strValue);  // -- Section 2 - Channels --------------------------------------------  else if (strVariable == "Password")  	chnPassword = strValue.Trim ();  else if (strVariable == "Team Names")  	chnTeamNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Squad Names")  	chnSquadNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Remove When Empty" && Boolean.TryParse (strValue' out blnOut))  	chnRemoveOnEmpty = blnOut;  // -- Section 3 - Synchronization -------------------------------------  else if (strVariable == "Delay Queries" && Boolean.TryParse (strValue' out blnOut))  	synDelayQueries = blnOut;  else if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Query Password")  	ts3QueryPassword = strValue;  else if (strVariable == "Query Nickname")  	ts3QueryNickname = strValue;  else if (strVariable == "Staging Channel Name")  	ts3StgChannelName = strValue;  else if (strVariable == "Enable Dropoff Channel" && Boolean.TryParse (strValue' out blnOut))  	ts3EnableDropoff = blnOut;  else if (strVariable == "Dropoff Channel Name")  	ts3DropoffChannelName = strValue;  else if (strVariable == "Pickup Channel Names")  	ts3PckChannelNames = CPluginVariable.DecodeStringArray (strValue);  // -- Section 2 - Channels --------------------------------------------  else if (strVariable == "Password")  	chnPassword = strValue.Trim ();  else if (strVariable == "Team Names")  	chnTeamNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Squad Names")  	chnSquadNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Remove When Empty" && Boolean.TryParse (strValue' out blnOut))  	chnRemoveOnEmpty = blnOut;  // -- Section 3 - Synchronization -------------------------------------  else if (strVariable == "Delay Queries" && Boolean.TryParse (strValue' out blnOut))  	synDelayQueries = blnOut;  else if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Query Password")  	ts3QueryPassword = strValue;  else if (strVariable == "Query Nickname")  	ts3QueryNickname = strValue;  else if (strVariable == "Staging Channel Name")  	ts3StgChannelName = strValue;  else if (strVariable == "Enable Dropoff Channel" && Boolean.TryParse (strValue' out blnOut))  	ts3EnableDropoff = blnOut;  else if (strVariable == "Dropoff Channel Name")  	ts3DropoffChannelName = strValue;  else if (strVariable == "Pickup Channel Names")  	ts3PckChannelNames = CPluginVariable.DecodeStringArray (strValue);  // -- Section 2 - Channels --------------------------------------------  else if (strVariable == "Password")  	chnPassword = strValue.Trim ();  else if (strVariable == "Team Names")  	chnTeamNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Squad Names")  	chnSquadNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Remove When Empty" && Boolean.TryParse (strValue' out blnOut))  	chnRemoveOnEmpty = blnOut;  // -- Section 3 - Synchronization -------------------------------------  else if (strVariable == "Delay Queries" && Boolean.TryParse (strValue' out blnOut))  	synDelayQueries = blnOut;  else if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Query Nickname")  	ts3QueryNickname = strValue;  else if (strVariable == "Staging Channel Name")  	ts3StgChannelName = strValue;  else if (strVariable == "Enable Dropoff Channel" && Boolean.TryParse (strValue' out blnOut))  	ts3EnableDropoff = blnOut;  else if (strVariable == "Dropoff Channel Name")  	ts3DropoffChannelName = strValue;  else if (strVariable == "Pickup Channel Names")  	ts3PckChannelNames = CPluginVariable.DecodeStringArray (strValue);  // -- Section 2 - Channels --------------------------------------------  else if (strVariable == "Password")  	chnPassword = strValue.Trim ();  else if (strVariable == "Team Names")  	chnTeamNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Squad Names")  	chnSquadNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Remove When Empty" && Boolean.TryParse (strValue' out blnOut))  	chnRemoveOnEmpty = blnOut;  // -- Section 3 - Synchronization -------------------------------------  else if (strVariable == "Delay Queries" && Boolean.TryParse (strValue' out blnOut))  	synDelayQueries = blnOut;  else if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Query Nickname")  	ts3QueryNickname = strValue;  else if (strVariable == "Staging Channel Name")  	ts3StgChannelName = strValue;  else if (strVariable == "Enable Dropoff Channel" && Boolean.TryParse (strValue' out blnOut))  	ts3EnableDropoff = blnOut;  else if (strVariable == "Dropoff Channel Name")  	ts3DropoffChannelName = strValue;  else if (strVariable == "Pickup Channel Names")  	ts3PckChannelNames = CPluginVariable.DecodeStringArray (strValue);  // -- Section 2 - Channels --------------------------------------------  else if (strVariable == "Password")  	chnPassword = strValue.Trim ();  else if (strVariable == "Team Names")  	chnTeamNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Squad Names")  	chnSquadNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Remove When Empty" && Boolean.TryParse (strValue' out blnOut))  	chnRemoveOnEmpty = blnOut;  // -- Section 3 - Synchronization -------------------------------------  else if (strVariable == "Delay Queries" && Boolean.TryParse (strValue' out blnOut))  	synDelayQueries = blnOut;  else if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Query Nickname")  	ts3QueryNickname = strValue;  else if (strVariable == "Staging Channel Name")  	ts3StgChannelName = strValue;  else if (strVariable == "Enable Dropoff Channel" && Boolean.TryParse (strValue' out blnOut))  	ts3EnableDropoff = blnOut;  else if (strVariable == "Dropoff Channel Name")  	ts3DropoffChannelName = strValue;  else if (strVariable == "Pickup Channel Names")  	ts3PckChannelNames = CPluginVariable.DecodeStringArray (strValue);  // -- Section 2 - Channels --------------------------------------------  else if (strVariable == "Password")  	chnPassword = strValue.Trim ();  else if (strVariable == "Team Names")  	chnTeamNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Squad Names")  	chnSquadNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Remove When Empty" && Boolean.TryParse (strValue' out blnOut))  	chnRemoveOnEmpty = blnOut;  // -- Section 3 - Synchronization -------------------------------------  else if (strVariable == "Delay Queries" && Boolean.TryParse (strValue' out blnOut))  	synDelayQueries = blnOut;  else if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Query Nickname")  	ts3QueryNickname = strValue;  else if (strVariable == "Staging Channel Name")  	ts3StgChannelName = strValue;  else if (strVariable == "Enable Dropoff Channel" && Boolean.TryParse (strValue' out blnOut))  	ts3EnableDropoff = blnOut;  else if (strVariable == "Dropoff Channel Name")  	ts3DropoffChannelName = strValue;  else if (strVariable == "Pickup Channel Names")  	ts3PckChannelNames = CPluginVariable.DecodeStringArray (strValue);  // -- Section 2 - Channels --------------------------------------------  else if (strVariable == "Password")  	chnPassword = strValue.Trim ();  else if (strVariable == "Team Names")  	chnTeamNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Squad Names")  	chnSquadNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Remove When Empty" && Boolean.TryParse (strValue' out blnOut))  	chnRemoveOnEmpty = blnOut;  // -- Section 3 - Synchronization -------------------------------------  else if (strVariable == "Delay Queries" && Boolean.TryParse (strValue' out blnOut))  	synDelayQueries = blnOut;  else if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Query Nickname")  	ts3QueryNickname = strValue;  else if (strVariable == "Staging Channel Name")  	ts3StgChannelName = strValue;  else if (strVariable == "Enable Dropoff Channel" && Boolean.TryParse (strValue' out blnOut))  	ts3EnableDropoff = blnOut;  else if (strVariable == "Dropoff Channel Name")  	ts3DropoffChannelName = strValue;  else if (strVariable == "Pickup Channel Names")  	ts3PckChannelNames = CPluginVariable.DecodeStringArray (strValue);  // -- Section 2 - Channels --------------------------------------------  else if (strVariable == "Password")  	chnPassword = strValue.Trim ();  else if (strVariable == "Team Names")  	chnTeamNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Squad Names")  	chnSquadNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Remove When Empty" && Boolean.TryParse (strValue' out blnOut))  	chnRemoveOnEmpty = blnOut;  // -- Section 3 - Synchronization -------------------------------------  else if (strVariable == "Delay Queries" && Boolean.TryParse (strValue' out blnOut))  	synDelayQueries = blnOut;  else if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Query Nickname")  	ts3QueryNickname = strValue;  else if (strVariable == "Staging Channel Name")  	ts3StgChannelName = strValue;  else if (strVariable == "Enable Dropoff Channel" && Boolean.TryParse (strValue' out blnOut))  	ts3EnableDropoff = blnOut;  else if (strVariable == "Dropoff Channel Name")  	ts3DropoffChannelName = strValue;  else if (strVariable == "Pickup Channel Names")  	ts3PckChannelNames = CPluginVariable.DecodeStringArray (strValue);  // -- Section 2 - Channels --------------------------------------------  else if (strVariable == "Password")  	chnPassword = strValue.Trim ();  else if (strVariable == "Team Names")  	chnTeamNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Squad Names")  	chnSquadNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Remove When Empty" && Boolean.TryParse (strValue' out blnOut))  	chnRemoveOnEmpty = blnOut;  // -- Section 3 - Synchronization -------------------------------------  else if (strVariable == "Delay Queries" && Boolean.TryParse (strValue' out blnOut))  	synDelayQueries = blnOut;  else if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Query Nickname")  	ts3QueryNickname = strValue;  else if (strVariable == "Staging Channel Name")  	ts3StgChannelName = strValue;  else if (strVariable == "Enable Dropoff Channel" && Boolean.TryParse (strValue' out blnOut))  	ts3EnableDropoff = blnOut;  else if (strVariable == "Dropoff Channel Name")  	ts3DropoffChannelName = strValue;  else if (strVariable == "Pickup Channel Names")  	ts3PckChannelNames = CPluginVariable.DecodeStringArray (strValue);  // -- Section 2 - Channels --------------------------------------------  else if (strVariable == "Password")  	chnPassword = strValue.Trim ();  else if (strVariable == "Team Names")  	chnTeamNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Squad Names")  	chnSquadNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Remove When Empty" && Boolean.TryParse (strValue' out blnOut))  	chnRemoveOnEmpty = blnOut;  // -- Section 3 - Synchronization -------------------------------------  else if (strVariable == "Delay Queries" && Boolean.TryParse (strValue' out blnOut))  	synDelayQueries = blnOut;  else if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Query Nickname")  	ts3QueryNickname = strValue;  else if (strVariable == "Staging Channel Name")  	ts3StgChannelName = strValue;  else if (strVariable == "Enable Dropoff Channel" && Boolean.TryParse (strValue' out blnOut))  	ts3EnableDropoff = blnOut;  else if (strVariable == "Dropoff Channel Name")  	ts3DropoffChannelName = strValue;  else if (strVariable == "Pickup Channel Names")  	ts3PckChannelNames = CPluginVariable.DecodeStringArray (strValue);  // -- Section 2 - Channels --------------------------------------------  else if (strVariable == "Password")  	chnPassword = strValue.Trim ();  else if (strVariable == "Team Names")  	chnTeamNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Squad Names")  	chnSquadNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Remove When Empty" && Boolean.TryParse (strValue' out blnOut))  	chnRemoveOnEmpty = blnOut;  // -- Section 3 - Synchronization -------------------------------------  else if (strVariable == "Delay Queries" && Boolean.TryParse (strValue' out blnOut))  	synDelayQueries = blnOut;  else if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Query Nickname")  	ts3QueryNickname = strValue;  else if (strVariable == "Staging Channel Name")  	ts3StgChannelName = strValue;  else if (strVariable == "Enable Dropoff Channel" && Boolean.TryParse (strValue' out blnOut))  	ts3EnableDropoff = blnOut;  else if (strVariable == "Dropoff Channel Name")  	ts3DropoffChannelName = strValue;  else if (strVariable == "Pickup Channel Names")  	ts3PckChannelNames = CPluginVariable.DecodeStringArray (strValue);  // -- Section 2 - Channels --------------------------------------------  else if (strVariable == "Password")  	chnPassword = strValue.Trim ();  else if (strVariable == "Team Names")  	chnTeamNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Squad Names")  	chnSquadNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Remove When Empty" && Boolean.TryParse (strValue' out blnOut))  	chnRemoveOnEmpty = blnOut;  // -- Section 3 - Synchronization -------------------------------------  else if (strVariable == "Delay Queries" && Boolean.TryParse (strValue' out blnOut))  	synDelayQueries = blnOut;  else if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Query Nickname")  	ts3QueryNickname = strValue;  else if (strVariable == "Staging Channel Name")  	ts3StgChannelName = strValue;  else if (strVariable == "Enable Dropoff Channel" && Boolean.TryParse (strValue' out blnOut))  	ts3EnableDropoff = blnOut;  else if (strVariable == "Dropoff Channel Name")  	ts3DropoffChannelName = strValue;  else if (strVariable == "Pickup Channel Names")  	ts3PckChannelNames = CPluginVariable.DecodeStringArray (strValue);  // -- Section 2 - Channels --------------------------------------------  else if (strVariable == "Password")  	chnPassword = strValue.Trim ();  else if (strVariable == "Team Names")  	chnTeamNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Squad Names")  	chnSquadNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Remove When Empty" && Boolean.TryParse (strValue' out blnOut))  	chnRemoveOnEmpty = blnOut;  // -- Section 3 - Synchronization -------------------------------------  else if (strVariable == "Delay Queries" && Boolean.TryParse (strValue' out blnOut))  	synDelayQueries = blnOut;  else if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Query Nickname")  	ts3QueryNickname = strValue;  else if (strVariable == "Staging Channel Name")  	ts3StgChannelName = strValue;  else if (strVariable == "Enable Dropoff Channel" && Boolean.TryParse (strValue' out blnOut))  	ts3EnableDropoff = blnOut;  else if (strVariable == "Dropoff Channel Name")  	ts3DropoffChannelName = strValue;  else if (strVariable == "Pickup Channel Names")  	ts3PckChannelNames = CPluginVariable.DecodeStringArray (strValue);  // -- Section 2 - Channels --------------------------------------------  else if (strVariable == "Password")  	chnPassword = strValue.Trim ();  else if (strVariable == "Team Names")  	chnTeamNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Squad Names")  	chnSquadNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Remove When Empty" && Boolean.TryParse (strValue' out blnOut))  	chnRemoveOnEmpty = blnOut;  // -- Section 3 - Synchronization -------------------------------------  else if (strVariable == "Delay Queries" && Boolean.TryParse (strValue' out blnOut))  	synDelayQueries = blnOut;  else if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Query Nickname")  	ts3QueryNickname = strValue;  else if (strVariable == "Staging Channel Name")  	ts3StgChannelName = strValue;  else if (strVariable == "Enable Dropoff Channel" && Boolean.TryParse (strValue' out blnOut))  	ts3EnableDropoff = blnOut;  else if (strVariable == "Dropoff Channel Name")  	ts3DropoffChannelName = strValue;  else if (strVariable == "Pickup Channel Names")  	ts3PckChannelNames = CPluginVariable.DecodeStringArray (strValue);  // -- Section 2 - Channels --------------------------------------------  else if (strVariable == "Password")  	chnPassword = strValue.Trim ();  else if (strVariable == "Team Names")  	chnTeamNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Squad Names")  	chnSquadNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Remove When Empty" && Boolean.TryParse (strValue' out blnOut))  	chnRemoveOnEmpty = blnOut;  // -- Section 3 - Synchronization -------------------------------------  else if (strVariable == "Delay Queries" && Boolean.TryParse (strValue' out blnOut))  	synDelayQueries = blnOut;  else if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Staging Channel Name")  	ts3StgChannelName = strValue;  else if (strVariable == "Enable Dropoff Channel" && Boolean.TryParse (strValue' out blnOut))  	ts3EnableDropoff = blnOut;  else if (strVariable == "Dropoff Channel Name")  	ts3DropoffChannelName = strValue;  else if (strVariable == "Pickup Channel Names")  	ts3PckChannelNames = CPluginVariable.DecodeStringArray (strValue);  // -- Section 2 - Channels --------------------------------------------  else if (strVariable == "Password")  	chnPassword = strValue.Trim ();  else if (strVariable == "Team Names")  	chnTeamNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Squad Names")  	chnSquadNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Remove When Empty" && Boolean.TryParse (strValue' out blnOut))  	chnRemoveOnEmpty = blnOut;  // -- Section 3 - Synchronization -------------------------------------  else if (strVariable == "Delay Queries" && Boolean.TryParse (strValue' out blnOut))  	synDelayQueries = blnOut;  else if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Staging Channel Name")  	ts3StgChannelName = strValue;  else if (strVariable == "Enable Dropoff Channel" && Boolean.TryParse (strValue' out blnOut))  	ts3EnableDropoff = blnOut;  else if (strVariable == "Dropoff Channel Name")  	ts3DropoffChannelName = strValue;  else if (strVariable == "Pickup Channel Names")  	ts3PckChannelNames = CPluginVariable.DecodeStringArray (strValue);  // -- Section 2 - Channels --------------------------------------------  else if (strVariable == "Password")  	chnPassword = strValue.Trim ();  else if (strVariable == "Team Names")  	chnTeamNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Squad Names")  	chnSquadNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Remove When Empty" && Boolean.TryParse (strValue' out blnOut))  	chnRemoveOnEmpty = blnOut;  // -- Section 3 - Synchronization -------------------------------------  else if (strVariable == "Delay Queries" && Boolean.TryParse (strValue' out blnOut))  	synDelayQueries = blnOut;  else if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Staging Channel Name")  	ts3StgChannelName = strValue;  else if (strVariable == "Enable Dropoff Channel" && Boolean.TryParse (strValue' out blnOut))  	ts3EnableDropoff = blnOut;  else if (strVariable == "Dropoff Channel Name")  	ts3DropoffChannelName = strValue;  else if (strVariable == "Pickup Channel Names")  	ts3PckChannelNames = CPluginVariable.DecodeStringArray (strValue);  // -- Section 2 - Channels --------------------------------------------  else if (strVariable == "Password")  	chnPassword = strValue.Trim ();  else if (strVariable == "Team Names")  	chnTeamNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Squad Names")  	chnSquadNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Remove When Empty" && Boolean.TryParse (strValue' out blnOut))  	chnRemoveOnEmpty = blnOut;  // -- Section 3 - Synchronization -------------------------------------  else if (strVariable == "Delay Queries" && Boolean.TryParse (strValue' out blnOut))  	synDelayQueries = blnOut;  else if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Staging Channel Name")  	ts3StgChannelName = strValue;  else if (strVariable == "Enable Dropoff Channel" && Boolean.TryParse (strValue' out blnOut))  	ts3EnableDropoff = blnOut;  else if (strVariable == "Dropoff Channel Name")  	ts3DropoffChannelName = strValue;  else if (strVariable == "Pickup Channel Names")  	ts3PckChannelNames = CPluginVariable.DecodeStringArray (strValue);  // -- Section 2 - Channels --------------------------------------------  else if (strVariable == "Password")  	chnPassword = strValue.Trim ();  else if (strVariable == "Team Names")  	chnTeamNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Squad Names")  	chnSquadNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Remove When Empty" && Boolean.TryParse (strValue' out blnOut))  	chnRemoveOnEmpty = blnOut;  // -- Section 3 - Synchronization -------------------------------------  else if (strVariable == "Delay Queries" && Boolean.TryParse (strValue' out blnOut))  	synDelayQueries = blnOut;  else if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Staging Channel Name")  	ts3StgChannelName = strValue;  else if (strVariable == "Enable Dropoff Channel" && Boolean.TryParse (strValue' out blnOut))  	ts3EnableDropoff = blnOut;  else if (strVariable == "Dropoff Channel Name")  	ts3DropoffChannelName = strValue;  else if (strVariable == "Pickup Channel Names")  	ts3PckChannelNames = CPluginVariable.DecodeStringArray (strValue);  // -- Section 2 - Channels --------------------------------------------  else if (strVariable == "Password")  	chnPassword = strValue.Trim ();  else if (strVariable == "Team Names")  	chnTeamNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Squad Names")  	chnSquadNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Remove When Empty" && Boolean.TryParse (strValue' out blnOut))  	chnRemoveOnEmpty = blnOut;  // -- Section 3 - Synchronization -------------------------------------  else if (strVariable == "Delay Queries" && Boolean.TryParse (strValue' out blnOut))  	synDelayQueries = blnOut;  else if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Staging Channel Name")  	ts3StgChannelName = strValue;  else if (strVariable == "Enable Dropoff Channel" && Boolean.TryParse (strValue' out blnOut))  	ts3EnableDropoff = blnOut;  else if (strVariable == "Dropoff Channel Name")  	ts3DropoffChannelName = strValue;  else if (strVariable == "Pickup Channel Names")  	ts3PckChannelNames = CPluginVariable.DecodeStringArray (strValue);  // -- Section 2 - Channels --------------------------------------------  else if (strVariable == "Password")  	chnPassword = strValue.Trim ();  else if (strVariable == "Team Names")  	chnTeamNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Squad Names")  	chnSquadNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Remove When Empty" && Boolean.TryParse (strValue' out blnOut))  	chnRemoveOnEmpty = blnOut;  // -- Section 3 - Synchronization -------------------------------------  else if (strVariable == "Delay Queries" && Boolean.TryParse (strValue' out blnOut))  	synDelayQueries = blnOut;  else if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Staging Channel Name")  	ts3StgChannelName = strValue;  else if (strVariable == "Enable Dropoff Channel" && Boolean.TryParse (strValue' out blnOut))  	ts3EnableDropoff = blnOut;  else if (strVariable == "Dropoff Channel Name")  	ts3DropoffChannelName = strValue;  else if (strVariable == "Pickup Channel Names")  	ts3PckChannelNames = CPluginVariable.DecodeStringArray (strValue);  // -- Section 2 - Channels --------------------------------------------  else if (strVariable == "Password")  	chnPassword = strValue.Trim ();  else if (strVariable == "Team Names")  	chnTeamNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Squad Names")  	chnSquadNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Remove When Empty" && Boolean.TryParse (strValue' out blnOut))  	chnRemoveOnEmpty = blnOut;  // -- Section 3 - Synchronization -------------------------------------  else if (strVariable == "Delay Queries" && Boolean.TryParse (strValue' out blnOut))  	synDelayQueries = blnOut;  else if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Staging Channel Name")  	ts3StgChannelName = strValue;  else if (strVariable == "Enable Dropoff Channel" && Boolean.TryParse (strValue' out blnOut))  	ts3EnableDropoff = blnOut;  else if (strVariable == "Dropoff Channel Name")  	ts3DropoffChannelName = strValue;  else if (strVariable == "Pickup Channel Names")  	ts3PckChannelNames = CPluginVariable.DecodeStringArray (strValue);  // -- Section 2 - Channels --------------------------------------------  else if (strVariable == "Password")  	chnPassword = strValue.Trim ();  else if (strVariable == "Team Names")  	chnTeamNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Squad Names")  	chnSquadNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Remove When Empty" && Boolean.TryParse (strValue' out blnOut))  	chnRemoveOnEmpty = blnOut;  // -- Section 3 - Synchronization -------------------------------------  else if (strVariable == "Delay Queries" && Boolean.TryParse (strValue' out blnOut))  	synDelayQueries = blnOut;  else if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Staging Channel Name")  	ts3StgChannelName = strValue;  else if (strVariable == "Enable Dropoff Channel" && Boolean.TryParse (strValue' out blnOut))  	ts3EnableDropoff = blnOut;  else if (strVariable == "Dropoff Channel Name")  	ts3DropoffChannelName = strValue;  else if (strVariable == "Pickup Channel Names")  	ts3PckChannelNames = CPluginVariable.DecodeStringArray (strValue);  // -- Section 2 - Channels --------------------------------------------  else if (strVariable == "Password")  	chnPassword = strValue.Trim ();  else if (strVariable == "Team Names")  	chnTeamNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Squad Names")  	chnSquadNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Remove When Empty" && Boolean.TryParse (strValue' out blnOut))  	chnRemoveOnEmpty = blnOut;  // -- Section 3 - Synchronization -------------------------------------  else if (strVariable == "Delay Queries" && Boolean.TryParse (strValue' out blnOut))  	synDelayQueries = blnOut;  else if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Staging Channel Name")  	ts3StgChannelName = strValue;  else if (strVariable == "Enable Dropoff Channel" && Boolean.TryParse (strValue' out blnOut))  	ts3EnableDropoff = blnOut;  else if (strVariable == "Dropoff Channel Name")  	ts3DropoffChannelName = strValue;  else if (strVariable == "Pickup Channel Names")  	ts3PckChannelNames = CPluginVariable.DecodeStringArray (strValue);  // -- Section 2 - Channels --------------------------------------------  else if (strVariable == "Password")  	chnPassword = strValue.Trim ();  else if (strVariable == "Team Names")  	chnTeamNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Squad Names")  	chnSquadNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Remove When Empty" && Boolean.TryParse (strValue' out blnOut))  	chnRemoveOnEmpty = blnOut;  // -- Section 3 - Synchronization -------------------------------------  else if (strVariable == "Delay Queries" && Boolean.TryParse (strValue' out blnOut))  	synDelayQueries = blnOut;  else if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Staging Channel Name")  	ts3StgChannelName = strValue;  else if (strVariable == "Enable Dropoff Channel" && Boolean.TryParse (strValue' out blnOut))  	ts3EnableDropoff = blnOut;  else if (strVariable == "Dropoff Channel Name")  	ts3DropoffChannelName = strValue;  else if (strVariable == "Pickup Channel Names")  	ts3PckChannelNames = CPluginVariable.DecodeStringArray (strValue);  // -- Section 2 - Channels --------------------------------------------  else if (strVariable == "Password")  	chnPassword = strValue.Trim ();  else if (strVariable == "Team Names")  	chnTeamNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Squad Names")  	chnSquadNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Remove When Empty" && Boolean.TryParse (strValue' out blnOut))  	chnRemoveOnEmpty = blnOut;  // -- Section 3 - Synchronization -------------------------------------  else if (strVariable == "Delay Queries" && Boolean.TryParse (strValue' out blnOut))  	synDelayQueries = blnOut;  else if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Staging Channel Name")  	ts3StgChannelName = strValue;  else if (strVariable == "Enable Dropoff Channel" && Boolean.TryParse (strValue' out blnOut))  	ts3EnableDropoff = blnOut;  else if (strVariable == "Dropoff Channel Name")  	ts3DropoffChannelName = strValue;  else if (strVariable == "Pickup Channel Names")  	ts3PckChannelNames = CPluginVariable.DecodeStringArray (strValue);  // -- Section 2 - Channels --------------------------------------------  else if (strVariable == "Password")  	chnPassword = strValue.Trim ();  else if (strVariable == "Team Names")  	chnTeamNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Squad Names")  	chnSquadNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Remove When Empty" && Boolean.TryParse (strValue' out blnOut))  	chnRemoveOnEmpty = blnOut;  // -- Section 3 - Synchronization -------------------------------------  else if (strVariable == "Delay Queries" && Boolean.TryParse (strValue' out blnOut))  	synDelayQueries = blnOut;  else if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Enable Dropoff Channel" && Boolean.TryParse (strValue' out blnOut))  	ts3EnableDropoff = blnOut;  else if (strVariable == "Dropoff Channel Name")  	ts3DropoffChannelName = strValue;  else if (strVariable == "Pickup Channel Names")  	ts3PckChannelNames = CPluginVariable.DecodeStringArray (strValue);  // -- Section 2 - Channels --------------------------------------------  else if (strVariable == "Password")  	chnPassword = strValue.Trim ();  else if (strVariable == "Team Names")  	chnTeamNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Squad Names")  	chnSquadNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Remove When Empty" && Boolean.TryParse (strValue' out blnOut))  	chnRemoveOnEmpty = blnOut;  // -- Section 3 - Synchronization -------------------------------------  else if (strVariable == "Delay Queries" && Boolean.TryParse (strValue' out blnOut))  	synDelayQueries = blnOut;  else if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Enable Dropoff Channel" && Boolean.TryParse (strValue' out blnOut))  	ts3EnableDropoff = blnOut;  else if (strVariable == "Dropoff Channel Name")  	ts3DropoffChannelName = strValue;  else if (strVariable == "Pickup Channel Names")  	ts3PckChannelNames = CPluginVariable.DecodeStringArray (strValue);  // -- Section 2 - Channels --------------------------------------------  else if (strVariable == "Password")  	chnPassword = strValue.Trim ();  else if (strVariable == "Team Names")  	chnTeamNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Squad Names")  	chnSquadNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Remove When Empty" && Boolean.TryParse (strValue' out blnOut))  	chnRemoveOnEmpty = blnOut;  // -- Section 3 - Synchronization -------------------------------------  else if (strVariable == "Delay Queries" && Boolean.TryParse (strValue' out blnOut))  	synDelayQueries = blnOut;  else if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Enable Dropoff Channel" && Boolean.TryParse (strValue' out blnOut))  	ts3EnableDropoff = blnOut;  else if (strVariable == "Dropoff Channel Name")  	ts3DropoffChannelName = strValue;  else if (strVariable == "Pickup Channel Names")  	ts3PckChannelNames = CPluginVariable.DecodeStringArray (strValue);  // -- Section 2 - Channels --------------------------------------------  else if (strVariable == "Password")  	chnPassword = strValue.Trim ();  else if (strVariable == "Team Names")  	chnTeamNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Squad Names")  	chnSquadNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Remove When Empty" && Boolean.TryParse (strValue' out blnOut))  	chnRemoveOnEmpty = blnOut;  // -- Section 3 - Synchronization -------------------------------------  else if (strVariable == "Delay Queries" && Boolean.TryParse (strValue' out blnOut))  	synDelayQueries = blnOut;  else if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Enable Dropoff Channel" && Boolean.TryParse (strValue' out blnOut))  	ts3EnableDropoff = blnOut;  else if (strVariable == "Dropoff Channel Name")  	ts3DropoffChannelName = strValue;  else if (strVariable == "Pickup Channel Names")  	ts3PckChannelNames = CPluginVariable.DecodeStringArray (strValue);  // -- Section 2 - Channels --------------------------------------------  else if (strVariable == "Password")  	chnPassword = strValue.Trim ();  else if (strVariable == "Team Names")  	chnTeamNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Squad Names")  	chnSquadNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Remove When Empty" && Boolean.TryParse (strValue' out blnOut))  	chnRemoveOnEmpty = blnOut;  // -- Section 3 - Synchronization -------------------------------------  else if (strVariable == "Delay Queries" && Boolean.TryParse (strValue' out blnOut))  	synDelayQueries = blnOut;  else if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Enable Dropoff Channel" && Boolean.TryParse (strValue' out blnOut))  	ts3EnableDropoff = blnOut;  else if (strVariable == "Dropoff Channel Name")  	ts3DropoffChannelName = strValue;  else if (strVariable == "Pickup Channel Names")  	ts3PckChannelNames = CPluginVariable.DecodeStringArray (strValue);  // -- Section 2 - Channels --------------------------------------------  else if (strVariable == "Password")  	chnPassword = strValue.Trim ();  else if (strVariable == "Team Names")  	chnTeamNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Squad Names")  	chnSquadNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Remove When Empty" && Boolean.TryParse (strValue' out blnOut))  	chnRemoveOnEmpty = blnOut;  // -- Section 3 - Synchronization -------------------------------------  else if (strVariable == "Delay Queries" && Boolean.TryParse (strValue' out blnOut))  	synDelayQueries = blnOut;  else if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Enable Dropoff Channel" && Boolean.TryParse (strValue' out blnOut))  	ts3EnableDropoff = blnOut;  else if (strVariable == "Dropoff Channel Name")  	ts3DropoffChannelName = strValue;  else if (strVariable == "Pickup Channel Names")  	ts3PckChannelNames = CPluginVariable.DecodeStringArray (strValue);  // -- Section 2 - Channels --------------------------------------------  else if (strVariable == "Password")  	chnPassword = strValue.Trim ();  else if (strVariable == "Team Names")  	chnTeamNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Squad Names")  	chnSquadNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Remove When Empty" && Boolean.TryParse (strValue' out blnOut))  	chnRemoveOnEmpty = blnOut;  // -- Section 3 - Synchronization -------------------------------------  else if (strVariable == "Delay Queries" && Boolean.TryParse (strValue' out blnOut))  	synDelayQueries = blnOut;  else if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Enable Dropoff Channel" && Boolean.TryParse (strValue' out blnOut))  	ts3EnableDropoff = blnOut;  else if (strVariable == "Dropoff Channel Name")  	ts3DropoffChannelName = strValue;  else if (strVariable == "Pickup Channel Names")  	ts3PckChannelNames = CPluginVariable.DecodeStringArray (strValue);  // -- Section 2 - Channels --------------------------------------------  else if (strVariable == "Password")  	chnPassword = strValue.Trim ();  else if (strVariable == "Team Names")  	chnTeamNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Squad Names")  	chnSquadNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Remove When Empty" && Boolean.TryParse (strValue' out blnOut))  	chnRemoveOnEmpty = blnOut;  // -- Section 3 - Synchronization -------------------------------------  else if (strVariable == "Delay Queries" && Boolean.TryParse (strValue' out blnOut))  	synDelayQueries = blnOut;  else if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Enable Dropoff Channel" && Boolean.TryParse (strValue' out blnOut))  	ts3EnableDropoff = blnOut;  else if (strVariable == "Dropoff Channel Name")  	ts3DropoffChannelName = strValue;  else if (strVariable == "Pickup Channel Names")  	ts3PckChannelNames = CPluginVariable.DecodeStringArray (strValue);  // -- Section 2 - Channels --------------------------------------------  else if (strVariable == "Password")  	chnPassword = strValue.Trim ();  else if (strVariable == "Team Names")  	chnTeamNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Squad Names")  	chnSquadNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Remove When Empty" && Boolean.TryParse (strValue' out blnOut))  	chnRemoveOnEmpty = blnOut;  // -- Section 3 - Synchronization -------------------------------------  else if (strVariable == "Delay Queries" && Boolean.TryParse (strValue' out blnOut))  	synDelayQueries = blnOut;  else if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Enable Dropoff Channel" && Boolean.TryParse (strValue' out blnOut))  	ts3EnableDropoff = blnOut;  else if (strVariable == "Dropoff Channel Name")  	ts3DropoffChannelName = strValue;  else if (strVariable == "Pickup Channel Names")  	ts3PckChannelNames = CPluginVariable.DecodeStringArray (strValue);  // -- Section 2 - Channels --------------------------------------------  else if (strVariable == "Password")  	chnPassword = strValue.Trim ();  else if (strVariable == "Team Names")  	chnTeamNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Squad Names")  	chnSquadNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Remove When Empty" && Boolean.TryParse (strValue' out blnOut))  	chnRemoveOnEmpty = blnOut;  // -- Section 3 - Synchronization -------------------------------------  else if (strVariable == "Delay Queries" && Boolean.TryParse (strValue' out blnOut))  	synDelayQueries = blnOut;  else if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Enable Dropoff Channel" && Boolean.TryParse (strValue' out blnOut))  	ts3EnableDropoff = blnOut;  else if (strVariable == "Dropoff Channel Name")  	ts3DropoffChannelName = strValue;  else if (strVariable == "Pickup Channel Names")  	ts3PckChannelNames = CPluginVariable.DecodeStringArray (strValue);  // -- Section 2 - Channels --------------------------------------------  else if (strVariable == "Password")  	chnPassword = strValue.Trim ();  else if (strVariable == "Team Names")  	chnTeamNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Squad Names")  	chnSquadNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Remove When Empty" && Boolean.TryParse (strValue' out blnOut))  	chnRemoveOnEmpty = blnOut;  // -- Section 3 - Synchronization -------------------------------------  else if (strVariable == "Delay Queries" && Boolean.TryParse (strValue' out blnOut))  	synDelayQueries = blnOut;  else if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Enable Dropoff Channel" && Boolean.TryParse (strValue' out blnOut))  	ts3EnableDropoff = blnOut;  else if (strVariable == "Dropoff Channel Name")  	ts3DropoffChannelName = strValue;  else if (strVariable == "Pickup Channel Names")  	ts3PckChannelNames = CPluginVariable.DecodeStringArray (strValue);  // -- Section 2 - Channels --------------------------------------------  else if (strVariable == "Password")  	chnPassword = strValue.Trim ();  else if (strVariable == "Team Names")  	chnTeamNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Squad Names")  	chnSquadNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Remove When Empty" && Boolean.TryParse (strValue' out blnOut))  	chnRemoveOnEmpty = blnOut;  // -- Section 3 - Synchronization -------------------------------------  else if (strVariable == "Delay Queries" && Boolean.TryParse (strValue' out blnOut))  	synDelayQueries = blnOut;  else if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Enable Dropoff Channel" && Boolean.TryParse (strValue' out blnOut))  	ts3EnableDropoff = blnOut;  else if (strVariable == "Dropoff Channel Name")  	ts3DropoffChannelName = strValue;  else if (strVariable == "Pickup Channel Names")  	ts3PckChannelNames = CPluginVariable.DecodeStringArray (strValue);  // -- Section 2 - Channels --------------------------------------------  else if (strVariable == "Password")  	chnPassword = strValue.Trim ();  else if (strVariable == "Team Names")  	chnTeamNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Squad Names")  	chnSquadNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Remove When Empty" && Boolean.TryParse (strValue' out blnOut))  	chnRemoveOnEmpty = blnOut;  // -- Section 3 - Synchronization -------------------------------------  else if (strVariable == "Delay Queries" && Boolean.TryParse (strValue' out blnOut))  	synDelayQueries = blnOut;  else if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Dropoff Channel Name")  	ts3DropoffChannelName = strValue;  else if (strVariable == "Pickup Channel Names")  	ts3PckChannelNames = CPluginVariable.DecodeStringArray (strValue);  // -- Section 2 - Channels --------------------------------------------  else if (strVariable == "Password")  	chnPassword = strValue.Trim ();  else if (strVariable == "Team Names")  	chnTeamNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Squad Names")  	chnSquadNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Remove When Empty" && Boolean.TryParse (strValue' out blnOut))  	chnRemoveOnEmpty = blnOut;  // -- Section 3 - Synchronization -------------------------------------  else if (strVariable == "Delay Queries" && Boolean.TryParse (strValue' out blnOut))  	synDelayQueries = blnOut;  else if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Dropoff Channel Name")  	ts3DropoffChannelName = strValue;  else if (strVariable == "Pickup Channel Names")  	ts3PckChannelNames = CPluginVariable.DecodeStringArray (strValue);  // -- Section 2 - Channels --------------------------------------------  else if (strVariable == "Password")  	chnPassword = strValue.Trim ();  else if (strVariable == "Team Names")  	chnTeamNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Squad Names")  	chnSquadNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Remove When Empty" && Boolean.TryParse (strValue' out blnOut))  	chnRemoveOnEmpty = blnOut;  // -- Section 3 - Synchronization -------------------------------------  else if (strVariable == "Delay Queries" && Boolean.TryParse (strValue' out blnOut))  	synDelayQueries = blnOut;  else if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Dropoff Channel Name")  	ts3DropoffChannelName = strValue;  else if (strVariable == "Pickup Channel Names")  	ts3PckChannelNames = CPluginVariable.DecodeStringArray (strValue);  // -- Section 2 - Channels --------------------------------------------  else if (strVariable == "Password")  	chnPassword = strValue.Trim ();  else if (strVariable == "Team Names")  	chnTeamNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Squad Names")  	chnSquadNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Remove When Empty" && Boolean.TryParse (strValue' out blnOut))  	chnRemoveOnEmpty = blnOut;  // -- Section 3 - Synchronization -------------------------------------  else if (strVariable == "Delay Queries" && Boolean.TryParse (strValue' out blnOut))  	synDelayQueries = blnOut;  else if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Dropoff Channel Name")  	ts3DropoffChannelName = strValue;  else if (strVariable == "Pickup Channel Names")  	ts3PckChannelNames = CPluginVariable.DecodeStringArray (strValue);  // -- Section 2 - Channels --------------------------------------------  else if (strVariable == "Password")  	chnPassword = strValue.Trim ();  else if (strVariable == "Team Names")  	chnTeamNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Squad Names")  	chnSquadNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Remove When Empty" && Boolean.TryParse (strValue' out blnOut))  	chnRemoveOnEmpty = blnOut;  // -- Section 3 - Synchronization -------------------------------------  else if (strVariable == "Delay Queries" && Boolean.TryParse (strValue' out blnOut))  	synDelayQueries = blnOut;  else if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Dropoff Channel Name")  	ts3DropoffChannelName = strValue;  else if (strVariable == "Pickup Channel Names")  	ts3PckChannelNames = CPluginVariable.DecodeStringArray (strValue);  // -- Section 2 - Channels --------------------------------------------  else if (strVariable == "Password")  	chnPassword = strValue.Trim ();  else if (strVariable == "Team Names")  	chnTeamNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Squad Names")  	chnSquadNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Remove When Empty" && Boolean.TryParse (strValue' out blnOut))  	chnRemoveOnEmpty = blnOut;  // -- Section 3 - Synchronization -------------------------------------  else if (strVariable == "Delay Queries" && Boolean.TryParse (strValue' out blnOut))  	synDelayQueries = blnOut;  else if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Dropoff Channel Name")  	ts3DropoffChannelName = strValue;  else if (strVariable == "Pickup Channel Names")  	ts3PckChannelNames = CPluginVariable.DecodeStringArray (strValue);  // -- Section 2 - Channels --------------------------------------------  else if (strVariable == "Password")  	chnPassword = strValue.Trim ();  else if (strVariable == "Team Names")  	chnTeamNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Squad Names")  	chnSquadNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Remove When Empty" && Boolean.TryParse (strValue' out blnOut))  	chnRemoveOnEmpty = blnOut;  // -- Section 3 - Synchronization -------------------------------------  else if (strVariable == "Delay Queries" && Boolean.TryParse (strValue' out blnOut))  	synDelayQueries = blnOut;  else if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Dropoff Channel Name")  	ts3DropoffChannelName = strValue;  else if (strVariable == "Pickup Channel Names")  	ts3PckChannelNames = CPluginVariable.DecodeStringArray (strValue);  // -- Section 2 - Channels --------------------------------------------  else if (strVariable == "Password")  	chnPassword = strValue.Trim ();  else if (strVariable == "Team Names")  	chnTeamNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Squad Names")  	chnSquadNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Remove When Empty" && Boolean.TryParse (strValue' out blnOut))  	chnRemoveOnEmpty = blnOut;  // -- Section 3 - Synchronization -------------------------------------  else if (strVariable == "Delay Queries" && Boolean.TryParse (strValue' out blnOut))  	synDelayQueries = blnOut;  else if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Dropoff Channel Name")  	ts3DropoffChannelName = strValue;  else if (strVariable == "Pickup Channel Names")  	ts3PckChannelNames = CPluginVariable.DecodeStringArray (strValue);  // -- Section 2 - Channels --------------------------------------------  else if (strVariable == "Password")  	chnPassword = strValue.Trim ();  else if (strVariable == "Team Names")  	chnTeamNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Squad Names")  	chnSquadNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Remove When Empty" && Boolean.TryParse (strValue' out blnOut))  	chnRemoveOnEmpty = blnOut;  // -- Section 3 - Synchronization -------------------------------------  else if (strVariable == "Delay Queries" && Boolean.TryParse (strValue' out blnOut))  	synDelayQueries = blnOut;  else if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Dropoff Channel Name")  	ts3DropoffChannelName = strValue;  else if (strVariable == "Pickup Channel Names")  	ts3PckChannelNames = CPluginVariable.DecodeStringArray (strValue);  // -- Section 2 - Channels --------------------------------------------  else if (strVariable == "Password")  	chnPassword = strValue.Trim ();  else if (strVariable == "Team Names")  	chnTeamNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Squad Names")  	chnSquadNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Remove When Empty" && Boolean.TryParse (strValue' out blnOut))  	chnRemoveOnEmpty = blnOut;  // -- Section 3 - Synchronization -------------------------------------  else if (strVariable == "Delay Queries" && Boolean.TryParse (strValue' out blnOut))  	synDelayQueries = blnOut;  else if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Dropoff Channel Name")  	ts3DropoffChannelName = strValue;  else if (strVariable == "Pickup Channel Names")  	ts3PckChannelNames = CPluginVariable.DecodeStringArray (strValue);  // -- Section 2 - Channels --------------------------------------------  else if (strVariable == "Password")  	chnPassword = strValue.Trim ();  else if (strVariable == "Team Names")  	chnTeamNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Squad Names")  	chnSquadNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Remove When Empty" && Boolean.TryParse (strValue' out blnOut))  	chnRemoveOnEmpty = blnOut;  // -- Section 3 - Synchronization -------------------------------------  else if (strVariable == "Delay Queries" && Boolean.TryParse (strValue' out blnOut))  	synDelayQueries = blnOut;  else if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Dropoff Channel Name")  	ts3DropoffChannelName = strValue;  else if (strVariable == "Pickup Channel Names")  	ts3PckChannelNames = CPluginVariable.DecodeStringArray (strValue);  // -- Section 2 - Channels --------------------------------------------  else if (strVariable == "Password")  	chnPassword = strValue.Trim ();  else if (strVariable == "Team Names")  	chnTeamNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Squad Names")  	chnSquadNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Remove When Empty" && Boolean.TryParse (strValue' out blnOut))  	chnRemoveOnEmpty = blnOut;  // -- Section 3 - Synchronization -------------------------------------  else if (strVariable == "Delay Queries" && Boolean.TryParse (strValue' out blnOut))  	synDelayQueries = blnOut;  else if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Dropoff Channel Name")  	ts3DropoffChannelName = strValue;  else if (strVariable == "Pickup Channel Names")  	ts3PckChannelNames = CPluginVariable.DecodeStringArray (strValue);  // -- Section 2 - Channels --------------------------------------------  else if (strVariable == "Password")  	chnPassword = strValue.Trim ();  else if (strVariable == "Team Names")  	chnTeamNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Squad Names")  	chnSquadNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Remove When Empty" && Boolean.TryParse (strValue' out blnOut))  	chnRemoveOnEmpty = blnOut;  // -- Section 3 - Synchronization -------------------------------------  else if (strVariable == "Delay Queries" && Boolean.TryParse (strValue' out blnOut))  	synDelayQueries = blnOut;  else if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Pickup Channel Names")  	ts3PckChannelNames = CPluginVariable.DecodeStringArray (strValue);  // -- Section 2 - Channels --------------------------------------------  else if (strVariable == "Password")  	chnPassword = strValue.Trim ();  else if (strVariable == "Team Names")  	chnTeamNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Squad Names")  	chnSquadNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Remove When Empty" && Boolean.TryParse (strValue' out blnOut))  	chnRemoveOnEmpty = blnOut;  // -- Section 3 - Synchronization -------------------------------------  else if (strVariable == "Delay Queries" && Boolean.TryParse (strValue' out blnOut))  	synDelayQueries = blnOut;  else if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Pickup Channel Names")  	ts3PckChannelNames = CPluginVariable.DecodeStringArray (strValue);  // -- Section 2 - Channels --------------------------------------------  else if (strVariable == "Password")  	chnPassword = strValue.Trim ();  else if (strVariable == "Team Names")  	chnTeamNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Squad Names")  	chnSquadNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Remove When Empty" && Boolean.TryParse (strValue' out blnOut))  	chnRemoveOnEmpty = blnOut;  // -- Section 3 - Synchronization -------------------------------------  else if (strVariable == "Delay Queries" && Boolean.TryParse (strValue' out blnOut))  	synDelayQueries = blnOut;  else if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Pickup Channel Names")  	ts3PckChannelNames = CPluginVariable.DecodeStringArray (strValue);  // -- Section 2 - Channels --------------------------------------------  else if (strVariable == "Password")  	chnPassword = strValue.Trim ();  else if (strVariable == "Team Names")  	chnTeamNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Squad Names")  	chnSquadNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Remove When Empty" && Boolean.TryParse (strValue' out blnOut))  	chnRemoveOnEmpty = blnOut;  // -- Section 3 - Synchronization -------------------------------------  else if (strVariable == "Delay Queries" && Boolean.TryParse (strValue' out blnOut))  	synDelayQueries = blnOut;  else if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Pickup Channel Names")  	ts3PckChannelNames = CPluginVariable.DecodeStringArray (strValue);  // -- Section 2 - Channels --------------------------------------------  else if (strVariable == "Password")  	chnPassword = strValue.Trim ();  else if (strVariable == "Team Names")  	chnTeamNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Squad Names")  	chnSquadNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Remove When Empty" && Boolean.TryParse (strValue' out blnOut))  	chnRemoveOnEmpty = blnOut;  // -- Section 3 - Synchronization -------------------------------------  else if (strVariable == "Delay Queries" && Boolean.TryParse (strValue' out blnOut))  	synDelayQueries = blnOut;  else if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Pickup Channel Names")  	ts3PckChannelNames = CPluginVariable.DecodeStringArray (strValue);  // -- Section 2 - Channels --------------------------------------------  else if (strVariable == "Password")  	chnPassword = strValue.Trim ();  else if (strVariable == "Team Names")  	chnTeamNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Squad Names")  	chnSquadNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Remove When Empty" && Boolean.TryParse (strValue' out blnOut))  	chnRemoveOnEmpty = blnOut;  // -- Section 3 - Synchronization -------------------------------------  else if (strVariable == "Delay Queries" && Boolean.TryParse (strValue' out blnOut))  	synDelayQueries = blnOut;  else if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Pickup Channel Names")  	ts3PckChannelNames = CPluginVariable.DecodeStringArray (strValue);  // -- Section 2 - Channels --------------------------------------------  else if (strVariable == "Password")  	chnPassword = strValue.Trim ();  else if (strVariable == "Team Names")  	chnTeamNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Squad Names")  	chnSquadNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Remove When Empty" && Boolean.TryParse (strValue' out blnOut))  	chnRemoveOnEmpty = blnOut;  // -- Section 3 - Synchronization -------------------------------------  else if (strVariable == "Delay Queries" && Boolean.TryParse (strValue' out blnOut))  	synDelayQueries = blnOut;  else if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Pickup Channel Names")  	ts3PckChannelNames = CPluginVariable.DecodeStringArray (strValue);  // -- Section 2 - Channels --------------------------------------------  else if (strVariable == "Password")  	chnPassword = strValue.Trim ();  else if (strVariable == "Team Names")  	chnTeamNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Squad Names")  	chnSquadNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Remove When Empty" && Boolean.TryParse (strValue' out blnOut))  	chnRemoveOnEmpty = blnOut;  // -- Section 3 - Synchronization -------------------------------------  else if (strVariable == "Delay Queries" && Boolean.TryParse (strValue' out blnOut))  	synDelayQueries = blnOut;  else if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Pickup Channel Names")  	ts3PckChannelNames = CPluginVariable.DecodeStringArray (strValue);  // -- Section 2 - Channels --------------------------------------------  else if (strVariable == "Password")  	chnPassword = strValue.Trim ();  else if (strVariable == "Team Names")  	chnTeamNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Squad Names")  	chnSquadNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Remove When Empty" && Boolean.TryParse (strValue' out blnOut))  	chnRemoveOnEmpty = blnOut;  // -- Section 3 - Synchronization -------------------------------------  else if (strVariable == "Delay Queries" && Boolean.TryParse (strValue' out blnOut))  	synDelayQueries = blnOut;  else if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Pickup Channel Names")  	ts3PckChannelNames = CPluginVariable.DecodeStringArray (strValue);  // -- Section 2 - Channels --------------------------------------------  else if (strVariable == "Password")  	chnPassword = strValue.Trim ();  else if (strVariable == "Team Names")  	chnTeamNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Squad Names")  	chnSquadNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Remove When Empty" && Boolean.TryParse (strValue' out blnOut))  	chnRemoveOnEmpty = blnOut;  // -- Section 3 - Synchronization -------------------------------------  else if (strVariable == "Delay Queries" && Boolean.TryParse (strValue' out blnOut))  	synDelayQueries = blnOut;  else if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Pickup Channel Names")  	ts3PckChannelNames = CPluginVariable.DecodeStringArray (strValue);  // -- Section 2 - Channels --------------------------------------------  else if (strVariable == "Password")  	chnPassword = strValue.Trim ();  else if (strVariable == "Team Names")  	chnTeamNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Squad Names")  	chnSquadNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Remove When Empty" && Boolean.TryParse (strValue' out blnOut))  	chnRemoveOnEmpty = blnOut;  // -- Section 3 - Synchronization -------------------------------------  else if (strVariable == "Delay Queries" && Boolean.TryParse (strValue' out blnOut))  	synDelayQueries = blnOut;  else if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Pickup Channel Names")  	ts3PckChannelNames = CPluginVariable.DecodeStringArray (strValue);  // -- Section 2 - Channels --------------------------------------------  else if (strVariable == "Password")  	chnPassword = strValue.Trim ();  else if (strVariable == "Team Names")  	chnTeamNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Squad Names")  	chnSquadNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Remove When Empty" && Boolean.TryParse (strValue' out blnOut))  	chnRemoveOnEmpty = blnOut;  // -- Section 3 - Synchronization -------------------------------------  else if (strVariable == "Delay Queries" && Boolean.TryParse (strValue' out blnOut))  	synDelayQueries = blnOut;  else if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Pickup Channel Names")  	ts3PckChannelNames = CPluginVariable.DecodeStringArray (strValue);  // -- Section 2 - Channels --------------------------------------------  else if (strVariable == "Password")  	chnPassword = strValue.Trim ();  else if (strVariable == "Team Names")  	chnTeamNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Squad Names")  	chnSquadNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Remove When Empty" && Boolean.TryParse (strValue' out blnOut))  	chnRemoveOnEmpty = blnOut;  // -- Section 3 - Synchronization -------------------------------------  else if (strVariable == "Delay Queries" && Boolean.TryParse (strValue' out blnOut))  	synDelayQueries = blnOut;  else if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Password")  	chnPassword = strValue.Trim ();  else if (strVariable == "Team Names")  	chnTeamNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Squad Names")  	chnSquadNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Remove When Empty" && Boolean.TryParse (strValue' out blnOut))  	chnRemoveOnEmpty = blnOut;  // -- Section 3 - Synchronization -------------------------------------  else if (strVariable == "Delay Queries" && Boolean.TryParse (strValue' out blnOut))  	synDelayQueries = blnOut;  else if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Password")  	chnPassword = strValue.Trim ();  else if (strVariable == "Team Names")  	chnTeamNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Squad Names")  	chnSquadNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Remove When Empty" && Boolean.TryParse (strValue' out blnOut))  	chnRemoveOnEmpty = blnOut;  // -- Section 3 - Synchronization -------------------------------------  else if (strVariable == "Delay Queries" && Boolean.TryParse (strValue' out blnOut))  	synDelayQueries = blnOut;  else if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Password")  	chnPassword = strValue.Trim ();  else if (strVariable == "Team Names")  	chnTeamNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Squad Names")  	chnSquadNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Remove When Empty" && Boolean.TryParse (strValue' out blnOut))  	chnRemoveOnEmpty = blnOut;  // -- Section 3 - Synchronization -------------------------------------  else if (strVariable == "Delay Queries" && Boolean.TryParse (strValue' out blnOut))  	synDelayQueries = blnOut;  else if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Password")  	chnPassword = strValue.Trim ();  else if (strVariable == "Team Names")  	chnTeamNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Squad Names")  	chnSquadNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Remove When Empty" && Boolean.TryParse (strValue' out blnOut))  	chnRemoveOnEmpty = blnOut;  // -- Section 3 - Synchronization -------------------------------------  else if (strVariable == "Delay Queries" && Boolean.TryParse (strValue' out blnOut))  	synDelayQueries = blnOut;  else if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Password")  	chnPassword = strValue.Trim ();  else if (strVariable == "Team Names")  	chnTeamNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Squad Names")  	chnSquadNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Remove When Empty" && Boolean.TryParse (strValue' out blnOut))  	chnRemoveOnEmpty = blnOut;  // -- Section 3 - Synchronization -------------------------------------  else if (strVariable == "Delay Queries" && Boolean.TryParse (strValue' out blnOut))  	synDelayQueries = blnOut;  else if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Password")  	chnPassword = strValue.Trim ();  else if (strVariable == "Team Names")  	chnTeamNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Squad Names")  	chnSquadNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Remove When Empty" && Boolean.TryParse (strValue' out blnOut))  	chnRemoveOnEmpty = blnOut;  // -- Section 3 - Synchronization -------------------------------------  else if (strVariable == "Delay Queries" && Boolean.TryParse (strValue' out blnOut))  	synDelayQueries = blnOut;  else if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Password")  	chnPassword = strValue.Trim ();  else if (strVariable == "Team Names")  	chnTeamNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Squad Names")  	chnSquadNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Remove When Empty" && Boolean.TryParse (strValue' out blnOut))  	chnRemoveOnEmpty = blnOut;  // -- Section 3 - Synchronization -------------------------------------  else if (strVariable == "Delay Queries" && Boolean.TryParse (strValue' out blnOut))  	synDelayQueries = blnOut;  else if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Password")  	chnPassword = strValue.Trim ();  else if (strVariable == "Team Names")  	chnTeamNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Squad Names")  	chnSquadNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Remove When Empty" && Boolean.TryParse (strValue' out blnOut))  	chnRemoveOnEmpty = blnOut;  // -- Section 3 - Synchronization -------------------------------------  else if (strVariable == "Delay Queries" && Boolean.TryParse (strValue' out blnOut))  	synDelayQueries = blnOut;  else if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Password")  	chnPassword = strValue.Trim ();  else if (strVariable == "Team Names")  	chnTeamNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Squad Names")  	chnSquadNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Remove When Empty" && Boolean.TryParse (strValue' out blnOut))  	chnRemoveOnEmpty = blnOut;  // -- Section 3 - Synchronization -------------------------------------  else if (strVariable == "Delay Queries" && Boolean.TryParse (strValue' out blnOut))  	synDelayQueries = blnOut;  else if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Password")  	chnPassword = strValue.Trim ();  else if (strVariable == "Team Names")  	chnTeamNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Squad Names")  	chnSquadNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Remove When Empty" && Boolean.TryParse (strValue' out blnOut))  	chnRemoveOnEmpty = blnOut;  // -- Section 3 - Synchronization -------------------------------------  else if (strVariable == "Delay Queries" && Boolean.TryParse (strValue' out blnOut))  	synDelayQueries = blnOut;  else if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Password")  	chnPassword = strValue.Trim ();  else if (strVariable == "Team Names")  	chnTeamNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Squad Names")  	chnSquadNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Remove When Empty" && Boolean.TryParse (strValue' out blnOut))  	chnRemoveOnEmpty = blnOut;  // -- Section 3 - Synchronization -------------------------------------  else if (strVariable == "Delay Queries" && Boolean.TryParse (strValue' out blnOut))  	synDelayQueries = blnOut;  else if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Password")  	chnPassword = strValue.Trim ();  else if (strVariable == "Team Names")  	chnTeamNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Squad Names")  	chnSquadNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Remove When Empty" && Boolean.TryParse (strValue' out blnOut))  	chnRemoveOnEmpty = blnOut;  // -- Section 3 - Synchronization -------------------------------------  else if (strVariable == "Delay Queries" && Boolean.TryParse (strValue' out blnOut))  	synDelayQueries = blnOut;  else if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Team Names")  	chnTeamNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Squad Names")  	chnSquadNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Remove When Empty" && Boolean.TryParse (strValue' out blnOut))  	chnRemoveOnEmpty = blnOut;  // -- Section 3 - Synchronization -------------------------------------  else if (strVariable == "Delay Queries" && Boolean.TryParse (strValue' out blnOut))  	synDelayQueries = blnOut;  else if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Team Names")  	chnTeamNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Squad Names")  	chnSquadNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Remove When Empty" && Boolean.TryParse (strValue' out blnOut))  	chnRemoveOnEmpty = blnOut;  // -- Section 3 - Synchronization -------------------------------------  else if (strVariable == "Delay Queries" && Boolean.TryParse (strValue' out blnOut))  	synDelayQueries = blnOut;  else if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Team Names")  	chnTeamNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Squad Names")  	chnSquadNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Remove When Empty" && Boolean.TryParse (strValue' out blnOut))  	chnRemoveOnEmpty = blnOut;  // -- Section 3 - Synchronization -------------------------------------  else if (strVariable == "Delay Queries" && Boolean.TryParse (strValue' out blnOut))  	synDelayQueries = blnOut;  else if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Team Names")  	chnTeamNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Squad Names")  	chnSquadNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Remove When Empty" && Boolean.TryParse (strValue' out blnOut))  	chnRemoveOnEmpty = blnOut;  // -- Section 3 - Synchronization -------------------------------------  else if (strVariable == "Delay Queries" && Boolean.TryParse (strValue' out blnOut))  	synDelayQueries = blnOut;  else if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Team Names")  	chnTeamNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Squad Names")  	chnSquadNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Remove When Empty" && Boolean.TryParse (strValue' out blnOut))  	chnRemoveOnEmpty = blnOut;  // -- Section 3 - Synchronization -------------------------------------  else if (strVariable == "Delay Queries" && Boolean.TryParse (strValue' out blnOut))  	synDelayQueries = blnOut;  else if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Team Names")  	chnTeamNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Squad Names")  	chnSquadNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Remove When Empty" && Boolean.TryParse (strValue' out blnOut))  	chnRemoveOnEmpty = blnOut;  // -- Section 3 - Synchronization -------------------------------------  else if (strVariable == "Delay Queries" && Boolean.TryParse (strValue' out blnOut))  	synDelayQueries = blnOut;  else if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Team Names")  	chnTeamNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Squad Names")  	chnSquadNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Remove When Empty" && Boolean.TryParse (strValue' out blnOut))  	chnRemoveOnEmpty = blnOut;  // -- Section 3 - Synchronization -------------------------------------  else if (strVariable == "Delay Queries" && Boolean.TryParse (strValue' out blnOut))  	synDelayQueries = blnOut;  else if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Team Names")  	chnTeamNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Squad Names")  	chnSquadNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Remove When Empty" && Boolean.TryParse (strValue' out blnOut))  	chnRemoveOnEmpty = blnOut;  // -- Section 3 - Synchronization -------------------------------------  else if (strVariable == "Delay Queries" && Boolean.TryParse (strValue' out blnOut))  	synDelayQueries = blnOut;  else if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Team Names")  	chnTeamNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Squad Names")  	chnSquadNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Remove When Empty" && Boolean.TryParse (strValue' out blnOut))  	chnRemoveOnEmpty = blnOut;  // -- Section 3 - Synchronization -------------------------------------  else if (strVariable == "Delay Queries" && Boolean.TryParse (strValue' out blnOut))  	synDelayQueries = blnOut;  else if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Team Names")  	chnTeamNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Squad Names")  	chnSquadNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Remove When Empty" && Boolean.TryParse (strValue' out blnOut))  	chnRemoveOnEmpty = blnOut;  // -- Section 3 - Synchronization -------------------------------------  else if (strVariable == "Delay Queries" && Boolean.TryParse (strValue' out blnOut))  	synDelayQueries = blnOut;  else if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Team Names")  	chnTeamNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Squad Names")  	chnSquadNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Remove When Empty" && Boolean.TryParse (strValue' out blnOut))  	chnRemoveOnEmpty = blnOut;  // -- Section 3 - Synchronization -------------------------------------  else if (strVariable == "Delay Queries" && Boolean.TryParse (strValue' out blnOut))  	synDelayQueries = blnOut;  else if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Team Names")  	chnTeamNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Squad Names")  	chnSquadNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Remove When Empty" && Boolean.TryParse (strValue' out blnOut))  	chnRemoveOnEmpty = blnOut;  // -- Section 3 - Synchronization -------------------------------------  else if (strVariable == "Delay Queries" && Boolean.TryParse (strValue' out blnOut))  	synDelayQueries = blnOut;  else if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Squad Names")  	chnSquadNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Remove When Empty" && Boolean.TryParse (strValue' out blnOut))  	chnRemoveOnEmpty = blnOut;  // -- Section 3 - Synchronization -------------------------------------  else if (strVariable == "Delay Queries" && Boolean.TryParse (strValue' out blnOut))  	synDelayQueries = blnOut;  else if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Squad Names")  	chnSquadNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Remove When Empty" && Boolean.TryParse (strValue' out blnOut))  	chnRemoveOnEmpty = blnOut;  // -- Section 3 - Synchronization -------------------------------------  else if (strVariable == "Delay Queries" && Boolean.TryParse (strValue' out blnOut))  	synDelayQueries = blnOut;  else if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Squad Names")  	chnSquadNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Remove When Empty" && Boolean.TryParse (strValue' out blnOut))  	chnRemoveOnEmpty = blnOut;  // -- Section 3 - Synchronization -------------------------------------  else if (strVariable == "Delay Queries" && Boolean.TryParse (strValue' out blnOut))  	synDelayQueries = blnOut;  else if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Squad Names")  	chnSquadNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Remove When Empty" && Boolean.TryParse (strValue' out blnOut))  	chnRemoveOnEmpty = blnOut;  // -- Section 3 - Synchronization -------------------------------------  else if (strVariable == "Delay Queries" && Boolean.TryParse (strValue' out blnOut))  	synDelayQueries = blnOut;  else if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Squad Names")  	chnSquadNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Remove When Empty" && Boolean.TryParse (strValue' out blnOut))  	chnRemoveOnEmpty = blnOut;  // -- Section 3 - Synchronization -------------------------------------  else if (strVariable == "Delay Queries" && Boolean.TryParse (strValue' out blnOut))  	synDelayQueries = blnOut;  else if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Squad Names")  	chnSquadNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Remove When Empty" && Boolean.TryParse (strValue' out blnOut))  	chnRemoveOnEmpty = blnOut;  // -- Section 3 - Synchronization -------------------------------------  else if (strVariable == "Delay Queries" && Boolean.TryParse (strValue' out blnOut))  	synDelayQueries = blnOut;  else if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Squad Names")  	chnSquadNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Remove When Empty" && Boolean.TryParse (strValue' out blnOut))  	chnRemoveOnEmpty = blnOut;  // -- Section 3 - Synchronization -------------------------------------  else if (strVariable == "Delay Queries" && Boolean.TryParse (strValue' out blnOut))  	synDelayQueries = blnOut;  else if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Squad Names")  	chnSquadNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Remove When Empty" && Boolean.TryParse (strValue' out blnOut))  	chnRemoveOnEmpty = blnOut;  // -- Section 3 - Synchronization -------------------------------------  else if (strVariable == "Delay Queries" && Boolean.TryParse (strValue' out blnOut))  	synDelayQueries = blnOut;  else if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Squad Names")  	chnSquadNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Remove When Empty" && Boolean.TryParse (strValue' out blnOut))  	chnRemoveOnEmpty = blnOut;  // -- Section 3 - Synchronization -------------------------------------  else if (strVariable == "Delay Queries" && Boolean.TryParse (strValue' out blnOut))  	synDelayQueries = blnOut;  else if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Squad Names")  	chnSquadNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Remove When Empty" && Boolean.TryParse (strValue' out blnOut))  	chnRemoveOnEmpty = blnOut;  // -- Section 3 - Synchronization -------------------------------------  else if (strVariable == "Delay Queries" && Boolean.TryParse (strValue' out blnOut))  	synDelayQueries = blnOut;  else if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Squad Names")  	chnSquadNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Remove When Empty" && Boolean.TryParse (strValue' out blnOut))  	chnRemoveOnEmpty = blnOut;  // -- Section 3 - Synchronization -------------------------------------  else if (strVariable == "Delay Queries" && Boolean.TryParse (strValue' out blnOut))  	synDelayQueries = blnOut;  else if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Squad Names")  	chnSquadNames = CPluginVariable.DecodeStringArray (strValue);  else if (strVariable == "Remove When Empty" && Boolean.TryParse (strValue' out blnOut))  	chnRemoveOnEmpty = blnOut;  // -- Section 3 - Synchronization -------------------------------------  else if (strVariable == "Delay Queries" && Boolean.TryParse (strValue' out blnOut))  	synDelayQueries = blnOut;  else if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Remove When Empty" && Boolean.TryParse (strValue' out blnOut))  	chnRemoveOnEmpty = blnOut;  // -- Section 3 - Synchronization -------------------------------------  else if (strVariable == "Delay Queries" && Boolean.TryParse (strValue' out blnOut))  	synDelayQueries = blnOut;  else if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Remove When Empty" && Boolean.TryParse (strValue' out blnOut))  	chnRemoveOnEmpty = blnOut;  // -- Section 3 - Synchronization -------------------------------------  else if (strVariable == "Delay Queries" && Boolean.TryParse (strValue' out blnOut))  	synDelayQueries = blnOut;  else if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Remove When Empty" && Boolean.TryParse (strValue' out blnOut))  	chnRemoveOnEmpty = blnOut;  // -- Section 3 - Synchronization -------------------------------------  else if (strVariable == "Delay Queries" && Boolean.TryParse (strValue' out blnOut))  	synDelayQueries = blnOut;  else if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Remove When Empty" && Boolean.TryParse (strValue' out blnOut))  	chnRemoveOnEmpty = blnOut;  // -- Section 3 - Synchronization -------------------------------------  else if (strVariable == "Delay Queries" && Boolean.TryParse (strValue' out blnOut))  	synDelayQueries = blnOut;  else if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Remove When Empty" && Boolean.TryParse (strValue' out blnOut))  	chnRemoveOnEmpty = blnOut;  // -- Section 3 - Synchronization -------------------------------------  else if (strVariable == "Delay Queries" && Boolean.TryParse (strValue' out blnOut))  	synDelayQueries = blnOut;  else if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Remove When Empty" && Boolean.TryParse (strValue' out blnOut))  	chnRemoveOnEmpty = blnOut;  // -- Section 3 - Synchronization -------------------------------------  else if (strVariable == "Delay Queries" && Boolean.TryParse (strValue' out blnOut))  	synDelayQueries = blnOut;  else if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Remove When Empty" && Boolean.TryParse (strValue' out blnOut))  	chnRemoveOnEmpty = blnOut;  // -- Section 3 - Synchronization -------------------------------------  else if (strVariable == "Delay Queries" && Boolean.TryParse (strValue' out blnOut))  	synDelayQueries = blnOut;  else if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Remove When Empty" && Boolean.TryParse (strValue' out blnOut))  	chnRemoveOnEmpty = blnOut;  // -- Section 3 - Synchronization -------------------------------------  else if (strVariable == "Delay Queries" && Boolean.TryParse (strValue' out blnOut))  	synDelayQueries = blnOut;  else if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Remove When Empty" && Boolean.TryParse (strValue' out blnOut))  	chnRemoveOnEmpty = blnOut;  // -- Section 3 - Synchronization -------------------------------------  else if (strVariable == "Delay Queries" && Boolean.TryParse (strValue' out blnOut))  	synDelayQueries = blnOut;  else if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Remove When Empty" && Boolean.TryParse (strValue' out blnOut))  	chnRemoveOnEmpty = blnOut;  // -- Section 3 - Synchronization -------------------------------------  else if (strVariable == "Delay Queries" && Boolean.TryParse (strValue' out blnOut))  	synDelayQueries = blnOut;  else if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Remove When Empty" && Boolean.TryParse (strValue' out blnOut))  	chnRemoveOnEmpty = blnOut;  // -- Section 3 - Synchronization -------------------------------------  else if (strVariable == "Delay Queries" && Boolean.TryParse (strValue' out blnOut))  	synDelayQueries = blnOut;  else if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Remove When Empty" && Boolean.TryParse (strValue' out blnOut))  	chnRemoveOnEmpty = blnOut;  // -- Section 3 - Synchronization -------------------------------------  else if (strVariable == "Delay Queries" && Boolean.TryParse (strValue' out blnOut))  	synDelayQueries = blnOut;  else if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Delay Queries" && Boolean.TryParse (strValue' out blnOut))  	synDelayQueries = blnOut;  else if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Delay Queries" && Boolean.TryParse (strValue' out blnOut))  	synDelayQueries = blnOut;  else if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Delay Queries" && Boolean.TryParse (strValue' out blnOut))  	synDelayQueries = blnOut;  else if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Delay Queries" && Boolean.TryParse (strValue' out blnOut))  	synDelayQueries = blnOut;  else if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Delay Queries" && Boolean.TryParse (strValue' out blnOut))  	synDelayQueries = blnOut;  else if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Delay Queries" && Boolean.TryParse (strValue' out blnOut))  	synDelayQueries = blnOut;  else if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Delay Queries" && Boolean.TryParse (strValue' out blnOut))  	synDelayQueries = blnOut;  else if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Delay Queries" && Boolean.TryParse (strValue' out blnOut))  	synDelayQueries = blnOut;  else if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Delay Queries" && Boolean.TryParse (strValue' out blnOut))  	synDelayQueries = blnOut;  else if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Delay Queries" && Boolean.TryParse (strValue' out blnOut))  	synDelayQueries = blnOut;  else if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Delay Queries" && Boolean.TryParse (strValue' out blnOut))  	synDelayQueries = blnOut;  else if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Delay Queries" && Boolean.TryParse (strValue' out blnOut))  	synDelayQueries = blnOut;  else if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Delay Queries Amount (ms)" && Int32.TryParse (strValue' out intOut))  	synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  else if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: synDelayQueriesAmount = (intOut >= 10 && intOut <= 3000) ? intOut : synDelayQueriesAmount;  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Update Interval (ms)" && Int32.TryParse (strValue' out intOut))  	synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  else if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: synUpdateInterval = (intOut >= 4000 && intOut <= 60000) ? intOut : synUpdateInterval;  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Team-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synTeamBasedSwapping = blnOut;  else if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Team-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  else if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: synTeamBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synTeamBasedThreshold;  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Intermission Swapping" && Boolean.TryParse (strValue' out blnOut))  	synIntermissionSwapping = blnOut;  else if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Squad-Based Swapping" && Boolean.TryParse (strValue' out blnOut))  	synSquadBasedSwapping = blnOut;  else if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Squad-Based Threshold" && Int32.TryParse (strValue' out intOut))  	synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  else if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: synSquadBasedThreshold = (intOut >= 1 && intOut <= 32) ? intOut : synSquadBasedThreshold;  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Squad-Size Minimum" && Int32.TryParse (strValue' out intOut))  	synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  else if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: synSquadSizeMinimum = (intOut >= 1 && intOut <= 6) ? intOut : synSquadSizeMinimum;  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Matching Threshold (%)" && Double.TryParse (strValue' out dblOut))  	synMatchingThreshold = 100;  //(dblOut >= 0.0 && dblOut <= 100.0) ? dblOut : synMatchingThreshold;  else if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: synMatchingThreshold = 100;  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Remove Clients Not Playing" && Boolean.TryParse (strValue' out blnOut))  	synRemoveClients = blnOut;  else if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Remove Clients - Whitelist") {  	mClientWhitelist.Clear ();  	synRemoveClientsWhitelist = CPluginVariable.DecodeStringArray (strValue);  	foreach (String id in synRemoveClientsWhitelist)  		if (Int32.TryParse (id' out intOut) && !mClientWhitelist.Contains (intOut))  			mClientWhitelist.Add (intOut);  }  // -- Section 4 - Error Handling --------------------------------------  else if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Reconnect On Error" && Boolean.TryParse (strValue' out blnOut))  	errReconnectOnError = blnOut;  else if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Number of Reconnect Attempts" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorAttempts = (intOut >= 1) ? intOut : errReconnectOnErrorAttempts;  else if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Interval Between Reconnect Attempts (ms)" && Int32.TryParse (strValue' out intOut))  	errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  // -- Section 5 - User Messages ---------------------------------------  else if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: errReconnectOnErrorInterval = (intOut >= 1000) ? intOut : errReconnectOnErrorInterval;  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Message Players Not In Teamspeak" && Boolean.TryParse (strValue' out blnOut))  	msgEnabled = blnOut;  else if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Message When Player Joins" && Boolean.TryParse (strValue' out blnOut))  	msgOnJoin = blnOut;  else if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Message When Player Joins Delay (ms)" && Int32.TryParse (strValue' out intOut))  	msgOnJoinDelay = (intOut >= 0) ? intOut : msgOnJoinDelay;  else if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Message Interval (ms)" && Int32.TryParse (strValue' out intOut))  	msgInterval = (intOut >= 30000) ? intOut : msgInterval;  else if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: msgInterval = (intOut >= 30000) ? intOut : msgInterval;  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Message")  	msgMessage = strValue;  else if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Message Display Duration" && Int32.TryParse (strValue' out intOut))  	msgDuration = (intOut >= 0) ? intOut : msgDuration;  // -- Section 6 - In-Game Commands -----------------------------------  else if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Enable !tssquads" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSSquadList = blnOut;  else if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Enable !tslobby" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSStaging = blnOut;  else if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Enable !tsteam" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSTeam = blnOut;  else if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Enable !tsnosync" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSNoSync = blnOut;  // -- Section 7 - Debug Information -----------------------------------  else if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Show Debug Messages (Events)" && Boolean.TryParse (strValue' out blnOut))  	dbgEvents = blnOut;  else if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Show Debug Messages (Clients)" && Boolean.TryParse (strValue' out blnOut))  	dbgClients = blnOut;  else if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Show Debug Messages (Channels)" && Boolean.TryParse (strValue' out blnOut))  	dbgChannels = blnOut;  else if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Show Debug Messages (Swapping)" && Boolean.TryParse (strValue' out blnOut))  	dbgSwapping = blnOut;  else if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Show Debug Messages (Network)" && Boolean.TryParse (strValue' out blnOut))  	dbgNetwork = blnOut;  else if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Show Debug Messages (Bouncer)" && Boolean.TryParse (strValue' out blnOut))  	dbgBouncer = blnOut;  else if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Show Debug Messages (TSSync Promotion)" && Boolean.TryParse (strValue' out blnOut))  	dbgTSSyncPromote = blnOut;  // -- Section 8 - Event Bouncer --------------------------------------  else if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Enable Event Bouncer" && Boolean.TryParse (strValue' out blnOut))  	mEnableBouncer = blnOut;  else if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Event Bouncer Kick Message")  	mBouncerKickMessage = strValue;  // -- Section 9 - TSSync Promotion ----------------------------------- (PURE)  else if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Enable TSSync Promotion" && Boolean.TryParse (strValue' out blnOut)) {  	mEnableTSPromotion = blnOut;  	if (mEnableTSPromotion && !mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer");  		mInGamePromotionTimer.Start ();  	}  	else if (!mEnableTSPromotion && mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer");  		mInGamePromotionTimer.Stop ();  	}  }  else if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Maximum Number of Squad Synced players to be considered seeding" && Int32.TryParse (strValue' out intOut))  	mMaxSeedingRecognitionVal = intOut;  else if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Seeding Recognition Message")  	mSeedingRecognitionMessage = strValue;  else if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "Min Number of Team Sync players on each team to start promoting TSSync" && Int32.TryParse (strValue' out intOut))  	mMinSyncedPlayersForInGamePromotion = intOut;  else if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: if (strVariable == "In Game promotion interval (minutes)" && Int32.TryParse (strValue' out intOut)) {  	mInGamePromotionInterval = intOut;  	if (mInGamePromotionTimer.Enabled) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Stopping in game promotion timer.");  		mInGamePromotionTimer.Stop ();  	}  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	if (mEnableTSPromotion) {  		debugWrite (dbgTSSyncPromote' "[TSSync Promote] - Starting in game promotion timer.");  		mInGamePromotionTimer.Start ();  	}  }  else if (strVariable == "In Game Promotion Message")  	mInGamePromotionMessage = strValue;  //Section 9.1 PURE  else if (strVariable == "Enable TSSync Exclusion" && Boolean.TryParse (strValue' out blnOut))  	mEnableTSExclusion = blnOut;  else if (strVariable.Contains ("Soldier name:")) {  	strValue = strValue.Trim ().ToLower ();  	//consoleWrite("strVariable: " + strVariable + "' strValue Trimmed Lowered: " + strValue);  	try {  		int n = getConfigIndex (strVariable);  		//consoleWrite("Setting " + n);  		mExclusionList [n] = strValue;  	}  	catch (ArgumentOutOfRangeException e) {  		//consoleWrite("" + e);  		mExclusionList.Add (strValue);  	}  	//performExclusionListMaintenance();  }  else if (strVariable.Contains ("Add a soldier name...") && !String.IsNullOrEmpty (strValue.Trim ())) {  	mExclusionList.Add (strValue.Trim ().ToLower ());  	//performExclusionListMaintenance();  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,SetPluginVariable,The following statement contains a magic number: mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,OnPluginLoaded,The following statement contains a magic number: try {  	mThreadMain = new Thread (EntryMain);  	mThreadMessage = new Thread (EntryMessaging);  	mThreadSynchronize = new Thread (EntrySynchronization);  	mThreadMain.Start ();  	mThreadMessage.Start ();  	mThreadSynchronize.Start ();  	#region PURE In Game TSSync Promotion  	mInGamePromotionTimer = new System.Timers.Timer ();  	mInGamePromotionTimer.Elapsed += new System.Timers.ElapsedEventHandler (this.inGamePromotion);  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	// Convert minutes to ms.  	mInGamePromotionTimer.Stop ();  	#endregion  }  catch (Exception e) {  	consoleWrite ("^8A fatal error occurred on load! Procon must be restarted for Teamspeak 3 Sync to work correctly.");  	consoleWrite ("^8^bMessage:^n^0 " + e.Message);  	consoleWrite ("^8^bStack Trace:^n^0 " + e.StackTrace);  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,OnPluginLoaded,The following statement contains a magic number: try {  	mThreadMain = new Thread (EntryMain);  	mThreadMessage = new Thread (EntryMessaging);  	mThreadSynchronize = new Thread (EntrySynchronization);  	mThreadMain.Start ();  	mThreadMessage.Start ();  	mThreadSynchronize.Start ();  	#region PURE In Game TSSync Promotion  	mInGamePromotionTimer = new System.Timers.Timer ();  	mInGamePromotionTimer.Elapsed += new System.Timers.ElapsedEventHandler (this.inGamePromotion);  	mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  	// Convert minutes to ms.  	mInGamePromotionTimer.Stop ();  	#endregion  }  catch (Exception e) {  	consoleWrite ("^8A fatal error occurred on load! Procon must be restarted for Teamspeak 3 Sync to work correctly.");  	consoleWrite ("^8^bMessage:^n^0 " + e.Message);  	consoleWrite ("^8^bStack Trace:^n^0 " + e.StackTrace);  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,OnPluginLoaded,The following statement contains a magic number: mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,OnPluginLoaded,The following statement contains a magic number: mInGamePromotionTimer.Interval = mInGamePromotionInterval * 60 * 1000;  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,performOpenConnection,The following statement contains a magic number: for (int secondsSlept = 0; secondsSlept < 10 && ts3ServerIp == "Teamspeak Ip"; secondsSlept++)  	Thread.Sleep (1000);  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,performOpenConnection,The following statement contains a magic number: for (int secondsSlept = 0; secondsSlept < 10 && ts3ServerIp == "Teamspeak Ip"; secondsSlept++)  	Thread.Sleep (1000);  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,performOpenConnection,The following statement contains a magic number: Thread.Sleep (1000);  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,DisplayTsSquadList,The following statement contains a magic number: if (playerTeam != -1) {  	const string squadMessage = "{0}: ({1}/{2})";  	List<string> messagesToSend = new List<string> ();  	//Get the squad list for the appropriate team.  Ensure at least 1 person on TS' and at least 1 free slot.    	Dictionary<int' TsGameSquadInfo> squads = squadInfo [playerTeam];  	bool squadFound = false;  	foreach (KeyValuePair<int' TsGameSquadInfo> teamSquad in squads) {  		debugWrite (dbgEvents' "[Event] Squad " + squadNames [teamSquad.Key] + "' TS: " + teamSquad.Value.TsCount + "' Game: " + teamSquad.Value.InGameCount);  		if (teamSquad.Value.TsCount > 0 && teamSquad.Value.TsCount < 5) {  			squadFound = true;  			string message = String.Format (squadMessage' squadNames [teamSquad.Key]' teamSquad.Value.TsCount' teamSquad.Value.InGameCount);  			messagesToSend.Add (message);  		}  	}  	//If there are no squads' tell the player so.  Otherwise' write the message to the player.    	if (!squadFound) {  		sayToPlayer ("No free squads found. Start one yourself and encourage people to join!"' playerName);  	}  	else {  		sayToPlayer ("Squads with 1-4 Teamspeak Players:"' playerName);  		sayToPlayer ("Key: Name (# TS Players/# Squad Members)"' playerName);  		string finalMessageString = "";  		for (int i = 0; i < messagesToSend.Count; i++) {  			finalMessageString += messagesToSend [i];  			if (i != (messagesToSend.Count - 1)) {  				finalMessageString += "' ";  			}  		}  		sayToPlayer (finalMessageString' playerName);  	}  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,DisplayTsSquadList,The following statement contains a magic number: foreach (KeyValuePair<int' TsGameSquadInfo> teamSquad in squads) {  	debugWrite (dbgEvents' "[Event] Squad " + squadNames [teamSquad.Key] + "' TS: " + teamSquad.Value.TsCount + "' Game: " + teamSquad.Value.InGameCount);  	if (teamSquad.Value.TsCount > 0 && teamSquad.Value.TsCount < 5) {  		squadFound = true;  		string message = String.Format (squadMessage' squadNames [teamSquad.Key]' teamSquad.Value.TsCount' teamSquad.Value.InGameCount);  		messagesToSend.Add (message);  	}  }  
Magic Number,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,DisplayTsSquadList,The following statement contains a magic number: if (teamSquad.Value.TsCount > 0 && teamSquad.Value.TsCount < 5) {  	squadFound = true;  	string message = String.Format (squadMessage' squadNames [teamSquad.Key]' teamSquad.Value.TsCount' teamSquad.Value.InGameCount);  	messagesToSend.Add (message);  }  
Missing Default,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,OnGlobalChat,The following switch statement is missing a default case: switch (message) {  case "!tssquads":  	addToActionQueue (Commands.DisplayTSSquadList' speaker);  	break;  case "!tslobby":  	addToActionQueue (Commands.SetSyncToStaging' speaker);  	break;  case "!tsteam":  	addToActionQueue (Commands.SetSyncToTeam' speaker);  	break;  case "/!tsnosync":  	addToActionQueue (Commands.SetNoSync' speaker);  	break;  case "!tssync":  	addToActionQueue (Commands.ResetUserSyncFlags' speaker);  	break;  }  
Missing Default,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,EntryMain,The following switch statement is missing a default case: switch (mCurrentAction.Command) {  case Commands.PluginEnabled:  	debugWrite (dbgEvents' "[Event] Processing Plugin Enabled Event.");  	performOpenConnection ();  	break;  case Commands.PluginDisabled:  	debugWrite (dbgEvents' "[Event] Processing Plugin Disabled Event.");  	performCloseConnection ();  	break;  case Commands.UpdateTsClientInfo:  	debugWrite (dbgEvents' "[Event] Processing Update Teamspeak Information Event.");  	updateTsInfo ();  	break;  case Commands.UpdateGmClientInfo:  	debugWrite (dbgEvents' "[Event] Processing Update Player Information Event.");  	updateGmInfo ((List<CPlayerInfo>)mCurrentAction.Argument);  	break;  case Commands.UpdatePbClientInfo:  	debugWrite (dbgEvents' "[Event] Processing Update Punkbuster Information Event.");  	updatePbInfo ((CPunkbusterInfo)mCurrentAction.Argument);  	break;  case Commands.UpdateMsClientInfo:  	debugWrite (dbgEvents' "[Event] Processing Update Master Information Event.");  	updateMasterInfo ();  	break;  case Commands.CheckAllClientsForSwapping:  	debugWrite (dbgEvents' "[Event] Processing Swap ALL Clients Event.");  	foreach (MasterClient mstClient in getPlayersOnBothServers ())  		addToActionQueue (Commands.CheckClientForSwapping' mstClient);  	break;  case Commands.CheckAllClientsForRemoval:  	debugWrite (dbgEvents' "[Event] Processing Remove ALL Clients Event.");  	foreach (MasterClient mstClient in getPlayersOnTsOnly ())  		addToActionQueue (Commands.CheckClientForRemoval' mstClient);  	break;  case Commands.CheckAllClientsForMessaging:  	debugWrite (dbgEvents' "[Event] Processing Messaging To ALL Clients Event.");  	foreach (MasterClient mstClient in getPlayersOnBcOnly ())  		addToActionQueue (Commands.CheckClientForMessaging' mstClient);  	break;  case Commands.CheckClientForSwapping:  	debugWrite (dbgEvents' "[Event] Processing Swap Client Event.");  	checkClientForSwap ((MasterClient)mCurrentAction.Argument);  	break;  case Commands.CheckClientForRemoval:  	debugWrite (dbgEvents' "[Event] Processing Remove Client Event.");  	checkClientForRemove ((MasterClient)mCurrentAction.Argument);  	break;  case Commands.CheckClientForMessaging:  	debugWrite (dbgEvents' "[Event] Processing Messaging To Client Event.");  	checkClientForMessage ((MasterClient)mCurrentAction.Argument);  	break;  case Commands.CheckClientForMessagingAfterJoining:  	debugWrite (dbgEvents' "[Event] Processing Messaging On Join Event.");  	String Name = (String)mCurrentAction.Argument;  	foreach (MasterClient mstClient in getPlayersOnBcOnly ())  		if (mstClient.GmClient.Name == Name) {  			checkClientForMessage (mstClient);  			break;  		}  	break;  case Commands.PlayerJoined:  	debugWrite (dbgEvents' "[Event] Processing Player Joined Event.");  	playerJoined ((String)mCurrentAction.Argument);  	break;  case Commands.PlayerLeft:  	debugWrite (dbgEvents' "[Event] Processing Player Left Event.");  	playerLeft ((String)mCurrentAction.Argument);  	break;  case Commands.PlayerSpawned:  	debugWrite (dbgEvents' "[Event] Processing Player Spawn Event.");  	playerSpawned ((String)mCurrentAction.Argument);  	break;  case Commands.PlayerSwappedTeamsOrSquads:  	debugWrite (dbgEvents' "[Event] Processing Swapped Teams or Squads Event.");  	playerSwappedTeamsOrSquads ((String)mCurrentAction.Argument' (Int32)mCurrentAction.Argument' (Int32)mCurrentAction.Argument);  	break;  case Commands.SetSyncToStaging:  	if (mEnableTSStaging) {  		debugWrite (dbgEvents' "[Event] Processing Sync to Staging event for Player.");  		SetSyncToStagingFlagForPlayer ((string)mCurrentAction.Argument);  	}  	break;  case Commands.SetSyncToTeam:  	if (mEnableTSTeam) {  		debugWrite (dbgEvents' "[Event] Processing Set Sync to Team event for Player.");  		SetSyncToTeamFlagForPlayer ((string)mCurrentAction.Argument);  	}  	break;  case Commands.SetNoSync:  	if (mEnableTSNoSync) {  		debugWrite (dbgEvents' "[Event] Processing Set No Sync event for Player.");  		SetNoSyncFlagForPlayer ((string)mCurrentAction.Argument);  	}  	break;  case Commands.ResetUserSyncFlags:  	debugWrite (dbgEvents' "[Event] Processing Sync Flag Reset for Player.");  	ResetSyncFlagsForPlayer ((string)mCurrentAction.Argument);  	break;  case Commands.ResetAllUsersSyncFlags:  	debugWrite (dbgEvents' "[Event] Resetting all player sync flags.");  	ResetAllUserSyncFlags ();  	break;  case Commands.DisplayTSSquadList:  	if (mEnableTSSquadList) {  		debugWrite (dbgEvents' "[Event] Processing DisplayTSSquadList event.");  		DisplayTsSquadList ((string)mCurrentAction.Argument);  	}  	break;  }  
Missing Default,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,performResponseHandling,The following switch statement is missing a default case: switch (mTsResponse.Id) {  case "-1":  // Socket was open and we tried to re-establish a connection.  case "-5":  // Socket was closed and we tried to send a query.  case "-6":  	// The query we tried to send was null.  	consoleWrite ("[Error] ^3Minor Error:");  	consoleWrite ("[Error] ^3{0}: {1}"' mTsResponse.Id' mTsResponse.Message);  	return true;  case "-2":  // Invalid IP Address.  case "-3":  // Invalid Port.  case "-4":  	// Error occurred when trying to establish a connection.  	consoleWrite ("[Error] ^8Fatal Error:");  	consoleWrite ("[Error] ^8An error occurred during establishing a connection to the Teamspeak 3 Server.");  	consoleWrite ("[Error] ^8Make sure your ^b\"Server Ip\"^n and ^b\"Query Port\"^n are correct.");  	consoleWrite ("[Error] ^8{0}: {1}"' mTsResponse.Id' mTsResponse.Message);  	if (!mTsReconnecting && errReconnectOnError && performReconnect ())  		return true;  	setPluginState (false);  	return false;  case "-7":  // Error occurred during sending the query.  case "-8":  	// Error occurred during receiving the response.  	consoleWrite ("[Error] ^8Fatal Error:");  	consoleWrite ("[Error] ^8An error occurred during sending and receiving data to the Teamspeak 3 Server.");  	consoleWrite ("[Error] ^8{0}: {1}"' mTsResponse.Id' mTsResponse.Message);  	if (!mTsReconnecting && errReconnectOnError && performReconnect ())  		break;  	setPluginState (false);  	return false;  case "3329":  // You are temp banned from the server for flooding.  case "3331":  	// You are temp banned from the server for 'x' seconds.  	consoleWrite ("[Error] ^8Fatal Error:");  	consoleWrite ("[Error] ^8You were temporarily banned from the Teamspeak 3 Server for flooding.");  	consoleWrite ("[Error] ^8Make sure your ^bProcon's Ip^n is in your ^bTeamspeak 3 Server's Whitelist^n.");  	consoleWrite ("[Error] ^8{0}: {1} ({2})"' mTsResponse.Id' mTsResponse.Message' mTsResponse.ExtraMessage);  	setPluginState (false);  	return false;  }  
Missing Default,PRoConEvents,TeamspeakSync,C:\repos\Pure-Battlefield_TeamspeakSync-PURE\TeamspeakSync.cs,performResponseHandling,The following switch statement is missing a default case: switch (queryCode) {  // -- Perform Open Connection ---------------------------------  case Queries.OpenConnectionEstablish:  	consoleWrite ("[Error] ^8Fatal Error:");  	consoleWrite ("[Error] ^8An error occurred during establishing a connection to the Teamspeak 3 Server.");  	consoleWrite ("[Error] ^8Make sure your ^b\"Server Ip\"^n and ^b\"Query Port\"^n are correct.");  	consoleWrite ("[Error] ^8{0}: {1}"' mTsResponse.Id' mTsResponse.Message);  	setPluginState (false);  	return false;  case Queries.OpenConnectionLogin:  	consoleWrite ("[Error] ^8Fatal Error:");  	consoleWrite ("[Error] ^8An error occurred during logging into the Teamspeak 3 Server.");  	consoleWrite ("[Error] ^8Make sure your ^b\"Query Username\"^n and ^b\"Query Password\"^n are correct.");  	consoleWrite ("[Error] ^8{0}: {1}"' mTsResponse.Id' mTsResponse.Message);  	setPluginState (false);  	return false;  case Queries.OpenConnectionUse:  	consoleWrite ("[Error] ^8Fatal Error:");  	consoleWrite ("[Error] ^8An error occurred during finding the virtual server.");  	consoleWrite ("[Error] ^8Make sure your ^b\"Server Port\"^n is correct.");  	consoleWrite ("[Error] ^8{0}: {1}"' mTsResponse.Id' mTsResponse.Message);  	setPluginState (false);  	return false;  case Queries.OpenConnectionStaging:  	consoleWrite ("[Error] ^8Fatal Error:");  	consoleWrite ("[Error] ^8An error occurred during finding the staging channel.");  	consoleWrite ("[Error] ^8Make sure your ^b\"Staging Channel Name\"^n is correct and that the channel exists in the Teamspeak 3 Server.");  	consoleWrite ("[Error] ^8{0}: {1}"' mTsResponse.Id' mTsResponse.Message);  	setPluginState (false);  	return false;  case Queries.OpenConnectionNickname:  	consoleWrite ("[Error] ^3Minor Error:");  	consoleWrite ("[Error] ^3An error occurred during changing the server query nickname.");  	consoleWrite ("[Error] ^3Make sure your ^b\"Query Nickname\"^n is not already in use.");  	consoleWrite ("[Error] ^3{0}: {1}"' mTsResponse.Id' mTsResponse.Message);  	return true;  // -- Update Teamspeak Information ----------------------------  case Queries.TsInfoClientList:  	consoleWrite ("[Error] ^3Minor Error - Update Teamspeak Information:");  	consoleWrite ("[Error] ^3An error occurred during obtaining the Teamspeak Client List.");  	consoleWrite ("[Error] ^3{0}: {1}"' mTsResponse.Id' mTsResponse.Message);  	return false;  case Queries.TsInfoChannelList:  	consoleWrite ("[Error] ^3Minor Error - Update Teamspeak Information:");  	consoleWrite ("[Error] ^3An error occurred during obtaining the Teamspeak Channel List.");  	consoleWrite ("[Error] ^3{0}: {1}"' mTsResponse.Id' mTsResponse.Message);  	return false;  case Queries.TsInfoClientInfo:  	consoleWrite ("[Error] ^3Minor Error - Update Teamspeak Information:");  	consoleWrite ("[Error] ^3An error occurred during obtaining an Advanced Client Information.");  	consoleWrite ("[Error] ^3{0}: {1}"' mTsResponse.Id' mTsResponse.Message);  	return true;  // -- Check Client for Swapping/Removing ----------------------  case Queries.CheckSwapStaging:  	consoleWrite ("[Error] ^3Minor Error - Check Client for Swapping/Removing:");  	consoleWrite ("[Error] ^3An error occurred during moving a client to the staging channel.");  	consoleWrite ("[Error] ^3{0}: {1}"' mTsResponse.Id' mTsResponse.Message);  	return false;  case Queries.CheckSwapTeam:  	consoleWrite ("[Error] ^3Minor Error - Check Client for Swapping/Removing:");  	consoleWrite ("[Error] ^3An error occurred during moving a client to a team channel.");  	consoleWrite ("[Error] ^3{0}: {1}"' mTsResponse.Id' mTsResponse.Message);  	return false;  case Queries.CheckSwapSquad:  	consoleWrite ("[Error] ^3Minor Error - Check Client for Swapping/Removing:");  	consoleWrite ("[Error] ^3An error occurred during moving a client to a squad channel.");  	consoleWrite ("[Error] ^3{0}: {1}"' mTsResponse.Id' mTsResponse.Message);  	return false;  case Queries.CheckRemove:  	consoleWrite ("[Error] ^3Minor Error - Check Client for Swapping/Removing:");  	consoleWrite ("[Error] ^3An error occurred during removing a client to the staging channel.");  	consoleWrite ("[Error] ^3{0}: {1}"' mTsResponse.Id' mTsResponse.Message);  	return false;  // -- Find or Create Channels ---------------------------------  case Queries.FindTeamChannelList:  	consoleWrite ("[Error] ^3Minor Error - Find or Create Channels:");  	consoleWrite ("[Error] ^3An error occurred during obtaining the Teamspeak Channel List while looking for a team channel.");  	consoleWrite ("[Error] ^3{0}: {1}"' mTsResponse.Id' mTsResponse.Message);  	return false;  case Queries.FindSquadChannelList:  	consoleWrite ("[Error] ^3Minor Error - Find or Create Channels:");  	consoleWrite ("[Error] ^3An error occurred during obtaining the Teamspeak Channel List while looking for a squad channel.");  	consoleWrite ("[Error] ^3{0}: {1}"' mTsResponse.Id' mTsResponse.Message);  	return false;  case Queries.CreateTeamChannelQuery:  	consoleWrite ("[Error] ^3Minor Error - Find or Create Channels:");  	consoleWrite ("[Error] ^3An error occurred during creating a team channel.");  	consoleWrite ("[Error] ^3{0}: {1}"' mTsResponse.Id' mTsResponse.Message);  	return false;  case Queries.CreateTeamChannelInfo:  	consoleWrite ("[Error] ^3Minor Error - Find or Create Channels:");  	consoleWrite ("[Error] ^3An error occurred during requesting advanced information about the new team channel.");  	consoleWrite ("[Error] ^3{0}: {1}"' mTsResponse.Id' mTsResponse.Message);  	return false;  case Queries.CreateSquadChannelQuery:  	consoleWrite ("[Error] ^3Minor Error - Find or Create Channels:");  	consoleWrite ("[Error] ^3An error occurred during creating a squad channel.");  	consoleWrite ("[Error] ^3{0}: {1}"' mTsResponse.Id' mTsResponse.Message);  	return false;  case Queries.CreateSquadChannelInfo:  	consoleWrite ("[Error] ^3Minor Error - Find or Create Channels:");  	consoleWrite ("[Error] ^3An error occurred during requesting advanced information about the new squad channel.");  	consoleWrite ("[Error] ^3{0}: {1}"' mTsResponse.Id' mTsResponse.Message);  	return false;  // -- Remove Channels -----------------------------------------  case Queries.RemoveChannelsList:  	consoleWrite ("[Error] ^3Minor Error - Remove Channels:");  	consoleWrite ("[Error] ^3An error occurred during obtaining the Teamspeak Channel List.");  	consoleWrite ("[Error] ^3{0}: {1}"' mTsResponse.Id' mTsResponse.Message);  	return false;  case Queries.RemoveChannelsTeamQuery:  	consoleWrite ("[Error] ^3Minor Error - Remove Channels:");  	consoleWrite ("[Error] ^3An error occurred during removing a team channel.");  	consoleWrite ("[Error] ^3{0}: {1}"' mTsResponse.Id' mTsResponse.Message);  	return true;  case Queries.RemoveChannelsSquadQuery:  	consoleWrite ("[Error] ^3Minor Error - Remove Channels:");  	consoleWrite ("[Error] ^3An error occurred during removing a squad channel.");  	consoleWrite ("[Error] ^3{0}: {1}"' mTsResponse.Id' mTsResponse.Message);  	return true;  }  
