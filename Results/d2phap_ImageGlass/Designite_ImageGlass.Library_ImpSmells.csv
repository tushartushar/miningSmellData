Implementation smell,Namespace,Class,File,Method,Description
Long Method,ImageGlass.Library,Language,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.Library\Language\Language.cs,InitDefaultLanguageDictionary,The method has 331 lines of code.
Complex Method,ImageGlass.Library.Comparer,StringLogicalComparer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.Library\Comparer\StringLogicalComparer.cs,Compare,Cyclomatic complexity of the method is 11
Long Statement,ImageGlass.Library,Language,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.Library\Language\Language.cs,InitDefaultLanguageDictionary,The length of the statement  "            Items.Add("frmMain.picMain._ErrorText"' "ImageGlass cannot open this picture because the file appears to be damaged' corrupted or not supported.");//v2.0 beta' updated 4.0 " is 171.
Long Statement,ImageGlass.Library,Language,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.Library\Language\Language.cs,InitDefaultLanguageDictionary,The length of the statement  "            Items.Add("frmMain._FullScreenMessage"' "Press ALT + ENTER to exit full screen mode.\nOr CTRL + F1 to show menu.");//v2.0 beta " is 126.
Long Statement,ImageGlass.Library,Language,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.Library\Language\Language.cs,InitDefaultLanguageDictionary,The length of the statement  "            Items.Add("frmSetting.chkImageBoosterBack"' "Turn on Image Booster when navigate back (need more ~20% RAM)"); //v2.0 final " is 122.
Long Statement,ImageGlass.Library,Language,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.Library\Language\Language.cs,InitDefaultLanguageDictionary,The length of the statement  "            Items.Add("frmSetting.chkLoopSlideshow"' "Loop back slideshow to the first image when reaching the end of the list"); //v2.0 final " is 130.
Long Statement,ImageGlass.Library,Language,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.Library\Language\Language.cs,InitDefaultLanguageDictionary,The length of the statement  "            Items.Add("frmSetting.lblExtensionsGroupDescription"' "*Optional formats will not be automatically pre-loaded into memory."); // 4.0 " is 132.
Long Statement,ImageGlass.Library,Language,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.Library\Language\Language.cs,InitDefaultLanguageDictionary,The length of the statement  "            //this.Items.Add("frmSetting.lbl_ContextMenu_Description"' "This feature helps you open an image quickly by context menu. 'Add default' button lets you add the context menu into all supported extensions of ImageGlass. If you want to customize your extensions' please modify them in 'Extensions' textbox' and then click 'Update' button. 'Remove all' button lets you remove all context menus related to ImageGlass.\n\nAdd shortcut 'Open with ImageGlass' to context menu."); //removed 2.0 final " is 491.
Long Statement,ImageGlass.Library.Image,ImageInfo,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.Library\Image\ImageInfo.cs,ConvertImage,The length of the statement  "            s.Filter = "BMP|*.bmp|EMF|*.emf|EXIF|*.exif|GIF|*.gif|ICO|*.ico|JPG|*.jpg|PNG|*.png|TIFF|*.tiff|WMF|*.wmf|Base64String (*.txt)|*.txt"; " is 134.
Long Statement,ImageGlass.Library.Image,ImageInfo,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.Library\Image\ImageInfo.cs,ConvertImage,The length of the statement  "                                MessageBox.Show("Sorry' ImageGlass cannot convert this image because this error: \n" + ex.Message' "Error"' MessageBoxButtons.OK' MessageBoxIcon.Error); " is 152.
Complex Conditional,ImageGlass.Library.Comparer,StringLogicalComparer,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.Library\Comparer\StringLogicalComparer.cs,Compare,The conditional expression  "(letter1 && letter2) || (!letter1 && !letter2)"  is complex.
Empty Catch Block,ImageGlass.Library,DirectoryFinder,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.Library\DirectoryFinder\DirectoryFinder.cs,FindDirectories,The method has an empty catch block.
Empty Catch Block,ImageGlass.Library,DirectoryFinder,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.Library\DirectoryFinder\DirectoryFinder.cs,FindDirectories,The method has an empty catch block.
Empty Catch Block,ImageGlass.Library,DirectoryFinder,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.Library\DirectoryFinder\DirectoryFinder.cs,FindDirectories,The method has an empty catch block.
Empty Catch Block,ImageGlass.Library,DirectoryFinder,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.Library\DirectoryFinder\DirectoryFinder.cs,FindFiles,The method has an empty catch block.
Empty Catch Block,ImageGlass.Library,DirectoryFinder,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.Library\DirectoryFinder\DirectoryFinder.cs,FindFiles,The method has an empty catch block.
Empty Catch Block,ImageGlass.Library,DirectoryFinder,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.Library\DirectoryFinder\DirectoryFinder.cs,FindFiles,The method has an empty catch block.
Empty Catch Block,ImageGlass.Library,DirectoryFinder,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.Library\DirectoryFinder\DirectoryFinder.cs,FindFiles,The method has an empty catch block.
Empty Catch Block,ImageGlass.Library,Language,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.Library\Language\Language.cs,ReadLanguageFile,The method has an empty catch block.
Empty Catch Block,ImageGlass.Library.Image,DesktopWallapaper,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.Library\Image\DesktopWallapaper.cs,Set,The method has an empty catch block.
Empty Catch Block,ImageGlass.Library.Image,ImageInfo,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.Library\Image\ImageInfo.cs,GetFileSize,The method has an empty catch block.
Empty Catch Block,ImageGlass.Library.Image,ImageInfo,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.Library\Image\ImageInfo.cs,GetImageResolution,The method has an empty catch block.
Magic Number,ImageGlass.Library.Image,ExifThumbReader,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.Library\Image\ExifThumbReader.cs,ReadThumb,The following statement contains a magic number: const int GDI_ERR_PROP_NOT_FOUND = 19;
Magic Number,ImageGlass.Library.Image,ExifThumbReader,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.Library\Image\ExifThumbReader.cs,ReadThumb,The following statement contains a magic number: const int GDI_ERR_OUT_OF_MEMORY = 3;
Magic Number,ImageGlass.Library.Image,ExifThumbReader,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.Library\Image\ExifThumbReader.cs,createException,The following statement contains a magic number: switch (gdipErrorCode)              {                  case 1:                      return new ExternalException("Gdiplus Generic Error"' -2147467259);                  case 2:                      return new ArgumentException("Gdiplus Invalid Parameter");                  case 3:                      return new OutOfMemoryException("Gdiplus Out Of Memory");                  case 4:                      return new InvalidOperationException("Gdiplus Object Busy");                  case 5:                      return new OutOfMemoryException("Gdiplus Insufficient Buffer");                  case 7:                      return new ExternalException("Gdiplus Generic Error"' -2147467259);                  case 8:                      return new InvalidOperationException("Gdiplus Wrong State");                  case 9:                      return new ExternalException("Gdiplus Aborted"' -2147467260);                  case 10:                      return new FileNotFoundException("Gdiplus File Not Found");                  case 11:                      return new OverflowException("Gdiplus Over flow");                  case 12:                      return new ExternalException("Gdiplus Access Denied"' -2147024891);                  case 13:                      return new ArgumentException("Gdiplus Unknown Image Format");                  case 18:                      return new ExternalException("Gdiplus Not Initialized"' -2147467259);                  case 20:                      return new ArgumentException("Gdiplus Property Not Supported Error");              }
Magic Number,ImageGlass.Library.Image,ExifThumbReader,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.Library\Image\ExifThumbReader.cs,createException,The following statement contains a magic number: switch (gdipErrorCode)              {                  case 1:                      return new ExternalException("Gdiplus Generic Error"' -2147467259);                  case 2:                      return new ArgumentException("Gdiplus Invalid Parameter");                  case 3:                      return new OutOfMemoryException("Gdiplus Out Of Memory");                  case 4:                      return new InvalidOperationException("Gdiplus Object Busy");                  case 5:                      return new OutOfMemoryException("Gdiplus Insufficient Buffer");                  case 7:                      return new ExternalException("Gdiplus Generic Error"' -2147467259);                  case 8:                      return new InvalidOperationException("Gdiplus Wrong State");                  case 9:                      return new ExternalException("Gdiplus Aborted"' -2147467260);                  case 10:                      return new FileNotFoundException("Gdiplus File Not Found");                  case 11:                      return new OverflowException("Gdiplus Over flow");                  case 12:                      return new ExternalException("Gdiplus Access Denied"' -2147024891);                  case 13:                      return new ArgumentException("Gdiplus Unknown Image Format");                  case 18:                      return new ExternalException("Gdiplus Not Initialized"' -2147467259);                  case 20:                      return new ArgumentException("Gdiplus Property Not Supported Error");              }
Magic Number,ImageGlass.Library.Image,ExifThumbReader,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.Library\Image\ExifThumbReader.cs,createException,The following statement contains a magic number: switch (gdipErrorCode)              {                  case 1:                      return new ExternalException("Gdiplus Generic Error"' -2147467259);                  case 2:                      return new ArgumentException("Gdiplus Invalid Parameter");                  case 3:                      return new OutOfMemoryException("Gdiplus Out Of Memory");                  case 4:                      return new InvalidOperationException("Gdiplus Object Busy");                  case 5:                      return new OutOfMemoryException("Gdiplus Insufficient Buffer");                  case 7:                      return new ExternalException("Gdiplus Generic Error"' -2147467259);                  case 8:                      return new InvalidOperationException("Gdiplus Wrong State");                  case 9:                      return new ExternalException("Gdiplus Aborted"' -2147467260);                  case 10:                      return new FileNotFoundException("Gdiplus File Not Found");                  case 11:                      return new OverflowException("Gdiplus Over flow");                  case 12:                      return new ExternalException("Gdiplus Access Denied"' -2147024891);                  case 13:                      return new ArgumentException("Gdiplus Unknown Image Format");                  case 18:                      return new ExternalException("Gdiplus Not Initialized"' -2147467259);                  case 20:                      return new ArgumentException("Gdiplus Property Not Supported Error");              }
Magic Number,ImageGlass.Library.Image,ExifThumbReader,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.Library\Image\ExifThumbReader.cs,createException,The following statement contains a magic number: switch (gdipErrorCode)              {                  case 1:                      return new ExternalException("Gdiplus Generic Error"' -2147467259);                  case 2:                      return new ArgumentException("Gdiplus Invalid Parameter");                  case 3:                      return new OutOfMemoryException("Gdiplus Out Of Memory");                  case 4:                      return new InvalidOperationException("Gdiplus Object Busy");                  case 5:                      return new OutOfMemoryException("Gdiplus Insufficient Buffer");                  case 7:                      return new ExternalException("Gdiplus Generic Error"' -2147467259);                  case 8:                      return new InvalidOperationException("Gdiplus Wrong State");                  case 9:                      return new ExternalException("Gdiplus Aborted"' -2147467260);                  case 10:                      return new FileNotFoundException("Gdiplus File Not Found");                  case 11:                      return new OverflowException("Gdiplus Over flow");                  case 12:                      return new ExternalException("Gdiplus Access Denied"' -2147024891);                  case 13:                      return new ArgumentException("Gdiplus Unknown Image Format");                  case 18:                      return new ExternalException("Gdiplus Not Initialized"' -2147467259);                  case 20:                      return new ArgumentException("Gdiplus Property Not Supported Error");              }
Magic Number,ImageGlass.Library.Image,ExifThumbReader,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.Library\Image\ExifThumbReader.cs,createException,The following statement contains a magic number: switch (gdipErrorCode)              {                  case 1:                      return new ExternalException("Gdiplus Generic Error"' -2147467259);                  case 2:                      return new ArgumentException("Gdiplus Invalid Parameter");                  case 3:                      return new OutOfMemoryException("Gdiplus Out Of Memory");                  case 4:                      return new InvalidOperationException("Gdiplus Object Busy");                  case 5:                      return new OutOfMemoryException("Gdiplus Insufficient Buffer");                  case 7:                      return new ExternalException("Gdiplus Generic Error"' -2147467259);                  case 8:                      return new InvalidOperationException("Gdiplus Wrong State");                  case 9:                      return new ExternalException("Gdiplus Aborted"' -2147467260);                  case 10:                      return new FileNotFoundException("Gdiplus File Not Found");                  case 11:                      return new OverflowException("Gdiplus Over flow");                  case 12:                      return new ExternalException("Gdiplus Access Denied"' -2147024891);                  case 13:                      return new ArgumentException("Gdiplus Unknown Image Format");                  case 18:                      return new ExternalException("Gdiplus Not Initialized"' -2147467259);                  case 20:                      return new ArgumentException("Gdiplus Property Not Supported Error");              }
Magic Number,ImageGlass.Library.Image,ExifThumbReader,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.Library\Image\ExifThumbReader.cs,createException,The following statement contains a magic number: switch (gdipErrorCode)              {                  case 1:                      return new ExternalException("Gdiplus Generic Error"' -2147467259);                  case 2:                      return new ArgumentException("Gdiplus Invalid Parameter");                  case 3:                      return new OutOfMemoryException("Gdiplus Out Of Memory");                  case 4:                      return new InvalidOperationException("Gdiplus Object Busy");                  case 5:                      return new OutOfMemoryException("Gdiplus Insufficient Buffer");                  case 7:                      return new ExternalException("Gdiplus Generic Error"' -2147467259);                  case 8:                      return new InvalidOperationException("Gdiplus Wrong State");                  case 9:                      return new ExternalException("Gdiplus Aborted"' -2147467260);                  case 10:                      return new FileNotFoundException("Gdiplus File Not Found");                  case 11:                      return new OverflowException("Gdiplus Over flow");                  case 12:                      return new ExternalException("Gdiplus Access Denied"' -2147024891);                  case 13:                      return new ArgumentException("Gdiplus Unknown Image Format");                  case 18:                      return new ExternalException("Gdiplus Not Initialized"' -2147467259);                  case 20:                      return new ArgumentException("Gdiplus Property Not Supported Error");              }
Magic Number,ImageGlass.Library.Image,ExifThumbReader,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.Library\Image\ExifThumbReader.cs,createException,The following statement contains a magic number: switch (gdipErrorCode)              {                  case 1:                      return new ExternalException("Gdiplus Generic Error"' -2147467259);                  case 2:                      return new ArgumentException("Gdiplus Invalid Parameter");                  case 3:                      return new OutOfMemoryException("Gdiplus Out Of Memory");                  case 4:                      return new InvalidOperationException("Gdiplus Object Busy");                  case 5:                      return new OutOfMemoryException("Gdiplus Insufficient Buffer");                  case 7:                      return new ExternalException("Gdiplus Generic Error"' -2147467259);                  case 8:                      return new InvalidOperationException("Gdiplus Wrong State");                  case 9:                      return new ExternalException("Gdiplus Aborted"' -2147467260);                  case 10:                      return new FileNotFoundException("Gdiplus File Not Found");                  case 11:                      return new OverflowException("Gdiplus Over flow");                  case 12:                      return new ExternalException("Gdiplus Access Denied"' -2147024891);                  case 13:                      return new ArgumentException("Gdiplus Unknown Image Format");                  case 18:                      return new ExternalException("Gdiplus Not Initialized"' -2147467259);                  case 20:                      return new ArgumentException("Gdiplus Property Not Supported Error");              }
Magic Number,ImageGlass.Library.Image,ExifThumbReader,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.Library\Image\ExifThumbReader.cs,createException,The following statement contains a magic number: switch (gdipErrorCode)              {                  case 1:                      return new ExternalException("Gdiplus Generic Error"' -2147467259);                  case 2:                      return new ArgumentException("Gdiplus Invalid Parameter");                  case 3:                      return new OutOfMemoryException("Gdiplus Out Of Memory");                  case 4:                      return new InvalidOperationException("Gdiplus Object Busy");                  case 5:                      return new OutOfMemoryException("Gdiplus Insufficient Buffer");                  case 7:                      return new ExternalException("Gdiplus Generic Error"' -2147467259);                  case 8:                      return new InvalidOperationException("Gdiplus Wrong State");                  case 9:                      return new ExternalException("Gdiplus Aborted"' -2147467260);                  case 10:                      return new FileNotFoundException("Gdiplus File Not Found");                  case 11:                      return new OverflowException("Gdiplus Over flow");                  case 12:                      return new ExternalException("Gdiplus Access Denied"' -2147024891);                  case 13:                      return new ArgumentException("Gdiplus Unknown Image Format");                  case 18:                      return new ExternalException("Gdiplus Not Initialized"' -2147467259);                  case 20:                      return new ArgumentException("Gdiplus Property Not Supported Error");              }
Magic Number,ImageGlass.Library.Image,ExifThumbReader,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.Library\Image\ExifThumbReader.cs,createException,The following statement contains a magic number: switch (gdipErrorCode)              {                  case 1:                      return new ExternalException("Gdiplus Generic Error"' -2147467259);                  case 2:                      return new ArgumentException("Gdiplus Invalid Parameter");                  case 3:                      return new OutOfMemoryException("Gdiplus Out Of Memory");                  case 4:                      return new InvalidOperationException("Gdiplus Object Busy");                  case 5:                      return new OutOfMemoryException("Gdiplus Insufficient Buffer");                  case 7:                      return new ExternalException("Gdiplus Generic Error"' -2147467259);                  case 8:                      return new InvalidOperationException("Gdiplus Wrong State");                  case 9:                      return new ExternalException("Gdiplus Aborted"' -2147467260);                  case 10:                      return new FileNotFoundException("Gdiplus File Not Found");                  case 11:                      return new OverflowException("Gdiplus Over flow");                  case 12:                      return new ExternalException("Gdiplus Access Denied"' -2147024891);                  case 13:                      return new ArgumentException("Gdiplus Unknown Image Format");                  case 18:                      return new ExternalException("Gdiplus Not Initialized"' -2147467259);                  case 20:                      return new ArgumentException("Gdiplus Property Not Supported Error");              }
Magic Number,ImageGlass.Library.Image,ExifThumbReader,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.Library\Image\ExifThumbReader.cs,createException,The following statement contains a magic number: switch (gdipErrorCode)              {                  case 1:                      return new ExternalException("Gdiplus Generic Error"' -2147467259);                  case 2:                      return new ArgumentException("Gdiplus Invalid Parameter");                  case 3:                      return new OutOfMemoryException("Gdiplus Out Of Memory");                  case 4:                      return new InvalidOperationException("Gdiplus Object Busy");                  case 5:                      return new OutOfMemoryException("Gdiplus Insufficient Buffer");                  case 7:                      return new ExternalException("Gdiplus Generic Error"' -2147467259);                  case 8:                      return new InvalidOperationException("Gdiplus Wrong State");                  case 9:                      return new ExternalException("Gdiplus Aborted"' -2147467260);                  case 10:                      return new FileNotFoundException("Gdiplus File Not Found");                  case 11:                      return new OverflowException("Gdiplus Over flow");                  case 12:                      return new ExternalException("Gdiplus Access Denied"' -2147024891);                  case 13:                      return new ArgumentException("Gdiplus Unknown Image Format");                  case 18:                      return new ExternalException("Gdiplus Not Initialized"' -2147467259);                  case 20:                      return new ArgumentException("Gdiplus Property Not Supported Error");              }
Magic Number,ImageGlass.Library.Image,ExifThumbReader,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.Library\Image\ExifThumbReader.cs,createException,The following statement contains a magic number: switch (gdipErrorCode)              {                  case 1:                      return new ExternalException("Gdiplus Generic Error"' -2147467259);                  case 2:                      return new ArgumentException("Gdiplus Invalid Parameter");                  case 3:                      return new OutOfMemoryException("Gdiplus Out Of Memory");                  case 4:                      return new InvalidOperationException("Gdiplus Object Busy");                  case 5:                      return new OutOfMemoryException("Gdiplus Insufficient Buffer");                  case 7:                      return new ExternalException("Gdiplus Generic Error"' -2147467259);                  case 8:                      return new InvalidOperationException("Gdiplus Wrong State");                  case 9:                      return new ExternalException("Gdiplus Aborted"' -2147467260);                  case 10:                      return new FileNotFoundException("Gdiplus File Not Found");                  case 11:                      return new OverflowException("Gdiplus Over flow");                  case 12:                      return new ExternalException("Gdiplus Access Denied"' -2147024891);                  case 13:                      return new ArgumentException("Gdiplus Unknown Image Format");                  case 18:                      return new ExternalException("Gdiplus Not Initialized"' -2147467259);                  case 20:                      return new ArgumentException("Gdiplus Property Not Supported Error");              }
Magic Number,ImageGlass.Library.Image,ExifThumbReader,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.Library\Image\ExifThumbReader.cs,createException,The following statement contains a magic number: switch (gdipErrorCode)              {                  case 1:                      return new ExternalException("Gdiplus Generic Error"' -2147467259);                  case 2:                      return new ArgumentException("Gdiplus Invalid Parameter");                  case 3:                      return new OutOfMemoryException("Gdiplus Out Of Memory");                  case 4:                      return new InvalidOperationException("Gdiplus Object Busy");                  case 5:                      return new OutOfMemoryException("Gdiplus Insufficient Buffer");                  case 7:                      return new ExternalException("Gdiplus Generic Error"' -2147467259);                  case 8:                      return new InvalidOperationException("Gdiplus Wrong State");                  case 9:                      return new ExternalException("Gdiplus Aborted"' -2147467260);                  case 10:                      return new FileNotFoundException("Gdiplus File Not Found");                  case 11:                      return new OverflowException("Gdiplus Over flow");                  case 12:                      return new ExternalException("Gdiplus Access Denied"' -2147024891);                  case 13:                      return new ArgumentException("Gdiplus Unknown Image Format");                  case 18:                      return new ExternalException("Gdiplus Not Initialized"' -2147467259);                  case 20:                      return new ArgumentException("Gdiplus Property Not Supported Error");              }
Magic Number,ImageGlass.Library.Image,ExifThumbReader,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.Library\Image\ExifThumbReader.cs,createException,The following statement contains a magic number: switch (gdipErrorCode)              {                  case 1:                      return new ExternalException("Gdiplus Generic Error"' -2147467259);                  case 2:                      return new ArgumentException("Gdiplus Invalid Parameter");                  case 3:                      return new OutOfMemoryException("Gdiplus Out Of Memory");                  case 4:                      return new InvalidOperationException("Gdiplus Object Busy");                  case 5:                      return new OutOfMemoryException("Gdiplus Insufficient Buffer");                  case 7:                      return new ExternalException("Gdiplus Generic Error"' -2147467259);                  case 8:                      return new InvalidOperationException("Gdiplus Wrong State");                  case 9:                      return new ExternalException("Gdiplus Aborted"' -2147467260);                  case 10:                      return new FileNotFoundException("Gdiplus File Not Found");                  case 11:                      return new OverflowException("Gdiplus Over flow");                  case 12:                      return new ExternalException("Gdiplus Access Denied"' -2147024891);                  case 13:                      return new ArgumentException("Gdiplus Unknown Image Format");                  case 18:                      return new ExternalException("Gdiplus Not Initialized"' -2147467259);                  case 20:                      return new ArgumentException("Gdiplus Property Not Supported Error");              }
Magic Number,ImageGlass.Library.Image,ExifThumbReader,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.Library\Image\ExifThumbReader.cs,createException,The following statement contains a magic number: switch (gdipErrorCode)              {                  case 1:                      return new ExternalException("Gdiplus Generic Error"' -2147467259);                  case 2:                      return new ArgumentException("Gdiplus Invalid Parameter");                  case 3:                      return new OutOfMemoryException("Gdiplus Out Of Memory");                  case 4:                      return new InvalidOperationException("Gdiplus Object Busy");                  case 5:                      return new OutOfMemoryException("Gdiplus Insufficient Buffer");                  case 7:                      return new ExternalException("Gdiplus Generic Error"' -2147467259);                  case 8:                      return new InvalidOperationException("Gdiplus Wrong State");                  case 9:                      return new ExternalException("Gdiplus Aborted"' -2147467260);                  case 10:                      return new FileNotFoundException("Gdiplus File Not Found");                  case 11:                      return new OverflowException("Gdiplus Over flow");                  case 12:                      return new ExternalException("Gdiplus Access Denied"' -2147024891);                  case 13:                      return new ArgumentException("Gdiplus Unknown Image Format");                  case 18:                      return new ExternalException("Gdiplus Not Initialized"' -2147467259);                  case 20:                      return new ArgumentException("Gdiplus Property Not Supported Error");              }
Magic Number,ImageGlass.Library.Image,ExifThumbReader,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.Library\Image\ExifThumbReader.cs,createException,The following statement contains a magic number: switch (gdipErrorCode)              {                  case 1:                      return new ExternalException("Gdiplus Generic Error"' -2147467259);                  case 2:                      return new ArgumentException("Gdiplus Invalid Parameter");                  case 3:                      return new OutOfMemoryException("Gdiplus Out Of Memory");                  case 4:                      return new InvalidOperationException("Gdiplus Object Busy");                  case 5:                      return new OutOfMemoryException("Gdiplus Insufficient Buffer");                  case 7:                      return new ExternalException("Gdiplus Generic Error"' -2147467259);                  case 8:                      return new InvalidOperationException("Gdiplus Wrong State");                  case 9:                      return new ExternalException("Gdiplus Aborted"' -2147467260);                  case 10:                      return new FileNotFoundException("Gdiplus File Not Found");                  case 11:                      return new OverflowException("Gdiplus Over flow");                  case 12:                      return new ExternalException("Gdiplus Access Denied"' -2147024891);                  case 13:                      return new ArgumentException("Gdiplus Unknown Image Format");                  case 18:                      return new ExternalException("Gdiplus Not Initialized"' -2147467259);                  case 20:                      return new ArgumentException("Gdiplus Property Not Supported Error");              }
Magic Number,ImageGlass.Library.Image,ExifThumbReader,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.Library\Image\ExifThumbReader.cs,createException,The following statement contains a magic number: switch (gdipErrorCode)              {                  case 1:                      return new ExternalException("Gdiplus Generic Error"' -2147467259);                  case 2:                      return new ArgumentException("Gdiplus Invalid Parameter");                  case 3:                      return new OutOfMemoryException("Gdiplus Out Of Memory");                  case 4:                      return new InvalidOperationException("Gdiplus Object Busy");                  case 5:                      return new OutOfMemoryException("Gdiplus Insufficient Buffer");                  case 7:                      return new ExternalException("Gdiplus Generic Error"' -2147467259);                  case 8:                      return new InvalidOperationException("Gdiplus Wrong State");                  case 9:                      return new ExternalException("Gdiplus Aborted"' -2147467260);                  case 10:                      return new FileNotFoundException("Gdiplus File Not Found");                  case 11:                      return new OverflowException("Gdiplus Over flow");                  case 12:                      return new ExternalException("Gdiplus Access Denied"' -2147024891);                  case 13:                      return new ArgumentException("Gdiplus Unknown Image Format");                  case 18:                      return new ExternalException("Gdiplus Not Initialized"' -2147467259);                  case 20:                      return new ArgumentException("Gdiplus Property Not Supported Error");              }
Magic Number,ImageGlass.Library.Image,ExifThumbReader,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.Library\Image\ExifThumbReader.cs,createException,The following statement contains a magic number: switch (gdipErrorCode)              {                  case 1:                      return new ExternalException("Gdiplus Generic Error"' -2147467259);                  case 2:                      return new ArgumentException("Gdiplus Invalid Parameter");                  case 3:                      return new OutOfMemoryException("Gdiplus Out Of Memory");                  case 4:                      return new InvalidOperationException("Gdiplus Object Busy");                  case 5:                      return new OutOfMemoryException("Gdiplus Insufficient Buffer");                  case 7:                      return new ExternalException("Gdiplus Generic Error"' -2147467259);                  case 8:                      return new InvalidOperationException("Gdiplus Wrong State");                  case 9:                      return new ExternalException("Gdiplus Aborted"' -2147467260);                  case 10:                      return new FileNotFoundException("Gdiplus File Not Found");                  case 11:                      return new OverflowException("Gdiplus Over flow");                  case 12:                      return new ExternalException("Gdiplus Access Denied"' -2147024891);                  case 13:                      return new ArgumentException("Gdiplus Unknown Image Format");                  case 18:                      return new ExternalException("Gdiplus Not Initialized"' -2147467259);                  case 20:                      return new ArgumentException("Gdiplus Property Not Supported Error");              }
Magic Number,ImageGlass.Library.Image,ExifThumbReader,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.Library\Image\ExifThumbReader.cs,createException,The following statement contains a magic number: switch (gdipErrorCode)              {                  case 1:                      return new ExternalException("Gdiplus Generic Error"' -2147467259);                  case 2:                      return new ArgumentException("Gdiplus Invalid Parameter");                  case 3:                      return new OutOfMemoryException("Gdiplus Out Of Memory");                  case 4:                      return new InvalidOperationException("Gdiplus Object Busy");                  case 5:                      return new OutOfMemoryException("Gdiplus Insufficient Buffer");                  case 7:                      return new ExternalException("Gdiplus Generic Error"' -2147467259);                  case 8:                      return new InvalidOperationException("Gdiplus Wrong State");                  case 9:                      return new ExternalException("Gdiplus Aborted"' -2147467260);                  case 10:                      return new FileNotFoundException("Gdiplus File Not Found");                  case 11:                      return new OverflowException("Gdiplus Over flow");                  case 12:                      return new ExternalException("Gdiplus Access Denied"' -2147024891);                  case 13:                      return new ArgumentException("Gdiplus Unknown Image Format");                  case 18:                      return new ExternalException("Gdiplus Not Initialized"' -2147467259);                  case 20:                      return new ArgumentException("Gdiplus Property Not Supported Error");              }
Magic Number,ImageGlass.Library.Image,ExifThumbReader,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.Library\Image\ExifThumbReader.cs,createException,The following statement contains a magic number: return new ExternalException("Gdiplus Unknown Error"' -2147418113);
Magic Number,ImageGlass.Library.Image,ImageInfo,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.Library\Image\ImageInfo.cs,DisplayFileProperties,The following statement contains a magic number: const int SW_SHOW = 5;
Magic Number,ImageGlass.Library.Image,ImageInfo,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.Library\Image\ImageInfo.cs,ConvertImage,The following statement contains a magic number: switch (ext.ToLower())              {                  case "bmp":                      s.FilterIndex = 1;                      break;                  case "emf":                      s.FilterIndex = 2;                      break;                  case "exif":                      s.FilterIndex = 3;                      break;                  case "gif":                      s.FilterIndex = 4;                      break;                  case "ico":                      s.FilterIndex = 5;                      break;                  case "jpg":                      s.FilterIndex = 6;                      break;                  case "png":                      s.FilterIndex = 7;                      break;                  case "tiff":                      s.FilterIndex = 8;                      break;                  case "wmf":                      s.FilterIndex = 9;                      break;              }
Magic Number,ImageGlass.Library.Image,ImageInfo,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.Library\Image\ImageInfo.cs,ConvertImage,The following statement contains a magic number: switch (ext.ToLower())              {                  case "bmp":                      s.FilterIndex = 1;                      break;                  case "emf":                      s.FilterIndex = 2;                      break;                  case "exif":                      s.FilterIndex = 3;                      break;                  case "gif":                      s.FilterIndex = 4;                      break;                  case "ico":                      s.FilterIndex = 5;                      break;                  case "jpg":                      s.FilterIndex = 6;                      break;                  case "png":                      s.FilterIndex = 7;                      break;                  case "tiff":                      s.FilterIndex = 8;                      break;                  case "wmf":                      s.FilterIndex = 9;                      break;              }
Magic Number,ImageGlass.Library.Image,ImageInfo,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.Library\Image\ImageInfo.cs,ConvertImage,The following statement contains a magic number: switch (ext.ToLower())              {                  case "bmp":                      s.FilterIndex = 1;                      break;                  case "emf":                      s.FilterIndex = 2;                      break;                  case "exif":                      s.FilterIndex = 3;                      break;                  case "gif":                      s.FilterIndex = 4;                      break;                  case "ico":                      s.FilterIndex = 5;                      break;                  case "jpg":                      s.FilterIndex = 6;                      break;                  case "png":                      s.FilterIndex = 7;                      break;                  case "tiff":                      s.FilterIndex = 8;                      break;                  case "wmf":                      s.FilterIndex = 9;                      break;              }
Magic Number,ImageGlass.Library.Image,ImageInfo,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.Library\Image\ImageInfo.cs,ConvertImage,The following statement contains a magic number: switch (ext.ToLower())              {                  case "bmp":                      s.FilterIndex = 1;                      break;                  case "emf":                      s.FilterIndex = 2;                      break;                  case "exif":                      s.FilterIndex = 3;                      break;                  case "gif":                      s.FilterIndex = 4;                      break;                  case "ico":                      s.FilterIndex = 5;                      break;                  case "jpg":                      s.FilterIndex = 6;                      break;                  case "png":                      s.FilterIndex = 7;                      break;                  case "tiff":                      s.FilterIndex = 8;                      break;                  case "wmf":                      s.FilterIndex = 9;                      break;              }
Magic Number,ImageGlass.Library.Image,ImageInfo,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.Library\Image\ImageInfo.cs,ConvertImage,The following statement contains a magic number: switch (ext.ToLower())              {                  case "bmp":                      s.FilterIndex = 1;                      break;                  case "emf":                      s.FilterIndex = 2;                      break;                  case "exif":                      s.FilterIndex = 3;                      break;                  case "gif":                      s.FilterIndex = 4;                      break;                  case "ico":                      s.FilterIndex = 5;                      break;                  case "jpg":                      s.FilterIndex = 6;                      break;                  case "png":                      s.FilterIndex = 7;                      break;                  case "tiff":                      s.FilterIndex = 8;                      break;                  case "wmf":                      s.FilterIndex = 9;                      break;              }
Magic Number,ImageGlass.Library.Image,ImageInfo,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.Library\Image\ImageInfo.cs,ConvertImage,The following statement contains a magic number: switch (ext.ToLower())              {                  case "bmp":                      s.FilterIndex = 1;                      break;                  case "emf":                      s.FilterIndex = 2;                      break;                  case "exif":                      s.FilterIndex = 3;                      break;                  case "gif":                      s.FilterIndex = 4;                      break;                  case "ico":                      s.FilterIndex = 5;                      break;                  case "jpg":                      s.FilterIndex = 6;                      break;                  case "png":                      s.FilterIndex = 7;                      break;                  case "tiff":                      s.FilterIndex = 8;                      break;                  case "wmf":                      s.FilterIndex = 9;                      break;              }
Magic Number,ImageGlass.Library.Image,ImageInfo,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.Library\Image\ImageInfo.cs,ConvertImage,The following statement contains a magic number: switch (ext.ToLower())              {                  case "bmp":                      s.FilterIndex = 1;                      break;                  case "emf":                      s.FilterIndex = 2;                      break;                  case "exif":                      s.FilterIndex = 3;                      break;                  case "gif":                      s.FilterIndex = 4;                      break;                  case "ico":                      s.FilterIndex = 5;                      break;                  case "jpg":                      s.FilterIndex = 6;                      break;                  case "png":                      s.FilterIndex = 7;                      break;                  case "tiff":                      s.FilterIndex = 8;                      break;                  case "wmf":                      s.FilterIndex = 9;                      break;              }
Magic Number,ImageGlass.Library.Image,ImageInfo,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.Library\Image\ImageInfo.cs,ConvertImage,The following statement contains a magic number: switch (ext.ToLower())              {                  case "bmp":                      s.FilterIndex = 1;                      break;                  case "emf":                      s.FilterIndex = 2;                      break;                  case "exif":                      s.FilterIndex = 3;                      break;                  case "gif":                      s.FilterIndex = 4;                      break;                  case "ico":                      s.FilterIndex = 5;                      break;                  case "jpg":                      s.FilterIndex = 6;                      break;                  case "png":                      s.FilterIndex = 7;                      break;                  case "tiff":                      s.FilterIndex = 8;                      break;                  case "wmf":                      s.FilterIndex = 9;                      break;              }
Magic Number,ImageGlass.Library.Image,ImageInfo,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.Library\Image\ImageInfo.cs,ConvertImage,The following statement contains a magic number: if (s.ShowDialog() == DialogResult.OK)              {                  // used to avoid the following consecutive exceptions:                  // System.ObjectDisposedException                  // System.Runtime.InteropServices.ExternalException                  var clonedPic = new Bitmap(pic);                    switch (s.FilterIndex)                  {                      case 1:                          clonedPic.Save(s.FileName' ImageFormat.Bmp);                          break;                      case 2:                          clonedPic.Save(s.FileName' ImageFormat.Emf);                          break;                      case 3:                          clonedPic.Save(s.FileName' ImageFormat.Exif);                          break;                      case 4:                          clonedPic.Save(s.FileName' ImageFormat.Gif);                          break;                      case 5:                          clonedPic.Save(s.FileName' ImageFormat.Icon);                          break;                      case 6:                          clonedPic.Save(s.FileName' ImageFormat.Jpeg);                          break;                      case 7:                          clonedPic.Save(s.FileName' ImageFormat.Png);                          break;                      case 8:                          clonedPic.Save(s.FileName' ImageFormat.Tiff);                          break;                      case 9:                          clonedPic.Save(s.FileName' ImageFormat.Wmf);                          break;                      case 10:                          using (MemoryStream ms = new MemoryStream())                          {                              try                              {                                  clonedPic.Save(ms' ImageFormat.Png);                                  string base64string = "data:image/png;base64'" + Convert.ToBase64String(ms.ToArray());                                    using (StreamWriter fs = new StreamWriter(s.FileName))                                  {                                      fs.Write(base64string);                                      fs.Flush();                                  }                              }                              catch (Exception ex)                              {                                  MessageBox.Show("Sorry' ImageGlass cannot convert this image because this error: \n" + ex.Message' "Error"' MessageBoxButtons.OK' MessageBoxIcon.Error);                              }                          }                                                    break;                  }                    // free resources                  clonedPic.Dispose();              }
Magic Number,ImageGlass.Library.Image,ImageInfo,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.Library\Image\ImageInfo.cs,ConvertImage,The following statement contains a magic number: if (s.ShowDialog() == DialogResult.OK)              {                  // used to avoid the following consecutive exceptions:                  // System.ObjectDisposedException                  // System.Runtime.InteropServices.ExternalException                  var clonedPic = new Bitmap(pic);                    switch (s.FilterIndex)                  {                      case 1:                          clonedPic.Save(s.FileName' ImageFormat.Bmp);                          break;                      case 2:                          clonedPic.Save(s.FileName' ImageFormat.Emf);                          break;                      case 3:                          clonedPic.Save(s.FileName' ImageFormat.Exif);                          break;                      case 4:                          clonedPic.Save(s.FileName' ImageFormat.Gif);                          break;                      case 5:                          clonedPic.Save(s.FileName' ImageFormat.Icon);                          break;                      case 6:                          clonedPic.Save(s.FileName' ImageFormat.Jpeg);                          break;                      case 7:                          clonedPic.Save(s.FileName' ImageFormat.Png);                          break;                      case 8:                          clonedPic.Save(s.FileName' ImageFormat.Tiff);                          break;                      case 9:                          clonedPic.Save(s.FileName' ImageFormat.Wmf);                          break;                      case 10:                          using (MemoryStream ms = new MemoryStream())                          {                              try                              {                                  clonedPic.Save(ms' ImageFormat.Png);                                  string base64string = "data:image/png;base64'" + Convert.ToBase64String(ms.ToArray());                                    using (StreamWriter fs = new StreamWriter(s.FileName))                                  {                                      fs.Write(base64string);                                      fs.Flush();                                  }                              }                              catch (Exception ex)                              {                                  MessageBox.Show("Sorry' ImageGlass cannot convert this image because this error: \n" + ex.Message' "Error"' MessageBoxButtons.OK' MessageBoxIcon.Error);                              }                          }                                                    break;                  }                    // free resources                  clonedPic.Dispose();              }
Magic Number,ImageGlass.Library.Image,ImageInfo,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.Library\Image\ImageInfo.cs,ConvertImage,The following statement contains a magic number: if (s.ShowDialog() == DialogResult.OK)              {                  // used to avoid the following consecutive exceptions:                  // System.ObjectDisposedException                  // System.Runtime.InteropServices.ExternalException                  var clonedPic = new Bitmap(pic);                    switch (s.FilterIndex)                  {                      case 1:                          clonedPic.Save(s.FileName' ImageFormat.Bmp);                          break;                      case 2:                          clonedPic.Save(s.FileName' ImageFormat.Emf);                          break;                      case 3:                          clonedPic.Save(s.FileName' ImageFormat.Exif);                          break;                      case 4:                          clonedPic.Save(s.FileName' ImageFormat.Gif);                          break;                      case 5:                          clonedPic.Save(s.FileName' ImageFormat.Icon);                          break;                      case 6:                          clonedPic.Save(s.FileName' ImageFormat.Jpeg);                          break;                      case 7:                          clonedPic.Save(s.FileName' ImageFormat.Png);                          break;                      case 8:                          clonedPic.Save(s.FileName' ImageFormat.Tiff);                          break;                      case 9:                          clonedPic.Save(s.FileName' ImageFormat.Wmf);                          break;                      case 10:                          using (MemoryStream ms = new MemoryStream())                          {                              try                              {                                  clonedPic.Save(ms' ImageFormat.Png);                                  string base64string = "data:image/png;base64'" + Convert.ToBase64String(ms.ToArray());                                    using (StreamWriter fs = new StreamWriter(s.FileName))                                  {                                      fs.Write(base64string);                                      fs.Flush();                                  }                              }                              catch (Exception ex)                              {                                  MessageBox.Show("Sorry' ImageGlass cannot convert this image because this error: \n" + ex.Message' "Error"' MessageBoxButtons.OK' MessageBoxIcon.Error);                              }                          }                                                    break;                  }                    // free resources                  clonedPic.Dispose();              }
Magic Number,ImageGlass.Library.Image,ImageInfo,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.Library\Image\ImageInfo.cs,ConvertImage,The following statement contains a magic number: if (s.ShowDialog() == DialogResult.OK)              {                  // used to avoid the following consecutive exceptions:                  // System.ObjectDisposedException                  // System.Runtime.InteropServices.ExternalException                  var clonedPic = new Bitmap(pic);                    switch (s.FilterIndex)                  {                      case 1:                          clonedPic.Save(s.FileName' ImageFormat.Bmp);                          break;                      case 2:                          clonedPic.Save(s.FileName' ImageFormat.Emf);                          break;                      case 3:                          clonedPic.Save(s.FileName' ImageFormat.Exif);                          break;                      case 4:                          clonedPic.Save(s.FileName' ImageFormat.Gif);                          break;                      case 5:                          clonedPic.Save(s.FileName' ImageFormat.Icon);                          break;                      case 6:                          clonedPic.Save(s.FileName' ImageFormat.Jpeg);                          break;                      case 7:                          clonedPic.Save(s.FileName' ImageFormat.Png);                          break;                      case 8:                          clonedPic.Save(s.FileName' ImageFormat.Tiff);                          break;                      case 9:                          clonedPic.Save(s.FileName' ImageFormat.Wmf);                          break;                      case 10:                          using (MemoryStream ms = new MemoryStream())                          {                              try                              {                                  clonedPic.Save(ms' ImageFormat.Png);                                  string base64string = "data:image/png;base64'" + Convert.ToBase64String(ms.ToArray());                                    using (StreamWriter fs = new StreamWriter(s.FileName))                                  {                                      fs.Write(base64string);                                      fs.Flush();                                  }                              }                              catch (Exception ex)                              {                                  MessageBox.Show("Sorry' ImageGlass cannot convert this image because this error: \n" + ex.Message' "Error"' MessageBoxButtons.OK' MessageBoxIcon.Error);                              }                          }                                                    break;                  }                    // free resources                  clonedPic.Dispose();              }
Magic Number,ImageGlass.Library.Image,ImageInfo,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.Library\Image\ImageInfo.cs,ConvertImage,The following statement contains a magic number: if (s.ShowDialog() == DialogResult.OK)              {                  // used to avoid the following consecutive exceptions:                  // System.ObjectDisposedException                  // System.Runtime.InteropServices.ExternalException                  var clonedPic = new Bitmap(pic);                    switch (s.FilterIndex)                  {                      case 1:                          clonedPic.Save(s.FileName' ImageFormat.Bmp);                          break;                      case 2:                          clonedPic.Save(s.FileName' ImageFormat.Emf);                          break;                      case 3:                          clonedPic.Save(s.FileName' ImageFormat.Exif);                          break;                      case 4:                          clonedPic.Save(s.FileName' ImageFormat.Gif);                          break;                      case 5:                          clonedPic.Save(s.FileName' ImageFormat.Icon);                          break;                      case 6:                          clonedPic.Save(s.FileName' ImageFormat.Jpeg);                          break;                      case 7:                          clonedPic.Save(s.FileName' ImageFormat.Png);                          break;                      case 8:                          clonedPic.Save(s.FileName' ImageFormat.Tiff);                          break;                      case 9:                          clonedPic.Save(s.FileName' ImageFormat.Wmf);                          break;                      case 10:                          using (MemoryStream ms = new MemoryStream())                          {                              try                              {                                  clonedPic.Save(ms' ImageFormat.Png);                                  string base64string = "data:image/png;base64'" + Convert.ToBase64String(ms.ToArray());                                    using (StreamWriter fs = new StreamWriter(s.FileName))                                  {                                      fs.Write(base64string);                                      fs.Flush();                                  }                              }                              catch (Exception ex)                              {                                  MessageBox.Show("Sorry' ImageGlass cannot convert this image because this error: \n" + ex.Message' "Error"' MessageBoxButtons.OK' MessageBoxIcon.Error);                              }                          }                                                    break;                  }                    // free resources                  clonedPic.Dispose();              }
Magic Number,ImageGlass.Library.Image,ImageInfo,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.Library\Image\ImageInfo.cs,ConvertImage,The following statement contains a magic number: if (s.ShowDialog() == DialogResult.OK)              {                  // used to avoid the following consecutive exceptions:                  // System.ObjectDisposedException                  // System.Runtime.InteropServices.ExternalException                  var clonedPic = new Bitmap(pic);                    switch (s.FilterIndex)                  {                      case 1:                          clonedPic.Save(s.FileName' ImageFormat.Bmp);                          break;                      case 2:                          clonedPic.Save(s.FileName' ImageFormat.Emf);                          break;                      case 3:                          clonedPic.Save(s.FileName' ImageFormat.Exif);                          break;                      case 4:                          clonedPic.Save(s.FileName' ImageFormat.Gif);                          break;                      case 5:                          clonedPic.Save(s.FileName' ImageFormat.Icon);                          break;                      case 6:                          clonedPic.Save(s.FileName' ImageFormat.Jpeg);                          break;                      case 7:                          clonedPic.Save(s.FileName' ImageFormat.Png);                          break;                      case 8:                          clonedPic.Save(s.FileName' ImageFormat.Tiff);                          break;                      case 9:                          clonedPic.Save(s.FileName' ImageFormat.Wmf);                          break;                      case 10:                          using (MemoryStream ms = new MemoryStream())                          {                              try                              {                                  clonedPic.Save(ms' ImageFormat.Png);                                  string base64string = "data:image/png;base64'" + Convert.ToBase64String(ms.ToArray());                                    using (StreamWriter fs = new StreamWriter(s.FileName))                                  {                                      fs.Write(base64string);                                      fs.Flush();                                  }                              }                              catch (Exception ex)                              {                                  MessageBox.Show("Sorry' ImageGlass cannot convert this image because this error: \n" + ex.Message' "Error"' MessageBoxButtons.OK' MessageBoxIcon.Error);                              }                          }                                                    break;                  }                    // free resources                  clonedPic.Dispose();              }
Magic Number,ImageGlass.Library.Image,ImageInfo,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.Library\Image\ImageInfo.cs,ConvertImage,The following statement contains a magic number: if (s.ShowDialog() == DialogResult.OK)              {                  // used to avoid the following consecutive exceptions:                  // System.ObjectDisposedException                  // System.Runtime.InteropServices.ExternalException                  var clonedPic = new Bitmap(pic);                    switch (s.FilterIndex)                  {                      case 1:                          clonedPic.Save(s.FileName' ImageFormat.Bmp);                          break;                      case 2:                          clonedPic.Save(s.FileName' ImageFormat.Emf);                          break;                      case 3:                          clonedPic.Save(s.FileName' ImageFormat.Exif);                          break;                      case 4:                          clonedPic.Save(s.FileName' ImageFormat.Gif);                          break;                      case 5:                          clonedPic.Save(s.FileName' ImageFormat.Icon);                          break;                      case 6:                          clonedPic.Save(s.FileName' ImageFormat.Jpeg);                          break;                      case 7:                          clonedPic.Save(s.FileName' ImageFormat.Png);                          break;                      case 8:                          clonedPic.Save(s.FileName' ImageFormat.Tiff);                          break;                      case 9:                          clonedPic.Save(s.FileName' ImageFormat.Wmf);                          break;                      case 10:                          using (MemoryStream ms = new MemoryStream())                          {                              try                              {                                  clonedPic.Save(ms' ImageFormat.Png);                                  string base64string = "data:image/png;base64'" + Convert.ToBase64String(ms.ToArray());                                    using (StreamWriter fs = new StreamWriter(s.FileName))                                  {                                      fs.Write(base64string);                                      fs.Flush();                                  }                              }                              catch (Exception ex)                              {                                  MessageBox.Show("Sorry' ImageGlass cannot convert this image because this error: \n" + ex.Message' "Error"' MessageBoxButtons.OK' MessageBoxIcon.Error);                              }                          }                                                    break;                  }                    // free resources                  clonedPic.Dispose();              }
Magic Number,ImageGlass.Library.Image,ImageInfo,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.Library\Image\ImageInfo.cs,ConvertImage,The following statement contains a magic number: if (s.ShowDialog() == DialogResult.OK)              {                  // used to avoid the following consecutive exceptions:                  // System.ObjectDisposedException                  // System.Runtime.InteropServices.ExternalException                  var clonedPic = new Bitmap(pic);                    switch (s.FilterIndex)                  {                      case 1:                          clonedPic.Save(s.FileName' ImageFormat.Bmp);                          break;                      case 2:                          clonedPic.Save(s.FileName' ImageFormat.Emf);                          break;                      case 3:                          clonedPic.Save(s.FileName' ImageFormat.Exif);                          break;                      case 4:                          clonedPic.Save(s.FileName' ImageFormat.Gif);                          break;                      case 5:                          clonedPic.Save(s.FileName' ImageFormat.Icon);                          break;                      case 6:                          clonedPic.Save(s.FileName' ImageFormat.Jpeg);                          break;                      case 7:                          clonedPic.Save(s.FileName' ImageFormat.Png);                          break;                      case 8:                          clonedPic.Save(s.FileName' ImageFormat.Tiff);                          break;                      case 9:                          clonedPic.Save(s.FileName' ImageFormat.Wmf);                          break;                      case 10:                          using (MemoryStream ms = new MemoryStream())                          {                              try                              {                                  clonedPic.Save(ms' ImageFormat.Png);                                  string base64string = "data:image/png;base64'" + Convert.ToBase64String(ms.ToArray());                                    using (StreamWriter fs = new StreamWriter(s.FileName))                                  {                                      fs.Write(base64string);                                      fs.Flush();                                  }                              }                              catch (Exception ex)                              {                                  MessageBox.Show("Sorry' ImageGlass cannot convert this image because this error: \n" + ex.Message' "Error"' MessageBoxButtons.OK' MessageBoxIcon.Error);                              }                          }                                                    break;                  }                    // free resources                  clonedPic.Dispose();              }
Magic Number,ImageGlass.Library.Image,ImageInfo,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.Library\Image\ImageInfo.cs,ConvertImage,The following statement contains a magic number: if (s.ShowDialog() == DialogResult.OK)              {                  // used to avoid the following consecutive exceptions:                  // System.ObjectDisposedException                  // System.Runtime.InteropServices.ExternalException                  var clonedPic = new Bitmap(pic);                    switch (s.FilterIndex)                  {                      case 1:                          clonedPic.Save(s.FileName' ImageFormat.Bmp);                          break;                      case 2:                          clonedPic.Save(s.FileName' ImageFormat.Emf);                          break;                      case 3:                          clonedPic.Save(s.FileName' ImageFormat.Exif);                          break;                      case 4:                          clonedPic.Save(s.FileName' ImageFormat.Gif);                          break;                      case 5:                          clonedPic.Save(s.FileName' ImageFormat.Icon);                          break;                      case 6:                          clonedPic.Save(s.FileName' ImageFormat.Jpeg);                          break;                      case 7:                          clonedPic.Save(s.FileName' ImageFormat.Png);                          break;                      case 8:                          clonedPic.Save(s.FileName' ImageFormat.Tiff);                          break;                      case 9:                          clonedPic.Save(s.FileName' ImageFormat.Wmf);                          break;                      case 10:                          using (MemoryStream ms = new MemoryStream())                          {                              try                              {                                  clonedPic.Save(ms' ImageFormat.Png);                                  string base64string = "data:image/png;base64'" + Convert.ToBase64String(ms.ToArray());                                    using (StreamWriter fs = new StreamWriter(s.FileName))                                  {                                      fs.Write(base64string);                                      fs.Flush();                                  }                              }                              catch (Exception ex)                              {                                  MessageBox.Show("Sorry' ImageGlass cannot convert this image because this error: \n" + ex.Message' "Error"' MessageBoxButtons.OK' MessageBoxIcon.Error);                              }                          }                                                    break;                  }                    // free resources                  clonedPic.Dispose();              }
Magic Number,ImageGlass.Library.Image,ImageInfo,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.Library\Image\ImageInfo.cs,GetFileSize,The following statement contains a magic number: try              {                  double mod = 1024;                  string[] units = new string[] { "B"' "KB"' "MB"' "GB"' "TB"' "PB" };                    System.IO.FileInfo fi = new System.IO.FileInfo(filename);                  double sized = fi.Length * 1.0f;                  int i;                    for (i = 0; sized > mod; i++)                  {                      sized /= mod;                  }                    return string.Format("{0} {1}"' Math.Round(sized' 2)' units[i]);              }              catch { }
Magic Number,ImageGlass.Library.Image,ImageInfo,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.Library\Image\ImageInfo.cs,GetFileSize,The following statement contains a magic number: try              {                  double mod = 1024;                  string[] units = new string[] { "B"' "KB"' "MB"' "GB"' "TB"' "PB" };                    System.IO.FileInfo fi = new System.IO.FileInfo(filename);                  double sized = fi.Length * 1.0f;                  int i;                    for (i = 0; sized > mod; i++)                  {                      sized /= mod;                  }                    return string.Format("{0} {1}"' Math.Round(sized' 2)' units[i]);              }              catch { }
Magic Number,ImageGlass.Library.Image,ImageInfo,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.Library\Image\ImageInfo.cs,GetImageResolution,The following statement contains a magic number: try              {                  double h = 0;                  double v = 0;                    if (System.IO.Path.GetExtension(filename).ToLower() != ".ico")                  {                      System.Drawing.Image img = System.Drawing.Image.FromFile(filename);                        //get HorizontalResolution                       h = Math.Round((double)img.HorizontalResolution' 2);                        //get VerticalResolution                      v = Math.Round((double)img.VerticalResolution' 2);                  }                  else                  {                      Icon ico = new Icon(filename);                        //get HorizontalResolution                       h = Math.Round(ico.ToBitmap().HorizontalResolution' 2);                        //get VerticalResolution                      v = Math.Round(ico.ToBitmap().VerticalResolution' 2);                  }                    return string.Format("{0} x {1}"' h' v);              }              catch {}
Magic Number,ImageGlass.Library.Image,ImageInfo,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.Library\Image\ImageInfo.cs,GetImageResolution,The following statement contains a magic number: try              {                  double h = 0;                  double v = 0;                    if (System.IO.Path.GetExtension(filename).ToLower() != ".ico")                  {                      System.Drawing.Image img = System.Drawing.Image.FromFile(filename);                        //get HorizontalResolution                       h = Math.Round((double)img.HorizontalResolution' 2);                        //get VerticalResolution                      v = Math.Round((double)img.VerticalResolution' 2);                  }                  else                  {                      Icon ico = new Icon(filename);                        //get HorizontalResolution                       h = Math.Round(ico.ToBitmap().HorizontalResolution' 2);                        //get VerticalResolution                      v = Math.Round(ico.ToBitmap().VerticalResolution' 2);                  }                    return string.Format("{0} x {1}"' h' v);              }              catch {}
Magic Number,ImageGlass.Library.Image,ImageInfo,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.Library\Image\ImageInfo.cs,GetImageResolution,The following statement contains a magic number: try              {                  double h = 0;                  double v = 0;                    if (System.IO.Path.GetExtension(filename).ToLower() != ".ico")                  {                      System.Drawing.Image img = System.Drawing.Image.FromFile(filename);                        //get HorizontalResolution                       h = Math.Round((double)img.HorizontalResolution' 2);                        //get VerticalResolution                      v = Math.Round((double)img.VerticalResolution' 2);                  }                  else                  {                      Icon ico = new Icon(filename);                        //get HorizontalResolution                       h = Math.Round(ico.ToBitmap().HorizontalResolution' 2);                        //get VerticalResolution                      v = Math.Round(ico.ToBitmap().VerticalResolution' 2);                  }                    return string.Format("{0} x {1}"' h' v);              }              catch {}
Magic Number,ImageGlass.Library.Image,ImageInfo,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.Library\Image\ImageInfo.cs,GetImageResolution,The following statement contains a magic number: try              {                  double h = 0;                  double v = 0;                    if (System.IO.Path.GetExtension(filename).ToLower() != ".ico")                  {                      System.Drawing.Image img = System.Drawing.Image.FromFile(filename);                        //get HorizontalResolution                       h = Math.Round((double)img.HorizontalResolution' 2);                        //get VerticalResolution                      v = Math.Round((double)img.VerticalResolution' 2);                  }                  else                  {                      Icon ico = new Icon(filename);                        //get HorizontalResolution                       h = Math.Round(ico.ToBitmap().HorizontalResolution' 2);                        //get VerticalResolution                      v = Math.Round(ico.ToBitmap().VerticalResolution' 2);                  }                    return string.Format("{0} x {1}"' h' v);              }              catch {}
Magic Number,ImageGlass.Library.Net,FileDownloader,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.Library\Net\DownloadFile.cs,DownloadFileWithProgress,The following statement contains a magic number: try              {                  _currentFile = GetFileName(URL);                  WebRequest wRemote = default(WebRequest);                  byte[] bBuffer = null;                  bBuffer = new byte[257];                  int iBytesRead = 0;                  int iTotalBytesRead = 0;                    fs = new FileStream(filename' FileMode.Create' FileAccess.Write);                  wRemote = WebRequest.Create(URL);                  WebResponse myWebResponse = wRemote.GetResponse();                    if (FileDownloadSizeObtained != null)                  {                      FileDownloadSizeObtained(myWebResponse.ContentLength);                  }                  Stream sChunks = myWebResponse.GetResponseStream();                    do                  {                      iBytesRead = sChunks.Read(bBuffer' 0' 256);                      fs.Write(bBuffer' 0' iBytesRead);                      iTotalBytesRead += iBytesRead;                        if (myWebResponse.ContentLength < iTotalBytesRead)                      {                          if (AmountDownloadedChanged != null)                          {                              AmountDownloadedChanged(myWebResponse.ContentLength);                          }                      }                      else                      {                          if (AmountDownloadedChanged != null)                          {                              AmountDownloadedChanged(iTotalBytesRead);                          }                      }                  } while (!(iBytesRead == 0));                    sChunks.Close();                  fs.Close();                    if (FileDownloadComplete != null)                  {                      FileDownloadComplete();                  }                    return true;              }              catch (Exception ex)              {                  if ((fs != null))                  {                      fs.Close();                      fs = null;                  }                    if (FileDownloadFailed != null)                  {                      FileDownloadFailed(ex);                  }                  return false;              }
Magic Number,ImageGlass.Library.Net,FileDownloader,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.Library\Net\DownloadFile.cs,DownloadFileWithProgress,The following statement contains a magic number: try              {                  _currentFile = GetFileName(URL);                  WebRequest wRemote = default(WebRequest);                  byte[] bBuffer = null;                  bBuffer = new byte[257];                  int iBytesRead = 0;                  int iTotalBytesRead = 0;                    fs = new FileStream(filename' FileMode.Create' FileAccess.Write);                  wRemote = WebRequest.Create(URL);                  WebResponse myWebResponse = wRemote.GetResponse();                    if (FileDownloadSizeObtained != null)                  {                      FileDownloadSizeObtained(myWebResponse.ContentLength);                  }                  Stream sChunks = myWebResponse.GetResponseStream();                    do                  {                      iBytesRead = sChunks.Read(bBuffer' 0' 256);                      fs.Write(bBuffer' 0' iBytesRead);                      iTotalBytesRead += iBytesRead;                        if (myWebResponse.ContentLength < iTotalBytesRead)                      {                          if (AmountDownloadedChanged != null)                          {                              AmountDownloadedChanged(myWebResponse.ContentLength);                          }                      }                      else                      {                          if (AmountDownloadedChanged != null)                          {                              AmountDownloadedChanged(iTotalBytesRead);                          }                      }                  } while (!(iBytesRead == 0));                    sChunks.Close();                  fs.Close();                    if (FileDownloadComplete != null)                  {                      FileDownloadComplete();                  }                    return true;              }              catch (Exception ex)              {                  if ((fs != null))                  {                      fs.Close();                      fs = null;                  }                    if (FileDownloadFailed != null)                  {                      FileDownloadFailed(ex);                  }                  return false;              }
Magic Number,ImageGlass.Library.Net,FileDownloader,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.Library\Net\DownloadFile.cs,FormatFileSize,The following statement contains a magic number: try              {                  int KB = 1024;                  long MB = KB * KB;                    // Return size of file in kilobytes.                  if (size < KB)                  {                      donVi = " bytes";                      return size.ToString("D");                  }                  else                  {                      double fs = size / KB;                        if (fs < 1000)                      {                          donVi = " KB";                          return fs.ToString("N");                      }                      else if (fs < 1000000)                      {                          donVi = " MB";                          return (size / MB).ToString("N");                      }                      else if (fs < 10000000)                      {                          donVi = " GB";                          return (size / MB / KB).ToString("N");                      }                  }              }              catch              {                  return size.ToString();              }
Magic Number,ImageGlass.Library.Net,FileDownloader,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.Library\Net\DownloadFile.cs,FormatFileSize,The following statement contains a magic number: try              {                  int KB = 1024;                  long MB = KB * KB;                    // Return size of file in kilobytes.                  if (size < KB)                  {                      donVi = " bytes";                      return size.ToString("D");                  }                  else                  {                      double fs = size / KB;                        if (fs < 1000)                      {                          donVi = " KB";                          return fs.ToString("N");                      }                      else if (fs < 1000000)                      {                          donVi = " MB";                          return (size / MB).ToString("N");                      }                      else if (fs < 10000000)                      {                          donVi = " GB";                          return (size / MB / KB).ToString("N");                      }                  }              }              catch              {                  return size.ToString();              }
Magic Number,ImageGlass.Library.Net,FileDownloader,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.Library\Net\DownloadFile.cs,FormatFileSize,The following statement contains a magic number: try              {                  int KB = 1024;                  long MB = KB * KB;                    // Return size of file in kilobytes.                  if (size < KB)                  {                      donVi = " bytes";                      return size.ToString("D");                  }                  else                  {                      double fs = size / KB;                        if (fs < 1000)                      {                          donVi = " KB";                          return fs.ToString("N");                      }                      else if (fs < 1000000)                      {                          donVi = " MB";                          return (size / MB).ToString("N");                      }                      else if (fs < 10000000)                      {                          donVi = " GB";                          return (size / MB / KB).ToString("N");                      }                  }              }              catch              {                  return size.ToString();              }
Magic Number,ImageGlass.Library.Net,FileDownloader,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.Library\Net\DownloadFile.cs,FormatFileSize,The following statement contains a magic number: try              {                  int KB = 1024;                  long MB = KB * KB;                    // Return size of file in kilobytes.                  if (size < KB)                  {                      donVi = " bytes";                      return size.ToString("D");                  }                  else                  {                      double fs = size / KB;                        if (fs < 1000)                      {                          donVi = " KB";                          return fs.ToString("N");                      }                      else if (fs < 1000000)                      {                          donVi = " MB";                          return (size / MB).ToString("N");                      }                      else if (fs < 10000000)                      {                          donVi = " GB";                          return (size / MB / KB).ToString("N");                      }                  }              }              catch              {                  return size.ToString();              }
Missing Default,ImageGlass.Library.Image,ExifThumbReader,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.Library\Image\ExifThumbReader.cs,createException,The following switch statement is missing a default case: switch (gdipErrorCode)              {                  case 1:                      return new ExternalException("Gdiplus Generic Error"' -2147467259);                  case 2:                      return new ArgumentException("Gdiplus Invalid Parameter");                  case 3:                      return new OutOfMemoryException("Gdiplus Out Of Memory");                  case 4:                      return new InvalidOperationException("Gdiplus Object Busy");                  case 5:                      return new OutOfMemoryException("Gdiplus Insufficient Buffer");                  case 7:                      return new ExternalException("Gdiplus Generic Error"' -2147467259);                  case 8:                      return new InvalidOperationException("Gdiplus Wrong State");                  case 9:                      return new ExternalException("Gdiplus Aborted"' -2147467260);                  case 10:                      return new FileNotFoundException("Gdiplus File Not Found");                  case 11:                      return new OverflowException("Gdiplus Over flow");                  case 12:                      return new ExternalException("Gdiplus Access Denied"' -2147024891);                  case 13:                      return new ArgumentException("Gdiplus Unknown Image Format");                  case 18:                      return new ExternalException("Gdiplus Not Initialized"' -2147467259);                  case 20:                      return new ArgumentException("Gdiplus Property Not Supported Error");              }
Missing Default,ImageGlass.Library.Image,ImageInfo,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.Library\Image\ImageInfo.cs,ConvertImage,The following switch statement is missing a default case: switch (ext.ToLower())              {                  case "bmp":                      s.FilterIndex = 1;                      break;                  case "emf":                      s.FilterIndex = 2;                      break;                  case "exif":                      s.FilterIndex = 3;                      break;                  case "gif":                      s.FilterIndex = 4;                      break;                  case "ico":                      s.FilterIndex = 5;                      break;                  case "jpg":                      s.FilterIndex = 6;                      break;                  case "png":                      s.FilterIndex = 7;                      break;                  case "tiff":                      s.FilterIndex = 8;                      break;                  case "wmf":                      s.FilterIndex = 9;                      break;              }
Missing Default,ImageGlass.Library.Image,ImageInfo,C:\repos\d2phap_ImageGlass\Source\Components\ImageGlass.Library\Image\ImageInfo.cs,ConvertImage,The following switch statement is missing a default case: switch (s.FilterIndex)                  {                      case 1:                          clonedPic.Save(s.FileName' ImageFormat.Bmp);                          break;                      case 2:                          clonedPic.Save(s.FileName' ImageFormat.Emf);                          break;                      case 3:                          clonedPic.Save(s.FileName' ImageFormat.Exif);                          break;                      case 4:                          clonedPic.Save(s.FileName' ImageFormat.Gif);                          break;                      case 5:                          clonedPic.Save(s.FileName' ImageFormat.Icon);                          break;                      case 6:                          clonedPic.Save(s.FileName' ImageFormat.Jpeg);                          break;                      case 7:                          clonedPic.Save(s.FileName' ImageFormat.Png);                          break;                      case 8:                          clonedPic.Save(s.FileName' ImageFormat.Tiff);                          break;                      case 9:                          clonedPic.Save(s.FileName' ImageFormat.Wmf);                          break;                      case 10:                          using (MemoryStream ms = new MemoryStream())                          {                              try                              {                                  clonedPic.Save(ms' ImageFormat.Png);                                  string base64string = "data:image/png;base64'" + Convert.ToBase64String(ms.ToArray());                                    using (StreamWriter fs = new StreamWriter(s.FileName))                                  {                                      fs.Write(base64string);                                      fs.Flush();                                  }                              }                              catch (Exception ex)                              {                                  MessageBox.Show("Sorry' ImageGlass cannot convert this image because this error: \n" + ex.Message' "Error"' MessageBoxButtons.OK' MessageBoxIcon.Error);                              }                          }                                                    break;                  }
